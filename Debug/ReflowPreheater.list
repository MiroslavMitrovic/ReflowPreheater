
ReflowPreheater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de9c  08040190  08040190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0804e030  0804e030  0001e030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804e6e0  0804e6e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0804e6e0  0804e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804e6e8  0804e6e8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804e6e8  0804e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804e6ec  0804e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0804e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000338  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000520  20000520  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c4b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de6  00000000  00000000  00034e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00037c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001148  00000000  00000000  00038ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003aba  00000000  00000000  0003a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015040  00000000  00000000  0003dada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d09ef  00000000  00000000  00052b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  00123509  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006614  00000000  00000000  001235cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	; (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	; (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	; (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	200001e8 	.word	0x200001e8
 80401ac:	00000000 	.word	0x00000000
 80401b0:	0804e014 	.word	0x0804e014

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	; (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	; (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	; (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	200001ec 	.word	0x200001ec
 80401cc:	0804e014 	.word	0x0804e014

080401d0 <strlen>:
 80401d0:	4603      	mov	r3, r0
 80401d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401d6:	2a00      	cmp	r2, #0
 80401d8:	d1fb      	bne.n	80401d2 <strlen+0x2>
 80401da:	1a18      	subs	r0, r3, r0
 80401dc:	3801      	subs	r0, #1
 80401de:	4770      	bx	lr

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_drsub>:
 8040280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8040284:	e002      	b.n	804028c <__adddf3>
 8040286:	bf00      	nop

08040288 <__aeabi_dsub>:
 8040288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0804028c <__adddf3>:
 804028c:	b530      	push	{r4, r5, lr}
 804028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040296:	ea94 0f05 	teq	r4, r5
 804029a:	bf08      	it	eq
 804029c:	ea90 0f02 	teqeq	r0, r2
 80402a0:	bf1f      	itttt	ne
 80402a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402b2:	f000 80e2 	beq.w	804047a <__adddf3+0x1ee>
 80402b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402be:	bfb8      	it	lt
 80402c0:	426d      	neglt	r5, r5
 80402c2:	dd0c      	ble.n	80402de <__adddf3+0x52>
 80402c4:	442c      	add	r4, r5
 80402c6:	ea80 0202 	eor.w	r2, r0, r2
 80402ca:	ea81 0303 	eor.w	r3, r1, r3
 80402ce:	ea82 0000 	eor.w	r0, r2, r0
 80402d2:	ea83 0101 	eor.w	r1, r3, r1
 80402d6:	ea80 0202 	eor.w	r2, r0, r2
 80402da:	ea81 0303 	eor.w	r3, r1, r3
 80402de:	2d36      	cmp	r5, #54	; 0x36
 80402e0:	bf88      	it	hi
 80402e2:	bd30      	pophi	{r4, r5, pc}
 80402e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402f4:	d002      	beq.n	80402fc <__adddf3+0x70>
 80402f6:	4240      	negs	r0, r0
 80402f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040308:	d002      	beq.n	8040310 <__adddf3+0x84>
 804030a:	4252      	negs	r2, r2
 804030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040310:	ea94 0f05 	teq	r4, r5
 8040314:	f000 80a7 	beq.w	8040466 <__adddf3+0x1da>
 8040318:	f1a4 0401 	sub.w	r4, r4, #1
 804031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040320:	db0d      	blt.n	804033e <__adddf3+0xb2>
 8040322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040326:	fa22 f205 	lsr.w	r2, r2, r5
 804032a:	1880      	adds	r0, r0, r2
 804032c:	f141 0100 	adc.w	r1, r1, #0
 8040330:	fa03 f20e 	lsl.w	r2, r3, lr
 8040334:	1880      	adds	r0, r0, r2
 8040336:	fa43 f305 	asr.w	r3, r3, r5
 804033a:	4159      	adcs	r1, r3
 804033c:	e00e      	b.n	804035c <__adddf3+0xd0>
 804033e:	f1a5 0520 	sub.w	r5, r5, #32
 8040342:	f10e 0e20 	add.w	lr, lr, #32
 8040346:	2a01      	cmp	r2, #1
 8040348:	fa03 fc0e 	lsl.w	ip, r3, lr
 804034c:	bf28      	it	cs
 804034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040352:	fa43 f305 	asr.w	r3, r3, r5
 8040356:	18c0      	adds	r0, r0, r3
 8040358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040360:	d507      	bpl.n	8040372 <__adddf3+0xe6>
 8040362:	f04f 0e00 	mov.w	lr, #0
 8040366:	f1dc 0c00 	rsbs	ip, ip, #0
 804036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040376:	d31b      	bcc.n	80403b0 <__adddf3+0x124>
 8040378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804037c:	d30c      	bcc.n	8040398 <__adddf3+0x10c>
 804037e:	0849      	lsrs	r1, r1, #1
 8040380:	ea5f 0030 	movs.w	r0, r0, rrx
 8040384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040388:	f104 0401 	add.w	r4, r4, #1
 804038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040394:	f080 809a 	bcs.w	80404cc <__adddf3+0x240>
 8040398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804039c:	bf08      	it	eq
 804039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403a2:	f150 0000 	adcs.w	r0, r0, #0
 80403a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403aa:	ea41 0105 	orr.w	r1, r1, r5
 80403ae:	bd30      	pop	{r4, r5, pc}
 80403b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403b4:	4140      	adcs	r0, r0
 80403b6:	eb41 0101 	adc.w	r1, r1, r1
 80403ba:	3c01      	subs	r4, #1
 80403bc:	bf28      	it	cs
 80403be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403c2:	d2e9      	bcs.n	8040398 <__adddf3+0x10c>
 80403c4:	f091 0f00 	teq	r1, #0
 80403c8:	bf04      	itt	eq
 80403ca:	4601      	moveq	r1, r0
 80403cc:	2000      	moveq	r0, #0
 80403ce:	fab1 f381 	clz	r3, r1
 80403d2:	bf08      	it	eq
 80403d4:	3320      	addeq	r3, #32
 80403d6:	f1a3 030b 	sub.w	r3, r3, #11
 80403da:	f1b3 0220 	subs.w	r2, r3, #32
 80403de:	da0c      	bge.n	80403fa <__adddf3+0x16e>
 80403e0:	320c      	adds	r2, #12
 80403e2:	dd08      	ble.n	80403f6 <__adddf3+0x16a>
 80403e4:	f102 0c14 	add.w	ip, r2, #20
 80403e8:	f1c2 020c 	rsb	r2, r2, #12
 80403ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80403f0:	fa21 f102 	lsr.w	r1, r1, r2
 80403f4:	e00c      	b.n	8040410 <__adddf3+0x184>
 80403f6:	f102 0214 	add.w	r2, r2, #20
 80403fa:	bfd8      	it	le
 80403fc:	f1c2 0c20 	rsble	ip, r2, #32
 8040400:	fa01 f102 	lsl.w	r1, r1, r2
 8040404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040408:	bfdc      	itt	le
 804040a:	ea41 010c 	orrle.w	r1, r1, ip
 804040e:	4090      	lslle	r0, r2
 8040410:	1ae4      	subs	r4, r4, r3
 8040412:	bfa2      	ittt	ge
 8040414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040418:	4329      	orrge	r1, r5
 804041a:	bd30      	popge	{r4, r5, pc}
 804041c:	ea6f 0404 	mvn.w	r4, r4
 8040420:	3c1f      	subs	r4, #31
 8040422:	da1c      	bge.n	804045e <__adddf3+0x1d2>
 8040424:	340c      	adds	r4, #12
 8040426:	dc0e      	bgt.n	8040446 <__adddf3+0x1ba>
 8040428:	f104 0414 	add.w	r4, r4, #20
 804042c:	f1c4 0220 	rsb	r2, r4, #32
 8040430:	fa20 f004 	lsr.w	r0, r0, r4
 8040434:	fa01 f302 	lsl.w	r3, r1, r2
 8040438:	ea40 0003 	orr.w	r0, r0, r3
 804043c:	fa21 f304 	lsr.w	r3, r1, r4
 8040440:	ea45 0103 	orr.w	r1, r5, r3
 8040444:	bd30      	pop	{r4, r5, pc}
 8040446:	f1c4 040c 	rsb	r4, r4, #12
 804044a:	f1c4 0220 	rsb	r2, r4, #32
 804044e:	fa20 f002 	lsr.w	r0, r0, r2
 8040452:	fa01 f304 	lsl.w	r3, r1, r4
 8040456:	ea40 0003 	orr.w	r0, r0, r3
 804045a:	4629      	mov	r1, r5
 804045c:	bd30      	pop	{r4, r5, pc}
 804045e:	fa21 f004 	lsr.w	r0, r1, r4
 8040462:	4629      	mov	r1, r5
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f094 0f00 	teq	r4, #0
 804046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804046e:	bf06      	itte	eq
 8040470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040474:	3401      	addeq	r4, #1
 8040476:	3d01      	subne	r5, #1
 8040478:	e74e      	b.n	8040318 <__adddf3+0x8c>
 804047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804047e:	bf18      	it	ne
 8040480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040484:	d029      	beq.n	80404da <__adddf3+0x24e>
 8040486:	ea94 0f05 	teq	r4, r5
 804048a:	bf08      	it	eq
 804048c:	ea90 0f02 	teqeq	r0, r2
 8040490:	d005      	beq.n	804049e <__adddf3+0x212>
 8040492:	ea54 0c00 	orrs.w	ip, r4, r0
 8040496:	bf04      	itt	eq
 8040498:	4619      	moveq	r1, r3
 804049a:	4610      	moveq	r0, r2
 804049c:	bd30      	pop	{r4, r5, pc}
 804049e:	ea91 0f03 	teq	r1, r3
 80404a2:	bf1e      	ittt	ne
 80404a4:	2100      	movne	r1, #0
 80404a6:	2000      	movne	r0, #0
 80404a8:	bd30      	popne	{r4, r5, pc}
 80404aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ae:	d105      	bne.n	80404bc <__adddf3+0x230>
 80404b0:	0040      	lsls	r0, r0, #1
 80404b2:	4149      	adcs	r1, r1
 80404b4:	bf28      	it	cs
 80404b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404ba:	bd30      	pop	{r4, r5, pc}
 80404bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404c0:	bf3c      	itt	cc
 80404c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404c6:	bd30      	popcc	{r4, r5, pc}
 80404c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404d4:	f04f 0000 	mov.w	r0, #0
 80404d8:	bd30      	pop	{r4, r5, pc}
 80404da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404de:	bf1a      	itte	ne
 80404e0:	4619      	movne	r1, r3
 80404e2:	4610      	movne	r0, r2
 80404e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404e8:	bf1c      	itt	ne
 80404ea:	460b      	movne	r3, r1
 80404ec:	4602      	movne	r2, r0
 80404ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404f2:	bf06      	itte	eq
 80404f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404f8:	ea91 0f03 	teqeq	r1, r3
 80404fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040500:	bd30      	pop	{r4, r5, pc}
 8040502:	bf00      	nop

08040504 <__aeabi_ui2d>:
 8040504:	f090 0f00 	teq	r0, #0
 8040508:	bf04      	itt	eq
 804050a:	2100      	moveq	r1, #0
 804050c:	4770      	bxeq	lr
 804050e:	b530      	push	{r4, r5, lr}
 8040510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040518:	f04f 0500 	mov.w	r5, #0
 804051c:	f04f 0100 	mov.w	r1, #0
 8040520:	e750      	b.n	80403c4 <__adddf3+0x138>
 8040522:	bf00      	nop

08040524 <__aeabi_i2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804053c:	bf48      	it	mi
 804053e:	4240      	negmi	r0, r0
 8040540:	f04f 0100 	mov.w	r1, #0
 8040544:	e73e      	b.n	80403c4 <__adddf3+0x138>
 8040546:	bf00      	nop

08040548 <__aeabi_f2d>:
 8040548:	0042      	lsls	r2, r0, #1
 804054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040556:	bf1f      	itttt	ne
 8040558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040564:	4770      	bxne	lr
 8040566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804056a:	bf08      	it	eq
 804056c:	4770      	bxeq	lr
 804056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040572:	bf04      	itt	eq
 8040574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040578:	4770      	bxeq	lr
 804057a:	b530      	push	{r4, r5, lr}
 804057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040588:	e71c      	b.n	80403c4 <__adddf3+0x138>
 804058a:	bf00      	nop

0804058c <__aeabi_ul2d>:
 804058c:	ea50 0201 	orrs.w	r2, r0, r1
 8040590:	bf08      	it	eq
 8040592:	4770      	bxeq	lr
 8040594:	b530      	push	{r4, r5, lr}
 8040596:	f04f 0500 	mov.w	r5, #0
 804059a:	e00a      	b.n	80405b2 <__aeabi_l2d+0x16>

0804059c <__aeabi_l2d>:
 804059c:	ea50 0201 	orrs.w	r2, r0, r1
 80405a0:	bf08      	it	eq
 80405a2:	4770      	bxeq	lr
 80405a4:	b530      	push	{r4, r5, lr}
 80405a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405aa:	d502      	bpl.n	80405b2 <__aeabi_l2d+0x16>
 80405ac:	4240      	negs	r0, r0
 80405ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405be:	f43f aed8 	beq.w	8040372 <__adddf3+0xe6>
 80405c2:	f04f 0203 	mov.w	r2, #3
 80405c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ca:	bf18      	it	ne
 80405cc:	3203      	addne	r2, #3
 80405ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405d2:	bf18      	it	ne
 80405d4:	3203      	addne	r2, #3
 80405d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405da:	f1c2 0320 	rsb	r3, r2, #32
 80405de:	fa00 fc03 	lsl.w	ip, r0, r3
 80405e2:	fa20 f002 	lsr.w	r0, r0, r2
 80405e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80405ea:	ea40 000e 	orr.w	r0, r0, lr
 80405ee:	fa21 f102 	lsr.w	r1, r1, r2
 80405f2:	4414      	add	r4, r2
 80405f4:	e6bd      	b.n	8040372 <__adddf3+0xe6>
 80405f6:	bf00      	nop

080405f8 <__aeabi_dmul>:
 80405f8:	b570      	push	{r4, r5, r6, lr}
 80405fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040606:	bf1d      	ittte	ne
 8040608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804060c:	ea94 0f0c 	teqne	r4, ip
 8040610:	ea95 0f0c 	teqne	r5, ip
 8040614:	f000 f8de 	bleq	80407d4 <__aeabi_dmul+0x1dc>
 8040618:	442c      	add	r4, r5
 804061a:	ea81 0603 	eor.w	r6, r1, r3
 804061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804062a:	bf18      	it	ne
 804062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040638:	d038      	beq.n	80406ac <__aeabi_dmul+0xb4>
 804063a:	fba0 ce02 	umull	ip, lr, r0, r2
 804063e:	f04f 0500 	mov.w	r5, #0
 8040642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804064e:	f04f 0600 	mov.w	r6, #0
 8040652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040656:	f09c 0f00 	teq	ip, #0
 804065a:	bf18      	it	ne
 804065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804066c:	d204      	bcs.n	8040678 <__aeabi_dmul+0x80>
 804066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040672:	416d      	adcs	r5, r5
 8040674:	eb46 0606 	adc.w	r6, r6, r6
 8040678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040690:	bf88      	it	hi
 8040692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040696:	d81e      	bhi.n	80406d6 <__aeabi_dmul+0xde>
 8040698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804069c:	bf08      	it	eq
 804069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406a2:	f150 0000 	adcs.w	r0, r0, #0
 80406a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406aa:	bd70      	pop	{r4, r5, r6, pc}
 80406ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406b0:	ea46 0101 	orr.w	r1, r6, r1
 80406b4:	ea40 0002 	orr.w	r0, r0, r2
 80406b8:	ea81 0103 	eor.w	r1, r1, r3
 80406bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406c0:	bfc2      	ittt	gt
 80406c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	popgt	{r4, r5, r6, pc}
 80406cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406d0:	f04f 0e00 	mov.w	lr, #0
 80406d4:	3c01      	subs	r4, #1
 80406d6:	f300 80ab 	bgt.w	8040830 <__aeabi_dmul+0x238>
 80406da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406de:	bfde      	ittt	le
 80406e0:	2000      	movle	r0, #0
 80406e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406e6:	bd70      	pople	{r4, r5, r6, pc}
 80406e8:	f1c4 0400 	rsb	r4, r4, #0
 80406ec:	3c20      	subs	r4, #32
 80406ee:	da35      	bge.n	804075c <__aeabi_dmul+0x164>
 80406f0:	340c      	adds	r4, #12
 80406f2:	dc1b      	bgt.n	804072c <__aeabi_dmul+0x134>
 80406f4:	f104 0414 	add.w	r4, r4, #20
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f305 	lsl.w	r3, r0, r5
 8040700:	fa20 f004 	lsr.w	r0, r0, r4
 8040704:	fa01 f205 	lsl.w	r2, r1, r5
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040718:	fa21 f604 	lsr.w	r6, r1, r4
 804071c:	eb42 0106 	adc.w	r1, r2, r6
 8040720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040724:	bf08      	it	eq
 8040726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804072a:	bd70      	pop	{r4, r5, r6, pc}
 804072c:	f1c4 040c 	rsb	r4, r4, #12
 8040730:	f1c4 0520 	rsb	r5, r4, #32
 8040734:	fa00 f304 	lsl.w	r3, r0, r4
 8040738:	fa20 f005 	lsr.w	r0, r0, r5
 804073c:	fa01 f204 	lsl.w	r2, r1, r4
 8040740:	ea40 0002 	orr.w	r0, r0, r2
 8040744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804074c:	f141 0100 	adc.w	r1, r1, #0
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f1c4 0520 	rsb	r5, r4, #32
 8040760:	fa00 f205 	lsl.w	r2, r0, r5
 8040764:	ea4e 0e02 	orr.w	lr, lr, r2
 8040768:	fa20 f304 	lsr.w	r3, r0, r4
 804076c:	fa01 f205 	lsl.w	r2, r1, r5
 8040770:	ea43 0302 	orr.w	r3, r3, r2
 8040774:	fa21 f004 	lsr.w	r0, r1, r4
 8040778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804077c:	fa21 f204 	lsr.w	r2, r1, r4
 8040780:	ea20 0002 	bic.w	r0, r0, r2
 8040784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804078c:	bf08      	it	eq
 804078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040792:	bd70      	pop	{r4, r5, r6, pc}
 8040794:	f094 0f00 	teq	r4, #0
 8040798:	d10f      	bne.n	80407ba <__aeabi_dmul+0x1c2>
 804079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804079e:	0040      	lsls	r0, r0, #1
 80407a0:	eb41 0101 	adc.w	r1, r1, r1
 80407a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407a8:	bf08      	it	eq
 80407aa:	3c01      	subeq	r4, #1
 80407ac:	d0f7      	beq.n	804079e <__aeabi_dmul+0x1a6>
 80407ae:	ea41 0106 	orr.w	r1, r1, r6
 80407b2:	f095 0f00 	teq	r5, #0
 80407b6:	bf18      	it	ne
 80407b8:	4770      	bxne	lr
 80407ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407be:	0052      	lsls	r2, r2, #1
 80407c0:	eb43 0303 	adc.w	r3, r3, r3
 80407c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3d01      	subeq	r5, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1c6>
 80407ce:	ea43 0306 	orr.w	r3, r3, r6
 80407d2:	4770      	bx	lr
 80407d4:	ea94 0f0c 	teq	r4, ip
 80407d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407dc:	bf18      	it	ne
 80407de:	ea95 0f0c 	teqne	r5, ip
 80407e2:	d00c      	beq.n	80407fe <__aeabi_dmul+0x206>
 80407e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407e8:	bf18      	it	ne
 80407ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407ee:	d1d1      	bne.n	8040794 <__aeabi_dmul+0x19c>
 80407f0:	ea81 0103 	eor.w	r1, r1, r3
 80407f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407f8:	f04f 0000 	mov.w	r0, #0
 80407fc:	bd70      	pop	{r4, r5, r6, pc}
 80407fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040802:	bf06      	itte	eq
 8040804:	4610      	moveq	r0, r2
 8040806:	4619      	moveq	r1, r3
 8040808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080c:	d019      	beq.n	8040842 <__aeabi_dmul+0x24a>
 804080e:	ea94 0f0c 	teq	r4, ip
 8040812:	d102      	bne.n	804081a <__aeabi_dmul+0x222>
 8040814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040818:	d113      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804081a:	ea95 0f0c 	teq	r5, ip
 804081e:	d105      	bne.n	804082c <__aeabi_dmul+0x234>
 8040820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040824:	bf1c      	itt	ne
 8040826:	4610      	movne	r0, r2
 8040828:	4619      	movne	r1, r3
 804082a:	d10a      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804082c:	ea81 0103 	eor.w	r1, r1, r3
 8040830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804083c:	f04f 0000 	mov.w	r0, #0
 8040840:	bd70      	pop	{r4, r5, r6, pc}
 8040842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804084a:	bd70      	pop	{r4, r5, r6, pc}

0804084c <__aeabi_ddiv>:
 804084c:	b570      	push	{r4, r5, r6, lr}
 804084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804085a:	bf1d      	ittte	ne
 804085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040860:	ea94 0f0c 	teqne	r4, ip
 8040864:	ea95 0f0c 	teqne	r5, ip
 8040868:	f000 f8a7 	bleq	80409ba <__aeabi_ddiv+0x16e>
 804086c:	eba4 0405 	sub.w	r4, r4, r5
 8040870:	ea81 0e03 	eor.w	lr, r1, r3
 8040874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804087c:	f000 8088 	beq.w	8040990 <__aeabi_ddiv+0x144>
 8040880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408a4:	429d      	cmp	r5, r3
 80408a6:	bf08      	it	eq
 80408a8:	4296      	cmpeq	r6, r2
 80408aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408b2:	d202      	bcs.n	80408ba <__aeabi_ddiv+0x6e>
 80408b4:	085b      	lsrs	r3, r3, #1
 80408b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ba:	1ab6      	subs	r6, r6, r2
 80408bc:	eb65 0503 	sbc.w	r5, r5, r3
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ee:	bf22      	ittt	cs
 80408f0:	1ab6      	subcs	r6, r6, r2
 80408f2:	4675      	movcs	r5, lr
 80408f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408f8:	085b      	lsrs	r3, r3, #1
 80408fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8040902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040906:	bf22      	ittt	cs
 8040908:	1ab6      	subcs	r6, r6, r2
 804090a:	4675      	movcs	r5, lr
 804090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040910:	085b      	lsrs	r3, r3, #1
 8040912:	ea4f 0232 	mov.w	r2, r2, rrx
 8040916:	ebb6 0e02 	subs.w	lr, r6, r2
 804091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804091e:	bf22      	ittt	cs
 8040920:	1ab6      	subcs	r6, r6, r2
 8040922:	4675      	movcs	r5, lr
 8040924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040928:	ea55 0e06 	orrs.w	lr, r5, r6
 804092c:	d018      	beq.n	8040960 <__aeabi_ddiv+0x114>
 804092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804094a:	d1c0      	bne.n	80408ce <__aeabi_ddiv+0x82>
 804094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040950:	d10b      	bne.n	804096a <__aeabi_ddiv+0x11e>
 8040952:	ea41 0100 	orr.w	r1, r1, r0
 8040956:	f04f 0000 	mov.w	r0, #0
 804095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804095e:	e7b6      	b.n	80408ce <__aeabi_ddiv+0x82>
 8040960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040964:	bf04      	itt	eq
 8040966:	4301      	orreq	r1, r0
 8040968:	2000      	moveq	r0, #0
 804096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804096e:	bf88      	it	hi
 8040970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040974:	f63f aeaf 	bhi.w	80406d6 <__aeabi_dmul+0xde>
 8040978:	ebb5 0c03 	subs.w	ip, r5, r3
 804097c:	bf04      	itt	eq
 804097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040986:	f150 0000 	adcs.w	r0, r0, #0
 804098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804098e:	bd70      	pop	{r4, r5, r6, pc}
 8040990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804099c:	bfc2      	ittt	gt
 804099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409a6:	bd70      	popgt	{r4, r5, r6, pc}
 80409a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409ac:	f04f 0e00 	mov.w	lr, #0
 80409b0:	3c01      	subs	r4, #1
 80409b2:	e690      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409b4:	ea45 0e06 	orr.w	lr, r5, r6
 80409b8:	e68d      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409be:	ea94 0f0c 	teq	r4, ip
 80409c2:	bf08      	it	eq
 80409c4:	ea95 0f0c 	teqeq	r5, ip
 80409c8:	f43f af3b 	beq.w	8040842 <__aeabi_dmul+0x24a>
 80409cc:	ea94 0f0c 	teq	r4, ip
 80409d0:	d10a      	bne.n	80409e8 <__aeabi_ddiv+0x19c>
 80409d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409d6:	f47f af34 	bne.w	8040842 <__aeabi_dmul+0x24a>
 80409da:	ea95 0f0c 	teq	r5, ip
 80409de:	f47f af25 	bne.w	804082c <__aeabi_dmul+0x234>
 80409e2:	4610      	mov	r0, r2
 80409e4:	4619      	mov	r1, r3
 80409e6:	e72c      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409e8:	ea95 0f0c 	teq	r5, ip
 80409ec:	d106      	bne.n	80409fc <__aeabi_ddiv+0x1b0>
 80409ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409f2:	f43f aefd 	beq.w	80407f0 <__aeabi_dmul+0x1f8>
 80409f6:	4610      	mov	r0, r2
 80409f8:	4619      	mov	r1, r3
 80409fa:	e722      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a00:	bf18      	it	ne
 8040a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a06:	f47f aec5 	bne.w	8040794 <__aeabi_dmul+0x19c>
 8040a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a0e:	f47f af0d 	bne.w	804082c <__aeabi_dmul+0x234>
 8040a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a16:	f47f aeeb 	bne.w	80407f0 <__aeabi_dmul+0x1f8>
 8040a1a:	e712      	b.n	8040842 <__aeabi_dmul+0x24a>

08040a1c <__gedf2>:
 8040a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a20:	e006      	b.n	8040a30 <__cmpdf2+0x4>
 8040a22:	bf00      	nop

08040a24 <__ledf2>:
 8040a24:	f04f 0c01 	mov.w	ip, #1
 8040a28:	e002      	b.n	8040a30 <__cmpdf2+0x4>
 8040a2a:	bf00      	nop

08040a2c <__cmpdf2>:
 8040a2c:	f04f 0c01 	mov.w	ip, #1
 8040a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a40:	bf18      	it	ne
 8040a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a46:	d01b      	beq.n	8040a80 <__cmpdf2+0x54>
 8040a48:	b001      	add	sp, #4
 8040a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a4e:	bf0c      	ite	eq
 8040a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a54:	ea91 0f03 	teqne	r1, r3
 8040a58:	bf02      	ittt	eq
 8040a5a:	ea90 0f02 	teqeq	r0, r2
 8040a5e:	2000      	moveq	r0, #0
 8040a60:	4770      	bxeq	lr
 8040a62:	f110 0f00 	cmn.w	r0, #0
 8040a66:	ea91 0f03 	teq	r1, r3
 8040a6a:	bf58      	it	pl
 8040a6c:	4299      	cmppl	r1, r3
 8040a6e:	bf08      	it	eq
 8040a70:	4290      	cmpeq	r0, r2
 8040a72:	bf2c      	ite	cs
 8040a74:	17d8      	asrcs	r0, r3, #31
 8040a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a7a:	f040 0001 	orr.w	r0, r0, #1
 8040a7e:	4770      	bx	lr
 8040a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a88:	d102      	bne.n	8040a90 <__cmpdf2+0x64>
 8040a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a8e:	d107      	bne.n	8040aa0 <__cmpdf2+0x74>
 8040a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a98:	d1d6      	bne.n	8040a48 <__cmpdf2+0x1c>
 8040a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a9e:	d0d3      	beq.n	8040a48 <__cmpdf2+0x1c>
 8040aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040aa4:	4770      	bx	lr
 8040aa6:	bf00      	nop

08040aa8 <__aeabi_cdrcmple>:
 8040aa8:	4684      	mov	ip, r0
 8040aaa:	4610      	mov	r0, r2
 8040aac:	4662      	mov	r2, ip
 8040aae:	468c      	mov	ip, r1
 8040ab0:	4619      	mov	r1, r3
 8040ab2:	4663      	mov	r3, ip
 8040ab4:	e000      	b.n	8040ab8 <__aeabi_cdcmpeq>
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_cdcmpeq>:
 8040ab8:	b501      	push	{r0, lr}
 8040aba:	f7ff ffb7 	bl	8040a2c <__cmpdf2>
 8040abe:	2800      	cmp	r0, #0
 8040ac0:	bf48      	it	mi
 8040ac2:	f110 0f00 	cmnmi.w	r0, #0
 8040ac6:	bd01      	pop	{r0, pc}

08040ac8 <__aeabi_dcmpeq>:
 8040ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040acc:	f7ff fff4 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ad0:	bf0c      	ite	eq
 8040ad2:	2001      	moveq	r0, #1
 8040ad4:	2000      	movne	r0, #0
 8040ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ada:	bf00      	nop

08040adc <__aeabi_dcmplt>:
 8040adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae0:	f7ff ffea 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ae4:	bf34      	ite	cc
 8040ae6:	2001      	movcc	r0, #1
 8040ae8:	2000      	movcs	r0, #0
 8040aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aee:	bf00      	nop

08040af0 <__aeabi_dcmple>:
 8040af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040af4:	f7ff ffe0 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040af8:	bf94      	ite	ls
 8040afa:	2001      	movls	r0, #1
 8040afc:	2000      	movhi	r0, #0
 8040afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b02:	bf00      	nop

08040b04 <__aeabi_dcmpge>:
 8040b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b08:	f7ff ffce 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b0c:	bf94      	ite	ls
 8040b0e:	2001      	movls	r0, #1
 8040b10:	2000      	movhi	r0, #0
 8040b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b16:	bf00      	nop

08040b18 <__aeabi_dcmpgt>:
 8040b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b1c:	f7ff ffc4 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b20:	bf34      	ite	cc
 8040b22:	2001      	movcc	r0, #1
 8040b24:	2000      	movcs	r0, #0
 8040b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b2a:	bf00      	nop

08040b2c <__aeabi_dcmpun>:
 8040b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b34:	d102      	bne.n	8040b3c <__aeabi_dcmpun+0x10>
 8040b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b3a:	d10a      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b44:	d102      	bne.n	8040b4c <__aeabi_dcmpun+0x20>
 8040b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b4a:	d102      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b4c:	f04f 0000 	mov.w	r0, #0
 8040b50:	4770      	bx	lr
 8040b52:	f04f 0001 	mov.w	r0, #1
 8040b56:	4770      	bx	lr

08040b58 <__aeabi_d2iz>:
 8040b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b60:	d215      	bcs.n	8040b8e <__aeabi_d2iz+0x36>
 8040b62:	d511      	bpl.n	8040b88 <__aeabi_d2iz+0x30>
 8040b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b6c:	d912      	bls.n	8040b94 <__aeabi_d2iz+0x3c>
 8040b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8040b82:	bf18      	it	ne
 8040b84:	4240      	negne	r0, r0
 8040b86:	4770      	bx	lr
 8040b88:	f04f 0000 	mov.w	r0, #0
 8040b8c:	4770      	bx	lr
 8040b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b92:	d105      	bne.n	8040ba0 <__aeabi_d2iz+0x48>
 8040b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b98:	bf08      	it	eq
 8040b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b9e:	4770      	bx	lr
 8040ba0:	f04f 0000 	mov.w	r0, #0
 8040ba4:	4770      	bx	lr
 8040ba6:	bf00      	nop

08040ba8 <__aeabi_d2uiz>:
 8040ba8:	004a      	lsls	r2, r1, #1
 8040baa:	d211      	bcs.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040bb0:	d211      	bcs.n	8040bd6 <__aeabi_d2uiz+0x2e>
 8040bb2:	d50d      	bpl.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040bbc:	d40e      	bmi.n	8040bdc <__aeabi_d2uiz+0x34>
 8040bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040bca:	fa23 f002 	lsr.w	r0, r3, r2
 8040bce:	4770      	bx	lr
 8040bd0:	f04f 0000 	mov.w	r0, #0
 8040bd4:	4770      	bx	lr
 8040bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bda:	d102      	bne.n	8040be2 <__aeabi_d2uiz+0x3a>
 8040bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8040be0:	4770      	bx	lr
 8040be2:	f04f 0000 	mov.w	r0, #0
 8040be6:	4770      	bx	lr

08040be8 <__aeabi_d2f>:
 8040be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040bf0:	bf24      	itt	cs
 8040bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040bfa:	d90d      	bls.n	8040c18 <__aeabi_d2f+0x30>
 8040bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040c10:	bf08      	it	eq
 8040c12:	f020 0001 	biceq.w	r0, r0, #1
 8040c16:	4770      	bx	lr
 8040c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040c1c:	d121      	bne.n	8040c62 <__aeabi_d2f+0x7a>
 8040c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040c22:	bfbc      	itt	lt
 8040c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040c28:	4770      	bxlt	lr
 8040c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040c32:	f1c2 0218 	rsb	r2, r2, #24
 8040c36:	f1c2 0c20 	rsb	ip, r2, #32
 8040c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8040c42:	bf18      	it	ne
 8040c44:	f040 0001 	orrne.w	r0, r0, #1
 8040c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c54:	ea40 000c 	orr.w	r0, r0, ip
 8040c58:	fa23 f302 	lsr.w	r3, r3, r2
 8040c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c60:	e7cc      	b.n	8040bfc <__aeabi_d2f+0x14>
 8040c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c66:	d107      	bne.n	8040c78 <__aeabi_d2f+0x90>
 8040c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c6c:	bf1e      	ittt	ne
 8040c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040c76:	4770      	bxne	lr
 8040c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040c84:	4770      	bx	lr
 8040c86:	bf00      	nop

08040c88 <__aeabi_uldivmod>:
 8040c88:	b953      	cbnz	r3, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8a:	b94a      	cbnz	r2, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8c:	2900      	cmp	r1, #0
 8040c8e:	bf08      	it	eq
 8040c90:	2800      	cmpeq	r0, #0
 8040c92:	bf1c      	itt	ne
 8040c94:	f04f 31ff 	movne.w	r1, #4294967295
 8040c98:	f04f 30ff 	movne.w	r0, #4294967295
 8040c9c:	f000 b9aa 	b.w	8040ff4 <__aeabi_idiv0>
 8040ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040ca8:	f000 f83c 	bl	8040d24 <__udivmoddi4>
 8040cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040cb4:	b004      	add	sp, #16
 8040cb6:	4770      	bx	lr

08040cb8 <__aeabi_d2lz>:
 8040cb8:	b538      	push	{r3, r4, r5, lr}
 8040cba:	2200      	movs	r2, #0
 8040cbc:	2300      	movs	r3, #0
 8040cbe:	4604      	mov	r4, r0
 8040cc0:	460d      	mov	r5, r1
 8040cc2:	f7ff ff0b 	bl	8040adc <__aeabi_dcmplt>
 8040cc6:	b928      	cbnz	r0, 8040cd4 <__aeabi_d2lz+0x1c>
 8040cc8:	4620      	mov	r0, r4
 8040cca:	4629      	mov	r1, r5
 8040ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040cd0:	f000 b80a 	b.w	8040ce8 <__aeabi_d2ulz>
 8040cd4:	4620      	mov	r0, r4
 8040cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040cda:	f000 f805 	bl	8040ce8 <__aeabi_d2ulz>
 8040cde:	4240      	negs	r0, r0
 8040ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040ce4:	bd38      	pop	{r3, r4, r5, pc}
 8040ce6:	bf00      	nop

08040ce8 <__aeabi_d2ulz>:
 8040ce8:	b5d0      	push	{r4, r6, r7, lr}
 8040cea:	4b0c      	ldr	r3, [pc, #48]	; (8040d1c <__aeabi_d2ulz+0x34>)
 8040cec:	2200      	movs	r2, #0
 8040cee:	4606      	mov	r6, r0
 8040cf0:	460f      	mov	r7, r1
 8040cf2:	f7ff fc81 	bl	80405f8 <__aeabi_dmul>
 8040cf6:	f7ff ff57 	bl	8040ba8 <__aeabi_d2uiz>
 8040cfa:	4604      	mov	r4, r0
 8040cfc:	f7ff fc02 	bl	8040504 <__aeabi_ui2d>
 8040d00:	4b07      	ldr	r3, [pc, #28]	; (8040d20 <__aeabi_d2ulz+0x38>)
 8040d02:	2200      	movs	r2, #0
 8040d04:	f7ff fc78 	bl	80405f8 <__aeabi_dmul>
 8040d08:	4602      	mov	r2, r0
 8040d0a:	460b      	mov	r3, r1
 8040d0c:	4630      	mov	r0, r6
 8040d0e:	4639      	mov	r1, r7
 8040d10:	f7ff faba 	bl	8040288 <__aeabi_dsub>
 8040d14:	f7ff ff48 	bl	8040ba8 <__aeabi_d2uiz>
 8040d18:	4621      	mov	r1, r4
 8040d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8040d1c:	3df00000 	.word	0x3df00000
 8040d20:	41f00000 	.word	0x41f00000

08040d24 <__udivmoddi4>:
 8040d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040d28:	9d08      	ldr	r5, [sp, #32]
 8040d2a:	4604      	mov	r4, r0
 8040d2c:	468e      	mov	lr, r1
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	d14d      	bne.n	8040dce <__udivmoddi4+0xaa>
 8040d32:	428a      	cmp	r2, r1
 8040d34:	4694      	mov	ip, r2
 8040d36:	d969      	bls.n	8040e0c <__udivmoddi4+0xe8>
 8040d38:	fab2 f282 	clz	r2, r2
 8040d3c:	b152      	cbz	r2, 8040d54 <__udivmoddi4+0x30>
 8040d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8040d42:	f1c2 0120 	rsb	r1, r2, #32
 8040d46:	fa20 f101 	lsr.w	r1, r0, r1
 8040d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8040d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8040d52:	4094      	lsls	r4, r2
 8040d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040d58:	0c21      	lsrs	r1, r4, #16
 8040d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8040d5e:	fa1f f78c 	uxth.w	r7, ip
 8040d62:	fb08 e316 	mls	r3, r8, r6, lr
 8040d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040d6a:	fb06 f107 	mul.w	r1, r6, r7
 8040d6e:	4299      	cmp	r1, r3
 8040d70:	d90a      	bls.n	8040d88 <__udivmoddi4+0x64>
 8040d72:	eb1c 0303 	adds.w	r3, ip, r3
 8040d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8040d7a:	f080 811f 	bcs.w	8040fbc <__udivmoddi4+0x298>
 8040d7e:	4299      	cmp	r1, r3
 8040d80:	f240 811c 	bls.w	8040fbc <__udivmoddi4+0x298>
 8040d84:	3e02      	subs	r6, #2
 8040d86:	4463      	add	r3, ip
 8040d88:	1a5b      	subs	r3, r3, r1
 8040d8a:	b2a4      	uxth	r4, r4
 8040d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040d90:	fb08 3310 	mls	r3, r8, r0, r3
 8040d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040d98:	fb00 f707 	mul.w	r7, r0, r7
 8040d9c:	42a7      	cmp	r7, r4
 8040d9e:	d90a      	bls.n	8040db6 <__udivmoddi4+0x92>
 8040da0:	eb1c 0404 	adds.w	r4, ip, r4
 8040da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8040da8:	f080 810a 	bcs.w	8040fc0 <__udivmoddi4+0x29c>
 8040dac:	42a7      	cmp	r7, r4
 8040dae:	f240 8107 	bls.w	8040fc0 <__udivmoddi4+0x29c>
 8040db2:	4464      	add	r4, ip
 8040db4:	3802      	subs	r0, #2
 8040db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040dba:	1be4      	subs	r4, r4, r7
 8040dbc:	2600      	movs	r6, #0
 8040dbe:	b11d      	cbz	r5, 8040dc8 <__udivmoddi4+0xa4>
 8040dc0:	40d4      	lsrs	r4, r2
 8040dc2:	2300      	movs	r3, #0
 8040dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8040dc8:	4631      	mov	r1, r6
 8040dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040dce:	428b      	cmp	r3, r1
 8040dd0:	d909      	bls.n	8040de6 <__udivmoddi4+0xc2>
 8040dd2:	2d00      	cmp	r5, #0
 8040dd4:	f000 80ef 	beq.w	8040fb6 <__udivmoddi4+0x292>
 8040dd8:	2600      	movs	r6, #0
 8040dda:	e9c5 0100 	strd	r0, r1, [r5]
 8040dde:	4630      	mov	r0, r6
 8040de0:	4631      	mov	r1, r6
 8040de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040de6:	fab3 f683 	clz	r6, r3
 8040dea:	2e00      	cmp	r6, #0
 8040dec:	d14a      	bne.n	8040e84 <__udivmoddi4+0x160>
 8040dee:	428b      	cmp	r3, r1
 8040df0:	d302      	bcc.n	8040df8 <__udivmoddi4+0xd4>
 8040df2:	4282      	cmp	r2, r0
 8040df4:	f200 80f9 	bhi.w	8040fea <__udivmoddi4+0x2c6>
 8040df8:	1a84      	subs	r4, r0, r2
 8040dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8040dfe:	2001      	movs	r0, #1
 8040e00:	469e      	mov	lr, r3
 8040e02:	2d00      	cmp	r5, #0
 8040e04:	d0e0      	beq.n	8040dc8 <__udivmoddi4+0xa4>
 8040e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8040e0a:	e7dd      	b.n	8040dc8 <__udivmoddi4+0xa4>
 8040e0c:	b902      	cbnz	r2, 8040e10 <__udivmoddi4+0xec>
 8040e0e:	deff      	udf	#255	; 0xff
 8040e10:	fab2 f282 	clz	r2, r2
 8040e14:	2a00      	cmp	r2, #0
 8040e16:	f040 8092 	bne.w	8040f3e <__udivmoddi4+0x21a>
 8040e1a:	eba1 010c 	sub.w	r1, r1, ip
 8040e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040e22:	fa1f fe8c 	uxth.w	lr, ip
 8040e26:	2601      	movs	r6, #1
 8040e28:	0c20      	lsrs	r0, r4, #16
 8040e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8040e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8040e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040e36:	fb0e f003 	mul.w	r0, lr, r3
 8040e3a:	4288      	cmp	r0, r1
 8040e3c:	d908      	bls.n	8040e50 <__udivmoddi4+0x12c>
 8040e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8040e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8040e46:	d202      	bcs.n	8040e4e <__udivmoddi4+0x12a>
 8040e48:	4288      	cmp	r0, r1
 8040e4a:	f200 80cb 	bhi.w	8040fe4 <__udivmoddi4+0x2c0>
 8040e4e:	4643      	mov	r3, r8
 8040e50:	1a09      	subs	r1, r1, r0
 8040e52:	b2a4      	uxth	r4, r4
 8040e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8040e58:	fb07 1110 	mls	r1, r7, r0, r1
 8040e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040e60:	fb0e fe00 	mul.w	lr, lr, r0
 8040e64:	45a6      	cmp	lr, r4
 8040e66:	d908      	bls.n	8040e7a <__udivmoddi4+0x156>
 8040e68:	eb1c 0404 	adds.w	r4, ip, r4
 8040e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8040e70:	d202      	bcs.n	8040e78 <__udivmoddi4+0x154>
 8040e72:	45a6      	cmp	lr, r4
 8040e74:	f200 80bb 	bhi.w	8040fee <__udivmoddi4+0x2ca>
 8040e78:	4608      	mov	r0, r1
 8040e7a:	eba4 040e 	sub.w	r4, r4, lr
 8040e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040e82:	e79c      	b.n	8040dbe <__udivmoddi4+0x9a>
 8040e84:	f1c6 0720 	rsb	r7, r6, #32
 8040e88:	40b3      	lsls	r3, r6
 8040e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8040e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8040e92:	fa20 f407 	lsr.w	r4, r0, r7
 8040e96:	fa01 f306 	lsl.w	r3, r1, r6
 8040e9a:	431c      	orrs	r4, r3
 8040e9c:	40f9      	lsrs	r1, r7
 8040e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8040ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8040eaa:	0c20      	lsrs	r0, r4, #16
 8040eac:	fa1f fe8c 	uxth.w	lr, ip
 8040eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8040eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8040ebc:	4288      	cmp	r0, r1
 8040ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8040ec2:	d90b      	bls.n	8040edc <__udivmoddi4+0x1b8>
 8040ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8040ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8040ecc:	f080 8088 	bcs.w	8040fe0 <__udivmoddi4+0x2bc>
 8040ed0:	4288      	cmp	r0, r1
 8040ed2:	f240 8085 	bls.w	8040fe0 <__udivmoddi4+0x2bc>
 8040ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8040eda:	4461      	add	r1, ip
 8040edc:	1a09      	subs	r1, r1, r0
 8040ede:	b2a4      	uxth	r4, r4
 8040ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8040ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8040ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8040ef0:	458e      	cmp	lr, r1
 8040ef2:	d908      	bls.n	8040f06 <__udivmoddi4+0x1e2>
 8040ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8040ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8040efc:	d26c      	bcs.n	8040fd8 <__udivmoddi4+0x2b4>
 8040efe:	458e      	cmp	lr, r1
 8040f00:	d96a      	bls.n	8040fd8 <__udivmoddi4+0x2b4>
 8040f02:	3802      	subs	r0, #2
 8040f04:	4461      	add	r1, ip
 8040f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8040f0e:	eba1 010e 	sub.w	r1, r1, lr
 8040f12:	42a1      	cmp	r1, r4
 8040f14:	46c8      	mov	r8, r9
 8040f16:	46a6      	mov	lr, r4
 8040f18:	d356      	bcc.n	8040fc8 <__udivmoddi4+0x2a4>
 8040f1a:	d053      	beq.n	8040fc4 <__udivmoddi4+0x2a0>
 8040f1c:	b15d      	cbz	r5, 8040f36 <__udivmoddi4+0x212>
 8040f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8040f22:	eb61 010e 	sbc.w	r1, r1, lr
 8040f26:	fa01 f707 	lsl.w	r7, r1, r7
 8040f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8040f2e:	40f1      	lsrs	r1, r6
 8040f30:	431f      	orrs	r7, r3
 8040f32:	e9c5 7100 	strd	r7, r1, [r5]
 8040f36:	2600      	movs	r6, #0
 8040f38:	4631      	mov	r1, r6
 8040f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f3e:	f1c2 0320 	rsb	r3, r2, #32
 8040f42:	40d8      	lsrs	r0, r3
 8040f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8040f48:	fa21 f303 	lsr.w	r3, r1, r3
 8040f4c:	4091      	lsls	r1, r2
 8040f4e:	4301      	orrs	r1, r0
 8040f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040f54:	fa1f fe8c 	uxth.w	lr, ip
 8040f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8040f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8040f60:	0c0b      	lsrs	r3, r1, #16
 8040f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040f66:	fb00 f60e 	mul.w	r6, r0, lr
 8040f6a:	429e      	cmp	r6, r3
 8040f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8040f70:	d908      	bls.n	8040f84 <__udivmoddi4+0x260>
 8040f72:	eb1c 0303 	adds.w	r3, ip, r3
 8040f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8040f7a:	d22f      	bcs.n	8040fdc <__udivmoddi4+0x2b8>
 8040f7c:	429e      	cmp	r6, r3
 8040f7e:	d92d      	bls.n	8040fdc <__udivmoddi4+0x2b8>
 8040f80:	3802      	subs	r0, #2
 8040f82:	4463      	add	r3, ip
 8040f84:	1b9b      	subs	r3, r3, r6
 8040f86:	b289      	uxth	r1, r1
 8040f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8040f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8040f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040f94:	fb06 f30e 	mul.w	r3, r6, lr
 8040f98:	428b      	cmp	r3, r1
 8040f9a:	d908      	bls.n	8040fae <__udivmoddi4+0x28a>
 8040f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8040fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8040fa4:	d216      	bcs.n	8040fd4 <__udivmoddi4+0x2b0>
 8040fa6:	428b      	cmp	r3, r1
 8040fa8:	d914      	bls.n	8040fd4 <__udivmoddi4+0x2b0>
 8040faa:	3e02      	subs	r6, #2
 8040fac:	4461      	add	r1, ip
 8040fae:	1ac9      	subs	r1, r1, r3
 8040fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040fb4:	e738      	b.n	8040e28 <__udivmoddi4+0x104>
 8040fb6:	462e      	mov	r6, r5
 8040fb8:	4628      	mov	r0, r5
 8040fba:	e705      	b.n	8040dc8 <__udivmoddi4+0xa4>
 8040fbc:	4606      	mov	r6, r0
 8040fbe:	e6e3      	b.n	8040d88 <__udivmoddi4+0x64>
 8040fc0:	4618      	mov	r0, r3
 8040fc2:	e6f8      	b.n	8040db6 <__udivmoddi4+0x92>
 8040fc4:	454b      	cmp	r3, r9
 8040fc6:	d2a9      	bcs.n	8040f1c <__udivmoddi4+0x1f8>
 8040fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8040fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040fd0:	3801      	subs	r0, #1
 8040fd2:	e7a3      	b.n	8040f1c <__udivmoddi4+0x1f8>
 8040fd4:	4646      	mov	r6, r8
 8040fd6:	e7ea      	b.n	8040fae <__udivmoddi4+0x28a>
 8040fd8:	4620      	mov	r0, r4
 8040fda:	e794      	b.n	8040f06 <__udivmoddi4+0x1e2>
 8040fdc:	4640      	mov	r0, r8
 8040fde:	e7d1      	b.n	8040f84 <__udivmoddi4+0x260>
 8040fe0:	46d0      	mov	r8, sl
 8040fe2:	e77b      	b.n	8040edc <__udivmoddi4+0x1b8>
 8040fe4:	3b02      	subs	r3, #2
 8040fe6:	4461      	add	r1, ip
 8040fe8:	e732      	b.n	8040e50 <__udivmoddi4+0x12c>
 8040fea:	4630      	mov	r0, r6
 8040fec:	e709      	b.n	8040e02 <__udivmoddi4+0xde>
 8040fee:	4464      	add	r4, ip
 8040ff0:	3802      	subs	r0, #2
 8040ff2:	e742      	b.n	8040e7a <__udivmoddi4+0x156>

08040ff4 <__aeabi_idiv0>:
 8040ff4:	4770      	bx	lr
 8040ff6:	bf00      	nop

08040ff8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8040ff8:	b480      	push	{r7}
 8040ffa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8040ffc:	f3bf 8f4f 	dsb	sy
}
 8041000:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8041002:	4b06      	ldr	r3, [pc, #24]	; (804101c <__NVIC_SystemReset+0x24>)
 8041004:	68db      	ldr	r3, [r3, #12]
 8041006:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804100a:	4904      	ldr	r1, [pc, #16]	; (804101c <__NVIC_SystemReset+0x24>)
 804100c:	4b04      	ldr	r3, [pc, #16]	; (8041020 <__NVIC_SystemReset+0x28>)
 804100e:	4313      	orrs	r3, r2
 8041010:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8041012:	f3bf 8f4f 	dsb	sy
}
 8041016:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8041018:	bf00      	nop
 804101a:	e7fd      	b.n	8041018 <__NVIC_SystemReset+0x20>
 804101c:	e000ed00 	.word	0xe000ed00
 8041020:	05fa0004 	.word	0x05fa0004

08041024 <reverse>:
uint16_t counterBank2;
arm_pid_instance_f32 PID;
msTempControlParams *p_CtrlParams = &CtrlParams;
extern uint32_t u32_EEPromErrCnt;
void reverse(unsigned char* str, int len)
{
 8041024:	b480      	push	{r7}
 8041026:	b087      	sub	sp, #28
 8041028:	af00      	add	r7, sp, #0
 804102a:	6078      	str	r0, [r7, #4]
 804102c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 804102e:	2300      	movs	r3, #0
 8041030:	617b      	str	r3, [r7, #20]
 8041032:	683b      	ldr	r3, [r7, #0]
 8041034:	3b01      	subs	r3, #1
 8041036:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8041038:	e018      	b.n	804106c <reverse+0x48>
        temp = str[i];
 804103a:	697b      	ldr	r3, [r7, #20]
 804103c:	687a      	ldr	r2, [r7, #4]
 804103e:	4413      	add	r3, r2
 8041040:	781b      	ldrb	r3, [r3, #0]
 8041042:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8041044:	693b      	ldr	r3, [r7, #16]
 8041046:	687a      	ldr	r2, [r7, #4]
 8041048:	441a      	add	r2, r3
 804104a:	697b      	ldr	r3, [r7, #20]
 804104c:	6879      	ldr	r1, [r7, #4]
 804104e:	440b      	add	r3, r1
 8041050:	7812      	ldrb	r2, [r2, #0]
 8041052:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8041054:	693b      	ldr	r3, [r7, #16]
 8041056:	687a      	ldr	r2, [r7, #4]
 8041058:	4413      	add	r3, r2
 804105a:	68fa      	ldr	r2, [r7, #12]
 804105c:	b2d2      	uxtb	r2, r2
 804105e:	701a      	strb	r2, [r3, #0]
        i++;
 8041060:	697b      	ldr	r3, [r7, #20]
 8041062:	3301      	adds	r3, #1
 8041064:	617b      	str	r3, [r7, #20]
        j--;
 8041066:	693b      	ldr	r3, [r7, #16]
 8041068:	3b01      	subs	r3, #1
 804106a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 804106c:	697a      	ldr	r2, [r7, #20]
 804106e:	693b      	ldr	r3, [r7, #16]
 8041070:	429a      	cmp	r2, r3
 8041072:	dbe2      	blt.n	804103a <reverse+0x16>
    }
}
 8041074:	bf00      	nop
 8041076:	bf00      	nop
 8041078:	371c      	adds	r7, #28
 804107a:	46bd      	mov	sp, r7
 804107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041080:	4770      	bx	lr
	...

08041084 <intToStr>:


int intToStr(int x, unsigned char str[], int d)
{
 8041084:	b580      	push	{r7, lr}
 8041086:	b086      	sub	sp, #24
 8041088:	af00      	add	r7, sp, #0
 804108a:	60f8      	str	r0, [r7, #12]
 804108c:	60b9      	str	r1, [r7, #8]
 804108e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8041090:	2300      	movs	r3, #0
 8041092:	617b      	str	r3, [r7, #20]
    while (x) {
 8041094:	e01d      	b.n	80410d2 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8041096:	68fa      	ldr	r2, [r7, #12]
 8041098:	4b1d      	ldr	r3, [pc, #116]	; (8041110 <intToStr+0x8c>)
 804109a:	fb83 1302 	smull	r1, r3, r3, r2
 804109e:	1099      	asrs	r1, r3, #2
 80410a0:	17d3      	asrs	r3, r2, #31
 80410a2:	1ac9      	subs	r1, r1, r3
 80410a4:	460b      	mov	r3, r1
 80410a6:	009b      	lsls	r3, r3, #2
 80410a8:	440b      	add	r3, r1
 80410aa:	005b      	lsls	r3, r3, #1
 80410ac:	1ad1      	subs	r1, r2, r3
 80410ae:	b2ca      	uxtb	r2, r1
 80410b0:	697b      	ldr	r3, [r7, #20]
 80410b2:	1c59      	adds	r1, r3, #1
 80410b4:	6179      	str	r1, [r7, #20]
 80410b6:	4619      	mov	r1, r3
 80410b8:	68bb      	ldr	r3, [r7, #8]
 80410ba:	440b      	add	r3, r1
 80410bc:	3230      	adds	r2, #48	; 0x30
 80410be:	b2d2      	uxtb	r2, r2
 80410c0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80410c2:	68fb      	ldr	r3, [r7, #12]
 80410c4:	4a12      	ldr	r2, [pc, #72]	; (8041110 <intToStr+0x8c>)
 80410c6:	fb82 1203 	smull	r1, r2, r2, r3
 80410ca:	1092      	asrs	r2, r2, #2
 80410cc:	17db      	asrs	r3, r3, #31
 80410ce:	1ad3      	subs	r3, r2, r3
 80410d0:	60fb      	str	r3, [r7, #12]
    while (x) {
 80410d2:	68fb      	ldr	r3, [r7, #12]
 80410d4:	2b00      	cmp	r3, #0
 80410d6:	d1de      	bne.n	8041096 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80410d8:	e007      	b.n	80410ea <intToStr+0x66>
        str[i++] = '0';
 80410da:	697b      	ldr	r3, [r7, #20]
 80410dc:	1c5a      	adds	r2, r3, #1
 80410de:	617a      	str	r2, [r7, #20]
 80410e0:	461a      	mov	r2, r3
 80410e2:	68bb      	ldr	r3, [r7, #8]
 80410e4:	4413      	add	r3, r2
 80410e6:	2230      	movs	r2, #48	; 0x30
 80410e8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80410ea:	697a      	ldr	r2, [r7, #20]
 80410ec:	687b      	ldr	r3, [r7, #4]
 80410ee:	429a      	cmp	r2, r3
 80410f0:	dbf3      	blt.n	80410da <intToStr+0x56>

    reverse(str, i);
 80410f2:	6979      	ldr	r1, [r7, #20]
 80410f4:	68b8      	ldr	r0, [r7, #8]
 80410f6:	f7ff ff95 	bl	8041024 <reverse>
    str[i] = '\0';
 80410fa:	697b      	ldr	r3, [r7, #20]
 80410fc:	68ba      	ldr	r2, [r7, #8]
 80410fe:	4413      	add	r3, r2
 8041100:	2200      	movs	r2, #0
 8041102:	701a      	strb	r2, [r3, #0]
    return i;
 8041104:	697b      	ldr	r3, [r7, #20]
}
 8041106:	4618      	mov	r0, r3
 8041108:	3718      	adds	r7, #24
 804110a:	46bd      	mov	sp, r7
 804110c:	bd80      	pop	{r7, pc}
 804110e:	bf00      	nop
 8041110:	66666667 	.word	0x66666667
 8041114:	00000000 	.word	0x00000000

08041118 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, unsigned char* res, int afterpoint)
{
 8041118:	b5b0      	push	{r4, r5, r7, lr}
 804111a:	b088      	sub	sp, #32
 804111c:	af00      	add	r7, sp, #0
 804111e:	ed87 0a03 	vstr	s0, [r7, #12]
 8041122:	60b8      	str	r0, [r7, #8]
 8041124:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8041126:	edd7 7a03 	vldr	s15, [r7, #12]
 804112a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 804112e:	ee17 3a90 	vmov	r3, s15
 8041132:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8041134:	69fb      	ldr	r3, [r7, #28]
 8041136:	ee07 3a90 	vmov	s15, r3
 804113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8041142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041146:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 804114a:	2200      	movs	r2, #0
 804114c:	68b9      	ldr	r1, [r7, #8]
 804114e:	69f8      	ldr	r0, [r7, #28]
 8041150:	f7ff ff98 	bl	8041084 <intToStr>
 8041154:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8041156:	687b      	ldr	r3, [r7, #4]
 8041158:	2b00      	cmp	r3, #0
 804115a:	d030      	beq.n	80411be <ftoa+0xa6>
        res[i] = '.';
 804115c:	697b      	ldr	r3, [r7, #20]
 804115e:	68ba      	ldr	r2, [r7, #8]
 8041160:	4413      	add	r3, r2
 8041162:	222e      	movs	r2, #46	; 0x2e
 8041164:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8041166:	69b8      	ldr	r0, [r7, #24]
 8041168:	f7ff f9ee 	bl	8040548 <__aeabi_f2d>
 804116c:	4604      	mov	r4, r0
 804116e:	460d      	mov	r5, r1
 8041170:	6878      	ldr	r0, [r7, #4]
 8041172:	f7ff f9d7 	bl	8040524 <__aeabi_i2d>
 8041176:	4602      	mov	r2, r0
 8041178:	460b      	mov	r3, r1
 804117a:	ec43 2b11 	vmov	d1, r2, r3
 804117e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80411c8 <ftoa+0xb0>
 8041182:	f00c f82d 	bl	804d1e0 <pow>
 8041186:	ec53 2b10 	vmov	r2, r3, d0
 804118a:	4620      	mov	r0, r4
 804118c:	4629      	mov	r1, r5
 804118e:	f7ff fa33 	bl	80405f8 <__aeabi_dmul>
 8041192:	4602      	mov	r2, r0
 8041194:	460b      	mov	r3, r1
 8041196:	4610      	mov	r0, r2
 8041198:	4619      	mov	r1, r3
 804119a:	f7ff fd25 	bl	8040be8 <__aeabi_d2f>
 804119e:	4603      	mov	r3, r0
 80411a0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80411a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80411a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80411aa:	697b      	ldr	r3, [r7, #20]
 80411ac:	3301      	adds	r3, #1
 80411ae:	68ba      	ldr	r2, [r7, #8]
 80411b0:	4413      	add	r3, r2
 80411b2:	687a      	ldr	r2, [r7, #4]
 80411b4:	4619      	mov	r1, r3
 80411b6:	ee17 0a90 	vmov	r0, s15
 80411ba:	f7ff ff63 	bl	8041084 <intToStr>
    }
}
 80411be:	bf00      	nop
 80411c0:	3720      	adds	r7, #32
 80411c2:	46bd      	mov	sp, r7
 80411c4:	bdb0      	pop	{r4, r5, r7, pc}
 80411c6:	bf00      	nop
 80411c8:	00000000 	.word	0x00000000
 80411cc:	40240000 	.word	0x40240000

080411d0 <calculateReflowCurve>:




void calculateReflowCurve(ReflowTemplate *p_ReflowParameters, uint16_t *p_ReflowCurve, uint16_t *p_PhaseIndex){
 80411d0:	b5b0      	push	{r4, r5, r7, lr}
 80411d2:	f5ad 4dea 	sub.w	sp, sp, #29952	; 0x7500
 80411d6:	b09c      	sub	sp, #112	; 0x70
 80411d8:	af00      	add	r7, sp, #0
 80411da:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411de:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80411e2:	6018      	str	r0, [r3, #0]
 80411e4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411e8:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80411ec:	6019      	str	r1, [r3, #0]
 80411ee:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411f2:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 80411f6:	601a      	str	r2, [r3, #0]
	uint16_t ReflowCurve[REFLOW_CURVE_SIZE];
	size_t s_ReflowCurve;
	size_t s_PhaseIndex;
	int index;

	index = 0;
 80411f8:	2300      	movs	r3, #0
 80411fa:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80411fe:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041202:	6013      	str	r3, [r2, #0]
	s_ReflowCurve = 0;
 8041204:	2300      	movs	r3, #0
 8041206:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804120a:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 804120e:	6013      	str	r3, [r2, #0]
	s_PhaseIndex = 0;
 8041210:	2300      	movs	r3, #0
 8041212:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041216:	f102 0258 	add.w	r2, r2, #88	; 0x58
 804121a:	6013      	str	r3, [r2, #0]
	float timestep = 0.5;
 804121c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8041220:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041224:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8041228:	6013      	str	r3, [r2, #0]

	/*Init Arrays with Zeros*/
	memset(ReflowCurve,0, REFLOW_CURVE_SIZE * sizeof(uint16_t));
 804122a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 804122e:	3b5c      	subs	r3, #92	; 0x5c
 8041230:	f247 5230 	movw	r2, #30000	; 0x7530
 8041234:	2100      	movs	r1, #0
 8041236:	4618      	mov	r0, r3
 8041238:	f007 fb24 	bl	8048884 <memset>
	memset(PhaseIndex,0, 6 * sizeof(uint16_t));
 804123c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041240:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8041244:	220c      	movs	r2, #12
 8041246:	2100      	movs	r1, #0
 8041248:	4618      	mov	r0, r3
 804124a:	f007 fb1b 	bl	8048884 <memset>

	//First Heat Up:
	while (24 + (timestep * p_ReflowParameters->firstHeatUpRate) <= p_ReflowParameters->SoakTempeture)
 804124e:	e03d      	b.n	80412cc <calculateReflowCurve+0xfc>
	{
	ReflowCurve[index] = 24 + (timestep * p_ReflowParameters->firstHeatUpRate);
 8041250:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041254:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041258:	681b      	ldr	r3, [r3, #0]
 804125a:	ed93 7a03 	vldr	s14, [r3, #12]
 804125e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041262:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8041266:	edd3 7a00 	vldr	s15, [r3]
 804126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804126e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8041272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804127a:	ee17 3a90 	vmov	r3, s15
 804127e:	b299      	uxth	r1, r3
 8041280:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041284:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8041288:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804128c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041290:	6812      	ldr	r2, [r2, #0]
 8041292:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 8041296:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804129a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 804129e:	681b      	ldr	r3, [r3, #0]
 80412a0:	3301      	adds	r3, #1
 80412a2:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80412a6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80412aa:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 80412ac:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412b0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412b4:	edd3 7a00 	vldr	s15, [r3]
 80412b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80412bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80412c0:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412c4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412c8:	edc3 7a00 	vstr	s15, [r3]
	while (24 + (timestep * p_ReflowParameters->firstHeatUpRate) <= p_ReflowParameters->SoakTempeture)
 80412cc:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80412d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80412d4:	681b      	ldr	r3, [r3, #0]
 80412d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80412da:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412de:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412e2:	edd3 7a00 	vldr	s15, [r3]
 80412e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80412ea:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80412ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80412f2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80412f6:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80412fa:	681b      	ldr	r3, [r3, #0]
 80412fc:	691b      	ldr	r3, [r3, #16]
 80412fe:	ee07 3a90 	vmov	s15, r3
 8041302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 804130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804130e:	d99f      	bls.n	8041250 <calculateReflowCurve+0x80>
	}
	PhaseIndex[1] = index;
 8041310:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041314:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041318:	681b      	ldr	r3, [r3, #0]
 804131a:	b29b      	uxth	r3, r3
 804131c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041320:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8041324:	8013      	strh	r3, [r2, #0]

	//Soak
	int Soakduration = 2*p_ReflowParameters->SoakTime;
 8041326:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804132a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 804132e:	681b      	ldr	r3, [r3, #0]
 8041330:	695b      	ldr	r3, [r3, #20]
 8041332:	005b      	lsls	r3, r3, #1
 8041334:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041338:	f102 0254 	add.w	r2, r2, #84	; 0x54
 804133c:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < Soakduration;i++)
 804133e:	2300      	movs	r3, #0
 8041340:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041344:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8041348:	6013      	str	r3, [r2, #0]
 804134a:	e022      	b.n	8041392 <calculateReflowCurve+0x1c2>
	{
		ReflowCurve[index+i] = p_ReflowParameters->SoakTempeture;
 804134c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041350:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041354:	681b      	ldr	r3, [r3, #0]
 8041356:	6919      	ldr	r1, [r3, #16]
 8041358:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804135c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041360:	681a      	ldr	r2, [r3, #0]
 8041362:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041366:	f103 0364 	add.w	r3, r3, #100	; 0x64
 804136a:	681b      	ldr	r3, [r3, #0]
 804136c:	441a      	add	r2, r3
 804136e:	b289      	uxth	r1, r1
 8041370:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041374:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8041378:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < Soakduration;i++)
 804137c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041380:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8041384:	681b      	ldr	r3, [r3, #0]
 8041386:	3301      	adds	r3, #1
 8041388:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804138c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8041390:	6013      	str	r3, [r2, #0]
 8041392:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041396:	f103 0364 	add.w	r3, r3, #100	; 0x64
 804139a:	681a      	ldr	r2, [r3, #0]
 804139c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413a0:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80413a4:	681b      	ldr	r3, [r3, #0]
 80413a6:	429a      	cmp	r2, r3
 80413a8:	dbd0      	blt.n	804134c <calculateReflowCurve+0x17c>
	}

	//Second Heat Up:
	index = index + Soakduration;
 80413aa:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80413b2:	681a      	ldr	r2, [r3, #0]
 80413b4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413b8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80413bc:	681b      	ldr	r3, [r3, #0]
 80413be:	4413      	add	r3, r2
 80413c0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413c4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80413c8:	6013      	str	r3, [r2, #0]
	PhaseIndex[2] = index;
 80413ca:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413ce:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80413d2:	681b      	ldr	r3, [r3, #0]
 80413d4:	b29b      	uxth	r3, r3
 80413d6:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413da:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80413de:	8013      	strh	r3, [r2, #0]
	timestep = 0.5;
 80413e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80413e4:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413e8:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80413ec:	6013      	str	r3, [r2, #0]
	while (p_ReflowParameters->SoakTempeture + (timestep * p_ReflowParameters->secondHeatUpRate) <= p_ReflowParameters->ReflowTempeture)
 80413ee:	e04f      	b.n	8041490 <calculateReflowCurve+0x2c0>
	{
	ReflowCurve[index] = p_ReflowParameters->SoakTempeture + (uint8_t)timestep * p_ReflowParameters->secondHeatUpRate;
 80413f0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80413f4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80413f8:	681b      	ldr	r3, [r3, #0]
 80413fa:	691b      	ldr	r3, [r3, #16]
 80413fc:	ee07 3a90 	vmov	s15, r3
 8041400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8041404:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041408:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804140c:	edd3 7a00 	vldr	s15, [r3]
 8041410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041414:	edc7 7a00 	vstr	s15, [r7]
 8041418:	783b      	ldrb	r3, [r7, #0]
 804141a:	b2db      	uxtb	r3, r3
 804141c:	ee07 3a90 	vmov	s15, r3
 8041420:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8041424:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041428:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 804142c:	681b      	ldr	r3, [r3, #0]
 804142e:	edd3 7a06 	vldr	s15, [r3, #24]
 8041432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041436:	ee77 7a27 	vadd.f32	s15, s14, s15
 804143a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804143e:	ee17 3a90 	vmov	r3, s15
 8041442:	b299      	uxth	r1, r3
 8041444:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041448:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804144c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041450:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041454:	6812      	ldr	r2, [r2, #0]
 8041456:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 804145a:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804145e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041462:	681b      	ldr	r3, [r3, #0]
 8041464:	3301      	adds	r3, #1
 8041466:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804146a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 804146e:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 8041470:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041474:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8041478:	edd3 7a00 	vldr	s15, [r3]
 804147c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041484:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041488:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804148c:	edc3 7a00 	vstr	s15, [r3]
	while (p_ReflowParameters->SoakTempeture + (timestep * p_ReflowParameters->secondHeatUpRate) <= p_ReflowParameters->ReflowTempeture)
 8041490:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041494:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041498:	681b      	ldr	r3, [r3, #0]
 804149a:	691b      	ldr	r3, [r3, #16]
 804149c:	ee07 3a90 	vmov	s15, r3
 80414a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80414a4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414a8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80414ac:	681b      	ldr	r3, [r3, #0]
 80414ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80414b2:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80414b6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80414ba:	edd3 7a00 	vldr	s15, [r3]
 80414be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80414c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80414c6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414ca:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80414ce:	681b      	ldr	r3, [r3, #0]
 80414d0:	69db      	ldr	r3, [r3, #28]
 80414d2:	ee07 3a90 	vmov	s15, r3
 80414d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80414da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80414de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80414e2:	d985      	bls.n	80413f0 <calculateReflowCurve+0x220>
	}
	PhaseIndex[3] = index;
 80414e4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80414e8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80414ec:	681b      	ldr	r3, [r3, #0]
 80414ee:	b29b      	uxth	r3, r3
 80414f0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80414f4:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 80414f8:	8013      	strh	r3, [r2, #0]

	//Reflow
	int Reflowduration = 2*p_ReflowParameters->ReflowTime;
 80414fa:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414fe:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041502:	681b      	ldr	r3, [r3, #0]
 8041504:	6a1b      	ldr	r3, [r3, #32]
 8041506:	005b      	lsls	r3, r3, #1
 8041508:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804150c:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8041510:	6013      	str	r3, [r2, #0]

	for(int i = 0;i < Reflowduration;i++)
 8041512:	2300      	movs	r3, #0
 8041514:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041518:	f102 0260 	add.w	r2, r2, #96	; 0x60
 804151c:	6013      	str	r3, [r2, #0]
 804151e:	e022      	b.n	8041566 <calculateReflowCurve+0x396>
	{
		ReflowCurve[index+i] = p_ReflowParameters->ReflowTempeture;
 8041520:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041524:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041528:	681b      	ldr	r3, [r3, #0]
 804152a:	69d9      	ldr	r1, [r3, #28]
 804152c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041530:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041534:	681a      	ldr	r2, [r3, #0]
 8041536:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804153a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	441a      	add	r2, r3
 8041542:	b289      	uxth	r1, r1
 8041544:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041548:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804154c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0;i < Reflowduration;i++)
 8041550:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041554:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8041558:	681b      	ldr	r3, [r3, #0]
 804155a:	3301      	adds	r3, #1
 804155c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041560:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8041564:	6013      	str	r3, [r2, #0]
 8041566:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804156a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 804156e:	681a      	ldr	r2, [r3, #0]
 8041570:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041574:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8041578:	681b      	ldr	r3, [r3, #0]
 804157a:	429a      	cmp	r2, r3
 804157c:	dbd0      	blt.n	8041520 <calculateReflowCurve+0x350>
	}

	index = index + Reflowduration;
 804157e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041582:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041586:	681a      	ldr	r2, [r3, #0]
 8041588:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804158c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8041590:	681b      	ldr	r3, [r3, #0]
 8041592:	4413      	add	r3, r2
 8041594:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041598:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 804159c:	6013      	str	r3, [r2, #0]
	ReflowCurve[index] = 0;
 804159e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80415a2:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80415a6:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415aa:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80415ae:	6812      	ldr	r2, [r2, #0]
 80415b0:	2100      	movs	r1, #0
 80415b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	PhaseIndex[4] = index;
 80415b6:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80415ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	b29b      	uxth	r3, r3
 80415c2:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415c6:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80415ca:	8013      	strh	r3, [r2, #0]

	//Cooldown
	timestep = 0.5;
 80415cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80415d0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415d4:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80415d8:	6013      	str	r3, [r2, #0]
	while (p_ReflowParameters->ReflowTempeture - (timestep * 1.8) >= 24)
 80415da:	e055      	b.n	8041688 <calculateReflowCurve+0x4b8>
	{
	ReflowCurve[index] = p_ReflowParameters->ReflowTempeture - (timestep * 1.8);
 80415dc:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80415e0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80415e4:	681b      	ldr	r3, [r3, #0]
 80415e6:	69db      	ldr	r3, [r3, #28]
 80415e8:	4618      	mov	r0, r3
 80415ea:	f7fe ff8b 	bl	8040504 <__aeabi_ui2d>
 80415ee:	4604      	mov	r4, r0
 80415f0:	460d      	mov	r5, r1
 80415f2:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80415f6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80415fa:	6818      	ldr	r0, [r3, #0]
 80415fc:	f7fe ffa4 	bl	8040548 <__aeabi_f2d>
 8041600:	a35a      	add	r3, pc, #360	; (adr r3, 804176c <calculateReflowCurve+0x59c>)
 8041602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041606:	f7fe fff7 	bl	80405f8 <__aeabi_dmul>
 804160a:	4602      	mov	r2, r0
 804160c:	460b      	mov	r3, r1
 804160e:	4620      	mov	r0, r4
 8041610:	4629      	mov	r1, r5
 8041612:	f7fe fe39 	bl	8040288 <__aeabi_dsub>
 8041616:	4602      	mov	r2, r0
 8041618:	460b      	mov	r3, r1
 804161a:	4610      	mov	r0, r2
 804161c:	4619      	mov	r1, r3
 804161e:	f7ff fac3 	bl	8040ba8 <__aeabi_d2uiz>
 8041622:	4603      	mov	r3, r0
 8041624:	b299      	uxth	r1, r3
 8041626:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804162a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804162e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041632:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041636:	6812      	ldr	r2, [r2, #0]
 8041638:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 804163c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041640:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041644:	681b      	ldr	r3, [r3, #0]
 8041646:	3301      	adds	r3, #1
 8041648:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804164c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041650:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 8041652:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041656:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804165a:	edd3 7a00 	vldr	s15, [r3]
 804165e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041666:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804166a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804166e:	edc3 7a00 	vstr	s15, [r3]
	PhaseIndex[5] = index;
 8041672:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041676:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 804167a:	681b      	ldr	r3, [r3, #0]
 804167c:	b29b      	uxth	r3, r3
 804167e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041682:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 8041686:	8013      	strh	r3, [r2, #0]
	while (p_ReflowParameters->ReflowTempeture - (timestep * 1.8) >= 24)
 8041688:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804168c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041690:	681b      	ldr	r3, [r3, #0]
 8041692:	69db      	ldr	r3, [r3, #28]
 8041694:	4618      	mov	r0, r3
 8041696:	f7fe ff35 	bl	8040504 <__aeabi_ui2d>
 804169a:	4604      	mov	r4, r0
 804169c:	460d      	mov	r5, r1
 804169e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80416a2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80416a6:	6818      	ldr	r0, [r3, #0]
 80416a8:	f7fe ff4e 	bl	8040548 <__aeabi_f2d>
 80416ac:	a32f      	add	r3, pc, #188	; (adr r3, 804176c <calculateReflowCurve+0x59c>)
 80416ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80416b2:	f7fe ffa1 	bl	80405f8 <__aeabi_dmul>
 80416b6:	4602      	mov	r2, r0
 80416b8:	460b      	mov	r3, r1
 80416ba:	4620      	mov	r0, r4
 80416bc:	4629      	mov	r1, r5
 80416be:	f7fe fde3 	bl	8040288 <__aeabi_dsub>
 80416c2:	4602      	mov	r2, r0
 80416c4:	460b      	mov	r3, r1
 80416c6:	4610      	mov	r0, r2
 80416c8:	4619      	mov	r1, r3
 80416ca:	f04f 0200 	mov.w	r2, #0
 80416ce:	4b26      	ldr	r3, [pc, #152]	; (8041768 <calculateReflowCurve+0x598>)
 80416d0:	f7ff fa18 	bl	8040b04 <__aeabi_dcmpge>
 80416d4:	4603      	mov	r3, r0
 80416d6:	2b00      	cmp	r3, #0
 80416d8:	d180      	bne.n	80415dc <calculateReflowCurve+0x40c>
	}
	s_ReflowCurve = sizeof(ReflowCurve);
 80416da:	f247 5330 	movw	r3, #30000	; 0x7530
 80416de:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80416e2:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80416e6:	6013      	str	r3, [r2, #0]
	s_PhaseIndex  = sizeof(PhaseIndex);
 80416e8:	230c      	movs	r3, #12
 80416ea:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80416ee:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80416f2:	6013      	str	r3, [r2, #0]

	if(0 < s_ReflowCurve || 0 < s_PhaseIndex)
 80416f4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80416f8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80416fc:	681b      	ldr	r3, [r3, #0]
 80416fe:	2b00      	cmp	r3, #0
 8041700:	d106      	bne.n	8041710 <calculateReflowCurve+0x540>
 8041702:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041706:	f103 0358 	add.w	r3, r3, #88	; 0x58
 804170a:	681b      	ldr	r3, [r3, #0]
 804170c:	2b00      	cmp	r3, #0
 804170e:	d020      	beq.n	8041752 <calculateReflowCurve+0x582>
	{
		memcpy((uint8_t*)p_PhaseIndex, (uint8_t*)PhaseIndex, s_PhaseIndex);
 8041710:	f507 41ea 	add.w	r1, r7, #29952	; 0x7500
 8041714:	f101 0144 	add.w	r1, r1, #68	; 0x44
 8041718:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804171c:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8041720:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041724:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8041728:	6812      	ldr	r2, [r2, #0]
 804172a:	6818      	ldr	r0, [r3, #0]
 804172c:	f007 f89c 	bl	8048868 <memcpy>
		memcpy((uint8_t*)p_ReflowCurve, (uint8_t*)ReflowCurve, s_ReflowCurve);
 8041730:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8041734:	3b5c      	subs	r3, #92	; 0x5c
 8041736:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 804173a:	f5a2 60ad 	sub.w	r0, r2, #1384	; 0x568
 804173e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041742:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8041746:	6812      	ldr	r2, [r2, #0]
 8041748:	4619      	mov	r1, r3
 804174a:	6800      	ldr	r0, [r0, #0]
 804174c:	f007 f88c 	bl	8048868 <memcpy>
 8041750:	e002      	b.n	8041758 <calculateReflowCurve+0x588>

	}
	else
	{
		Error_Handler();
 8041752:	f002 fed9 	bl	8044508 <Error_Handler>
	}
}
 8041756:	bf00      	nop
 8041758:	bf00      	nop
 804175a:	f507 47ea 	add.w	r7, r7, #29952	; 0x7500
 804175e:	3770      	adds	r7, #112	; 0x70
 8041760:	46bd      	mov	sp, r7
 8041762:	bdb0      	pop	{r4, r5, r7, pc}
 8041764:	f3af 8000 	nop.w
 8041768:	40380000 	.word	0x40380000
 804176c:	cccccccd 	.word	0xcccccccd
 8041770:	3ffccccc 	.word	0x3ffccccc

08041774 <HandleGui>:

void HandleGui()
{
 8041774:	b580      	push	{r7, lr}
 8041776:	af00      	add	r7, sp, #0
	lcd_clear_cmd();
 8041778:	f002 fa2d 	bl	8043bd6 <lcd_clear_cmd>
	f_GuiErrorCheck(temperature);
 804177c:	4b28      	ldr	r3, [pc, #160]	; (8041820 <HandleGui+0xac>)
 804177e:	edd3 7a00 	vldr	s15, [r3]
 8041782:	eeb0 0a67 	vmov.f32	s0, s15
 8041786:	f000 fbc5 	bl	8041f14 <f_GuiErrorCheck>
	f_GuiSensorInitOKmsg();
 804178a:	f000 fc0f 	bl	8041fac <f_GuiSensorInitOKmsg>
	f_GuiFEEUpdateRead(p_CtrlParams, p_ReflowParameters);
 804178e:	4b25      	ldr	r3, [pc, #148]	; (8041824 <HandleGui+0xb0>)
 8041790:	681b      	ldr	r3, [r3, #0]
 8041792:	4a25      	ldr	r2, [pc, #148]	; (8041828 <HandleGui+0xb4>)
 8041794:	6812      	ldr	r2, [r2, #0]
 8041796:	4611      	mov	r1, r2
 8041798:	4618      	mov	r0, r3
 804179a:	f000 fc85 	bl	80420a8 <f_GuiFEEUpdateRead>
	f_GuiMenuSoakTemp(p_ReflowParameters);
 804179e:	4b22      	ldr	r3, [pc, #136]	; (8041828 <HandleGui+0xb4>)
 80417a0:	681b      	ldr	r3, [r3, #0]
 80417a2:	4618      	mov	r0, r3
 80417a4:	f000 fc1a 	bl	8041fdc <f_GuiMenuSoakTemp>
	f_GuiMenuSoakTime(p_ReflowParameters);
 80417a8:	4b1f      	ldr	r3, [pc, #124]	; (8041828 <HandleGui+0xb4>)
 80417aa:	681b      	ldr	r3, [r3, #0]
 80417ac:	4618      	mov	r0, r3
 80417ae:	f000 fcc5 	bl	804213c <f_GuiMenuSoakTime>
	f_GuiMenuReflowTemp(p_ReflowParameters);
 80417b2:	4b1d      	ldr	r3, [pc, #116]	; (8041828 <HandleGui+0xb4>)
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	4618      	mov	r0, r3
 80417b8:	f000 fd2a 	bl	8042210 <f_GuiMenuReflowTemp>
	f_GuiMenuReflowTime(p_ReflowParameters);
 80417bc:	4b1a      	ldr	r3, [pc, #104]	; (8041828 <HandleGui+0xb4>)
 80417be:	681b      	ldr	r3, [r3, #0]
 80417c0:	4618      	mov	r0, r3
 80417c2:	f000 fd8f 	bl	80422e4 <f_GuiMenuReflowTime>
	f_GuiMenuSoakTempGrad(p_ReflowParameters);
 80417c6:	4b18      	ldr	r3, [pc, #96]	; (8041828 <HandleGui+0xb4>)
 80417c8:	681b      	ldr	r3, [r3, #0]
 80417ca:	4618      	mov	r0, r3
 80417cc:	f000 fdf4 	bl	80423b8 <f_GuiMenuSoakTempGrad>
	f_GuiMenuKPUpdate(p_ReflowParameters);
 80417d0:	4b15      	ldr	r3, [pc, #84]	; (8041828 <HandleGui+0xb4>)
 80417d2:	681b      	ldr	r3, [r3, #0]
 80417d4:	4618      	mov	r0, r3
 80417d6:	f000 fe7b 	bl	80424d0 <f_GuiMenuKPUpdate>
	f_GuiMenuKIUpdate(p_ReflowParameters);
 80417da:	4b13      	ldr	r3, [pc, #76]	; (8041828 <HandleGui+0xb4>)
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	4618      	mov	r0, r3
 80417e0:	f000 feea 	bl	80425b8 <f_GuiMenuKIUpdate>
	f_GuiMenuKDUpdate(p_ReflowParameters);
 80417e4:	4b10      	ldr	r3, [pc, #64]	; (8041828 <HandleGui+0xb4>)
 80417e6:	681b      	ldr	r3, [r3, #0]
 80417e8:	4618      	mov	r0, r3
 80417ea:	f000 ff59 	bl	80426a0 <f_GuiMenuKDUpdate>
	f_GuiMenuReflowTempGrad(p_ReflowParameters);
 80417ee:	4b0e      	ldr	r3, [pc, #56]	; (8041828 <HandleGui+0xb4>)
 80417f0:	681b      	ldr	r3, [r3, #0]
 80417f2:	4618      	mov	r0, r3
 80417f4:	f000 ffc8 	bl	8042788 <f_GuiMenuReflowTempGrad>
	f_GuiMenuBank1Update(p_CtrlParams);
 80417f8:	4b0a      	ldr	r3, [pc, #40]	; (8041824 <HandleGui+0xb0>)
 80417fa:	681b      	ldr	r3, [r3, #0]
 80417fc:	4618      	mov	r0, r3
 80417fe:	f001 f84d 	bl	804289c <f_GuiMenuBank1Update>
	f_GuiMenuBank2Update(p_CtrlParams);
 8041802:	4b08      	ldr	r3, [pc, #32]	; (8041824 <HandleGui+0xb0>)
 8041804:	681b      	ldr	r3, [r3, #0]
 8041806:	4618      	mov	r0, r3
 8041808:	f001 f8b4 	bl	8042974 <f_GuiMenuBank2Update>
	f_GuiFEEUpdateWrite(p_CtrlParams, p_ReflowParameters);
 804180c:	4b05      	ldr	r3, [pc, #20]	; (8041824 <HandleGui+0xb0>)
 804180e:	681b      	ldr	r3, [r3, #0]
 8041810:	4a05      	ldr	r2, [pc, #20]	; (8041828 <HandleGui+0xb4>)
 8041812:	6812      	ldr	r2, [r2, #0]
 8041814:	4611      	mov	r1, r2
 8041816:	4618      	mov	r0, r3
 8041818:	f001 f918 	bl	8042a4c <f_GuiFEEUpdateWrite>
}
 804181c:	bf00      	nop
 804181e:	bd80      	pop	{r7, pc}
 8041820:	20000224 	.word	0x20000224
 8041824:	20000004 	.word	0x20000004
 8041828:	200003f8 	.word	0x200003f8

0804182c <readTemperatureData>:

static void readTemperatureData(volatile float32_t* p_temperature_val)
{
 804182c:	b580      	push	{r7, lr}
 804182e:	b084      	sub	sp, #16
 8041830:	af00      	add	r7, sp, #0
 8041832:	6078      	str	r0, [r7, #4]
	uint8_t data8[2] = {0};
 8041834:	2300      	movs	r3, #0
 8041836:	81bb      	strh	r3, [r7, #12]
	uint16_t sum = {0};
 8041838:	2300      	movs	r3, #0
 804183a:	81fb      	strh	r3, [r7, #14]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 804183c:	2201      	movs	r2, #1
 804183e:	2110      	movs	r1, #16
 8041840:	481e      	ldr	r0, [pc, #120]	; (80418bc <readTemperatureData+0x90>)
 8041842:	f004 f835 	bl	80458b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 8041846:	2200      	movs	r2, #0
 8041848:	2110      	movs	r1, #16
 804184a:	481c      	ldr	r0, [pc, #112]	; (80418bc <readTemperatureData+0x90>)
 804184c:	f004 f830 	bl	80458b0 <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 8041850:	f107 010c 	add.w	r1, r7, #12
 8041854:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8041858:	2202      	movs	r2, #2
 804185a:	4819      	ldr	r0, [pc, #100]	; (80418c0 <readTemperatureData+0x94>)
 804185c:	f005 f9d9 	bl	8046c12 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 8041860:	2201      	movs	r2, #1
 8041862:	2110      	movs	r1, #16
 8041864:	4815      	ldr	r0, [pc, #84]	; (80418bc <readTemperatureData+0x90>)
 8041866:	f004 f823 	bl	80458b0 <HAL_GPIO_WritePin>

			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 804186a:	7b7b      	ldrb	r3, [r7, #13]
 804186c:	b21a      	sxth	r2, r3
 804186e:	7b3b      	ldrb	r3, [r7, #12]
 8041870:	021b      	lsls	r3, r3, #8
 8041872:	b21b      	sxth	r3, r3
 8041874:	4313      	orrs	r3, r2
 8041876:	b21b      	sxth	r3, r3
 8041878:	81fb      	strh	r3, [r7, #14]
			if(sum & 0x0004)//No TC connected, error -1
 804187a:	89fb      	ldrh	r3, [r7, #14]
 804187c:	f003 0304 	and.w	r3, r3, #4
 8041880:	2b00      	cmp	r3, #0
 8041882:	d003      	beq.n	804188c <readTemperatureData+0x60>
			{
				(*p_temperature_val) = -1;
 8041884:	687b      	ldr	r3, [r7, #4]
 8041886:	4a0f      	ldr	r2, [pc, #60]	; (80418c4 <readTemperatureData+0x98>)
 8041888:	601a      	str	r2, [r3, #0]
			{
				(*p_temperature_val) = ((sum >> 3) / 4.0);
			}


}
 804188a:	e013      	b.n	80418b4 <readTemperatureData+0x88>
				(*p_temperature_val) = ((sum >> 3) / 4.0);
 804188c:	89fb      	ldrh	r3, [r7, #14]
 804188e:	08db      	lsrs	r3, r3, #3
 8041890:	b29b      	uxth	r3, r3
 8041892:	4618      	mov	r0, r3
 8041894:	f7fe fe46 	bl	8040524 <__aeabi_i2d>
 8041898:	f04f 0200 	mov.w	r2, #0
 804189c:	4b0a      	ldr	r3, [pc, #40]	; (80418c8 <readTemperatureData+0x9c>)
 804189e:	f7fe ffd5 	bl	804084c <__aeabi_ddiv>
 80418a2:	4602      	mov	r2, r0
 80418a4:	460b      	mov	r3, r1
 80418a6:	4610      	mov	r0, r2
 80418a8:	4619      	mov	r1, r3
 80418aa:	f7ff f99d 	bl	8040be8 <__aeabi_d2f>
 80418ae:	4602      	mov	r2, r0
 80418b0:	687b      	ldr	r3, [r7, #4]
 80418b2:	601a      	str	r2, [r3, #0]
}
 80418b4:	bf00      	nop
 80418b6:	3710      	adds	r7, #16
 80418b8:	46bd      	mov	sp, r7
 80418ba:	bd80      	pop	{r7, pc}
 80418bc:	40020000 	.word	0x40020000
 80418c0:	20000350 	.word	0x20000350
 80418c4:	bf800000 	.word	0xbf800000
 80418c8:	40100000 	.word	0x40100000

080418cc <getTemperatureData>:

}


 getTemperatureData(volatile float32_t* p_temperature_val)
 {
 80418cc:	b580      	push	{r7, lr}
 80418ce:	b082      	sub	sp, #8
 80418d0:	af00      	add	r7, sp, #0
 80418d2:	6078      	str	r0, [r7, #4]

	 readTemperatureData(p_temperature_val);
 80418d4:	6878      	ldr	r0, [r7, #4]
 80418d6:	f7ff ffa9 	bl	804182c <readTemperatureData>

 }
 80418da:	bf00      	nop
 80418dc:	3708      	adds	r7, #8
 80418de:	46bd      	mov	sp, r7
 80418e0:	bd80      	pop	{r7, pc}
	...

080418e4 <msTempControlHandler>:


void msTempControlHandler(msTempControlParams* CtrlParams, uint16_t* p_ReflowCurve, ReflowTemplate *p_ReflowParameters )
{
 80418e4:	b580      	push	{r7, lr}
 80418e6:	b092      	sub	sp, #72	; 0x48
 80418e8:	af00      	add	r7, sp, #0
 80418ea:	60f8      	str	r0, [r7, #12]
 80418ec:	60b9      	str	r1, [r7, #8]
 80418ee:	607a      	str	r2, [r7, #4]


  uint8_t	*p_bank1Percentage	= &CtrlParams->ui8_bank1Percentage;
 80418f0:	68fb      	ldr	r3, [r7, #12]
 80418f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t	*p_bank2Percentage	= &CtrlParams->ui8_bank2Percentage;
 80418f4:	68fb      	ldr	r3, [r7, #12]
 80418f6:	3301      	adds	r3, #1
 80418f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  FLAGS		*p_Statusflags		= CtrlParams->p_StatusFlags;
 80418fa:	68fb      	ldr	r3, [r7, #12]
 80418fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80418fe:	63bb      	str	r3, [r7, #56]	; 0x38
  volatile float32_t *p_temperature = CtrlParams->p_temperature;
 8041900:	68fb      	ldr	r3, [r7, #12]
 8041902:	69db      	ldr	r3, [r3, #28]
 8041904:	637b      	str	r3, [r7, #52]	; 0x34
  volatile float32_t *p_PIDError 	= CtrlParams->p_PIDError;
 8041906:	68fb      	ldr	r3, [r7, #12]
 8041908:	6a1b      	ldr	r3, [r3, #32]
 804190a:	633b      	str	r3, [r7, #48]	; 0x30
  uint16_t ReflowIndex = CtrlParams->u16_ReflowIndexCurrent;
 804190c:	68fb      	ldr	r3, [r7, #12]
 804190e:	885b      	ldrh	r3, [r3, #2]
 8041910:	85fb      	strh	r3, [r7, #46]	; 0x2e
  static	uint32_t	u32_PidCorr;
  volatile 	uint16_t	u16_PIDBank1;
  volatile 	uint16_t 	u16_PIDBank2;


  PID.Kp = p_ReflowParameters->KP;
 8041912:	687b      	ldr	r3, [r7, #4]
 8041914:	681b      	ldr	r3, [r3, #0]
 8041916:	4a80      	ldr	r2, [pc, #512]	; (8041b18 <msTempControlHandler+0x234>)
 8041918:	6193      	str	r3, [r2, #24]
  PID.Ki = p_ReflowParameters->KI;
 804191a:	687b      	ldr	r3, [r7, #4]
 804191c:	685b      	ldr	r3, [r3, #4]
 804191e:	4a7e      	ldr	r2, [pc, #504]	; (8041b18 <msTempControlHandler+0x234>)
 8041920:	61d3      	str	r3, [r2, #28]
  PID.Kd = p_ReflowParameters->KD;
 8041922:	687b      	ldr	r3, [r7, #4]
 8041924:	689b      	ldr	r3, [r3, #8]
 8041926:	4a7c      	ldr	r2, [pc, #496]	; (8041b18 <msTempControlHandler+0x234>)
 8041928:	6213      	str	r3, [r2, #32]
  f32_Temperature = 0;
 804192a:	f04f 0300 	mov.w	r3, #0
 804192e:	61bb      	str	r3, [r7, #24]
  u16_PIDBank1 = 0;
 8041930:	2300      	movs	r3, #0
 8041932:	82fb      	strh	r3, [r7, #22]
  u16_PIDBank2 = 0;
 8041934:	2300      	movs	r3, #0
 8041936:	82bb      	strh	r3, [r7, #20]
  //f32_PidCorr = 0;
  if( ((*p_bank1Percentage) != 0) &&  ((*p_bank2Percentage) != 0) )
 8041938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804193a:	781b      	ldrb	r3, [r3, #0]
 804193c:	2b00      	cmp	r3, #0
 804193e:	d021      	beq.n	8041984 <msTempControlHandler+0xa0>
 8041940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8041942:	781b      	ldrb	r3, [r3, #0]
 8041944:	2b00      	cmp	r3, #0
 8041946:	d01d      	beq.n	8041984 <msTempControlHandler+0xa0>
  {
	  ui16_Bank1Limit = 999 * (*p_bank1Percentage) / 100;
 8041948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804194a:	781b      	ldrb	r3, [r3, #0]
 804194c:	461a      	mov	r2, r3
 804194e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041952:	fb02 f303 	mul.w	r3, r2, r3
 8041956:	4a71      	ldr	r2, [pc, #452]	; (8041b1c <msTempControlHandler+0x238>)
 8041958:	fb82 1203 	smull	r1, r2, r2, r3
 804195c:	1152      	asrs	r2, r2, #5
 804195e:	17db      	asrs	r3, r3, #31
 8041960:	1ad3      	subs	r3, r2, r3
 8041962:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  ui16_Bank2Limit = 999 * (*p_bank2Percentage) / 100;
 8041966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8041968:	781b      	ldrb	r3, [r3, #0]
 804196a:	461a      	mov	r2, r3
 804196c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041970:	fb02 f303 	mul.w	r3, r2, r3
 8041974:	4a69      	ldr	r2, [pc, #420]	; (8041b1c <msTempControlHandler+0x238>)
 8041976:	fb82 1203 	smull	r1, r2, r2, r3
 804197a:	1152      	asrs	r2, r2, #5
 804197c:	17db      	asrs	r3, r3, #31
 804197e:	1ad3      	subs	r3, r2, r3
 8041980:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

  }

  /*Temperature Readout*/
  //readTemperatureData(p_temperature);
  if(avg_temp == -100)
 8041984:	4b66      	ldr	r3, [pc, #408]	; (8041b20 <msTempControlHandler+0x23c>)
 8041986:	edd3 7a00 	vldr	s15, [r3]
 804198a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8041b24 <msTempControlHandler+0x240>
 804198e:	eef4 7a47 	vcmp.f32	s15, s14
 8041992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041996:	d103      	bne.n	80419a0 <msTempControlHandler+0xbc>
  {
	  avg_temp = (*p_temperature);
 8041998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804199a:	681b      	ldr	r3, [r3, #0]
 804199c:	4a60      	ldr	r2, [pc, #384]	; (8041b20 <msTempControlHandler+0x23c>)
 804199e:	6013      	str	r3, [r2, #0]
  else
  {

  }

  avg_temp = alpha * (*p_temperature) + (1 - alpha) * avg_temp;
 80419a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419a2:	edd3 7a00 	vldr	s15, [r3]
 80419a6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8041b28 <msTempControlHandler+0x244>
 80419aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80419ae:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8041b28 <msTempControlHandler+0x244>
 80419b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80419b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80419ba:	4b59      	ldr	r3, [pc, #356]	; (8041b20 <msTempControlHandler+0x23c>)
 80419bc:	edd3 7a00 	vldr	s15, [r3]
 80419c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80419c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80419c8:	4b55      	ldr	r3, [pc, #340]	; (8041b20 <msTempControlHandler+0x23c>)
 80419ca:	edc3 7a00 	vstr	s15, [r3]
  (*p_temperature) = avg_temp;
 80419ce:	4b54      	ldr	r3, [pc, #336]	; (8041b20 <msTempControlHandler+0x23c>)
 80419d0:	681a      	ldr	r2, [r3, #0]
 80419d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419d4:	601a      	str	r2, [r3, #0]
  f32_Temperature = (*p_temperature);
 80419d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419d8:	681b      	ldr	r3, [r3, #0]
 80419da:	61bb      	str	r3, [r7, #24]

  if(TRUE == StateFlag.StartFlag)
 80419dc:	4b53      	ldr	r3, [pc, #332]	; (8041b2c <msTempControlHandler+0x248>)
 80419de:	781b      	ldrb	r3, [r3, #0]
 80419e0:	2b00      	cmp	r3, #0
 80419e2:	f000 8130 	beq.w	8041c46 <msTempControlHandler+0x362>
  {
	  f32_pid_error =  (float32_t) *(p_ReflowCurve+ReflowIndex) - f32_Temperature;
 80419e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80419e8:	005b      	lsls	r3, r3, #1
 80419ea:	68ba      	ldr	r2, [r7, #8]
 80419ec:	4413      	add	r3, r2
 80419ee:	881b      	ldrh	r3, [r3, #0]
 80419f0:	ee07 3a90 	vmov	s15, r3
 80419f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80419f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80419fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041a00:	edc7 7a07 	vstr	s15, [r7, #28]
	  *p_PIDError = f32_pid_error;
 8041a04:	69fa      	ldr	r2, [r7, #28]
 8041a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041a08:	601a      	str	r2, [r3, #0]
	  *(CtrlParams->p_PIDError) = *(p_PIDError);
 8041a0a:	68fb      	ldr	r3, [r7, #12]
 8041a0c:	6a1b      	ldr	r3, [r3, #32]
 8041a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8041a10:	6812      	ldr	r2, [r2, #0]
 8041a12:	601a      	str	r2, [r3, #0]

	  //Correction
	  f32_PidCorr =  arm_pid_f32(&PID, (f32_pid_error ));
 8041a14:	69fb      	ldr	r3, [r7, #28]
 8041a16:	4a40      	ldr	r2, [pc, #256]	; (8041b18 <msTempControlHandler+0x234>)
 8041a18:	62ba      	str	r2, [r7, #40]	; 0x28
 8041a1a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8041a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a1e:	ed93 7a00 	vldr	s14, [r3]
 8041a22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8041a26:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8041a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a32:	edd3 7a03 	vldr	s15, [r3, #12]
 8041a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8041a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a40:	edd3 6a02 	vldr	s13, [r3, #8]
 8041a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a46:	edd3 7a04 	vldr	s15, [r3, #16]
 8041a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8041a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a54:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8041a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041a5c:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Update state */
    S->state[1] = S->state[0];
 8041a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a62:	68da      	ldr	r2, [r3, #12]
 8041a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a66:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8041a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041a6c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8041a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a70:	6a3a      	ldr	r2, [r7, #32]
 8041a72:	615a      	str	r2, [r3, #20]
//    if (999 < out)
//    {
//    	out = 999;
//    }
    /* return to application */
    return (out);
 8041a74:	6a3b      	ldr	r3, [r7, #32]
 8041a76:	4a2e      	ldr	r2, [pc, #184]	; (8041b30 <msTempControlHandler+0x24c>)
 8041a78:	6013      	str	r3, [r2, #0]

	  if( 0 > f32_pid_error )
 8041a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8041a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8041a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041a86:	d507      	bpl.n	8041a98 <msTempControlHandler+0x1b4>
	  {
		  PID.Ki = 0 ; /*Stop integrating when the setpoint is reached*/
 8041a88:	4b23      	ldr	r3, [pc, #140]	; (8041b18 <msTempControlHandler+0x234>)
 8041a8a:	f04f 0200 	mov.w	r2, #0
 8041a8e:	61da      	str	r2, [r3, #28]
		  arm_pid_reset_f32(&PID);
 8041a90:	4821      	ldr	r0, [pc, #132]	; (8041b18 <msTempControlHandler+0x234>)
 8041a92:	f006 fe8b 	bl	80487ac <arm_pid_reset_f32>
 8041a96:	e003      	b.n	8041aa0 <msTempControlHandler+0x1bc>
	  }
	  else
	  {
		  PID.Ki = p_ReflowParameters->KI;
 8041a98:	687b      	ldr	r3, [r7, #4]
 8041a9a:	685b      	ldr	r3, [r3, #4]
 8041a9c:	4a1e      	ldr	r2, [pc, #120]	; (8041b18 <msTempControlHandler+0x234>)
 8041a9e:	61d3      	str	r3, [r2, #28]
	  }


	  u32_PidCorr = (uint32_t)f32_PidCorr;
 8041aa0:	4b23      	ldr	r3, [pc, #140]	; (8041b30 <msTempControlHandler+0x24c>)
 8041aa2:	edd3 7a00 	vldr	s15, [r3]
 8041aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041aaa:	ee17 2a90 	vmov	r2, s15
 8041aae:	4b21      	ldr	r3, [pc, #132]	; (8041b34 <msTempControlHandler+0x250>)
 8041ab0:	601a      	str	r2, [r3, #0]
	  //Correction limits bank1-set value
	  if (u32_PidCorr > (ui16_Bank1Limit))
 8041ab2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8041ab6:	4b1f      	ldr	r3, [pc, #124]	; (8041b34 <msTempControlHandler+0x250>)
 8041ab8:	681b      	ldr	r3, [r3, #0]
 8041aba:	429a      	cmp	r2, r3
 8041abc:	d203      	bcs.n	8041ac6 <msTempControlHandler+0x1e2>
	  {
		  u16_PIDBank1 = ui16_Bank1Limit;
 8041abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8041ac2:	82fb      	strh	r3, [r7, #22]
 8041ac4:	e003      	b.n	8041ace <msTempControlHandler+0x1ea>
	  }
	  else
	  {
		  u16_PIDBank1 = u32_PidCorr;
 8041ac6:	4b1b      	ldr	r3, [pc, #108]	; (8041b34 <msTempControlHandler+0x250>)
 8041ac8:	681b      	ldr	r3, [r3, #0]
 8041aca:	b29b      	uxth	r3, r3
 8041acc:	82fb      	strh	r3, [r7, #22]
	  }
	  //Correction limits bank2-set value
	  if(u32_PidCorr > ui16_Bank2Limit)
 8041ace:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8041ad2:	4b18      	ldr	r3, [pc, #96]	; (8041b34 <msTempControlHandler+0x250>)
 8041ad4:	681b      	ldr	r3, [r3, #0]
 8041ad6:	429a      	cmp	r2, r3
 8041ad8:	d203      	bcs.n	8041ae2 <msTempControlHandler+0x1fe>
	  {

		  u16_PIDBank2 = ui16_Bank2Limit;
 8041ada:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8041ade:	82bb      	strh	r3, [r7, #20]
 8041ae0:	e003      	b.n	8041aea <msTempControlHandler+0x206>
	  }
	  else
	  {
		  u16_PIDBank2 = u32_PidCorr;
 8041ae2:	4b14      	ldr	r3, [pc, #80]	; (8041b34 <msTempControlHandler+0x250>)
 8041ae4:	681b      	ldr	r3, [r3, #0]
 8041ae6:	b29b      	uxth	r3, r3
 8041ae8:	82bb      	strh	r3, [r7, #20]
	  else
	  {

	  }

	  TIM3->CCR2 = u16_PIDBank1;
 8041aea:	8afb      	ldrh	r3, [r7, #22]
 8041aec:	b29a      	uxth	r2, r3
 8041aee:	4b12      	ldr	r3, [pc, #72]	; (8041b38 <msTempControlHandler+0x254>)
 8041af0:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = u16_PIDBank2;
 8041af2:	8abb      	ldrh	r3, [r7, #20]
 8041af4:	b29a      	uxth	r2, r3
 8041af6:	4b10      	ldr	r3, [pc, #64]	; (8041b38 <msTempControlHandler+0x254>)
 8041af8:	63da      	str	r2, [r3, #60]	; 0x3c

	  if((0 < TIM3->CCR2 ) || (0 < TIM3->CCR3 ))
 8041afa:	4b0f      	ldr	r3, [pc, #60]	; (8041b38 <msTempControlHandler+0x254>)
 8041afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041afe:	2b00      	cmp	r3, #0
 8041b00:	d103      	bne.n	8041b0a <msTempControlHandler+0x226>
 8041b02:	4b0d      	ldr	r3, [pc, #52]	; (8041b38 <msTempControlHandler+0x254>)
 8041b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b06:	2b00      	cmp	r3, #0
 8041b08:	d01a      	beq.n	8041b40 <msTempControlHandler+0x25c>
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8041b0a:	2201      	movs	r2, #1
 8041b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041b10:	480a      	ldr	r0, [pc, #40]	; (8041b3c <msTempControlHandler+0x258>)
 8041b12:	f003 fecd 	bl	80458b0 <HAL_GPIO_WritePin>
 8041b16:	e019      	b.n	8041b4c <msTempControlHandler+0x268>
 8041b18:	20000248 	.word	0x20000248
 8041b1c:	51eb851f 	.word	0x51eb851f
 8041b20:	20000000 	.word	0x20000000
 8041b24:	c2c80000 	.word	0xc2c80000
 8041b28:	3dcccccd 	.word	0x3dcccccd
 8041b2c:	20000240 	.word	0x20000240
 8041b30:	20000204 	.word	0x20000204
 8041b34:	20000208 	.word	0x20000208
 8041b38:	40000400 	.word	0x40000400
 8041b3c:	40020c00 	.word	0x40020c00
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041b40:	2200      	movs	r2, #0
 8041b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041b46:	4843      	ldr	r0, [pc, #268]	; (8041c54 <msTempControlHandler+0x370>)
 8041b48:	f003 feb2 	bl	80458b0 <HAL_GPIO_WritePin>
	  }

	  if(	(ReflowIndex >= (PhaseIndex_main[0]+10)	)	&&	(ReflowIndex < PhaseIndex_main[1])	 )
 8041b4c:	4b42      	ldr	r3, [pc, #264]	; (8041c58 <msTempControlHandler+0x374>)
 8041b4e:	881b      	ldrh	r3, [r3, #0]
 8041b50:	f103 0209 	add.w	r2, r3, #9
 8041b54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041b56:	429a      	cmp	r2, r3
 8041b58:	da0e      	bge.n	8041b78 <msTempControlHandler+0x294>
 8041b5a:	4b3f      	ldr	r3, [pc, #252]	; (8041c58 <msTempControlHandler+0x374>)
 8041b5c:	885b      	ldrh	r3, [r3, #2]
 8041b5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041b60:	429a      	cmp	r2, r3
 8041b62:	d209      	bcs.n	8041b78 <msTempControlHandler+0x294>
	  {
		  StateFlag.initComplete = TRUE;
 8041b64:	4b3d      	ldr	r3, [pc, #244]	; (8041c5c <msTempControlHandler+0x378>)
 8041b66:	2201      	movs	r2, #1
 8041b68:	705a      	strb	r2, [r3, #1]
		  p_Statusflags->initComplete = StateFlag.initComplete;
 8041b6a:	4b3c      	ldr	r3, [pc, #240]	; (8041c5c <msTempControlHandler+0x378>)
 8041b6c:	785a      	ldrb	r2, [r3, #1]
 8041b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041b70:	705a      	strb	r2, [r3, #1]
		  State = Preheat;
 8041b72:	4b3b      	ldr	r3, [pc, #236]	; (8041c60 <msTempControlHandler+0x37c>)
 8041b74:	2201      	movs	r2, #1
 8041b76:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[1])
 8041b78:	4b37      	ldr	r3, [pc, #220]	; (8041c58 <msTempControlHandler+0x374>)
 8041b7a:	885b      	ldrh	r3, [r3, #2]
 8041b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041b7e:	429a      	cmp	r2, r3
 8041b80:	d109      	bne.n	8041b96 <msTempControlHandler+0x2b2>
	  {
		  StateFlag.preheatComplete_1 = TRUE;
 8041b82:	4b36      	ldr	r3, [pc, #216]	; (8041c5c <msTempControlHandler+0x378>)
 8041b84:	2201      	movs	r2, #1
 8041b86:	709a      	strb	r2, [r3, #2]
		  p_Statusflags->preheatComplete_1 = StateFlag.preheatComplete_1;
 8041b88:	4b34      	ldr	r3, [pc, #208]	; (8041c5c <msTempControlHandler+0x378>)
 8041b8a:	789a      	ldrb	r2, [r3, #2]
 8041b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041b8e:	709a      	strb	r2, [r3, #2]
		  State = Soak;
 8041b90:	4b33      	ldr	r3, [pc, #204]	; (8041c60 <msTempControlHandler+0x37c>)
 8041b92:	2202      	movs	r2, #2
 8041b94:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[2])
 8041b96:	4b30      	ldr	r3, [pc, #192]	; (8041c58 <msTempControlHandler+0x374>)
 8041b98:	889b      	ldrh	r3, [r3, #4]
 8041b9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041b9c:	429a      	cmp	r2, r3
 8041b9e:	d109      	bne.n	8041bb4 <msTempControlHandler+0x2d0>
	  {
		  StateFlag.soakComplete = TRUE;
 8041ba0:	4b2e      	ldr	r3, [pc, #184]	; (8041c5c <msTempControlHandler+0x378>)
 8041ba2:	2201      	movs	r2, #1
 8041ba4:	70da      	strb	r2, [r3, #3]
		  p_Statusflags->soakComplete = StateFlag.soakComplete;
 8041ba6:	4b2d      	ldr	r3, [pc, #180]	; (8041c5c <msTempControlHandler+0x378>)
 8041ba8:	78da      	ldrb	r2, [r3, #3]
 8041baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041bac:	70da      	strb	r2, [r3, #3]
		  State = Preheat;
 8041bae:	4b2c      	ldr	r3, [pc, #176]	; (8041c60 <msTempControlHandler+0x37c>)
 8041bb0:	2201      	movs	r2, #1
 8041bb2:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[3])
 8041bb4:	4b28      	ldr	r3, [pc, #160]	; (8041c58 <msTempControlHandler+0x374>)
 8041bb6:	88db      	ldrh	r3, [r3, #6]
 8041bb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041bba:	429a      	cmp	r2, r3
 8041bbc:	d109      	bne.n	8041bd2 <msTempControlHandler+0x2ee>
	  {
		  StateFlag.preheatComplete_2 = TRUE;
 8041bbe:	4b27      	ldr	r3, [pc, #156]	; (8041c5c <msTempControlHandler+0x378>)
 8041bc0:	2201      	movs	r2, #1
 8041bc2:	711a      	strb	r2, [r3, #4]
		  p_Statusflags->preheatComplete_2 = StateFlag.preheatComplete_2;
 8041bc4:	4b25      	ldr	r3, [pc, #148]	; (8041c5c <msTempControlHandler+0x378>)
 8041bc6:	791a      	ldrb	r2, [r3, #4]
 8041bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041bca:	711a      	strb	r2, [r3, #4]
		  State = Reflow;
 8041bcc:	4b24      	ldr	r3, [pc, #144]	; (8041c60 <msTempControlHandler+0x37c>)
 8041bce:	2203      	movs	r2, #3
 8041bd0:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[4])
 8041bd2:	4b21      	ldr	r3, [pc, #132]	; (8041c58 <msTempControlHandler+0x374>)
 8041bd4:	891b      	ldrh	r3, [r3, #8]
 8041bd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041bd8:	429a      	cmp	r2, r3
 8041bda:	d11a      	bne.n	8041c12 <msTempControlHandler+0x32e>
	  {
		  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8041bdc:	2017      	movs	r0, #23
 8041bde:	f003 f9d8 	bl	8044f92 <HAL_NVIC_DisableIRQ>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8041be2:	2108      	movs	r1, #8
 8041be4:	481f      	ldr	r0, [pc, #124]	; (8041c64 <msTempControlHandler+0x380>)
 8041be6:	f005 fdd9 	bl	804779c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8041bea:	2104      	movs	r1, #4
 8041bec:	481d      	ldr	r0, [pc, #116]	; (8041c64 <msTempControlHandler+0x380>)
 8041bee:	f005 fdd5 	bl	804779c <HAL_TIM_PWM_Stop>
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041bf2:	2200      	movs	r2, #0
 8041bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041bf8:	4816      	ldr	r0, [pc, #88]	; (8041c54 <msTempControlHandler+0x370>)
 8041bfa:	f003 fe59 	bl	80458b0 <HAL_GPIO_WritePin>
		  StateFlag.reflowComplete = TRUE;
 8041bfe:	4b17      	ldr	r3, [pc, #92]	; (8041c5c <msTempControlHandler+0x378>)
 8041c00:	2201      	movs	r2, #1
 8041c02:	715a      	strb	r2, [r3, #5]
		  p_Statusflags->reflowComplete = StateFlag.reflowComplete;
 8041c04:	4b15      	ldr	r3, [pc, #84]	; (8041c5c <msTempControlHandler+0x378>)
 8041c06:	795a      	ldrb	r2, [r3, #5]
 8041c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c0a:	715a      	strb	r2, [r3, #5]
		  State = Cooldown;
 8041c0c:	4b14      	ldr	r3, [pc, #80]	; (8041c60 <msTempControlHandler+0x37c>)
 8041c0e:	2204      	movs	r2, #4
 8041c10:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if (PhaseIndex_main[5] == ReflowIndex)
 8041c12:	4b11      	ldr	r3, [pc, #68]	; (8041c58 <msTempControlHandler+0x374>)
 8041c14:	895b      	ldrh	r3, [r3, #10]
 8041c16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041c18:	429a      	cmp	r2, r3
 8041c1a:	d116      	bne.n	8041c4a <msTempControlHandler+0x366>
	  {
		  StateFlag.cooldownComplete = TRUE;
 8041c1c:	4b0f      	ldr	r3, [pc, #60]	; (8041c5c <msTempControlHandler+0x378>)
 8041c1e:	2201      	movs	r2, #1
 8041c20:	719a      	strb	r2, [r3, #6]
		  p_Statusflags->cooldownComplete = StateFlag.cooldownComplete;
 8041c22:	4b0e      	ldr	r3, [pc, #56]	; (8041c5c <msTempControlHandler+0x378>)
 8041c24:	799a      	ldrb	r2, [r3, #6]
 8041c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c28:	719a      	strb	r2, [r3, #6]
		  State = Finish;
 8041c2a:	4b0d      	ldr	r3, [pc, #52]	; (8041c60 <msTempControlHandler+0x37c>)
 8041c2c:	2205      	movs	r2, #5
 8041c2e:	701a      	strb	r2, [r3, #0]
		  StateFlag.StartFlag = FALSE;
 8041c30:	4b0a      	ldr	r3, [pc, #40]	; (8041c5c <msTempControlHandler+0x378>)
 8041c32:	2200      	movs	r2, #0
 8041c34:	701a      	strb	r2, [r3, #0]
		  p_Statusflags->StartFlag = StateFlag.StartFlag;
 8041c36:	4b09      	ldr	r3, [pc, #36]	; (8041c5c <msTempControlHandler+0x378>)
 8041c38:	781a      	ldrb	r2, [r3, #0]
 8041c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c3c:	701a      	strb	r2, [r3, #0]
		  PIDFlag = 0;
 8041c3e:	4b0a      	ldr	r3, [pc, #40]	; (8041c68 <msTempControlHandler+0x384>)
 8041c40:	2200      	movs	r2, #0
 8041c42:	701a      	strb	r2, [r3, #0]
  }
  else
  {
	  ReflowIndex = 0;
  }
}
 8041c44:	e001      	b.n	8041c4a <msTempControlHandler+0x366>
	  ReflowIndex = 0;
 8041c46:	2300      	movs	r3, #0
 8041c48:	85fb      	strh	r3, [r7, #46]	; 0x2e
}
 8041c4a:	bf00      	nop
 8041c4c:	3748      	adds	r7, #72	; 0x48
 8041c4e:	46bd      	mov	sp, r7
 8041c50:	bd80      	pop	{r7, pc}
 8041c52:	bf00      	nop
 8041c54:	40020c00 	.word	0x40020c00
 8041c58:	20000214 	.word	0x20000214
 8041c5c:	20000240 	.word	0x20000240
 8041c60:	200002fe 	.word	0x200002fe
 8041c64:	200002b4 	.word	0x200002b4
 8041c68:	200003f0 	.word	0x200003f0

08041c6c <updateGuiVal>:

void updateGuiVal(msTempControlParams* CtrlParams, ReflowTemplate *p_ReflowParameters, uint16_t *p_PhaseIndex)
{
 8041c6c:	b590      	push	{r4, r7, lr}
 8041c6e:	b093      	sub	sp, #76	; 0x4c
 8041c70:	af04      	add	r7, sp, #16
 8041c72:	60f8      	str	r0, [r7, #12]
 8041c74:	60b9      	str	r1, [r7, #8]
 8041c76:	607a      	str	r2, [r7, #4]
	volatile float32_t *p_temperature	= CtrlParams->p_temperature;
 8041c78:	68fb      	ldr	r3, [r7, #12]
 8041c7a:	69db      	ldr	r3, [r3, #28]
 8041c7c:	637b      	str	r3, [r7, #52]	; 0x34
	volatile float32_t *p_PIDError   	= CtrlParams->p_PIDError;
 8041c7e:	68fb      	ldr	r3, [r7, #12]
 8041c80:	6a1b      	ldr	r3, [r3, #32]
 8041c82:	633b      	str	r3, [r7, #48]	; 0x30
	volatile float32_t f_PIDError    	= 0;
 8041c84:	f04f 0300 	mov.w	r3, #0
 8041c88:	613b      	str	r3, [r7, #16]
	uint32_t u32_SoakTemperature     	= p_ReflowParameters->SoakTempeture;
 8041c8a:	68bb      	ldr	r3, [r7, #8]
 8041c8c:	691b      	ldr	r3, [r3, #16]
 8041c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t u16_ReflowIndexCurrent  	= CtrlParams->u16_ReflowIndexCurrent;
 8041c90:	68fb      	ldr	r3, [r7, #12]
 8041c92:	885b      	ldrh	r3, [r3, #2]
 8041c94:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t u16_FirstHeatupTime     	=    p_PhaseIndex[1];
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	885b      	ldrh	r3, [r3, #2]
 8041c9a:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t u16_SoakTime   	    	=  ( p_PhaseIndex[2] - p_PhaseIndex[1] );
 8041c9c:	687b      	ldr	r3, [r7, #4]
 8041c9e:	3304      	adds	r3, #4
 8041ca0:	881a      	ldrh	r2, [r3, #0]
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	3302      	adds	r3, #2
 8041ca6:	881b      	ldrh	r3, [r3, #0]
 8041ca8:	1ad3      	subs	r3, r2, r3
 8041caa:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t u16_SecondHeatupTime    	=  ( p_PhaseIndex[3] - p_PhaseIndex[2] );
 8041cac:	687b      	ldr	r3, [r7, #4]
 8041cae:	3306      	adds	r3, #6
 8041cb0:	881a      	ldrh	r2, [r3, #0]
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	3304      	adds	r3, #4
 8041cb6:	881b      	ldrh	r3, [r3, #0]
 8041cb8:	1ad3      	subs	r3, r2, r3
 8041cba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t u16_ReflowTime 	     	=  ( p_PhaseIndex[4] - p_PhaseIndex[3] );
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	3308      	adds	r3, #8
 8041cc0:	881a      	ldrh	r2, [r3, #0]
 8041cc2:	687b      	ldr	r3, [r7, #4]
 8041cc4:	3306      	adds	r3, #6
 8041cc6:	881b      	ldrh	r3, [r3, #0]
 8041cc8:	1ad3      	subs	r3, r2, r3
 8041cca:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t u16_CooldownTime        	=  ( p_PhaseIndex[5] - p_PhaseIndex[4] );
 8041ccc:	687b      	ldr	r3, [r7, #4]
 8041cce:	330a      	adds	r3, #10
 8041cd0:	881a      	ldrh	r2, [r3, #0]
 8041cd2:	687b      	ldr	r3, [r7, #4]
 8041cd4:	3308      	adds	r3, #8
 8041cd6:	881b      	ldrh	r3, [r3, #0]
 8041cd8:	1ad3      	subs	r3, r2, r3
 8041cda:	843b      	strh	r3, [r7, #32]
	uint32_t u32_ReflowTemperature   	= p_ReflowParameters->ReflowTempeture;
 8041cdc:	68bb      	ldr	r3, [r7, #8]
 8041cde:	69db      	ldr	r3, [r3, #28]
 8041ce0:	61fb      	str	r3, [r7, #28]
	uint16_t u16_CooldownTemperature 	= 24;
 8041ce2:	2318      	movs	r3, #24
 8041ce4:	837b      	strh	r3, [r7, #26]
	bool b_SoakComplete              	= CtrlParams->p_StatusFlags->soakComplete;
 8041ce6:	68fb      	ldr	r3, [r7, #12]
 8041ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cea:	78db      	ldrb	r3, [r3, #3]
 8041cec:	767b      	strb	r3, [r7, #25]
	bool b_ReflowComplete            	= CtrlParams->p_StatusFlags->reflowComplete;
 8041cee:	68fb      	ldr	r3, [r7, #12]
 8041cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cf2:	795b      	ldrb	r3, [r3, #5]
 8041cf4:	763b      	strb	r3, [r7, #24]
	bool b_PreheatComplete_1         	= CtrlParams->p_StatusFlags->preheatComplete_1;
 8041cf6:	68fb      	ldr	r3, [r7, #12]
 8041cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cfa:	789b      	ldrb	r3, [r3, #2]
 8041cfc:	75fb      	strb	r3, [r7, #23]
	bool b_PreheatComplete_2         	= CtrlParams->p_StatusFlags->preheatComplete_2;
 8041cfe:	68fb      	ldr	r3, [r7, #12]
 8041d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d02:	791b      	ldrb	r3, [r3, #4]
 8041d04:	75bb      	strb	r3, [r7, #22]
	bool b_InitComplete              	= CtrlParams->p_StatusFlags->initComplete;
 8041d06:	68fb      	ldr	r3, [r7, #12]
 8041d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d0a:	785b      	ldrb	r3, [r3, #1]
 8041d0c:	757b      	strb	r3, [r7, #21]
	bool b_CooldownComplete          	= CtrlParams->p_StatusFlags->cooldownComplete;
 8041d0e:	68fb      	ldr	r3, [r7, #12]
 8041d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d12:	799b      	ldrb	r3, [r3, #6]
 8041d14:	753b      	strb	r3, [r7, #20]


	lcd_clear_cmd();
 8041d16:	f001 ff5e 	bl	8043bd6 <lcd_clear_cmd>
	f_PIDError = *p_PIDError;
 8041d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041d1c:	681b      	ldr	r3, [r3, #0]
 8041d1e:	613b      	str	r3, [r7, #16]
	f_PIDError = fabsf(f_PIDError);
 8041d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8041d24:	eef0 7ae7 	vabs.f32	s15, s15
 8041d28:	edc7 7a04 	vstr	s15, [r7, #16]

	/*Show Temperature and Error*/
	f_updateGuiValTempError(p_temperature, f_PIDError);
 8041d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8041d30:	eeb0 0a67 	vmov.f32	s0, s15
 8041d34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8041d36:	f000 fea5 	bl	8042a84 <f_updateGuiValTempError>
	/*First Heatup Phase*/
	if( (TRUE == b_InitComplete) && (TRUE != b_PreheatComplete_1) )
 8041d3a:	7d7b      	ldrb	r3, [r7, #21]
 8041d3c:	2b00      	cmp	r3, #0
 8041d3e:	d00b      	beq.n	8041d58 <updateGuiVal+0xec>
 8041d40:	7dfb      	ldrb	r3, [r7, #23]
 8041d42:	f083 0301 	eor.w	r3, r3, #1
 8041d46:	b2db      	uxtb	r3, r3
 8041d48:	2b00      	cmp	r3, #0
 8041d4a:	d005      	beq.n	8041d58 <updateGuiVal+0xec>
	{
		f_updateGuiValGradientSoakParam( u32_SoakTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent);
 8041d4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041d4e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041d50:	4619      	mov	r1, r3
 8041d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8041d54:	f000 fee2 	bl	8042b1c <f_updateGuiValGradientSoakParam>
	}
	else{}
	/*SOAK time and Temperature*/
	if( (TRUE == b_PreheatComplete_1) && (TRUE != b_SoakComplete) )
 8041d58:	7dfb      	ldrb	r3, [r7, #23]
 8041d5a:	2b00      	cmp	r3, #0
 8041d5c:	d00b      	beq.n	8041d76 <updateGuiVal+0x10a>
 8041d5e:	7e7b      	ldrb	r3, [r7, #25]
 8041d60:	f083 0301 	eor.w	r3, r3, #1
 8041d64:	b2db      	uxtb	r3, r3
 8041d66:	2b00      	cmp	r3, #0
 8041d68:	d005      	beq.n	8041d76 <updateGuiVal+0x10a>
	{
		f_updateGuiValSoakParam(u32_SoakTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime);
 8041d6a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041d6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8041d72:	f000 ff19 	bl	8042ba8 <f_updateGuiValSoakParam>
	}
	else{}
	/*Second Heatup */
	if( (TRUE == b_SoakComplete) && (TRUE != b_PreheatComplete_2) )
 8041d76:	7e7b      	ldrb	r3, [r7, #25]
 8041d78:	2b00      	cmp	r3, #0
 8041d7a:	d00e      	beq.n	8041d9a <updateGuiVal+0x12e>
 8041d7c:	7dbb      	ldrb	r3, [r7, #22]
 8041d7e:	f083 0301 	eor.w	r3, r3, #1
 8041d82:	b2db      	uxtb	r3, r3
 8041d84:	2b00      	cmp	r3, #0
 8041d86:	d008      	beq.n	8041d9a <updateGuiVal+0x12e>
	{
		f_updateGuiValGradientReflowParam(u32_ReflowTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime);
 8041d88:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041d8a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8041d8c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041d90:	9300      	str	r3, [sp, #0]
 8041d92:	4603      	mov	r3, r0
 8041d94:	69f8      	ldr	r0, [r7, #28]
 8041d96:	f000 ff53 	bl	8042c40 <f_updateGuiValGradientReflowParam>
	}
	else{}
	/*Reflow  */
	if( (TRUE == b_PreheatComplete_2) && (TRUE != b_ReflowComplete) && (TRUE == b_SoakComplete) )
 8041d9a:	7dbb      	ldrb	r3, [r7, #22]
 8041d9c:	2b00      	cmp	r3, #0
 8041d9e:	d013      	beq.n	8041dc8 <updateGuiVal+0x15c>
 8041da0:	7e3b      	ldrb	r3, [r7, #24]
 8041da2:	f083 0301 	eor.w	r3, r3, #1
 8041da6:	b2db      	uxtb	r3, r3
 8041da8:	2b00      	cmp	r3, #0
 8041daa:	d00d      	beq.n	8041dc8 <updateGuiVal+0x15c>
 8041dac:	7e7b      	ldrb	r3, [r7, #25]
 8041dae:	2b00      	cmp	r3, #0
 8041db0:	d00a      	beq.n	8041dc8 <updateGuiVal+0x15c>
	{
		f_updateGuiValReflowParam(u32_ReflowTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime, u16_ReflowTime);
 8041db2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041db4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8041db6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8041dba:	9301      	str	r3, [sp, #4]
 8041dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041dbe:	9300      	str	r3, [sp, #0]
 8041dc0:	4603      	mov	r3, r0
 8041dc2:	69f8      	ldr	r0, [r7, #28]
 8041dc4:	f000 ff8a 	bl	8042cdc <f_updateGuiValReflowParam>
	}
	else{}
	/*Cooldown  */
	if( (TRUE == b_ReflowComplete) && (TRUE != b_CooldownComplete) )
 8041dc8:	7e3b      	ldrb	r3, [r7, #24]
 8041dca:	2b00      	cmp	r3, #0
 8041dcc:	d012      	beq.n	8041df4 <updateGuiVal+0x188>
 8041dce:	7d3b      	ldrb	r3, [r7, #20]
 8041dd0:	f083 0301 	eor.w	r3, r3, #1
 8041dd4:	b2db      	uxtb	r3, r3
 8041dd6:	2b00      	cmp	r3, #0
 8041dd8:	d00c      	beq.n	8041df4 <updateGuiVal+0x188>
	{
		f_updateGuiValCoolDownParam(u16_CooldownTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime, u16_ReflowTime, u16_CooldownTime);
 8041dda:	8b78      	ldrh	r0, [r7, #26]
 8041ddc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041dde:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8041de0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041de2:	8c3b      	ldrh	r3, [r7, #32]
 8041de4:	9302      	str	r3, [sp, #8]
 8041de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8041de8:	9301      	str	r3, [sp, #4]
 8041dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041dec:	9300      	str	r3, [sp, #0]
 8041dee:	4623      	mov	r3, r4
 8041df0:	f000 ffc4 	bl	8042d7c <f_updateGuiValCoolDownParam>
	}
	else{}
	/*Cooldown Complete  */
	if( (TRUE == b_CooldownComplete) )
 8041df4:	7d3b      	ldrb	r3, [r7, #20]
 8041df6:	2b00      	cmp	r3, #0
 8041df8:	d001      	beq.n	8041dfe <updateGuiVal+0x192>
	{
		f_updateGuiReflowFinished();
 8041dfa:	f001 f811 	bl	8042e20 <f_updateGuiReflowFinished>
	}
	else{}
}
 8041dfe:	bf00      	nop
 8041e00:	373c      	adds	r7, #60	; 0x3c
 8041e02:	46bd      	mov	sp, r7
 8041e04:	bd90      	pop	{r4, r7, pc}
	...

08041e08 <ResetFlags>:
void ResetFlags(void)
{
 8041e08:	b480      	push	{r7}
 8041e0a:	af00      	add	r7, sp, #0


	  StateFlag.StartFlag = FALSE;
 8041e0c:	4b0c      	ldr	r3, [pc, #48]	; (8041e40 <ResetFlags+0x38>)
 8041e0e:	2200      	movs	r2, #0
 8041e10:	701a      	strb	r2, [r3, #0]
	  StateFlag.cooldownComplete = FALSE;
 8041e12:	4b0b      	ldr	r3, [pc, #44]	; (8041e40 <ResetFlags+0x38>)
 8041e14:	2200      	movs	r2, #0
 8041e16:	719a      	strb	r2, [r3, #6]
	  StateFlag.initComplete = FALSE;
 8041e18:	4b09      	ldr	r3, [pc, #36]	; (8041e40 <ResetFlags+0x38>)
 8041e1a:	2200      	movs	r2, #0
 8041e1c:	705a      	strb	r2, [r3, #1]
	  StateFlag.preheatComplete_1 = FALSE;
 8041e1e:	4b08      	ldr	r3, [pc, #32]	; (8041e40 <ResetFlags+0x38>)
 8041e20:	2200      	movs	r2, #0
 8041e22:	709a      	strb	r2, [r3, #2]
	  StateFlag.preheatComplete_2 = FALSE;
 8041e24:	4b06      	ldr	r3, [pc, #24]	; (8041e40 <ResetFlags+0x38>)
 8041e26:	2200      	movs	r2, #0
 8041e28:	711a      	strb	r2, [r3, #4]
	  StateFlag.reflowComplete = FALSE;
 8041e2a:	4b05      	ldr	r3, [pc, #20]	; (8041e40 <ResetFlags+0x38>)
 8041e2c:	2200      	movs	r2, #0
 8041e2e:	715a      	strb	r2, [r3, #5]
	  StateFlag.soakComplete = FALSE;
 8041e30:	4b03      	ldr	r3, [pc, #12]	; (8041e40 <ResetFlags+0x38>)
 8041e32:	2200      	movs	r2, #0
 8041e34:	70da      	strb	r2, [r3, #3]



}
 8041e36:	bf00      	nop
 8041e38:	46bd      	mov	sp, r7
 8041e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e3e:	4770      	bx	lr
 8041e40:	20000240 	.word	0x20000240

08041e44 <ReflowAgain>:

//TODO Better logic to be implemented
void ReflowAgain(void)
{
 8041e44:	b580      	push	{r7, lr}
 8041e46:	b082      	sub	sp, #8
 8041e48:	af00      	add	r7, sp, #0
	uint16_t u16_Counter = 0;
 8041e4a:	2300      	movs	r3, #0
 8041e4c:	80fb      	strh	r3, [r7, #6]

	lcd_clear_cmd();
 8041e4e:	f001 fec2 	bl	8043bd6 <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8041e52:	2100      	movs	r1, #0
 8041e54:	2000      	movs	r0, #0
 8041e56:	f001 fece 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Reflow Again ?");
 8041e5a:	4828      	ldr	r0, [pc, #160]	; (8041efc <ReflowAgain+0xb8>)
 8041e5c:	f001 ff1b 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 0);
 8041e60:	2100      	movs	r1, #0
 8041e62:	2001      	movs	r0, #1
 8041e64:	f001 fec7 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Yes/No");
 8041e68:	4825      	ldr	r0, [pc, #148]	; (8041f00 <ReflowAgain+0xbc>)
 8041e6a:	f001 ff14 	bl	8043c96 <lcd_send_string>
	TIM1->CNT = 10;
 8041e6e:	4b25      	ldr	r3, [pc, #148]	; (8041f04 <ReflowAgain+0xc0>)
 8041e70:	220a      	movs	r2, #10
 8041e72:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		u16_Counter = TIM1->CNT;
 8041e74:	4b23      	ldr	r3, [pc, #140]	; (8041f04 <ReflowAgain+0xc0>)
 8041e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041e78:	80fb      	strh	r3, [r7, #6]

		if((10 < u16_Counter)  )
 8041e7a:	88fb      	ldrh	r3, [r7, #6]
 8041e7c:	2b0a      	cmp	r3, #10
 8041e7e:	d923      	bls.n	8041ec8 <ReflowAgain+0x84>
		{
			lcd_put_cur(1, 5);
 8041e80:	2105      	movs	r1, #5
 8041e82:	2001      	movs	r0, #1
 8041e84:	f001 feb7 	bl	8043bf6 <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 8041e88:	200f      	movs	r0, #15
 8041e8a:	f001 fe2d 	bl	8043ae8 <lcd_send_cmd>
			while(1)
			{
				if(TRUE == ui8_encButtonPressed)
 8041e8e:	4b1e      	ldr	r3, [pc, #120]	; (8041f08 <ReflowAgain+0xc4>)
 8041e90:	781b      	ldrb	r3, [r3, #0]
 8041e92:	b2db      	uxtb	r3, r3
 8041e94:	2b01      	cmp	r3, #1
 8041e96:	d1fa      	bne.n	8041e8e <ReflowAgain+0x4a>
				{
					lcd_clear_cmd();
 8041e98:	f001 fe9d 	bl	8043bd6 <lcd_clear_cmd>
					lcd_put_cur(0, 0);
 8041e9c:	2100      	movs	r1, #0
 8041e9e:	2000      	movs	r0, #0
 8041ea0:	f001 fea9 	bl	8043bf6 <lcd_put_cur>
					lcd_send_string("Turn OFF or");
 8041ea4:	4819      	ldr	r0, [pc, #100]	; (8041f0c <ReflowAgain+0xc8>)
 8041ea6:	f001 fef6 	bl	8043c96 <lcd_send_string>
					lcd_put_cur(1, 0);
 8041eaa:	2100      	movs	r1, #0
 8041eac:	2001      	movs	r0, #1
 8041eae:	f001 fea2 	bl	8043bf6 <lcd_put_cur>
					lcd_send_string("Restart!");
 8041eb2:	4817      	ldr	r0, [pc, #92]	; (8041f10 <ReflowAgain+0xcc>)
 8041eb4:	f001 feef 	bl	8043c96 <lcd_send_string>
					lcd_send_cmd(LCD_CURSOR_OFF);
 8041eb8:	200c      	movs	r0, #12
 8041eba:	f001 fe15 	bl	8043ae8 <lcd_send_cmd>

					ui8_encButtonPressed = FALSE;
 8041ebe:	4b12      	ldr	r3, [pc, #72]	; (8041f08 <ReflowAgain+0xc4>)
 8041ec0:	2200      	movs	r2, #0
 8041ec2:	701a      	strb	r2, [r3, #0]
					break;
 8041ec4:	bf00      	nop
				}
			}
			break;
 8041ec6:	e015      	b.n	8041ef4 <ReflowAgain+0xb0>
		}
		else if ( (10 > u16_Counter))
 8041ec8:	88fb      	ldrh	r3, [r7, #6]
 8041eca:	2b09      	cmp	r3, #9
 8041ecc:	d8d2      	bhi.n	8041e74 <ReflowAgain+0x30>
		{
			lcd_put_cur(1, 0);
 8041ece:	2100      	movs	r1, #0
 8041ed0:	2001      	movs	r0, #1
 8041ed2:	f001 fe90 	bl	8043bf6 <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 8041ed6:	200f      	movs	r0, #15
 8041ed8:	f001 fe06 	bl	8043ae8 <lcd_send_cmd>
			while(1)
			{
				if(TRUE == ui8_encButtonPressed)
 8041edc:	4b0a      	ldr	r3, [pc, #40]	; (8041f08 <ReflowAgain+0xc4>)
 8041ede:	781b      	ldrb	r3, [r3, #0]
 8041ee0:	b2db      	uxtb	r3, r3
 8041ee2:	2b01      	cmp	r3, #1
 8041ee4:	d1fa      	bne.n	8041edc <ReflowAgain+0x98>
				{
					ResetFlags();
 8041ee6:	f7ff ff8f 	bl	8041e08 <ResetFlags>
					ui8_encButtonPressed = FALSE;
 8041eea:	4b07      	ldr	r3, [pc, #28]	; (8041f08 <ReflowAgain+0xc4>)
 8041eec:	2200      	movs	r2, #0
 8041eee:	701a      	strb	r2, [r3, #0]
					NVIC_SystemReset(); /*Init a system reset*/
 8041ef0:	f7ff f882 	bl	8040ff8 <__NVIC_SystemReset>
			}
		}

	}

}
 8041ef4:	bf00      	nop
 8041ef6:	3708      	adds	r7, #8
 8041ef8:	46bd      	mov	sp, r7
 8041efa:	bd80      	pop	{r7, pc}
 8041efc:	0804e030 	.word	0x0804e030
 8041f00:	0804e040 	.word	0x0804e040
 8041f04:	40010000 	.word	0x40010000
 8041f08:	20000349 	.word	0x20000349
 8041f0c:	0804e048 	.word	0x0804e048
 8041f10:	0804e054 	.word	0x0804e054

08041f14 <f_GuiErrorCheck>:

void f_GuiErrorCheck(volatile float temperature)
{
 8041f14:	b580      	push	{r7, lr}
 8041f16:	b084      	sub	sp, #16
 8041f18:	af00      	add	r7, sp, #0
 8041f1a:	ed87 0a01 	vstr	s0, [r7, #4]

	//###################ErrorCheck##########################
	if (-1 == temperature)
 8041f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8041f22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8041f26:	eef4 7a47 	vcmp.f32	s15, s14
 8041f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041f2e:	d130      	bne.n	8041f92 <f_GuiErrorCheck+0x7e>
	{
		int errorCnt = 0;
 8041f30:	2300      	movs	r3, #0
 8041f32:	60fb      	str	r3, [r7, #12]
		State = Error;
 8041f34:	4b19      	ldr	r3, [pc, #100]	; (8041f9c <f_GuiErrorCheck+0x88>)
 8041f36:	2206      	movs	r2, #6
 8041f38:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(1, 0);
 8041f3a:	2100      	movs	r1, #0
 8041f3c:	2001      	movs	r0, #1
 8041f3e:	f001 fe5a 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Sensor Error");
 8041f42:	4817      	ldr	r0, [pc, #92]	; (8041fa0 <f_GuiErrorCheck+0x8c>)
 8041f44:	f001 fea7 	bl	8043c96 <lcd_send_string>
		HAL_Delay(2000);
 8041f48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8041f4c:	f002 fed4 	bl	8044cf8 <HAL_Delay>
		lcd_clear_cmd();
 8041f50:	f001 fe41 	bl	8043bd6 <lcd_clear_cmd>
		while(1)
		{
			if(0 == errorCnt)
 8041f54:	68fb      	ldr	r3, [r7, #12]
 8041f56:	2b00      	cmp	r3, #0
 8041f58:	d110      	bne.n	8041f7c <f_GuiErrorCheck+0x68>
			{
				lcd_put_cur(0, 0);
 8041f5a:	2100      	movs	r1, #0
 8041f5c:	2000      	movs	r0, #0
 8041f5e:	f001 fe4a 	bl	8043bf6 <lcd_put_cur>
				lcd_send_string("Reconnect");
 8041f62:	4810      	ldr	r0, [pc, #64]	; (8041fa4 <f_GuiErrorCheck+0x90>)
 8041f64:	f001 fe97 	bl	8043c96 <lcd_send_string>
				lcd_put_cur(1, 0);
 8041f68:	2100      	movs	r1, #0
 8041f6a:	2001      	movs	r0, #1
 8041f6c:	f001 fe43 	bl	8043bf6 <lcd_put_cur>
				lcd_send_string("Sensor");
 8041f70:	480d      	ldr	r0, [pc, #52]	; (8041fa8 <f_GuiErrorCheck+0x94>)
 8041f72:	f001 fe90 	bl	8043c96 <lcd_send_string>
				errorCnt++;
 8041f76:	68fb      	ldr	r3, [r7, #12]
 8041f78:	3301      	adds	r3, #1
 8041f7a:	60fb      	str	r3, [r7, #12]
			}
			else
			{

			}
			if (-1 != temperature)
 8041f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8041f80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8041f84:	eef4 7a47 	vcmp.f32	s15, s14
 8041f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041f8c:	d100      	bne.n	8041f90 <f_GuiErrorCheck+0x7c>
			if(0 == errorCnt)
 8041f8e:	e7e1      	b.n	8041f54 <f_GuiErrorCheck+0x40>
			{
				break;
 8041f90:	bf00      	nop
			{
				//do nothing
			}
		}
	}
}
 8041f92:	bf00      	nop
 8041f94:	3710      	adds	r7, #16
 8041f96:	46bd      	mov	sp, r7
 8041f98:	bd80      	pop	{r7, pc}
 8041f9a:	bf00      	nop
 8041f9c:	200002fe 	.word	0x200002fe
 8041fa0:	0804e060 	.word	0x0804e060
 8041fa4:	0804e070 	.word	0x0804e070
 8041fa8:	0804e07c 	.word	0x0804e07c

08041fac <f_GuiSensorInitOKmsg>:

void f_GuiSensorInitOKmsg(void)
{
 8041fac:	b580      	push	{r7, lr}
 8041fae:	af00      	add	r7, sp, #0

	lcd_clear_cmd();
 8041fb0:	f001 fe11 	bl	8043bd6 <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8041fb4:	2100      	movs	r1, #0
 8041fb6:	2000      	movs	r0, #0
 8041fb8:	f001 fe1d 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Initializing...");
 8041fbc:	4805      	ldr	r0, [pc, #20]	; (8041fd4 <f_GuiSensorInitOKmsg+0x28>)
 8041fbe:	f001 fe6a 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 0);
 8041fc2:	2100      	movs	r1, #0
 8041fc4:	2001      	movs	r0, #1
 8041fc6:	f001 fe16 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Sensor OK");
 8041fca:	4803      	ldr	r0, [pc, #12]	; (8041fd8 <f_GuiSensorInitOKmsg+0x2c>)
 8041fcc:	f001 fe63 	bl	8043c96 <lcd_send_string>

}
 8041fd0:	bf00      	nop
 8041fd2:	bd80      	pop	{r7, pc}
 8041fd4:	0804e084 	.word	0x0804e084
 8041fd8:	0804e094 	.word	0x0804e094

08041fdc <f_GuiMenuSoakTemp>:
void f_GuiMenuSoakTemp(ReflowTemplate *p_ReflowParameters)
{
 8041fdc:	b580      	push	{r7, lr}
 8041fde:	b086      	sub	sp, #24
 8041fe0:	af00      	add	r7, sp, #0
 8041fe2:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8041fe4:	4a2a      	ldr	r2, [pc, #168]	; (8042090 <f_GuiMenuSoakTemp+0xb4>)
 8041fe6:	f107 030c 	add.w	r3, r7, #12
 8041fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8041fee:	6018      	str	r0, [r3, #0]
 8041ff0:	3304      	adds	r3, #4
 8041ff2:	7019      	strb	r1, [r3, #0]
 8041ff4:	f107 0311 	add.w	r3, r7, #17
 8041ff8:	2200      	movs	r2, #0
 8041ffa:	601a      	str	r2, [r3, #0]
 8041ffc:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8041ffe:	2300      	movs	r3, #0
 8042000:	82fb      	strh	r3, [r7, #22]
	//###################Menu1##########################
	lcd_clear_cmd();
 8042002:	f001 fde8 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->SoakTempeture) * 4;
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	691b      	ldr	r3, [r3, #16]
 804200a:	4a22      	ldr	r2, [pc, #136]	; (8042094 <f_GuiMenuSoakTemp+0xb8>)
 804200c:	009b      	lsls	r3, r3, #2
 804200e:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(1800 < TIM1->CNT)
 8042010:	4b20      	ldr	r3, [pc, #128]	; (8042094 <f_GuiMenuSoakTemp+0xb8>)
 8042012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042014:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8042018:	d903      	bls.n	8042022 <f_GuiMenuSoakTemp+0x46>
		{
			TIM1->CNT = 1800;
 804201a:	4b1e      	ldr	r3, [pc, #120]	; (8042094 <f_GuiMenuSoakTemp+0xb8>)
 804201c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8042020:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT/4;
 8042022:	4b1c      	ldr	r3, [pc, #112]	; (8042094 <f_GuiMenuSoakTemp+0xb8>)
 8042024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042026:	089b      	lsrs	r3, r3, #2
 8042028:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 804202a:	8afa      	ldrh	r2, [r7, #22]
 804202c:	f107 030c 	add.w	r3, r7, #12
 8042030:	4919      	ldr	r1, [pc, #100]	; (8042098 <f_GuiMenuSoakTemp+0xbc>)
 8042032:	4618      	mov	r0, r3
 8042034:	f007 faae 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 8042038:	f001 fdcd 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 804203c:	2100      	movs	r1, #0
 804203e:	2000      	movs	r0, #0
 8042040:	f001 fdd9 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter T1[degC]");
 8042044:	4815      	ldr	r0, [pc, #84]	; (804209c <f_GuiMenuSoakTemp+0xc0>)
 8042046:	f001 fe26 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 804204a:	2100      	movs	r1, #0
 804204c:	2001      	movs	r0, #1
 804204e:	f001 fdd2 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("T1=");
 8042052:	4813      	ldr	r0, [pc, #76]	; (80420a0 <f_GuiMenuSoakTemp+0xc4>)
 8042054:	f001 fe1f 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 3);
 8042058:	2103      	movs	r1, #3
 804205a:	2001      	movs	r0, #1
 804205c:	f001 fdcb 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042060:	f107 030c 	add.w	r3, r7, #12
 8042064:	4618      	mov	r0, r3
 8042066:	f001 fe16 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 804206a:	20c8      	movs	r0, #200	; 0xc8
 804206c:	f002 fe44 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042070:	4b0c      	ldr	r3, [pc, #48]	; (80420a4 <f_GuiMenuSoakTemp+0xc8>)
 8042072:	781b      	ldrb	r3, [r3, #0]
 8042074:	b2db      	uxtb	r3, r3
 8042076:	2b01      	cmp	r3, #1
 8042078:	d1ca      	bne.n	8042010 <f_GuiMenuSoakTemp+0x34>
		{
			p_ReflowParameters->SoakTempeture = u16_encoder_cnt_loc;
 804207a:	8afa      	ldrh	r2, [r7, #22]
 804207c:	687b      	ldr	r3, [r7, #4]
 804207e:	611a      	str	r2, [r3, #16]
			ui8_encButtonPressed = FALSE;
 8042080:	4b08      	ldr	r3, [pc, #32]	; (80420a4 <f_GuiMenuSoakTemp+0xc8>)
 8042082:	2200      	movs	r2, #0
 8042084:	701a      	strb	r2, [r3, #0]
			break;
 8042086:	bf00      	nop
		else
		{

		}
	}
}
 8042088:	bf00      	nop
 804208a:	3718      	adds	r7, #24
 804208c:	46bd      	mov	sp, r7
 804208e:	bd80      	pop	{r7, pc}
 8042090:	0804e0b8 	.word	0x0804e0b8
 8042094:	40010000 	.word	0x40010000
 8042098:	0804e0a0 	.word	0x0804e0a0
 804209c:	0804e0a4 	.word	0x0804e0a4
 80420a0:	0804e0b4 	.word	0x0804e0b4
 80420a4:	20000349 	.word	0x20000349

080420a8 <f_GuiFEEUpdateRead>:
void f_GuiFEEUpdateRead(msTempControlParams *p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 80420a8:	b580      	push	{r7, lr}
 80420aa:	b082      	sub	sp, #8
 80420ac:	af00      	add	r7, sp, #0
 80420ae:	6078      	str	r0, [r7, #4]
 80420b0:	6039      	str	r1, [r7, #0]
	//###################FEE Read##########################

	HAL_FLASH_Unlock();
 80420b2:	f002 ffdd 	bl	8045070 <HAL_FLASH_Unlock>
	/* Unlock the Flash Program Erase controller */
	/* EEPROM Init */
	if( EE_Init() != EE_OK)
 80420b6:	f000 fed7 	bl	8042e68 <EE_Init>
 80420ba:	4603      	mov	r3, r0
 80420bc:	2b00      	cmp	r3, #0
 80420be:	d004      	beq.n	80420ca <f_GuiFEEUpdateRead+0x22>
	{
		u32_EEPromErrCnt++;
 80420c0:	4b1b      	ldr	r3, [pc, #108]	; (8042130 <f_GuiFEEUpdateRead+0x88>)
 80420c2:	681b      	ldr	r3, [r3, #0]
 80420c4:	3301      	adds	r3, #1
 80420c6:	4a1a      	ldr	r2, [pc, #104]	; (8042130 <f_GuiFEEUpdateRead+0x88>)
 80420c8:	6013      	str	r3, [r2, #0]
	{

	}


	if( HAL_ERROR == FEE_ReadCtrlParams( p_CtrlParams, p_ReflowParameters ) )
 80420ca:	6839      	ldr	r1, [r7, #0]
 80420cc:	6878      	ldr	r0, [r7, #4]
 80420ce:	f001 fbe1 	bl	8043894 <FEE_ReadCtrlParams>
 80420d2:	4603      	mov	r3, r0
 80420d4:	2b01      	cmp	r3, #1
 80420d6:	d123      	bne.n	8042120 <f_GuiFEEUpdateRead+0x78>
	{
		p_CtrlParams->ui8_bank1Percentage = 100;
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	2264      	movs	r2, #100	; 0x64
 80420dc:	701a      	strb	r2, [r3, #0]
		p_CtrlParams->ui8_bank2Percentage = 100;
 80420de:	687b      	ldr	r3, [r7, #4]
 80420e0:	2264      	movs	r2, #100	; 0x64
 80420e2:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP = 200;
 80420e4:	683b      	ldr	r3, [r7, #0]
 80420e6:	4a13      	ldr	r2, [pc, #76]	; (8042134 <f_GuiFEEUpdateRead+0x8c>)
 80420e8:	601a      	str	r2, [r3, #0]
		p_ReflowParameters->ReflowTempeture = 250;
 80420ea:	683b      	ldr	r3, [r7, #0]
 80420ec:	22fa      	movs	r2, #250	; 0xfa
 80420ee:	61da      	str	r2, [r3, #28]
		p_ReflowParameters->ReflowTime = 100;
 80420f0:	683b      	ldr	r3, [r7, #0]
 80420f2:	2264      	movs	r2, #100	; 0x64
 80420f4:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->SoakTempeture = 110;
 80420f6:	683b      	ldr	r3, [r7, #0]
 80420f8:	226e      	movs	r2, #110	; 0x6e
 80420fa:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->SoakTime = 150;
 80420fc:	683b      	ldr	r3, [r7, #0]
 80420fe:	2296      	movs	r2, #150	; 0x96
 8042100:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->firstHeatUpRate = 2.0;
 8042102:	683b      	ldr	r3, [r7, #0]
 8042104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8042108:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate = 2.0;
 804210a:	683b      	ldr	r3, [r7, #0]
 804210c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8042110:	619a      	str	r2, [r3, #24]
		/*FlashWrite*/
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8042112:	4b09      	ldr	r3, [pc, #36]	; (8042138 <f_GuiFEEUpdateRead+0x90>)
 8042114:	22f3      	movs	r2, #243	; 0xf3
 8042116:	60da      	str	r2, [r3, #12]
		FEE_WriteCtrlParams(p_CtrlParams, p_ReflowParameters);
 8042118:	6839      	ldr	r1, [r7, #0]
 804211a:	6878      	ldr	r0, [r7, #4]
 804211c:	f001 facc 	bl	80436b8 <FEE_WriteCtrlParams>
	else
	{

	}

	FLASH_FlushCaches();
 8042120:	f003 f9e4 	bl	80454ec <FLASH_FlushCaches>
	HAL_FLASH_Lock();
 8042124:	f002 ffc6 	bl	80450b4 <HAL_FLASH_Lock>
}
 8042128:	bf00      	nop
 804212a:	3708      	adds	r7, #8
 804212c:	46bd      	mov	sp, r7
 804212e:	bd80      	pop	{r7, pc}
 8042130:	20000210 	.word	0x20000210
 8042134:	43480000 	.word	0x43480000
 8042138:	40023c00 	.word	0x40023c00

0804213c <f_GuiMenuSoakTime>:
void f_GuiMenuSoakTime(ReflowTemplate *p_ReflowParameters)
{
 804213c:	b580      	push	{r7, lr}
 804213e:	b086      	sub	sp, #24
 8042140:	af00      	add	r7, sp, #0
 8042142:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042144:	4a2c      	ldr	r2, [pc, #176]	; (80421f8 <f_GuiMenuSoakTime+0xbc>)
 8042146:	f107 030c 	add.w	r3, r7, #12
 804214a:	e892 0003 	ldmia.w	r2, {r0, r1}
 804214e:	6018      	str	r0, [r3, #0]
 8042150:	3304      	adds	r3, #4
 8042152:	7019      	strb	r1, [r3, #0]
 8042154:	f107 0311 	add.w	r3, r7, #17
 8042158:	2200      	movs	r2, #0
 804215a:	601a      	str	r2, [r3, #0]
 804215c:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 804215e:	2300      	movs	r3, #0
 8042160:	82fb      	strh	r3, [r7, #22]
	//###################Menu2##########################
	HAL_Delay(100);
 8042162:	2064      	movs	r0, #100	; 0x64
 8042164:	f002 fdc8 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 8042168:	f001 fd35 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->SoakTime) * 4;
 804216c:	687b      	ldr	r3, [r7, #4]
 804216e:	695b      	ldr	r3, [r3, #20]
 8042170:	4a22      	ldr	r2, [pc, #136]	; (80421fc <f_GuiMenuSoakTime+0xc0>)
 8042172:	009b      	lsls	r3, r3, #2
 8042174:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(10000 < TIM1->CNT)
 8042176:	4b21      	ldr	r3, [pc, #132]	; (80421fc <f_GuiMenuSoakTime+0xc0>)
 8042178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804217a:	f242 7210 	movw	r2, #10000	; 0x2710
 804217e:	4293      	cmp	r3, r2
 8042180:	d903      	bls.n	804218a <f_GuiMenuSoakTime+0x4e>
		{
			TIM1->CNT = 10000;
 8042182:	4b1e      	ldr	r3, [pc, #120]	; (80421fc <f_GuiMenuSoakTime+0xc0>)
 8042184:	f242 7210 	movw	r2, #10000	; 0x2710
 8042188:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 804218a:	4b1c      	ldr	r3, [pc, #112]	; (80421fc <f_GuiMenuSoakTime+0xc0>)
 804218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804218e:	089b      	lsrs	r3, r3, #2
 8042190:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042192:	8afa      	ldrh	r2, [r7, #22]
 8042194:	f107 030c 	add.w	r3, r7, #12
 8042198:	4919      	ldr	r1, [pc, #100]	; (8042200 <f_GuiMenuSoakTime+0xc4>)
 804219a:	4618      	mov	r0, r3
 804219c:	f007 f9fa 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 80421a0:	f001 fd19 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80421a4:	2100      	movs	r1, #0
 80421a6:	2000      	movs	r0, #0
 80421a8:	f001 fd25 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter t1 [s]");
 80421ac:	4815      	ldr	r0, [pc, #84]	; (8042204 <f_GuiMenuSoakTime+0xc8>)
 80421ae:	f001 fd72 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 80421b2:	2100      	movs	r1, #0
 80421b4:	2001      	movs	r0, #1
 80421b6:	f001 fd1e 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("t1=");
 80421ba:	4813      	ldr	r0, [pc, #76]	; (8042208 <f_GuiMenuSoakTime+0xcc>)
 80421bc:	f001 fd6b 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 3);
 80421c0:	2103      	movs	r1, #3
 80421c2:	2001      	movs	r0, #1
 80421c4:	f001 fd17 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80421c8:	f107 030c 	add.w	r3, r7, #12
 80421cc:	4618      	mov	r0, r3
 80421ce:	f001 fd62 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 80421d2:	20c8      	movs	r0, #200	; 0xc8
 80421d4:	f002 fd90 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80421d8:	4b0c      	ldr	r3, [pc, #48]	; (804220c <f_GuiMenuSoakTime+0xd0>)
 80421da:	781b      	ldrb	r3, [r3, #0]
 80421dc:	b2db      	uxtb	r3, r3
 80421de:	2b01      	cmp	r3, #1
 80421e0:	d1c9      	bne.n	8042176 <f_GuiMenuSoakTime+0x3a>
		{
			p_ReflowParameters->SoakTime = u16_encoder_cnt_loc;
 80421e2:	8afa      	ldrh	r2, [r7, #22]
 80421e4:	687b      	ldr	r3, [r7, #4]
 80421e6:	615a      	str	r2, [r3, #20]
			ui8_encButtonPressed = FALSE;
 80421e8:	4b08      	ldr	r3, [pc, #32]	; (804220c <f_GuiMenuSoakTime+0xd0>)
 80421ea:	2200      	movs	r2, #0
 80421ec:	701a      	strb	r2, [r3, #0]
			break;
 80421ee:	bf00      	nop
		}
	}
}
 80421f0:	bf00      	nop
 80421f2:	3718      	adds	r7, #24
 80421f4:	46bd      	mov	sp, r7
 80421f6:	bd80      	pop	{r7, pc}
 80421f8:	0804e0b8 	.word	0x0804e0b8
 80421fc:	40010000 	.word	0x40010000
 8042200:	0804e0a0 	.word	0x0804e0a0
 8042204:	0804e0c4 	.word	0x0804e0c4
 8042208:	0804e0d4 	.word	0x0804e0d4
 804220c:	20000349 	.word	0x20000349

08042210 <f_GuiMenuReflowTemp>:
void f_GuiMenuReflowTemp(ReflowTemplate *p_ReflowParameters)
{
 8042210:	b580      	push	{r7, lr}
 8042212:	b086      	sub	sp, #24
 8042214:	af00      	add	r7, sp, #0
 8042216:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042218:	4a2c      	ldr	r2, [pc, #176]	; (80422cc <f_GuiMenuReflowTemp+0xbc>)
 804221a:	f107 030c 	add.w	r3, r7, #12
 804221e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042222:	6018      	str	r0, [r3, #0]
 8042224:	3304      	adds	r3, #4
 8042226:	7019      	strb	r1, [r3, #0]
 8042228:	f107 0311 	add.w	r3, r7, #17
 804222c:	2200      	movs	r2, #0
 804222e:	601a      	str	r2, [r3, #0]
 8042230:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042232:	2300      	movs	r3, #0
 8042234:	82fb      	strh	r3, [r7, #22]
	//###################Menu3##########################
	HAL_Delay(100);
 8042236:	2064      	movs	r0, #100	; 0x64
 8042238:	f002 fd5e 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 804223c:	f001 fccb 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->ReflowTempeture) * 4;
 8042240:	687b      	ldr	r3, [r7, #4]
 8042242:	69db      	ldr	r3, [r3, #28]
 8042244:	4a22      	ldr	r2, [pc, #136]	; (80422d0 <f_GuiMenuReflowTemp+0xc0>)
 8042246:	009b      	lsls	r3, r3, #2
 8042248:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(1800 < TIM1->CNT)
 804224a:	4b21      	ldr	r3, [pc, #132]	; (80422d0 <f_GuiMenuReflowTemp+0xc0>)
 804224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804224e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8042252:	d903      	bls.n	804225c <f_GuiMenuReflowTemp+0x4c>
		{
			TIM1->CNT = 1800;
 8042254:	4b1e      	ldr	r3, [pc, #120]	; (80422d0 <f_GuiMenuReflowTemp+0xc0>)
 8042256:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 804225a:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 804225c:	4b1c      	ldr	r3, [pc, #112]	; (80422d0 <f_GuiMenuReflowTemp+0xc0>)
 804225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042260:	089b      	lsrs	r3, r3, #2
 8042262:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042264:	8afa      	ldrh	r2, [r7, #22]
 8042266:	f107 030c 	add.w	r3, r7, #12
 804226a:	491a      	ldr	r1, [pc, #104]	; (80422d4 <f_GuiMenuReflowTemp+0xc4>)
 804226c:	4618      	mov	r0, r3
 804226e:	f007 f991 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 8042272:	f001 fcb0 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042276:	2100      	movs	r1, #0
 8042278:	2000      	movs	r0, #0
 804227a:	f001 fcbc 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter T2[degC]");
 804227e:	4816      	ldr	r0, [pc, #88]	; (80422d8 <f_GuiMenuReflowTemp+0xc8>)
 8042280:	f001 fd09 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042284:	2100      	movs	r1, #0
 8042286:	2001      	movs	r0, #1
 8042288:	f001 fcb5 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("T2=");
 804228c:	4813      	ldr	r0, [pc, #76]	; (80422dc <f_GuiMenuReflowTemp+0xcc>)
 804228e:	f001 fd02 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 3);
 8042292:	2103      	movs	r1, #3
 8042294:	2001      	movs	r0, #1
 8042296:	f001 fcae 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 804229a:	f107 030c 	add.w	r3, r7, #12
 804229e:	4618      	mov	r0, r3
 80422a0:	f001 fcf9 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 80422a4:	20c8      	movs	r0, #200	; 0xc8
 80422a6:	f002 fd27 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80422aa:	4b0d      	ldr	r3, [pc, #52]	; (80422e0 <f_GuiMenuReflowTemp+0xd0>)
 80422ac:	781b      	ldrb	r3, [r3, #0]
 80422ae:	b2db      	uxtb	r3, r3
 80422b0:	2b01      	cmp	r3, #1
 80422b2:	d1ca      	bne.n	804224a <f_GuiMenuReflowTemp+0x3a>
		{
			p_ReflowParameters->ReflowTempeture = u16_encoder_cnt_loc;
 80422b4:	8afa      	ldrh	r2, [r7, #22]
 80422b6:	687b      	ldr	r3, [r7, #4]
 80422b8:	61da      	str	r2, [r3, #28]
			ui8_encButtonPressed = FALSE;
 80422ba:	4b09      	ldr	r3, [pc, #36]	; (80422e0 <f_GuiMenuReflowTemp+0xd0>)
 80422bc:	2200      	movs	r2, #0
 80422be:	701a      	strb	r2, [r3, #0]
			break;
 80422c0:	bf00      	nop
		else
		{

		}
	}
}
 80422c2:	bf00      	nop
 80422c4:	3718      	adds	r7, #24
 80422c6:	46bd      	mov	sp, r7
 80422c8:	bd80      	pop	{r7, pc}
 80422ca:	bf00      	nop
 80422cc:	0804e0b8 	.word	0x0804e0b8
 80422d0:	40010000 	.word	0x40010000
 80422d4:	0804e0a0 	.word	0x0804e0a0
 80422d8:	0804e0d8 	.word	0x0804e0d8
 80422dc:	0804e0e8 	.word	0x0804e0e8
 80422e0:	20000349 	.word	0x20000349

080422e4 <f_GuiMenuReflowTime>:
void f_GuiMenuReflowTime(ReflowTemplate *p_ReflowParameters)
{
 80422e4:	b580      	push	{r7, lr}
 80422e6:	b086      	sub	sp, #24
 80422e8:	af00      	add	r7, sp, #0
 80422ea:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80422ec:	4a2c      	ldr	r2, [pc, #176]	; (80423a0 <f_GuiMenuReflowTime+0xbc>)
 80422ee:	f107 030c 	add.w	r3, r7, #12
 80422f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80422f6:	6018      	str	r0, [r3, #0]
 80422f8:	3304      	adds	r3, #4
 80422fa:	7019      	strb	r1, [r3, #0]
 80422fc:	f107 0311 	add.w	r3, r7, #17
 8042300:	2200      	movs	r2, #0
 8042302:	601a      	str	r2, [r3, #0]
 8042304:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042306:	2300      	movs	r3, #0
 8042308:	82fb      	strh	r3, [r7, #22]
	//###################Menu4##########################
	HAL_Delay(100);
 804230a:	2064      	movs	r0, #100	; 0x64
 804230c:	f002 fcf4 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 8042310:	f001 fc61 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->ReflowTime) * 4;
 8042314:	687b      	ldr	r3, [r7, #4]
 8042316:	6a1b      	ldr	r3, [r3, #32]
 8042318:	4a22      	ldr	r2, [pc, #136]	; (80423a4 <f_GuiMenuReflowTime+0xc0>)
 804231a:	009b      	lsls	r3, r3, #2
 804231c:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(10000 < TIM1->CNT)
 804231e:	4b21      	ldr	r3, [pc, #132]	; (80423a4 <f_GuiMenuReflowTime+0xc0>)
 8042320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042322:	f242 7210 	movw	r2, #10000	; 0x2710
 8042326:	4293      	cmp	r3, r2
 8042328:	d903      	bls.n	8042332 <f_GuiMenuReflowTime+0x4e>
		{
			TIM1->CNT = 10000;
 804232a:	4b1e      	ldr	r3, [pc, #120]	; (80423a4 <f_GuiMenuReflowTime+0xc0>)
 804232c:	f242 7210 	movw	r2, #10000	; 0x2710
 8042330:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042332:	4b1c      	ldr	r3, [pc, #112]	; (80423a4 <f_GuiMenuReflowTime+0xc0>)
 8042334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042336:	089b      	lsrs	r3, r3, #2
 8042338:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 804233a:	8afa      	ldrh	r2, [r7, #22]
 804233c:	f107 030c 	add.w	r3, r7, #12
 8042340:	4919      	ldr	r1, [pc, #100]	; (80423a8 <f_GuiMenuReflowTime+0xc4>)
 8042342:	4618      	mov	r0, r3
 8042344:	f007 f926 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 8042348:	f001 fc45 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 804234c:	2100      	movs	r1, #0
 804234e:	2000      	movs	r0, #0
 8042350:	f001 fc51 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter t2 [s]");
 8042354:	4815      	ldr	r0, [pc, #84]	; (80423ac <f_GuiMenuReflowTime+0xc8>)
 8042356:	f001 fc9e 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 804235a:	2100      	movs	r1, #0
 804235c:	2001      	movs	r0, #1
 804235e:	f001 fc4a 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("t2=");
 8042362:	4813      	ldr	r0, [pc, #76]	; (80423b0 <f_GuiMenuReflowTime+0xcc>)
 8042364:	f001 fc97 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 3);
 8042368:	2103      	movs	r1, #3
 804236a:	2001      	movs	r0, #1
 804236c:	f001 fc43 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042370:	f107 030c 	add.w	r3, r7, #12
 8042374:	4618      	mov	r0, r3
 8042376:	f001 fc8e 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 804237a:	20c8      	movs	r0, #200	; 0xc8
 804237c:	f002 fcbc 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042380:	4b0c      	ldr	r3, [pc, #48]	; (80423b4 <f_GuiMenuReflowTime+0xd0>)
 8042382:	781b      	ldrb	r3, [r3, #0]
 8042384:	b2db      	uxtb	r3, r3
 8042386:	2b01      	cmp	r3, #1
 8042388:	d1c9      	bne.n	804231e <f_GuiMenuReflowTime+0x3a>
		{
			p_ReflowParameters->ReflowTime = u16_encoder_cnt_loc;
 804238a:	8afa      	ldrh	r2, [r7, #22]
 804238c:	687b      	ldr	r3, [r7, #4]
 804238e:	621a      	str	r2, [r3, #32]
			ui8_encButtonPressed = FALSE;
 8042390:	4b08      	ldr	r3, [pc, #32]	; (80423b4 <f_GuiMenuReflowTime+0xd0>)
 8042392:	2200      	movs	r2, #0
 8042394:	701a      	strb	r2, [r3, #0]
			break;
 8042396:	bf00      	nop
		else
		{

		}
	}
}
 8042398:	bf00      	nop
 804239a:	3718      	adds	r7, #24
 804239c:	46bd      	mov	sp, r7
 804239e:	bd80      	pop	{r7, pc}
 80423a0:	0804e0b8 	.word	0x0804e0b8
 80423a4:	40010000 	.word	0x40010000
 80423a8:	0804e0a0 	.word	0x0804e0a0
 80423ac:	0804e0ec 	.word	0x0804e0ec
 80423b0:	0804e0fc 	.word	0x0804e0fc
 80423b4:	20000349 	.word	0x20000349

080423b8 <f_GuiMenuSoakTempGrad>:
void f_GuiMenuSoakTempGrad(ReflowTemplate *p_ReflowParameters)
{
 80423b8:	b580      	push	{r7, lr}
 80423ba:	b086      	sub	sp, #24
 80423bc:	af00      	add	r7, sp, #0
 80423be:	6078      	str	r0, [r7, #4]
	unsigned char 	enc_string[10] = {"    "};
 80423c0:	4a3c      	ldr	r2, [pc, #240]	; (80424b4 <f_GuiMenuSoakTempGrad+0xfc>)
 80423c2:	f107 0308 	add.w	r3, r7, #8
 80423c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80423ca:	6018      	str	r0, [r3, #0]
 80423cc:	3304      	adds	r3, #4
 80423ce:	7019      	strb	r1, [r3, #0]
 80423d0:	f107 030d 	add.w	r3, r7, #13
 80423d4:	2200      	movs	r2, #0
 80423d6:	601a      	str	r2, [r3, #0]
 80423d8:	711a      	strb	r2, [r3, #4]
	float			f_hx;

	f_hx = 0.0;
 80423da:	f04f 0300 	mov.w	r3, #0
 80423de:	617b      	str	r3, [r7, #20]
	//###################Menu5##########################
	HAL_Delay(100);
 80423e0:	2064      	movs	r0, #100	; 0x64
 80423e2:	f002 fc89 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 80423e6:	f001 fbf6 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)(p_ReflowParameters->firstHeatUpRate * 400.00);
 80423ea:	687b      	ldr	r3, [r7, #4]
 80423ec:	68db      	ldr	r3, [r3, #12]
 80423ee:	4618      	mov	r0, r3
 80423f0:	f7fe f8aa 	bl	8040548 <__aeabi_f2d>
 80423f4:	f04f 0200 	mov.w	r2, #0
 80423f8:	4b2f      	ldr	r3, [pc, #188]	; (80424b8 <f_GuiMenuSoakTempGrad+0x100>)
 80423fa:	f7fe f8fd 	bl	80405f8 <__aeabi_dmul>
 80423fe:	4602      	mov	r2, r0
 8042400:	460b      	mov	r3, r1
 8042402:	4610      	mov	r0, r2
 8042404:	4619      	mov	r1, r3
 8042406:	f7fe fbcf 	bl	8040ba8 <__aeabi_d2uiz>
 804240a:	4603      	mov	r3, r0
 804240c:	b29a      	uxth	r2, r3
 804240e:	4b2b      	ldr	r3, [pc, #172]	; (80424bc <f_GuiMenuSoakTempGrad+0x104>)
 8042410:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(1600 < TIM1->CNT)
 8042412:	4b2a      	ldr	r3, [pc, #168]	; (80424bc <f_GuiMenuSoakTempGrad+0x104>)
 8042414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042416:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804241a:	d903      	bls.n	8042424 <f_GuiMenuSoakTempGrad+0x6c>
		{
			TIM1->CNT = 1600;
 804241c:	4b27      	ldr	r3, [pc, #156]	; (80424bc <f_GuiMenuSoakTempGrad+0x104>)
 804241e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8042422:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		f_hx = TIM1->CNT / 400.00;
 8042424:	4b25      	ldr	r3, [pc, #148]	; (80424bc <f_GuiMenuSoakTempGrad+0x104>)
 8042426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042428:	4618      	mov	r0, r3
 804242a:	f7fe f86b 	bl	8040504 <__aeabi_ui2d>
 804242e:	f04f 0200 	mov.w	r2, #0
 8042432:	4b21      	ldr	r3, [pc, #132]	; (80424b8 <f_GuiMenuSoakTempGrad+0x100>)
 8042434:	f7fe fa0a 	bl	804084c <__aeabi_ddiv>
 8042438:	4602      	mov	r2, r0
 804243a:	460b      	mov	r3, r1
 804243c:	4610      	mov	r0, r2
 804243e:	4619      	mov	r1, r3
 8042440:	f7fe fbd2 	bl	8040be8 <__aeabi_d2f>
 8042444:	4603      	mov	r3, r0
 8042446:	617b      	str	r3, [r7, #20]
		sprintf((char*)&enc_string,"%3.2f",f_hx);
 8042448:	6978      	ldr	r0, [r7, #20]
 804244a:	f7fe f87d 	bl	8040548 <__aeabi_f2d>
 804244e:	4602      	mov	r2, r0
 8042450:	460b      	mov	r3, r1
 8042452:	f107 0008 	add.w	r0, r7, #8
 8042456:	491a      	ldr	r1, [pc, #104]	; (80424c0 <f_GuiMenuSoakTempGrad+0x108>)
 8042458:	f007 f89c 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 804245c:	f001 fbbb 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042460:	2100      	movs	r1, #0
 8042462:	2000      	movs	r0, #0
 8042464:	f001 fbc7 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter h1[degC/s]");
 8042468:	4816      	ldr	r0, [pc, #88]	; (80424c4 <f_GuiMenuSoakTempGrad+0x10c>)
 804246a:	f001 fc14 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 804246e:	2100      	movs	r1, #0
 8042470:	2001      	movs	r0, #1
 8042472:	f001 fbc0 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("h1=");
 8042476:	4814      	ldr	r0, [pc, #80]	; (80424c8 <f_GuiMenuSoakTempGrad+0x110>)
 8042478:	f001 fc0d 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 4);
 804247c:	2104      	movs	r1, #4
 804247e:	2001      	movs	r0, #1
 8042480:	f001 fbb9 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042484:	f107 0308 	add.w	r3, r7, #8
 8042488:	4618      	mov	r0, r3
 804248a:	f001 fc04 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 804248e:	20c8      	movs	r0, #200	; 0xc8
 8042490:	f002 fc32 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042494:	4b0d      	ldr	r3, [pc, #52]	; (80424cc <f_GuiMenuSoakTempGrad+0x114>)
 8042496:	781b      	ldrb	r3, [r3, #0]
 8042498:	b2db      	uxtb	r3, r3
 804249a:	2b01      	cmp	r3, #1
 804249c:	d1b9      	bne.n	8042412 <f_GuiMenuSoakTempGrad+0x5a>
		{
			p_ReflowParameters->firstHeatUpRate = f_hx;
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	697a      	ldr	r2, [r7, #20]
 80424a2:	60da      	str	r2, [r3, #12]
			ui8_encButtonPressed = FALSE;
 80424a4:	4b09      	ldr	r3, [pc, #36]	; (80424cc <f_GuiMenuSoakTempGrad+0x114>)
 80424a6:	2200      	movs	r2, #0
 80424a8:	701a      	strb	r2, [r3, #0]
			break;
 80424aa:	bf00      	nop
		else
		{

		}
	}
}
 80424ac:	bf00      	nop
 80424ae:	3718      	adds	r7, #24
 80424b0:	46bd      	mov	sp, r7
 80424b2:	bd80      	pop	{r7, pc}
 80424b4:	0804e0b8 	.word	0x0804e0b8
 80424b8:	40790000 	.word	0x40790000
 80424bc:	40010000 	.word	0x40010000
 80424c0:	0804e100 	.word	0x0804e100
 80424c4:	0804e108 	.word	0x0804e108
 80424c8:	0804e11c 	.word	0x0804e11c
 80424cc:	20000349 	.word	0x20000349

080424d0 <f_GuiMenuKPUpdate>:
void f_GuiMenuKPUpdate(ReflowTemplate *p_ReflowParameters)
{
 80424d0:	b580      	push	{r7, lr}
 80424d2:	b086      	sub	sp, #24
 80424d4:	af00      	add	r7, sp, #0
 80424d6:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80424d8:	4a31      	ldr	r2, [pc, #196]	; (80425a0 <f_GuiMenuKPUpdate+0xd0>)
 80424da:	f107 030c 	add.w	r3, r7, #12
 80424de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80424e2:	6018      	str	r0, [r3, #0]
 80424e4:	3304      	adds	r3, #4
 80424e6:	7019      	strb	r1, [r3, #0]
 80424e8:	f107 0311 	add.w	r3, r7, #17
 80424ec:	2200      	movs	r2, #0
 80424ee:	601a      	str	r2, [r3, #0]
 80424f0:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80424f2:	2300      	movs	r3, #0
 80424f4:	82fb      	strh	r3, [r7, #22]
	//###################Menu6##########################
	HAL_Delay(100);
 80424f6:	2064      	movs	r0, #100	; 0x64
 80424f8:	f002 fbfe 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 80424fc:	f001 fb6b 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KP * 4;
 8042500:	687b      	ldr	r3, [r7, #4]
 8042502:	edd3 7a00 	vldr	s15, [r3]
 8042506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804250a:	ee17 3a90 	vmov	r3, s15
 804250e:	b29b      	uxth	r3, r3
 8042510:	009a      	lsls	r2, r3, #2
 8042512:	4b24      	ldr	r3, [pc, #144]	; (80425a4 <f_GuiMenuKPUpdate+0xd4>)
 8042514:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 8042516:	4b23      	ldr	r3, [pc, #140]	; (80425a4 <f_GuiMenuKPUpdate+0xd4>)
 8042518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804251a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 804251e:	d903      	bls.n	8042528 <f_GuiMenuKPUpdate+0x58>
		{
			TIM1->CNT = 8000;
 8042520:	4b20      	ldr	r3, [pc, #128]	; (80425a4 <f_GuiMenuKPUpdate+0xd4>)
 8042522:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8042526:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042528:	4b1e      	ldr	r3, [pc, #120]	; (80425a4 <f_GuiMenuKPUpdate+0xd4>)
 804252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804252c:	089b      	lsrs	r3, r3, #2
 804252e:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042530:	8afa      	ldrh	r2, [r7, #22]
 8042532:	f107 030c 	add.w	r3, r7, #12
 8042536:	491c      	ldr	r1, [pc, #112]	; (80425a8 <f_GuiMenuKPUpdate+0xd8>)
 8042538:	4618      	mov	r0, r3
 804253a:	f007 f82b 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 804253e:	f001 fb4a 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042542:	2100      	movs	r1, #0
 8042544:	2000      	movs	r0, #0
 8042546:	f001 fb56 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter KP");
 804254a:	4818      	ldr	r0, [pc, #96]	; (80425ac <f_GuiMenuKPUpdate+0xdc>)
 804254c:	f001 fba3 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042550:	2100      	movs	r1, #0
 8042552:	2001      	movs	r0, #1
 8042554:	f001 fb4f 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("KP=");
 8042558:	4815      	ldr	r0, [pc, #84]	; (80425b0 <f_GuiMenuKPUpdate+0xe0>)
 804255a:	f001 fb9c 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 4);
 804255e:	2104      	movs	r1, #4
 8042560:	2001      	movs	r0, #1
 8042562:	f001 fb48 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042566:	f107 030c 	add.w	r3, r7, #12
 804256a:	4618      	mov	r0, r3
 804256c:	f001 fb93 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 8042570:	20c8      	movs	r0, #200	; 0xc8
 8042572:	f002 fbc1 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042576:	4b0f      	ldr	r3, [pc, #60]	; (80425b4 <f_GuiMenuKPUpdate+0xe4>)
 8042578:	781b      	ldrb	r3, [r3, #0]
 804257a:	b2db      	uxtb	r3, r3
 804257c:	2b01      	cmp	r3, #1
 804257e:	d1ca      	bne.n	8042516 <f_GuiMenuKPUpdate+0x46>
		{
			p_ReflowParameters->KP = (float32_t)u16_encoder_cnt_loc;
 8042580:	8afb      	ldrh	r3, [r7, #22]
 8042582:	ee07 3a90 	vmov	s15, r3
 8042586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	edc3 7a00 	vstr	s15, [r3]
			ui8_encButtonPressed = FALSE;
 8042590:	4b08      	ldr	r3, [pc, #32]	; (80425b4 <f_GuiMenuKPUpdate+0xe4>)
 8042592:	2200      	movs	r2, #0
 8042594:	701a      	strb	r2, [r3, #0]
			break;
 8042596:	bf00      	nop
		}
	}
}
 8042598:	bf00      	nop
 804259a:	3718      	adds	r7, #24
 804259c:	46bd      	mov	sp, r7
 804259e:	bd80      	pop	{r7, pc}
 80425a0:	0804e0b8 	.word	0x0804e0b8
 80425a4:	40010000 	.word	0x40010000
 80425a8:	0804e0a0 	.word	0x0804e0a0
 80425ac:	0804e120 	.word	0x0804e120
 80425b0:	0804e12c 	.word	0x0804e12c
 80425b4:	20000349 	.word	0x20000349

080425b8 <f_GuiMenuKIUpdate>:
void f_GuiMenuKIUpdate(ReflowTemplate *p_ReflowParameters)
{
 80425b8:	b580      	push	{r7, lr}
 80425ba:	b086      	sub	sp, #24
 80425bc:	af00      	add	r7, sp, #0
 80425be:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80425c0:	4a31      	ldr	r2, [pc, #196]	; (8042688 <f_GuiMenuKIUpdate+0xd0>)
 80425c2:	f107 030c 	add.w	r3, r7, #12
 80425c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80425ca:	6018      	str	r0, [r3, #0]
 80425cc:	3304      	adds	r3, #4
 80425ce:	7019      	strb	r1, [r3, #0]
 80425d0:	f107 0311 	add.w	r3, r7, #17
 80425d4:	2200      	movs	r2, #0
 80425d6:	601a      	str	r2, [r3, #0]
 80425d8:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80425da:	2300      	movs	r3, #0
 80425dc:	82fb      	strh	r3, [r7, #22]
	//###################Menu7##########################
	HAL_Delay(100);
 80425de:	2064      	movs	r0, #100	; 0x64
 80425e0:	f002 fb8a 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 80425e4:	f001 faf7 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KI * 4;
 80425e8:	687b      	ldr	r3, [r7, #4]
 80425ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80425ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80425f2:	ee17 3a90 	vmov	r3, s15
 80425f6:	b29b      	uxth	r3, r3
 80425f8:	009a      	lsls	r2, r3, #2
 80425fa:	4b24      	ldr	r3, [pc, #144]	; (804268c <f_GuiMenuKIUpdate+0xd4>)
 80425fc:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 80425fe:	4b23      	ldr	r3, [pc, #140]	; (804268c <f_GuiMenuKIUpdate+0xd4>)
 8042600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042602:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8042606:	d903      	bls.n	8042610 <f_GuiMenuKIUpdate+0x58>
		{
			TIM1->CNT = 8000;
 8042608:	4b20      	ldr	r3, [pc, #128]	; (804268c <f_GuiMenuKIUpdate+0xd4>)
 804260a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804260e:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042610:	4b1e      	ldr	r3, [pc, #120]	; (804268c <f_GuiMenuKIUpdate+0xd4>)
 8042612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042614:	089b      	lsrs	r3, r3, #2
 8042616:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042618:	8afa      	ldrh	r2, [r7, #22]
 804261a:	f107 030c 	add.w	r3, r7, #12
 804261e:	491c      	ldr	r1, [pc, #112]	; (8042690 <f_GuiMenuKIUpdate+0xd8>)
 8042620:	4618      	mov	r0, r3
 8042622:	f006 ffb7 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 8042626:	f001 fad6 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 804262a:	2100      	movs	r1, #0
 804262c:	2000      	movs	r0, #0
 804262e:	f001 fae2 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter KI");
 8042632:	4818      	ldr	r0, [pc, #96]	; (8042694 <f_GuiMenuKIUpdate+0xdc>)
 8042634:	f001 fb2f 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042638:	2100      	movs	r1, #0
 804263a:	2001      	movs	r0, #1
 804263c:	f001 fadb 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("KI=");
 8042640:	4815      	ldr	r0, [pc, #84]	; (8042698 <f_GuiMenuKIUpdate+0xe0>)
 8042642:	f001 fb28 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 4);
 8042646:	2104      	movs	r1, #4
 8042648:	2001      	movs	r0, #1
 804264a:	f001 fad4 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 804264e:	f107 030c 	add.w	r3, r7, #12
 8042652:	4618      	mov	r0, r3
 8042654:	f001 fb1f 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 8042658:	20c8      	movs	r0, #200	; 0xc8
 804265a:	f002 fb4d 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 804265e:	4b0f      	ldr	r3, [pc, #60]	; (804269c <f_GuiMenuKIUpdate+0xe4>)
 8042660:	781b      	ldrb	r3, [r3, #0]
 8042662:	b2db      	uxtb	r3, r3
 8042664:	2b01      	cmp	r3, #1
 8042666:	d1ca      	bne.n	80425fe <f_GuiMenuKIUpdate+0x46>
		{
			p_ReflowParameters->KI = (float32_t)u16_encoder_cnt_loc;
 8042668:	8afb      	ldrh	r3, [r7, #22]
 804266a:	ee07 3a90 	vmov	s15, r3
 804266e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042672:	687b      	ldr	r3, [r7, #4]
 8042674:	edc3 7a01 	vstr	s15, [r3, #4]
			ui8_encButtonPressed = FALSE;
 8042678:	4b08      	ldr	r3, [pc, #32]	; (804269c <f_GuiMenuKIUpdate+0xe4>)
 804267a:	2200      	movs	r2, #0
 804267c:	701a      	strb	r2, [r3, #0]
			break;
 804267e:	bf00      	nop
		}
	}
}
 8042680:	bf00      	nop
 8042682:	3718      	adds	r7, #24
 8042684:	46bd      	mov	sp, r7
 8042686:	bd80      	pop	{r7, pc}
 8042688:	0804e0b8 	.word	0x0804e0b8
 804268c:	40010000 	.word	0x40010000
 8042690:	0804e0a0 	.word	0x0804e0a0
 8042694:	0804e130 	.word	0x0804e130
 8042698:	0804e13c 	.word	0x0804e13c
 804269c:	20000349 	.word	0x20000349

080426a0 <f_GuiMenuKDUpdate>:

void f_GuiMenuKDUpdate(ReflowTemplate *p_ReflowParameters)
{
 80426a0:	b580      	push	{r7, lr}
 80426a2:	b086      	sub	sp, #24
 80426a4:	af00      	add	r7, sp, #0
 80426a6:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80426a8:	4a31      	ldr	r2, [pc, #196]	; (8042770 <f_GuiMenuKDUpdate+0xd0>)
 80426aa:	f107 030c 	add.w	r3, r7, #12
 80426ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80426b2:	6018      	str	r0, [r3, #0]
 80426b4:	3304      	adds	r3, #4
 80426b6:	7019      	strb	r1, [r3, #0]
 80426b8:	f107 0311 	add.w	r3, r7, #17
 80426bc:	2200      	movs	r2, #0
 80426be:	601a      	str	r2, [r3, #0]
 80426c0:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80426c2:	2300      	movs	r3, #0
 80426c4:	82fb      	strh	r3, [r7, #22]
	//###################Menu8##########################
	HAL_Delay(100);
 80426c6:	2064      	movs	r0, #100	; 0x64
 80426c8:	f002 fb16 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 80426cc:	f001 fa83 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KD * 4;
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80426d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80426da:	ee17 3a90 	vmov	r3, s15
 80426de:	b29b      	uxth	r3, r3
 80426e0:	009a      	lsls	r2, r3, #2
 80426e2:	4b24      	ldr	r3, [pc, #144]	; (8042774 <f_GuiMenuKDUpdate+0xd4>)
 80426e4:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 80426e6:	4b23      	ldr	r3, [pc, #140]	; (8042774 <f_GuiMenuKDUpdate+0xd4>)
 80426e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80426ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80426ee:	d903      	bls.n	80426f8 <f_GuiMenuKDUpdate+0x58>
		{
			TIM1->CNT = 8000;
 80426f0:	4b20      	ldr	r3, [pc, #128]	; (8042774 <f_GuiMenuKDUpdate+0xd4>)
 80426f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80426f6:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 80426f8:	4b1e      	ldr	r3, [pc, #120]	; (8042774 <f_GuiMenuKDUpdate+0xd4>)
 80426fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80426fc:	089b      	lsrs	r3, r3, #2
 80426fe:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042700:	8afa      	ldrh	r2, [r7, #22]
 8042702:	f107 030c 	add.w	r3, r7, #12
 8042706:	491c      	ldr	r1, [pc, #112]	; (8042778 <f_GuiMenuKDUpdate+0xd8>)
 8042708:	4618      	mov	r0, r3
 804270a:	f006 ff43 	bl	8049594 <siprintf>
		lcd_clear_cmd();
 804270e:	f001 fa62 	bl	8043bd6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042712:	2100      	movs	r1, #0
 8042714:	2000      	movs	r0, #0
 8042716:	f001 fa6e 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter KD");
 804271a:	4818      	ldr	r0, [pc, #96]	; (804277c <f_GuiMenuKDUpdate+0xdc>)
 804271c:	f001 fabb 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042720:	2100      	movs	r1, #0
 8042722:	2001      	movs	r0, #1
 8042724:	f001 fa67 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("KD=");
 8042728:	4815      	ldr	r0, [pc, #84]	; (8042780 <f_GuiMenuKDUpdate+0xe0>)
 804272a:	f001 fab4 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 4);
 804272e:	2104      	movs	r1, #4
 8042730:	2001      	movs	r0, #1
 8042732:	f001 fa60 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042736:	f107 030c 	add.w	r3, r7, #12
 804273a:	4618      	mov	r0, r3
 804273c:	f001 faab 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 8042740:	20c8      	movs	r0, #200	; 0xc8
 8042742:	f002 fad9 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042746:	4b0f      	ldr	r3, [pc, #60]	; (8042784 <f_GuiMenuKDUpdate+0xe4>)
 8042748:	781b      	ldrb	r3, [r3, #0]
 804274a:	b2db      	uxtb	r3, r3
 804274c:	2b01      	cmp	r3, #1
 804274e:	d1ca      	bne.n	80426e6 <f_GuiMenuKDUpdate+0x46>
		{
			p_ReflowParameters->KD = (float32_t)u16_encoder_cnt_loc;
 8042750:	8afb      	ldrh	r3, [r7, #22]
 8042752:	ee07 3a90 	vmov	s15, r3
 8042756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	edc3 7a02 	vstr	s15, [r3, #8]
			ui8_encButtonPressed = FALSE;
 8042760:	4b08      	ldr	r3, [pc, #32]	; (8042784 <f_GuiMenuKDUpdate+0xe4>)
 8042762:	2200      	movs	r2, #0
 8042764:	701a      	strb	r2, [r3, #0]
			break;
 8042766:	bf00      	nop
		}
	}
}
 8042768:	bf00      	nop
 804276a:	3718      	adds	r7, #24
 804276c:	46bd      	mov	sp, r7
 804276e:	bd80      	pop	{r7, pc}
 8042770:	0804e0b8 	.word	0x0804e0b8
 8042774:	40010000 	.word	0x40010000
 8042778:	0804e0a0 	.word	0x0804e0a0
 804277c:	0804e140 	.word	0x0804e140
 8042780:	0804e14c 	.word	0x0804e14c
 8042784:	20000349 	.word	0x20000349

08042788 <f_GuiMenuReflowTempGrad>:


void f_GuiMenuReflowTempGrad(ReflowTemplate *p_ReflowParameters)
{
 8042788:	b580      	push	{r7, lr}
 804278a:	b086      	sub	sp, #24
 804278c:	af00      	add	r7, sp, #0
 804278e:	6078      	str	r0, [r7, #4]
	unsigned char 	enc_string[10] = {"    "};
 8042790:	4a3b      	ldr	r2, [pc, #236]	; (8042880 <f_GuiMenuReflowTempGrad+0xf8>)
 8042792:	f107 0308 	add.w	r3, r7, #8
 8042796:	e892 0003 	ldmia.w	r2, {r0, r1}
 804279a:	6018      	str	r0, [r3, #0]
 804279c:	3304      	adds	r3, #4
 804279e:	7019      	strb	r1, [r3, #0]
 80427a0:	f107 030d 	add.w	r3, r7, #13
 80427a4:	2200      	movs	r2, #0
 80427a6:	601a      	str	r2, [r3, #0]
 80427a8:	711a      	strb	r2, [r3, #4]
	float			f_hx;

	f_hx = 0.0;
 80427aa:	f04f 0300 	mov.w	r3, #0
 80427ae:	617b      	str	r3, [r7, #20]
	//###################Menu9##########################
	HAL_Delay(100);
 80427b0:	2064      	movs	r0, #100	; 0x64
 80427b2:	f002 faa1 	bl	8044cf8 <HAL_Delay>
	lcd_clear_cmd();
 80427b6:	f001 fa0e 	bl	8043bd6 <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)(p_ReflowParameters->secondHeatUpRate * 400.00);
 80427ba:	687b      	ldr	r3, [r7, #4]
 80427bc:	699b      	ldr	r3, [r3, #24]
 80427be:	4618      	mov	r0, r3
 80427c0:	f7fd fec2 	bl	8040548 <__aeabi_f2d>
 80427c4:	f04f 0200 	mov.w	r2, #0
 80427c8:	4b2e      	ldr	r3, [pc, #184]	; (8042884 <f_GuiMenuReflowTempGrad+0xfc>)
 80427ca:	f7fd ff15 	bl	80405f8 <__aeabi_dmul>
 80427ce:	4602      	mov	r2, r0
 80427d0:	460b      	mov	r3, r1
 80427d2:	4610      	mov	r0, r2
 80427d4:	4619      	mov	r1, r3
 80427d6:	f7fe f9e7 	bl	8040ba8 <__aeabi_d2uiz>
 80427da:	4603      	mov	r3, r0
 80427dc:	b29a      	uxth	r2, r3
 80427de:	4b2a      	ldr	r3, [pc, #168]	; (8042888 <f_GuiMenuReflowTempGrad+0x100>)
 80427e0:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(1600 < TIM1->CNT)
 80427e2:	4b29      	ldr	r3, [pc, #164]	; (8042888 <f_GuiMenuReflowTempGrad+0x100>)
 80427e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80427ea:	d903      	bls.n	80427f4 <f_GuiMenuReflowTempGrad+0x6c>
		{
			TIM1->CNT = 1600;
 80427ec:	4b26      	ldr	r3, [pc, #152]	; (8042888 <f_GuiMenuReflowTempGrad+0x100>)
 80427ee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80427f2:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		f_hx = TIM1->CNT / 400.00;
 80427f4:	4b24      	ldr	r3, [pc, #144]	; (8042888 <f_GuiMenuReflowTempGrad+0x100>)
 80427f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427f8:	4618      	mov	r0, r3
 80427fa:	f7fd fe83 	bl	8040504 <__aeabi_ui2d>
 80427fe:	f04f 0200 	mov.w	r2, #0
 8042802:	4b20      	ldr	r3, [pc, #128]	; (8042884 <f_GuiMenuReflowTempGrad+0xfc>)
 8042804:	f7fe f822 	bl	804084c <__aeabi_ddiv>
 8042808:	4602      	mov	r2, r0
 804280a:	460b      	mov	r3, r1
 804280c:	4610      	mov	r0, r2
 804280e:	4619      	mov	r1, r3
 8042810:	f7fe f9ea 	bl	8040be8 <__aeabi_d2f>
 8042814:	4603      	mov	r3, r0
 8042816:	617b      	str	r3, [r7, #20]
		sprintf((char*)&enc_string,"%3.2f",f_hx);
 8042818:	6978      	ldr	r0, [r7, #20]
 804281a:	f7fd fe95 	bl	8040548 <__aeabi_f2d>
 804281e:	4602      	mov	r2, r0
 8042820:	460b      	mov	r3, r1
 8042822:	f107 0008 	add.w	r0, r7, #8
 8042826:	4919      	ldr	r1, [pc, #100]	; (804288c <f_GuiMenuReflowTempGrad+0x104>)
 8042828:	f006 feb4 	bl	8049594 <siprintf>
		lcd_put_cur(0, 0);
 804282c:	2100      	movs	r1, #0
 804282e:	2000      	movs	r0, #0
 8042830:	f001 f9e1 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("Enter h2[degC/s]");
 8042834:	4816      	ldr	r0, [pc, #88]	; (8042890 <f_GuiMenuReflowTempGrad+0x108>)
 8042836:	f001 fa2e 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 0);
 804283a:	2100      	movs	r1, #0
 804283c:	2001      	movs	r0, #1
 804283e:	f001 f9da 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string("h2=");
 8042842:	4814      	ldr	r0, [pc, #80]	; (8042894 <f_GuiMenuReflowTempGrad+0x10c>)
 8042844:	f001 fa27 	bl	8043c96 <lcd_send_string>
		lcd_put_cur(1, 4);
 8042848:	2104      	movs	r1, #4
 804284a:	2001      	movs	r0, #1
 804284c:	f001 f9d3 	bl	8043bf6 <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 8042850:	f107 0308 	add.w	r3, r7, #8
 8042854:	4618      	mov	r0, r3
 8042856:	f001 fa1e 	bl	8043c96 <lcd_send_string>
		HAL_Delay(200);
 804285a:	20c8      	movs	r0, #200	; 0xc8
 804285c:	f002 fa4c 	bl	8044cf8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 8042860:	4b0d      	ldr	r3, [pc, #52]	; (8042898 <f_GuiMenuReflowTempGrad+0x110>)
 8042862:	781b      	ldrb	r3, [r3, #0]
 8042864:	b2db      	uxtb	r3, r3
 8042866:	2b01      	cmp	r3, #1
 8042868:	d1bb      	bne.n	80427e2 <f_GuiMenuReflowTempGrad+0x5a>
		{
			p_ReflowParameters->secondHeatUpRate = f_hx;
 804286a:	687b      	ldr	r3, [r7, #4]
 804286c:	697a      	ldr	r2, [r7, #20]
 804286e:	619a      	str	r2, [r3, #24]
			ui8_encButtonPressed = FALSE;
 8042870:	4b09      	ldr	r3, [pc, #36]	; (8042898 <f_GuiMenuReflowTempGrad+0x110>)
 8042872:	2200      	movs	r2, #0
 8042874:	701a      	strb	r2, [r3, #0]
			break;
 8042876:	bf00      	nop
		else
		{

		}
	}
}
 8042878:	bf00      	nop
 804287a:	3718      	adds	r7, #24
 804287c:	46bd      	mov	sp, r7
 804287e:	bd80      	pop	{r7, pc}
 8042880:	0804e0b8 	.word	0x0804e0b8
 8042884:	40790000 	.word	0x40790000
 8042888:	40010000 	.word	0x40010000
 804288c:	0804e100 	.word	0x0804e100
 8042890:	0804e150 	.word	0x0804e150
 8042894:	0804e164 	.word	0x0804e164
 8042898:	20000349 	.word	0x20000349

0804289c <f_GuiMenuBank1Update>:
void f_GuiMenuBank1Update(msTempControlParams *p_CtrlParams)
{
 804289c:	b580      	push	{r7, lr}
 804289e:	b086      	sub	sp, #24
 80428a0:	af00      	add	r7, sp, #0
 80428a2:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80428a4:	4a2c      	ldr	r2, [pc, #176]	; (8042958 <f_GuiMenuBank1Update+0xbc>)
 80428a6:	f107 030c 	add.w	r3, r7, #12
 80428aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80428ae:	6018      	str	r0, [r3, #0]
 80428b0:	3304      	adds	r3, #4
 80428b2:	7019      	strb	r1, [r3, #0]
 80428b4:	f107 0311 	add.w	r3, r7, #17
 80428b8:	2200      	movs	r2, #0
 80428ba:	601a      	str	r2, [r3, #0]
 80428bc:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80428be:	2300      	movs	r3, #0
 80428c0:	82fb      	strh	r3, [r7, #22]
	//###################Menu10##########################
		HAL_Delay(100);
 80428c2:	2064      	movs	r0, #100	; 0x64
 80428c4:	f002 fa18 	bl	8044cf8 <HAL_Delay>
		lcd_clear_cmd();
 80428c8:	f001 f985 	bl	8043bd6 <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank1Percentage * 4;
 80428cc:	4b23      	ldr	r3, [pc, #140]	; (804295c <f_GuiMenuBank1Update+0xc0>)
 80428ce:	781b      	ldrb	r3, [r3, #0]
 80428d0:	009a      	lsls	r2, r3, #2
 80428d2:	4b23      	ldr	r3, [pc, #140]	; (8042960 <f_GuiMenuBank1Update+0xc4>)
 80428d4:	625a      	str	r2, [r3, #36]	; 0x24

		while(1)
		{
			if(400 < TIM1->CNT)
 80428d6:	4b22      	ldr	r3, [pc, #136]	; (8042960 <f_GuiMenuBank1Update+0xc4>)
 80428d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80428de:	d903      	bls.n	80428e8 <f_GuiMenuBank1Update+0x4c>
			{
				TIM1->CNT = 400;
 80428e0:	4b1f      	ldr	r3, [pc, #124]	; (8042960 <f_GuiMenuBank1Update+0xc4>)
 80428e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80428e6:	625a      	str	r2, [r3, #36]	; 0x24
			else
			{

			}

			u16_encoder_cnt_loc = TIM1->CNT/4;
 80428e8:	4b1d      	ldr	r3, [pc, #116]	; (8042960 <f_GuiMenuBank1Update+0xc4>)
 80428ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428ec:	089b      	lsrs	r3, r3, #2
 80428ee:	82fb      	strh	r3, [r7, #22]
			sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 80428f0:	8afa      	ldrh	r2, [r7, #22]
 80428f2:	f107 030c 	add.w	r3, r7, #12
 80428f6:	491b      	ldr	r1, [pc, #108]	; (8042964 <f_GuiMenuBank1Update+0xc8>)
 80428f8:	4618      	mov	r0, r3
 80428fa:	f006 fe4b 	bl	8049594 <siprintf>
			lcd_clear_cmd();
 80428fe:	f001 f96a 	bl	8043bd6 <lcd_clear_cmd>
			lcd_put_cur(0, 0);
 8042902:	2100      	movs	r1, #0
 8042904:	2000      	movs	r0, #0
 8042906:	f001 f976 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string("Enter b1[%]");
 804290a:	4817      	ldr	r0, [pc, #92]	; (8042968 <f_GuiMenuBank1Update+0xcc>)
 804290c:	f001 f9c3 	bl	8043c96 <lcd_send_string>
			lcd_put_cur(1, 0);
 8042910:	2100      	movs	r1, #0
 8042912:	2001      	movs	r0, #1
 8042914:	f001 f96f 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string("b1=");
 8042918:	4814      	ldr	r0, [pc, #80]	; (804296c <f_GuiMenuBank1Update+0xd0>)
 804291a:	f001 f9bc 	bl	8043c96 <lcd_send_string>
			lcd_put_cur(1, 4);
 804291e:	2104      	movs	r1, #4
 8042920:	2001      	movs	r0, #1
 8042922:	f001 f968 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string((char*)&enc_string);
 8042926:	f107 030c 	add.w	r3, r7, #12
 804292a:	4618      	mov	r0, r3
 804292c:	f001 f9b3 	bl	8043c96 <lcd_send_string>
			HAL_Delay(200);
 8042930:	20c8      	movs	r0, #200	; 0xc8
 8042932:	f002 f9e1 	bl	8044cf8 <HAL_Delay>

			if(TRUE == ui8_encButtonPressed)
 8042936:	4b0e      	ldr	r3, [pc, #56]	; (8042970 <f_GuiMenuBank1Update+0xd4>)
 8042938:	781b      	ldrb	r3, [r3, #0]
 804293a:	b2db      	uxtb	r3, r3
 804293c:	2b01      	cmp	r3, #1
 804293e:	d1ca      	bne.n	80428d6 <f_GuiMenuBank1Update+0x3a>
			{
				CtrlParams.ui8_bank1Percentage = u16_encoder_cnt_loc;
 8042940:	8afb      	ldrh	r3, [r7, #22]
 8042942:	b2da      	uxtb	r2, r3
 8042944:	4b05      	ldr	r3, [pc, #20]	; (804295c <f_GuiMenuBank1Update+0xc0>)
 8042946:	701a      	strb	r2, [r3, #0]
				ui8_encButtonPressed = FALSE;
 8042948:	4b09      	ldr	r3, [pc, #36]	; (8042970 <f_GuiMenuBank1Update+0xd4>)
 804294a:	2200      	movs	r2, #0
 804294c:	701a      	strb	r2, [r3, #0]
				break;
 804294e:	bf00      	nop
			else
			{

			}
		}
}
 8042950:	bf00      	nop
 8042952:	3718      	adds	r7, #24
 8042954:	46bd      	mov	sp, r7
 8042956:	bd80      	pop	{r7, pc}
 8042958:	0804e0b8 	.word	0x0804e0b8
 804295c:	200004c0 	.word	0x200004c0
 8042960:	40010000 	.word	0x40010000
 8042964:	0804e0a0 	.word	0x0804e0a0
 8042968:	0804e168 	.word	0x0804e168
 804296c:	0804e174 	.word	0x0804e174
 8042970:	20000349 	.word	0x20000349

08042974 <f_GuiMenuBank2Update>:
void f_GuiMenuBank2Update(msTempControlParams *p_CtrlParams)
{
 8042974:	b580      	push	{r7, lr}
 8042976:	b086      	sub	sp, #24
 8042978:	af00      	add	r7, sp, #0
 804297a:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 804297c:	4a2c      	ldr	r2, [pc, #176]	; (8042a30 <f_GuiMenuBank2Update+0xbc>)
 804297e:	f107 030c 	add.w	r3, r7, #12
 8042982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042986:	6018      	str	r0, [r3, #0]
 8042988:	3304      	adds	r3, #4
 804298a:	7019      	strb	r1, [r3, #0]
 804298c:	f107 0311 	add.w	r3, r7, #17
 8042990:	2200      	movs	r2, #0
 8042992:	601a      	str	r2, [r3, #0]
 8042994:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042996:	2300      	movs	r3, #0
 8042998:	82fb      	strh	r3, [r7, #22]
	//###################Menu11##########################
		HAL_Delay(100);
 804299a:	2064      	movs	r0, #100	; 0x64
 804299c:	f002 f9ac 	bl	8044cf8 <HAL_Delay>
		lcd_clear_cmd();
 80429a0:	f001 f919 	bl	8043bd6 <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank2Percentage * 4;
 80429a4:	4b23      	ldr	r3, [pc, #140]	; (8042a34 <f_GuiMenuBank2Update+0xc0>)
 80429a6:	785b      	ldrb	r3, [r3, #1]
 80429a8:	009a      	lsls	r2, r3, #2
 80429aa:	4b23      	ldr	r3, [pc, #140]	; (8042a38 <f_GuiMenuBank2Update+0xc4>)
 80429ac:	625a      	str	r2, [r3, #36]	; 0x24

		while(1)
		{
			if(400 < TIM1->CNT)
 80429ae:	4b22      	ldr	r3, [pc, #136]	; (8042a38 <f_GuiMenuBank2Update+0xc4>)
 80429b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429b2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80429b6:	d903      	bls.n	80429c0 <f_GuiMenuBank2Update+0x4c>
			{
				TIM1->CNT = 400;
 80429b8:	4b1f      	ldr	r3, [pc, #124]	; (8042a38 <f_GuiMenuBank2Update+0xc4>)
 80429ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80429be:	625a      	str	r2, [r3, #36]	; 0x24
			else
			{

			}

			u16_encoder_cnt_loc = TIM1->CNT / 4;
 80429c0:	4b1d      	ldr	r3, [pc, #116]	; (8042a38 <f_GuiMenuBank2Update+0xc4>)
 80429c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429c4:	089b      	lsrs	r3, r3, #2
 80429c6:	82fb      	strh	r3, [r7, #22]
			sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 80429c8:	8afa      	ldrh	r2, [r7, #22]
 80429ca:	f107 030c 	add.w	r3, r7, #12
 80429ce:	491b      	ldr	r1, [pc, #108]	; (8042a3c <f_GuiMenuBank2Update+0xc8>)
 80429d0:	4618      	mov	r0, r3
 80429d2:	f006 fddf 	bl	8049594 <siprintf>
			lcd_clear_cmd();
 80429d6:	f001 f8fe 	bl	8043bd6 <lcd_clear_cmd>
			lcd_put_cur(0, 0);
 80429da:	2100      	movs	r1, #0
 80429dc:	2000      	movs	r0, #0
 80429de:	f001 f90a 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string("Enter b2[%]");
 80429e2:	4817      	ldr	r0, [pc, #92]	; (8042a40 <f_GuiMenuBank2Update+0xcc>)
 80429e4:	f001 f957 	bl	8043c96 <lcd_send_string>
			lcd_put_cur(1, 0);
 80429e8:	2100      	movs	r1, #0
 80429ea:	2001      	movs	r0, #1
 80429ec:	f001 f903 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string("b2=");
 80429f0:	4814      	ldr	r0, [pc, #80]	; (8042a44 <f_GuiMenuBank2Update+0xd0>)
 80429f2:	f001 f950 	bl	8043c96 <lcd_send_string>
			lcd_put_cur(1, 4);
 80429f6:	2104      	movs	r1, #4
 80429f8:	2001      	movs	r0, #1
 80429fa:	f001 f8fc 	bl	8043bf6 <lcd_put_cur>
			lcd_send_string((char*)&enc_string);
 80429fe:	f107 030c 	add.w	r3, r7, #12
 8042a02:	4618      	mov	r0, r3
 8042a04:	f001 f947 	bl	8043c96 <lcd_send_string>
			HAL_Delay(200);
 8042a08:	20c8      	movs	r0, #200	; 0xc8
 8042a0a:	f002 f975 	bl	8044cf8 <HAL_Delay>

			if(TRUE == ui8_encButtonPressed)
 8042a0e:	4b0e      	ldr	r3, [pc, #56]	; (8042a48 <f_GuiMenuBank2Update+0xd4>)
 8042a10:	781b      	ldrb	r3, [r3, #0]
 8042a12:	b2db      	uxtb	r3, r3
 8042a14:	2b01      	cmp	r3, #1
 8042a16:	d1ca      	bne.n	80429ae <f_GuiMenuBank2Update+0x3a>
			{
				CtrlParams.ui8_bank2Percentage = u16_encoder_cnt_loc;
 8042a18:	8afb      	ldrh	r3, [r7, #22]
 8042a1a:	b2da      	uxtb	r2, r3
 8042a1c:	4b05      	ldr	r3, [pc, #20]	; (8042a34 <f_GuiMenuBank2Update+0xc0>)
 8042a1e:	705a      	strb	r2, [r3, #1]
				ui8_encButtonPressed = FALSE;
 8042a20:	4b09      	ldr	r3, [pc, #36]	; (8042a48 <f_GuiMenuBank2Update+0xd4>)
 8042a22:	2200      	movs	r2, #0
 8042a24:	701a      	strb	r2, [r3, #0]
				break;
 8042a26:	bf00      	nop
			else
			{

			}
		}
}
 8042a28:	bf00      	nop
 8042a2a:	3718      	adds	r7, #24
 8042a2c:	46bd      	mov	sp, r7
 8042a2e:	bd80      	pop	{r7, pc}
 8042a30:	0804e0b8 	.word	0x0804e0b8
 8042a34:	200004c0 	.word	0x200004c0
 8042a38:	40010000 	.word	0x40010000
 8042a3c:	0804e0a0 	.word	0x0804e0a0
 8042a40:	0804e178 	.word	0x0804e178
 8042a44:	0804e184 	.word	0x0804e184
 8042a48:	20000349 	.word	0x20000349

08042a4c <f_GuiFEEUpdateWrite>:
void f_GuiFEEUpdateWrite(msTempControlParams *p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 8042a4c:	b580      	push	{r7, lr}
 8042a4e:	b082      	sub	sp, #8
 8042a50:	af00      	add	r7, sp, #0
 8042a52:	6078      	str	r0, [r7, #4]
 8042a54:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8042a56:	f002 fb0b 	bl	8045070 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8042a5a:	4b08      	ldr	r3, [pc, #32]	; (8042a7c <f_GuiFEEUpdateWrite+0x30>)
 8042a5c:	22f3      	movs	r2, #243	; 0xf3
 8042a5e:	60da      	str	r2, [r3, #12]
	FEE_WriteCtrlParams(p_CtrlParams, p_ReflowParameters);
 8042a60:	6839      	ldr	r1, [r7, #0]
 8042a62:	6878      	ldr	r0, [r7, #4]
 8042a64:	f000 fe28 	bl	80436b8 <FEE_WriteCtrlParams>
	HAL_FLASH_Lock();
 8042a68:	f002 fb24 	bl	80450b4 <HAL_FLASH_Lock>
	StateFlag.StartFlag = FALSE;
 8042a6c:	4b04      	ldr	r3, [pc, #16]	; (8042a80 <f_GuiFEEUpdateWrite+0x34>)
 8042a6e:	2200      	movs	r2, #0
 8042a70:	701a      	strb	r2, [r3, #0]
}
 8042a72:	bf00      	nop
 8042a74:	3708      	adds	r7, #8
 8042a76:	46bd      	mov	sp, r7
 8042a78:	bd80      	pop	{r7, pc}
 8042a7a:	bf00      	nop
 8042a7c:	40023c00 	.word	0x40023c00
 8042a80:	20000240 	.word	0x20000240

08042a84 <f_updateGuiValTempError>:

void f_updateGuiValTempError(volatile float32_t *p_temperature, volatile float32_t f_PIDError)
{
 8042a84:	b580      	push	{r7, lr}
 8042a86:	b084      	sub	sp, #16
 8042a88:	af00      	add	r7, sp, #0
 8042a8a:	6078      	str	r0, [r7, #4]
 8042a8c:	ed87 0a00 	vstr	s0, [r7]
	unsigned char gui_stringFloat[7] = {"\0"};
 8042a90:	2300      	movs	r3, #0
 8042a92:	60bb      	str	r3, [r7, #8]
 8042a94:	f107 030c 	add.w	r3, r7, #12
 8042a98:	2100      	movs	r1, #0
 8042a9a:	460a      	mov	r2, r1
 8042a9c:	801a      	strh	r2, [r3, #0]
 8042a9e:	460a      	mov	r2, r1
 8042aa0:	709a      	strb	r2, [r3, #2]

	ftoa( (*p_temperature), gui_stringFloat, 2);
 8042aa2:	687b      	ldr	r3, [r7, #4]
 8042aa4:	edd3 7a00 	vldr	s15, [r3]
 8042aa8:	f107 0308 	add.w	r3, r7, #8
 8042aac:	2102      	movs	r1, #2
 8042aae:	4618      	mov	r0, r3
 8042ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8042ab4:	f7fe fb30 	bl	8041118 <ftoa>
	lcd_put_cur(0, 0);
 8042ab8:	2100      	movs	r1, #0
 8042aba:	2000      	movs	r0, #0
 8042abc:	f001 f89b 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042ac0:	4814      	ldr	r0, [pc, #80]	; (8042b14 <f_updateGuiValTempError+0x90>)
 8042ac2:	f001 f8e8 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 2);
 8042ac6:	2102      	movs	r1, #2
 8042ac8:	2000      	movs	r0, #0
 8042aca:	f001 f894 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringFloat);
 8042ace:	f107 0308 	add.w	r3, r7, #8
 8042ad2:	4618      	mov	r0, r3
 8042ad4:	f001 f8df 	bl	8043c96 <lcd_send_string>
	ftoa( f_PIDError, gui_stringFloat, 2);
 8042ad8:	edd7 7a00 	vldr	s15, [r7]
 8042adc:	f107 0308 	add.w	r3, r7, #8
 8042ae0:	2102      	movs	r1, #2
 8042ae2:	4618      	mov	r0, r3
 8042ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8042ae8:	f7fe fb16 	bl	8041118 <ftoa>
	lcd_put_cur(1, 0);
 8042aec:	2100      	movs	r1, #0
 8042aee:	2001      	movs	r0, #1
 8042af0:	f001 f881 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Td=");
 8042af4:	4808      	ldr	r0, [pc, #32]	; (8042b18 <f_updateGuiValTempError+0x94>)
 8042af6:	f001 f8ce 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1,3);
 8042afa:	2103      	movs	r1, #3
 8042afc:	2001      	movs	r0, #1
 8042afe:	f001 f87a 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringFloat);
 8042b02:	f107 0308 	add.w	r3, r7, #8
 8042b06:	4618      	mov	r0, r3
 8042b08:	f001 f8c5 	bl	8043c96 <lcd_send_string>
}
 8042b0c:	bf00      	nop
 8042b0e:	3710      	adds	r7, #16
 8042b10:	46bd      	mov	sp, r7
 8042b12:	bd80      	pop	{r7, pc}
 8042b14:	0804e188 	.word	0x0804e188
 8042b18:	0804e18c 	.word	0x0804e18c

08042b1c <f_updateGuiValGradientSoakParam>:
void f_updateGuiValGradientSoakParam(uint32_t u32_SoakTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent)
{
 8042b1c:	b580      	push	{r7, lr}
 8042b1e:	b086      	sub	sp, #24
 8042b20:	af00      	add	r7, sp, #0
 8042b22:	60f8      	str	r0, [r7, #12]
 8042b24:	60b9      	str	r1, [r7, #8]
 8042b26:	4613      	mov	r3, r2
 8042b28:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_timeRemaining = 0;
 8042b2a:	2300      	movs	r3, #0
 8042b2c:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042b2e:	2300      	movs	r3, #0
 8042b30:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_FirstHeatupTime - (u16_ReflowIndexCurrent)) / 2;
 8042b32:	88fb      	ldrh	r3, [r7, #6]
 8042b34:	68ba      	ldr	r2, [r7, #8]
 8042b36:	1ad3      	subs	r3, r2, r3
 8042b38:	085b      	lsrs	r3, r3, #1
 8042b3a:	82fb      	strh	r3, [r7, #22]

	utoa(u32_SoakTemperature, (char*)gui_stringInt, 10);
 8042b3c:	f107 0310 	add.w	r3, r7, #16
 8042b40:	220a      	movs	r2, #10
 8042b42:	4619      	mov	r1, r3
 8042b44:	68f8      	ldr	r0, [r7, #12]
 8042b46:	f007 fc35 	bl	804a3b4 <utoa>
	lcd_put_cur(0, 9);
 8042b4a:	2109      	movs	r1, #9
 8042b4c:	2000      	movs	r0, #0
 8042b4e:	f001 f852 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042b52:	4813      	ldr	r0, [pc, #76]	; (8042ba0 <f_updateGuiValGradientSoakParam+0x84>)
 8042b54:	f001 f89f 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042b58:	210b      	movs	r1, #11
 8042b5a:	2000      	movs	r0, #0
 8042b5c:	f001 f84b 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042b60:	f107 0310 	add.w	r3, r7, #16
 8042b64:	4618      	mov	r0, r3
 8042b66:	f001 f896 	bl	8043c96 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt, 10);
 8042b6a:	8afb      	ldrh	r3, [r7, #22]
 8042b6c:	f107 0110 	add.w	r1, r7, #16
 8042b70:	220a      	movs	r2, #10
 8042b72:	4618      	mov	r0, r3
 8042b74:	f007 fc1e 	bl	804a3b4 <utoa>
	lcd_put_cur(1,9);
 8042b78:	2109      	movs	r1, #9
 8042b7a:	2001      	movs	r0, #1
 8042b7c:	f001 f83b 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("t=");
 8042b80:	4808      	ldr	r0, [pc, #32]	; (8042ba4 <f_updateGuiValGradientSoakParam+0x88>)
 8042b82:	f001 f888 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042b86:	210b      	movs	r1, #11
 8042b88:	2001      	movs	r0, #1
 8042b8a:	f001 f834 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042b8e:	f107 0310 	add.w	r3, r7, #16
 8042b92:	4618      	mov	r0, r3
 8042b94:	f001 f87f 	bl	8043c96 <lcd_send_string>
}
 8042b98:	bf00      	nop
 8042b9a:	3718      	adds	r7, #24
 8042b9c:	46bd      	mov	sp, r7
 8042b9e:	bd80      	pop	{r7, pc}
 8042ba0:	0804e188 	.word	0x0804e188
 8042ba4:	0804e190 	.word	0x0804e190

08042ba8 <f_updateGuiValSoakParam>:
void f_updateGuiValSoakParam(uint32_t u32_SoakTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,uint16_t u16_SoakTime)
{
 8042ba8:	b580      	push	{r7, lr}
 8042baa:	b086      	sub	sp, #24
 8042bac:	af00      	add	r7, sp, #0
 8042bae:	60f8      	str	r0, [r7, #12]
 8042bb0:	60b9      	str	r1, [r7, #8]
 8042bb2:	4611      	mov	r1, r2
 8042bb4:	461a      	mov	r2, r3
 8042bb6:	460b      	mov	r3, r1
 8042bb8:	80fb      	strh	r3, [r7, #6]
 8042bba:	4613      	mov	r3, r2
 8042bbc:	80bb      	strh	r3, [r7, #4]
	uint16_t u16_timeRemaining = 0;
 8042bbe:	2300      	movs	r3, #0
 8042bc0:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042bc2:	2300      	movs	r3, #0
 8042bc4:	613b      	str	r3, [r7, #16]

	u16_timeRemaining =( u16_SoakTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime )) / 2;
 8042bc6:	88ba      	ldrh	r2, [r7, #4]
 8042bc8:	88fb      	ldrh	r3, [r7, #6]
 8042bca:	68b9      	ldr	r1, [r7, #8]
 8042bcc:	1acb      	subs	r3, r1, r3
 8042bce:	4413      	add	r3, r2
 8042bd0:	085b      	lsrs	r3, r3, #1
 8042bd2:	82fb      	strh	r3, [r7, #22]

	utoa(u32_SoakTemperature,(char*)gui_stringInt,10);
 8042bd4:	f107 0310 	add.w	r3, r7, #16
 8042bd8:	220a      	movs	r2, #10
 8042bda:	4619      	mov	r1, r3
 8042bdc:	68f8      	ldr	r0, [r7, #12]
 8042bde:	f007 fbe9 	bl	804a3b4 <utoa>
	lcd_put_cur(0, 9);
 8042be2:	2109      	movs	r1, #9
 8042be4:	2000      	movs	r0, #0
 8042be6:	f001 f806 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042bea:	4813      	ldr	r0, [pc, #76]	; (8042c38 <f_updateGuiValSoakParam+0x90>)
 8042bec:	f001 f853 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042bf0:	210b      	movs	r1, #11
 8042bf2:	2000      	movs	r0, #0
 8042bf4:	f000 ffff 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042bf8:	f107 0310 	add.w	r3, r7, #16
 8042bfc:	4618      	mov	r0, r3
 8042bfe:	f001 f84a 	bl	8043c96 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042c02:	8afb      	ldrh	r3, [r7, #22]
 8042c04:	f107 0110 	add.w	r1, r7, #16
 8042c08:	220a      	movs	r2, #10
 8042c0a:	4618      	mov	r0, r3
 8042c0c:	f007 fbd2 	bl	804a3b4 <utoa>
	lcd_put_cur(1, 9);
 8042c10:	2109      	movs	r1, #9
 8042c12:	2001      	movs	r0, #1
 8042c14:	f000 ffef 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("t=");
 8042c18:	4808      	ldr	r0, [pc, #32]	; (8042c3c <f_updateGuiValSoakParam+0x94>)
 8042c1a:	f001 f83c 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042c1e:	210b      	movs	r1, #11
 8042c20:	2001      	movs	r0, #1
 8042c22:	f000 ffe8 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042c26:	f107 0310 	add.w	r3, r7, #16
 8042c2a:	4618      	mov	r0, r3
 8042c2c:	f001 f833 	bl	8043c96 <lcd_send_string>
}
 8042c30:	bf00      	nop
 8042c32:	3718      	adds	r7, #24
 8042c34:	46bd      	mov	sp, r7
 8042c36:	bd80      	pop	{r7, pc}
 8042c38:	0804e188 	.word	0x0804e188
 8042c3c:	0804e190 	.word	0x0804e190

08042c40 <f_updateGuiValGradientReflowParam>:
void f_updateGuiValGradientReflowParam(uint32_t u32_ReflowTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
							 uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime){
 8042c40:	b580      	push	{r7, lr}
 8042c42:	b086      	sub	sp, #24
 8042c44:	af00      	add	r7, sp, #0
 8042c46:	60f8      	str	r0, [r7, #12]
 8042c48:	60b9      	str	r1, [r7, #8]
 8042c4a:	4611      	mov	r1, r2
 8042c4c:	461a      	mov	r2, r3
 8042c4e:	460b      	mov	r3, r1
 8042c50:	80fb      	strh	r3, [r7, #6]
 8042c52:	4613      	mov	r3, r2
 8042c54:	80bb      	strh	r3, [r7, #4]

	uint16_t u16_timeRemaining = 0;
 8042c56:	2300      	movs	r3, #0
 8042c58:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042c5a:	2300      	movs	r3, #0
 8042c5c:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_SecondHeatupTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime - u16_SoakTime )) / 2;
 8042c5e:	8c3a      	ldrh	r2, [r7, #32]
 8042c60:	88b9      	ldrh	r1, [r7, #4]
 8042c62:	88fb      	ldrh	r3, [r7, #6]
 8042c64:	68b8      	ldr	r0, [r7, #8]
 8042c66:	1ac3      	subs	r3, r0, r3
 8042c68:	440b      	add	r3, r1
 8042c6a:	4413      	add	r3, r2
 8042c6c:	085b      	lsrs	r3, r3, #1
 8042c6e:	82fb      	strh	r3, [r7, #22]

	utoa(u32_ReflowTemperature, (char*)gui_stringInt,10);
 8042c70:	f107 0310 	add.w	r3, r7, #16
 8042c74:	220a      	movs	r2, #10
 8042c76:	4619      	mov	r1, r3
 8042c78:	68f8      	ldr	r0, [r7, #12]
 8042c7a:	f007 fb9b 	bl	804a3b4 <utoa>
	lcd_put_cur(0, 9);
 8042c7e:	2109      	movs	r1, #9
 8042c80:	2000      	movs	r0, #0
 8042c82:	f000 ffb8 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042c86:	4813      	ldr	r0, [pc, #76]	; (8042cd4 <f_updateGuiValGradientReflowParam+0x94>)
 8042c88:	f001 f805 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042c8c:	210b      	movs	r1, #11
 8042c8e:	2000      	movs	r0, #0
 8042c90:	f000 ffb1 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042c94:	f107 0310 	add.w	r3, r7, #16
 8042c98:	4618      	mov	r0, r3
 8042c9a:	f000 fffc 	bl	8043c96 <lcd_send_string>

	utoa(u16_timeRemaining,(char*)gui_stringInt,10);
 8042c9e:	8afb      	ldrh	r3, [r7, #22]
 8042ca0:	f107 0110 	add.w	r1, r7, #16
 8042ca4:	220a      	movs	r2, #10
 8042ca6:	4618      	mov	r0, r3
 8042ca8:	f007 fb84 	bl	804a3b4 <utoa>
	lcd_put_cur(1, 9);
 8042cac:	2109      	movs	r1, #9
 8042cae:	2001      	movs	r0, #1
 8042cb0:	f000 ffa1 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("t=");
 8042cb4:	4808      	ldr	r0, [pc, #32]	; (8042cd8 <f_updateGuiValGradientReflowParam+0x98>)
 8042cb6:	f000 ffee 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042cba:	210b      	movs	r1, #11
 8042cbc:	2001      	movs	r0, #1
 8042cbe:	f000 ff9a 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042cc2:	f107 0310 	add.w	r3, r7, #16
 8042cc6:	4618      	mov	r0, r3
 8042cc8:	f000 ffe5 	bl	8043c96 <lcd_send_string>
}
 8042ccc:	bf00      	nop
 8042cce:	3718      	adds	r7, #24
 8042cd0:	46bd      	mov	sp, r7
 8042cd2:	bd80      	pop	{r7, pc}
 8042cd4:	0804e188 	.word	0x0804e188
 8042cd8:	0804e190 	.word	0x0804e190

08042cdc <f_updateGuiValReflowParam>:
void f_updateGuiValReflowParam(uint32_t u32_ReflowTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
								uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime, uint16_t u16_ReflowTime){
 8042cdc:	b590      	push	{r4, r7, lr}
 8042cde:	b087      	sub	sp, #28
 8042ce0:	af00      	add	r7, sp, #0
 8042ce2:	60f8      	str	r0, [r7, #12]
 8042ce4:	60b9      	str	r1, [r7, #8]
 8042ce6:	4611      	mov	r1, r2
 8042ce8:	461a      	mov	r2, r3
 8042cea:	460b      	mov	r3, r1
 8042cec:	80fb      	strh	r3, [r7, #6]
 8042cee:	4613      	mov	r3, r2
 8042cf0:	80bb      	strh	r3, [r7, #4]

	uint16_t u16_timeRemaining = 0;
 8042cf2:	2300      	movs	r3, #0
 8042cf4:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042cf6:	2300      	movs	r3, #0
 8042cf8:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_ReflowTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime )) / 2;
 8042cfa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8042cfc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8042cfe:	88b8      	ldrh	r0, [r7, #4]
 8042d00:	88fb      	ldrh	r3, [r7, #6]
 8042d02:	68bc      	ldr	r4, [r7, #8]
 8042d04:	1ae3      	subs	r3, r4, r3
 8042d06:	4403      	add	r3, r0
 8042d08:	440b      	add	r3, r1
 8042d0a:	4413      	add	r3, r2
 8042d0c:	085b      	lsrs	r3, r3, #1
 8042d0e:	82fb      	strh	r3, [r7, #22]

	utoa(u32_ReflowTemperature, (char*)gui_stringInt,10);
 8042d10:	f107 0310 	add.w	r3, r7, #16
 8042d14:	220a      	movs	r2, #10
 8042d16:	4619      	mov	r1, r3
 8042d18:	68f8      	ldr	r0, [r7, #12]
 8042d1a:	f007 fb4b 	bl	804a3b4 <utoa>
	lcd_put_cur(0, 9);
 8042d1e:	2109      	movs	r1, #9
 8042d20:	2000      	movs	r0, #0
 8042d22:	f000 ff68 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042d26:	4813      	ldr	r0, [pc, #76]	; (8042d74 <f_updateGuiValReflowParam+0x98>)
 8042d28:	f000 ffb5 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042d2c:	210b      	movs	r1, #11
 8042d2e:	2000      	movs	r0, #0
 8042d30:	f000 ff61 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042d34:	f107 0310 	add.w	r3, r7, #16
 8042d38:	4618      	mov	r0, r3
 8042d3a:	f000 ffac 	bl	8043c96 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042d3e:	8afb      	ldrh	r3, [r7, #22]
 8042d40:	f107 0110 	add.w	r1, r7, #16
 8042d44:	220a      	movs	r2, #10
 8042d46:	4618      	mov	r0, r3
 8042d48:	f007 fb34 	bl	804a3b4 <utoa>
	lcd_put_cur(1, 9);
 8042d4c:	2109      	movs	r1, #9
 8042d4e:	2001      	movs	r0, #1
 8042d50:	f000 ff51 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("t=");
 8042d54:	4808      	ldr	r0, [pc, #32]	; (8042d78 <f_updateGuiValReflowParam+0x9c>)
 8042d56:	f000 ff9e 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042d5a:	210b      	movs	r1, #11
 8042d5c:	2001      	movs	r0, #1
 8042d5e:	f000 ff4a 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042d62:	f107 0310 	add.w	r3, r7, #16
 8042d66:	4618      	mov	r0, r3
 8042d68:	f000 ff95 	bl	8043c96 <lcd_send_string>
}
 8042d6c:	bf00      	nop
 8042d6e:	371c      	adds	r7, #28
 8042d70:	46bd      	mov	sp, r7
 8042d72:	bd90      	pop	{r4, r7, pc}
 8042d74:	0804e188 	.word	0x0804e188
 8042d78:	0804e190 	.word	0x0804e190

08042d7c <f_updateGuiValCoolDownParam>:
void f_updateGuiValCoolDownParam(uint32_t u16_CooldownTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
								uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime, uint16_t u16_ReflowTime, uint16_t u16_CooldownTime){
 8042d7c:	b5b0      	push	{r4, r5, r7, lr}
 8042d7e:	b086      	sub	sp, #24
 8042d80:	af00      	add	r7, sp, #0
 8042d82:	60f8      	str	r0, [r7, #12]
 8042d84:	60b9      	str	r1, [r7, #8]
 8042d86:	4611      	mov	r1, r2
 8042d88:	461a      	mov	r2, r3
 8042d8a:	460b      	mov	r3, r1
 8042d8c:	80fb      	strh	r3, [r7, #6]
 8042d8e:	4613      	mov	r3, r2
 8042d90:	80bb      	strh	r3, [r7, #4]
	uint16_t u16_timeRemaining = 0;
 8042d92:	2300      	movs	r3, #0
 8042d94:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042d96:	2300      	movs	r3, #0
 8042d98:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_CooldownTime - ( (u16_ReflowIndexCurrent)  - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime - u16_ReflowTime )) / 2;
 8042d9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8042d9c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8042d9e:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8042da0:	88bc      	ldrh	r4, [r7, #4]
 8042da2:	88fb      	ldrh	r3, [r7, #6]
 8042da4:	68bd      	ldr	r5, [r7, #8]
 8042da6:	1aeb      	subs	r3, r5, r3
 8042da8:	4423      	add	r3, r4
 8042daa:	4403      	add	r3, r0
 8042dac:	440b      	add	r3, r1
 8042dae:	4413      	add	r3, r2
 8042db0:	085b      	lsrs	r3, r3, #1
 8042db2:	82fb      	strh	r3, [r7, #22]

	utoa(u16_CooldownTemperature, (char*)gui_stringInt,10);
 8042db4:	f107 0310 	add.w	r3, r7, #16
 8042db8:	220a      	movs	r2, #10
 8042dba:	4619      	mov	r1, r3
 8042dbc:	68f8      	ldr	r0, [r7, #12]
 8042dbe:	f007 faf9 	bl	804a3b4 <utoa>
	lcd_put_cur(0, 9);
 8042dc2:	2109      	movs	r1, #9
 8042dc4:	2000      	movs	r0, #0
 8042dc6:	f000 ff16 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("T=");
 8042dca:	4813      	ldr	r0, [pc, #76]	; (8042e18 <f_updateGuiValCoolDownParam+0x9c>)
 8042dcc:	f000 ff63 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042dd0:	210b      	movs	r1, #11
 8042dd2:	2000      	movs	r0, #0
 8042dd4:	f000 ff0f 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042dd8:	f107 0310 	add.w	r3, r7, #16
 8042ddc:	4618      	mov	r0, r3
 8042dde:	f000 ff5a 	bl	8043c96 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042de2:	8afb      	ldrh	r3, [r7, #22]
 8042de4:	f107 0110 	add.w	r1, r7, #16
 8042de8:	220a      	movs	r2, #10
 8042dea:	4618      	mov	r0, r3
 8042dec:	f007 fae2 	bl	804a3b4 <utoa>
	lcd_put_cur(1, 9);
 8042df0:	2109      	movs	r1, #9
 8042df2:	2001      	movs	r0, #1
 8042df4:	f000 feff 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("t=");
 8042df8:	4808      	ldr	r0, [pc, #32]	; (8042e1c <f_updateGuiValCoolDownParam+0xa0>)
 8042dfa:	f000 ff4c 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042dfe:	210b      	movs	r1, #11
 8042e00:	2001      	movs	r0, #1
 8042e02:	f000 fef8 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042e06:	f107 0310 	add.w	r3, r7, #16
 8042e0a:	4618      	mov	r0, r3
 8042e0c:	f000 ff43 	bl	8043c96 <lcd_send_string>
}
 8042e10:	bf00      	nop
 8042e12:	3718      	adds	r7, #24
 8042e14:	46bd      	mov	sp, r7
 8042e16:	bdb0      	pop	{r4, r5, r7, pc}
 8042e18:	0804e188 	.word	0x0804e188
 8042e1c:	0804e190 	.word	0x0804e190

08042e20 <f_updateGuiReflowFinished>:
void f_updateGuiReflowFinished(void)
{
 8042e20:	b580      	push	{r7, lr}
 8042e22:	af00      	add	r7, sp, #0
	lcd_clear_cmd();
 8042e24:	f000 fed7 	bl	8043bd6 <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8042e28:	2100      	movs	r1, #0
 8042e2a:	2000      	movs	r0, #0
 8042e2c:	f000 fee3 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Reflow");
 8042e30:	480a      	ldr	r0, [pc, #40]	; (8042e5c <f_updateGuiReflowFinished+0x3c>)
 8042e32:	f000 ff30 	bl	8043c96 <lcd_send_string>
	lcd_put_cur(1, 0);
 8042e36:	2100      	movs	r1, #0
 8042e38:	2001      	movs	r0, #1
 8042e3a:	f000 fedc 	bl	8043bf6 <lcd_put_cur>
	lcd_send_string("Finished!");
 8042e3e:	4808      	ldr	r0, [pc, #32]	; (8042e60 <f_updateGuiReflowFinished+0x40>)
 8042e40:	f000 ff29 	bl	8043c96 <lcd_send_string>
	while(1)
	{
		if(TRUE == ui8_encButtonPressed)
 8042e44:	4b07      	ldr	r3, [pc, #28]	; (8042e64 <f_updateGuiReflowFinished+0x44>)
 8042e46:	781b      	ldrb	r3, [r3, #0]
 8042e48:	b2db      	uxtb	r3, r3
 8042e4a:	2b01      	cmp	r3, #1
 8042e4c:	d1fa      	bne.n	8042e44 <f_updateGuiReflowFinished+0x24>
		{

			ui8_encButtonPressed = FALSE;
 8042e4e:	4b05      	ldr	r3, [pc, #20]	; (8042e64 <f_updateGuiReflowFinished+0x44>)
 8042e50:	2200      	movs	r2, #0
 8042e52:	701a      	strb	r2, [r3, #0]
			break;
 8042e54:	bf00      	nop
		}
	}
}
 8042e56:	bf00      	nop
 8042e58:	bd80      	pop	{r7, pc}
 8042e5a:	bf00      	nop
 8042e5c:	0804e194 	.word	0x0804e194
 8042e60:	0804e19c 	.word	0x0804e19c
 8042e64:	20000349 	.word	0x20000349

08042e68 <EE_Init>:
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
static uint16_t EE_VerifyPageFullyErased(uint32_t Address);


uint16_t EE_Init(void)
{
 8042e68:	b580      	push	{r7, lr}
 8042e6a:	b08a      	sub	sp, #40	; 0x28
 8042e6c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8042e6e:	2306      	movs	r3, #6
 8042e70:	847b      	strh	r3, [r7, #34]	; 0x22
 8042e72:	2306      	movs	r3, #6
 8042e74:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8042e76:	2300      	movs	r3, #0
 8042e78:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8042e7a:	2300      	movs	r3, #0
 8042e7c:	83fb      	strh	r3, [r7, #30]
 8042e7e:	2300      	movs	r3, #0
 8042e80:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8042e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8042e86:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8042e88:	2300      	movs	r3, #0
 8042e8a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8042e8c:	4ba3      	ldr	r3, [pc, #652]	; (804311c <EE_Init+0x2b4>)
 8042e8e:	881b      	ldrh	r3, [r3, #0]
 8042e90:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8042e92:	4ba3      	ldr	r3, [pc, #652]	; (8043120 <EE_Init+0x2b8>)
 8042e94:	881b      	ldrh	r3, [r3, #0]
 8042e96:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8042e98:	2300      	movs	r3, #0
 8042e9a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8042e9c:	2309      	movs	r3, #9
 8042e9e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8042ea0:	2301      	movs	r3, #1
 8042ea2:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042ea4:	2301      	movs	r3, #1
 8042ea6:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8042ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042eae:	4293      	cmp	r3, r2
 8042eb0:	d00b      	beq.n	8042eca <EE_Init+0x62>
 8042eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042eb6:	f280 819b 	bge.w	80431f0 <EE_Init+0x388>
 8042eba:	2b00      	cmp	r3, #0
 8042ebc:	f000 80fb 	beq.w	80430b6 <EE_Init+0x24e>
 8042ec0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042ec4:	4293      	cmp	r3, r2
 8042ec6:	d050      	beq.n	8042f6a <EE_Init+0x102>
 8042ec8:	e192      	b.n	80431f0 <EE_Init+0x388>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8042eca:	8c3b      	ldrh	r3, [r7, #32]
 8042ecc:	2b00      	cmp	r3, #0
 8042ece:	d116      	bne.n	8042efe <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042ed0:	4892      	ldr	r0, [pc, #584]	; (804311c <EE_Init+0x2b4>)
 8042ed2:	f000 f9ab 	bl	804322c <EE_VerifyPageFullyErased>
 8042ed6:	4603      	mov	r3, r0
 8042ed8:	2b00      	cmp	r3, #0
 8042eda:	f040 8193 	bne.w	8043204 <EE_Init+0x39c>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8042ede:	f107 0214 	add.w	r2, r7, #20
 8042ee2:	463b      	mov	r3, r7
 8042ee4:	4611      	mov	r1, r2
 8042ee6:	4618      	mov	r0, r3
 8042ee8:	f002 fa24 	bl	8045334 <HAL_FLASHEx_Erase>
 8042eec:	4603      	mov	r3, r0
 8042eee:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042ef0:	7efb      	ldrb	r3, [r7, #27]
 8042ef2:	2b00      	cmp	r3, #0
 8042ef4:	f000 8186 	beq.w	8043204 <EE_Init+0x39c>
          {
            return FlashStatus;
 8042ef8:	7efb      	ldrb	r3, [r7, #27]
 8042efa:	b29b      	uxth	r3, r3
 8042efc:	e18a      	b.n	8043214 <EE_Init+0x3ac>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8042efe:	8c3b      	ldrh	r3, [r7, #32]
 8042f00:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042f04:	4293      	cmp	r3, r2
 8042f06:	d125      	bne.n	8042f54 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042f08:	4884      	ldr	r0, [pc, #528]	; (804311c <EE_Init+0x2b4>)
 8042f0a:	f000 f98f 	bl	804322c <EE_VerifyPageFullyErased>
 8042f0e:	4603      	mov	r3, r0
 8042f10:	2b00      	cmp	r3, #0
 8042f12:	d10e      	bne.n	8042f32 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8042f14:	f107 0214 	add.w	r2, r7, #20
 8042f18:	463b      	mov	r3, r7
 8042f1a:	4611      	mov	r1, r2
 8042f1c:	4618      	mov	r0, r3
 8042f1e:	f002 fa09 	bl	8045334 <HAL_FLASHEx_Erase>
 8042f22:	4603      	mov	r3, r0
 8042f24:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042f26:	7efb      	ldrb	r3, [r7, #27]
 8042f28:	2b00      	cmp	r3, #0
 8042f2a:	d002      	beq.n	8042f32 <EE_Init+0xca>
          {
            return FlashStatus;
 8042f2c:	7efb      	ldrb	r3, [r7, #27]
 8042f2e:	b29b      	uxth	r3, r3
 8042f30:	e170      	b.n	8043214 <EE_Init+0x3ac>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8042f32:	f04f 0200 	mov.w	r2, #0
 8042f36:	f04f 0300 	mov.w	r3, #0
 8042f3a:	4979      	ldr	r1, [pc, #484]	; (8043120 <EE_Init+0x2b8>)
 8042f3c:	2001      	movs	r0, #1
 8042f3e:	f002 f843 	bl	8044fc8 <HAL_FLASH_Program>
 8042f42:	4603      	mov	r3, r0
 8042f44:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042f46:	7efb      	ldrb	r3, [r7, #27]
 8042f48:	2b00      	cmp	r3, #0
 8042f4a:	f000 815b 	beq.w	8043204 <EE_Init+0x39c>
        {
          return FlashStatus;
 8042f4e:	7efb      	ldrb	r3, [r7, #27]
 8042f50:	b29b      	uxth	r3, r3
 8042f52:	e15f      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8042f54:	f000 f9fa 	bl	804334c <EE_Format>
 8042f58:	4603      	mov	r3, r0
 8042f5a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042f5c:	7efb      	ldrb	r3, [r7, #27]
 8042f5e:	2b00      	cmp	r3, #0
 8042f60:	f000 8150 	beq.w	8043204 <EE_Init+0x39c>
        {
          return FlashStatus;
 8042f64:	7efb      	ldrb	r3, [r7, #27]
 8042f66:	b29b      	uxth	r3, r3
 8042f68:	e154      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8042f6a:	8c3b      	ldrh	r3, [r7, #32]
 8042f6c:	2b00      	cmp	r3, #0
 8042f6e:	d166      	bne.n	804303e <EE_Init+0x1d6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042f70:	2300      	movs	r3, #0
 8042f72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8042f74:	e033      	b.n	8042fde <EE_Init+0x176>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == (KP_VirtAddr+VarIdx) )
 8042f76:	4b6b      	ldr	r3, [pc, #428]	; (8043124 <EE_Init+0x2bc>)
 8042f78:	881b      	ldrh	r3, [r3, #0]
 8042f7a:	b29b      	uxth	r3, r3
 8042f7c:	461a      	mov	r2, r3
 8042f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042f80:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8042f84:	33a0      	adds	r3, #160	; 0xa0
 8042f86:	429a      	cmp	r2, r3
 8042f88:	d101      	bne.n	8042f8e <EE_Init+0x126>
          {
            x = VarIdx;
 8042f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8042f8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8042f90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8042f94:	429a      	cmp	r2, r3
 8042f96:	d01f      	beq.n	8042fd8 <EE_Init+0x170>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 8042f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042f9a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8042f9e:	3b60      	subs	r3, #96	; 0x60
 8042fa0:	b29b      	uxth	r3, r3
 8042fa2:	4961      	ldr	r1, [pc, #388]	; (8043128 <EE_Init+0x2c0>)
 8042fa4:	4618      	mov	r0, r3
 8042fa6:	f000 f967 	bl	8043278 <EE_ReadVariable>
 8042faa:	4603      	mov	r3, r0
 8042fac:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8042fae:	8bbb      	ldrh	r3, [r7, #28]
 8042fb0:	2b01      	cmp	r3, #1
 8042fb2:	d011      	beq.n	8042fd8 <EE_Init+0x170>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8042fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042fb6:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8042fba:	3b60      	subs	r3, #96	; 0x60
 8042fbc:	b29b      	uxth	r3, r3
 8042fbe:	4a5a      	ldr	r2, [pc, #360]	; (8043128 <EE_Init+0x2c0>)
 8042fc0:	8812      	ldrh	r2, [r2, #0]
 8042fc2:	4611      	mov	r1, r2
 8042fc4:	4618      	mov	r0, r3
 8042fc6:	f000 fa59 	bl	804347c <EE_VerifyPageFullWriteVariable>
 8042fca:	4603      	mov	r3, r0
 8042fcc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8042fce:	8bfb      	ldrh	r3, [r7, #30]
 8042fd0:	2b00      	cmp	r3, #0
 8042fd2:	d001      	beq.n	8042fd8 <EE_Init+0x170>
              {
                return EepromStatus;
 8042fd4:	8bfb      	ldrh	r3, [r7, #30]
 8042fd6:	e11d      	b.n	8043214 <EE_Init+0x3ac>
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042fda:	3301      	adds	r3, #1
 8042fdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8042fde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042fe0:	2b0b      	cmp	r3, #11
 8042fe2:	d9c8      	bls.n	8042f76 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8042fe4:	f04f 0200 	mov.w	r2, #0
 8042fe8:	f04f 0300 	mov.w	r3, #0
 8042fec:	494b      	ldr	r1, [pc, #300]	; (804311c <EE_Init+0x2b4>)
 8042fee:	2001      	movs	r0, #1
 8042ff0:	f001 ffea 	bl	8044fc8 <HAL_FLASH_Program>
 8042ff4:	4603      	mov	r3, r0
 8042ff6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042ff8:	7efb      	ldrb	r3, [r7, #27]
 8042ffa:	2b00      	cmp	r3, #0
 8042ffc:	d002      	beq.n	8043004 <EE_Init+0x19c>
        {
          return FlashStatus;
 8042ffe:	7efb      	ldrb	r3, [r7, #27]
 8043000:	b29b      	uxth	r3, r3
 8043002:	e107      	b.n	8043214 <EE_Init+0x3ac>
        }
        pEraseInit.Sector = PAGE1_ID;
 8043004:	230a      	movs	r3, #10
 8043006:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8043008:	2301      	movs	r3, #1
 804300a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 804300c:	2301      	movs	r3, #1
 804300e:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8043010:	4843      	ldr	r0, [pc, #268]	; (8043120 <EE_Init+0x2b8>)
 8043012:	f000 f90b 	bl	804322c <EE_VerifyPageFullyErased>
 8043016:	4603      	mov	r3, r0
 8043018:	2b00      	cmp	r3, #0
 804301a:	f040 80f5 	bne.w	8043208 <EE_Init+0x3a0>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 804301e:	f107 0214 	add.w	r2, r7, #20
 8043022:	463b      	mov	r3, r7
 8043024:	4611      	mov	r1, r2
 8043026:	4618      	mov	r0, r3
 8043028:	f002 f984 	bl	8045334 <HAL_FLASHEx_Erase>
 804302c:	4603      	mov	r3, r0
 804302e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8043030:	7efb      	ldrb	r3, [r7, #27]
 8043032:	2b00      	cmp	r3, #0
 8043034:	f000 80e8 	beq.w	8043208 <EE_Init+0x3a0>
          {
            return FlashStatus;
 8043038:	7efb      	ldrb	r3, [r7, #27]
 804303a:	b29b      	uxth	r3, r3
 804303c:	e0ea      	b.n	8043214 <EE_Init+0x3ac>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 804303e:	8c3b      	ldrh	r3, [r7, #32]
 8043040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043044:	4293      	cmp	r3, r2
 8043046:	d12b      	bne.n	80430a0 <EE_Init+0x238>
      {
        pEraseInit.Sector = PAGE1_ID;
 8043048:	230a      	movs	r3, #10
 804304a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 804304c:	2301      	movs	r3, #1
 804304e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8043050:	2301      	movs	r3, #1
 8043052:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8043054:	4832      	ldr	r0, [pc, #200]	; (8043120 <EE_Init+0x2b8>)
 8043056:	f000 f8e9 	bl	804322c <EE_VerifyPageFullyErased>
 804305a:	4603      	mov	r3, r0
 804305c:	2b00      	cmp	r3, #0
 804305e:	d10e      	bne.n	804307e <EE_Init+0x216>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8043060:	f107 0214 	add.w	r2, r7, #20
 8043064:	463b      	mov	r3, r7
 8043066:	4611      	mov	r1, r2
 8043068:	4618      	mov	r0, r3
 804306a:	f002 f963 	bl	8045334 <HAL_FLASHEx_Erase>
 804306e:	4603      	mov	r3, r0
 8043070:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8043072:	7efb      	ldrb	r3, [r7, #27]
 8043074:	2b00      	cmp	r3, #0
 8043076:	d002      	beq.n	804307e <EE_Init+0x216>
          {
            return FlashStatus;
 8043078:	7efb      	ldrb	r3, [r7, #27]
 804307a:	b29b      	uxth	r3, r3
 804307c:	e0ca      	b.n	8043214 <EE_Init+0x3ac>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 804307e:	f04f 0200 	mov.w	r2, #0
 8043082:	f04f 0300 	mov.w	r3, #0
 8043086:	4925      	ldr	r1, [pc, #148]	; (804311c <EE_Init+0x2b4>)
 8043088:	2001      	movs	r0, #1
 804308a:	f001 ff9d 	bl	8044fc8 <HAL_FLASH_Program>
 804308e:	4603      	mov	r3, r0
 8043090:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8043092:	7efb      	ldrb	r3, [r7, #27]
 8043094:	2b00      	cmp	r3, #0
 8043096:	f000 80b7 	beq.w	8043208 <EE_Init+0x3a0>
        {
          return FlashStatus;
 804309a:	7efb      	ldrb	r3, [r7, #27]
 804309c:	b29b      	uxth	r3, r3
 804309e:	e0b9      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80430a0:	f000 f954 	bl	804334c <EE_Format>
 80430a4:	4603      	mov	r3, r0
 80430a6:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80430a8:	7efb      	ldrb	r3, [r7, #27]
 80430aa:	2b00      	cmp	r3, #0
 80430ac:	f000 80ac 	beq.w	8043208 <EE_Init+0x3a0>
        {
          return FlashStatus;
 80430b0:	7efb      	ldrb	r3, [r7, #27]
 80430b2:	b29b      	uxth	r3, r3
 80430b4:	e0ae      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80430b6:	8c3b      	ldrh	r3, [r7, #32]
 80430b8:	2b00      	cmp	r3, #0
 80430ba:	d10a      	bne.n	80430d2 <EE_Init+0x26a>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80430bc:	f000 f946 	bl	804334c <EE_Format>
 80430c0:	4603      	mov	r3, r0
 80430c2:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80430c4:	7efb      	ldrb	r3, [r7, #27]
 80430c6:	2b00      	cmp	r3, #0
 80430c8:	f000 80a0 	beq.w	804320c <EE_Init+0x3a4>
        {
          return FlashStatus;
 80430cc:	7efb      	ldrb	r3, [r7, #27]
 80430ce:	b29b      	uxth	r3, r3
 80430d0:	e0a0      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80430d2:	8c3b      	ldrh	r3, [r7, #32]
 80430d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80430d8:	4293      	cmp	r3, r2
 80430da:	d11b      	bne.n	8043114 <EE_Init+0x2ac>
      {
        pEraseInit.Sector = PAGE1_ID;
 80430dc:	230a      	movs	r3, #10
 80430de:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80430e0:	2301      	movs	r3, #1
 80430e2:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80430e4:	2301      	movs	r3, #1
 80430e6:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80430e8:	480d      	ldr	r0, [pc, #52]	; (8043120 <EE_Init+0x2b8>)
 80430ea:	f000 f89f 	bl	804322c <EE_VerifyPageFullyErased>
 80430ee:	4603      	mov	r3, r0
 80430f0:	2b00      	cmp	r3, #0
 80430f2:	f040 808b 	bne.w	804320c <EE_Init+0x3a4>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80430f6:	f107 0214 	add.w	r2, r7, #20
 80430fa:	463b      	mov	r3, r7
 80430fc:	4611      	mov	r1, r2
 80430fe:	4618      	mov	r0, r3
 8043100:	f002 f918 	bl	8045334 <HAL_FLASHEx_Erase>
 8043104:	4603      	mov	r3, r0
 8043106:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8043108:	7efb      	ldrb	r3, [r7, #27]
 804310a:	2b00      	cmp	r3, #0
 804310c:	d07e      	beq.n	804320c <EE_Init+0x3a4>
          {
            return FlashStatus;
 804310e:	7efb      	ldrb	r3, [r7, #27]
 8043110:	b29b      	uxth	r3, r3
 8043112:	e07f      	b.n	8043214 <EE_Init+0x3ac>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8043114:	2300      	movs	r3, #0
 8043116:	84fb      	strh	r3, [r7, #38]	; 0x26
 8043118:	e03c      	b.n	8043194 <EE_Init+0x32c>
 804311a:	bf00      	nop
 804311c:	080a0000 	.word	0x080a0000
 8043120:	080c0000 	.word	0x080c0000
 8043124:	080a0006 	.word	0x080a0006
 8043128:	2000020c 	.word	0x2000020c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == (KP_VirtAddr+VarIdx) )
 804312c:	4b3b      	ldr	r3, [pc, #236]	; (804321c <EE_Init+0x3b4>)
 804312e:	881b      	ldrh	r3, [r3, #0]
 8043130:	b29b      	uxth	r3, r3
 8043132:	461a      	mov	r2, r3
 8043134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043136:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 804313a:	33a0      	adds	r3, #160	; 0xa0
 804313c:	429a      	cmp	r2, r3
 804313e:	d101      	bne.n	8043144 <EE_Init+0x2dc>
          {
            x = VarIdx;
 8043140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043142:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8043144:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8043146:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 804314a:	429a      	cmp	r2, r3
 804314c:	d01f      	beq.n	804318e <EE_Init+0x326>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 804314e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043150:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8043154:	3b60      	subs	r3, #96	; 0x60
 8043156:	b29b      	uxth	r3, r3
 8043158:	4931      	ldr	r1, [pc, #196]	; (8043220 <EE_Init+0x3b8>)
 804315a:	4618      	mov	r0, r3
 804315c:	f000 f88c 	bl	8043278 <EE_ReadVariable>
 8043160:	4603      	mov	r3, r0
 8043162:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8043164:	8bbb      	ldrh	r3, [r7, #28]
 8043166:	2b01      	cmp	r3, #1
 8043168:	d011      	beq.n	804318e <EE_Init+0x326>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 804316a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804316c:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8043170:	3b60      	subs	r3, #96	; 0x60
 8043172:	b29b      	uxth	r3, r3
 8043174:	4a2a      	ldr	r2, [pc, #168]	; (8043220 <EE_Init+0x3b8>)
 8043176:	8812      	ldrh	r2, [r2, #0]
 8043178:	4611      	mov	r1, r2
 804317a:	4618      	mov	r0, r3
 804317c:	f000 f97e 	bl	804347c <EE_VerifyPageFullWriteVariable>
 8043180:	4603      	mov	r3, r0
 8043182:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8043184:	8bfb      	ldrh	r3, [r7, #30]
 8043186:	2b00      	cmp	r3, #0
 8043188:	d001      	beq.n	804318e <EE_Init+0x326>
              {
                return EepromStatus;
 804318a:	8bfb      	ldrh	r3, [r7, #30]
 804318c:	e042      	b.n	8043214 <EE_Init+0x3ac>
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 804318e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043190:	3301      	adds	r3, #1
 8043192:	84fb      	strh	r3, [r7, #38]	; 0x26
 8043194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043196:	2b0b      	cmp	r3, #11
 8043198:	d9c8      	bls.n	804312c <EE_Init+0x2c4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 804319a:	f04f 0200 	mov.w	r2, #0
 804319e:	f04f 0300 	mov.w	r3, #0
 80431a2:	4920      	ldr	r1, [pc, #128]	; (8043224 <EE_Init+0x3bc>)
 80431a4:	2001      	movs	r0, #1
 80431a6:	f001 ff0f 	bl	8044fc8 <HAL_FLASH_Program>
 80431aa:	4603      	mov	r3, r0
 80431ac:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80431ae:	7efb      	ldrb	r3, [r7, #27]
 80431b0:	2b00      	cmp	r3, #0
 80431b2:	d002      	beq.n	80431ba <EE_Init+0x352>
        {
          return FlashStatus;
 80431b4:	7efb      	ldrb	r3, [r7, #27]
 80431b6:	b29b      	uxth	r3, r3
 80431b8:	e02c      	b.n	8043214 <EE_Init+0x3ac>
        }
        pEraseInit.Sector = PAGE0_ID;
 80431ba:	2309      	movs	r3, #9
 80431bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80431be:	2301      	movs	r3, #1
 80431c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80431c2:	2301      	movs	r3, #1
 80431c4:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80431c6:	4818      	ldr	r0, [pc, #96]	; (8043228 <EE_Init+0x3c0>)
 80431c8:	f000 f830 	bl	804322c <EE_VerifyPageFullyErased>
 80431cc:	4603      	mov	r3, r0
 80431ce:	2b00      	cmp	r3, #0
 80431d0:	d11c      	bne.n	804320c <EE_Init+0x3a4>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80431d2:	f107 0214 	add.w	r2, r7, #20
 80431d6:	463b      	mov	r3, r7
 80431d8:	4611      	mov	r1, r2
 80431da:	4618      	mov	r0, r3
 80431dc:	f002 f8aa 	bl	8045334 <HAL_FLASHEx_Erase>
 80431e0:	4603      	mov	r3, r0
 80431e2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80431e4:	7efb      	ldrb	r3, [r7, #27]
 80431e6:	2b00      	cmp	r3, #0
 80431e8:	d010      	beq.n	804320c <EE_Init+0x3a4>
          {
            return FlashStatus;
 80431ea:	7efb      	ldrb	r3, [r7, #27]
 80431ec:	b29b      	uxth	r3, r3
 80431ee:	e011      	b.n	8043214 <EE_Init+0x3ac>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80431f0:	f000 f8ac 	bl	804334c <EE_Format>
 80431f4:	4603      	mov	r3, r0
 80431f6:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80431f8:	7efb      	ldrb	r3, [r7, #27]
 80431fa:	2b00      	cmp	r3, #0
 80431fc:	d008      	beq.n	8043210 <EE_Init+0x3a8>
      {
        return FlashStatus;
 80431fe:	7efb      	ldrb	r3, [r7, #27]
 8043200:	b29b      	uxth	r3, r3
 8043202:	e007      	b.n	8043214 <EE_Init+0x3ac>
      break;
 8043204:	bf00      	nop
 8043206:	e004      	b.n	8043212 <EE_Init+0x3aa>
      break;
 8043208:	bf00      	nop
 804320a:	e002      	b.n	8043212 <EE_Init+0x3aa>
      break;
 804320c:	bf00      	nop
 804320e:	e000      	b.n	8043212 <EE_Init+0x3aa>
      }
      break;
 8043210:	bf00      	nop
  }

  return HAL_OK;
 8043212:	2300      	movs	r3, #0
}
 8043214:	4618      	mov	r0, r3
 8043216:	3728      	adds	r7, #40	; 0x28
 8043218:	46bd      	mov	sp, r7
 804321a:	bd80      	pop	{r7, pc}
 804321c:	080c0006 	.word	0x080c0006
 8043220:	2000020c 	.word	0x2000020c
 8043224:	080c0000 	.word	0x080c0000
 8043228:	080a0000 	.word	0x080a0000

0804322c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 804322c:	b480      	push	{r7}
 804322e:	b085      	sub	sp, #20
 8043230:	af00      	add	r7, sp, #0
 8043232:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8043234:	2301      	movs	r3, #1
 8043236:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8043238:	f245 5355 	movw	r3, #21845	; 0x5555
 804323c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 804323e:	e00d      	b.n	804325c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8043240:	687b      	ldr	r3, [r7, #4]
 8043242:	881b      	ldrh	r3, [r3, #0]
 8043244:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8043246:	897b      	ldrh	r3, [r7, #10]
 8043248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804324c:	4293      	cmp	r3, r2
 804324e:	d002      	beq.n	8043256 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8043250:	2300      	movs	r3, #0
 8043252:	60fb      	str	r3, [r7, #12]

      break;
 8043254:	e006      	b.n	8043264 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8043256:	687b      	ldr	r3, [r7, #4]
 8043258:	3304      	adds	r3, #4
 804325a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 804325c:	687b      	ldr	r3, [r7, #4]
 804325e:	4a05      	ldr	r2, [pc, #20]	; (8043274 <EE_VerifyPageFullyErased+0x48>)
 8043260:	4293      	cmp	r3, r2
 8043262:	d9ed      	bls.n	8043240 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8043264:	68fb      	ldr	r3, [r7, #12]
 8043266:	b29b      	uxth	r3, r3
}
 8043268:	4618      	mov	r0, r3
 804326a:	3714      	adds	r7, #20
 804326c:	46bd      	mov	sp, r7
 804326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043272:	4770      	bx	lr
 8043274:	080bffff 	.word	0x080bffff

08043278 <EE_ReadVariable>:


uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8043278:	b580      	push	{r7, lr}
 804327a:	b086      	sub	sp, #24
 804327c:	af00      	add	r7, sp, #0
 804327e:	4603      	mov	r3, r0
 8043280:	6039      	str	r1, [r7, #0]
 8043282:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8043284:	2300      	movs	r3, #0
 8043286:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8043288:	f245 5355 	movw	r3, #21845	; 0x5555
 804328c:	81bb      	strh	r3, [r7, #12]
 804328e:	2301      	movs	r3, #1
 8043290:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8043292:	4b1b      	ldr	r3, [pc, #108]	; (8043300 <EE_ReadVariable+0x88>)
 8043294:	613b      	str	r3, [r7, #16]
 8043296:	4b1a      	ldr	r3, [pc, #104]	; (8043300 <EE_ReadVariable+0x88>)
 8043298:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 804329a:	2000      	movs	r0, #0
 804329c:	f000 f8a8 	bl	80433f0 <EE_FindValidPage>
 80432a0:	4603      	mov	r3, r0
 80432a2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80432a4:	89fb      	ldrh	r3, [r7, #14]
 80432a6:	2bab      	cmp	r3, #171	; 0xab
 80432a8:	d101      	bne.n	80432ae <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80432aa:	23ab      	movs	r3, #171	; 0xab
 80432ac:	e024      	b.n	80432f8 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80432ae:	89fb      	ldrh	r3, [r7, #14]
 80432b0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80432b4:	045b      	lsls	r3, r3, #17
 80432b6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80432b8:	89fb      	ldrh	r3, [r7, #14]
 80432ba:	3301      	adds	r3, #1
 80432bc:	045a      	lsls	r2, r3, #17
 80432be:	4b11      	ldr	r3, [pc, #68]	; (8043304 <EE_ReadVariable+0x8c>)
 80432c0:	4413      	add	r3, r2
 80432c2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80432c4:	e012      	b.n	80432ec <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80432c6:	693b      	ldr	r3, [r7, #16]
 80432c8:	881b      	ldrh	r3, [r3, #0]
 80432ca:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80432cc:	89ba      	ldrh	r2, [r7, #12]
 80432ce:	88fb      	ldrh	r3, [r7, #6]
 80432d0:	429a      	cmp	r2, r3
 80432d2:	d108      	bne.n	80432e6 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80432d4:	693b      	ldr	r3, [r7, #16]
 80432d6:	3b02      	subs	r3, #2
 80432d8:	881b      	ldrh	r3, [r3, #0]
 80432da:	b29a      	uxth	r2, r3
 80432dc:	683b      	ldr	r3, [r7, #0]
 80432de:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80432e0:	2300      	movs	r3, #0
 80432e2:	82fb      	strh	r3, [r7, #22]

      break;
 80432e4:	e007      	b.n	80432f6 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80432e6:	693b      	ldr	r3, [r7, #16]
 80432e8:	3b04      	subs	r3, #4
 80432ea:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80432ec:	68bb      	ldr	r3, [r7, #8]
 80432ee:	3302      	adds	r3, #2
 80432f0:	693a      	ldr	r2, [r7, #16]
 80432f2:	429a      	cmp	r2, r3
 80432f4:	d8e7      	bhi.n	80432c6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80432f6:	8afb      	ldrh	r3, [r7, #22]
}
 80432f8:	4618      	mov	r0, r3
 80432fa:	3718      	adds	r7, #24
 80432fc:	46bd      	mov	sp, r7
 80432fe:	bd80      	pop	{r7, pc}
 8043300:	080a0000 	.word	0x080a0000
 8043304:	0809fffe 	.word	0x0809fffe

08043308 <EE_WriteVariable>:


uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8043308:	b580      	push	{r7, lr}
 804330a:	b084      	sub	sp, #16
 804330c:	af00      	add	r7, sp, #0
 804330e:	4603      	mov	r3, r0
 8043310:	460a      	mov	r2, r1
 8043312:	80fb      	strh	r3, [r7, #6]
 8043314:	4613      	mov	r3, r2
 8043316:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8043318:	2300      	movs	r3, #0
 804331a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 804331c:	88ba      	ldrh	r2, [r7, #4]
 804331e:	88fb      	ldrh	r3, [r7, #6]
 8043320:	4611      	mov	r1, r2
 8043322:	4618      	mov	r0, r3
 8043324:	f000 f8aa 	bl	804347c <EE_VerifyPageFullWriteVariable>
 8043328:	4603      	mov	r3, r0
 804332a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 804332c:	89fb      	ldrh	r3, [r7, #14]
 804332e:	2b80      	cmp	r3, #128	; 0x80
 8043330:	d107      	bne.n	8043342 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8043332:	88ba      	ldrh	r2, [r7, #4]
 8043334:	88fb      	ldrh	r3, [r7, #6]
 8043336:	4611      	mov	r1, r2
 8043338:	4618      	mov	r0, r3
 804333a:	f000 f901 	bl	8043540 <EE_PageTransfer>
 804333e:	4603      	mov	r3, r0
 8043340:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8043342:	89fb      	ldrh	r3, [r7, #14]
}
 8043344:	4618      	mov	r0, r3
 8043346:	3710      	adds	r7, #16
 8043348:	46bd      	mov	sp, r7
 804334a:	bd80      	pop	{r7, pc}

0804334c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 804334c:	b580      	push	{r7, lr}
 804334e:	b088      	sub	sp, #32
 8043350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8043352:	2300      	movs	r3, #0
 8043354:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8043356:	2300      	movs	r3, #0
 8043358:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 804335a:	2300      	movs	r3, #0
 804335c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 804335e:	2309      	movs	r3, #9
 8043360:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8043362:	2301      	movs	r3, #1
 8043364:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8043366:	2301      	movs	r3, #1
 8043368:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 804336a:	481f      	ldr	r0, [pc, #124]	; (80433e8 <EE_Format+0x9c>)
 804336c:	f7ff ff5e 	bl	804322c <EE_VerifyPageFullyErased>
 8043370:	4603      	mov	r3, r0
 8043372:	2b00      	cmp	r3, #0
 8043374:	d10d      	bne.n	8043392 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8043376:	f107 0218 	add.w	r2, r7, #24
 804337a:	1d3b      	adds	r3, r7, #4
 804337c:	4611      	mov	r1, r2
 804337e:	4618      	mov	r0, r3
 8043380:	f001 ffd8 	bl	8045334 <HAL_FLASHEx_Erase>
 8043384:	4603      	mov	r3, r0
 8043386:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8043388:	7ffb      	ldrb	r3, [r7, #31]
 804338a:	2b00      	cmp	r3, #0
 804338c:	d001      	beq.n	8043392 <EE_Format+0x46>
    {
      return FlashStatus;
 804338e:	7ffb      	ldrb	r3, [r7, #31]
 8043390:	e025      	b.n	80433de <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8043392:	f04f 0200 	mov.w	r2, #0
 8043396:	f04f 0300 	mov.w	r3, #0
 804339a:	4913      	ldr	r1, [pc, #76]	; (80433e8 <EE_Format+0x9c>)
 804339c:	2001      	movs	r0, #1
 804339e:	f001 fe13 	bl	8044fc8 <HAL_FLASH_Program>
 80433a2:	4603      	mov	r3, r0
 80433a4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80433a6:	7ffb      	ldrb	r3, [r7, #31]
 80433a8:	2b00      	cmp	r3, #0
 80433aa:	d001      	beq.n	80433b0 <EE_Format+0x64>
  {
    return FlashStatus;
 80433ac:	7ffb      	ldrb	r3, [r7, #31]
 80433ae:	e016      	b.n	80433de <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80433b0:	230a      	movs	r3, #10
 80433b2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80433b4:	480d      	ldr	r0, [pc, #52]	; (80433ec <EE_Format+0xa0>)
 80433b6:	f7ff ff39 	bl	804322c <EE_VerifyPageFullyErased>
 80433ba:	4603      	mov	r3, r0
 80433bc:	2b00      	cmp	r3, #0
 80433be:	d10d      	bne.n	80433dc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80433c0:	f107 0218 	add.w	r2, r7, #24
 80433c4:	1d3b      	adds	r3, r7, #4
 80433c6:	4611      	mov	r1, r2
 80433c8:	4618      	mov	r0, r3
 80433ca:	f001 ffb3 	bl	8045334 <HAL_FLASHEx_Erase>
 80433ce:	4603      	mov	r3, r0
 80433d0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80433d2:	7ffb      	ldrb	r3, [r7, #31]
 80433d4:	2b00      	cmp	r3, #0
 80433d6:	d001      	beq.n	80433dc <EE_Format+0x90>
    {
      return FlashStatus;
 80433d8:	7ffb      	ldrb	r3, [r7, #31]
 80433da:	e000      	b.n	80433de <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80433dc:	2300      	movs	r3, #0
}
 80433de:	4618      	mov	r0, r3
 80433e0:	3720      	adds	r7, #32
 80433e2:	46bd      	mov	sp, r7
 80433e4:	bd80      	pop	{r7, pc}
 80433e6:	bf00      	nop
 80433e8:	080a0000 	.word	0x080a0000
 80433ec:	080c0000 	.word	0x080c0000

080433f0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80433f0:	b480      	push	{r7}
 80433f2:	b085      	sub	sp, #20
 80433f4:	af00      	add	r7, sp, #0
 80433f6:	4603      	mov	r3, r0
 80433f8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80433fa:	2306      	movs	r3, #6
 80433fc:	81fb      	strh	r3, [r7, #14]
 80433fe:	2306      	movs	r3, #6
 8043400:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8043402:	4b1c      	ldr	r3, [pc, #112]	; (8043474 <EE_FindValidPage+0x84>)
 8043404:	881b      	ldrh	r3, [r3, #0]
 8043406:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8043408:	4b1b      	ldr	r3, [pc, #108]	; (8043478 <EE_FindValidPage+0x88>)
 804340a:	881b      	ldrh	r3, [r3, #0]
 804340c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 804340e:	79fb      	ldrb	r3, [r7, #7]
 8043410:	2b00      	cmp	r3, #0
 8043412:	d01b      	beq.n	804344c <EE_FindValidPage+0x5c>
 8043414:	2b01      	cmp	r3, #1
 8043416:	d125      	bne.n	8043464 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8043418:	89bb      	ldrh	r3, [r7, #12]
 804341a:	2b00      	cmp	r3, #0
 804341c:	d108      	bne.n	8043430 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 804341e:	89fb      	ldrh	r3, [r7, #14]
 8043420:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8043424:	4293      	cmp	r3, r2
 8043426:	d101      	bne.n	804342c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8043428:	2300      	movs	r3, #0
 804342a:	e01c      	b.n	8043466 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 804342c:	2301      	movs	r3, #1
 804342e:	e01a      	b.n	8043466 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8043430:	89fb      	ldrh	r3, [r7, #14]
 8043432:	2b00      	cmp	r3, #0
 8043434:	d108      	bne.n	8043448 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8043436:	89bb      	ldrh	r3, [r7, #12]
 8043438:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 804343c:	4293      	cmp	r3, r2
 804343e:	d101      	bne.n	8043444 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8043440:	2301      	movs	r3, #1
 8043442:	e010      	b.n	8043466 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8043444:	2300      	movs	r3, #0
 8043446:	e00e      	b.n	8043466 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8043448:	23ab      	movs	r3, #171	; 0xab
 804344a:	e00c      	b.n	8043466 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 804344c:	89fb      	ldrh	r3, [r7, #14]
 804344e:	2b00      	cmp	r3, #0
 8043450:	d101      	bne.n	8043456 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8043452:	2300      	movs	r3, #0
 8043454:	e007      	b.n	8043466 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8043456:	89bb      	ldrh	r3, [r7, #12]
 8043458:	2b00      	cmp	r3, #0
 804345a:	d101      	bne.n	8043460 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 804345c:	2301      	movs	r3, #1
 804345e:	e002      	b.n	8043466 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8043460:	23ab      	movs	r3, #171	; 0xab
 8043462:	e000      	b.n	8043466 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8043464:	2300      	movs	r3, #0
  }
}
 8043466:	4618      	mov	r0, r3
 8043468:	3714      	adds	r7, #20
 804346a:	46bd      	mov	sp, r7
 804346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043470:	4770      	bx	lr
 8043472:	bf00      	nop
 8043474:	080a0000 	.word	0x080a0000
 8043478:	080c0000 	.word	0x080c0000

0804347c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 804347c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8043480:	b086      	sub	sp, #24
 8043482:	af00      	add	r7, sp, #0
 8043484:	4603      	mov	r3, r0
 8043486:	460a      	mov	r2, r1
 8043488:	80fb      	strh	r3, [r7, #6]
 804348a:	4613      	mov	r3, r2
 804348c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 804348e:	2300      	movs	r3, #0
 8043490:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8043492:	2300      	movs	r3, #0
 8043494:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8043496:	4b27      	ldr	r3, [pc, #156]	; (8043534 <EE_VerifyPageFullWriteVariable+0xb8>)
 8043498:	617b      	str	r3, [r7, #20]
 804349a:	4b27      	ldr	r3, [pc, #156]	; (8043538 <EE_VerifyPageFullWriteVariable+0xbc>)
 804349c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 804349e:	2001      	movs	r0, #1
 80434a0:	f7ff ffa6 	bl	80433f0 <EE_FindValidPage>
 80434a4:	4603      	mov	r3, r0
 80434a6:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80434a8:	8a3b      	ldrh	r3, [r7, #16]
 80434aa:	2bab      	cmp	r3, #171	; 0xab
 80434ac:	d101      	bne.n	80434b2 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80434ae:	23ab      	movs	r3, #171	; 0xab
 80434b0:	e03a      	b.n	8043528 <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80434b2:	8a3b      	ldrh	r3, [r7, #16]
 80434b4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80434b8:	045b      	lsls	r3, r3, #17
 80434ba:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80434bc:	8a3b      	ldrh	r3, [r7, #16]
 80434be:	3301      	adds	r3, #1
 80434c0:	045a      	lsls	r2, r3, #17
 80434c2:	4b1e      	ldr	r3, [pc, #120]	; (804353c <EE_VerifyPageFullWriteVariable+0xc0>)
 80434c4:	4413      	add	r3, r2
 80434c6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80434c8:	e029      	b.n	804351e <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80434ca:	697b      	ldr	r3, [r7, #20]
 80434cc:	681b      	ldr	r3, [r3, #0]
 80434ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80434d2:	d121      	bne.n	8043518 <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80434d4:	88bb      	ldrh	r3, [r7, #4]
 80434d6:	2200      	movs	r2, #0
 80434d8:	461c      	mov	r4, r3
 80434da:	4615      	mov	r5, r2
 80434dc:	4622      	mov	r2, r4
 80434de:	462b      	mov	r3, r5
 80434e0:	6979      	ldr	r1, [r7, #20]
 80434e2:	2001      	movs	r0, #1
 80434e4:	f001 fd70 	bl	8044fc8 <HAL_FLASH_Program>
 80434e8:	4603      	mov	r3, r0
 80434ea:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80434ec:	7cfb      	ldrb	r3, [r7, #19]
 80434ee:	2b00      	cmp	r3, #0
 80434f0:	d002      	beq.n	80434f8 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 80434f2:	7cfb      	ldrb	r3, [r7, #19]
 80434f4:	b29b      	uxth	r3, r3
 80434f6:	e017      	b.n	8043528 <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80434f8:	697b      	ldr	r3, [r7, #20]
 80434fa:	1c99      	adds	r1, r3, #2
 80434fc:	88fb      	ldrh	r3, [r7, #6]
 80434fe:	2200      	movs	r2, #0
 8043500:	4698      	mov	r8, r3
 8043502:	4691      	mov	r9, r2
 8043504:	4642      	mov	r2, r8
 8043506:	464b      	mov	r3, r9
 8043508:	2001      	movs	r0, #1
 804350a:	f001 fd5d 	bl	8044fc8 <HAL_FLASH_Program>
 804350e:	4603      	mov	r3, r0
 8043510:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8043512:	7cfb      	ldrb	r3, [r7, #19]
 8043514:	b29b      	uxth	r3, r3
 8043516:	e007      	b.n	8043528 <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8043518:	697b      	ldr	r3, [r7, #20]
 804351a:	3304      	adds	r3, #4
 804351c:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 804351e:	697a      	ldr	r2, [r7, #20]
 8043520:	68fb      	ldr	r3, [r7, #12]
 8043522:	429a      	cmp	r2, r3
 8043524:	d3d1      	bcc.n	80434ca <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8043526:	2380      	movs	r3, #128	; 0x80
}
 8043528:	4618      	mov	r0, r3
 804352a:	3718      	adds	r7, #24
 804352c:	46bd      	mov	sp, r7
 804352e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8043532:	bf00      	nop
 8043534:	080a0000 	.word	0x080a0000
 8043538:	080c0000 	.word	0x080c0000
 804353c:	0809ffff 	.word	0x0809ffff

08043540 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8043540:	b580      	push	{r7, lr}
 8043542:	b08c      	sub	sp, #48	; 0x30
 8043544:	af00      	add	r7, sp, #0
 8043546:	4603      	mov	r3, r0
 8043548:	460a      	mov	r2, r1
 804354a:	80fb      	strh	r3, [r7, #6]
 804354c:	4613      	mov	r3, r2
 804354e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8043550:	2300      	movs	r3, #0
 8043552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8043556:	4b55      	ldr	r3, [pc, #340]	; (80436ac <EE_PageTransfer+0x16c>)
 8043558:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 804355a:	2300      	movs	r3, #0
 804355c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 804355e:	2300      	movs	r3, #0
 8043560:	84bb      	strh	r3, [r7, #36]	; 0x24
 8043562:	2300      	movs	r3, #0
 8043564:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8043566:	2300      	movs	r3, #0
 8043568:	847b      	strh	r3, [r7, #34]	; 0x22
 804356a:	2300      	movs	r3, #0
 804356c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 804356e:	2300      	movs	r3, #0
 8043570:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8043572:	2000      	movs	r0, #0
 8043574:	f7ff ff3c 	bl	80433f0 <EE_FindValidPage>
 8043578:	4603      	mov	r3, r0
 804357a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 804357c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804357e:	2b01      	cmp	r3, #1
 8043580:	d104      	bne.n	804358c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8043582:	4b4a      	ldr	r3, [pc, #296]	; (80436ac <EE_PageTransfer+0x16c>)
 8043584:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8043586:	230a      	movs	r3, #10
 8043588:	857b      	strh	r3, [r7, #42]	; 0x2a
 804358a:	e009      	b.n	80435a0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 804358c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804358e:	2b00      	cmp	r3, #0
 8043590:	d104      	bne.n	804359c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8043592:	4b47      	ldr	r3, [pc, #284]	; (80436b0 <EE_PageTransfer+0x170>)
 8043594:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8043596:	2309      	movs	r3, #9
 8043598:	857b      	strh	r3, [r7, #42]	; 0x2a
 804359a:	e001      	b.n	80435a0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 804359c:	23ab      	movs	r3, #171	; 0xab
 804359e:	e080      	b.n	80436a2 <EE_PageTransfer+0x162>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80435a0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80435a4:	f04f 0300 	mov.w	r3, #0
 80435a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80435aa:	2001      	movs	r0, #1
 80435ac:	f001 fd0c 	bl	8044fc8 <HAL_FLASH_Program>
 80435b0:	4603      	mov	r3, r0
 80435b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80435b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80435ba:	2b00      	cmp	r3, #0
 80435bc:	d003      	beq.n	80435c6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80435be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80435c2:	b29b      	uxth	r3, r3
 80435c4:	e06d      	b.n	80436a2 <EE_PageTransfer+0x162>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80435c6:	88ba      	ldrh	r2, [r7, #4]
 80435c8:	88fb      	ldrh	r3, [r7, #6]
 80435ca:	4611      	mov	r1, r2
 80435cc:	4618      	mov	r0, r3
 80435ce:	f7ff ff55 	bl	804347c <EE_VerifyPageFullWriteVariable>
 80435d2:	4603      	mov	r3, r0
 80435d4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80435d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80435d8:	2b00      	cmp	r3, #0
 80435da:	d001      	beq.n	80435e0 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80435dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80435de:	e060      	b.n	80436a2 <EE_PageTransfer+0x162>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 80435e0:	2300      	movs	r3, #0
 80435e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80435e4:	e029      	b.n	804363a <EE_PageTransfer+0xfa>
  {
    if ( (KP_VirtAddr+VarIdx) != VirtAddress)  /* Check each variable except the one passed as parameter */
 80435e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80435e8:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 80435ec:	33a0      	adds	r3, #160	; 0xa0
 80435ee:	88fa      	ldrh	r2, [r7, #6]
 80435f0:	4293      	cmp	r3, r2
 80435f2:	d01f      	beq.n	8043634 <EE_PageTransfer+0xf4>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 80435f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80435f6:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80435fa:	3b60      	subs	r3, #96	; 0x60
 80435fc:	b29b      	uxth	r3, r3
 80435fe:	492d      	ldr	r1, [pc, #180]	; (80436b4 <EE_PageTransfer+0x174>)
 8043600:	4618      	mov	r0, r3
 8043602:	f7ff fe39 	bl	8043278 <EE_ReadVariable>
 8043606:	4603      	mov	r3, r0
 8043608:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 804360a:	8c3b      	ldrh	r3, [r7, #32]
 804360c:	2b01      	cmp	r3, #1
 804360e:	d011      	beq.n	8043634 <EE_PageTransfer+0xf4>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8043610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8043612:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8043616:	3b60      	subs	r3, #96	; 0x60
 8043618:	b29b      	uxth	r3, r3
 804361a:	4a26      	ldr	r2, [pc, #152]	; (80436b4 <EE_PageTransfer+0x174>)
 804361c:	8812      	ldrh	r2, [r2, #0]
 804361e:	4611      	mov	r1, r2
 8043620:	4618      	mov	r0, r3
 8043622:	f7ff ff2b 	bl	804347c <EE_VerifyPageFullWriteVariable>
 8043626:	4603      	mov	r3, r0
 8043628:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 804362a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804362c:	2b00      	cmp	r3, #0
 804362e:	d001      	beq.n	8043634 <EE_PageTransfer+0xf4>
        {
          return EepromStatus;
 8043630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8043632:	e036      	b.n	80436a2 <EE_PageTransfer+0x162>
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8043634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8043636:	3301      	adds	r3, #1
 8043638:	853b      	strh	r3, [r7, #40]	; 0x28
 804363a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804363c:	2b0b      	cmp	r3, #11
 804363e:	d9d2      	bls.n	80435e6 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8043640:	2300      	movs	r3, #0
 8043642:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8043644:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8043646:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8043648:	2301      	movs	r3, #1
 804364a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 804364c:	2301      	movs	r3, #1
 804364e:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8043650:	f107 021c 	add.w	r2, r7, #28
 8043654:	f107 0308 	add.w	r3, r7, #8
 8043658:	4611      	mov	r1, r2
 804365a:	4618      	mov	r0, r3
 804365c:	f001 fe6a 	bl	8045334 <HAL_FLASHEx_Erase>
 8043660:	4603      	mov	r3, r0
 8043662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8043666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804366a:	2b00      	cmp	r3, #0
 804366c:	d003      	beq.n	8043676 <EE_PageTransfer+0x136>
  {
    return FlashStatus;
 804366e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043672:	b29b      	uxth	r3, r3
 8043674:	e015      	b.n	80436a2 <EE_PageTransfer+0x162>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8043676:	f04f 0200 	mov.w	r2, #0
 804367a:	f04f 0300 	mov.w	r3, #0
 804367e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8043680:	2001      	movs	r0, #1
 8043682:	f001 fca1 	bl	8044fc8 <HAL_FLASH_Program>
 8043686:	4603      	mov	r3, r0
 8043688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 804368c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043690:	2b00      	cmp	r3, #0
 8043692:	d003      	beq.n	804369c <EE_PageTransfer+0x15c>
  {
    return FlashStatus;
 8043694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043698:	b29b      	uxth	r3, r3
 804369a:	e002      	b.n	80436a2 <EE_PageTransfer+0x162>
  }

  /* Return last operation flash status */
  return FlashStatus;
 804369c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80436a0:	b29b      	uxth	r3, r3
}
 80436a2:	4618      	mov	r0, r3
 80436a4:	3730      	adds	r7, #48	; 0x30
 80436a6:	46bd      	mov	sp, r7
 80436a8:	bd80      	pop	{r7, pc}
 80436aa:	bf00      	nop
 80436ac:	080a0000 	.word	0x080a0000
 80436b0:	080c0000 	.word	0x080c0000
 80436b4:	2000020c 	.word	0x2000020c

080436b8 <FEE_WriteCtrlParams>:
 HAL_FLASH_Lock();
}


HAL_StatusTypeDef FEE_WriteCtrlParams(msTempControlParams* p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 80436b8:	b580      	push	{r7, lr}
 80436ba:	b088      	sub	sp, #32
 80436bc:	af00      	add	r7, sp, #0
 80436be:	6078      	str	r0, [r7, #4]
 80436c0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result = HAL_OK;
 80436c2:	2300      	movs	r3, #0
 80436c4:	77fb      	strb	r3, [r7, #31]
	uint8_t ui8_bank1Percentage = p_CtrlParams->ui8_bank1Percentage;
 80436c6:	687b      	ldr	r3, [r7, #4]
 80436c8:	781b      	ldrb	r3, [r3, #0]
 80436ca:	77bb      	strb	r3, [r7, #30]
	uint8_t ui8_bank2Percentage = p_CtrlParams->ui8_bank2Percentage;
 80436cc:	687b      	ldr	r3, [r7, #4]
 80436ce:	785b      	ldrb	r3, [r3, #1]
 80436d0:	777b      	strb	r3, [r7, #29]
	uint16_t u16_KP = (uint16_t)p_ReflowParameters->KP;
 80436d2:	683b      	ldr	r3, [r7, #0]
 80436d4:	edd3 7a00 	vldr	s15, [r3]
 80436d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80436dc:	ee17 3a90 	vmov	r3, s15
 80436e0:	837b      	strh	r3, [r7, #26]
	uint16_t u16_KI = (uint16_t)p_ReflowParameters->KI;
 80436e2:	683b      	ldr	r3, [r7, #0]
 80436e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80436e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80436ec:	ee17 3a90 	vmov	r3, s15
 80436f0:	833b      	strh	r3, [r7, #24]
	uint16_t u16_KD = (uint16_t)p_ReflowParameters->KD;
 80436f2:	683b      	ldr	r3, [r7, #0]
 80436f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80436f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80436fc:	ee17 3a90 	vmov	r3, s15
 8043700:	82fb      	strh	r3, [r7, #22]
	uint16_t u16_firstHeatUpRate = (uint16_t)(p_ReflowParameters->firstHeatUpRate * 100.0);
 8043702:	683b      	ldr	r3, [r7, #0]
 8043704:	68db      	ldr	r3, [r3, #12]
 8043706:	4618      	mov	r0, r3
 8043708:	f7fc ff1e 	bl	8040548 <__aeabi_f2d>
 804370c:	f04f 0200 	mov.w	r2, #0
 8043710:	4b5f      	ldr	r3, [pc, #380]	; (8043890 <FEE_WriteCtrlParams+0x1d8>)
 8043712:	f7fc ff71 	bl	80405f8 <__aeabi_dmul>
 8043716:	4602      	mov	r2, r0
 8043718:	460b      	mov	r3, r1
 804371a:	4610      	mov	r0, r2
 804371c:	4619      	mov	r1, r3
 804371e:	f7fd fa43 	bl	8040ba8 <__aeabi_d2uiz>
 8043722:	4603      	mov	r3, r0
 8043724:	82bb      	strh	r3, [r7, #20]
	uint16_t u16_secondHeatUpRate = (uint16_t)(p_ReflowParameters->secondHeatUpRate * 100.0);
 8043726:	683b      	ldr	r3, [r7, #0]
 8043728:	699b      	ldr	r3, [r3, #24]
 804372a:	4618      	mov	r0, r3
 804372c:	f7fc ff0c 	bl	8040548 <__aeabi_f2d>
 8043730:	f04f 0200 	mov.w	r2, #0
 8043734:	4b56      	ldr	r3, [pc, #344]	; (8043890 <FEE_WriteCtrlParams+0x1d8>)
 8043736:	f7fc ff5f 	bl	80405f8 <__aeabi_dmul>
 804373a:	4602      	mov	r2, r0
 804373c:	460b      	mov	r3, r1
 804373e:	4610      	mov	r0, r2
 8043740:	4619      	mov	r1, r3
 8043742:	f7fd fa31 	bl	8040ba8 <__aeabi_d2uiz>
 8043746:	4603      	mov	r3, r0
 8043748:	827b      	strh	r3, [r7, #18]
	uint16_t u16_SoakTime = (uint16_t)p_ReflowParameters->SoakTime;
 804374a:	683b      	ldr	r3, [r7, #0]
 804374c:	695b      	ldr	r3, [r3, #20]
 804374e:	823b      	strh	r3, [r7, #16]
	uint16_t u16_SoakTemperature = (uint16_t)p_ReflowParameters->SoakTempeture;
 8043750:	683b      	ldr	r3, [r7, #0]
 8043752:	691b      	ldr	r3, [r3, #16]
 8043754:	81fb      	strh	r3, [r7, #14]
	uint16_t u16_ReflowTime = (uint16_t)p_ReflowParameters->ReflowTime;
 8043756:	683b      	ldr	r3, [r7, #0]
 8043758:	6a1b      	ldr	r3, [r3, #32]
 804375a:	81bb      	strh	r3, [r7, #12]
	uint16_t u16_ReflowTemperature = (uint16_t)p_ReflowParameters->ReflowTempeture;
 804375c:	683b      	ldr	r3, [r7, #0]
 804375e:	69db      	ldr	r3, [r3, #28]
 8043760:	817b      	strh	r3, [r7, #10]


	if((EE_WriteVariable(ui8_bank1Percentage_VirtAddr,(uint16_t)ui8_bank1Percentage)) != HAL_OK)
 8043762:	7fbb      	ldrb	r3, [r7, #30]
 8043764:	b29b      	uxth	r3, r3
 8043766:	4619      	mov	r1, r3
 8043768:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 804376c:	f7ff fdcc 	bl	8043308 <EE_WriteVariable>
 8043770:	4603      	mov	r3, r0
 8043772:	2b00      	cmp	r3, #0
 8043774:	d003      	beq.n	804377e <FEE_WriteCtrlParams+0xc6>
	{
		result = HAL_ERROR;
 8043776:	2301      	movs	r3, #1
 8043778:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 804377a:	f000 fec5 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(ui8_bank2Percentage_VirtAddr,  (uint16_t)ui8_bank2Percentage)) != HAL_OK)
 804377e:	7f7b      	ldrb	r3, [r7, #29]
 8043780:	b29b      	uxth	r3, r3
 8043782:	4619      	mov	r1, r3
 8043784:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 8043788:	f7ff fdbe 	bl	8043308 <EE_WriteVariable>
 804378c:	4603      	mov	r3, r0
 804378e:	2b00      	cmp	r3, #0
 8043790:	d003      	beq.n	804379a <FEE_WriteCtrlParams+0xe2>
	{
		result = HAL_ERROR;
 8043792:	2301      	movs	r3, #1
 8043794:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043796:	f000 feb7 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(KP_VirtAddr,  u16_KP)) != HAL_OK)
 804379a:	8b7b      	ldrh	r3, [r7, #26]
 804379c:	4619      	mov	r1, r3
 804379e:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 80437a2:	f7ff fdb1 	bl	8043308 <EE_WriteVariable>
 80437a6:	4603      	mov	r3, r0
 80437a8:	2b00      	cmp	r3, #0
 80437aa:	d003      	beq.n	80437b4 <FEE_WriteCtrlParams+0xfc>
	{
		result = HAL_ERROR;
 80437ac:	2301      	movs	r3, #1
 80437ae:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437b0:	f000 feaa 	bl	8044508 <Error_Handler>
	}
	if((EE_WriteVariable(KI_VirtAddr,  u16_KI)) != HAL_OK)
 80437b4:	8b3b      	ldrh	r3, [r7, #24]
 80437b6:	4619      	mov	r1, r3
 80437b8:	f64a 20a9 	movw	r0, #43689	; 0xaaa9
 80437bc:	f7ff fda4 	bl	8043308 <EE_WriteVariable>
 80437c0:	4603      	mov	r3, r0
 80437c2:	2b00      	cmp	r3, #0
 80437c4:	d003      	beq.n	80437ce <FEE_WriteCtrlParams+0x116>
	{
		result = HAL_ERROR;
 80437c6:	2301      	movs	r3, #1
 80437c8:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437ca:	f000 fe9d 	bl	8044508 <Error_Handler>
	}
	if((EE_WriteVariable(KD_VirtAddr,  u16_KD)) != HAL_OK)
 80437ce:	8afb      	ldrh	r3, [r7, #22]
 80437d0:	4619      	mov	r1, r3
 80437d2:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 80437d6:	f7ff fd97 	bl	8043308 <EE_WriteVariable>
 80437da:	4603      	mov	r3, r0
 80437dc:	2b00      	cmp	r3, #0
 80437de:	d003      	beq.n	80437e8 <FEE_WriteCtrlParams+0x130>
	{
		result = HAL_ERROR;
 80437e0:	2301      	movs	r3, #1
 80437e2:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437e4:	f000 fe90 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(firstHeatUpRate_VirtAddr,  (uint16_t)u16_firstHeatUpRate)) != HAL_OK)
 80437e8:	8abb      	ldrh	r3, [r7, #20]
 80437ea:	4619      	mov	r1, r3
 80437ec:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 80437f0:	f7ff fd8a 	bl	8043308 <EE_WriteVariable>
 80437f4:	4603      	mov	r3, r0
 80437f6:	2b00      	cmp	r3, #0
 80437f8:	d003      	beq.n	8043802 <FEE_WriteCtrlParams+0x14a>
	{
		result = HAL_ERROR;
 80437fa:	2301      	movs	r3, #1
 80437fc:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437fe:	f000 fe83 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(secondHeatUpRate_VirtAddr, (uint16_t) u16_secondHeatUpRate)) != HAL_OK)
 8043802:	8a7b      	ldrh	r3, [r7, #18]
 8043804:	4619      	mov	r1, r3
 8043806:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 804380a:	f7ff fd7d 	bl	8043308 <EE_WriteVariable>
 804380e:	4603      	mov	r3, r0
 8043810:	2b00      	cmp	r3, #0
 8043812:	d003      	beq.n	804381c <FEE_WriteCtrlParams+0x164>
	{
		result = HAL_ERROR;
 8043814:	2301      	movs	r3, #1
 8043816:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043818:	f000 fe76 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(SoakTime_VirtAddr, (uint16_t) u16_SoakTime)) != HAL_OK)
 804381c:	8a3b      	ldrh	r3, [r7, #16]
 804381e:	4619      	mov	r1, r3
 8043820:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 8043824:	f7ff fd70 	bl	8043308 <EE_WriteVariable>
 8043828:	4603      	mov	r3, r0
 804382a:	2b00      	cmp	r3, #0
 804382c:	d003      	beq.n	8043836 <FEE_WriteCtrlParams+0x17e>
	{
		result = HAL_ERROR;
 804382e:	2301      	movs	r3, #1
 8043830:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043832:	f000 fe69 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(SoakTempeture_VirtAddr, (uint16_t) u16_SoakTemperature)) != HAL_OK)
 8043836:	89fb      	ldrh	r3, [r7, #14]
 8043838:	4619      	mov	r1, r3
 804383a:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 804383e:	f7ff fd63 	bl	8043308 <EE_WriteVariable>
 8043842:	4603      	mov	r3, r0
 8043844:	2b00      	cmp	r3, #0
 8043846:	d003      	beq.n	8043850 <FEE_WriteCtrlParams+0x198>
	{
		result = HAL_ERROR;
 8043848:	2301      	movs	r3, #1
 804384a:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 804384c:	f000 fe5c 	bl	8044508 <Error_Handler>
	}
	if((EE_WriteVariable(ReflowTime_VirtAddr, (uint16_t) u16_ReflowTime)) != HAL_OK)
 8043850:	89bb      	ldrh	r3, [r7, #12]
 8043852:	4619      	mov	r1, r3
 8043854:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 8043858:	f7ff fd56 	bl	8043308 <EE_WriteVariable>
 804385c:	4603      	mov	r3, r0
 804385e:	2b00      	cmp	r3, #0
 8043860:	d003      	beq.n	804386a <FEE_WriteCtrlParams+0x1b2>
	{
		result = HAL_ERROR;
 8043862:	2301      	movs	r3, #1
 8043864:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043866:	f000 fe4f 	bl	8044508 <Error_Handler>
	}

	if((EE_WriteVariable(ReflowTempeture_VirtAddr, (uint16_t) u16_ReflowTemperature)) != HAL_OK)
 804386a:	897b      	ldrh	r3, [r7, #10]
 804386c:	4619      	mov	r1, r3
 804386e:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 8043872:	f7ff fd49 	bl	8043308 <EE_WriteVariable>
 8043876:	4603      	mov	r3, r0
 8043878:	2b00      	cmp	r3, #0
 804387a:	d003      	beq.n	8043884 <FEE_WriteCtrlParams+0x1cc>
	{
		result = HAL_ERROR;
 804387c:	2301      	movs	r3, #1
 804387e:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043880:	f000 fe42 	bl	8044508 <Error_Handler>
	}

	return result;
 8043884:	7ffb      	ldrb	r3, [r7, #31]
}
 8043886:	4618      	mov	r0, r3
 8043888:	3720      	adds	r7, #32
 804388a:	46bd      	mov	sp, r7
 804388c:	bd80      	pop	{r7, pc}
 804388e:	bf00      	nop
 8043890:	40590000 	.word	0x40590000

08043894 <FEE_ReadCtrlParams>:

HAL_StatusTypeDef FEE_ReadCtrlParams(msTempControlParams* p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 8043894:	b580      	push	{r7, lr}
 8043896:	b08e      	sub	sp, #56	; 0x38
 8043898:	af00      	add	r7, sp, #0
 804389a:	6078      	str	r0, [r7, #4]
 804389c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result = HAL_OK;
 804389e:	2300      	movs	r3, #0
 80438a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t *p_bank1Percentage =	(uint16_t*)&p_CtrlParams->ui8_bank1Percentage;
 80438a4:	687b      	ldr	r3, [r7, #4]
 80438a6:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t *p_bank2Percentage =	(uint16_t*)&p_CtrlParams->ui8_bank2Percentage;
 80438a8:	687b      	ldr	r3, [r7, #4]
 80438aa:	3301      	adds	r3, #1
 80438ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *p_KP = 				(uint16_t*)&p_ReflowParameters->KP;
 80438ae:	683b      	ldr	r3, [r7, #0]
 80438b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t *p_KI = 				(uint16_t*)&p_ReflowParameters->KI;
 80438b2:	683b      	ldr	r3, [r7, #0]
 80438b4:	3304      	adds	r3, #4
 80438b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t *p_KD = 				(uint16_t*)&p_ReflowParameters->KD;
 80438b8:	683b      	ldr	r3, [r7, #0]
 80438ba:	3308      	adds	r3, #8
 80438bc:	623b      	str	r3, [r7, #32]
	uint16_t *p_firstHeatUpRate =	(uint16_t*)&p_ReflowParameters->firstHeatUpRate;
 80438be:	683b      	ldr	r3, [r7, #0]
 80438c0:	330c      	adds	r3, #12
 80438c2:	61fb      	str	r3, [r7, #28]
	uint16_t *p_secondHeatUpRate =	(uint16_t*)&p_ReflowParameters->secondHeatUpRate;
 80438c4:	683b      	ldr	r3, [r7, #0]
 80438c6:	3318      	adds	r3, #24
 80438c8:	61bb      	str	r3, [r7, #24]
	uint16_t *p_SoakTime = 			(uint16_t*)&p_ReflowParameters->SoakTime;
 80438ca:	683b      	ldr	r3, [r7, #0]
 80438cc:	3314      	adds	r3, #20
 80438ce:	617b      	str	r3, [r7, #20]
	uint16_t *p_SoakTemperature = 	(uint16_t*)&p_ReflowParameters->SoakTempeture ;
 80438d0:	683b      	ldr	r3, [r7, #0]
 80438d2:	3310      	adds	r3, #16
 80438d4:	613b      	str	r3, [r7, #16]
	uint16_t *p_ReflowTime = 		(uint16_t*)&p_ReflowParameters->ReflowTime;
 80438d6:	683b      	ldr	r3, [r7, #0]
 80438d8:	3320      	adds	r3, #32
 80438da:	60fb      	str	r3, [r7, #12]
	uint16_t *p_ReflowTemperature = (uint16_t*)&p_ReflowParameters->ReflowTempeture ;
 80438dc:	683b      	ldr	r3, [r7, #0]
 80438de:	331c      	adds	r3, #28
 80438e0:	60bb      	str	r3, [r7, #8]


	/*NULL PTR Check*/
	if( (NULL == p_bank1Percentage) || (NULL == p_bank2Percentage) || (NULL == p_KP) || (NULL == p_firstHeatUpRate) || (NULL == p_secondHeatUpRate) ||
 80438e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80438e4:	2b00      	cmp	r3, #0
 80438e6:	d017      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 80438e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80438ea:	2b00      	cmp	r3, #0
 80438ec:	d014      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 80438ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80438f0:	2b00      	cmp	r3, #0
 80438f2:	d011      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 80438f4:	69fb      	ldr	r3, [r7, #28]
 80438f6:	2b00      	cmp	r3, #0
 80438f8:	d00e      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 80438fa:	69bb      	ldr	r3, [r7, #24]
 80438fc:	2b00      	cmp	r3, #0
 80438fe:	d00b      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 8043900:	697b      	ldr	r3, [r7, #20]
 8043902:	2b00      	cmp	r3, #0
 8043904:	d008      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
			 (NULL == p_SoakTime) ||  (NULL == p_SoakTemperature) || (NULL == p_ReflowTime) || (NULL == p_ReflowTemperature) )
 8043906:	693b      	ldr	r3, [r7, #16]
 8043908:	2b00      	cmp	r3, #0
 804390a:	d005      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 804390c:	68fb      	ldr	r3, [r7, #12]
 804390e:	2b00      	cmp	r3, #0
 8043910:	d002      	beq.n	8043918 <FEE_ReadCtrlParams+0x84>
 8043912:	68bb      	ldr	r3, [r7, #8]
 8043914:	2b00      	cmp	r3, #0
 8043916:	d102      	bne.n	804391e <FEE_ReadCtrlParams+0x8a>
	{
		result = HAL_ERROR;
 8043918:	2301      	movs	r3, #1
 804391a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{

	}


	 if((EE_ReadVariable(ui8_bank1Percentage_VirtAddr, p_bank1Percentage)) != HAL_OK)
 804391e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8043920:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 8043924:	f7ff fca8 	bl	8043278 <EE_ReadVariable>
 8043928:	4603      	mov	r3, r0
 804392a:	2b00      	cmp	r3, #0
 804392c:	d002      	beq.n	8043934 <FEE_ReadCtrlParams+0xa0>
	{
		result = HAL_ERROR;
 804392e:	2301      	movs	r3, #1
 8043930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();

	}

	if((EE_ReadVariable(ui8_bank2Percentage_VirtAddr, p_bank2Percentage)) != HAL_OK)
 8043934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8043936:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 804393a:	f7ff fc9d 	bl	8043278 <EE_ReadVariable>
 804393e:	4603      	mov	r3, r0
 8043940:	2b00      	cmp	r3, #0
 8043942:	d002      	beq.n	804394a <FEE_ReadCtrlParams+0xb6>
	{
		result = HAL_ERROR;
 8043944:	2301      	movs	r3, #1
 8043946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(KP_VirtAddr,  p_KP)) != HAL_OK)
 804394a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804394c:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 8043950:	f7ff fc92 	bl	8043278 <EE_ReadVariable>
 8043954:	4603      	mov	r3, r0
 8043956:	2b00      	cmp	r3, #0
 8043958:	d002      	beq.n	8043960 <FEE_ReadCtrlParams+0xcc>
	{
		result = HAL_ERROR;
 804395a:	2301      	movs	r3, #1
 804395c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(KI_VirtAddr,  p_KI)) != HAL_OK)
 8043960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8043962:	f64a 20a9 	movw	r0, #43689	; 0xaaa9
 8043966:	f7ff fc87 	bl	8043278 <EE_ReadVariable>
 804396a:	4603      	mov	r3, r0
 804396c:	2b00      	cmp	r3, #0
 804396e:	d002      	beq.n	8043976 <FEE_ReadCtrlParams+0xe2>
	{
		result = HAL_ERROR;
 8043970:	2301      	movs	r3, #1
 8043972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(KD_VirtAddr,  p_KD)) != HAL_OK)
 8043976:	6a39      	ldr	r1, [r7, #32]
 8043978:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 804397c:	f7ff fc7c 	bl	8043278 <EE_ReadVariable>
 8043980:	4603      	mov	r3, r0
 8043982:	2b00      	cmp	r3, #0
 8043984:	d002      	beq.n	804398c <FEE_ReadCtrlParams+0xf8>
	{
		result = HAL_ERROR;
 8043986:	2301      	movs	r3, #1
 8043988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(firstHeatUpRate_VirtAddr,  p_firstHeatUpRate)) != HAL_OK)
 804398c:	69f9      	ldr	r1, [r7, #28]
 804398e:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 8043992:	f7ff fc71 	bl	8043278 <EE_ReadVariable>
 8043996:	4603      	mov	r3, r0
 8043998:	2b00      	cmp	r3, #0
 804399a:	d002      	beq.n	80439a2 <FEE_ReadCtrlParams+0x10e>
	{
		result = HAL_ERROR;
 804399c:	2301      	movs	r3, #1
 804399e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(secondHeatUpRate_VirtAddr,  p_secondHeatUpRate)) != HAL_OK)
 80439a2:	69b9      	ldr	r1, [r7, #24]
 80439a4:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 80439a8:	f7ff fc66 	bl	8043278 <EE_ReadVariable>
 80439ac:	4603      	mov	r3, r0
 80439ae:	2b00      	cmp	r3, #0
 80439b0:	d002      	beq.n	80439b8 <FEE_ReadCtrlParams+0x124>
	{
		result = HAL_ERROR;
 80439b2:	2301      	movs	r3, #1
 80439b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(SoakTime_VirtAddr,  p_SoakTime)) != HAL_OK)
 80439b8:	6979      	ldr	r1, [r7, #20]
 80439ba:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 80439be:	f7ff fc5b 	bl	8043278 <EE_ReadVariable>
 80439c2:	4603      	mov	r3, r0
 80439c4:	2b00      	cmp	r3, #0
 80439c6:	d002      	beq.n	80439ce <FEE_ReadCtrlParams+0x13a>
	{
		result = HAL_ERROR;
 80439c8:	2301      	movs	r3, #1
 80439ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(SoakTempeture_VirtAddr,  p_SoakTemperature)) != HAL_OK)
 80439ce:	6939      	ldr	r1, [r7, #16]
 80439d0:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 80439d4:	f7ff fc50 	bl	8043278 <EE_ReadVariable>
 80439d8:	4603      	mov	r3, r0
 80439da:	2b00      	cmp	r3, #0
 80439dc:	d002      	beq.n	80439e4 <FEE_ReadCtrlParams+0x150>
	{
		result = HAL_ERROR;
 80439de:	2301      	movs	r3, #1
 80439e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(ReflowTime_VirtAddr, p_ReflowTime )) != HAL_OK)
 80439e4:	68f9      	ldr	r1, [r7, #12]
 80439e6:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 80439ea:	f7ff fc45 	bl	8043278 <EE_ReadVariable>
 80439ee:	4603      	mov	r3, r0
 80439f0:	2b00      	cmp	r3, #0
 80439f2:	d002      	beq.n	80439fa <FEE_ReadCtrlParams+0x166>
	{
		result = HAL_ERROR;
 80439f4:	2301      	movs	r3, #1
 80439f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(ReflowTempeture_VirtAddr, p_ReflowTemperature)) != HAL_OK)
 80439fa:	68b9      	ldr	r1, [r7, #8]
 80439fc:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 8043a00:	f7ff fc3a 	bl	8043278 <EE_ReadVariable>
 8043a04:	4603      	mov	r3, r0
 8043a06:	2b00      	cmp	r3, #0
 8043a08:	d002      	beq.n	8043a10 <FEE_ReadCtrlParams+0x17c>
	{
		result = HAL_ERROR;
 8043a0a:	2301      	movs	r3, #1
 8043a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if(HAL_OK == result)
 8043a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8043a14:	2b00      	cmp	r3, #0
 8043a16:	d15e      	bne.n	8043ad6 <FEE_ReadCtrlParams+0x242>
	{
		p_CtrlParams->ui8_bank1Percentage = 		(uint8_t)*p_bank1Percentage;
 8043a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043a1a:	881b      	ldrh	r3, [r3, #0]
 8043a1c:	b2da      	uxtb	r2, r3
 8043a1e:	687b      	ldr	r3, [r7, #4]
 8043a20:	701a      	strb	r2, [r3, #0]
		p_CtrlParams->ui8_bank2Percentage = 		(uint8_t)*p_bank2Percentage;
 8043a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043a24:	881b      	ldrh	r3, [r3, #0]
 8043a26:	b2da      	uxtb	r2, r3
 8043a28:	687b      	ldr	r3, [r7, #4]
 8043a2a:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP = 				(float32_t)*p_KP;
 8043a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043a2e:	881b      	ldrh	r3, [r3, #0]
 8043a30:	ee07 3a90 	vmov	s15, r3
 8043a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043a38:	683b      	ldr	r3, [r7, #0]
 8043a3a:	edc3 7a00 	vstr	s15, [r3]
		p_ReflowParameters->KI = 				(float32_t)*p_KI;
 8043a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043a40:	881b      	ldrh	r3, [r3, #0]
 8043a42:	ee07 3a90 	vmov	s15, r3
 8043a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043a4a:	683b      	ldr	r3, [r7, #0]
 8043a4c:	edc3 7a01 	vstr	s15, [r3, #4]
		p_ReflowParameters->KD = 				(float32_t)*p_KD;
 8043a50:	6a3b      	ldr	r3, [r7, #32]
 8043a52:	881b      	ldrh	r3, [r3, #0]
 8043a54:	ee07 3a90 	vmov	s15, r3
 8043a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043a5c:	683b      	ldr	r3, [r7, #0]
 8043a5e:	edc3 7a02 	vstr	s15, [r3, #8]
		p_ReflowParameters->firstHeatUpRate = 	(float32_t) ( (*p_firstHeatUpRate) / 100.0);
 8043a62:	69fb      	ldr	r3, [r7, #28]
 8043a64:	881b      	ldrh	r3, [r3, #0]
 8043a66:	4618      	mov	r0, r3
 8043a68:	f7fc fd5c 	bl	8040524 <__aeabi_i2d>
 8043a6c:	f04f 0200 	mov.w	r2, #0
 8043a70:	4b1c      	ldr	r3, [pc, #112]	; (8043ae4 <FEE_ReadCtrlParams+0x250>)
 8043a72:	f7fc feeb 	bl	804084c <__aeabi_ddiv>
 8043a76:	4602      	mov	r2, r0
 8043a78:	460b      	mov	r3, r1
 8043a7a:	4610      	mov	r0, r2
 8043a7c:	4619      	mov	r1, r3
 8043a7e:	f7fd f8b3 	bl	8040be8 <__aeabi_d2f>
 8043a82:	4602      	mov	r2, r0
 8043a84:	683b      	ldr	r3, [r7, #0]
 8043a86:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate =	(float32_t) ( (*p_secondHeatUpRate) / 100.0);
 8043a88:	69bb      	ldr	r3, [r7, #24]
 8043a8a:	881b      	ldrh	r3, [r3, #0]
 8043a8c:	4618      	mov	r0, r3
 8043a8e:	f7fc fd49 	bl	8040524 <__aeabi_i2d>
 8043a92:	f04f 0200 	mov.w	r2, #0
 8043a96:	4b13      	ldr	r3, [pc, #76]	; (8043ae4 <FEE_ReadCtrlParams+0x250>)
 8043a98:	f7fc fed8 	bl	804084c <__aeabi_ddiv>
 8043a9c:	4602      	mov	r2, r0
 8043a9e:	460b      	mov	r3, r1
 8043aa0:	4610      	mov	r0, r2
 8043aa2:	4619      	mov	r1, r3
 8043aa4:	f7fd f8a0 	bl	8040be8 <__aeabi_d2f>
 8043aa8:	4602      	mov	r2, r0
 8043aaa:	683b      	ldr	r3, [r7, #0]
 8043aac:	619a      	str	r2, [r3, #24]
		p_ReflowParameters->SoakTime = 			(uint32_t)*p_SoakTime;
 8043aae:	697b      	ldr	r3, [r7, #20]
 8043ab0:	881b      	ldrh	r3, [r3, #0]
 8043ab2:	461a      	mov	r2, r3
 8043ab4:	683b      	ldr	r3, [r7, #0]
 8043ab6:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->SoakTempeture = 	(uint32_t)*p_SoakTemperature;
 8043ab8:	693b      	ldr	r3, [r7, #16]
 8043aba:	881b      	ldrh	r3, [r3, #0]
 8043abc:	461a      	mov	r2, r3
 8043abe:	683b      	ldr	r3, [r7, #0]
 8043ac0:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->ReflowTime = 		(uint32_t)*p_ReflowTime;
 8043ac2:	68fb      	ldr	r3, [r7, #12]
 8043ac4:	881b      	ldrh	r3, [r3, #0]
 8043ac6:	461a      	mov	r2, r3
 8043ac8:	683b      	ldr	r3, [r7, #0]
 8043aca:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->ReflowTempeture = 	(uint32_t)*p_ReflowTemperature;
 8043acc:	68bb      	ldr	r3, [r7, #8]
 8043ace:	881b      	ldrh	r3, [r3, #0]
 8043ad0:	461a      	mov	r2, r3
 8043ad2:	683b      	ldr	r3, [r7, #0]
 8043ad4:	61da      	str	r2, [r3, #28]
	}

	return result;
 8043ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8043ada:	4618      	mov	r0, r3
 8043adc:	3738      	adds	r7, #56	; 0x38
 8043ade:	46bd      	mov	sp, r7
 8043ae0:	bd80      	pop	{r7, pc}
 8043ae2:	bf00      	nop
 8043ae4:	40590000 	.word	0x40590000

08043ae8 <lcd_send_cmd>:
/* Defines ------------------------------------------------------------------*/
#define  SLAVE_ADDRESS_LCD 0x4EU 	///< I2C LCD address-change according to your I2C address

/* Functions ------------------------------------------------------------------*/
void lcd_send_cmd (char cmd)
{
 8043ae8:	b580      	push	{r7, lr}
 8043aea:	b086      	sub	sp, #24
 8043aec:	af02      	add	r7, sp, #8
 8043aee:	4603      	mov	r3, r0
 8043af0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8043af2:	79fb      	ldrb	r3, [r7, #7]
 8043af4:	f023 030f 	bic.w	r3, r3, #15
 8043af8:	73fb      	strb	r3, [r7, #15]
	data_l = ( (cmd << 4) & 0xf0);
 8043afa:	79fb      	ldrb	r3, [r7, #7]
 8043afc:	011b      	lsls	r3, r3, #4
 8043afe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8043b00:	7bfb      	ldrb	r3, [r7, #15]
 8043b02:	f043 030c 	orr.w	r3, r3, #12
 8043b06:	b2db      	uxtb	r3, r3
 8043b08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8043b0a:	7bfb      	ldrb	r3, [r7, #15]
 8043b0c:	f043 0308 	orr.w	r3, r3, #8
 8043b10:	b2db      	uxtb	r3, r3
 8043b12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8043b14:	7bbb      	ldrb	r3, [r7, #14]
 8043b16:	f043 030c 	orr.w	r3, r3, #12
 8043b1a:	b2db      	uxtb	r3, r3
 8043b1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8043b1e:	7bbb      	ldrb	r3, [r7, #14]
 8043b20:	f043 0308 	orr.w	r3, r3, #8
 8043b24:	b2db      	uxtb	r3, r3
 8043b26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043b28:	f107 0208 	add.w	r2, r7, #8
 8043b2c:	2364      	movs	r3, #100	; 0x64
 8043b2e:	9300      	str	r3, [sp, #0]
 8043b30:	2304      	movs	r3, #4
 8043b32:	214e      	movs	r1, #78	; 0x4e
 8043b34:	4803      	ldr	r0, [pc, #12]	; (8043b44 <lcd_send_cmd+0x5c>)
 8043b36:	f002 f857 	bl	8045be8 <HAL_I2C_Master_Transmit>
}
 8043b3a:	bf00      	nop
 8043b3c:	3710      	adds	r7, #16
 8043b3e:	46bd      	mov	sp, r7
 8043b40:	bd80      	pop	{r7, pc}
 8043b42:	bf00      	nop
 8043b44:	200003fc 	.word	0x200003fc

08043b48 <lcd_send_data>:

void lcd_send_data (char data)
{
 8043b48:	b580      	push	{r7, lr}
 8043b4a:	b086      	sub	sp, #24
 8043b4c:	af02      	add	r7, sp, #8
 8043b4e:	4603      	mov	r3, r0
 8043b50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8043b52:	79fb      	ldrb	r3, [r7, #7]
 8043b54:	f023 030f 	bic.w	r3, r3, #15
 8043b58:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8043b5a:	79fb      	ldrb	r3, [r7, #7]
 8043b5c:	011b      	lsls	r3, r3, #4
 8043b5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8043b60:	7bfb      	ldrb	r3, [r7, #15]
 8043b62:	f043 030d 	orr.w	r3, r3, #13
 8043b66:	b2db      	uxtb	r3, r3
 8043b68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8043b6a:	7bfb      	ldrb	r3, [r7, #15]
 8043b6c:	f043 0309 	orr.w	r3, r3, #9
 8043b70:	b2db      	uxtb	r3, r3
 8043b72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8043b74:	7bbb      	ldrb	r3, [r7, #14]
 8043b76:	f043 030d 	orr.w	r3, r3, #13
 8043b7a:	b2db      	uxtb	r3, r3
 8043b7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8043b7e:	7bbb      	ldrb	r3, [r7, #14]
 8043b80:	f043 0309 	orr.w	r3, r3, #9
 8043b84:	b2db      	uxtb	r3, r3
 8043b86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043b88:	f107 0208 	add.w	r2, r7, #8
 8043b8c:	2364      	movs	r3, #100	; 0x64
 8043b8e:	9300      	str	r3, [sp, #0]
 8043b90:	2304      	movs	r3, #4
 8043b92:	214e      	movs	r1, #78	; 0x4e
 8043b94:	4803      	ldr	r0, [pc, #12]	; (8043ba4 <lcd_send_data+0x5c>)
 8043b96:	f002 f827 	bl	8045be8 <HAL_I2C_Master_Transmit>
}
 8043b9a:	bf00      	nop
 8043b9c:	3710      	adds	r7, #16
 8043b9e:	46bd      	mov	sp, r7
 8043ba0:	bd80      	pop	{r7, pc}
 8043ba2:	bf00      	nop
 8043ba4:	200003fc 	.word	0x200003fc

08043ba8 <lcd_clear>:

void lcd_clear (void)
{
 8043ba8:	b580      	push	{r7, lr}
 8043baa:	b082      	sub	sp, #8
 8043bac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8043bae:	2080      	movs	r0, #128	; 0x80
 8043bb0:	f7ff ff9a 	bl	8043ae8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8043bb4:	2300      	movs	r3, #0
 8043bb6:	607b      	str	r3, [r7, #4]
 8043bb8:	e005      	b.n	8043bc6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8043bba:	2020      	movs	r0, #32
 8043bbc:	f7ff ffc4 	bl	8043b48 <lcd_send_data>
	for (int i=0; i<70; i++)
 8043bc0:	687b      	ldr	r3, [r7, #4]
 8043bc2:	3301      	adds	r3, #1
 8043bc4:	607b      	str	r3, [r7, #4]
 8043bc6:	687b      	ldr	r3, [r7, #4]
 8043bc8:	2b45      	cmp	r3, #69	; 0x45
 8043bca:	ddf6      	ble.n	8043bba <lcd_clear+0x12>
	}
}
 8043bcc:	bf00      	nop
 8043bce:	bf00      	nop
 8043bd0:	3708      	adds	r7, #8
 8043bd2:	46bd      	mov	sp, r7
 8043bd4:	bd80      	pop	{r7, pc}

08043bd6 <lcd_clear_cmd>:

void lcd_clear_cmd(void)
{
 8043bd6:	b580      	push	{r7, lr}
 8043bd8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x0);
 8043bda:	2000      	movs	r0, #0
 8043bdc:	f7ff ff84 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(1);
 8043be0:	2001      	movs	r0, #1
 8043be2:	f001 f889 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x1);
 8043be6:	2001      	movs	r0, #1
 8043be8:	f7ff ff7e 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(1);
 8043bec:	2001      	movs	r0, #1
 8043bee:	f001 f883 	bl	8044cf8 <HAL_Delay>
}
 8043bf2:	bf00      	nop
 8043bf4:	bd80      	pop	{r7, pc}

08043bf6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8043bf6:	b580      	push	{r7, lr}
 8043bf8:	b082      	sub	sp, #8
 8043bfa:	af00      	add	r7, sp, #0
 8043bfc:	6078      	str	r0, [r7, #4]
 8043bfe:	6039      	str	r1, [r7, #0]
    switch (row)
 8043c00:	687b      	ldr	r3, [r7, #4]
 8043c02:	2b00      	cmp	r3, #0
 8043c04:	d003      	beq.n	8043c0e <lcd_put_cur+0x18>
 8043c06:	687b      	ldr	r3, [r7, #4]
 8043c08:	2b01      	cmp	r3, #1
 8043c0a:	d005      	beq.n	8043c18 <lcd_put_cur+0x22>
 8043c0c:	e009      	b.n	8043c22 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8043c0e:	683b      	ldr	r3, [r7, #0]
 8043c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043c14:	603b      	str	r3, [r7, #0]
            break;
 8043c16:	e004      	b.n	8043c22 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8043c18:	683b      	ldr	r3, [r7, #0]
 8043c1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8043c1e:	603b      	str	r3, [r7, #0]
            break;
 8043c20:	bf00      	nop
    }

    lcd_send_cmd (col);
 8043c22:	683b      	ldr	r3, [r7, #0]
 8043c24:	b2db      	uxtb	r3, r3
 8043c26:	4618      	mov	r0, r3
 8043c28:	f7ff ff5e 	bl	8043ae8 <lcd_send_cmd>
}
 8043c2c:	bf00      	nop
 8043c2e:	3708      	adds	r7, #8
 8043c30:	46bd      	mov	sp, r7
 8043c32:	bd80      	pop	{r7, pc}

08043c34 <lcd_init>:
}



void lcd_init (void)
{
 8043c34:	b580      	push	{r7, lr}
 8043c36:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8043c38:	2032      	movs	r0, #50	; 0x32
 8043c3a:	f001 f85d 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043c3e:	2030      	movs	r0, #48	; 0x30
 8043c40:	f7ff ff52 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8043c44:	2005      	movs	r0, #5
 8043c46:	f001 f857 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043c4a:	2030      	movs	r0, #48	; 0x30
 8043c4c:	f7ff ff4c 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8043c50:	2001      	movs	r0, #1
 8043c52:	f001 f851 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043c56:	2030      	movs	r0, #48	; 0x30
 8043c58:	f7ff ff46 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(50);	//possible issue here, no delay in LCD function
 8043c5c:	2032      	movs	r0, #50	; 0x32
 8043c5e:	f001 f84b 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8043c62:	2020      	movs	r0, #32
 8043c64:	f7ff ff40 	bl	8043ae8 <lcd_send_cmd>
	//HAL_Delay(50);

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8043c68:	2028      	movs	r0, #40	; 0x28
 8043c6a:	f7ff ff3d 	bl	8043ae8 <lcd_send_cmd>
	//HAL_Delay(50);
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8043c6e:	2008      	movs	r0, #8
 8043c70:	f7ff ff3a 	bl	8043ae8 <lcd_send_cmd>
	//HAL_Delay(50);
	lcd_send_cmd (0x01);  // clear display
 8043c74:	2001      	movs	r0, #1
 8043c76:	f7ff ff37 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(2);
 8043c7a:	2002      	movs	r0, #2
 8043c7c:	f001 f83c 	bl	8044cf8 <HAL_Delay>
	//HAL_Delay(50);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8043c80:	2006      	movs	r0, #6
 8043c82:	f7ff ff31 	bl	8043ae8 <lcd_send_cmd>
	HAL_Delay(2);
 8043c86:	2002      	movs	r0, #2
 8043c88:	f001 f836 	bl	8044cf8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8043c8c:	200c      	movs	r0, #12
 8043c8e:	f7ff ff2b 	bl	8043ae8 <lcd_send_cmd>
}
 8043c92:	bf00      	nop
 8043c94:	bd80      	pop	{r7, pc}

08043c96 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8043c96:	b580      	push	{r7, lr}
 8043c98:	b082      	sub	sp, #8
 8043c9a:	af00      	add	r7, sp, #0
 8043c9c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8043c9e:	e006      	b.n	8043cae <lcd_send_string+0x18>
 8043ca0:	687b      	ldr	r3, [r7, #4]
 8043ca2:	1c5a      	adds	r2, r3, #1
 8043ca4:	607a      	str	r2, [r7, #4]
 8043ca6:	781b      	ldrb	r3, [r3, #0]
 8043ca8:	4618      	mov	r0, r3
 8043caa:	f7ff ff4d 	bl	8043b48 <lcd_send_data>
 8043cae:	687b      	ldr	r3, [r7, #4]
 8043cb0:	781b      	ldrb	r3, [r3, #0]
 8043cb2:	2b00      	cmp	r3, #0
 8043cb4:	d1f4      	bne.n	8043ca0 <lcd_send_string+0xa>
}
 8043cb6:	bf00      	nop
 8043cb8:	bf00      	nop
 8043cba:	3708      	adds	r7, #8
 8043cbc:	46bd      	mov	sp, r7
 8043cbe:	bd80      	pop	{r7, pc}

08043cc0 <__NVIC_SystemReset>:
{
 8043cc0:	b480      	push	{r7}
 8043cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8043cc4:	f3bf 8f4f 	dsb	sy
}
 8043cc8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043cca:	4b06      	ldr	r3, [pc, #24]	; (8043ce4 <__NVIC_SystemReset+0x24>)
 8043ccc:	68db      	ldr	r3, [r3, #12]
 8043cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043cd2:	4904      	ldr	r1, [pc, #16]	; (8043ce4 <__NVIC_SystemReset+0x24>)
 8043cd4:	4b04      	ldr	r3, [pc, #16]	; (8043ce8 <__NVIC_SystemReset+0x28>)
 8043cd6:	4313      	orrs	r3, r2
 8043cd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8043cda:	f3bf 8f4f 	dsb	sy
}
 8043cde:	bf00      	nop
    __NOP();
 8043ce0:	bf00      	nop
 8043ce2:	e7fd      	b.n	8043ce0 <__NVIC_SystemReset+0x20>
 8043ce4:	e000ed00 	.word	0xe000ed00
 8043ce8:	05fa0004 	.word	0x05fa0004

08043cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8043cec:	b580      	push	{r7, lr}
 8043cee:	f5ad 4dea 	sub.w	sp, sp, #29952	; 0x7500
 8043cf2:	b08e      	sub	sp, #56	; 0x38
 8043cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8043cf6:	f000 ff59 	bl	8044bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8043cfa:	f000 f90d 	bl	8043f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8043cfe:	f000 fb35 	bl	804436c <MX_GPIO_Init>
  MX_I2C1_Init();
 8043d02:	f000 f973 	bl	8043fec <MX_I2C1_Init>
  MX_TIM1_Init();
 8043d06:	f000 f9d5 	bl	80440b4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8043d0a:	f000 f99d 	bl	8044048 <MX_SPI1_Init>
  MX_TIM2_Init();
 8043d0e:	f000 fa29 	bl	8044164 <MX_TIM2_Init>
  MX_TIM3_Init();
 8043d12:	f000 fa73 	bl	80441fc <MX_TIM3_Init>
  MX_TIM6_Init();
 8043d16:	f000 faf3 	bl	8044300 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //TODO add Ki and KD as parameters for entering, and add them in FEE.
  ReflowParameters.KD = 0.3;
 8043d1a:	4b70      	ldr	r3, [pc, #448]	; (8043edc <main+0x1f0>)
 8043d1c:	4a70      	ldr	r2, [pc, #448]	; (8043ee0 <main+0x1f4>)
 8043d1e:	609a      	str	r2, [r3, #8]
  ReflowParameters.KP = 200; //125
 8043d20:	4b6e      	ldr	r3, [pc, #440]	; (8043edc <main+0x1f0>)
 8043d22:	4a70      	ldr	r2, [pc, #448]	; (8043ee4 <main+0x1f8>)
 8043d24:	601a      	str	r2, [r3, #0]
  ReflowParameters.KI = 1.1;
 8043d26:	4b6d      	ldr	r3, [pc, #436]	; (8043edc <main+0x1f0>)
 8043d28:	4a6f      	ldr	r2, [pc, #444]	; (8043ee8 <main+0x1fc>)
 8043d2a:	605a      	str	r2, [r3, #4]
  ReflowParameters.ReflowTempeture = 250;
 8043d2c:	4b6b      	ldr	r3, [pc, #428]	; (8043edc <main+0x1f0>)
 8043d2e:	22fa      	movs	r2, #250	; 0xfa
 8043d30:	61da      	str	r2, [r3, #28]
  ReflowParameters.ReflowTime = 100;
 8043d32:	4b6a      	ldr	r3, [pc, #424]	; (8043edc <main+0x1f0>)
 8043d34:	2264      	movs	r2, #100	; 0x64
 8043d36:	621a      	str	r2, [r3, #32]
  ReflowParameters.SoakTempeture = 100;
 8043d38:	4b68      	ldr	r3, [pc, #416]	; (8043edc <main+0x1f0>)
 8043d3a:	2264      	movs	r2, #100	; 0x64
 8043d3c:	611a      	str	r2, [r3, #16]
  ReflowParameters.SoakTime = 100;
 8043d3e:	4b67      	ldr	r3, [pc, #412]	; (8043edc <main+0x1f0>)
 8043d40:	2264      	movs	r2, #100	; 0x64
 8043d42:	615a      	str	r2, [r3, #20]
  ReflowParameters.firstHeatUpRate = 2;
 8043d44:	4b65      	ldr	r3, [pc, #404]	; (8043edc <main+0x1f0>)
 8043d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043d4a:	60da      	str	r2, [r3, #12]
  ReflowParameters.secondHeatUpRate = 2;
 8043d4c:	4b63      	ldr	r3, [pc, #396]	; (8043edc <main+0x1f0>)
 8043d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043d52:	619a      	str	r2, [r3, #24]
  PID.Kp = ReflowParameters.KP;
 8043d54:	4b61      	ldr	r3, [pc, #388]	; (8043edc <main+0x1f0>)
 8043d56:	681b      	ldr	r3, [r3, #0]
 8043d58:	4a64      	ldr	r2, [pc, #400]	; (8043eec <main+0x200>)
 8043d5a:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.KI;
 8043d5c:	4b5f      	ldr	r3, [pc, #380]	; (8043edc <main+0x1f0>)
 8043d5e:	685b      	ldr	r3, [r3, #4]
 8043d60:	4a62      	ldr	r2, [pc, #392]	; (8043eec <main+0x200>)
 8043d62:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 8043d64:	4b5d      	ldr	r3, [pc, #372]	; (8043edc <main+0x1f0>)
 8043d66:	689b      	ldr	r3, [r3, #8]
 8043d68:	4a60      	ldr	r2, [pc, #384]	; (8043eec <main+0x200>)
 8043d6a:	6213      	str	r3, [r2, #32]
  for(int i = 0;i < 5; i++)
 8043d6c:	2300      	movs	r3, #0
 8043d6e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8043d72:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8043d76:	6013      	str	r3, [r2, #0]
 8043d78:	e013      	b.n	8043da2 <main+0xb6>
{
	PhaseIndex_main[i] = 0;
 8043d7a:	4a5d      	ldr	r2, [pc, #372]	; (8043ef0 <main+0x204>)
 8043d7c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043d80:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043d84:	681b      	ldr	r3, [r3, #0]
 8043d86:	2100      	movs	r1, #0
 8043d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0;i < 5; i++)
 8043d8c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043d90:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043d94:	681b      	ldr	r3, [r3, #0]
 8043d96:	3301      	adds	r3, #1
 8043d98:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8043d9c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8043da0:	6013      	str	r3, [r2, #0]
 8043da2:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043da6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043daa:	681b      	ldr	r3, [r3, #0]
 8043dac:	2b04      	cmp	r3, #4
 8043dae:	dde4      	ble.n	8043d7a <main+0x8e>
}

  uint16_t u_ReflowCurve_main[REFLOW_CURVE_SIZE] = {0};
 8043db0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8043db4:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8043db8:	4618      	mov	r0, r3
 8043dba:	f247 5330 	movw	r3, #30000	; 0x7530
 8043dbe:	461a      	mov	r2, r3
 8043dc0:	2100      	movs	r1, #0
 8043dc2:	f004 fd5f 	bl	8048884 <memset>
  p_ReflowParameters = &ReflowParameters;
 8043dc6:	4b4b      	ldr	r3, [pc, #300]	; (8043ef4 <main+0x208>)
 8043dc8:	4a44      	ldr	r2, [pc, #272]	; (8043edc <main+0x1f0>)
 8043dca:	601a      	str	r2, [r3, #0]
  p_ReflowCurve = u_ReflowCurve_main;
 8043dcc:	4a4a      	ldr	r2, [pc, #296]	; (8043ef8 <main+0x20c>)
 8043dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8043dd2:	3b34      	subs	r3, #52	; 0x34
 8043dd4:	6013      	str	r3, [r2, #0]
  p_PhaseIndex = PhaseIndex_main;
 8043dd6:	4b49      	ldr	r3, [pc, #292]	; (8043efc <main+0x210>)
 8043dd8:	4a45      	ldr	r2, [pc, #276]	; (8043ef0 <main+0x204>)
 8043dda:	601a      	str	r2, [r3, #0]



 // address=find_I2C_deviceAddress();
 // HAL_Delay(2000);
  ResetFlags();
 8043ddc:	f7fe f814 	bl	8041e08 <ResetFlags>
  HAL_Delay(500);
 8043de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8043de4:	f000 ff88 	bl	8044cf8 <HAL_Delay>
  lcd_init();
 8043de8:	f7ff ff24 	bl	8043c34 <lcd_init>
  HAL_Delay(20);
 8043dec:	2014      	movs	r0, #20
 8043dee:	f000 ff83 	bl	8044cf8 <HAL_Delay>
  lcd_clear();
 8043df2:	f7ff fed9 	bl	8043ba8 <lcd_clear>
  HAL_Delay(100);
 8043df6:	2064      	movs	r0, #100	; 0x64
 8043df8:	f000 ff7e 	bl	8044cf8 <HAL_Delay>
  lcd_put_cur(0, 0);
 8043dfc:	2100      	movs	r1, #0
 8043dfe:	2000      	movs	r0, #0
 8043e00:	f7ff fef9 	bl	8043bf6 <lcd_put_cur>
  lcd_send_string("Yakamooda");
 8043e04:	483e      	ldr	r0, [pc, #248]	; (8043f00 <main+0x214>)
 8043e06:	f7ff ff46 	bl	8043c96 <lcd_send_string>
  lcd_put_cur(1, 0);
 8043e0a:	2100      	movs	r1, #0
 8043e0c:	2001      	movs	r0, #1
 8043e0e:	f7ff fef2 	bl	8043bf6 <lcd_put_cur>
  lcd_send_string("Electronics GmBH");
 8043e12:	483c      	ldr	r0, [pc, #240]	; (8043f04 <main+0x218>)
 8043e14:	f7ff ff3f 	bl	8043c96 <lcd_send_string>
  HAL_Delay(5000);
 8043e18:	f241 3088 	movw	r0, #5000	; 0x1388
 8043e1c:	f000 ff6c 	bl	8044cf8 <HAL_Delay>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8043e20:	213c      	movs	r1, #60	; 0x3c
 8043e22:	4839      	ldr	r0, [pc, #228]	; (8043f08 <main+0x21c>)
 8043e24:	f003 fdd0 	bl	80479c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8043e28:	4838      	ldr	r0, [pc, #224]	; (8043f0c <main+0x220>)
 8043e2a:	f003 fb25 	bl	8047478 <HAL_TIM_Base_Start_IT>

  HAL_Delay(500);
 8043e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8043e32:	f000 ff61 	bl	8044cf8 <HAL_Delay>
  /*GUI for data entry*/
  HandleGui();
 8043e36:	f7fd fc9d 	bl	8041774 <HandleGui>

  if(FALSE ==  StateFlag.StartFlag)
 8043e3a:	4b35      	ldr	r3, [pc, #212]	; (8043f10 <main+0x224>)
 8043e3c:	781b      	ldrb	r3, [r3, #0]
 8043e3e:	f083 0301 	eor.w	r3, r3, #1
 8043e42:	b2db      	uxtb	r3, r3
 8043e44:	2b00      	cmp	r3, #0
 8043e46:	d00f      	beq.n	8043e68 <main+0x17c>
  {
	  calculateReflowCurve(p_ReflowParameters, p_ReflowCurve, p_PhaseIndex);
 8043e48:	4b2a      	ldr	r3, [pc, #168]	; (8043ef4 <main+0x208>)
 8043e4a:	681b      	ldr	r3, [r3, #0]
 8043e4c:	4a2a      	ldr	r2, [pc, #168]	; (8043ef8 <main+0x20c>)
 8043e4e:	6811      	ldr	r1, [r2, #0]
 8043e50:	4a2a      	ldr	r2, [pc, #168]	; (8043efc <main+0x210>)
 8043e52:	6812      	ldr	r2, [r2, #0]
 8043e54:	4618      	mov	r0, r3
 8043e56:	f7fd f9bb 	bl	80411d0 <calculateReflowCurve>
	  arm_pid_init_f32(&PID, 1);
 8043e5a:	2101      	movs	r1, #1
 8043e5c:	4823      	ldr	r0, [pc, #140]	; (8043eec <main+0x200>)
 8043e5e:	f004 fcb3 	bl	80487c8 <arm_pid_init_f32>
	  /*set Reflow Start Flag */

	  StateFlag.StartFlag = TRUE;
 8043e62:	4b2b      	ldr	r3, [pc, #172]	; (8043f10 <main+0x224>)
 8043e64:	2201      	movs	r2, #1
 8043e66:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (10 <= CtrlParams.counter_10ms)
 8043e68:	4b2a      	ldr	r3, [pc, #168]	; (8043f14 <main+0x228>)
 8043e6a:	689b      	ldr	r3, [r3, #8]
 8043e6c:	2b09      	cmp	r3, #9
 8043e6e:	d90a      	bls.n	8043e86 <main+0x19a>
	  {
		  CtrlParams.counter_10ms = 0;
 8043e70:	4b28      	ldr	r3, [pc, #160]	; (8043f14 <main+0x228>)
 8043e72:	2200      	movs	r2, #0
 8043e74:	609a      	str	r2, [r3, #8]
		  msTempControlHandler(&CtrlParams, p_ReflowCurve, p_ReflowParameters);
 8043e76:	4b20      	ldr	r3, [pc, #128]	; (8043ef8 <main+0x20c>)
 8043e78:	681b      	ldr	r3, [r3, #0]
 8043e7a:	4a1e      	ldr	r2, [pc, #120]	; (8043ef4 <main+0x208>)
 8043e7c:	6812      	ldr	r2, [r2, #0]
 8043e7e:	4619      	mov	r1, r3
 8043e80:	4824      	ldr	r0, [pc, #144]	; (8043f14 <main+0x228>)
 8043e82:	f7fd fd2f 	bl	80418e4 <msTempControlHandler>

	  }
	  if(250 <= CtrlParams.counter_250ms)
 8043e86:	4b23      	ldr	r3, [pc, #140]	; (8043f14 <main+0x228>)
 8043e88:	691b      	ldr	r3, [r3, #16]
 8043e8a:	2bf9      	cmp	r3, #249	; 0xf9
 8043e8c:	d907      	bls.n	8043e9e <main+0x1b2>
	  {
		  CtrlParams.counter_250ms = 0;
 8043e8e:	4b21      	ldr	r3, [pc, #132]	; (8043f14 <main+0x228>)
 8043e90:	2200      	movs	r2, #0
 8043e92:	611a      	str	r2, [r3, #16]
		  getTemperatureData(CtrlParams.p_temperature);
 8043e94:	4b1f      	ldr	r3, [pc, #124]	; (8043f14 <main+0x228>)
 8043e96:	69db      	ldr	r3, [r3, #28]
 8043e98:	4618      	mov	r0, r3
 8043e9a:	f7fd fd17 	bl	80418cc <getTemperatureData>
		  //msTempControlHandler(&CtrlParams, p_ReflowCurve, p_ReflowParameters);
	  }
	  if(500 <= CtrlParams.counter_500ms)
 8043e9e:	4b1d      	ldr	r3, [pc, #116]	; (8043f14 <main+0x228>)
 8043ea0:	699b      	ldr	r3, [r3, #24]
 8043ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8043ea6:	d3df      	bcc.n	8043e68 <main+0x17c>
	  {
		  CtrlParams.counter_500ms = 0;
 8043ea8:	4b1a      	ldr	r3, [pc, #104]	; (8043f14 <main+0x228>)
 8043eaa:	2200      	movs	r2, #0
 8043eac:	619a      	str	r2, [r3, #24]
		  CtrlParams.u16_ReflowIndexCurrent++;
 8043eae:	4b19      	ldr	r3, [pc, #100]	; (8043f14 <main+0x228>)
 8043eb0:	885b      	ldrh	r3, [r3, #2]
 8043eb2:	3301      	adds	r3, #1
 8043eb4:	b29a      	uxth	r2, r3
 8043eb6:	4b17      	ldr	r3, [pc, #92]	; (8043f14 <main+0x228>)
 8043eb8:	805a      	strh	r2, [r3, #2]
		  // HAL_Delay(1);

		  updateGuiVal(&CtrlParams, p_ReflowParameters, p_PhaseIndex);
 8043eba:	4b0e      	ldr	r3, [pc, #56]	; (8043ef4 <main+0x208>)
 8043ebc:	681b      	ldr	r3, [r3, #0]
 8043ebe:	4a0f      	ldr	r2, [pc, #60]	; (8043efc <main+0x210>)
 8043ec0:	6812      	ldr	r2, [r2, #0]
 8043ec2:	4619      	mov	r1, r3
 8043ec4:	4813      	ldr	r0, [pc, #76]	; (8043f14 <main+0x228>)
 8043ec6:	f7fd fed1 	bl	8041c6c <updateGuiVal>

		  if( TRUE == (CtrlParams.p_StatusFlags->cooldownComplete) )
 8043eca:	4b12      	ldr	r3, [pc, #72]	; (8043f14 <main+0x228>)
 8043ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043ece:	799b      	ldrb	r3, [r3, #6]
 8043ed0:	2b00      	cmp	r3, #0
 8043ed2:	d0c9      	beq.n	8043e68 <main+0x17c>
		  {
			  ReflowAgain();
 8043ed4:	f7fd ffb6 	bl	8041e44 <ReflowAgain>
	  if (10 <= CtrlParams.counter_10ms)
 8043ed8:	e7c6      	b.n	8043e68 <main+0x17c>
 8043eda:	bf00      	nop
 8043edc:	20000454 	.word	0x20000454
 8043ee0:	3e99999a 	.word	0x3e99999a
 8043ee4:	43480000 	.word	0x43480000
 8043ee8:	3f8ccccd 	.word	0x3f8ccccd
 8043eec:	20000248 	.word	0x20000248
 8043ef0:	20000214 	.word	0x20000214
 8043ef4:	200003f8 	.word	0x200003f8
 8043ef8:	200003f4 	.word	0x200003f4
 8043efc:	20000450 	.word	0x20000450
 8043f00:	0804e1a8 	.word	0x0804e1a8
 8043f04:	0804e1b4 	.word	0x0804e1b4
 8043f08:	20000300 	.word	0x20000300
 8043f0c:	200003a8 	.word	0x200003a8
 8043f10:	20000240 	.word	0x20000240
 8043f14:	200004c0 	.word	0x200004c0

08043f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8043f18:	b580      	push	{r7, lr}
 8043f1a:	b094      	sub	sp, #80	; 0x50
 8043f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8043f1e:	f107 0320 	add.w	r3, r7, #32
 8043f22:	2230      	movs	r2, #48	; 0x30
 8043f24:	2100      	movs	r1, #0
 8043f26:	4618      	mov	r0, r3
 8043f28:	f004 fcac 	bl	8048884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8043f2c:	f107 030c 	add.w	r3, r7, #12
 8043f30:	2200      	movs	r2, #0
 8043f32:	601a      	str	r2, [r3, #0]
 8043f34:	605a      	str	r2, [r3, #4]
 8043f36:	609a      	str	r2, [r3, #8]
 8043f38:	60da      	str	r2, [r3, #12]
 8043f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8043f3c:	2300      	movs	r3, #0
 8043f3e:	60bb      	str	r3, [r7, #8]
 8043f40:	4b28      	ldr	r3, [pc, #160]	; (8043fe4 <SystemClock_Config+0xcc>)
 8043f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f44:	4a27      	ldr	r2, [pc, #156]	; (8043fe4 <SystemClock_Config+0xcc>)
 8043f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8043f4c:	4b25      	ldr	r3, [pc, #148]	; (8043fe4 <SystemClock_Config+0xcc>)
 8043f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043f54:	60bb      	str	r3, [r7, #8]
 8043f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8043f58:	2300      	movs	r3, #0
 8043f5a:	607b      	str	r3, [r7, #4]
 8043f5c:	4b22      	ldr	r3, [pc, #136]	; (8043fe8 <SystemClock_Config+0xd0>)
 8043f5e:	681b      	ldr	r3, [r3, #0]
 8043f60:	4a21      	ldr	r2, [pc, #132]	; (8043fe8 <SystemClock_Config+0xd0>)
 8043f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043f66:	6013      	str	r3, [r2, #0]
 8043f68:	4b1f      	ldr	r3, [pc, #124]	; (8043fe8 <SystemClock_Config+0xd0>)
 8043f6a:	681b      	ldr	r3, [r3, #0]
 8043f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043f70:	607b      	str	r3, [r7, #4]
 8043f72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8043f74:	2301      	movs	r3, #1
 8043f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8043f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8043f7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8043f7e:	2302      	movs	r3, #2
 8043f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8043f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8043f88:	2304      	movs	r3, #4
 8043f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8043f8c:	233c      	movs	r3, #60	; 0x3c
 8043f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8043f90:	2302      	movs	r3, #2
 8043f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8043f94:	2307      	movs	r3, #7
 8043f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8043f98:	f107 0320 	add.w	r3, r7, #32
 8043f9c:	4618      	mov	r0, r3
 8043f9e:	f002 f92b 	bl	80461f8 <HAL_RCC_OscConfig>
 8043fa2:	4603      	mov	r3, r0
 8043fa4:	2b00      	cmp	r3, #0
 8043fa6:	d001      	beq.n	8043fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8043fa8:	f000 faae 	bl	8044508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8043fac:	230f      	movs	r3, #15
 8043fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8043fb0:	2302      	movs	r3, #2
 8043fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8043fb4:	2300      	movs	r3, #0
 8043fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8043fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8043fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8043fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8043fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8043fc4:	f107 030c 	add.w	r3, r7, #12
 8043fc8:	2101      	movs	r1, #1
 8043fca:	4618      	mov	r0, r3
 8043fcc:	f002 fb8c 	bl	80466e8 <HAL_RCC_ClockConfig>
 8043fd0:	4603      	mov	r3, r0
 8043fd2:	2b00      	cmp	r3, #0
 8043fd4:	d001      	beq.n	8043fda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8043fd6:	f000 fa97 	bl	8044508 <Error_Handler>
  }
}
 8043fda:	bf00      	nop
 8043fdc:	3750      	adds	r7, #80	; 0x50
 8043fde:	46bd      	mov	sp, r7
 8043fe0:	bd80      	pop	{r7, pc}
 8043fe2:	bf00      	nop
 8043fe4:	40023800 	.word	0x40023800
 8043fe8:	40007000 	.word	0x40007000

08043fec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8043fec:	b580      	push	{r7, lr}
 8043fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8043ff0:	4b12      	ldr	r3, [pc, #72]	; (804403c <MX_I2C1_Init+0x50>)
 8043ff2:	4a13      	ldr	r2, [pc, #76]	; (8044040 <MX_I2C1_Init+0x54>)
 8043ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8043ff6:	4b11      	ldr	r3, [pc, #68]	; (804403c <MX_I2C1_Init+0x50>)
 8043ff8:	4a12      	ldr	r2, [pc, #72]	; (8044044 <MX_I2C1_Init+0x58>)
 8043ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8043ffc:	4b0f      	ldr	r3, [pc, #60]	; (804403c <MX_I2C1_Init+0x50>)
 8043ffe:	2200      	movs	r2, #0
 8044000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8044002:	4b0e      	ldr	r3, [pc, #56]	; (804403c <MX_I2C1_Init+0x50>)
 8044004:	2200      	movs	r2, #0
 8044006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8044008:	4b0c      	ldr	r3, [pc, #48]	; (804403c <MX_I2C1_Init+0x50>)
 804400a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804400e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8044010:	4b0a      	ldr	r3, [pc, #40]	; (804403c <MX_I2C1_Init+0x50>)
 8044012:	2200      	movs	r2, #0
 8044014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8044016:	4b09      	ldr	r3, [pc, #36]	; (804403c <MX_I2C1_Init+0x50>)
 8044018:	2200      	movs	r2, #0
 804401a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 804401c:	4b07      	ldr	r3, [pc, #28]	; (804403c <MX_I2C1_Init+0x50>)
 804401e:	2200      	movs	r2, #0
 8044020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8044022:	4b06      	ldr	r3, [pc, #24]	; (804403c <MX_I2C1_Init+0x50>)
 8044024:	2200      	movs	r2, #0
 8044026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8044028:	4804      	ldr	r0, [pc, #16]	; (804403c <MX_I2C1_Init+0x50>)
 804402a:	f001 fc99 	bl	8045960 <HAL_I2C_Init>
 804402e:	4603      	mov	r3, r0
 8044030:	2b00      	cmp	r3, #0
 8044032:	d001      	beq.n	8044038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8044034:	f000 fa68 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8044038:	bf00      	nop
 804403a:	bd80      	pop	{r7, pc}
 804403c:	200003fc 	.word	0x200003fc
 8044040:	40005400 	.word	0x40005400
 8044044:	000186a0 	.word	0x000186a0

08044048 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8044048:	b580      	push	{r7, lr}
 804404a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 804404c:	4b17      	ldr	r3, [pc, #92]	; (80440ac <MX_SPI1_Init+0x64>)
 804404e:	4a18      	ldr	r2, [pc, #96]	; (80440b0 <MX_SPI1_Init+0x68>)
 8044050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8044052:	4b16      	ldr	r3, [pc, #88]	; (80440ac <MX_SPI1_Init+0x64>)
 8044054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8044058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 804405a:	4b14      	ldr	r3, [pc, #80]	; (80440ac <MX_SPI1_Init+0x64>)
 804405c:	2200      	movs	r2, #0
 804405e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8044060:	4b12      	ldr	r3, [pc, #72]	; (80440ac <MX_SPI1_Init+0x64>)
 8044062:	2200      	movs	r2, #0
 8044064:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8044066:	4b11      	ldr	r3, [pc, #68]	; (80440ac <MX_SPI1_Init+0x64>)
 8044068:	2200      	movs	r2, #0
 804406a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 804406c:	4b0f      	ldr	r3, [pc, #60]	; (80440ac <MX_SPI1_Init+0x64>)
 804406e:	2200      	movs	r2, #0
 8044070:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8044072:	4b0e      	ldr	r3, [pc, #56]	; (80440ac <MX_SPI1_Init+0x64>)
 8044074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8044078:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 804407a:	4b0c      	ldr	r3, [pc, #48]	; (80440ac <MX_SPI1_Init+0x64>)
 804407c:	2238      	movs	r2, #56	; 0x38
 804407e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8044080:	4b0a      	ldr	r3, [pc, #40]	; (80440ac <MX_SPI1_Init+0x64>)
 8044082:	2200      	movs	r2, #0
 8044084:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8044086:	4b09      	ldr	r3, [pc, #36]	; (80440ac <MX_SPI1_Init+0x64>)
 8044088:	2200      	movs	r2, #0
 804408a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804408c:	4b07      	ldr	r3, [pc, #28]	; (80440ac <MX_SPI1_Init+0x64>)
 804408e:	2200      	movs	r2, #0
 8044090:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8044092:	4b06      	ldr	r3, [pc, #24]	; (80440ac <MX_SPI1_Init+0x64>)
 8044094:	220a      	movs	r2, #10
 8044096:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8044098:	4804      	ldr	r0, [pc, #16]	; (80440ac <MX_SPI1_Init+0x64>)
 804409a:	f002 fd31 	bl	8046b00 <HAL_SPI_Init>
 804409e:	4603      	mov	r3, r0
 80440a0:	2b00      	cmp	r3, #0
 80440a2:	d001      	beq.n	80440a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80440a4:	f000 fa30 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80440a8:	bf00      	nop
 80440aa:	bd80      	pop	{r7, pc}
 80440ac:	20000350 	.word	0x20000350
 80440b0:	40013000 	.word	0x40013000

080440b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80440b4:	b580      	push	{r7, lr}
 80440b6:	b08c      	sub	sp, #48	; 0x30
 80440b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80440ba:	f107 030c 	add.w	r3, r7, #12
 80440be:	2224      	movs	r2, #36	; 0x24
 80440c0:	2100      	movs	r1, #0
 80440c2:	4618      	mov	r0, r3
 80440c4:	f004 fbde 	bl	8048884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80440c8:	1d3b      	adds	r3, r7, #4
 80440ca:	2200      	movs	r2, #0
 80440cc:	601a      	str	r2, [r3, #0]
 80440ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80440d0:	4b22      	ldr	r3, [pc, #136]	; (804415c <MX_TIM1_Init+0xa8>)
 80440d2:	4a23      	ldr	r2, [pc, #140]	; (8044160 <MX_TIM1_Init+0xac>)
 80440d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80440d6:	4b21      	ldr	r3, [pc, #132]	; (804415c <MX_TIM1_Init+0xa8>)
 80440d8:	2200      	movs	r2, #0
 80440da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80440dc:	4b1f      	ldr	r3, [pc, #124]	; (804415c <MX_TIM1_Init+0xa8>)
 80440de:	2200      	movs	r2, #0
 80440e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80440e2:	4b1e      	ldr	r3, [pc, #120]	; (804415c <MX_TIM1_Init+0xa8>)
 80440e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80440e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80440ea:	4b1c      	ldr	r3, [pc, #112]	; (804415c <MX_TIM1_Init+0xa8>)
 80440ec:	2200      	movs	r2, #0
 80440ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80440f0:	4b1a      	ldr	r3, [pc, #104]	; (804415c <MX_TIM1_Init+0xa8>)
 80440f2:	2200      	movs	r2, #0
 80440f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80440f6:	4b19      	ldr	r3, [pc, #100]	; (804415c <MX_TIM1_Init+0xa8>)
 80440f8:	2280      	movs	r2, #128	; 0x80
 80440fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80440fc:	2303      	movs	r3, #3
 80440fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8044100:	2300      	movs	r3, #0
 8044102:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8044104:	2301      	movs	r3, #1
 8044106:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8044108:	2300      	movs	r3, #0
 804410a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 804410c:	230a      	movs	r3, #10
 804410e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8044110:	2302      	movs	r3, #2
 8044112:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8044114:	2301      	movs	r3, #1
 8044116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8044118:	2300      	movs	r3, #0
 804411a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 804411c:	230a      	movs	r3, #10
 804411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8044120:	f107 030c 	add.w	r3, r7, #12
 8044124:	4619      	mov	r1, r3
 8044126:	480d      	ldr	r0, [pc, #52]	; (804415c <MX_TIM1_Init+0xa8>)
 8044128:	f003 fba8 	bl	804787c <HAL_TIM_Encoder_Init>
 804412c:	4603      	mov	r3, r0
 804412e:	2b00      	cmp	r3, #0
 8044130:	d001      	beq.n	8044136 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8044132:	f000 f9e9 	bl	8044508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8044136:	2300      	movs	r3, #0
 8044138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804413a:	2300      	movs	r3, #0
 804413c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 804413e:	1d3b      	adds	r3, r7, #4
 8044140:	4619      	mov	r1, r3
 8044142:	4806      	ldr	r0, [pc, #24]	; (804415c <MX_TIM1_Init+0xa8>)
 8044144:	f004 faa2 	bl	804868c <HAL_TIMEx_MasterConfigSynchronization>
 8044148:	4603      	mov	r3, r0
 804414a:	2b00      	cmp	r3, #0
 804414c:	d001      	beq.n	8044152 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 804414e:	f000 f9db 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8044152:	bf00      	nop
 8044154:	3730      	adds	r7, #48	; 0x30
 8044156:	46bd      	mov	sp, r7
 8044158:	bd80      	pop	{r7, pc}
 804415a:	bf00      	nop
 804415c:	20000300 	.word	0x20000300
 8044160:	40010000 	.word	0x40010000

08044164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8044164:	b580      	push	{r7, lr}
 8044166:	b086      	sub	sp, #24
 8044168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804416a:	f107 0308 	add.w	r3, r7, #8
 804416e:	2200      	movs	r2, #0
 8044170:	601a      	str	r2, [r3, #0]
 8044172:	605a      	str	r2, [r3, #4]
 8044174:	609a      	str	r2, [r3, #8]
 8044176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8044178:	463b      	mov	r3, r7
 804417a:	2200      	movs	r2, #0
 804417c:	601a      	str	r2, [r3, #0]
 804417e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8044180:	4b1d      	ldr	r3, [pc, #116]	; (80441f8 <MX_TIM2_Init+0x94>)
 8044182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8044186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 29999;
 8044188:	4b1b      	ldr	r3, [pc, #108]	; (80441f8 <MX_TIM2_Init+0x94>)
 804418a:	f247 522f 	movw	r2, #29999	; 0x752f
 804418e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8044190:	4b19      	ldr	r3, [pc, #100]	; (80441f8 <MX_TIM2_Init+0x94>)
 8044192:	2200      	movs	r2, #0
 8044194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8044196:	4b18      	ldr	r3, [pc, #96]	; (80441f8 <MX_TIM2_Init+0x94>)
 8044198:	2201      	movs	r2, #1
 804419a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804419c:	4b16      	ldr	r3, [pc, #88]	; (80441f8 <MX_TIM2_Init+0x94>)
 804419e:	2200      	movs	r2, #0
 80441a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80441a2:	4b15      	ldr	r3, [pc, #84]	; (80441f8 <MX_TIM2_Init+0x94>)
 80441a4:	2200      	movs	r2, #0
 80441a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80441a8:	4813      	ldr	r0, [pc, #76]	; (80441f8 <MX_TIM2_Init+0x94>)
 80441aa:	f003 f915 	bl	80473d8 <HAL_TIM_Base_Init>
 80441ae:	4603      	mov	r3, r0
 80441b0:	2b00      	cmp	r3, #0
 80441b2:	d001      	beq.n	80441b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80441b4:	f000 f9a8 	bl	8044508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80441b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80441bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80441be:	f107 0308 	add.w	r3, r7, #8
 80441c2:	4619      	mov	r1, r3
 80441c4:	480c      	ldr	r0, [pc, #48]	; (80441f8 <MX_TIM2_Init+0x94>)
 80441c6:	f003 fe57 	bl	8047e78 <HAL_TIM_ConfigClockSource>
 80441ca:	4603      	mov	r3, r0
 80441cc:	2b00      	cmp	r3, #0
 80441ce:	d001      	beq.n	80441d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80441d0:	f000 f99a 	bl	8044508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80441d4:	2320      	movs	r3, #32
 80441d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80441d8:	2300      	movs	r3, #0
 80441da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80441dc:	463b      	mov	r3, r7
 80441de:	4619      	mov	r1, r3
 80441e0:	4805      	ldr	r0, [pc, #20]	; (80441f8 <MX_TIM2_Init+0x94>)
 80441e2:	f004 fa53 	bl	804868c <HAL_TIMEx_MasterConfigSynchronization>
 80441e6:	4603      	mov	r3, r0
 80441e8:	2b00      	cmp	r3, #0
 80441ea:	d001      	beq.n	80441f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80441ec:	f000 f98c 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80441f0:	bf00      	nop
 80441f2:	3718      	adds	r7, #24
 80441f4:	46bd      	mov	sp, r7
 80441f6:	bd80      	pop	{r7, pc}
 80441f8:	200003a8 	.word	0x200003a8

080441fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80441fc:	b580      	push	{r7, lr}
 80441fe:	b08e      	sub	sp, #56	; 0x38
 8044200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8044202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8044206:	2200      	movs	r2, #0
 8044208:	601a      	str	r2, [r3, #0]
 804420a:	605a      	str	r2, [r3, #4]
 804420c:	609a      	str	r2, [r3, #8]
 804420e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8044210:	f107 0320 	add.w	r3, r7, #32
 8044214:	2200      	movs	r2, #0
 8044216:	601a      	str	r2, [r3, #0]
 8044218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 804421a:	1d3b      	adds	r3, r7, #4
 804421c:	2200      	movs	r2, #0
 804421e:	601a      	str	r2, [r3, #0]
 8044220:	605a      	str	r2, [r3, #4]
 8044222:	609a      	str	r2, [r3, #8]
 8044224:	60da      	str	r2, [r3, #12]
 8044226:	611a      	str	r2, [r3, #16]
 8044228:	615a      	str	r2, [r3, #20]
 804422a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 804422c:	4b32      	ldr	r3, [pc, #200]	; (80442f8 <MX_TIM3_Init+0xfc>)
 804422e:	4a33      	ldr	r2, [pc, #204]	; (80442fc <MX_TIM3_Init+0x100>)
 8044230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8044232:	4b31      	ldr	r3, [pc, #196]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044234:	f240 2257 	movw	r2, #599	; 0x257
 8044238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 804423a:	4b2f      	ldr	r3, [pc, #188]	; (80442f8 <MX_TIM3_Init+0xfc>)
 804423c:	2200      	movs	r2, #0
 804423e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8044240:	4b2d      	ldr	r3, [pc, #180]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8044246:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8044248:	4b2b      	ldr	r3, [pc, #172]	; (80442f8 <MX_TIM3_Init+0xfc>)
 804424a:	2200      	movs	r2, #0
 804424c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804424e:	4b2a      	ldr	r3, [pc, #168]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044250:	2200      	movs	r2, #0
 8044252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8044254:	4828      	ldr	r0, [pc, #160]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044256:	f003 f8bf 	bl	80473d8 <HAL_TIM_Base_Init>
 804425a:	4603      	mov	r3, r0
 804425c:	2b00      	cmp	r3, #0
 804425e:	d001      	beq.n	8044264 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8044260:	f000 f952 	bl	8044508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8044264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8044268:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 804426a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 804426e:	4619      	mov	r1, r3
 8044270:	4821      	ldr	r0, [pc, #132]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044272:	f003 fe01 	bl	8047e78 <HAL_TIM_ConfigClockSource>
 8044276:	4603      	mov	r3, r0
 8044278:	2b00      	cmp	r3, #0
 804427a:	d001      	beq.n	8044280 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 804427c:	f000 f944 	bl	8044508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8044280:	481d      	ldr	r0, [pc, #116]	; (80442f8 <MX_TIM3_Init+0xfc>)
 8044282:	f003 f969 	bl	8047558 <HAL_TIM_PWM_Init>
 8044286:	4603      	mov	r3, r0
 8044288:	2b00      	cmp	r3, #0
 804428a:	d001      	beq.n	8044290 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 804428c:	f000 f93c 	bl	8044508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8044290:	2320      	movs	r3, #32
 8044292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8044294:	2300      	movs	r3, #0
 8044296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8044298:	f107 0320 	add.w	r3, r7, #32
 804429c:	4619      	mov	r1, r3
 804429e:	4816      	ldr	r0, [pc, #88]	; (80442f8 <MX_TIM3_Init+0xfc>)
 80442a0:	f004 f9f4 	bl	804868c <HAL_TIMEx_MasterConfigSynchronization>
 80442a4:	4603      	mov	r3, r0
 80442a6:	2b00      	cmp	r3, #0
 80442a8:	d001      	beq.n	80442ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80442aa:	f000 f92d 	bl	8044508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80442ae:	2360      	movs	r3, #96	; 0x60
 80442b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80442b2:	2300      	movs	r3, #0
 80442b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80442b6:	2300      	movs	r3, #0
 80442b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80442ba:	2300      	movs	r3, #0
 80442bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80442be:	1d3b      	adds	r3, r7, #4
 80442c0:	2204      	movs	r2, #4
 80442c2:	4619      	mov	r1, r3
 80442c4:	480c      	ldr	r0, [pc, #48]	; (80442f8 <MX_TIM3_Init+0xfc>)
 80442c6:	f003 fd15 	bl	8047cf4 <HAL_TIM_PWM_ConfigChannel>
 80442ca:	4603      	mov	r3, r0
 80442cc:	2b00      	cmp	r3, #0
 80442ce:	d001      	beq.n	80442d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80442d0:	f000 f91a 	bl	8044508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80442d4:	1d3b      	adds	r3, r7, #4
 80442d6:	2208      	movs	r2, #8
 80442d8:	4619      	mov	r1, r3
 80442da:	4807      	ldr	r0, [pc, #28]	; (80442f8 <MX_TIM3_Init+0xfc>)
 80442dc:	f003 fd0a 	bl	8047cf4 <HAL_TIM_PWM_ConfigChannel>
 80442e0:	4603      	mov	r3, r0
 80442e2:	2b00      	cmp	r3, #0
 80442e4:	d001      	beq.n	80442ea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80442e6:	f000 f90f 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80442ea:	4803      	ldr	r0, [pc, #12]	; (80442f8 <MX_TIM3_Init+0xfc>)
 80442ec:	f000 fa66 	bl	80447bc <HAL_TIM_MspPostInit>

}
 80442f0:	bf00      	nop
 80442f2:	3738      	adds	r7, #56	; 0x38
 80442f4:	46bd      	mov	sp, r7
 80442f6:	bd80      	pop	{r7, pc}
 80442f8:	200002b4 	.word	0x200002b4
 80442fc:	40000400 	.word	0x40000400

08044300 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8044300:	b580      	push	{r7, lr}
 8044302:	b082      	sub	sp, #8
 8044304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8044306:	463b      	mov	r3, r7
 8044308:	2200      	movs	r2, #0
 804430a:	601a      	str	r2, [r3, #0]
 804430c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 804430e:	4b15      	ldr	r3, [pc, #84]	; (8044364 <MX_TIM6_Init+0x64>)
 8044310:	4a15      	ldr	r2, [pc, #84]	; (8044368 <MX_TIM6_Init+0x68>)
 8044312:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8044314:	4b13      	ldr	r3, [pc, #76]	; (8044364 <MX_TIM6_Init+0x64>)
 8044316:	2201      	movs	r2, #1
 8044318:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 804431a:	4b12      	ldr	r3, [pc, #72]	; (8044364 <MX_TIM6_Init+0x64>)
 804431c:	2200      	movs	r2, #0
 804431e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8044320:	4b10      	ldr	r3, [pc, #64]	; (8044364 <MX_TIM6_Init+0x64>)
 8044322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8044326:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8044328:	4b0e      	ldr	r3, [pc, #56]	; (8044364 <MX_TIM6_Init+0x64>)
 804432a:	2280      	movs	r2, #128	; 0x80
 804432c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 804432e:	480d      	ldr	r0, [pc, #52]	; (8044364 <MX_TIM6_Init+0x64>)
 8044330:	f003 f852 	bl	80473d8 <HAL_TIM_Base_Init>
 8044334:	4603      	mov	r3, r0
 8044336:	2b00      	cmp	r3, #0
 8044338:	d001      	beq.n	804433e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 804433a:	f000 f8e5 	bl	8044508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 804433e:	2320      	movs	r3, #32
 8044340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8044342:	2300      	movs	r3, #0
 8044344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8044346:	463b      	mov	r3, r7
 8044348:	4619      	mov	r1, r3
 804434a:	4806      	ldr	r0, [pc, #24]	; (8044364 <MX_TIM6_Init+0x64>)
 804434c:	f004 f99e 	bl	804868c <HAL_TIMEx_MasterConfigSynchronization>
 8044350:	4603      	mov	r3, r0
 8044352:	2b00      	cmp	r3, #0
 8044354:	d001      	beq.n	804435a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8044356:	f000 f8d7 	bl	8044508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 804435a:	bf00      	nop
 804435c:	3708      	adds	r7, #8
 804435e:	46bd      	mov	sp, r7
 8044360:	bd80      	pop	{r7, pc}
 8044362:	bf00      	nop
 8044364:	20000478 	.word	0x20000478
 8044368:	40001000 	.word	0x40001000

0804436c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804436c:	b580      	push	{r7, lr}
 804436e:	b08c      	sub	sp, #48	; 0x30
 8044370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044372:	f107 031c 	add.w	r3, r7, #28
 8044376:	2200      	movs	r2, #0
 8044378:	601a      	str	r2, [r3, #0]
 804437a:	605a      	str	r2, [r3, #4]
 804437c:	609a      	str	r2, [r3, #8]
 804437e:	60da      	str	r2, [r3, #12]
 8044380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8044382:	2300      	movs	r3, #0
 8044384:	61bb      	str	r3, [r7, #24]
 8044386:	4b5b      	ldr	r3, [pc, #364]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804438a:	4a5a      	ldr	r2, [pc, #360]	; (80444f4 <MX_GPIO_Init+0x188>)
 804438c:	f043 0304 	orr.w	r3, r3, #4
 8044390:	6313      	str	r3, [r2, #48]	; 0x30
 8044392:	4b58      	ldr	r3, [pc, #352]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044396:	f003 0304 	and.w	r3, r3, #4
 804439a:	61bb      	str	r3, [r7, #24]
 804439c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804439e:	2300      	movs	r3, #0
 80443a0:	617b      	str	r3, [r7, #20]
 80443a2:	4b54      	ldr	r3, [pc, #336]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443a6:	4a53      	ldr	r2, [pc, #332]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80443ac:	6313      	str	r3, [r2, #48]	; 0x30
 80443ae:	4b51      	ldr	r3, [pc, #324]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80443b6:	617b      	str	r3, [r7, #20]
 80443b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80443ba:	2300      	movs	r3, #0
 80443bc:	613b      	str	r3, [r7, #16]
 80443be:	4b4d      	ldr	r3, [pc, #308]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443c2:	4a4c      	ldr	r2, [pc, #304]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443c4:	f043 0301 	orr.w	r3, r3, #1
 80443c8:	6313      	str	r3, [r2, #48]	; 0x30
 80443ca:	4b4a      	ldr	r3, [pc, #296]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443ce:	f003 0301 	and.w	r3, r3, #1
 80443d2:	613b      	str	r3, [r7, #16]
 80443d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80443d6:	2300      	movs	r3, #0
 80443d8:	60fb      	str	r3, [r7, #12]
 80443da:	4b46      	ldr	r3, [pc, #280]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443de:	4a45      	ldr	r2, [pc, #276]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443e0:	f043 0310 	orr.w	r3, r3, #16
 80443e4:	6313      	str	r3, [r2, #48]	; 0x30
 80443e6:	4b43      	ldr	r3, [pc, #268]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443ea:	f003 0310 	and.w	r3, r3, #16
 80443ee:	60fb      	str	r3, [r7, #12]
 80443f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80443f2:	2300      	movs	r3, #0
 80443f4:	60bb      	str	r3, [r7, #8]
 80443f6:	4b3f      	ldr	r3, [pc, #252]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80443fa:	4a3e      	ldr	r2, [pc, #248]	; (80444f4 <MX_GPIO_Init+0x188>)
 80443fc:	f043 0308 	orr.w	r3, r3, #8
 8044400:	6313      	str	r3, [r2, #48]	; 0x30
 8044402:	4b3c      	ldr	r3, [pc, #240]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044406:	f003 0308 	and.w	r3, r3, #8
 804440a:	60bb      	str	r3, [r7, #8]
 804440c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804440e:	2300      	movs	r3, #0
 8044410:	607b      	str	r3, [r7, #4]
 8044412:	4b38      	ldr	r3, [pc, #224]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044416:	4a37      	ldr	r2, [pc, #220]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044418:	f043 0302 	orr.w	r3, r3, #2
 804441c:	6313      	str	r3, [r2, #48]	; 0x30
 804441e:	4b35      	ldr	r3, [pc, #212]	; (80444f4 <MX_GPIO_Init+0x188>)
 8044420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044422:	f003 0302 	and.w	r3, r3, #2
 8044426:	607b      	str	r3, [r7, #4]
 8044428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 804442a:	2200      	movs	r2, #0
 804442c:	2110      	movs	r1, #16
 804442e:	4832      	ldr	r0, [pc, #200]	; (80444f8 <MX_GPIO_Init+0x18c>)
 8044430:	f001 fa3e 	bl	80458b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8044434:	2200      	movs	r2, #0
 8044436:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 804443a:	4830      	ldr	r0, [pc, #192]	; (80444fc <MX_GPIO_Init+0x190>)
 804443c:	f001 fa38 	bl	80458b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8044440:	2301      	movs	r3, #1
 8044442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8044444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8044448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804444a:	2300      	movs	r3, #0
 804444c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 804444e:	f107 031c 	add.w	r3, r7, #28
 8044452:	4619      	mov	r1, r3
 8044454:	4828      	ldr	r0, [pc, #160]	; (80444f8 <MX_GPIO_Init+0x18c>)
 8044456:	f001 f88f 	bl	8045578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 804445a:	2310      	movs	r3, #16
 804445c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804445e:	2301      	movs	r3, #1
 8044460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044462:	2300      	movs	r3, #0
 8044464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8044466:	2300      	movs	r3, #0
 8044468:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 804446a:	f107 031c 	add.w	r3, r7, #28
 804446e:	4619      	mov	r1, r3
 8044470:	4821      	ldr	r0, [pc, #132]	; (80444f8 <MX_GPIO_Init+0x18c>)
 8044472:	f001 f881 	bl	8045578 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8044476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804447a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 804447c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8044480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8044482:	2301      	movs	r3, #1
 8044484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8044486:	f107 031c 	add.w	r3, r7, #28
 804448a:	4619      	mov	r1, r3
 804448c:	481c      	ldr	r0, [pc, #112]	; (8044500 <MX_GPIO_Init+0x194>)
 804448e:	f001 f873 	bl	8045578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8044492:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8044496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8044498:	2301      	movs	r3, #1
 804449a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804449c:	2300      	movs	r3, #0
 804449e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80444a0:	2300      	movs	r3, #0
 80444a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80444a4:	f107 031c 	add.w	r3, r7, #28
 80444a8:	4619      	mov	r1, r3
 80444aa:	4814      	ldr	r0, [pc, #80]	; (80444fc <MX_GPIO_Init+0x190>)
 80444ac:	f001 f864 	bl	8045578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 80444b0:	2340      	movs	r3, #64	; 0x40
 80444b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80444b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80444b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80444ba:	2300      	movs	r3, #0
 80444bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 80444be:	f107 031c 	add.w	r3, r7, #28
 80444c2:	4619      	mov	r1, r3
 80444c4:	480f      	ldr	r0, [pc, #60]	; (8044504 <MX_GPIO_Init+0x198>)
 80444c6:	f001 f857 	bl	8045578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 80444ca:	2201      	movs	r2, #1
 80444cc:	2100      	movs	r1, #0
 80444ce:	2017      	movs	r0, #23
 80444d0:	f000 fd35 	bl	8044f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80444d4:	2017      	movs	r0, #23
 80444d6:	f000 fd4e 	bl	8044f76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80444da:	2201      	movs	r2, #1
 80444dc:	2100      	movs	r1, #0
 80444de:	2028      	movs	r0, #40	; 0x28
 80444e0:	f000 fd2d 	bl	8044f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80444e4:	2028      	movs	r0, #40	; 0x28
 80444e6:	f000 fd46 	bl	8044f76 <HAL_NVIC_EnableIRQ>

}
 80444ea:	bf00      	nop
 80444ec:	3730      	adds	r7, #48	; 0x30
 80444ee:	46bd      	mov	sp, r7
 80444f0:	bd80      	pop	{r7, pc}
 80444f2:	bf00      	nop
 80444f4:	40023800 	.word	0x40023800
 80444f8:	40020000 	.word	0x40020000
 80444fc:	40020c00 	.word	0x40020c00
 8044500:	40021000 	.word	0x40021000
 8044504:	40020800 	.word	0x40020800

08044508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8044508:	b580      	push	{r7, lr}
 804450a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 804450c:	b672      	cpsid	i
}
 804450e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_DeInit();
 8044510:	f000 fb6e 	bl	8044bf0 <HAL_DeInit>
  NVIC_SystemReset(); /*Init a system reset*/
 8044514:	f7ff fbd4 	bl	8043cc0 <__NVIC_SystemReset>

08044518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8044518:	b580      	push	{r7, lr}
 804451a:	b082      	sub	sp, #8
 804451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804451e:	2300      	movs	r3, #0
 8044520:	607b      	str	r3, [r7, #4]
 8044522:	4b10      	ldr	r3, [pc, #64]	; (8044564 <HAL_MspInit+0x4c>)
 8044524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044526:	4a0f      	ldr	r2, [pc, #60]	; (8044564 <HAL_MspInit+0x4c>)
 8044528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804452c:	6453      	str	r3, [r2, #68]	; 0x44
 804452e:	4b0d      	ldr	r3, [pc, #52]	; (8044564 <HAL_MspInit+0x4c>)
 8044530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044536:	607b      	str	r3, [r7, #4]
 8044538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804453a:	2300      	movs	r3, #0
 804453c:	603b      	str	r3, [r7, #0]
 804453e:	4b09      	ldr	r3, [pc, #36]	; (8044564 <HAL_MspInit+0x4c>)
 8044540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044542:	4a08      	ldr	r2, [pc, #32]	; (8044564 <HAL_MspInit+0x4c>)
 8044544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044548:	6413      	str	r3, [r2, #64]	; 0x40
 804454a:	4b06      	ldr	r3, [pc, #24]	; (8044564 <HAL_MspInit+0x4c>)
 804454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044552:	603b      	str	r3, [r7, #0]
 8044554:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8044556:	2007      	movs	r0, #7
 8044558:	f000 fce6 	bl	8044f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804455c:	bf00      	nop
 804455e:	3708      	adds	r7, #8
 8044560:	46bd      	mov	sp, r7
 8044562:	bd80      	pop	{r7, pc}
 8044564:	40023800 	.word	0x40023800

08044568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8044568:	b580      	push	{r7, lr}
 804456a:	b08a      	sub	sp, #40	; 0x28
 804456c:	af00      	add	r7, sp, #0
 804456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044570:	f107 0314 	add.w	r3, r7, #20
 8044574:	2200      	movs	r2, #0
 8044576:	601a      	str	r2, [r3, #0]
 8044578:	605a      	str	r2, [r3, #4]
 804457a:	609a      	str	r2, [r3, #8]
 804457c:	60da      	str	r2, [r3, #12]
 804457e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8044580:	687b      	ldr	r3, [r7, #4]
 8044582:	681b      	ldr	r3, [r3, #0]
 8044584:	4a19      	ldr	r2, [pc, #100]	; (80445ec <HAL_I2C_MspInit+0x84>)
 8044586:	4293      	cmp	r3, r2
 8044588:	d12b      	bne.n	80445e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804458a:	2300      	movs	r3, #0
 804458c:	613b      	str	r3, [r7, #16]
 804458e:	4b18      	ldr	r3, [pc, #96]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 8044590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044592:	4a17      	ldr	r2, [pc, #92]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 8044594:	f043 0302 	orr.w	r3, r3, #2
 8044598:	6313      	str	r3, [r2, #48]	; 0x30
 804459a:	4b15      	ldr	r3, [pc, #84]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 804459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804459e:	f003 0302 	and.w	r3, r3, #2
 80445a2:	613b      	str	r3, [r7, #16]
 80445a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80445a6:	23c0      	movs	r3, #192	; 0xc0
 80445a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80445aa:	2312      	movs	r3, #18
 80445ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80445ae:	2300      	movs	r3, #0
 80445b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80445b2:	2303      	movs	r3, #3
 80445b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80445b6:	2304      	movs	r3, #4
 80445b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80445ba:	f107 0314 	add.w	r3, r7, #20
 80445be:	4619      	mov	r1, r3
 80445c0:	480c      	ldr	r0, [pc, #48]	; (80445f4 <HAL_I2C_MspInit+0x8c>)
 80445c2:	f000 ffd9 	bl	8045578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80445c6:	2300      	movs	r3, #0
 80445c8:	60fb      	str	r3, [r7, #12]
 80445ca:	4b09      	ldr	r3, [pc, #36]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 80445cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80445ce:	4a08      	ldr	r2, [pc, #32]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 80445d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80445d4:	6413      	str	r3, [r2, #64]	; 0x40
 80445d6:	4b06      	ldr	r3, [pc, #24]	; (80445f0 <HAL_I2C_MspInit+0x88>)
 80445d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80445da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80445de:	60fb      	str	r3, [r7, #12]
 80445e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80445e2:	bf00      	nop
 80445e4:	3728      	adds	r7, #40	; 0x28
 80445e6:	46bd      	mov	sp, r7
 80445e8:	bd80      	pop	{r7, pc}
 80445ea:	bf00      	nop
 80445ec:	40005400 	.word	0x40005400
 80445f0:	40023800 	.word	0x40023800
 80445f4:	40020400 	.word	0x40020400

080445f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80445f8:	b580      	push	{r7, lr}
 80445fa:	b08a      	sub	sp, #40	; 0x28
 80445fc:	af00      	add	r7, sp, #0
 80445fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044600:	f107 0314 	add.w	r3, r7, #20
 8044604:	2200      	movs	r2, #0
 8044606:	601a      	str	r2, [r3, #0]
 8044608:	605a      	str	r2, [r3, #4]
 804460a:	609a      	str	r2, [r3, #8]
 804460c:	60da      	str	r2, [r3, #12]
 804460e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	681b      	ldr	r3, [r3, #0]
 8044614:	4a19      	ldr	r2, [pc, #100]	; (804467c <HAL_SPI_MspInit+0x84>)
 8044616:	4293      	cmp	r3, r2
 8044618:	d12b      	bne.n	8044672 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804461a:	2300      	movs	r3, #0
 804461c:	613b      	str	r3, [r7, #16]
 804461e:	4b18      	ldr	r3, [pc, #96]	; (8044680 <HAL_SPI_MspInit+0x88>)
 8044620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044622:	4a17      	ldr	r2, [pc, #92]	; (8044680 <HAL_SPI_MspInit+0x88>)
 8044624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8044628:	6453      	str	r3, [r2, #68]	; 0x44
 804462a:	4b15      	ldr	r3, [pc, #84]	; (8044680 <HAL_SPI_MspInit+0x88>)
 804462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804462e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8044632:	613b      	str	r3, [r7, #16]
 8044634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8044636:	2300      	movs	r3, #0
 8044638:	60fb      	str	r3, [r7, #12]
 804463a:	4b11      	ldr	r3, [pc, #68]	; (8044680 <HAL_SPI_MspInit+0x88>)
 804463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804463e:	4a10      	ldr	r2, [pc, #64]	; (8044680 <HAL_SPI_MspInit+0x88>)
 8044640:	f043 0301 	orr.w	r3, r3, #1
 8044644:	6313      	str	r3, [r2, #48]	; 0x30
 8044646:	4b0e      	ldr	r3, [pc, #56]	; (8044680 <HAL_SPI_MspInit+0x88>)
 8044648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804464a:	f003 0301 	and.w	r3, r3, #1
 804464e:	60fb      	str	r3, [r7, #12]
 8044650:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8044652:	23e0      	movs	r3, #224	; 0xe0
 8044654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8044656:	2302      	movs	r3, #2
 8044658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804465a:	2300      	movs	r3, #0
 804465c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804465e:	2303      	movs	r3, #3
 8044660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8044662:	2305      	movs	r3, #5
 8044664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8044666:	f107 0314 	add.w	r3, r7, #20
 804466a:	4619      	mov	r1, r3
 804466c:	4805      	ldr	r0, [pc, #20]	; (8044684 <HAL_SPI_MspInit+0x8c>)
 804466e:	f000 ff83 	bl	8045578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8044672:	bf00      	nop
 8044674:	3728      	adds	r7, #40	; 0x28
 8044676:	46bd      	mov	sp, r7
 8044678:	bd80      	pop	{r7, pc}
 804467a:	bf00      	nop
 804467c:	40013000 	.word	0x40013000
 8044680:	40023800 	.word	0x40023800
 8044684:	40020000 	.word	0x40020000

08044688 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8044688:	b580      	push	{r7, lr}
 804468a:	b08a      	sub	sp, #40	; 0x28
 804468c:	af00      	add	r7, sp, #0
 804468e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044690:	f107 0314 	add.w	r3, r7, #20
 8044694:	2200      	movs	r2, #0
 8044696:	601a      	str	r2, [r3, #0]
 8044698:	605a      	str	r2, [r3, #4]
 804469a:	609a      	str	r2, [r3, #8]
 804469c:	60da      	str	r2, [r3, #12]
 804469e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80446a0:	687b      	ldr	r3, [r7, #4]
 80446a2:	681b      	ldr	r3, [r3, #0]
 80446a4:	4a19      	ldr	r2, [pc, #100]	; (804470c <HAL_TIM_Encoder_MspInit+0x84>)
 80446a6:	4293      	cmp	r3, r2
 80446a8:	d12c      	bne.n	8044704 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80446aa:	2300      	movs	r3, #0
 80446ac:	613b      	str	r3, [r7, #16]
 80446ae:	4b18      	ldr	r3, [pc, #96]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80446b2:	4a17      	ldr	r2, [pc, #92]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446b4:	f043 0301 	orr.w	r3, r3, #1
 80446b8:	6453      	str	r3, [r2, #68]	; 0x44
 80446ba:	4b15      	ldr	r3, [pc, #84]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80446be:	f003 0301 	and.w	r3, r3, #1
 80446c2:	613b      	str	r3, [r7, #16]
 80446c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80446c6:	2300      	movs	r3, #0
 80446c8:	60fb      	str	r3, [r7, #12]
 80446ca:	4b11      	ldr	r3, [pc, #68]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80446ce:	4a10      	ldr	r2, [pc, #64]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446d0:	f043 0310 	orr.w	r3, r3, #16
 80446d4:	6313      	str	r3, [r2, #48]	; 0x30
 80446d6:	4b0e      	ldr	r3, [pc, #56]	; (8044710 <HAL_TIM_Encoder_MspInit+0x88>)
 80446d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80446da:	f003 0310 	and.w	r3, r3, #16
 80446de:	60fb      	str	r3, [r7, #12]
 80446e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderLeftPin_Pin|EncoderRightPin_Pin;
 80446e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80446e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80446e8:	2302      	movs	r3, #2
 80446ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80446ec:	2301      	movs	r3, #1
 80446ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80446f0:	2300      	movs	r3, #0
 80446f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80446f4:	2301      	movs	r3, #1
 80446f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80446f8:	f107 0314 	add.w	r3, r7, #20
 80446fc:	4619      	mov	r1, r3
 80446fe:	4805      	ldr	r0, [pc, #20]	; (8044714 <HAL_TIM_Encoder_MspInit+0x8c>)
 8044700:	f000 ff3a 	bl	8045578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8044704:	bf00      	nop
 8044706:	3728      	adds	r7, #40	; 0x28
 8044708:	46bd      	mov	sp, r7
 804470a:	bd80      	pop	{r7, pc}
 804470c:	40010000 	.word	0x40010000
 8044710:	40023800 	.word	0x40023800
 8044714:	40021000 	.word	0x40021000

08044718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8044718:	b580      	push	{r7, lr}
 804471a:	b086      	sub	sp, #24
 804471c:	af00      	add	r7, sp, #0
 804471e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8044720:	687b      	ldr	r3, [r7, #4]
 8044722:	681b      	ldr	r3, [r3, #0]
 8044724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044728:	d116      	bne.n	8044758 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804472a:	2300      	movs	r3, #0
 804472c:	617b      	str	r3, [r7, #20]
 804472e:	4b20      	ldr	r3, [pc, #128]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044732:	4a1f      	ldr	r2, [pc, #124]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044734:	f043 0301 	orr.w	r3, r3, #1
 8044738:	6413      	str	r3, [r2, #64]	; 0x40
 804473a:	4b1d      	ldr	r3, [pc, #116]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 804473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804473e:	f003 0301 	and.w	r3, r3, #1
 8044742:	617b      	str	r3, [r7, #20]
 8044744:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8044746:	2200      	movs	r2, #0
 8044748:	2100      	movs	r1, #0
 804474a:	201c      	movs	r0, #28
 804474c:	f000 fbf7 	bl	8044f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8044750:	201c      	movs	r0, #28
 8044752:	f000 fc10 	bl	8044f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8044756:	e026      	b.n	80447a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8044758:	687b      	ldr	r3, [r7, #4]
 804475a:	681b      	ldr	r3, [r3, #0]
 804475c:	4a15      	ldr	r2, [pc, #84]	; (80447b4 <HAL_TIM_Base_MspInit+0x9c>)
 804475e:	4293      	cmp	r3, r2
 8044760:	d10e      	bne.n	8044780 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8044762:	2300      	movs	r3, #0
 8044764:	613b      	str	r3, [r7, #16]
 8044766:	4b12      	ldr	r3, [pc, #72]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804476a:	4a11      	ldr	r2, [pc, #68]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 804476c:	f043 0302 	orr.w	r3, r3, #2
 8044770:	6413      	str	r3, [r2, #64]	; 0x40
 8044772:	4b0f      	ldr	r3, [pc, #60]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044776:	f003 0302 	and.w	r3, r3, #2
 804477a:	613b      	str	r3, [r7, #16]
 804477c:	693b      	ldr	r3, [r7, #16]
}
 804477e:	e012      	b.n	80447a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8044780:	687b      	ldr	r3, [r7, #4]
 8044782:	681b      	ldr	r3, [r3, #0]
 8044784:	4a0c      	ldr	r2, [pc, #48]	; (80447b8 <HAL_TIM_Base_MspInit+0xa0>)
 8044786:	4293      	cmp	r3, r2
 8044788:	d10d      	bne.n	80447a6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 804478a:	2300      	movs	r3, #0
 804478c:	60fb      	str	r3, [r7, #12]
 804478e:	4b08      	ldr	r3, [pc, #32]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044792:	4a07      	ldr	r2, [pc, #28]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 8044794:	f043 0310 	orr.w	r3, r3, #16
 8044798:	6413      	str	r3, [r2, #64]	; 0x40
 804479a:	4b05      	ldr	r3, [pc, #20]	; (80447b0 <HAL_TIM_Base_MspInit+0x98>)
 804479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804479e:	f003 0310 	and.w	r3, r3, #16
 80447a2:	60fb      	str	r3, [r7, #12]
 80447a4:	68fb      	ldr	r3, [r7, #12]
}
 80447a6:	bf00      	nop
 80447a8:	3718      	adds	r7, #24
 80447aa:	46bd      	mov	sp, r7
 80447ac:	bd80      	pop	{r7, pc}
 80447ae:	bf00      	nop
 80447b0:	40023800 	.word	0x40023800
 80447b4:	40000400 	.word	0x40000400
 80447b8:	40001000 	.word	0x40001000

080447bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80447bc:	b580      	push	{r7, lr}
 80447be:	b088      	sub	sp, #32
 80447c0:	af00      	add	r7, sp, #0
 80447c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80447c4:	f107 030c 	add.w	r3, r7, #12
 80447c8:	2200      	movs	r2, #0
 80447ca:	601a      	str	r2, [r3, #0]
 80447cc:	605a      	str	r2, [r3, #4]
 80447ce:	609a      	str	r2, [r3, #8]
 80447d0:	60da      	str	r2, [r3, #12]
 80447d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80447d4:	687b      	ldr	r3, [r7, #4]
 80447d6:	681b      	ldr	r3, [r3, #0]
 80447d8:	4a12      	ldr	r2, [pc, #72]	; (8044824 <HAL_TIM_MspPostInit+0x68>)
 80447da:	4293      	cmp	r3, r2
 80447dc:	d11e      	bne.n	804481c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80447de:	2300      	movs	r3, #0
 80447e0:	60bb      	str	r3, [r7, #8]
 80447e2:	4b11      	ldr	r3, [pc, #68]	; (8044828 <HAL_TIM_MspPostInit+0x6c>)
 80447e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447e6:	4a10      	ldr	r2, [pc, #64]	; (8044828 <HAL_TIM_MspPostInit+0x6c>)
 80447e8:	f043 0304 	orr.w	r3, r3, #4
 80447ec:	6313      	str	r3, [r2, #48]	; 0x30
 80447ee:	4b0e      	ldr	r3, [pc, #56]	; (8044828 <HAL_TIM_MspPostInit+0x6c>)
 80447f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447f2:	f003 0304 	and.w	r3, r3, #4
 80447f6:	60bb      	str	r3, [r7, #8]
 80447f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringBankPin1_Pin|FiringBankPin2_Pin;
 80447fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80447fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8044800:	2302      	movs	r3, #2
 8044802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044804:	2300      	movs	r3, #0
 8044806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8044808:	2300      	movs	r3, #0
 804480a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 804480c:	2302      	movs	r3, #2
 804480e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8044810:	f107 030c 	add.w	r3, r7, #12
 8044814:	4619      	mov	r1, r3
 8044816:	4805      	ldr	r0, [pc, #20]	; (804482c <HAL_TIM_MspPostInit+0x70>)
 8044818:	f000 feae 	bl	8045578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 804481c:	bf00      	nop
 804481e:	3720      	adds	r7, #32
 8044820:	46bd      	mov	sp, r7
 8044822:	bd80      	pop	{r7, pc}
 8044824:	40000400 	.word	0x40000400
 8044828:	40023800 	.word	0x40023800
 804482c:	40020800 	.word	0x40020800

08044830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8044830:	b480      	push	{r7}
 8044832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8044834:	e7fe      	b.n	8044834 <NMI_Handler+0x4>

08044836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8044836:	b480      	push	{r7}
 8044838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804483a:	e7fe      	b.n	804483a <HardFault_Handler+0x4>

0804483c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804483c:	b480      	push	{r7}
 804483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8044840:	e7fe      	b.n	8044840 <MemManage_Handler+0x4>

08044842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8044842:	b480      	push	{r7}
 8044844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8044846:	e7fe      	b.n	8044846 <BusFault_Handler+0x4>

08044848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8044848:	b480      	push	{r7}
 804484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804484c:	e7fe      	b.n	804484c <UsageFault_Handler+0x4>

0804484e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804484e:	b480      	push	{r7}
 8044850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8044852:	bf00      	nop
 8044854:	46bd      	mov	sp, r7
 8044856:	f85d 7b04 	ldr.w	r7, [sp], #4
 804485a:	4770      	bx	lr

0804485c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804485c:	b480      	push	{r7}
 804485e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8044860:	bf00      	nop
 8044862:	46bd      	mov	sp, r7
 8044864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044868:	4770      	bx	lr

0804486a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804486a:	b480      	push	{r7}
 804486c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804486e:	bf00      	nop
 8044870:	46bd      	mov	sp, r7
 8044872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044876:	4770      	bx	lr

08044878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8044878:	b580      	push	{r7, lr}
 804487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804487c:	f000 fa1c 	bl	8044cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8044880:	bf00      	nop
 8044882:	bd80      	pop	{r7, pc}

08044884 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8044884:	b580      	push	{r7, lr}
 8044886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 8044888:	4b0f      	ldr	r3, [pc, #60]	; (80448c8 <EXTI9_5_IRQHandler+0x44>)
 804488a:	695b      	ldr	r3, [r3, #20]
 804488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044890:	2b00      	cmp	r3, #0
 8044892:	d00b      	beq.n	80448ac <EXTI9_5_IRQHandler+0x28>
	{
		//Test output pin for zero crossing
		//HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8044894:	2104      	movs	r1, #4
 8044896:	480d      	ldr	r0, [pc, #52]	; (80448cc <EXTI9_5_IRQHandler+0x48>)
 8044898:	f002 feb8 	bl	804760c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 804489c:	2108      	movs	r1, #8
 804489e:	480b      	ldr	r0, [pc, #44]	; (80448cc <EXTI9_5_IRQHandler+0x48>)
 80448a0:	f002 feb4 	bl	804760c <HAL_TIM_PWM_Start>
		PIDFlag = 1;
 80448a4:	4b0a      	ldr	r3, [pc, #40]	; (80448d0 <EXTI9_5_IRQHandler+0x4c>)
 80448a6:	2201      	movs	r2, #1
 80448a8:	701a      	strb	r2, [r3, #0]
 80448aa:	e007      	b.n	80448bc <EXTI9_5_IRQHandler+0x38>
	}
	else
	{
		//Do nothing
			//FlagBank1=0;
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80448ac:	2104      	movs	r1, #4
 80448ae:	4807      	ldr	r0, [pc, #28]	; (80448cc <EXTI9_5_IRQHandler+0x48>)
 80448b0:	f002 ff74 	bl	804779c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80448b4:	2108      	movs	r1, #8
 80448b6:	4805      	ldr	r0, [pc, #20]	; (80448cc <EXTI9_5_IRQHandler+0x48>)
 80448b8:	f002 ff70 	bl	804779c <HAL_TIM_PWM_Stop>
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZeroCrossingPin_Pin);
 80448bc:	2040      	movs	r0, #64	; 0x40
 80448be:	f001 f82b 	bl	8045918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80448c2:	bf00      	nop
 80448c4:	bd80      	pop	{r7, pc}
 80448c6:	bf00      	nop
 80448c8:	40013c00 	.word	0x40013c00
 80448cc:	200002b4 	.word	0x200002b4
 80448d0:	200003f0 	.word	0x200003f0

080448d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80448d4:	b580      	push	{r7, lr}
 80448d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ms_counterEncButton++;
 80448d8:	4b1b      	ldr	r3, [pc, #108]	; (8044948 <TIM2_IRQHandler+0x74>)
 80448da:	881b      	ldrh	r3, [r3, #0]
 80448dc:	b29b      	uxth	r3, r3
 80448de:	3301      	adds	r3, #1
 80448e0:	b29a      	uxth	r2, r3
 80448e2:	4b19      	ldr	r3, [pc, #100]	; (8044948 <TIM2_IRQHandler+0x74>)
 80448e4:	801a      	strh	r2, [r3, #0]
	ms_counter++;
 80448e6:	4b19      	ldr	r3, [pc, #100]	; (804494c <TIM2_IRQHandler+0x78>)
 80448e8:	681b      	ldr	r3, [r3, #0]
 80448ea:	3301      	adds	r3, #1
 80448ec:	4a17      	ldr	r2, [pc, #92]	; (804494c <TIM2_IRQHandler+0x78>)
 80448ee:	6013      	str	r3, [r2, #0]
	CtrlParams.counter_1ms++;
 80448f0:	4b17      	ldr	r3, [pc, #92]	; (8044950 <TIM2_IRQHandler+0x7c>)
 80448f2:	685b      	ldr	r3, [r3, #4]
 80448f4:	3301      	adds	r3, #1
 80448f6:	4a16      	ldr	r2, [pc, #88]	; (8044950 <TIM2_IRQHandler+0x7c>)
 80448f8:	6053      	str	r3, [r2, #4]
	CtrlParams.counter_10ms++;
 80448fa:	4b15      	ldr	r3, [pc, #84]	; (8044950 <TIM2_IRQHandler+0x7c>)
 80448fc:	689b      	ldr	r3, [r3, #8]
 80448fe:	3301      	adds	r3, #1
 8044900:	4a13      	ldr	r2, [pc, #76]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044902:	6093      	str	r3, [r2, #8]
	CtrlParams.counter_250ms++;
 8044904:	4b12      	ldr	r3, [pc, #72]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044906:	691b      	ldr	r3, [r3, #16]
 8044908:	3301      	adds	r3, #1
 804490a:	4a11      	ldr	r2, [pc, #68]	; (8044950 <TIM2_IRQHandler+0x7c>)
 804490c:	6113      	str	r3, [r2, #16]
	CtrlParams.counter_1000ms++;
 804490e:	4b10      	ldr	r3, [pc, #64]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044910:	695b      	ldr	r3, [r3, #20]
 8044912:	3301      	adds	r3, #1
 8044914:	4a0e      	ldr	r2, [pc, #56]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044916:	6153      	str	r3, [r2, #20]
	CtrlParams.counter_500ms++;
 8044918:	4b0d      	ldr	r3, [pc, #52]	; (8044950 <TIM2_IRQHandler+0x7c>)
 804491a:	699b      	ldr	r3, [r3, #24]
 804491c:	3301      	adds	r3, #1
 804491e:	4a0c      	ldr	r2, [pc, #48]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044920:	6193      	str	r3, [r2, #24]

	if(1 == ms_counter)
 8044922:	4b0a      	ldr	r3, [pc, #40]	; (804494c <TIM2_IRQHandler+0x78>)
 8044924:	681b      	ldr	r3, [r3, #0]
 8044926:	2b01      	cmp	r3, #1
 8044928:	d108      	bne.n	804493c <TIM2_IRQHandler+0x68>
	{
		CtrlParams.p_temperature = &temperature;
 804492a:	4b09      	ldr	r3, [pc, #36]	; (8044950 <TIM2_IRQHandler+0x7c>)
 804492c:	4a09      	ldr	r2, [pc, #36]	; (8044954 <TIM2_IRQHandler+0x80>)
 804492e:	61da      	str	r2, [r3, #28]
		CtrlParams.p_StatusFlags = &Flags;
 8044930:	4b07      	ldr	r3, [pc, #28]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044932:	4a09      	ldr	r2, [pc, #36]	; (8044958 <TIM2_IRQHandler+0x84>)
 8044934:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlParams.p_PIDError    = &PIDerror;
 8044936:	4b06      	ldr	r3, [pc, #24]	; (8044950 <TIM2_IRQHandler+0x7c>)
 8044938:	4a08      	ldr	r2, [pc, #32]	; (804495c <TIM2_IRQHandler+0x88>)
 804493a:	621a      	str	r2, [r3, #32]
	{
		//HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 804493c:	4808      	ldr	r0, [pc, #32]	; (8044960 <TIM2_IRQHandler+0x8c>)
 804493e:	f003 f8d1 	bl	8047ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8044942:	bf00      	nop
 8044944:	bd80      	pop	{r7, pc}
 8044946:	bf00      	nop
 8044948:	200004f2 	.word	0x200004f2
 804494c:	20000220 	.word	0x20000220
 8044950:	200004c0 	.word	0x200004c0
 8044954:	20000224 	.word	0x20000224
 8044958:	200004f4 	.word	0x200004f4
 804495c:	20000228 	.word	0x20000228
 8044960:	200003a8 	.word	0x200003a8

08044964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8044964:	b580      	push	{r7, lr}
 8044966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderButtonPin_Pin);
 8044968:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804496c:	f000 ffd4 	bl	8045918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  if(ms_counterEncButton > 80)
 8044970:	4b08      	ldr	r3, [pc, #32]	; (8044994 <EXTI15_10_IRQHandler+0x30>)
 8044972:	881b      	ldrh	r3, [r3, #0]
 8044974:	b29b      	uxth	r3, r3
 8044976:	2b50      	cmp	r3, #80	; 0x50
 8044978:	d90a      	bls.n	8044990 <EXTI15_10_IRQHandler+0x2c>
  {


		  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 804497a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804497e:	4806      	ldr	r0, [pc, #24]	; (8044998 <EXTI15_10_IRQHandler+0x34>)
 8044980:	f000 ffaf 	bl	80458e2 <HAL_GPIO_TogglePin>
		  ui8_encButtonPressed = TRUE;
 8044984:	4b05      	ldr	r3, [pc, #20]	; (804499c <EXTI15_10_IRQHandler+0x38>)
 8044986:	2201      	movs	r2, #1
 8044988:	701a      	strb	r2, [r3, #0]

		  ms_counterEncButton = 0;
 804498a:	4b02      	ldr	r3, [pc, #8]	; (8044994 <EXTI15_10_IRQHandler+0x30>)
 804498c:	2200      	movs	r2, #0
 804498e:	801a      	strh	r2, [r3, #0]
  }



  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8044990:	bf00      	nop
 8044992:	bd80      	pop	{r7, pc}
 8044994:	200004f2 	.word	0x200004f2
 8044998:	40020c00 	.word	0x40020c00
 804499c:	20000349 	.word	0x20000349

080449a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80449a0:	b480      	push	{r7}
 80449a2:	af00      	add	r7, sp, #0
	return 1;
 80449a4:	2301      	movs	r3, #1
}
 80449a6:	4618      	mov	r0, r3
 80449a8:	46bd      	mov	sp, r7
 80449aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449ae:	4770      	bx	lr

080449b0 <_kill>:

int _kill(int pid, int sig)
{
 80449b0:	b580      	push	{r7, lr}
 80449b2:	b082      	sub	sp, #8
 80449b4:	af00      	add	r7, sp, #0
 80449b6:	6078      	str	r0, [r7, #4]
 80449b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80449ba:	f003 ff2b 	bl	8048814 <__errno>
 80449be:	4603      	mov	r3, r0
 80449c0:	2216      	movs	r2, #22
 80449c2:	601a      	str	r2, [r3, #0]
	return -1;
 80449c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80449c8:	4618      	mov	r0, r3
 80449ca:	3708      	adds	r7, #8
 80449cc:	46bd      	mov	sp, r7
 80449ce:	bd80      	pop	{r7, pc}

080449d0 <_exit>:

void _exit (int status)
{
 80449d0:	b580      	push	{r7, lr}
 80449d2:	b082      	sub	sp, #8
 80449d4:	af00      	add	r7, sp, #0
 80449d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80449d8:	f04f 31ff 	mov.w	r1, #4294967295
 80449dc:	6878      	ldr	r0, [r7, #4]
 80449de:	f7ff ffe7 	bl	80449b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80449e2:	e7fe      	b.n	80449e2 <_exit+0x12>

080449e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80449e4:	b580      	push	{r7, lr}
 80449e6:	b086      	sub	sp, #24
 80449e8:	af00      	add	r7, sp, #0
 80449ea:	60f8      	str	r0, [r7, #12]
 80449ec:	60b9      	str	r1, [r7, #8]
 80449ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80449f0:	2300      	movs	r3, #0
 80449f2:	617b      	str	r3, [r7, #20]
 80449f4:	e00a      	b.n	8044a0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80449f6:	f3af 8000 	nop.w
 80449fa:	4601      	mov	r1, r0
 80449fc:	68bb      	ldr	r3, [r7, #8]
 80449fe:	1c5a      	adds	r2, r3, #1
 8044a00:	60ba      	str	r2, [r7, #8]
 8044a02:	b2ca      	uxtb	r2, r1
 8044a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044a06:	697b      	ldr	r3, [r7, #20]
 8044a08:	3301      	adds	r3, #1
 8044a0a:	617b      	str	r3, [r7, #20]
 8044a0c:	697a      	ldr	r2, [r7, #20]
 8044a0e:	687b      	ldr	r3, [r7, #4]
 8044a10:	429a      	cmp	r2, r3
 8044a12:	dbf0      	blt.n	80449f6 <_read+0x12>
	}

return len;
 8044a14:	687b      	ldr	r3, [r7, #4]
}
 8044a16:	4618      	mov	r0, r3
 8044a18:	3718      	adds	r7, #24
 8044a1a:	46bd      	mov	sp, r7
 8044a1c:	bd80      	pop	{r7, pc}

08044a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8044a1e:	b580      	push	{r7, lr}
 8044a20:	b086      	sub	sp, #24
 8044a22:	af00      	add	r7, sp, #0
 8044a24:	60f8      	str	r0, [r7, #12]
 8044a26:	60b9      	str	r1, [r7, #8]
 8044a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044a2a:	2300      	movs	r3, #0
 8044a2c:	617b      	str	r3, [r7, #20]
 8044a2e:	e009      	b.n	8044a44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8044a30:	68bb      	ldr	r3, [r7, #8]
 8044a32:	1c5a      	adds	r2, r3, #1
 8044a34:	60ba      	str	r2, [r7, #8]
 8044a36:	781b      	ldrb	r3, [r3, #0]
 8044a38:	4618      	mov	r0, r3
 8044a3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044a3e:	697b      	ldr	r3, [r7, #20]
 8044a40:	3301      	adds	r3, #1
 8044a42:	617b      	str	r3, [r7, #20]
 8044a44:	697a      	ldr	r2, [r7, #20]
 8044a46:	687b      	ldr	r3, [r7, #4]
 8044a48:	429a      	cmp	r2, r3
 8044a4a:	dbf1      	blt.n	8044a30 <_write+0x12>
	}
	return len;
 8044a4c:	687b      	ldr	r3, [r7, #4]
}
 8044a4e:	4618      	mov	r0, r3
 8044a50:	3718      	adds	r7, #24
 8044a52:	46bd      	mov	sp, r7
 8044a54:	bd80      	pop	{r7, pc}

08044a56 <_close>:

int _close(int file)
{
 8044a56:	b480      	push	{r7}
 8044a58:	b083      	sub	sp, #12
 8044a5a:	af00      	add	r7, sp, #0
 8044a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8044a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8044a62:	4618      	mov	r0, r3
 8044a64:	370c      	adds	r7, #12
 8044a66:	46bd      	mov	sp, r7
 8044a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a6c:	4770      	bx	lr

08044a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8044a6e:	b480      	push	{r7}
 8044a70:	b083      	sub	sp, #12
 8044a72:	af00      	add	r7, sp, #0
 8044a74:	6078      	str	r0, [r7, #4]
 8044a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8044a78:	683b      	ldr	r3, [r7, #0]
 8044a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8044a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8044a80:	2300      	movs	r3, #0
}
 8044a82:	4618      	mov	r0, r3
 8044a84:	370c      	adds	r7, #12
 8044a86:	46bd      	mov	sp, r7
 8044a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a8c:	4770      	bx	lr

08044a8e <_isatty>:

int _isatty(int file)
{
 8044a8e:	b480      	push	{r7}
 8044a90:	b083      	sub	sp, #12
 8044a92:	af00      	add	r7, sp, #0
 8044a94:	6078      	str	r0, [r7, #4]
	return 1;
 8044a96:	2301      	movs	r3, #1
}
 8044a98:	4618      	mov	r0, r3
 8044a9a:	370c      	adds	r7, #12
 8044a9c:	46bd      	mov	sp, r7
 8044a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044aa2:	4770      	bx	lr

08044aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8044aa4:	b480      	push	{r7}
 8044aa6:	b085      	sub	sp, #20
 8044aa8:	af00      	add	r7, sp, #0
 8044aaa:	60f8      	str	r0, [r7, #12]
 8044aac:	60b9      	str	r1, [r7, #8]
 8044aae:	607a      	str	r2, [r7, #4]
	return 0;
 8044ab0:	2300      	movs	r3, #0
}
 8044ab2:	4618      	mov	r0, r3
 8044ab4:	3714      	adds	r7, #20
 8044ab6:	46bd      	mov	sp, r7
 8044ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044abc:	4770      	bx	lr
	...

08044ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8044ac0:	b580      	push	{r7, lr}
 8044ac2:	b086      	sub	sp, #24
 8044ac4:	af00      	add	r7, sp, #0
 8044ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8044ac8:	4a14      	ldr	r2, [pc, #80]	; (8044b1c <_sbrk+0x5c>)
 8044aca:	4b15      	ldr	r3, [pc, #84]	; (8044b20 <_sbrk+0x60>)
 8044acc:	1ad3      	subs	r3, r2, r3
 8044ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8044ad0:	697b      	ldr	r3, [r7, #20]
 8044ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8044ad4:	4b13      	ldr	r3, [pc, #76]	; (8044b24 <_sbrk+0x64>)
 8044ad6:	681b      	ldr	r3, [r3, #0]
 8044ad8:	2b00      	cmp	r3, #0
 8044ada:	d102      	bne.n	8044ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8044adc:	4b11      	ldr	r3, [pc, #68]	; (8044b24 <_sbrk+0x64>)
 8044ade:	4a12      	ldr	r2, [pc, #72]	; (8044b28 <_sbrk+0x68>)
 8044ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8044ae2:	4b10      	ldr	r3, [pc, #64]	; (8044b24 <_sbrk+0x64>)
 8044ae4:	681a      	ldr	r2, [r3, #0]
 8044ae6:	687b      	ldr	r3, [r7, #4]
 8044ae8:	4413      	add	r3, r2
 8044aea:	693a      	ldr	r2, [r7, #16]
 8044aec:	429a      	cmp	r2, r3
 8044aee:	d207      	bcs.n	8044b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8044af0:	f003 fe90 	bl	8048814 <__errno>
 8044af4:	4603      	mov	r3, r0
 8044af6:	220c      	movs	r2, #12
 8044af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8044afa:	f04f 33ff 	mov.w	r3, #4294967295
 8044afe:	e009      	b.n	8044b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8044b00:	4b08      	ldr	r3, [pc, #32]	; (8044b24 <_sbrk+0x64>)
 8044b02:	681b      	ldr	r3, [r3, #0]
 8044b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8044b06:	4b07      	ldr	r3, [pc, #28]	; (8044b24 <_sbrk+0x64>)
 8044b08:	681a      	ldr	r2, [r3, #0]
 8044b0a:	687b      	ldr	r3, [r7, #4]
 8044b0c:	4413      	add	r3, r2
 8044b0e:	4a05      	ldr	r2, [pc, #20]	; (8044b24 <_sbrk+0x64>)
 8044b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8044b12:	68fb      	ldr	r3, [r7, #12]
}
 8044b14:	4618      	mov	r0, r3
 8044b16:	3718      	adds	r7, #24
 8044b18:	46bd      	mov	sp, r7
 8044b1a:	bd80      	pop	{r7, pc}
 8044b1c:	20020000 	.word	0x20020000
 8044b20:	00000400 	.word	0x00000400
 8044b24:	2000022c 	.word	0x2000022c
 8044b28:	20000520 	.word	0x20000520

08044b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8044b2c:	b480      	push	{r7}
 8044b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8044b30:	4b07      	ldr	r3, [pc, #28]	; (8044b50 <SystemInit+0x24>)
 8044b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044b36:	4a06      	ldr	r2, [pc, #24]	; (8044b50 <SystemInit+0x24>)
 8044b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8044b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8044b40:	4b03      	ldr	r3, [pc, #12]	; (8044b50 <SystemInit+0x24>)
 8044b42:	4a04      	ldr	r2, [pc, #16]	; (8044b54 <SystemInit+0x28>)
 8044b44:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8044b46:	bf00      	nop
 8044b48:	46bd      	mov	sp, r7
 8044b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b4e:	4770      	bx	lr
 8044b50:	e000ed00 	.word	0xe000ed00
 8044b54:	08040000 	.word	0x08040000

08044b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8044b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8044b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8044b5c:	480d      	ldr	r0, [pc, #52]	; (8044b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8044b5e:	490e      	ldr	r1, [pc, #56]	; (8044b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8044b60:	4a0e      	ldr	r2, [pc, #56]	; (8044b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8044b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8044b64:	e002      	b.n	8044b6c <LoopCopyDataInit>

08044b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8044b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8044b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8044b6a:	3304      	adds	r3, #4

08044b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8044b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8044b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8044b70:	d3f9      	bcc.n	8044b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8044b72:	4a0b      	ldr	r2, [pc, #44]	; (8044ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8044b74:	4c0b      	ldr	r4, [pc, #44]	; (8044ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8044b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8044b78:	e001      	b.n	8044b7e <LoopFillZerobss>

08044b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8044b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8044b7c:	3204      	adds	r2, #4

08044b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8044b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8044b80:	d3fb      	bcc.n	8044b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8044b82:	f7ff ffd3 	bl	8044b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8044b86:	f003 fe4b 	bl	8048820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8044b8a:	f7ff f8af 	bl	8043cec <main>
  bx  lr    
 8044b8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8044b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8044b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8044b98:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8044b9c:	0804e6f0 	.word	0x0804e6f0
  ldr r2, =_sbss
 8044ba0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8044ba4:	20000520 	.word	0x20000520

08044ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8044ba8:	e7fe      	b.n	8044ba8 <ADC_IRQHandler>
	...

08044bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8044bac:	b580      	push	{r7, lr}
 8044bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044bb0:	4b0e      	ldr	r3, [pc, #56]	; (8044bec <HAL_Init+0x40>)
 8044bb2:	681b      	ldr	r3, [r3, #0]
 8044bb4:	4a0d      	ldr	r2, [pc, #52]	; (8044bec <HAL_Init+0x40>)
 8044bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8044bbc:	4b0b      	ldr	r3, [pc, #44]	; (8044bec <HAL_Init+0x40>)
 8044bbe:	681b      	ldr	r3, [r3, #0]
 8044bc0:	4a0a      	ldr	r2, [pc, #40]	; (8044bec <HAL_Init+0x40>)
 8044bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8044bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8044bc8:	4b08      	ldr	r3, [pc, #32]	; (8044bec <HAL_Init+0x40>)
 8044bca:	681b      	ldr	r3, [r3, #0]
 8044bcc:	4a07      	ldr	r2, [pc, #28]	; (8044bec <HAL_Init+0x40>)
 8044bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8044bd4:	2003      	movs	r0, #3
 8044bd6:	f000 f9a7 	bl	8044f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8044bda:	2000      	movs	r0, #0
 8044bdc:	f000 f83c 	bl	8044c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8044be0:	f7ff fc9a 	bl	8044518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8044be4:	2300      	movs	r3, #0
}
 8044be6:	4618      	mov	r0, r3
 8044be8:	bd80      	pop	{r7, pc}
 8044bea:	bf00      	nop
 8044bec:	40023c00 	.word	0x40023c00

08044bf0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8044bf0:	b580      	push	{r7, lr}
 8044bf2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8044bf4:	4b13      	ldr	r3, [pc, #76]	; (8044c44 <HAL_DeInit+0x54>)
 8044bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8044bfa:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8044bfc:	4b11      	ldr	r3, [pc, #68]	; (8044c44 <HAL_DeInit+0x54>)
 8044bfe:	2200      	movs	r2, #0
 8044c00:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8044c02:	4b10      	ldr	r3, [pc, #64]	; (8044c44 <HAL_DeInit+0x54>)
 8044c04:	f04f 32ff 	mov.w	r2, #4294967295
 8044c08:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8044c0a:	4b0e      	ldr	r3, [pc, #56]	; (8044c44 <HAL_DeInit+0x54>)
 8044c0c:	2200      	movs	r2, #0
 8044c0e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8044c10:	4b0c      	ldr	r3, [pc, #48]	; (8044c44 <HAL_DeInit+0x54>)
 8044c12:	f04f 32ff 	mov.w	r2, #4294967295
 8044c16:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8044c18:	4b0a      	ldr	r3, [pc, #40]	; (8044c44 <HAL_DeInit+0x54>)
 8044c1a:	2200      	movs	r2, #0
 8044c1c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8044c1e:	4b09      	ldr	r3, [pc, #36]	; (8044c44 <HAL_DeInit+0x54>)
 8044c20:	f04f 32ff 	mov.w	r2, #4294967295
 8044c24:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8044c26:	4b07      	ldr	r3, [pc, #28]	; (8044c44 <HAL_DeInit+0x54>)
 8044c28:	2200      	movs	r2, #0
 8044c2a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8044c2c:	4b05      	ldr	r3, [pc, #20]	; (8044c44 <HAL_DeInit+0x54>)
 8044c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8044c32:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8044c34:	4b03      	ldr	r3, [pc, #12]	; (8044c44 <HAL_DeInit+0x54>)
 8044c36:	2200      	movs	r2, #0
 8044c38:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8044c3a:	f000 f805 	bl	8044c48 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8044c3e:	2300      	movs	r3, #0
}
 8044c40:	4618      	mov	r0, r3
 8044c42:	bd80      	pop	{r7, pc}
 8044c44:	40023800 	.word	0x40023800

08044c48 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8044c48:	b480      	push	{r7}
 8044c4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8044c4c:	bf00      	nop
 8044c4e:	46bd      	mov	sp, r7
 8044c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c54:	4770      	bx	lr
	...

08044c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8044c58:	b580      	push	{r7, lr}
 8044c5a:	b082      	sub	sp, #8
 8044c5c:	af00      	add	r7, sp, #0
 8044c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8044c60:	4b12      	ldr	r3, [pc, #72]	; (8044cac <HAL_InitTick+0x54>)
 8044c62:	681a      	ldr	r2, [r3, #0]
 8044c64:	4b12      	ldr	r3, [pc, #72]	; (8044cb0 <HAL_InitTick+0x58>)
 8044c66:	781b      	ldrb	r3, [r3, #0]
 8044c68:	4619      	mov	r1, r3
 8044c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8044c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8044c76:	4618      	mov	r0, r3
 8044c78:	f000 f999 	bl	8044fae <HAL_SYSTICK_Config>
 8044c7c:	4603      	mov	r3, r0
 8044c7e:	2b00      	cmp	r3, #0
 8044c80:	d001      	beq.n	8044c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8044c82:	2301      	movs	r3, #1
 8044c84:	e00e      	b.n	8044ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8044c86:	687b      	ldr	r3, [r7, #4]
 8044c88:	2b0f      	cmp	r3, #15
 8044c8a:	d80a      	bhi.n	8044ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8044c8c:	2200      	movs	r2, #0
 8044c8e:	6879      	ldr	r1, [r7, #4]
 8044c90:	f04f 30ff 	mov.w	r0, #4294967295
 8044c94:	f000 f953 	bl	8044f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8044c98:	4a06      	ldr	r2, [pc, #24]	; (8044cb4 <HAL_InitTick+0x5c>)
 8044c9a:	687b      	ldr	r3, [r7, #4]
 8044c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8044c9e:	2300      	movs	r3, #0
 8044ca0:	e000      	b.n	8044ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8044ca2:	2301      	movs	r3, #1
}
 8044ca4:	4618      	mov	r0, r3
 8044ca6:	3708      	adds	r7, #8
 8044ca8:	46bd      	mov	sp, r7
 8044caa:	bd80      	pop	{r7, pc}
 8044cac:	20000008 	.word	0x20000008
 8044cb0:	20000010 	.word	0x20000010
 8044cb4:	2000000c 	.word	0x2000000c

08044cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8044cb8:	b480      	push	{r7}
 8044cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8044cbc:	4b06      	ldr	r3, [pc, #24]	; (8044cd8 <HAL_IncTick+0x20>)
 8044cbe:	781b      	ldrb	r3, [r3, #0]
 8044cc0:	461a      	mov	r2, r3
 8044cc2:	4b06      	ldr	r3, [pc, #24]	; (8044cdc <HAL_IncTick+0x24>)
 8044cc4:	681b      	ldr	r3, [r3, #0]
 8044cc6:	4413      	add	r3, r2
 8044cc8:	4a04      	ldr	r2, [pc, #16]	; (8044cdc <HAL_IncTick+0x24>)
 8044cca:	6013      	str	r3, [r2, #0]
}
 8044ccc:	bf00      	nop
 8044cce:	46bd      	mov	sp, r7
 8044cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044cd4:	4770      	bx	lr
 8044cd6:	bf00      	nop
 8044cd8:	20000010 	.word	0x20000010
 8044cdc:	200004fc 	.word	0x200004fc

08044ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8044ce0:	b480      	push	{r7}
 8044ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8044ce4:	4b03      	ldr	r3, [pc, #12]	; (8044cf4 <HAL_GetTick+0x14>)
 8044ce6:	681b      	ldr	r3, [r3, #0]
}
 8044ce8:	4618      	mov	r0, r3
 8044cea:	46bd      	mov	sp, r7
 8044cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044cf0:	4770      	bx	lr
 8044cf2:	bf00      	nop
 8044cf4:	200004fc 	.word	0x200004fc

08044cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8044cf8:	b580      	push	{r7, lr}
 8044cfa:	b084      	sub	sp, #16
 8044cfc:	af00      	add	r7, sp, #0
 8044cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8044d00:	f7ff ffee 	bl	8044ce0 <HAL_GetTick>
 8044d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8044d06:	687b      	ldr	r3, [r7, #4]
 8044d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8044d0a:	68fb      	ldr	r3, [r7, #12]
 8044d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044d10:	d005      	beq.n	8044d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8044d12:	4b0a      	ldr	r3, [pc, #40]	; (8044d3c <HAL_Delay+0x44>)
 8044d14:	781b      	ldrb	r3, [r3, #0]
 8044d16:	461a      	mov	r2, r3
 8044d18:	68fb      	ldr	r3, [r7, #12]
 8044d1a:	4413      	add	r3, r2
 8044d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8044d1e:	bf00      	nop
 8044d20:	f7ff ffde 	bl	8044ce0 <HAL_GetTick>
 8044d24:	4602      	mov	r2, r0
 8044d26:	68bb      	ldr	r3, [r7, #8]
 8044d28:	1ad3      	subs	r3, r2, r3
 8044d2a:	68fa      	ldr	r2, [r7, #12]
 8044d2c:	429a      	cmp	r2, r3
 8044d2e:	d8f7      	bhi.n	8044d20 <HAL_Delay+0x28>
  {
  }
}
 8044d30:	bf00      	nop
 8044d32:	bf00      	nop
 8044d34:	3710      	adds	r7, #16
 8044d36:	46bd      	mov	sp, r7
 8044d38:	bd80      	pop	{r7, pc}
 8044d3a:	bf00      	nop
 8044d3c:	20000010 	.word	0x20000010

08044d40 <__NVIC_SetPriorityGrouping>:
{
 8044d40:	b480      	push	{r7}
 8044d42:	b085      	sub	sp, #20
 8044d44:	af00      	add	r7, sp, #0
 8044d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8044d48:	687b      	ldr	r3, [r7, #4]
 8044d4a:	f003 0307 	and.w	r3, r3, #7
 8044d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8044d50:	4b0c      	ldr	r3, [pc, #48]	; (8044d84 <__NVIC_SetPriorityGrouping+0x44>)
 8044d52:	68db      	ldr	r3, [r3, #12]
 8044d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8044d56:	68ba      	ldr	r2, [r7, #8]
 8044d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8044d5c:	4013      	ands	r3, r2
 8044d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8044d60:	68fb      	ldr	r3, [r7, #12]
 8044d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8044d64:	68bb      	ldr	r3, [r7, #8]
 8044d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8044d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8044d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8044d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8044d72:	4a04      	ldr	r2, [pc, #16]	; (8044d84 <__NVIC_SetPriorityGrouping+0x44>)
 8044d74:	68bb      	ldr	r3, [r7, #8]
 8044d76:	60d3      	str	r3, [r2, #12]
}
 8044d78:	bf00      	nop
 8044d7a:	3714      	adds	r7, #20
 8044d7c:	46bd      	mov	sp, r7
 8044d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d82:	4770      	bx	lr
 8044d84:	e000ed00 	.word	0xe000ed00

08044d88 <__NVIC_GetPriorityGrouping>:
{
 8044d88:	b480      	push	{r7}
 8044d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8044d8c:	4b04      	ldr	r3, [pc, #16]	; (8044da0 <__NVIC_GetPriorityGrouping+0x18>)
 8044d8e:	68db      	ldr	r3, [r3, #12]
 8044d90:	0a1b      	lsrs	r3, r3, #8
 8044d92:	f003 0307 	and.w	r3, r3, #7
}
 8044d96:	4618      	mov	r0, r3
 8044d98:	46bd      	mov	sp, r7
 8044d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d9e:	4770      	bx	lr
 8044da0:	e000ed00 	.word	0xe000ed00

08044da4 <__NVIC_EnableIRQ>:
{
 8044da4:	b480      	push	{r7}
 8044da6:	b083      	sub	sp, #12
 8044da8:	af00      	add	r7, sp, #0
 8044daa:	4603      	mov	r3, r0
 8044dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044db2:	2b00      	cmp	r3, #0
 8044db4:	db0b      	blt.n	8044dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044db6:	79fb      	ldrb	r3, [r7, #7]
 8044db8:	f003 021f 	and.w	r2, r3, #31
 8044dbc:	4907      	ldr	r1, [pc, #28]	; (8044ddc <__NVIC_EnableIRQ+0x38>)
 8044dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044dc2:	095b      	lsrs	r3, r3, #5
 8044dc4:	2001      	movs	r0, #1
 8044dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8044dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8044dce:	bf00      	nop
 8044dd0:	370c      	adds	r7, #12
 8044dd2:	46bd      	mov	sp, r7
 8044dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044dd8:	4770      	bx	lr
 8044dda:	bf00      	nop
 8044ddc:	e000e100 	.word	0xe000e100

08044de0 <__NVIC_DisableIRQ>:
{
 8044de0:	b480      	push	{r7}
 8044de2:	b083      	sub	sp, #12
 8044de4:	af00      	add	r7, sp, #0
 8044de6:	4603      	mov	r3, r0
 8044de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044dee:	2b00      	cmp	r3, #0
 8044df0:	db12      	blt.n	8044e18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044df2:	79fb      	ldrb	r3, [r7, #7]
 8044df4:	f003 021f 	and.w	r2, r3, #31
 8044df8:	490a      	ldr	r1, [pc, #40]	; (8044e24 <__NVIC_DisableIRQ+0x44>)
 8044dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044dfe:	095b      	lsrs	r3, r3, #5
 8044e00:	2001      	movs	r0, #1
 8044e02:	fa00 f202 	lsl.w	r2, r0, r2
 8044e06:	3320      	adds	r3, #32
 8044e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8044e0c:	f3bf 8f4f 	dsb	sy
}
 8044e10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8044e12:	f3bf 8f6f 	isb	sy
}
 8044e16:	bf00      	nop
}
 8044e18:	bf00      	nop
 8044e1a:	370c      	adds	r7, #12
 8044e1c:	46bd      	mov	sp, r7
 8044e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e22:	4770      	bx	lr
 8044e24:	e000e100 	.word	0xe000e100

08044e28 <__NVIC_SetPriority>:
{
 8044e28:	b480      	push	{r7}
 8044e2a:	b083      	sub	sp, #12
 8044e2c:	af00      	add	r7, sp, #0
 8044e2e:	4603      	mov	r3, r0
 8044e30:	6039      	str	r1, [r7, #0]
 8044e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044e38:	2b00      	cmp	r3, #0
 8044e3a:	db0a      	blt.n	8044e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044e3c:	683b      	ldr	r3, [r7, #0]
 8044e3e:	b2da      	uxtb	r2, r3
 8044e40:	490c      	ldr	r1, [pc, #48]	; (8044e74 <__NVIC_SetPriority+0x4c>)
 8044e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044e46:	0112      	lsls	r2, r2, #4
 8044e48:	b2d2      	uxtb	r2, r2
 8044e4a:	440b      	add	r3, r1
 8044e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8044e50:	e00a      	b.n	8044e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044e52:	683b      	ldr	r3, [r7, #0]
 8044e54:	b2da      	uxtb	r2, r3
 8044e56:	4908      	ldr	r1, [pc, #32]	; (8044e78 <__NVIC_SetPriority+0x50>)
 8044e58:	79fb      	ldrb	r3, [r7, #7]
 8044e5a:	f003 030f 	and.w	r3, r3, #15
 8044e5e:	3b04      	subs	r3, #4
 8044e60:	0112      	lsls	r2, r2, #4
 8044e62:	b2d2      	uxtb	r2, r2
 8044e64:	440b      	add	r3, r1
 8044e66:	761a      	strb	r2, [r3, #24]
}
 8044e68:	bf00      	nop
 8044e6a:	370c      	adds	r7, #12
 8044e6c:	46bd      	mov	sp, r7
 8044e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e72:	4770      	bx	lr
 8044e74:	e000e100 	.word	0xe000e100
 8044e78:	e000ed00 	.word	0xe000ed00

08044e7c <NVIC_EncodePriority>:
{
 8044e7c:	b480      	push	{r7}
 8044e7e:	b089      	sub	sp, #36	; 0x24
 8044e80:	af00      	add	r7, sp, #0
 8044e82:	60f8      	str	r0, [r7, #12]
 8044e84:	60b9      	str	r1, [r7, #8]
 8044e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8044e88:	68fb      	ldr	r3, [r7, #12]
 8044e8a:	f003 0307 	and.w	r3, r3, #7
 8044e8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8044e90:	69fb      	ldr	r3, [r7, #28]
 8044e92:	f1c3 0307 	rsb	r3, r3, #7
 8044e96:	2b04      	cmp	r3, #4
 8044e98:	bf28      	it	cs
 8044e9a:	2304      	movcs	r3, #4
 8044e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8044e9e:	69fb      	ldr	r3, [r7, #28]
 8044ea0:	3304      	adds	r3, #4
 8044ea2:	2b06      	cmp	r3, #6
 8044ea4:	d902      	bls.n	8044eac <NVIC_EncodePriority+0x30>
 8044ea6:	69fb      	ldr	r3, [r7, #28]
 8044ea8:	3b03      	subs	r3, #3
 8044eaa:	e000      	b.n	8044eae <NVIC_EncodePriority+0x32>
 8044eac:	2300      	movs	r3, #0
 8044eae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8044eb4:	69bb      	ldr	r3, [r7, #24]
 8044eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8044eba:	43da      	mvns	r2, r3
 8044ebc:	68bb      	ldr	r3, [r7, #8]
 8044ebe:	401a      	ands	r2, r3
 8044ec0:	697b      	ldr	r3, [r7, #20]
 8044ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8044ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8044ec8:	697b      	ldr	r3, [r7, #20]
 8044eca:	fa01 f303 	lsl.w	r3, r1, r3
 8044ece:	43d9      	mvns	r1, r3
 8044ed0:	687b      	ldr	r3, [r7, #4]
 8044ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044ed4:	4313      	orrs	r3, r2
}
 8044ed6:	4618      	mov	r0, r3
 8044ed8:	3724      	adds	r7, #36	; 0x24
 8044eda:	46bd      	mov	sp, r7
 8044edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ee0:	4770      	bx	lr
	...

08044ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8044ee4:	b580      	push	{r7, lr}
 8044ee6:	b082      	sub	sp, #8
 8044ee8:	af00      	add	r7, sp, #0
 8044eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8044eec:	687b      	ldr	r3, [r7, #4]
 8044eee:	3b01      	subs	r3, #1
 8044ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8044ef4:	d301      	bcc.n	8044efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8044ef6:	2301      	movs	r3, #1
 8044ef8:	e00f      	b.n	8044f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8044efa:	4a0a      	ldr	r2, [pc, #40]	; (8044f24 <SysTick_Config+0x40>)
 8044efc:	687b      	ldr	r3, [r7, #4]
 8044efe:	3b01      	subs	r3, #1
 8044f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8044f02:	210f      	movs	r1, #15
 8044f04:	f04f 30ff 	mov.w	r0, #4294967295
 8044f08:	f7ff ff8e 	bl	8044e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8044f0c:	4b05      	ldr	r3, [pc, #20]	; (8044f24 <SysTick_Config+0x40>)
 8044f0e:	2200      	movs	r2, #0
 8044f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8044f12:	4b04      	ldr	r3, [pc, #16]	; (8044f24 <SysTick_Config+0x40>)
 8044f14:	2207      	movs	r2, #7
 8044f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8044f18:	2300      	movs	r3, #0
}
 8044f1a:	4618      	mov	r0, r3
 8044f1c:	3708      	adds	r7, #8
 8044f1e:	46bd      	mov	sp, r7
 8044f20:	bd80      	pop	{r7, pc}
 8044f22:	bf00      	nop
 8044f24:	e000e010 	.word	0xe000e010

08044f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8044f28:	b580      	push	{r7, lr}
 8044f2a:	b082      	sub	sp, #8
 8044f2c:	af00      	add	r7, sp, #0
 8044f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8044f30:	6878      	ldr	r0, [r7, #4]
 8044f32:	f7ff ff05 	bl	8044d40 <__NVIC_SetPriorityGrouping>
}
 8044f36:	bf00      	nop
 8044f38:	3708      	adds	r7, #8
 8044f3a:	46bd      	mov	sp, r7
 8044f3c:	bd80      	pop	{r7, pc}

08044f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8044f3e:	b580      	push	{r7, lr}
 8044f40:	b086      	sub	sp, #24
 8044f42:	af00      	add	r7, sp, #0
 8044f44:	4603      	mov	r3, r0
 8044f46:	60b9      	str	r1, [r7, #8]
 8044f48:	607a      	str	r2, [r7, #4]
 8044f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8044f4c:	2300      	movs	r3, #0
 8044f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8044f50:	f7ff ff1a 	bl	8044d88 <__NVIC_GetPriorityGrouping>
 8044f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8044f56:	687a      	ldr	r2, [r7, #4]
 8044f58:	68b9      	ldr	r1, [r7, #8]
 8044f5a:	6978      	ldr	r0, [r7, #20]
 8044f5c:	f7ff ff8e 	bl	8044e7c <NVIC_EncodePriority>
 8044f60:	4602      	mov	r2, r0
 8044f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8044f66:	4611      	mov	r1, r2
 8044f68:	4618      	mov	r0, r3
 8044f6a:	f7ff ff5d 	bl	8044e28 <__NVIC_SetPriority>
}
 8044f6e:	bf00      	nop
 8044f70:	3718      	adds	r7, #24
 8044f72:	46bd      	mov	sp, r7
 8044f74:	bd80      	pop	{r7, pc}

08044f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8044f76:	b580      	push	{r7, lr}
 8044f78:	b082      	sub	sp, #8
 8044f7a:	af00      	add	r7, sp, #0
 8044f7c:	4603      	mov	r3, r0
 8044f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8044f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044f84:	4618      	mov	r0, r3
 8044f86:	f7ff ff0d 	bl	8044da4 <__NVIC_EnableIRQ>
}
 8044f8a:	bf00      	nop
 8044f8c:	3708      	adds	r7, #8
 8044f8e:	46bd      	mov	sp, r7
 8044f90:	bd80      	pop	{r7, pc}

08044f92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8044f92:	b580      	push	{r7, lr}
 8044f94:	b082      	sub	sp, #8
 8044f96:	af00      	add	r7, sp, #0
 8044f98:	4603      	mov	r3, r0
 8044f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8044f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044fa0:	4618      	mov	r0, r3
 8044fa2:	f7ff ff1d 	bl	8044de0 <__NVIC_DisableIRQ>
}
 8044fa6:	bf00      	nop
 8044fa8:	3708      	adds	r7, #8
 8044faa:	46bd      	mov	sp, r7
 8044fac:	bd80      	pop	{r7, pc}

08044fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8044fae:	b580      	push	{r7, lr}
 8044fb0:	b082      	sub	sp, #8
 8044fb2:	af00      	add	r7, sp, #0
 8044fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8044fb6:	6878      	ldr	r0, [r7, #4]
 8044fb8:	f7ff ff94 	bl	8044ee4 <SysTick_Config>
 8044fbc:	4603      	mov	r3, r0
}
 8044fbe:	4618      	mov	r0, r3
 8044fc0:	3708      	adds	r7, #8
 8044fc2:	46bd      	mov	sp, r7
 8044fc4:	bd80      	pop	{r7, pc}
	...

08044fc8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8044fc8:	b580      	push	{r7, lr}
 8044fca:	b086      	sub	sp, #24
 8044fcc:	af00      	add	r7, sp, #0
 8044fce:	60f8      	str	r0, [r7, #12]
 8044fd0:	60b9      	str	r1, [r7, #8]
 8044fd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8044fd6:	2301      	movs	r3, #1
 8044fd8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8044fda:	4b23      	ldr	r3, [pc, #140]	; (8045068 <HAL_FLASH_Program+0xa0>)
 8044fdc:	7e1b      	ldrb	r3, [r3, #24]
 8044fde:	2b01      	cmp	r3, #1
 8044fe0:	d101      	bne.n	8044fe6 <HAL_FLASH_Program+0x1e>
 8044fe2:	2302      	movs	r3, #2
 8044fe4:	e03b      	b.n	804505e <HAL_FLASH_Program+0x96>
 8044fe6:	4b20      	ldr	r3, [pc, #128]	; (8045068 <HAL_FLASH_Program+0xa0>)
 8044fe8:	2201      	movs	r2, #1
 8044fea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044ff0:	f000 f870 	bl	80450d4 <FLASH_WaitForLastOperation>
 8044ff4:	4603      	mov	r3, r0
 8044ff6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8044ff8:	7dfb      	ldrb	r3, [r7, #23]
 8044ffa:	2b00      	cmp	r3, #0
 8044ffc:	d12b      	bne.n	8045056 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8044ffe:	68fb      	ldr	r3, [r7, #12]
 8045000:	2b00      	cmp	r3, #0
 8045002:	d105      	bne.n	8045010 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8045004:	783b      	ldrb	r3, [r7, #0]
 8045006:	4619      	mov	r1, r3
 8045008:	68b8      	ldr	r0, [r7, #8]
 804500a:	f000 f91b 	bl	8045244 <FLASH_Program_Byte>
 804500e:	e016      	b.n	804503e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8045010:	68fb      	ldr	r3, [r7, #12]
 8045012:	2b01      	cmp	r3, #1
 8045014:	d105      	bne.n	8045022 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8045016:	883b      	ldrh	r3, [r7, #0]
 8045018:	4619      	mov	r1, r3
 804501a:	68b8      	ldr	r0, [r7, #8]
 804501c:	f000 f8ee 	bl	80451fc <FLASH_Program_HalfWord>
 8045020:	e00d      	b.n	804503e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8045022:	68fb      	ldr	r3, [r7, #12]
 8045024:	2b02      	cmp	r3, #2
 8045026:	d105      	bne.n	8045034 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8045028:	683b      	ldr	r3, [r7, #0]
 804502a:	4619      	mov	r1, r3
 804502c:	68b8      	ldr	r0, [r7, #8]
 804502e:	f000 f8c3 	bl	80451b8 <FLASH_Program_Word>
 8045032:	e004      	b.n	804503e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8045034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8045038:	68b8      	ldr	r0, [r7, #8]
 804503a:	f000 f88b 	bl	8045154 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804503e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8045042:	f000 f847 	bl	80450d4 <FLASH_WaitForLastOperation>
 8045046:	4603      	mov	r3, r0
 8045048:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 804504a:	4b08      	ldr	r3, [pc, #32]	; (804506c <HAL_FLASH_Program+0xa4>)
 804504c:	691b      	ldr	r3, [r3, #16]
 804504e:	4a07      	ldr	r2, [pc, #28]	; (804506c <HAL_FLASH_Program+0xa4>)
 8045050:	f023 0301 	bic.w	r3, r3, #1
 8045054:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8045056:	4b04      	ldr	r3, [pc, #16]	; (8045068 <HAL_FLASH_Program+0xa0>)
 8045058:	2200      	movs	r2, #0
 804505a:	761a      	strb	r2, [r3, #24]
  
  return status;
 804505c:	7dfb      	ldrb	r3, [r7, #23]
}
 804505e:	4618      	mov	r0, r3
 8045060:	3718      	adds	r7, #24
 8045062:	46bd      	mov	sp, r7
 8045064:	bd80      	pop	{r7, pc}
 8045066:	bf00      	nop
 8045068:	20000500 	.word	0x20000500
 804506c:	40023c00 	.word	0x40023c00

08045070 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8045070:	b480      	push	{r7}
 8045072:	b083      	sub	sp, #12
 8045074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8045076:	2300      	movs	r3, #0
 8045078:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 804507a:	4b0b      	ldr	r3, [pc, #44]	; (80450a8 <HAL_FLASH_Unlock+0x38>)
 804507c:	691b      	ldr	r3, [r3, #16]
 804507e:	2b00      	cmp	r3, #0
 8045080:	da0b      	bge.n	804509a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8045082:	4b09      	ldr	r3, [pc, #36]	; (80450a8 <HAL_FLASH_Unlock+0x38>)
 8045084:	4a09      	ldr	r2, [pc, #36]	; (80450ac <HAL_FLASH_Unlock+0x3c>)
 8045086:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8045088:	4b07      	ldr	r3, [pc, #28]	; (80450a8 <HAL_FLASH_Unlock+0x38>)
 804508a:	4a09      	ldr	r2, [pc, #36]	; (80450b0 <HAL_FLASH_Unlock+0x40>)
 804508c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 804508e:	4b06      	ldr	r3, [pc, #24]	; (80450a8 <HAL_FLASH_Unlock+0x38>)
 8045090:	691b      	ldr	r3, [r3, #16]
 8045092:	2b00      	cmp	r3, #0
 8045094:	da01      	bge.n	804509a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8045096:	2301      	movs	r3, #1
 8045098:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 804509a:	79fb      	ldrb	r3, [r7, #7]
}
 804509c:	4618      	mov	r0, r3
 804509e:	370c      	adds	r7, #12
 80450a0:	46bd      	mov	sp, r7
 80450a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450a6:	4770      	bx	lr
 80450a8:	40023c00 	.word	0x40023c00
 80450ac:	45670123 	.word	0x45670123
 80450b0:	cdef89ab 	.word	0xcdef89ab

080450b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80450b4:	b480      	push	{r7}
 80450b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80450b8:	4b05      	ldr	r3, [pc, #20]	; (80450d0 <HAL_FLASH_Lock+0x1c>)
 80450ba:	691b      	ldr	r3, [r3, #16]
 80450bc:	4a04      	ldr	r2, [pc, #16]	; (80450d0 <HAL_FLASH_Lock+0x1c>)
 80450be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80450c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80450c4:	2300      	movs	r3, #0
}
 80450c6:	4618      	mov	r0, r3
 80450c8:	46bd      	mov	sp, r7
 80450ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450ce:	4770      	bx	lr
 80450d0:	40023c00 	.word	0x40023c00

080450d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80450d4:	b580      	push	{r7, lr}
 80450d6:	b084      	sub	sp, #16
 80450d8:	af00      	add	r7, sp, #0
 80450da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80450dc:	2300      	movs	r3, #0
 80450de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80450e0:	4b1a      	ldr	r3, [pc, #104]	; (804514c <FLASH_WaitForLastOperation+0x78>)
 80450e2:	2200      	movs	r2, #0
 80450e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80450e6:	f7ff fdfb 	bl	8044ce0 <HAL_GetTick>
 80450ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80450ec:	e010      	b.n	8045110 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80450ee:	687b      	ldr	r3, [r7, #4]
 80450f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80450f4:	d00c      	beq.n	8045110 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80450f6:	687b      	ldr	r3, [r7, #4]
 80450f8:	2b00      	cmp	r3, #0
 80450fa:	d007      	beq.n	804510c <FLASH_WaitForLastOperation+0x38>
 80450fc:	f7ff fdf0 	bl	8044ce0 <HAL_GetTick>
 8045100:	4602      	mov	r2, r0
 8045102:	68fb      	ldr	r3, [r7, #12]
 8045104:	1ad3      	subs	r3, r2, r3
 8045106:	687a      	ldr	r2, [r7, #4]
 8045108:	429a      	cmp	r2, r3
 804510a:	d201      	bcs.n	8045110 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 804510c:	2303      	movs	r3, #3
 804510e:	e019      	b.n	8045144 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8045110:	4b0f      	ldr	r3, [pc, #60]	; (8045150 <FLASH_WaitForLastOperation+0x7c>)
 8045112:	68db      	ldr	r3, [r3, #12]
 8045114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045118:	2b00      	cmp	r3, #0
 804511a:	d1e8      	bne.n	80450ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 804511c:	4b0c      	ldr	r3, [pc, #48]	; (8045150 <FLASH_WaitForLastOperation+0x7c>)
 804511e:	68db      	ldr	r3, [r3, #12]
 8045120:	f003 0301 	and.w	r3, r3, #1
 8045124:	2b00      	cmp	r3, #0
 8045126:	d002      	beq.n	804512e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8045128:	4b09      	ldr	r3, [pc, #36]	; (8045150 <FLASH_WaitForLastOperation+0x7c>)
 804512a:	2201      	movs	r2, #1
 804512c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 804512e:	4b08      	ldr	r3, [pc, #32]	; (8045150 <FLASH_WaitForLastOperation+0x7c>)
 8045130:	68db      	ldr	r3, [r3, #12]
 8045132:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8045136:	2b00      	cmp	r3, #0
 8045138:	d003      	beq.n	8045142 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 804513a:	f000 f8a5 	bl	8045288 <FLASH_SetErrorCode>
    return HAL_ERROR;
 804513e:	2301      	movs	r3, #1
 8045140:	e000      	b.n	8045144 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8045142:	2300      	movs	r3, #0
  
}  
 8045144:	4618      	mov	r0, r3
 8045146:	3710      	adds	r7, #16
 8045148:	46bd      	mov	sp, r7
 804514a:	bd80      	pop	{r7, pc}
 804514c:	20000500 	.word	0x20000500
 8045150:	40023c00 	.word	0x40023c00

08045154 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8045154:	b480      	push	{r7}
 8045156:	b085      	sub	sp, #20
 8045158:	af00      	add	r7, sp, #0
 804515a:	60f8      	str	r0, [r7, #12]
 804515c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045160:	4b14      	ldr	r3, [pc, #80]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 8045162:	691b      	ldr	r3, [r3, #16]
 8045164:	4a13      	ldr	r2, [pc, #76]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 8045166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804516a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 804516c:	4b11      	ldr	r3, [pc, #68]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 804516e:	691b      	ldr	r3, [r3, #16]
 8045170:	4a10      	ldr	r2, [pc, #64]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 8045172:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8045176:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045178:	4b0e      	ldr	r3, [pc, #56]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 804517a:	691b      	ldr	r3, [r3, #16]
 804517c:	4a0d      	ldr	r2, [pc, #52]	; (80451b4 <FLASH_Program_DoubleWord+0x60>)
 804517e:	f043 0301 	orr.w	r3, r3, #1
 8045182:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8045184:	68fb      	ldr	r3, [r7, #12]
 8045186:	683a      	ldr	r2, [r7, #0]
 8045188:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 804518a:	f3bf 8f6f 	isb	sy
}
 804518e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8045190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8045194:	f04f 0200 	mov.w	r2, #0
 8045198:	f04f 0300 	mov.w	r3, #0
 804519c:	000a      	movs	r2, r1
 804519e:	2300      	movs	r3, #0
 80451a0:	68f9      	ldr	r1, [r7, #12]
 80451a2:	3104      	adds	r1, #4
 80451a4:	4613      	mov	r3, r2
 80451a6:	600b      	str	r3, [r1, #0]
}
 80451a8:	bf00      	nop
 80451aa:	3714      	adds	r7, #20
 80451ac:	46bd      	mov	sp, r7
 80451ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451b2:	4770      	bx	lr
 80451b4:	40023c00 	.word	0x40023c00

080451b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80451b8:	b480      	push	{r7}
 80451ba:	b083      	sub	sp, #12
 80451bc:	af00      	add	r7, sp, #0
 80451be:	6078      	str	r0, [r7, #4]
 80451c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80451c2:	4b0d      	ldr	r3, [pc, #52]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451c4:	691b      	ldr	r3, [r3, #16]
 80451c6:	4a0c      	ldr	r2, [pc, #48]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80451cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80451ce:	4b0a      	ldr	r3, [pc, #40]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451d0:	691b      	ldr	r3, [r3, #16]
 80451d2:	4a09      	ldr	r2, [pc, #36]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80451d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80451da:	4b07      	ldr	r3, [pc, #28]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451dc:	691b      	ldr	r3, [r3, #16]
 80451de:	4a06      	ldr	r2, [pc, #24]	; (80451f8 <FLASH_Program_Word+0x40>)
 80451e0:	f043 0301 	orr.w	r3, r3, #1
 80451e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80451e6:	687b      	ldr	r3, [r7, #4]
 80451e8:	683a      	ldr	r2, [r7, #0]
 80451ea:	601a      	str	r2, [r3, #0]
}
 80451ec:	bf00      	nop
 80451ee:	370c      	adds	r7, #12
 80451f0:	46bd      	mov	sp, r7
 80451f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451f6:	4770      	bx	lr
 80451f8:	40023c00 	.word	0x40023c00

080451fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80451fc:	b480      	push	{r7}
 80451fe:	b083      	sub	sp, #12
 8045200:	af00      	add	r7, sp, #0
 8045202:	6078      	str	r0, [r7, #4]
 8045204:	460b      	mov	r3, r1
 8045206:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045208:	4b0d      	ldr	r3, [pc, #52]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 804520a:	691b      	ldr	r3, [r3, #16]
 804520c:	4a0c      	ldr	r2, [pc, #48]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 804520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8045214:	4b0a      	ldr	r3, [pc, #40]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 8045216:	691b      	ldr	r3, [r3, #16]
 8045218:	4a09      	ldr	r2, [pc, #36]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 804521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804521e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045220:	4b07      	ldr	r3, [pc, #28]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 8045222:	691b      	ldr	r3, [r3, #16]
 8045224:	4a06      	ldr	r2, [pc, #24]	; (8045240 <FLASH_Program_HalfWord+0x44>)
 8045226:	f043 0301 	orr.w	r3, r3, #1
 804522a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 804522c:	687b      	ldr	r3, [r7, #4]
 804522e:	887a      	ldrh	r2, [r7, #2]
 8045230:	801a      	strh	r2, [r3, #0]
}
 8045232:	bf00      	nop
 8045234:	370c      	adds	r7, #12
 8045236:	46bd      	mov	sp, r7
 8045238:	f85d 7b04 	ldr.w	r7, [sp], #4
 804523c:	4770      	bx	lr
 804523e:	bf00      	nop
 8045240:	40023c00 	.word	0x40023c00

08045244 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8045244:	b480      	push	{r7}
 8045246:	b083      	sub	sp, #12
 8045248:	af00      	add	r7, sp, #0
 804524a:	6078      	str	r0, [r7, #4]
 804524c:	460b      	mov	r3, r1
 804524e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045250:	4b0c      	ldr	r3, [pc, #48]	; (8045284 <FLASH_Program_Byte+0x40>)
 8045252:	691b      	ldr	r3, [r3, #16]
 8045254:	4a0b      	ldr	r2, [pc, #44]	; (8045284 <FLASH_Program_Byte+0x40>)
 8045256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804525a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 804525c:	4b09      	ldr	r3, [pc, #36]	; (8045284 <FLASH_Program_Byte+0x40>)
 804525e:	4a09      	ldr	r2, [pc, #36]	; (8045284 <FLASH_Program_Byte+0x40>)
 8045260:	691b      	ldr	r3, [r3, #16]
 8045262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045264:	4b07      	ldr	r3, [pc, #28]	; (8045284 <FLASH_Program_Byte+0x40>)
 8045266:	691b      	ldr	r3, [r3, #16]
 8045268:	4a06      	ldr	r2, [pc, #24]	; (8045284 <FLASH_Program_Byte+0x40>)
 804526a:	f043 0301 	orr.w	r3, r3, #1
 804526e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8045270:	687b      	ldr	r3, [r7, #4]
 8045272:	78fa      	ldrb	r2, [r7, #3]
 8045274:	701a      	strb	r2, [r3, #0]
}
 8045276:	bf00      	nop
 8045278:	370c      	adds	r7, #12
 804527a:	46bd      	mov	sp, r7
 804527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045280:	4770      	bx	lr
 8045282:	bf00      	nop
 8045284:	40023c00 	.word	0x40023c00

08045288 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8045288:	b480      	push	{r7}
 804528a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 804528c:	4b27      	ldr	r3, [pc, #156]	; (804532c <FLASH_SetErrorCode+0xa4>)
 804528e:	68db      	ldr	r3, [r3, #12]
 8045290:	f003 0310 	and.w	r3, r3, #16
 8045294:	2b00      	cmp	r3, #0
 8045296:	d008      	beq.n	80452aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8045298:	4b25      	ldr	r3, [pc, #148]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 804529a:	69db      	ldr	r3, [r3, #28]
 804529c:	f043 0310 	orr.w	r3, r3, #16
 80452a0:	4a23      	ldr	r2, [pc, #140]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80452a4:	4b21      	ldr	r3, [pc, #132]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452a6:	2210      	movs	r2, #16
 80452a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80452aa:	4b20      	ldr	r3, [pc, #128]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452ac:	68db      	ldr	r3, [r3, #12]
 80452ae:	f003 0320 	and.w	r3, r3, #32
 80452b2:	2b00      	cmp	r3, #0
 80452b4:	d008      	beq.n	80452c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80452b6:	4b1e      	ldr	r3, [pc, #120]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452b8:	69db      	ldr	r3, [r3, #28]
 80452ba:	f043 0308 	orr.w	r3, r3, #8
 80452be:	4a1c      	ldr	r2, [pc, #112]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80452c2:	4b1a      	ldr	r3, [pc, #104]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452c4:	2220      	movs	r2, #32
 80452c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80452c8:	4b18      	ldr	r3, [pc, #96]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452ca:	68db      	ldr	r3, [r3, #12]
 80452cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80452d0:	2b00      	cmp	r3, #0
 80452d2:	d008      	beq.n	80452e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80452d4:	4b16      	ldr	r3, [pc, #88]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452d6:	69db      	ldr	r3, [r3, #28]
 80452d8:	f043 0304 	orr.w	r3, r3, #4
 80452dc:	4a14      	ldr	r2, [pc, #80]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80452e0:	4b12      	ldr	r3, [pc, #72]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452e2:	2240      	movs	r2, #64	; 0x40
 80452e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80452e6:	4b11      	ldr	r3, [pc, #68]	; (804532c <FLASH_SetErrorCode+0xa4>)
 80452e8:	68db      	ldr	r3, [r3, #12]
 80452ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80452ee:	2b00      	cmp	r3, #0
 80452f0:	d008      	beq.n	8045304 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80452f2:	4b0f      	ldr	r3, [pc, #60]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452f4:	69db      	ldr	r3, [r3, #28]
 80452f6:	f043 0302 	orr.w	r3, r3, #2
 80452fa:	4a0d      	ldr	r2, [pc, #52]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 80452fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80452fe:	4b0b      	ldr	r3, [pc, #44]	; (804532c <FLASH_SetErrorCode+0xa4>)
 8045300:	2280      	movs	r2, #128	; 0x80
 8045302:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8045304:	4b09      	ldr	r3, [pc, #36]	; (804532c <FLASH_SetErrorCode+0xa4>)
 8045306:	68db      	ldr	r3, [r3, #12]
 8045308:	f003 0302 	and.w	r3, r3, #2
 804530c:	2b00      	cmp	r3, #0
 804530e:	d008      	beq.n	8045322 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8045310:	4b07      	ldr	r3, [pc, #28]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 8045312:	69db      	ldr	r3, [r3, #28]
 8045314:	f043 0320 	orr.w	r3, r3, #32
 8045318:	4a05      	ldr	r2, [pc, #20]	; (8045330 <FLASH_SetErrorCode+0xa8>)
 804531a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 804531c:	4b03      	ldr	r3, [pc, #12]	; (804532c <FLASH_SetErrorCode+0xa4>)
 804531e:	2202      	movs	r2, #2
 8045320:	60da      	str	r2, [r3, #12]
  }
}
 8045322:	bf00      	nop
 8045324:	46bd      	mov	sp, r7
 8045326:	f85d 7b04 	ldr.w	r7, [sp], #4
 804532a:	4770      	bx	lr
 804532c:	40023c00 	.word	0x40023c00
 8045330:	20000500 	.word	0x20000500

08045334 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8045334:	b580      	push	{r7, lr}
 8045336:	b084      	sub	sp, #16
 8045338:	af00      	add	r7, sp, #0
 804533a:	6078      	str	r0, [r7, #4]
 804533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 804533e:	2301      	movs	r3, #1
 8045340:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8045342:	2300      	movs	r3, #0
 8045344:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8045346:	4b31      	ldr	r3, [pc, #196]	; (804540c <HAL_FLASHEx_Erase+0xd8>)
 8045348:	7e1b      	ldrb	r3, [r3, #24]
 804534a:	2b01      	cmp	r3, #1
 804534c:	d101      	bne.n	8045352 <HAL_FLASHEx_Erase+0x1e>
 804534e:	2302      	movs	r3, #2
 8045350:	e058      	b.n	8045404 <HAL_FLASHEx_Erase+0xd0>
 8045352:	4b2e      	ldr	r3, [pc, #184]	; (804540c <HAL_FLASHEx_Erase+0xd8>)
 8045354:	2201      	movs	r2, #1
 8045356:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8045358:	f24c 3050 	movw	r0, #50000	; 0xc350
 804535c:	f7ff feba 	bl	80450d4 <FLASH_WaitForLastOperation>
 8045360:	4603      	mov	r3, r0
 8045362:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8045364:	7bfb      	ldrb	r3, [r7, #15]
 8045366:	2b00      	cmp	r3, #0
 8045368:	d148      	bne.n	80453fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 804536a:	683b      	ldr	r3, [r7, #0]
 804536c:	f04f 32ff 	mov.w	r2, #4294967295
 8045370:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8045372:	687b      	ldr	r3, [r7, #4]
 8045374:	681b      	ldr	r3, [r3, #0]
 8045376:	2b01      	cmp	r3, #1
 8045378:	d115      	bne.n	80453a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 804537a:	687b      	ldr	r3, [r7, #4]
 804537c:	691b      	ldr	r3, [r3, #16]
 804537e:	b2da      	uxtb	r2, r3
 8045380:	687b      	ldr	r3, [r7, #4]
 8045382:	685b      	ldr	r3, [r3, #4]
 8045384:	4619      	mov	r1, r3
 8045386:	4610      	mov	r0, r2
 8045388:	f000 f844 	bl	8045414 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804538c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8045390:	f7ff fea0 	bl	80450d4 <FLASH_WaitForLastOperation>
 8045394:	4603      	mov	r3, r0
 8045396:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8045398:	4b1d      	ldr	r3, [pc, #116]	; (8045410 <HAL_FLASHEx_Erase+0xdc>)
 804539a:	691b      	ldr	r3, [r3, #16]
 804539c:	4a1c      	ldr	r2, [pc, #112]	; (8045410 <HAL_FLASHEx_Erase+0xdc>)
 804539e:	f023 0304 	bic.w	r3, r3, #4
 80453a2:	6113      	str	r3, [r2, #16]
 80453a4:	e028      	b.n	80453f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80453a6:	687b      	ldr	r3, [r7, #4]
 80453a8:	689b      	ldr	r3, [r3, #8]
 80453aa:	60bb      	str	r3, [r7, #8]
 80453ac:	e01c      	b.n	80453e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80453ae:	687b      	ldr	r3, [r7, #4]
 80453b0:	691b      	ldr	r3, [r3, #16]
 80453b2:	b2db      	uxtb	r3, r3
 80453b4:	4619      	mov	r1, r3
 80453b6:	68b8      	ldr	r0, [r7, #8]
 80453b8:	f000 f850 	bl	804545c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80453bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80453c0:	f7ff fe88 	bl	80450d4 <FLASH_WaitForLastOperation>
 80453c4:	4603      	mov	r3, r0
 80453c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80453c8:	4b11      	ldr	r3, [pc, #68]	; (8045410 <HAL_FLASHEx_Erase+0xdc>)
 80453ca:	691b      	ldr	r3, [r3, #16]
 80453cc:	4a10      	ldr	r2, [pc, #64]	; (8045410 <HAL_FLASHEx_Erase+0xdc>)
 80453ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80453d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80453d4:	7bfb      	ldrb	r3, [r7, #15]
 80453d6:	2b00      	cmp	r3, #0
 80453d8:	d003      	beq.n	80453e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80453da:	683b      	ldr	r3, [r7, #0]
 80453dc:	68ba      	ldr	r2, [r7, #8]
 80453de:	601a      	str	r2, [r3, #0]
          break;
 80453e0:	e00a      	b.n	80453f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80453e2:	68bb      	ldr	r3, [r7, #8]
 80453e4:	3301      	adds	r3, #1
 80453e6:	60bb      	str	r3, [r7, #8]
 80453e8:	687b      	ldr	r3, [r7, #4]
 80453ea:	68da      	ldr	r2, [r3, #12]
 80453ec:	687b      	ldr	r3, [r7, #4]
 80453ee:	689b      	ldr	r3, [r3, #8]
 80453f0:	4413      	add	r3, r2
 80453f2:	68ba      	ldr	r2, [r7, #8]
 80453f4:	429a      	cmp	r2, r3
 80453f6:	d3da      	bcc.n	80453ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80453f8:	f000 f878 	bl	80454ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80453fc:	4b03      	ldr	r3, [pc, #12]	; (804540c <HAL_FLASHEx_Erase+0xd8>)
 80453fe:	2200      	movs	r2, #0
 8045400:	761a      	strb	r2, [r3, #24]

  return status;
 8045402:	7bfb      	ldrb	r3, [r7, #15]
}
 8045404:	4618      	mov	r0, r3
 8045406:	3710      	adds	r7, #16
 8045408:	46bd      	mov	sp, r7
 804540a:	bd80      	pop	{r7, pc}
 804540c:	20000500 	.word	0x20000500
 8045410:	40023c00 	.word	0x40023c00

08045414 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8045414:	b480      	push	{r7}
 8045416:	b083      	sub	sp, #12
 8045418:	af00      	add	r7, sp, #0
 804541a:	4603      	mov	r3, r0
 804541c:	6039      	str	r1, [r7, #0]
 804541e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045420:	4b0d      	ldr	r3, [pc, #52]	; (8045458 <FLASH_MassErase+0x44>)
 8045422:	691b      	ldr	r3, [r3, #16]
 8045424:	4a0c      	ldr	r2, [pc, #48]	; (8045458 <FLASH_MassErase+0x44>)
 8045426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804542a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 804542c:	4b0a      	ldr	r3, [pc, #40]	; (8045458 <FLASH_MassErase+0x44>)
 804542e:	691b      	ldr	r3, [r3, #16]
 8045430:	4a09      	ldr	r2, [pc, #36]	; (8045458 <FLASH_MassErase+0x44>)
 8045432:	f043 0304 	orr.w	r3, r3, #4
 8045436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8045438:	4b07      	ldr	r3, [pc, #28]	; (8045458 <FLASH_MassErase+0x44>)
 804543a:	691a      	ldr	r2, [r3, #16]
 804543c:	79fb      	ldrb	r3, [r7, #7]
 804543e:	021b      	lsls	r3, r3, #8
 8045440:	4313      	orrs	r3, r2
 8045442:	4a05      	ldr	r2, [pc, #20]	; (8045458 <FLASH_MassErase+0x44>)
 8045444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8045448:	6113      	str	r3, [r2, #16]
}
 804544a:	bf00      	nop
 804544c:	370c      	adds	r7, #12
 804544e:	46bd      	mov	sp, r7
 8045450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045454:	4770      	bx	lr
 8045456:	bf00      	nop
 8045458:	40023c00 	.word	0x40023c00

0804545c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 804545c:	b480      	push	{r7}
 804545e:	b085      	sub	sp, #20
 8045460:	af00      	add	r7, sp, #0
 8045462:	6078      	str	r0, [r7, #4]
 8045464:	460b      	mov	r3, r1
 8045466:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8045468:	2300      	movs	r3, #0
 804546a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 804546c:	78fb      	ldrb	r3, [r7, #3]
 804546e:	2b00      	cmp	r3, #0
 8045470:	d102      	bne.n	8045478 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8045472:	2300      	movs	r3, #0
 8045474:	60fb      	str	r3, [r7, #12]
 8045476:	e010      	b.n	804549a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8045478:	78fb      	ldrb	r3, [r7, #3]
 804547a:	2b01      	cmp	r3, #1
 804547c:	d103      	bne.n	8045486 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 804547e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045482:	60fb      	str	r3, [r7, #12]
 8045484:	e009      	b.n	804549a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8045486:	78fb      	ldrb	r3, [r7, #3]
 8045488:	2b02      	cmp	r3, #2
 804548a:	d103      	bne.n	8045494 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 804548c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045490:	60fb      	str	r3, [r7, #12]
 8045492:	e002      	b.n	804549a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8045494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8045498:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804549a:	4b13      	ldr	r3, [pc, #76]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 804549c:	691b      	ldr	r3, [r3, #16]
 804549e:	4a12      	ldr	r2, [pc, #72]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80454a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80454a6:	4b10      	ldr	r3, [pc, #64]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454a8:	691a      	ldr	r2, [r3, #16]
 80454aa:	490f      	ldr	r1, [pc, #60]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454ac:	68fb      	ldr	r3, [r7, #12]
 80454ae:	4313      	orrs	r3, r2
 80454b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80454b2:	4b0d      	ldr	r3, [pc, #52]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454b4:	691b      	ldr	r3, [r3, #16]
 80454b6:	4a0c      	ldr	r2, [pc, #48]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80454bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80454be:	4b0a      	ldr	r3, [pc, #40]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454c0:	691a      	ldr	r2, [r3, #16]
 80454c2:	687b      	ldr	r3, [r7, #4]
 80454c4:	00db      	lsls	r3, r3, #3
 80454c6:	4313      	orrs	r3, r2
 80454c8:	4a07      	ldr	r2, [pc, #28]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454ca:	f043 0302 	orr.w	r3, r3, #2
 80454ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80454d0:	4b05      	ldr	r3, [pc, #20]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454d2:	691b      	ldr	r3, [r3, #16]
 80454d4:	4a04      	ldr	r2, [pc, #16]	; (80454e8 <FLASH_Erase_Sector+0x8c>)
 80454d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80454da:	6113      	str	r3, [r2, #16]
}
 80454dc:	bf00      	nop
 80454de:	3714      	adds	r7, #20
 80454e0:	46bd      	mov	sp, r7
 80454e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454e6:	4770      	bx	lr
 80454e8:	40023c00 	.word	0x40023c00

080454ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80454ec:	b480      	push	{r7}
 80454ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80454f0:	4b20      	ldr	r3, [pc, #128]	; (8045574 <FLASH_FlushCaches+0x88>)
 80454f2:	681b      	ldr	r3, [r3, #0]
 80454f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80454f8:	2b00      	cmp	r3, #0
 80454fa:	d017      	beq.n	804552c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80454fc:	4b1d      	ldr	r3, [pc, #116]	; (8045574 <FLASH_FlushCaches+0x88>)
 80454fe:	681b      	ldr	r3, [r3, #0]
 8045500:	4a1c      	ldr	r2, [pc, #112]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8045506:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8045508:	4b1a      	ldr	r3, [pc, #104]	; (8045574 <FLASH_FlushCaches+0x88>)
 804550a:	681b      	ldr	r3, [r3, #0]
 804550c:	4a19      	ldr	r2, [pc, #100]	; (8045574 <FLASH_FlushCaches+0x88>)
 804550e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8045512:	6013      	str	r3, [r2, #0]
 8045514:	4b17      	ldr	r3, [pc, #92]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045516:	681b      	ldr	r3, [r3, #0]
 8045518:	4a16      	ldr	r2, [pc, #88]	; (8045574 <FLASH_FlushCaches+0x88>)
 804551a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804551e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8045520:	4b14      	ldr	r3, [pc, #80]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045522:	681b      	ldr	r3, [r3, #0]
 8045524:	4a13      	ldr	r2, [pc, #76]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804552a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804552c:	4b11      	ldr	r3, [pc, #68]	; (8045574 <FLASH_FlushCaches+0x88>)
 804552e:	681b      	ldr	r3, [r3, #0]
 8045530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045534:	2b00      	cmp	r3, #0
 8045536:	d017      	beq.n	8045568 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8045538:	4b0e      	ldr	r3, [pc, #56]	; (8045574 <FLASH_FlushCaches+0x88>)
 804553a:	681b      	ldr	r3, [r3, #0]
 804553c:	4a0d      	ldr	r2, [pc, #52]	; (8045574 <FLASH_FlushCaches+0x88>)
 804553e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8045542:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8045544:	4b0b      	ldr	r3, [pc, #44]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045546:	681b      	ldr	r3, [r3, #0]
 8045548:	4a0a      	ldr	r2, [pc, #40]	; (8045574 <FLASH_FlushCaches+0x88>)
 804554a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804554e:	6013      	str	r3, [r2, #0]
 8045550:	4b08      	ldr	r3, [pc, #32]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045552:	681b      	ldr	r3, [r3, #0]
 8045554:	4a07      	ldr	r2, [pc, #28]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804555a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 804555c:	4b05      	ldr	r3, [pc, #20]	; (8045574 <FLASH_FlushCaches+0x88>)
 804555e:	681b      	ldr	r3, [r3, #0]
 8045560:	4a04      	ldr	r2, [pc, #16]	; (8045574 <FLASH_FlushCaches+0x88>)
 8045562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8045566:	6013      	str	r3, [r2, #0]
  }
}
 8045568:	bf00      	nop
 804556a:	46bd      	mov	sp, r7
 804556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045570:	4770      	bx	lr
 8045572:	bf00      	nop
 8045574:	40023c00 	.word	0x40023c00

08045578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8045578:	b480      	push	{r7}
 804557a:	b089      	sub	sp, #36	; 0x24
 804557c:	af00      	add	r7, sp, #0
 804557e:	6078      	str	r0, [r7, #4]
 8045580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8045582:	2300      	movs	r3, #0
 8045584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8045586:	2300      	movs	r3, #0
 8045588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 804558a:	2300      	movs	r3, #0
 804558c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 804558e:	2300      	movs	r3, #0
 8045590:	61fb      	str	r3, [r7, #28]
 8045592:	e16b      	b.n	804586c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8045594:	2201      	movs	r2, #1
 8045596:	69fb      	ldr	r3, [r7, #28]
 8045598:	fa02 f303 	lsl.w	r3, r2, r3
 804559c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804559e:	683b      	ldr	r3, [r7, #0]
 80455a0:	681b      	ldr	r3, [r3, #0]
 80455a2:	697a      	ldr	r2, [r7, #20]
 80455a4:	4013      	ands	r3, r2
 80455a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80455a8:	693a      	ldr	r2, [r7, #16]
 80455aa:	697b      	ldr	r3, [r7, #20]
 80455ac:	429a      	cmp	r2, r3
 80455ae:	f040 815a 	bne.w	8045866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80455b2:	683b      	ldr	r3, [r7, #0]
 80455b4:	685b      	ldr	r3, [r3, #4]
 80455b6:	f003 0303 	and.w	r3, r3, #3
 80455ba:	2b01      	cmp	r3, #1
 80455bc:	d005      	beq.n	80455ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80455be:	683b      	ldr	r3, [r7, #0]
 80455c0:	685b      	ldr	r3, [r3, #4]
 80455c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80455c6:	2b02      	cmp	r3, #2
 80455c8:	d130      	bne.n	804562c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80455ca:	687b      	ldr	r3, [r7, #4]
 80455cc:	689b      	ldr	r3, [r3, #8]
 80455ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80455d0:	69fb      	ldr	r3, [r7, #28]
 80455d2:	005b      	lsls	r3, r3, #1
 80455d4:	2203      	movs	r2, #3
 80455d6:	fa02 f303 	lsl.w	r3, r2, r3
 80455da:	43db      	mvns	r3, r3
 80455dc:	69ba      	ldr	r2, [r7, #24]
 80455de:	4013      	ands	r3, r2
 80455e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80455e2:	683b      	ldr	r3, [r7, #0]
 80455e4:	68da      	ldr	r2, [r3, #12]
 80455e6:	69fb      	ldr	r3, [r7, #28]
 80455e8:	005b      	lsls	r3, r3, #1
 80455ea:	fa02 f303 	lsl.w	r3, r2, r3
 80455ee:	69ba      	ldr	r2, [r7, #24]
 80455f0:	4313      	orrs	r3, r2
 80455f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80455f4:	687b      	ldr	r3, [r7, #4]
 80455f6:	69ba      	ldr	r2, [r7, #24]
 80455f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80455fa:	687b      	ldr	r3, [r7, #4]
 80455fc:	685b      	ldr	r3, [r3, #4]
 80455fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8045600:	2201      	movs	r2, #1
 8045602:	69fb      	ldr	r3, [r7, #28]
 8045604:	fa02 f303 	lsl.w	r3, r2, r3
 8045608:	43db      	mvns	r3, r3
 804560a:	69ba      	ldr	r2, [r7, #24]
 804560c:	4013      	ands	r3, r2
 804560e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8045610:	683b      	ldr	r3, [r7, #0]
 8045612:	685b      	ldr	r3, [r3, #4]
 8045614:	091b      	lsrs	r3, r3, #4
 8045616:	f003 0201 	and.w	r2, r3, #1
 804561a:	69fb      	ldr	r3, [r7, #28]
 804561c:	fa02 f303 	lsl.w	r3, r2, r3
 8045620:	69ba      	ldr	r2, [r7, #24]
 8045622:	4313      	orrs	r3, r2
 8045624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8045626:	687b      	ldr	r3, [r7, #4]
 8045628:	69ba      	ldr	r2, [r7, #24]
 804562a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804562c:	683b      	ldr	r3, [r7, #0]
 804562e:	685b      	ldr	r3, [r3, #4]
 8045630:	f003 0303 	and.w	r3, r3, #3
 8045634:	2b03      	cmp	r3, #3
 8045636:	d017      	beq.n	8045668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8045638:	687b      	ldr	r3, [r7, #4]
 804563a:	68db      	ldr	r3, [r3, #12]
 804563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 804563e:	69fb      	ldr	r3, [r7, #28]
 8045640:	005b      	lsls	r3, r3, #1
 8045642:	2203      	movs	r2, #3
 8045644:	fa02 f303 	lsl.w	r3, r2, r3
 8045648:	43db      	mvns	r3, r3
 804564a:	69ba      	ldr	r2, [r7, #24]
 804564c:	4013      	ands	r3, r2
 804564e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8045650:	683b      	ldr	r3, [r7, #0]
 8045652:	689a      	ldr	r2, [r3, #8]
 8045654:	69fb      	ldr	r3, [r7, #28]
 8045656:	005b      	lsls	r3, r3, #1
 8045658:	fa02 f303 	lsl.w	r3, r2, r3
 804565c:	69ba      	ldr	r2, [r7, #24]
 804565e:	4313      	orrs	r3, r2
 8045660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8045662:	687b      	ldr	r3, [r7, #4]
 8045664:	69ba      	ldr	r2, [r7, #24]
 8045666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8045668:	683b      	ldr	r3, [r7, #0]
 804566a:	685b      	ldr	r3, [r3, #4]
 804566c:	f003 0303 	and.w	r3, r3, #3
 8045670:	2b02      	cmp	r3, #2
 8045672:	d123      	bne.n	80456bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8045674:	69fb      	ldr	r3, [r7, #28]
 8045676:	08da      	lsrs	r2, r3, #3
 8045678:	687b      	ldr	r3, [r7, #4]
 804567a:	3208      	adds	r2, #8
 804567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8045682:	69fb      	ldr	r3, [r7, #28]
 8045684:	f003 0307 	and.w	r3, r3, #7
 8045688:	009b      	lsls	r3, r3, #2
 804568a:	220f      	movs	r2, #15
 804568c:	fa02 f303 	lsl.w	r3, r2, r3
 8045690:	43db      	mvns	r3, r3
 8045692:	69ba      	ldr	r2, [r7, #24]
 8045694:	4013      	ands	r3, r2
 8045696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8045698:	683b      	ldr	r3, [r7, #0]
 804569a:	691a      	ldr	r2, [r3, #16]
 804569c:	69fb      	ldr	r3, [r7, #28]
 804569e:	f003 0307 	and.w	r3, r3, #7
 80456a2:	009b      	lsls	r3, r3, #2
 80456a4:	fa02 f303 	lsl.w	r3, r2, r3
 80456a8:	69ba      	ldr	r2, [r7, #24]
 80456aa:	4313      	orrs	r3, r2
 80456ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80456ae:	69fb      	ldr	r3, [r7, #28]
 80456b0:	08da      	lsrs	r2, r3, #3
 80456b2:	687b      	ldr	r3, [r7, #4]
 80456b4:	3208      	adds	r2, #8
 80456b6:	69b9      	ldr	r1, [r7, #24]
 80456b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80456bc:	687b      	ldr	r3, [r7, #4]
 80456be:	681b      	ldr	r3, [r3, #0]
 80456c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80456c2:	69fb      	ldr	r3, [r7, #28]
 80456c4:	005b      	lsls	r3, r3, #1
 80456c6:	2203      	movs	r2, #3
 80456c8:	fa02 f303 	lsl.w	r3, r2, r3
 80456cc:	43db      	mvns	r3, r3
 80456ce:	69ba      	ldr	r2, [r7, #24]
 80456d0:	4013      	ands	r3, r2
 80456d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80456d4:	683b      	ldr	r3, [r7, #0]
 80456d6:	685b      	ldr	r3, [r3, #4]
 80456d8:	f003 0203 	and.w	r2, r3, #3
 80456dc:	69fb      	ldr	r3, [r7, #28]
 80456de:	005b      	lsls	r3, r3, #1
 80456e0:	fa02 f303 	lsl.w	r3, r2, r3
 80456e4:	69ba      	ldr	r2, [r7, #24]
 80456e6:	4313      	orrs	r3, r2
 80456e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80456ea:	687b      	ldr	r3, [r7, #4]
 80456ec:	69ba      	ldr	r2, [r7, #24]
 80456ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80456f0:	683b      	ldr	r3, [r7, #0]
 80456f2:	685b      	ldr	r3, [r3, #4]
 80456f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80456f8:	2b00      	cmp	r3, #0
 80456fa:	f000 80b4 	beq.w	8045866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80456fe:	2300      	movs	r3, #0
 8045700:	60fb      	str	r3, [r7, #12]
 8045702:	4b60      	ldr	r3, [pc, #384]	; (8045884 <HAL_GPIO_Init+0x30c>)
 8045704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045706:	4a5f      	ldr	r2, [pc, #380]	; (8045884 <HAL_GPIO_Init+0x30c>)
 8045708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804570c:	6453      	str	r3, [r2, #68]	; 0x44
 804570e:	4b5d      	ldr	r3, [pc, #372]	; (8045884 <HAL_GPIO_Init+0x30c>)
 8045710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8045716:	60fb      	str	r3, [r7, #12]
 8045718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804571a:	4a5b      	ldr	r2, [pc, #364]	; (8045888 <HAL_GPIO_Init+0x310>)
 804571c:	69fb      	ldr	r3, [r7, #28]
 804571e:	089b      	lsrs	r3, r3, #2
 8045720:	3302      	adds	r3, #2
 8045722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8045728:	69fb      	ldr	r3, [r7, #28]
 804572a:	f003 0303 	and.w	r3, r3, #3
 804572e:	009b      	lsls	r3, r3, #2
 8045730:	220f      	movs	r2, #15
 8045732:	fa02 f303 	lsl.w	r3, r2, r3
 8045736:	43db      	mvns	r3, r3
 8045738:	69ba      	ldr	r2, [r7, #24]
 804573a:	4013      	ands	r3, r2
 804573c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804573e:	687b      	ldr	r3, [r7, #4]
 8045740:	4a52      	ldr	r2, [pc, #328]	; (804588c <HAL_GPIO_Init+0x314>)
 8045742:	4293      	cmp	r3, r2
 8045744:	d02b      	beq.n	804579e <HAL_GPIO_Init+0x226>
 8045746:	687b      	ldr	r3, [r7, #4]
 8045748:	4a51      	ldr	r2, [pc, #324]	; (8045890 <HAL_GPIO_Init+0x318>)
 804574a:	4293      	cmp	r3, r2
 804574c:	d025      	beq.n	804579a <HAL_GPIO_Init+0x222>
 804574e:	687b      	ldr	r3, [r7, #4]
 8045750:	4a50      	ldr	r2, [pc, #320]	; (8045894 <HAL_GPIO_Init+0x31c>)
 8045752:	4293      	cmp	r3, r2
 8045754:	d01f      	beq.n	8045796 <HAL_GPIO_Init+0x21e>
 8045756:	687b      	ldr	r3, [r7, #4]
 8045758:	4a4f      	ldr	r2, [pc, #316]	; (8045898 <HAL_GPIO_Init+0x320>)
 804575a:	4293      	cmp	r3, r2
 804575c:	d019      	beq.n	8045792 <HAL_GPIO_Init+0x21a>
 804575e:	687b      	ldr	r3, [r7, #4]
 8045760:	4a4e      	ldr	r2, [pc, #312]	; (804589c <HAL_GPIO_Init+0x324>)
 8045762:	4293      	cmp	r3, r2
 8045764:	d013      	beq.n	804578e <HAL_GPIO_Init+0x216>
 8045766:	687b      	ldr	r3, [r7, #4]
 8045768:	4a4d      	ldr	r2, [pc, #308]	; (80458a0 <HAL_GPIO_Init+0x328>)
 804576a:	4293      	cmp	r3, r2
 804576c:	d00d      	beq.n	804578a <HAL_GPIO_Init+0x212>
 804576e:	687b      	ldr	r3, [r7, #4]
 8045770:	4a4c      	ldr	r2, [pc, #304]	; (80458a4 <HAL_GPIO_Init+0x32c>)
 8045772:	4293      	cmp	r3, r2
 8045774:	d007      	beq.n	8045786 <HAL_GPIO_Init+0x20e>
 8045776:	687b      	ldr	r3, [r7, #4]
 8045778:	4a4b      	ldr	r2, [pc, #300]	; (80458a8 <HAL_GPIO_Init+0x330>)
 804577a:	4293      	cmp	r3, r2
 804577c:	d101      	bne.n	8045782 <HAL_GPIO_Init+0x20a>
 804577e:	2307      	movs	r3, #7
 8045780:	e00e      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 8045782:	2308      	movs	r3, #8
 8045784:	e00c      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 8045786:	2306      	movs	r3, #6
 8045788:	e00a      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 804578a:	2305      	movs	r3, #5
 804578c:	e008      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 804578e:	2304      	movs	r3, #4
 8045790:	e006      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 8045792:	2303      	movs	r3, #3
 8045794:	e004      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 8045796:	2302      	movs	r3, #2
 8045798:	e002      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 804579a:	2301      	movs	r3, #1
 804579c:	e000      	b.n	80457a0 <HAL_GPIO_Init+0x228>
 804579e:	2300      	movs	r3, #0
 80457a0:	69fa      	ldr	r2, [r7, #28]
 80457a2:	f002 0203 	and.w	r2, r2, #3
 80457a6:	0092      	lsls	r2, r2, #2
 80457a8:	4093      	lsls	r3, r2
 80457aa:	69ba      	ldr	r2, [r7, #24]
 80457ac:	4313      	orrs	r3, r2
 80457ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80457b0:	4935      	ldr	r1, [pc, #212]	; (8045888 <HAL_GPIO_Init+0x310>)
 80457b2:	69fb      	ldr	r3, [r7, #28]
 80457b4:	089b      	lsrs	r3, r3, #2
 80457b6:	3302      	adds	r3, #2
 80457b8:	69ba      	ldr	r2, [r7, #24]
 80457ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80457be:	4b3b      	ldr	r3, [pc, #236]	; (80458ac <HAL_GPIO_Init+0x334>)
 80457c0:	689b      	ldr	r3, [r3, #8]
 80457c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80457c4:	693b      	ldr	r3, [r7, #16]
 80457c6:	43db      	mvns	r3, r3
 80457c8:	69ba      	ldr	r2, [r7, #24]
 80457ca:	4013      	ands	r3, r2
 80457cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80457ce:	683b      	ldr	r3, [r7, #0]
 80457d0:	685b      	ldr	r3, [r3, #4]
 80457d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80457d6:	2b00      	cmp	r3, #0
 80457d8:	d003      	beq.n	80457e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80457da:	69ba      	ldr	r2, [r7, #24]
 80457dc:	693b      	ldr	r3, [r7, #16]
 80457de:	4313      	orrs	r3, r2
 80457e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80457e2:	4a32      	ldr	r2, [pc, #200]	; (80458ac <HAL_GPIO_Init+0x334>)
 80457e4:	69bb      	ldr	r3, [r7, #24]
 80457e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80457e8:	4b30      	ldr	r3, [pc, #192]	; (80458ac <HAL_GPIO_Init+0x334>)
 80457ea:	68db      	ldr	r3, [r3, #12]
 80457ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80457ee:	693b      	ldr	r3, [r7, #16]
 80457f0:	43db      	mvns	r3, r3
 80457f2:	69ba      	ldr	r2, [r7, #24]
 80457f4:	4013      	ands	r3, r2
 80457f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80457f8:	683b      	ldr	r3, [r7, #0]
 80457fa:	685b      	ldr	r3, [r3, #4]
 80457fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045800:	2b00      	cmp	r3, #0
 8045802:	d003      	beq.n	804580c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8045804:	69ba      	ldr	r2, [r7, #24]
 8045806:	693b      	ldr	r3, [r7, #16]
 8045808:	4313      	orrs	r3, r2
 804580a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 804580c:	4a27      	ldr	r2, [pc, #156]	; (80458ac <HAL_GPIO_Init+0x334>)
 804580e:	69bb      	ldr	r3, [r7, #24]
 8045810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8045812:	4b26      	ldr	r3, [pc, #152]	; (80458ac <HAL_GPIO_Init+0x334>)
 8045814:	685b      	ldr	r3, [r3, #4]
 8045816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8045818:	693b      	ldr	r3, [r7, #16]
 804581a:	43db      	mvns	r3, r3
 804581c:	69ba      	ldr	r2, [r7, #24]
 804581e:	4013      	ands	r3, r2
 8045820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8045822:	683b      	ldr	r3, [r7, #0]
 8045824:	685b      	ldr	r3, [r3, #4]
 8045826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804582a:	2b00      	cmp	r3, #0
 804582c:	d003      	beq.n	8045836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 804582e:	69ba      	ldr	r2, [r7, #24]
 8045830:	693b      	ldr	r3, [r7, #16]
 8045832:	4313      	orrs	r3, r2
 8045834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8045836:	4a1d      	ldr	r2, [pc, #116]	; (80458ac <HAL_GPIO_Init+0x334>)
 8045838:	69bb      	ldr	r3, [r7, #24]
 804583a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804583c:	4b1b      	ldr	r3, [pc, #108]	; (80458ac <HAL_GPIO_Init+0x334>)
 804583e:	681b      	ldr	r3, [r3, #0]
 8045840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8045842:	693b      	ldr	r3, [r7, #16]
 8045844:	43db      	mvns	r3, r3
 8045846:	69ba      	ldr	r2, [r7, #24]
 8045848:	4013      	ands	r3, r2
 804584a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804584c:	683b      	ldr	r3, [r7, #0]
 804584e:	685b      	ldr	r3, [r3, #4]
 8045850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045854:	2b00      	cmp	r3, #0
 8045856:	d003      	beq.n	8045860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8045858:	69ba      	ldr	r2, [r7, #24]
 804585a:	693b      	ldr	r3, [r7, #16]
 804585c:	4313      	orrs	r3, r2
 804585e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8045860:	4a12      	ldr	r2, [pc, #72]	; (80458ac <HAL_GPIO_Init+0x334>)
 8045862:	69bb      	ldr	r3, [r7, #24]
 8045864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8045866:	69fb      	ldr	r3, [r7, #28]
 8045868:	3301      	adds	r3, #1
 804586a:	61fb      	str	r3, [r7, #28]
 804586c:	69fb      	ldr	r3, [r7, #28]
 804586e:	2b0f      	cmp	r3, #15
 8045870:	f67f ae90 	bls.w	8045594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8045874:	bf00      	nop
 8045876:	bf00      	nop
 8045878:	3724      	adds	r7, #36	; 0x24
 804587a:	46bd      	mov	sp, r7
 804587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045880:	4770      	bx	lr
 8045882:	bf00      	nop
 8045884:	40023800 	.word	0x40023800
 8045888:	40013800 	.word	0x40013800
 804588c:	40020000 	.word	0x40020000
 8045890:	40020400 	.word	0x40020400
 8045894:	40020800 	.word	0x40020800
 8045898:	40020c00 	.word	0x40020c00
 804589c:	40021000 	.word	0x40021000
 80458a0:	40021400 	.word	0x40021400
 80458a4:	40021800 	.word	0x40021800
 80458a8:	40021c00 	.word	0x40021c00
 80458ac:	40013c00 	.word	0x40013c00

080458b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80458b0:	b480      	push	{r7}
 80458b2:	b083      	sub	sp, #12
 80458b4:	af00      	add	r7, sp, #0
 80458b6:	6078      	str	r0, [r7, #4]
 80458b8:	460b      	mov	r3, r1
 80458ba:	807b      	strh	r3, [r7, #2]
 80458bc:	4613      	mov	r3, r2
 80458be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80458c0:	787b      	ldrb	r3, [r7, #1]
 80458c2:	2b00      	cmp	r3, #0
 80458c4:	d003      	beq.n	80458ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80458c6:	887a      	ldrh	r2, [r7, #2]
 80458c8:	687b      	ldr	r3, [r7, #4]
 80458ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80458cc:	e003      	b.n	80458d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80458ce:	887b      	ldrh	r3, [r7, #2]
 80458d0:	041a      	lsls	r2, r3, #16
 80458d2:	687b      	ldr	r3, [r7, #4]
 80458d4:	619a      	str	r2, [r3, #24]
}
 80458d6:	bf00      	nop
 80458d8:	370c      	adds	r7, #12
 80458da:	46bd      	mov	sp, r7
 80458dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458e0:	4770      	bx	lr

080458e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80458e2:	b480      	push	{r7}
 80458e4:	b085      	sub	sp, #20
 80458e6:	af00      	add	r7, sp, #0
 80458e8:	6078      	str	r0, [r7, #4]
 80458ea:	460b      	mov	r3, r1
 80458ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80458ee:	687b      	ldr	r3, [r7, #4]
 80458f0:	695b      	ldr	r3, [r3, #20]
 80458f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80458f4:	887a      	ldrh	r2, [r7, #2]
 80458f6:	68fb      	ldr	r3, [r7, #12]
 80458f8:	4013      	ands	r3, r2
 80458fa:	041a      	lsls	r2, r3, #16
 80458fc:	68fb      	ldr	r3, [r7, #12]
 80458fe:	43d9      	mvns	r1, r3
 8045900:	887b      	ldrh	r3, [r7, #2]
 8045902:	400b      	ands	r3, r1
 8045904:	431a      	orrs	r2, r3
 8045906:	687b      	ldr	r3, [r7, #4]
 8045908:	619a      	str	r2, [r3, #24]
}
 804590a:	bf00      	nop
 804590c:	3714      	adds	r7, #20
 804590e:	46bd      	mov	sp, r7
 8045910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045914:	4770      	bx	lr
	...

08045918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8045918:	b580      	push	{r7, lr}
 804591a:	b082      	sub	sp, #8
 804591c:	af00      	add	r7, sp, #0
 804591e:	4603      	mov	r3, r0
 8045920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8045922:	4b08      	ldr	r3, [pc, #32]	; (8045944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8045924:	695a      	ldr	r2, [r3, #20]
 8045926:	88fb      	ldrh	r3, [r7, #6]
 8045928:	4013      	ands	r3, r2
 804592a:	2b00      	cmp	r3, #0
 804592c:	d006      	beq.n	804593c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 804592e:	4a05      	ldr	r2, [pc, #20]	; (8045944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8045930:	88fb      	ldrh	r3, [r7, #6]
 8045932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8045934:	88fb      	ldrh	r3, [r7, #6]
 8045936:	4618      	mov	r0, r3
 8045938:	f000 f806 	bl	8045948 <HAL_GPIO_EXTI_Callback>
  }
}
 804593c:	bf00      	nop
 804593e:	3708      	adds	r7, #8
 8045940:	46bd      	mov	sp, r7
 8045942:	bd80      	pop	{r7, pc}
 8045944:	40013c00 	.word	0x40013c00

08045948 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8045948:	b480      	push	{r7}
 804594a:	b083      	sub	sp, #12
 804594c:	af00      	add	r7, sp, #0
 804594e:	4603      	mov	r3, r0
 8045950:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8045952:	bf00      	nop
 8045954:	370c      	adds	r7, #12
 8045956:	46bd      	mov	sp, r7
 8045958:	f85d 7b04 	ldr.w	r7, [sp], #4
 804595c:	4770      	bx	lr
	...

08045960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045960:	b580      	push	{r7, lr}
 8045962:	b084      	sub	sp, #16
 8045964:	af00      	add	r7, sp, #0
 8045966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045968:	687b      	ldr	r3, [r7, #4]
 804596a:	2b00      	cmp	r3, #0
 804596c:	d101      	bne.n	8045972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804596e:	2301      	movs	r3, #1
 8045970:	e12b      	b.n	8045bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045972:	687b      	ldr	r3, [r7, #4]
 8045974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045978:	b2db      	uxtb	r3, r3
 804597a:	2b00      	cmp	r3, #0
 804597c:	d106      	bne.n	804598c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804597e:	687b      	ldr	r3, [r7, #4]
 8045980:	2200      	movs	r2, #0
 8045982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8045986:	6878      	ldr	r0, [r7, #4]
 8045988:	f7fe fdee 	bl	8044568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 804598c:	687b      	ldr	r3, [r7, #4]
 804598e:	2224      	movs	r2, #36	; 0x24
 8045990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045994:	687b      	ldr	r3, [r7, #4]
 8045996:	681b      	ldr	r3, [r3, #0]
 8045998:	681a      	ldr	r2, [r3, #0]
 804599a:	687b      	ldr	r3, [r7, #4]
 804599c:	681b      	ldr	r3, [r3, #0]
 804599e:	f022 0201 	bic.w	r2, r2, #1
 80459a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80459a4:	687b      	ldr	r3, [r7, #4]
 80459a6:	681b      	ldr	r3, [r3, #0]
 80459a8:	681a      	ldr	r2, [r3, #0]
 80459aa:	687b      	ldr	r3, [r7, #4]
 80459ac:	681b      	ldr	r3, [r3, #0]
 80459ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80459b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80459b4:	687b      	ldr	r3, [r7, #4]
 80459b6:	681b      	ldr	r3, [r3, #0]
 80459b8:	681a      	ldr	r2, [r3, #0]
 80459ba:	687b      	ldr	r3, [r7, #4]
 80459bc:	681b      	ldr	r3, [r3, #0]
 80459be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80459c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80459c4:	f001 f888 	bl	8046ad8 <HAL_RCC_GetPCLK1Freq>
 80459c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80459ca:	687b      	ldr	r3, [r7, #4]
 80459cc:	685b      	ldr	r3, [r3, #4]
 80459ce:	4a81      	ldr	r2, [pc, #516]	; (8045bd4 <HAL_I2C_Init+0x274>)
 80459d0:	4293      	cmp	r3, r2
 80459d2:	d807      	bhi.n	80459e4 <HAL_I2C_Init+0x84>
 80459d4:	68fb      	ldr	r3, [r7, #12]
 80459d6:	4a80      	ldr	r2, [pc, #512]	; (8045bd8 <HAL_I2C_Init+0x278>)
 80459d8:	4293      	cmp	r3, r2
 80459da:	bf94      	ite	ls
 80459dc:	2301      	movls	r3, #1
 80459de:	2300      	movhi	r3, #0
 80459e0:	b2db      	uxtb	r3, r3
 80459e2:	e006      	b.n	80459f2 <HAL_I2C_Init+0x92>
 80459e4:	68fb      	ldr	r3, [r7, #12]
 80459e6:	4a7d      	ldr	r2, [pc, #500]	; (8045bdc <HAL_I2C_Init+0x27c>)
 80459e8:	4293      	cmp	r3, r2
 80459ea:	bf94      	ite	ls
 80459ec:	2301      	movls	r3, #1
 80459ee:	2300      	movhi	r3, #0
 80459f0:	b2db      	uxtb	r3, r3
 80459f2:	2b00      	cmp	r3, #0
 80459f4:	d001      	beq.n	80459fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80459f6:	2301      	movs	r3, #1
 80459f8:	e0e7      	b.n	8045bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80459fa:	68fb      	ldr	r3, [r7, #12]
 80459fc:	4a78      	ldr	r2, [pc, #480]	; (8045be0 <HAL_I2C_Init+0x280>)
 80459fe:	fba2 2303 	umull	r2, r3, r2, r3
 8045a02:	0c9b      	lsrs	r3, r3, #18
 8045a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8045a06:	687b      	ldr	r3, [r7, #4]
 8045a08:	681b      	ldr	r3, [r3, #0]
 8045a0a:	685b      	ldr	r3, [r3, #4]
 8045a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045a10:	687b      	ldr	r3, [r7, #4]
 8045a12:	681b      	ldr	r3, [r3, #0]
 8045a14:	68ba      	ldr	r2, [r7, #8]
 8045a16:	430a      	orrs	r2, r1
 8045a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8045a1a:	687b      	ldr	r3, [r7, #4]
 8045a1c:	681b      	ldr	r3, [r3, #0]
 8045a1e:	6a1b      	ldr	r3, [r3, #32]
 8045a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045a24:	687b      	ldr	r3, [r7, #4]
 8045a26:	685b      	ldr	r3, [r3, #4]
 8045a28:	4a6a      	ldr	r2, [pc, #424]	; (8045bd4 <HAL_I2C_Init+0x274>)
 8045a2a:	4293      	cmp	r3, r2
 8045a2c:	d802      	bhi.n	8045a34 <HAL_I2C_Init+0xd4>
 8045a2e:	68bb      	ldr	r3, [r7, #8]
 8045a30:	3301      	adds	r3, #1
 8045a32:	e009      	b.n	8045a48 <HAL_I2C_Init+0xe8>
 8045a34:	68bb      	ldr	r3, [r7, #8]
 8045a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8045a3a:	fb02 f303 	mul.w	r3, r2, r3
 8045a3e:	4a69      	ldr	r2, [pc, #420]	; (8045be4 <HAL_I2C_Init+0x284>)
 8045a40:	fba2 2303 	umull	r2, r3, r2, r3
 8045a44:	099b      	lsrs	r3, r3, #6
 8045a46:	3301      	adds	r3, #1
 8045a48:	687a      	ldr	r2, [r7, #4]
 8045a4a:	6812      	ldr	r2, [r2, #0]
 8045a4c:	430b      	orrs	r3, r1
 8045a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045a50:	687b      	ldr	r3, [r7, #4]
 8045a52:	681b      	ldr	r3, [r3, #0]
 8045a54:	69db      	ldr	r3, [r3, #28]
 8045a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045a5e:	687b      	ldr	r3, [r7, #4]
 8045a60:	685b      	ldr	r3, [r3, #4]
 8045a62:	495c      	ldr	r1, [pc, #368]	; (8045bd4 <HAL_I2C_Init+0x274>)
 8045a64:	428b      	cmp	r3, r1
 8045a66:	d819      	bhi.n	8045a9c <HAL_I2C_Init+0x13c>
 8045a68:	68fb      	ldr	r3, [r7, #12]
 8045a6a:	1e59      	subs	r1, r3, #1
 8045a6c:	687b      	ldr	r3, [r7, #4]
 8045a6e:	685b      	ldr	r3, [r3, #4]
 8045a70:	005b      	lsls	r3, r3, #1
 8045a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8045a76:	1c59      	adds	r1, r3, #1
 8045a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8045a7c:	400b      	ands	r3, r1
 8045a7e:	2b00      	cmp	r3, #0
 8045a80:	d00a      	beq.n	8045a98 <HAL_I2C_Init+0x138>
 8045a82:	68fb      	ldr	r3, [r7, #12]
 8045a84:	1e59      	subs	r1, r3, #1
 8045a86:	687b      	ldr	r3, [r7, #4]
 8045a88:	685b      	ldr	r3, [r3, #4]
 8045a8a:	005b      	lsls	r3, r3, #1
 8045a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8045a90:	3301      	adds	r3, #1
 8045a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a96:	e051      	b.n	8045b3c <HAL_I2C_Init+0x1dc>
 8045a98:	2304      	movs	r3, #4
 8045a9a:	e04f      	b.n	8045b3c <HAL_I2C_Init+0x1dc>
 8045a9c:	687b      	ldr	r3, [r7, #4]
 8045a9e:	689b      	ldr	r3, [r3, #8]
 8045aa0:	2b00      	cmp	r3, #0
 8045aa2:	d111      	bne.n	8045ac8 <HAL_I2C_Init+0x168>
 8045aa4:	68fb      	ldr	r3, [r7, #12]
 8045aa6:	1e58      	subs	r0, r3, #1
 8045aa8:	687b      	ldr	r3, [r7, #4]
 8045aaa:	6859      	ldr	r1, [r3, #4]
 8045aac:	460b      	mov	r3, r1
 8045aae:	005b      	lsls	r3, r3, #1
 8045ab0:	440b      	add	r3, r1
 8045ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8045ab6:	3301      	adds	r3, #1
 8045ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045abc:	2b00      	cmp	r3, #0
 8045abe:	bf0c      	ite	eq
 8045ac0:	2301      	moveq	r3, #1
 8045ac2:	2300      	movne	r3, #0
 8045ac4:	b2db      	uxtb	r3, r3
 8045ac6:	e012      	b.n	8045aee <HAL_I2C_Init+0x18e>
 8045ac8:	68fb      	ldr	r3, [r7, #12]
 8045aca:	1e58      	subs	r0, r3, #1
 8045acc:	687b      	ldr	r3, [r7, #4]
 8045ace:	6859      	ldr	r1, [r3, #4]
 8045ad0:	460b      	mov	r3, r1
 8045ad2:	009b      	lsls	r3, r3, #2
 8045ad4:	440b      	add	r3, r1
 8045ad6:	0099      	lsls	r1, r3, #2
 8045ad8:	440b      	add	r3, r1
 8045ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8045ade:	3301      	adds	r3, #1
 8045ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045ae4:	2b00      	cmp	r3, #0
 8045ae6:	bf0c      	ite	eq
 8045ae8:	2301      	moveq	r3, #1
 8045aea:	2300      	movne	r3, #0
 8045aec:	b2db      	uxtb	r3, r3
 8045aee:	2b00      	cmp	r3, #0
 8045af0:	d001      	beq.n	8045af6 <HAL_I2C_Init+0x196>
 8045af2:	2301      	movs	r3, #1
 8045af4:	e022      	b.n	8045b3c <HAL_I2C_Init+0x1dc>
 8045af6:	687b      	ldr	r3, [r7, #4]
 8045af8:	689b      	ldr	r3, [r3, #8]
 8045afa:	2b00      	cmp	r3, #0
 8045afc:	d10e      	bne.n	8045b1c <HAL_I2C_Init+0x1bc>
 8045afe:	68fb      	ldr	r3, [r7, #12]
 8045b00:	1e58      	subs	r0, r3, #1
 8045b02:	687b      	ldr	r3, [r7, #4]
 8045b04:	6859      	ldr	r1, [r3, #4]
 8045b06:	460b      	mov	r3, r1
 8045b08:	005b      	lsls	r3, r3, #1
 8045b0a:	440b      	add	r3, r1
 8045b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8045b10:	3301      	adds	r3, #1
 8045b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8045b1a:	e00f      	b.n	8045b3c <HAL_I2C_Init+0x1dc>
 8045b1c:	68fb      	ldr	r3, [r7, #12]
 8045b1e:	1e58      	subs	r0, r3, #1
 8045b20:	687b      	ldr	r3, [r7, #4]
 8045b22:	6859      	ldr	r1, [r3, #4]
 8045b24:	460b      	mov	r3, r1
 8045b26:	009b      	lsls	r3, r3, #2
 8045b28:	440b      	add	r3, r1
 8045b2a:	0099      	lsls	r1, r3, #2
 8045b2c:	440b      	add	r3, r1
 8045b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8045b32:	3301      	adds	r3, #1
 8045b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045b3c:	6879      	ldr	r1, [r7, #4]
 8045b3e:	6809      	ldr	r1, [r1, #0]
 8045b40:	4313      	orrs	r3, r2
 8045b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045b44:	687b      	ldr	r3, [r7, #4]
 8045b46:	681b      	ldr	r3, [r3, #0]
 8045b48:	681b      	ldr	r3, [r3, #0]
 8045b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045b4e:	687b      	ldr	r3, [r7, #4]
 8045b50:	69da      	ldr	r2, [r3, #28]
 8045b52:	687b      	ldr	r3, [r7, #4]
 8045b54:	6a1b      	ldr	r3, [r3, #32]
 8045b56:	431a      	orrs	r2, r3
 8045b58:	687b      	ldr	r3, [r7, #4]
 8045b5a:	681b      	ldr	r3, [r3, #0]
 8045b5c:	430a      	orrs	r2, r1
 8045b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045b60:	687b      	ldr	r3, [r7, #4]
 8045b62:	681b      	ldr	r3, [r3, #0]
 8045b64:	689b      	ldr	r3, [r3, #8]
 8045b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8045b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045b6e:	687a      	ldr	r2, [r7, #4]
 8045b70:	6911      	ldr	r1, [r2, #16]
 8045b72:	687a      	ldr	r2, [r7, #4]
 8045b74:	68d2      	ldr	r2, [r2, #12]
 8045b76:	4311      	orrs	r1, r2
 8045b78:	687a      	ldr	r2, [r7, #4]
 8045b7a:	6812      	ldr	r2, [r2, #0]
 8045b7c:	430b      	orrs	r3, r1
 8045b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045b80:	687b      	ldr	r3, [r7, #4]
 8045b82:	681b      	ldr	r3, [r3, #0]
 8045b84:	68db      	ldr	r3, [r3, #12]
 8045b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045b8a:	687b      	ldr	r3, [r7, #4]
 8045b8c:	695a      	ldr	r2, [r3, #20]
 8045b8e:	687b      	ldr	r3, [r7, #4]
 8045b90:	699b      	ldr	r3, [r3, #24]
 8045b92:	431a      	orrs	r2, r3
 8045b94:	687b      	ldr	r3, [r7, #4]
 8045b96:	681b      	ldr	r3, [r3, #0]
 8045b98:	430a      	orrs	r2, r1
 8045b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045b9c:	687b      	ldr	r3, [r7, #4]
 8045b9e:	681b      	ldr	r3, [r3, #0]
 8045ba0:	681a      	ldr	r2, [r3, #0]
 8045ba2:	687b      	ldr	r3, [r7, #4]
 8045ba4:	681b      	ldr	r3, [r3, #0]
 8045ba6:	f042 0201 	orr.w	r2, r2, #1
 8045baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045bac:	687b      	ldr	r3, [r7, #4]
 8045bae:	2200      	movs	r2, #0
 8045bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8045bb2:	687b      	ldr	r3, [r7, #4]
 8045bb4:	2220      	movs	r2, #32
 8045bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045bba:	687b      	ldr	r3, [r7, #4]
 8045bbc:	2200      	movs	r2, #0
 8045bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045bc0:	687b      	ldr	r3, [r7, #4]
 8045bc2:	2200      	movs	r2, #0
 8045bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045bc8:	2300      	movs	r3, #0
}
 8045bca:	4618      	mov	r0, r3
 8045bcc:	3710      	adds	r7, #16
 8045bce:	46bd      	mov	sp, r7
 8045bd0:	bd80      	pop	{r7, pc}
 8045bd2:	bf00      	nop
 8045bd4:	000186a0 	.word	0x000186a0
 8045bd8:	001e847f 	.word	0x001e847f
 8045bdc:	003d08ff 	.word	0x003d08ff
 8045be0:	431bde83 	.word	0x431bde83
 8045be4:	10624dd3 	.word	0x10624dd3

08045be8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8045be8:	b580      	push	{r7, lr}
 8045bea:	b088      	sub	sp, #32
 8045bec:	af02      	add	r7, sp, #8
 8045bee:	60f8      	str	r0, [r7, #12]
 8045bf0:	607a      	str	r2, [r7, #4]
 8045bf2:	461a      	mov	r2, r3
 8045bf4:	460b      	mov	r3, r1
 8045bf6:	817b      	strh	r3, [r7, #10]
 8045bf8:	4613      	mov	r3, r2
 8045bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8045bfc:	f7ff f870 	bl	8044ce0 <HAL_GetTick>
 8045c00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045c02:	68fb      	ldr	r3, [r7, #12]
 8045c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045c08:	b2db      	uxtb	r3, r3
 8045c0a:	2b20      	cmp	r3, #32
 8045c0c:	f040 80e0 	bne.w	8045dd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8045c10:	697b      	ldr	r3, [r7, #20]
 8045c12:	9300      	str	r3, [sp, #0]
 8045c14:	2319      	movs	r3, #25
 8045c16:	2201      	movs	r2, #1
 8045c18:	4970      	ldr	r1, [pc, #448]	; (8045ddc <HAL_I2C_Master_Transmit+0x1f4>)
 8045c1a:	68f8      	ldr	r0, [r7, #12]
 8045c1c:	f000 f964 	bl	8045ee8 <I2C_WaitOnFlagUntilTimeout>
 8045c20:	4603      	mov	r3, r0
 8045c22:	2b00      	cmp	r3, #0
 8045c24:	d001      	beq.n	8045c2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8045c26:	2302      	movs	r3, #2
 8045c28:	e0d3      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8045c2a:	68fb      	ldr	r3, [r7, #12]
 8045c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8045c30:	2b01      	cmp	r3, #1
 8045c32:	d101      	bne.n	8045c38 <HAL_I2C_Master_Transmit+0x50>
 8045c34:	2302      	movs	r3, #2
 8045c36:	e0cc      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
 8045c38:	68fb      	ldr	r3, [r7, #12]
 8045c3a:	2201      	movs	r2, #1
 8045c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8045c40:	68fb      	ldr	r3, [r7, #12]
 8045c42:	681b      	ldr	r3, [r3, #0]
 8045c44:	681b      	ldr	r3, [r3, #0]
 8045c46:	f003 0301 	and.w	r3, r3, #1
 8045c4a:	2b01      	cmp	r3, #1
 8045c4c:	d007      	beq.n	8045c5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8045c4e:	68fb      	ldr	r3, [r7, #12]
 8045c50:	681b      	ldr	r3, [r3, #0]
 8045c52:	681a      	ldr	r2, [r3, #0]
 8045c54:	68fb      	ldr	r3, [r7, #12]
 8045c56:	681b      	ldr	r3, [r3, #0]
 8045c58:	f042 0201 	orr.w	r2, r2, #1
 8045c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8045c5e:	68fb      	ldr	r3, [r7, #12]
 8045c60:	681b      	ldr	r3, [r3, #0]
 8045c62:	681a      	ldr	r2, [r3, #0]
 8045c64:	68fb      	ldr	r3, [r7, #12]
 8045c66:	681b      	ldr	r3, [r3, #0]
 8045c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8045c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8045c6e:	68fb      	ldr	r3, [r7, #12]
 8045c70:	2221      	movs	r2, #33	; 0x21
 8045c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8045c76:	68fb      	ldr	r3, [r7, #12]
 8045c78:	2210      	movs	r2, #16
 8045c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8045c7e:	68fb      	ldr	r3, [r7, #12]
 8045c80:	2200      	movs	r2, #0
 8045c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8045c84:	68fb      	ldr	r3, [r7, #12]
 8045c86:	687a      	ldr	r2, [r7, #4]
 8045c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8045c8a:	68fb      	ldr	r3, [r7, #12]
 8045c8c:	893a      	ldrh	r2, [r7, #8]
 8045c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8045c90:	68fb      	ldr	r3, [r7, #12]
 8045c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045c94:	b29a      	uxth	r2, r3
 8045c96:	68fb      	ldr	r3, [r7, #12]
 8045c98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8045c9a:	68fb      	ldr	r3, [r7, #12]
 8045c9c:	4a50      	ldr	r2, [pc, #320]	; (8045de0 <HAL_I2C_Master_Transmit+0x1f8>)
 8045c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8045ca0:	8979      	ldrh	r1, [r7, #10]
 8045ca2:	697b      	ldr	r3, [r7, #20]
 8045ca4:	6a3a      	ldr	r2, [r7, #32]
 8045ca6:	68f8      	ldr	r0, [r7, #12]
 8045ca8:	f000 f89c 	bl	8045de4 <I2C_MasterRequestWrite>
 8045cac:	4603      	mov	r3, r0
 8045cae:	2b00      	cmp	r3, #0
 8045cb0:	d001      	beq.n	8045cb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8045cb2:	2301      	movs	r3, #1
 8045cb4:	e08d      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8045cb6:	2300      	movs	r3, #0
 8045cb8:	613b      	str	r3, [r7, #16]
 8045cba:	68fb      	ldr	r3, [r7, #12]
 8045cbc:	681b      	ldr	r3, [r3, #0]
 8045cbe:	695b      	ldr	r3, [r3, #20]
 8045cc0:	613b      	str	r3, [r7, #16]
 8045cc2:	68fb      	ldr	r3, [r7, #12]
 8045cc4:	681b      	ldr	r3, [r3, #0]
 8045cc6:	699b      	ldr	r3, [r3, #24]
 8045cc8:	613b      	str	r3, [r7, #16]
 8045cca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8045ccc:	e066      	b.n	8045d9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8045cce:	697a      	ldr	r2, [r7, #20]
 8045cd0:	6a39      	ldr	r1, [r7, #32]
 8045cd2:	68f8      	ldr	r0, [r7, #12]
 8045cd4:	f000 f9de 	bl	8046094 <I2C_WaitOnTXEFlagUntilTimeout>
 8045cd8:	4603      	mov	r3, r0
 8045cda:	2b00      	cmp	r3, #0
 8045cdc:	d00d      	beq.n	8045cfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8045cde:	68fb      	ldr	r3, [r7, #12]
 8045ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045ce2:	2b04      	cmp	r3, #4
 8045ce4:	d107      	bne.n	8045cf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045ce6:	68fb      	ldr	r3, [r7, #12]
 8045ce8:	681b      	ldr	r3, [r3, #0]
 8045cea:	681a      	ldr	r2, [r3, #0]
 8045cec:	68fb      	ldr	r3, [r7, #12]
 8045cee:	681b      	ldr	r3, [r3, #0]
 8045cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8045cf6:	2301      	movs	r3, #1
 8045cf8:	e06b      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8045cfa:	68fb      	ldr	r3, [r7, #12]
 8045cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045cfe:	781a      	ldrb	r2, [r3, #0]
 8045d00:	68fb      	ldr	r3, [r7, #12]
 8045d02:	681b      	ldr	r3, [r3, #0]
 8045d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8045d06:	68fb      	ldr	r3, [r7, #12]
 8045d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045d0a:	1c5a      	adds	r2, r3, #1
 8045d0c:	68fb      	ldr	r3, [r7, #12]
 8045d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8045d10:	68fb      	ldr	r3, [r7, #12]
 8045d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045d14:	b29b      	uxth	r3, r3
 8045d16:	3b01      	subs	r3, #1
 8045d18:	b29a      	uxth	r2, r3
 8045d1a:	68fb      	ldr	r3, [r7, #12]
 8045d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8045d1e:	68fb      	ldr	r3, [r7, #12]
 8045d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045d22:	3b01      	subs	r3, #1
 8045d24:	b29a      	uxth	r2, r3
 8045d26:	68fb      	ldr	r3, [r7, #12]
 8045d28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8045d2a:	68fb      	ldr	r3, [r7, #12]
 8045d2c:	681b      	ldr	r3, [r3, #0]
 8045d2e:	695b      	ldr	r3, [r3, #20]
 8045d30:	f003 0304 	and.w	r3, r3, #4
 8045d34:	2b04      	cmp	r3, #4
 8045d36:	d11b      	bne.n	8045d70 <HAL_I2C_Master_Transmit+0x188>
 8045d38:	68fb      	ldr	r3, [r7, #12]
 8045d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045d3c:	2b00      	cmp	r3, #0
 8045d3e:	d017      	beq.n	8045d70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8045d40:	68fb      	ldr	r3, [r7, #12]
 8045d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045d44:	781a      	ldrb	r2, [r3, #0]
 8045d46:	68fb      	ldr	r3, [r7, #12]
 8045d48:	681b      	ldr	r3, [r3, #0]
 8045d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8045d4c:	68fb      	ldr	r3, [r7, #12]
 8045d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045d50:	1c5a      	adds	r2, r3, #1
 8045d52:	68fb      	ldr	r3, [r7, #12]
 8045d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8045d56:	68fb      	ldr	r3, [r7, #12]
 8045d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045d5a:	b29b      	uxth	r3, r3
 8045d5c:	3b01      	subs	r3, #1
 8045d5e:	b29a      	uxth	r2, r3
 8045d60:	68fb      	ldr	r3, [r7, #12]
 8045d62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8045d64:	68fb      	ldr	r3, [r7, #12]
 8045d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045d68:	3b01      	subs	r3, #1
 8045d6a:	b29a      	uxth	r2, r3
 8045d6c:	68fb      	ldr	r3, [r7, #12]
 8045d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8045d70:	697a      	ldr	r2, [r7, #20]
 8045d72:	6a39      	ldr	r1, [r7, #32]
 8045d74:	68f8      	ldr	r0, [r7, #12]
 8045d76:	f000 f9ce 	bl	8046116 <I2C_WaitOnBTFFlagUntilTimeout>
 8045d7a:	4603      	mov	r3, r0
 8045d7c:	2b00      	cmp	r3, #0
 8045d7e:	d00d      	beq.n	8045d9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8045d80:	68fb      	ldr	r3, [r7, #12]
 8045d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045d84:	2b04      	cmp	r3, #4
 8045d86:	d107      	bne.n	8045d98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045d88:	68fb      	ldr	r3, [r7, #12]
 8045d8a:	681b      	ldr	r3, [r3, #0]
 8045d8c:	681a      	ldr	r2, [r3, #0]
 8045d8e:	68fb      	ldr	r3, [r7, #12]
 8045d90:	681b      	ldr	r3, [r3, #0]
 8045d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045d96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8045d98:	2301      	movs	r3, #1
 8045d9a:	e01a      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8045d9c:	68fb      	ldr	r3, [r7, #12]
 8045d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045da0:	2b00      	cmp	r3, #0
 8045da2:	d194      	bne.n	8045cce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045da4:	68fb      	ldr	r3, [r7, #12]
 8045da6:	681b      	ldr	r3, [r3, #0]
 8045da8:	681a      	ldr	r2, [r3, #0]
 8045daa:	68fb      	ldr	r3, [r7, #12]
 8045dac:	681b      	ldr	r3, [r3, #0]
 8045dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8045db4:	68fb      	ldr	r3, [r7, #12]
 8045db6:	2220      	movs	r2, #32
 8045db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8045dbc:	68fb      	ldr	r3, [r7, #12]
 8045dbe:	2200      	movs	r2, #0
 8045dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8045dc4:	68fb      	ldr	r3, [r7, #12]
 8045dc6:	2200      	movs	r2, #0
 8045dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8045dcc:	2300      	movs	r3, #0
 8045dce:	e000      	b.n	8045dd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8045dd0:	2302      	movs	r3, #2
  }
}
 8045dd2:	4618      	mov	r0, r3
 8045dd4:	3718      	adds	r7, #24
 8045dd6:	46bd      	mov	sp, r7
 8045dd8:	bd80      	pop	{r7, pc}
 8045dda:	bf00      	nop
 8045ddc:	00100002 	.word	0x00100002
 8045de0:	ffff0000 	.word	0xffff0000

08045de4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8045de4:	b580      	push	{r7, lr}
 8045de6:	b088      	sub	sp, #32
 8045de8:	af02      	add	r7, sp, #8
 8045dea:	60f8      	str	r0, [r7, #12]
 8045dec:	607a      	str	r2, [r7, #4]
 8045dee:	603b      	str	r3, [r7, #0]
 8045df0:	460b      	mov	r3, r1
 8045df2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8045df4:	68fb      	ldr	r3, [r7, #12]
 8045df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045df8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8045dfa:	697b      	ldr	r3, [r7, #20]
 8045dfc:	2b08      	cmp	r3, #8
 8045dfe:	d006      	beq.n	8045e0e <I2C_MasterRequestWrite+0x2a>
 8045e00:	697b      	ldr	r3, [r7, #20]
 8045e02:	2b01      	cmp	r3, #1
 8045e04:	d003      	beq.n	8045e0e <I2C_MasterRequestWrite+0x2a>
 8045e06:	697b      	ldr	r3, [r7, #20]
 8045e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8045e0c:	d108      	bne.n	8045e20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8045e0e:	68fb      	ldr	r3, [r7, #12]
 8045e10:	681b      	ldr	r3, [r3, #0]
 8045e12:	681a      	ldr	r2, [r3, #0]
 8045e14:	68fb      	ldr	r3, [r7, #12]
 8045e16:	681b      	ldr	r3, [r3, #0]
 8045e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8045e1c:	601a      	str	r2, [r3, #0]
 8045e1e:	e00b      	b.n	8045e38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8045e20:	68fb      	ldr	r3, [r7, #12]
 8045e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045e24:	2b12      	cmp	r3, #18
 8045e26:	d107      	bne.n	8045e38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8045e28:	68fb      	ldr	r3, [r7, #12]
 8045e2a:	681b      	ldr	r3, [r3, #0]
 8045e2c:	681a      	ldr	r2, [r3, #0]
 8045e2e:	68fb      	ldr	r3, [r7, #12]
 8045e30:	681b      	ldr	r3, [r3, #0]
 8045e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8045e36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8045e38:	683b      	ldr	r3, [r7, #0]
 8045e3a:	9300      	str	r3, [sp, #0]
 8045e3c:	687b      	ldr	r3, [r7, #4]
 8045e3e:	2200      	movs	r2, #0
 8045e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8045e44:	68f8      	ldr	r0, [r7, #12]
 8045e46:	f000 f84f 	bl	8045ee8 <I2C_WaitOnFlagUntilTimeout>
 8045e4a:	4603      	mov	r3, r0
 8045e4c:	2b00      	cmp	r3, #0
 8045e4e:	d00d      	beq.n	8045e6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8045e50:	68fb      	ldr	r3, [r7, #12]
 8045e52:	681b      	ldr	r3, [r3, #0]
 8045e54:	681b      	ldr	r3, [r3, #0]
 8045e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045e5e:	d103      	bne.n	8045e68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8045e60:	68fb      	ldr	r3, [r7, #12]
 8045e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8045e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8045e68:	2303      	movs	r3, #3
 8045e6a:	e035      	b.n	8045ed8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8045e6c:	68fb      	ldr	r3, [r7, #12]
 8045e6e:	691b      	ldr	r3, [r3, #16]
 8045e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8045e74:	d108      	bne.n	8045e88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8045e76:	897b      	ldrh	r3, [r7, #10]
 8045e78:	b2db      	uxtb	r3, r3
 8045e7a:	461a      	mov	r2, r3
 8045e7c:	68fb      	ldr	r3, [r7, #12]
 8045e7e:	681b      	ldr	r3, [r3, #0]
 8045e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8045e84:	611a      	str	r2, [r3, #16]
 8045e86:	e01b      	b.n	8045ec0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8045e88:	897b      	ldrh	r3, [r7, #10]
 8045e8a:	11db      	asrs	r3, r3, #7
 8045e8c:	b2db      	uxtb	r3, r3
 8045e8e:	f003 0306 	and.w	r3, r3, #6
 8045e92:	b2db      	uxtb	r3, r3
 8045e94:	f063 030f 	orn	r3, r3, #15
 8045e98:	b2da      	uxtb	r2, r3
 8045e9a:	68fb      	ldr	r3, [r7, #12]
 8045e9c:	681b      	ldr	r3, [r3, #0]
 8045e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8045ea0:	683b      	ldr	r3, [r7, #0]
 8045ea2:	687a      	ldr	r2, [r7, #4]
 8045ea4:	490e      	ldr	r1, [pc, #56]	; (8045ee0 <I2C_MasterRequestWrite+0xfc>)
 8045ea6:	68f8      	ldr	r0, [r7, #12]
 8045ea8:	f000 f875 	bl	8045f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8045eac:	4603      	mov	r3, r0
 8045eae:	2b00      	cmp	r3, #0
 8045eb0:	d001      	beq.n	8045eb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8045eb2:	2301      	movs	r3, #1
 8045eb4:	e010      	b.n	8045ed8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8045eb6:	897b      	ldrh	r3, [r7, #10]
 8045eb8:	b2da      	uxtb	r2, r3
 8045eba:	68fb      	ldr	r3, [r7, #12]
 8045ebc:	681b      	ldr	r3, [r3, #0]
 8045ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8045ec0:	683b      	ldr	r3, [r7, #0]
 8045ec2:	687a      	ldr	r2, [r7, #4]
 8045ec4:	4907      	ldr	r1, [pc, #28]	; (8045ee4 <I2C_MasterRequestWrite+0x100>)
 8045ec6:	68f8      	ldr	r0, [r7, #12]
 8045ec8:	f000 f865 	bl	8045f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8045ecc:	4603      	mov	r3, r0
 8045ece:	2b00      	cmp	r3, #0
 8045ed0:	d001      	beq.n	8045ed6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8045ed2:	2301      	movs	r3, #1
 8045ed4:	e000      	b.n	8045ed8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8045ed6:	2300      	movs	r3, #0
}
 8045ed8:	4618      	mov	r0, r3
 8045eda:	3718      	adds	r7, #24
 8045edc:	46bd      	mov	sp, r7
 8045ede:	bd80      	pop	{r7, pc}
 8045ee0:	00010008 	.word	0x00010008
 8045ee4:	00010002 	.word	0x00010002

08045ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8045ee8:	b580      	push	{r7, lr}
 8045eea:	b084      	sub	sp, #16
 8045eec:	af00      	add	r7, sp, #0
 8045eee:	60f8      	str	r0, [r7, #12]
 8045ef0:	60b9      	str	r1, [r7, #8]
 8045ef2:	603b      	str	r3, [r7, #0]
 8045ef4:	4613      	mov	r3, r2
 8045ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8045ef8:	e025      	b.n	8045f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045efa:	683b      	ldr	r3, [r7, #0]
 8045efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045f00:	d021      	beq.n	8045f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8045f02:	f7fe feed 	bl	8044ce0 <HAL_GetTick>
 8045f06:	4602      	mov	r2, r0
 8045f08:	69bb      	ldr	r3, [r7, #24]
 8045f0a:	1ad3      	subs	r3, r2, r3
 8045f0c:	683a      	ldr	r2, [r7, #0]
 8045f0e:	429a      	cmp	r2, r3
 8045f10:	d302      	bcc.n	8045f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8045f12:	683b      	ldr	r3, [r7, #0]
 8045f14:	2b00      	cmp	r3, #0
 8045f16:	d116      	bne.n	8045f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8045f18:	68fb      	ldr	r3, [r7, #12]
 8045f1a:	2200      	movs	r2, #0
 8045f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8045f1e:	68fb      	ldr	r3, [r7, #12]
 8045f20:	2220      	movs	r2, #32
 8045f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8045f26:	68fb      	ldr	r3, [r7, #12]
 8045f28:	2200      	movs	r2, #0
 8045f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8045f2e:	68fb      	ldr	r3, [r7, #12]
 8045f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045f32:	f043 0220 	orr.w	r2, r3, #32
 8045f36:	68fb      	ldr	r3, [r7, #12]
 8045f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8045f3a:	68fb      	ldr	r3, [r7, #12]
 8045f3c:	2200      	movs	r2, #0
 8045f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8045f42:	2301      	movs	r3, #1
 8045f44:	e023      	b.n	8045f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8045f46:	68bb      	ldr	r3, [r7, #8]
 8045f48:	0c1b      	lsrs	r3, r3, #16
 8045f4a:	b2db      	uxtb	r3, r3
 8045f4c:	2b01      	cmp	r3, #1
 8045f4e:	d10d      	bne.n	8045f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8045f50:	68fb      	ldr	r3, [r7, #12]
 8045f52:	681b      	ldr	r3, [r3, #0]
 8045f54:	695b      	ldr	r3, [r3, #20]
 8045f56:	43da      	mvns	r2, r3
 8045f58:	68bb      	ldr	r3, [r7, #8]
 8045f5a:	4013      	ands	r3, r2
 8045f5c:	b29b      	uxth	r3, r3
 8045f5e:	2b00      	cmp	r3, #0
 8045f60:	bf0c      	ite	eq
 8045f62:	2301      	moveq	r3, #1
 8045f64:	2300      	movne	r3, #0
 8045f66:	b2db      	uxtb	r3, r3
 8045f68:	461a      	mov	r2, r3
 8045f6a:	e00c      	b.n	8045f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8045f6c:	68fb      	ldr	r3, [r7, #12]
 8045f6e:	681b      	ldr	r3, [r3, #0]
 8045f70:	699b      	ldr	r3, [r3, #24]
 8045f72:	43da      	mvns	r2, r3
 8045f74:	68bb      	ldr	r3, [r7, #8]
 8045f76:	4013      	ands	r3, r2
 8045f78:	b29b      	uxth	r3, r3
 8045f7a:	2b00      	cmp	r3, #0
 8045f7c:	bf0c      	ite	eq
 8045f7e:	2301      	moveq	r3, #1
 8045f80:	2300      	movne	r3, #0
 8045f82:	b2db      	uxtb	r3, r3
 8045f84:	461a      	mov	r2, r3
 8045f86:	79fb      	ldrb	r3, [r7, #7]
 8045f88:	429a      	cmp	r2, r3
 8045f8a:	d0b6      	beq.n	8045efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8045f8c:	2300      	movs	r3, #0
}
 8045f8e:	4618      	mov	r0, r3
 8045f90:	3710      	adds	r7, #16
 8045f92:	46bd      	mov	sp, r7
 8045f94:	bd80      	pop	{r7, pc}

08045f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8045f96:	b580      	push	{r7, lr}
 8045f98:	b084      	sub	sp, #16
 8045f9a:	af00      	add	r7, sp, #0
 8045f9c:	60f8      	str	r0, [r7, #12]
 8045f9e:	60b9      	str	r1, [r7, #8]
 8045fa0:	607a      	str	r2, [r7, #4]
 8045fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8045fa4:	e051      	b.n	804604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8045fa6:	68fb      	ldr	r3, [r7, #12]
 8045fa8:	681b      	ldr	r3, [r3, #0]
 8045faa:	695b      	ldr	r3, [r3, #20]
 8045fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045fb4:	d123      	bne.n	8045ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045fb6:	68fb      	ldr	r3, [r7, #12]
 8045fb8:	681b      	ldr	r3, [r3, #0]
 8045fba:	681a      	ldr	r2, [r3, #0]
 8045fbc:	68fb      	ldr	r3, [r7, #12]
 8045fbe:	681b      	ldr	r3, [r3, #0]
 8045fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8045fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8045fc6:	68fb      	ldr	r3, [r7, #12]
 8045fc8:	681b      	ldr	r3, [r3, #0]
 8045fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8045fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8045fd0:	68fb      	ldr	r3, [r7, #12]
 8045fd2:	2200      	movs	r2, #0
 8045fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8045fd6:	68fb      	ldr	r3, [r7, #12]
 8045fd8:	2220      	movs	r2, #32
 8045fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8045fde:	68fb      	ldr	r3, [r7, #12]
 8045fe0:	2200      	movs	r2, #0
 8045fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8045fe6:	68fb      	ldr	r3, [r7, #12]
 8045fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045fea:	f043 0204 	orr.w	r2, r3, #4
 8045fee:	68fb      	ldr	r3, [r7, #12]
 8045ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8045ff2:	68fb      	ldr	r3, [r7, #12]
 8045ff4:	2200      	movs	r2, #0
 8045ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8045ffa:	2301      	movs	r3, #1
 8045ffc:	e046      	b.n	804608c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045ffe:	687b      	ldr	r3, [r7, #4]
 8046000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046004:	d021      	beq.n	804604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046006:	f7fe fe6b 	bl	8044ce0 <HAL_GetTick>
 804600a:	4602      	mov	r2, r0
 804600c:	683b      	ldr	r3, [r7, #0]
 804600e:	1ad3      	subs	r3, r2, r3
 8046010:	687a      	ldr	r2, [r7, #4]
 8046012:	429a      	cmp	r2, r3
 8046014:	d302      	bcc.n	804601c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8046016:	687b      	ldr	r3, [r7, #4]
 8046018:	2b00      	cmp	r3, #0
 804601a:	d116      	bne.n	804604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 804601c:	68fb      	ldr	r3, [r7, #12]
 804601e:	2200      	movs	r2, #0
 8046020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8046022:	68fb      	ldr	r3, [r7, #12]
 8046024:	2220      	movs	r2, #32
 8046026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 804602a:	68fb      	ldr	r3, [r7, #12]
 804602c:	2200      	movs	r2, #0
 804602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8046032:	68fb      	ldr	r3, [r7, #12]
 8046034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046036:	f043 0220 	orr.w	r2, r3, #32
 804603a:	68fb      	ldr	r3, [r7, #12]
 804603c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804603e:	68fb      	ldr	r3, [r7, #12]
 8046040:	2200      	movs	r2, #0
 8046042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8046046:	2301      	movs	r3, #1
 8046048:	e020      	b.n	804608c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 804604a:	68bb      	ldr	r3, [r7, #8]
 804604c:	0c1b      	lsrs	r3, r3, #16
 804604e:	b2db      	uxtb	r3, r3
 8046050:	2b01      	cmp	r3, #1
 8046052:	d10c      	bne.n	804606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8046054:	68fb      	ldr	r3, [r7, #12]
 8046056:	681b      	ldr	r3, [r3, #0]
 8046058:	695b      	ldr	r3, [r3, #20]
 804605a:	43da      	mvns	r2, r3
 804605c:	68bb      	ldr	r3, [r7, #8]
 804605e:	4013      	ands	r3, r2
 8046060:	b29b      	uxth	r3, r3
 8046062:	2b00      	cmp	r3, #0
 8046064:	bf14      	ite	ne
 8046066:	2301      	movne	r3, #1
 8046068:	2300      	moveq	r3, #0
 804606a:	b2db      	uxtb	r3, r3
 804606c:	e00b      	b.n	8046086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 804606e:	68fb      	ldr	r3, [r7, #12]
 8046070:	681b      	ldr	r3, [r3, #0]
 8046072:	699b      	ldr	r3, [r3, #24]
 8046074:	43da      	mvns	r2, r3
 8046076:	68bb      	ldr	r3, [r7, #8]
 8046078:	4013      	ands	r3, r2
 804607a:	b29b      	uxth	r3, r3
 804607c:	2b00      	cmp	r3, #0
 804607e:	bf14      	ite	ne
 8046080:	2301      	movne	r3, #1
 8046082:	2300      	moveq	r3, #0
 8046084:	b2db      	uxtb	r3, r3
 8046086:	2b00      	cmp	r3, #0
 8046088:	d18d      	bne.n	8045fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 804608a:	2300      	movs	r3, #0
}
 804608c:	4618      	mov	r0, r3
 804608e:	3710      	adds	r7, #16
 8046090:	46bd      	mov	sp, r7
 8046092:	bd80      	pop	{r7, pc}

08046094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8046094:	b580      	push	{r7, lr}
 8046096:	b084      	sub	sp, #16
 8046098:	af00      	add	r7, sp, #0
 804609a:	60f8      	str	r0, [r7, #12]
 804609c:	60b9      	str	r1, [r7, #8]
 804609e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80460a0:	e02d      	b.n	80460fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80460a2:	68f8      	ldr	r0, [r7, #12]
 80460a4:	f000 f878 	bl	8046198 <I2C_IsAcknowledgeFailed>
 80460a8:	4603      	mov	r3, r0
 80460aa:	2b00      	cmp	r3, #0
 80460ac:	d001      	beq.n	80460b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80460ae:	2301      	movs	r3, #1
 80460b0:	e02d      	b.n	804610e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80460b2:	68bb      	ldr	r3, [r7, #8]
 80460b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80460b8:	d021      	beq.n	80460fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80460ba:	f7fe fe11 	bl	8044ce0 <HAL_GetTick>
 80460be:	4602      	mov	r2, r0
 80460c0:	687b      	ldr	r3, [r7, #4]
 80460c2:	1ad3      	subs	r3, r2, r3
 80460c4:	68ba      	ldr	r2, [r7, #8]
 80460c6:	429a      	cmp	r2, r3
 80460c8:	d302      	bcc.n	80460d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80460ca:	68bb      	ldr	r3, [r7, #8]
 80460cc:	2b00      	cmp	r3, #0
 80460ce:	d116      	bne.n	80460fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80460d0:	68fb      	ldr	r3, [r7, #12]
 80460d2:	2200      	movs	r2, #0
 80460d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80460d6:	68fb      	ldr	r3, [r7, #12]
 80460d8:	2220      	movs	r2, #32
 80460da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80460de:	68fb      	ldr	r3, [r7, #12]
 80460e0:	2200      	movs	r2, #0
 80460e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80460e6:	68fb      	ldr	r3, [r7, #12]
 80460e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80460ea:	f043 0220 	orr.w	r2, r3, #32
 80460ee:	68fb      	ldr	r3, [r7, #12]
 80460f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80460f2:	68fb      	ldr	r3, [r7, #12]
 80460f4:	2200      	movs	r2, #0
 80460f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80460fa:	2301      	movs	r3, #1
 80460fc:	e007      	b.n	804610e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80460fe:	68fb      	ldr	r3, [r7, #12]
 8046100:	681b      	ldr	r3, [r3, #0]
 8046102:	695b      	ldr	r3, [r3, #20]
 8046104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046108:	2b80      	cmp	r3, #128	; 0x80
 804610a:	d1ca      	bne.n	80460a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 804610c:	2300      	movs	r3, #0
}
 804610e:	4618      	mov	r0, r3
 8046110:	3710      	adds	r7, #16
 8046112:	46bd      	mov	sp, r7
 8046114:	bd80      	pop	{r7, pc}

08046116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8046116:	b580      	push	{r7, lr}
 8046118:	b084      	sub	sp, #16
 804611a:	af00      	add	r7, sp, #0
 804611c:	60f8      	str	r0, [r7, #12]
 804611e:	60b9      	str	r1, [r7, #8]
 8046120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8046122:	e02d      	b.n	8046180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8046124:	68f8      	ldr	r0, [r7, #12]
 8046126:	f000 f837 	bl	8046198 <I2C_IsAcknowledgeFailed>
 804612a:	4603      	mov	r3, r0
 804612c:	2b00      	cmp	r3, #0
 804612e:	d001      	beq.n	8046134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8046130:	2301      	movs	r3, #1
 8046132:	e02d      	b.n	8046190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046134:	68bb      	ldr	r3, [r7, #8]
 8046136:	f1b3 3fff 	cmp.w	r3, #4294967295
 804613a:	d021      	beq.n	8046180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804613c:	f7fe fdd0 	bl	8044ce0 <HAL_GetTick>
 8046140:	4602      	mov	r2, r0
 8046142:	687b      	ldr	r3, [r7, #4]
 8046144:	1ad3      	subs	r3, r2, r3
 8046146:	68ba      	ldr	r2, [r7, #8]
 8046148:	429a      	cmp	r2, r3
 804614a:	d302      	bcc.n	8046152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 804614c:	68bb      	ldr	r3, [r7, #8]
 804614e:	2b00      	cmp	r3, #0
 8046150:	d116      	bne.n	8046180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8046152:	68fb      	ldr	r3, [r7, #12]
 8046154:	2200      	movs	r2, #0
 8046156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8046158:	68fb      	ldr	r3, [r7, #12]
 804615a:	2220      	movs	r2, #32
 804615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8046160:	68fb      	ldr	r3, [r7, #12]
 8046162:	2200      	movs	r2, #0
 8046164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8046168:	68fb      	ldr	r3, [r7, #12]
 804616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804616c:	f043 0220 	orr.w	r2, r3, #32
 8046170:	68fb      	ldr	r3, [r7, #12]
 8046172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8046174:	68fb      	ldr	r3, [r7, #12]
 8046176:	2200      	movs	r2, #0
 8046178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 804617c:	2301      	movs	r3, #1
 804617e:	e007      	b.n	8046190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8046180:	68fb      	ldr	r3, [r7, #12]
 8046182:	681b      	ldr	r3, [r3, #0]
 8046184:	695b      	ldr	r3, [r3, #20]
 8046186:	f003 0304 	and.w	r3, r3, #4
 804618a:	2b04      	cmp	r3, #4
 804618c:	d1ca      	bne.n	8046124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 804618e:	2300      	movs	r3, #0
}
 8046190:	4618      	mov	r0, r3
 8046192:	3710      	adds	r7, #16
 8046194:	46bd      	mov	sp, r7
 8046196:	bd80      	pop	{r7, pc}

08046198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8046198:	b480      	push	{r7}
 804619a:	b083      	sub	sp, #12
 804619c:	af00      	add	r7, sp, #0
 804619e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80461a0:	687b      	ldr	r3, [r7, #4]
 80461a2:	681b      	ldr	r3, [r3, #0]
 80461a4:	695b      	ldr	r3, [r3, #20]
 80461a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80461aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80461ae:	d11b      	bne.n	80461e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80461b0:	687b      	ldr	r3, [r7, #4]
 80461b2:	681b      	ldr	r3, [r3, #0]
 80461b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80461b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80461ba:	687b      	ldr	r3, [r7, #4]
 80461bc:	2200      	movs	r2, #0
 80461be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80461c0:	687b      	ldr	r3, [r7, #4]
 80461c2:	2220      	movs	r2, #32
 80461c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80461c8:	687b      	ldr	r3, [r7, #4]
 80461ca:	2200      	movs	r2, #0
 80461cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80461d0:	687b      	ldr	r3, [r7, #4]
 80461d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80461d4:	f043 0204 	orr.w	r2, r3, #4
 80461d8:	687b      	ldr	r3, [r7, #4]
 80461da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80461dc:	687b      	ldr	r3, [r7, #4]
 80461de:	2200      	movs	r2, #0
 80461e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80461e4:	2301      	movs	r3, #1
 80461e6:	e000      	b.n	80461ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80461e8:	2300      	movs	r3, #0
}
 80461ea:	4618      	mov	r0, r3
 80461ec:	370c      	adds	r7, #12
 80461ee:	46bd      	mov	sp, r7
 80461f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80461f4:	4770      	bx	lr
	...

080461f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80461f8:	b580      	push	{r7, lr}
 80461fa:	b086      	sub	sp, #24
 80461fc:	af00      	add	r7, sp, #0
 80461fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046200:	687b      	ldr	r3, [r7, #4]
 8046202:	2b00      	cmp	r3, #0
 8046204:	d101      	bne.n	804620a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8046206:	2301      	movs	r3, #1
 8046208:	e267      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804620a:	687b      	ldr	r3, [r7, #4]
 804620c:	681b      	ldr	r3, [r3, #0]
 804620e:	f003 0301 	and.w	r3, r3, #1
 8046212:	2b00      	cmp	r3, #0
 8046214:	d075      	beq.n	8046302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046216:	4b88      	ldr	r3, [pc, #544]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046218:	689b      	ldr	r3, [r3, #8]
 804621a:	f003 030c 	and.w	r3, r3, #12
 804621e:	2b04      	cmp	r3, #4
 8046220:	d00c      	beq.n	804623c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046222:	4b85      	ldr	r3, [pc, #532]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046224:	689b      	ldr	r3, [r3, #8]
 8046226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804622a:	2b08      	cmp	r3, #8
 804622c:	d112      	bne.n	8046254 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804622e:	4b82      	ldr	r3, [pc, #520]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046230:	685b      	ldr	r3, [r3, #4]
 8046232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804623a:	d10b      	bne.n	8046254 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804623c:	4b7e      	ldr	r3, [pc, #504]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804623e:	681b      	ldr	r3, [r3, #0]
 8046240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046244:	2b00      	cmp	r3, #0
 8046246:	d05b      	beq.n	8046300 <HAL_RCC_OscConfig+0x108>
 8046248:	687b      	ldr	r3, [r7, #4]
 804624a:	685b      	ldr	r3, [r3, #4]
 804624c:	2b00      	cmp	r3, #0
 804624e:	d157      	bne.n	8046300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8046250:	2301      	movs	r3, #1
 8046252:	e242      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8046254:	687b      	ldr	r3, [r7, #4]
 8046256:	685b      	ldr	r3, [r3, #4]
 8046258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804625c:	d106      	bne.n	804626c <HAL_RCC_OscConfig+0x74>
 804625e:	4b76      	ldr	r3, [pc, #472]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046260:	681b      	ldr	r3, [r3, #0]
 8046262:	4a75      	ldr	r2, [pc, #468]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046268:	6013      	str	r3, [r2, #0]
 804626a:	e01d      	b.n	80462a8 <HAL_RCC_OscConfig+0xb0>
 804626c:	687b      	ldr	r3, [r7, #4]
 804626e:	685b      	ldr	r3, [r3, #4]
 8046270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8046274:	d10c      	bne.n	8046290 <HAL_RCC_OscConfig+0x98>
 8046276:	4b70      	ldr	r3, [pc, #448]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046278:	681b      	ldr	r3, [r3, #0]
 804627a:	4a6f      	ldr	r2, [pc, #444]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804627c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8046280:	6013      	str	r3, [r2, #0]
 8046282:	4b6d      	ldr	r3, [pc, #436]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046284:	681b      	ldr	r3, [r3, #0]
 8046286:	4a6c      	ldr	r2, [pc, #432]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804628c:	6013      	str	r3, [r2, #0]
 804628e:	e00b      	b.n	80462a8 <HAL_RCC_OscConfig+0xb0>
 8046290:	4b69      	ldr	r3, [pc, #420]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046292:	681b      	ldr	r3, [r3, #0]
 8046294:	4a68      	ldr	r2, [pc, #416]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804629a:	6013      	str	r3, [r2, #0]
 804629c:	4b66      	ldr	r3, [pc, #408]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804629e:	681b      	ldr	r3, [r3, #0]
 80462a0:	4a65      	ldr	r2, [pc, #404]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 80462a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80462a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80462a8:	687b      	ldr	r3, [r7, #4]
 80462aa:	685b      	ldr	r3, [r3, #4]
 80462ac:	2b00      	cmp	r3, #0
 80462ae:	d013      	beq.n	80462d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80462b0:	f7fe fd16 	bl	8044ce0 <HAL_GetTick>
 80462b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80462b6:	e008      	b.n	80462ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80462b8:	f7fe fd12 	bl	8044ce0 <HAL_GetTick>
 80462bc:	4602      	mov	r2, r0
 80462be:	693b      	ldr	r3, [r7, #16]
 80462c0:	1ad3      	subs	r3, r2, r3
 80462c2:	2b64      	cmp	r3, #100	; 0x64
 80462c4:	d901      	bls.n	80462ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80462c6:	2303      	movs	r3, #3
 80462c8:	e207      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80462ca:	4b5b      	ldr	r3, [pc, #364]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 80462cc:	681b      	ldr	r3, [r3, #0]
 80462ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80462d2:	2b00      	cmp	r3, #0
 80462d4:	d0f0      	beq.n	80462b8 <HAL_RCC_OscConfig+0xc0>
 80462d6:	e014      	b.n	8046302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80462d8:	f7fe fd02 	bl	8044ce0 <HAL_GetTick>
 80462dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80462de:	e008      	b.n	80462f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80462e0:	f7fe fcfe 	bl	8044ce0 <HAL_GetTick>
 80462e4:	4602      	mov	r2, r0
 80462e6:	693b      	ldr	r3, [r7, #16]
 80462e8:	1ad3      	subs	r3, r2, r3
 80462ea:	2b64      	cmp	r3, #100	; 0x64
 80462ec:	d901      	bls.n	80462f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80462ee:	2303      	movs	r3, #3
 80462f0:	e1f3      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80462f2:	4b51      	ldr	r3, [pc, #324]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 80462f4:	681b      	ldr	r3, [r3, #0]
 80462f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80462fa:	2b00      	cmp	r3, #0
 80462fc:	d1f0      	bne.n	80462e0 <HAL_RCC_OscConfig+0xe8>
 80462fe:	e000      	b.n	8046302 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8046302:	687b      	ldr	r3, [r7, #4]
 8046304:	681b      	ldr	r3, [r3, #0]
 8046306:	f003 0302 	and.w	r3, r3, #2
 804630a:	2b00      	cmp	r3, #0
 804630c:	d063      	beq.n	80463d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804630e:	4b4a      	ldr	r3, [pc, #296]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046310:	689b      	ldr	r3, [r3, #8]
 8046312:	f003 030c 	and.w	r3, r3, #12
 8046316:	2b00      	cmp	r3, #0
 8046318:	d00b      	beq.n	8046332 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804631a:	4b47      	ldr	r3, [pc, #284]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804631c:	689b      	ldr	r3, [r3, #8]
 804631e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046322:	2b08      	cmp	r3, #8
 8046324:	d11c      	bne.n	8046360 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046326:	4b44      	ldr	r3, [pc, #272]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046328:	685b      	ldr	r3, [r3, #4]
 804632a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804632e:	2b00      	cmp	r3, #0
 8046330:	d116      	bne.n	8046360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046332:	4b41      	ldr	r3, [pc, #260]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046334:	681b      	ldr	r3, [r3, #0]
 8046336:	f003 0302 	and.w	r3, r3, #2
 804633a:	2b00      	cmp	r3, #0
 804633c:	d005      	beq.n	804634a <HAL_RCC_OscConfig+0x152>
 804633e:	687b      	ldr	r3, [r7, #4]
 8046340:	68db      	ldr	r3, [r3, #12]
 8046342:	2b01      	cmp	r3, #1
 8046344:	d001      	beq.n	804634a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8046346:	2301      	movs	r3, #1
 8046348:	e1c7      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804634a:	4b3b      	ldr	r3, [pc, #236]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804634c:	681b      	ldr	r3, [r3, #0]
 804634e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046352:	687b      	ldr	r3, [r7, #4]
 8046354:	691b      	ldr	r3, [r3, #16]
 8046356:	00db      	lsls	r3, r3, #3
 8046358:	4937      	ldr	r1, [pc, #220]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804635a:	4313      	orrs	r3, r2
 804635c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804635e:	e03a      	b.n	80463d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046360:	687b      	ldr	r3, [r7, #4]
 8046362:	68db      	ldr	r3, [r3, #12]
 8046364:	2b00      	cmp	r3, #0
 8046366:	d020      	beq.n	80463aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8046368:	4b34      	ldr	r3, [pc, #208]	; (804643c <HAL_RCC_OscConfig+0x244>)
 804636a:	2201      	movs	r2, #1
 804636c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804636e:	f7fe fcb7 	bl	8044ce0 <HAL_GetTick>
 8046372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046374:	e008      	b.n	8046388 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046376:	f7fe fcb3 	bl	8044ce0 <HAL_GetTick>
 804637a:	4602      	mov	r2, r0
 804637c:	693b      	ldr	r3, [r7, #16]
 804637e:	1ad3      	subs	r3, r2, r3
 8046380:	2b02      	cmp	r3, #2
 8046382:	d901      	bls.n	8046388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8046384:	2303      	movs	r3, #3
 8046386:	e1a8      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046388:	4b2b      	ldr	r3, [pc, #172]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804638a:	681b      	ldr	r3, [r3, #0]
 804638c:	f003 0302 	and.w	r3, r3, #2
 8046390:	2b00      	cmp	r3, #0
 8046392:	d0f0      	beq.n	8046376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046394:	4b28      	ldr	r3, [pc, #160]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 8046396:	681b      	ldr	r3, [r3, #0]
 8046398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804639c:	687b      	ldr	r3, [r7, #4]
 804639e:	691b      	ldr	r3, [r3, #16]
 80463a0:	00db      	lsls	r3, r3, #3
 80463a2:	4925      	ldr	r1, [pc, #148]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 80463a4:	4313      	orrs	r3, r2
 80463a6:	600b      	str	r3, [r1, #0]
 80463a8:	e015      	b.n	80463d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80463aa:	4b24      	ldr	r3, [pc, #144]	; (804643c <HAL_RCC_OscConfig+0x244>)
 80463ac:	2200      	movs	r2, #0
 80463ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80463b0:	f7fe fc96 	bl	8044ce0 <HAL_GetTick>
 80463b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80463b6:	e008      	b.n	80463ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80463b8:	f7fe fc92 	bl	8044ce0 <HAL_GetTick>
 80463bc:	4602      	mov	r2, r0
 80463be:	693b      	ldr	r3, [r7, #16]
 80463c0:	1ad3      	subs	r3, r2, r3
 80463c2:	2b02      	cmp	r3, #2
 80463c4:	d901      	bls.n	80463ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80463c6:	2303      	movs	r3, #3
 80463c8:	e187      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80463ca:	4b1b      	ldr	r3, [pc, #108]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 80463cc:	681b      	ldr	r3, [r3, #0]
 80463ce:	f003 0302 	and.w	r3, r3, #2
 80463d2:	2b00      	cmp	r3, #0
 80463d4:	d1f0      	bne.n	80463b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80463d6:	687b      	ldr	r3, [r7, #4]
 80463d8:	681b      	ldr	r3, [r3, #0]
 80463da:	f003 0308 	and.w	r3, r3, #8
 80463de:	2b00      	cmp	r3, #0
 80463e0:	d036      	beq.n	8046450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80463e2:	687b      	ldr	r3, [r7, #4]
 80463e4:	695b      	ldr	r3, [r3, #20]
 80463e6:	2b00      	cmp	r3, #0
 80463e8:	d016      	beq.n	8046418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80463ea:	4b15      	ldr	r3, [pc, #84]	; (8046440 <HAL_RCC_OscConfig+0x248>)
 80463ec:	2201      	movs	r2, #1
 80463ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80463f0:	f7fe fc76 	bl	8044ce0 <HAL_GetTick>
 80463f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80463f6:	e008      	b.n	804640a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80463f8:	f7fe fc72 	bl	8044ce0 <HAL_GetTick>
 80463fc:	4602      	mov	r2, r0
 80463fe:	693b      	ldr	r3, [r7, #16]
 8046400:	1ad3      	subs	r3, r2, r3
 8046402:	2b02      	cmp	r3, #2
 8046404:	d901      	bls.n	804640a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8046406:	2303      	movs	r3, #3
 8046408:	e167      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804640a:	4b0b      	ldr	r3, [pc, #44]	; (8046438 <HAL_RCC_OscConfig+0x240>)
 804640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804640e:	f003 0302 	and.w	r3, r3, #2
 8046412:	2b00      	cmp	r3, #0
 8046414:	d0f0      	beq.n	80463f8 <HAL_RCC_OscConfig+0x200>
 8046416:	e01b      	b.n	8046450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046418:	4b09      	ldr	r3, [pc, #36]	; (8046440 <HAL_RCC_OscConfig+0x248>)
 804641a:	2200      	movs	r2, #0
 804641c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804641e:	f7fe fc5f 	bl	8044ce0 <HAL_GetTick>
 8046422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046424:	e00e      	b.n	8046444 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046426:	f7fe fc5b 	bl	8044ce0 <HAL_GetTick>
 804642a:	4602      	mov	r2, r0
 804642c:	693b      	ldr	r3, [r7, #16]
 804642e:	1ad3      	subs	r3, r2, r3
 8046430:	2b02      	cmp	r3, #2
 8046432:	d907      	bls.n	8046444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8046434:	2303      	movs	r3, #3
 8046436:	e150      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
 8046438:	40023800 	.word	0x40023800
 804643c:	42470000 	.word	0x42470000
 8046440:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046444:	4b88      	ldr	r3, [pc, #544]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046448:	f003 0302 	and.w	r3, r3, #2
 804644c:	2b00      	cmp	r3, #0
 804644e:	d1ea      	bne.n	8046426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046450:	687b      	ldr	r3, [r7, #4]
 8046452:	681b      	ldr	r3, [r3, #0]
 8046454:	f003 0304 	and.w	r3, r3, #4
 8046458:	2b00      	cmp	r3, #0
 804645a:	f000 8097 	beq.w	804658c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 804645e:	2300      	movs	r3, #0
 8046460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8046462:	4b81      	ldr	r3, [pc, #516]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804646a:	2b00      	cmp	r3, #0
 804646c:	d10f      	bne.n	804648e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804646e:	2300      	movs	r3, #0
 8046470:	60bb      	str	r3, [r7, #8]
 8046472:	4b7d      	ldr	r3, [pc, #500]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046476:	4a7c      	ldr	r2, [pc, #496]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804647c:	6413      	str	r3, [r2, #64]	; 0x40
 804647e:	4b7a      	ldr	r3, [pc, #488]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046486:	60bb      	str	r3, [r7, #8]
 8046488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804648a:	2301      	movs	r3, #1
 804648c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 804648e:	4b77      	ldr	r3, [pc, #476]	; (804666c <HAL_RCC_OscConfig+0x474>)
 8046490:	681b      	ldr	r3, [r3, #0]
 8046492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046496:	2b00      	cmp	r3, #0
 8046498:	d118      	bne.n	80464cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804649a:	4b74      	ldr	r3, [pc, #464]	; (804666c <HAL_RCC_OscConfig+0x474>)
 804649c:	681b      	ldr	r3, [r3, #0]
 804649e:	4a73      	ldr	r2, [pc, #460]	; (804666c <HAL_RCC_OscConfig+0x474>)
 80464a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80464a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80464a6:	f7fe fc1b 	bl	8044ce0 <HAL_GetTick>
 80464aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80464ac:	e008      	b.n	80464c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80464ae:	f7fe fc17 	bl	8044ce0 <HAL_GetTick>
 80464b2:	4602      	mov	r2, r0
 80464b4:	693b      	ldr	r3, [r7, #16]
 80464b6:	1ad3      	subs	r3, r2, r3
 80464b8:	2b02      	cmp	r3, #2
 80464ba:	d901      	bls.n	80464c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80464bc:	2303      	movs	r3, #3
 80464be:	e10c      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80464c0:	4b6a      	ldr	r3, [pc, #424]	; (804666c <HAL_RCC_OscConfig+0x474>)
 80464c2:	681b      	ldr	r3, [r3, #0]
 80464c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80464c8:	2b00      	cmp	r3, #0
 80464ca:	d0f0      	beq.n	80464ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80464cc:	687b      	ldr	r3, [r7, #4]
 80464ce:	689b      	ldr	r3, [r3, #8]
 80464d0:	2b01      	cmp	r3, #1
 80464d2:	d106      	bne.n	80464e2 <HAL_RCC_OscConfig+0x2ea>
 80464d4:	4b64      	ldr	r3, [pc, #400]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80464d8:	4a63      	ldr	r2, [pc, #396]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464da:	f043 0301 	orr.w	r3, r3, #1
 80464de:	6713      	str	r3, [r2, #112]	; 0x70
 80464e0:	e01c      	b.n	804651c <HAL_RCC_OscConfig+0x324>
 80464e2:	687b      	ldr	r3, [r7, #4]
 80464e4:	689b      	ldr	r3, [r3, #8]
 80464e6:	2b05      	cmp	r3, #5
 80464e8:	d10c      	bne.n	8046504 <HAL_RCC_OscConfig+0x30c>
 80464ea:	4b5f      	ldr	r3, [pc, #380]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80464ee:	4a5e      	ldr	r2, [pc, #376]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464f0:	f043 0304 	orr.w	r3, r3, #4
 80464f4:	6713      	str	r3, [r2, #112]	; 0x70
 80464f6:	4b5c      	ldr	r3, [pc, #368]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80464fa:	4a5b      	ldr	r2, [pc, #364]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80464fc:	f043 0301 	orr.w	r3, r3, #1
 8046500:	6713      	str	r3, [r2, #112]	; 0x70
 8046502:	e00b      	b.n	804651c <HAL_RCC_OscConfig+0x324>
 8046504:	4b58      	ldr	r3, [pc, #352]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046508:	4a57      	ldr	r2, [pc, #348]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 804650a:	f023 0301 	bic.w	r3, r3, #1
 804650e:	6713      	str	r3, [r2, #112]	; 0x70
 8046510:	4b55      	ldr	r3, [pc, #340]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046514:	4a54      	ldr	r2, [pc, #336]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046516:	f023 0304 	bic.w	r3, r3, #4
 804651a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804651c:	687b      	ldr	r3, [r7, #4]
 804651e:	689b      	ldr	r3, [r3, #8]
 8046520:	2b00      	cmp	r3, #0
 8046522:	d015      	beq.n	8046550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046524:	f7fe fbdc 	bl	8044ce0 <HAL_GetTick>
 8046528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804652a:	e00a      	b.n	8046542 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804652c:	f7fe fbd8 	bl	8044ce0 <HAL_GetTick>
 8046530:	4602      	mov	r2, r0
 8046532:	693b      	ldr	r3, [r7, #16]
 8046534:	1ad3      	subs	r3, r2, r3
 8046536:	f241 3288 	movw	r2, #5000	; 0x1388
 804653a:	4293      	cmp	r3, r2
 804653c:	d901      	bls.n	8046542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 804653e:	2303      	movs	r3, #3
 8046540:	e0cb      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046542:	4b49      	ldr	r3, [pc, #292]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046546:	f003 0302 	and.w	r3, r3, #2
 804654a:	2b00      	cmp	r3, #0
 804654c:	d0ee      	beq.n	804652c <HAL_RCC_OscConfig+0x334>
 804654e:	e014      	b.n	804657a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046550:	f7fe fbc6 	bl	8044ce0 <HAL_GetTick>
 8046554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046556:	e00a      	b.n	804656e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046558:	f7fe fbc2 	bl	8044ce0 <HAL_GetTick>
 804655c:	4602      	mov	r2, r0
 804655e:	693b      	ldr	r3, [r7, #16]
 8046560:	1ad3      	subs	r3, r2, r3
 8046562:	f241 3288 	movw	r2, #5000	; 0x1388
 8046566:	4293      	cmp	r3, r2
 8046568:	d901      	bls.n	804656e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 804656a:	2303      	movs	r3, #3
 804656c:	e0b5      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804656e:	4b3e      	ldr	r3, [pc, #248]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046572:	f003 0302 	and.w	r3, r3, #2
 8046576:	2b00      	cmp	r3, #0
 8046578:	d1ee      	bne.n	8046558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804657a:	7dfb      	ldrb	r3, [r7, #23]
 804657c:	2b01      	cmp	r3, #1
 804657e:	d105      	bne.n	804658c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8046580:	4b39      	ldr	r3, [pc, #228]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046584:	4a38      	ldr	r2, [pc, #224]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804658a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804658c:	687b      	ldr	r3, [r7, #4]
 804658e:	699b      	ldr	r3, [r3, #24]
 8046590:	2b00      	cmp	r3, #0
 8046592:	f000 80a1 	beq.w	80466d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8046596:	4b34      	ldr	r3, [pc, #208]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046598:	689b      	ldr	r3, [r3, #8]
 804659a:	f003 030c 	and.w	r3, r3, #12
 804659e:	2b08      	cmp	r3, #8
 80465a0:	d05c      	beq.n	804665c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80465a2:	687b      	ldr	r3, [r7, #4]
 80465a4:	699b      	ldr	r3, [r3, #24]
 80465a6:	2b02      	cmp	r3, #2
 80465a8:	d141      	bne.n	804662e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80465aa:	4b31      	ldr	r3, [pc, #196]	; (8046670 <HAL_RCC_OscConfig+0x478>)
 80465ac:	2200      	movs	r2, #0
 80465ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80465b0:	f7fe fb96 	bl	8044ce0 <HAL_GetTick>
 80465b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80465b6:	e008      	b.n	80465ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80465b8:	f7fe fb92 	bl	8044ce0 <HAL_GetTick>
 80465bc:	4602      	mov	r2, r0
 80465be:	693b      	ldr	r3, [r7, #16]
 80465c0:	1ad3      	subs	r3, r2, r3
 80465c2:	2b02      	cmp	r3, #2
 80465c4:	d901      	bls.n	80465ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80465c6:	2303      	movs	r3, #3
 80465c8:	e087      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80465ca:	4b27      	ldr	r3, [pc, #156]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80465cc:	681b      	ldr	r3, [r3, #0]
 80465ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80465d2:	2b00      	cmp	r3, #0
 80465d4:	d1f0      	bne.n	80465b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80465d6:	687b      	ldr	r3, [r7, #4]
 80465d8:	69da      	ldr	r2, [r3, #28]
 80465da:	687b      	ldr	r3, [r7, #4]
 80465dc:	6a1b      	ldr	r3, [r3, #32]
 80465de:	431a      	orrs	r2, r3
 80465e0:	687b      	ldr	r3, [r7, #4]
 80465e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80465e4:	019b      	lsls	r3, r3, #6
 80465e6:	431a      	orrs	r2, r3
 80465e8:	687b      	ldr	r3, [r7, #4]
 80465ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80465ec:	085b      	lsrs	r3, r3, #1
 80465ee:	3b01      	subs	r3, #1
 80465f0:	041b      	lsls	r3, r3, #16
 80465f2:	431a      	orrs	r2, r3
 80465f4:	687b      	ldr	r3, [r7, #4]
 80465f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80465f8:	061b      	lsls	r3, r3, #24
 80465fa:	491b      	ldr	r1, [pc, #108]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 80465fc:	4313      	orrs	r3, r2
 80465fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8046600:	4b1b      	ldr	r3, [pc, #108]	; (8046670 <HAL_RCC_OscConfig+0x478>)
 8046602:	2201      	movs	r2, #1
 8046604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046606:	f7fe fb6b 	bl	8044ce0 <HAL_GetTick>
 804660a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804660c:	e008      	b.n	8046620 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804660e:	f7fe fb67 	bl	8044ce0 <HAL_GetTick>
 8046612:	4602      	mov	r2, r0
 8046614:	693b      	ldr	r3, [r7, #16]
 8046616:	1ad3      	subs	r3, r2, r3
 8046618:	2b02      	cmp	r3, #2
 804661a:	d901      	bls.n	8046620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 804661c:	2303      	movs	r3, #3
 804661e:	e05c      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046620:	4b11      	ldr	r3, [pc, #68]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046622:	681b      	ldr	r3, [r3, #0]
 8046624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046628:	2b00      	cmp	r3, #0
 804662a:	d0f0      	beq.n	804660e <HAL_RCC_OscConfig+0x416>
 804662c:	e054      	b.n	80466d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804662e:	4b10      	ldr	r3, [pc, #64]	; (8046670 <HAL_RCC_OscConfig+0x478>)
 8046630:	2200      	movs	r2, #0
 8046632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046634:	f7fe fb54 	bl	8044ce0 <HAL_GetTick>
 8046638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804663a:	e008      	b.n	804664e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804663c:	f7fe fb50 	bl	8044ce0 <HAL_GetTick>
 8046640:	4602      	mov	r2, r0
 8046642:	693b      	ldr	r3, [r7, #16]
 8046644:	1ad3      	subs	r3, r2, r3
 8046646:	2b02      	cmp	r3, #2
 8046648:	d901      	bls.n	804664e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 804664a:	2303      	movs	r3, #3
 804664c:	e045      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804664e:	4b06      	ldr	r3, [pc, #24]	; (8046668 <HAL_RCC_OscConfig+0x470>)
 8046650:	681b      	ldr	r3, [r3, #0]
 8046652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046656:	2b00      	cmp	r3, #0
 8046658:	d1f0      	bne.n	804663c <HAL_RCC_OscConfig+0x444>
 804665a:	e03d      	b.n	80466d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 804665c:	687b      	ldr	r3, [r7, #4]
 804665e:	699b      	ldr	r3, [r3, #24]
 8046660:	2b01      	cmp	r3, #1
 8046662:	d107      	bne.n	8046674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8046664:	2301      	movs	r3, #1
 8046666:	e038      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
 8046668:	40023800 	.word	0x40023800
 804666c:	40007000 	.word	0x40007000
 8046670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8046674:	4b1b      	ldr	r3, [pc, #108]	; (80466e4 <HAL_RCC_OscConfig+0x4ec>)
 8046676:	685b      	ldr	r3, [r3, #4]
 8046678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804667a:	687b      	ldr	r3, [r7, #4]
 804667c:	699b      	ldr	r3, [r3, #24]
 804667e:	2b01      	cmp	r3, #1
 8046680:	d028      	beq.n	80466d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046682:	68fb      	ldr	r3, [r7, #12]
 8046684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8046688:	687b      	ldr	r3, [r7, #4]
 804668a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804668c:	429a      	cmp	r2, r3
 804668e:	d121      	bne.n	80466d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046690:	68fb      	ldr	r3, [r7, #12]
 8046692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8046696:	687b      	ldr	r3, [r7, #4]
 8046698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804669a:	429a      	cmp	r2, r3
 804669c:	d11a      	bne.n	80466d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 804669e:	68fa      	ldr	r2, [r7, #12]
 80466a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80466a4:	4013      	ands	r3, r2
 80466a6:	687a      	ldr	r2, [r7, #4]
 80466a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80466aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80466ac:	4293      	cmp	r3, r2
 80466ae:	d111      	bne.n	80466d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80466b0:	68fb      	ldr	r3, [r7, #12]
 80466b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80466b6:	687b      	ldr	r3, [r7, #4]
 80466b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80466ba:	085b      	lsrs	r3, r3, #1
 80466bc:	3b01      	subs	r3, #1
 80466be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80466c0:	429a      	cmp	r2, r3
 80466c2:	d107      	bne.n	80466d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80466c4:	68fb      	ldr	r3, [r7, #12]
 80466c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80466ca:	687b      	ldr	r3, [r7, #4]
 80466cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80466ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80466d0:	429a      	cmp	r2, r3
 80466d2:	d001      	beq.n	80466d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80466d4:	2301      	movs	r3, #1
 80466d6:	e000      	b.n	80466da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80466d8:	2300      	movs	r3, #0
}
 80466da:	4618      	mov	r0, r3
 80466dc:	3718      	adds	r7, #24
 80466de:	46bd      	mov	sp, r7
 80466e0:	bd80      	pop	{r7, pc}
 80466e2:	bf00      	nop
 80466e4:	40023800 	.word	0x40023800

080466e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80466e8:	b580      	push	{r7, lr}
 80466ea:	b084      	sub	sp, #16
 80466ec:	af00      	add	r7, sp, #0
 80466ee:	6078      	str	r0, [r7, #4]
 80466f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80466f2:	687b      	ldr	r3, [r7, #4]
 80466f4:	2b00      	cmp	r3, #0
 80466f6:	d101      	bne.n	80466fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80466f8:	2301      	movs	r3, #1
 80466fa:	e0cc      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80466fc:	4b68      	ldr	r3, [pc, #416]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 80466fe:	681b      	ldr	r3, [r3, #0]
 8046700:	f003 0307 	and.w	r3, r3, #7
 8046704:	683a      	ldr	r2, [r7, #0]
 8046706:	429a      	cmp	r2, r3
 8046708:	d90c      	bls.n	8046724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804670a:	4b65      	ldr	r3, [pc, #404]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 804670c:	683a      	ldr	r2, [r7, #0]
 804670e:	b2d2      	uxtb	r2, r2
 8046710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046712:	4b63      	ldr	r3, [pc, #396]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 8046714:	681b      	ldr	r3, [r3, #0]
 8046716:	f003 0307 	and.w	r3, r3, #7
 804671a:	683a      	ldr	r2, [r7, #0]
 804671c:	429a      	cmp	r2, r3
 804671e:	d001      	beq.n	8046724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8046720:	2301      	movs	r3, #1
 8046722:	e0b8      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046724:	687b      	ldr	r3, [r7, #4]
 8046726:	681b      	ldr	r3, [r3, #0]
 8046728:	f003 0302 	and.w	r3, r3, #2
 804672c:	2b00      	cmp	r3, #0
 804672e:	d020      	beq.n	8046772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046730:	687b      	ldr	r3, [r7, #4]
 8046732:	681b      	ldr	r3, [r3, #0]
 8046734:	f003 0304 	and.w	r3, r3, #4
 8046738:	2b00      	cmp	r3, #0
 804673a:	d005      	beq.n	8046748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 804673c:	4b59      	ldr	r3, [pc, #356]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804673e:	689b      	ldr	r3, [r3, #8]
 8046740:	4a58      	ldr	r2, [pc, #352]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 8046742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046748:	687b      	ldr	r3, [r7, #4]
 804674a:	681b      	ldr	r3, [r3, #0]
 804674c:	f003 0308 	and.w	r3, r3, #8
 8046750:	2b00      	cmp	r3, #0
 8046752:	d005      	beq.n	8046760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046754:	4b53      	ldr	r3, [pc, #332]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 8046756:	689b      	ldr	r3, [r3, #8]
 8046758:	4a52      	ldr	r2, [pc, #328]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804675a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804675e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046760:	4b50      	ldr	r3, [pc, #320]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 8046762:	689b      	ldr	r3, [r3, #8]
 8046764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046768:	687b      	ldr	r3, [r7, #4]
 804676a:	689b      	ldr	r3, [r3, #8]
 804676c:	494d      	ldr	r1, [pc, #308]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804676e:	4313      	orrs	r3, r2
 8046770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8046772:	687b      	ldr	r3, [r7, #4]
 8046774:	681b      	ldr	r3, [r3, #0]
 8046776:	f003 0301 	and.w	r3, r3, #1
 804677a:	2b00      	cmp	r3, #0
 804677c:	d044      	beq.n	8046808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804677e:	687b      	ldr	r3, [r7, #4]
 8046780:	685b      	ldr	r3, [r3, #4]
 8046782:	2b01      	cmp	r3, #1
 8046784:	d107      	bne.n	8046796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046786:	4b47      	ldr	r3, [pc, #284]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 8046788:	681b      	ldr	r3, [r3, #0]
 804678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804678e:	2b00      	cmp	r3, #0
 8046790:	d119      	bne.n	80467c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046792:	2301      	movs	r3, #1
 8046794:	e07f      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046796:	687b      	ldr	r3, [r7, #4]
 8046798:	685b      	ldr	r3, [r3, #4]
 804679a:	2b02      	cmp	r3, #2
 804679c:	d003      	beq.n	80467a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 804679e:	687b      	ldr	r3, [r7, #4]
 80467a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80467a2:	2b03      	cmp	r3, #3
 80467a4:	d107      	bne.n	80467b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80467a6:	4b3f      	ldr	r3, [pc, #252]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 80467a8:	681b      	ldr	r3, [r3, #0]
 80467aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80467ae:	2b00      	cmp	r3, #0
 80467b0:	d109      	bne.n	80467c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80467b2:	2301      	movs	r3, #1
 80467b4:	e06f      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80467b6:	4b3b      	ldr	r3, [pc, #236]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 80467b8:	681b      	ldr	r3, [r3, #0]
 80467ba:	f003 0302 	and.w	r3, r3, #2
 80467be:	2b00      	cmp	r3, #0
 80467c0:	d101      	bne.n	80467c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80467c2:	2301      	movs	r3, #1
 80467c4:	e067      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80467c6:	4b37      	ldr	r3, [pc, #220]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 80467c8:	689b      	ldr	r3, [r3, #8]
 80467ca:	f023 0203 	bic.w	r2, r3, #3
 80467ce:	687b      	ldr	r3, [r7, #4]
 80467d0:	685b      	ldr	r3, [r3, #4]
 80467d2:	4934      	ldr	r1, [pc, #208]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 80467d4:	4313      	orrs	r3, r2
 80467d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80467d8:	f7fe fa82 	bl	8044ce0 <HAL_GetTick>
 80467dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80467de:	e00a      	b.n	80467f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80467e0:	f7fe fa7e 	bl	8044ce0 <HAL_GetTick>
 80467e4:	4602      	mov	r2, r0
 80467e6:	68fb      	ldr	r3, [r7, #12]
 80467e8:	1ad3      	subs	r3, r2, r3
 80467ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80467ee:	4293      	cmp	r3, r2
 80467f0:	d901      	bls.n	80467f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80467f2:	2303      	movs	r3, #3
 80467f4:	e04f      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80467f6:	4b2b      	ldr	r3, [pc, #172]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 80467f8:	689b      	ldr	r3, [r3, #8]
 80467fa:	f003 020c 	and.w	r2, r3, #12
 80467fe:	687b      	ldr	r3, [r7, #4]
 8046800:	685b      	ldr	r3, [r3, #4]
 8046802:	009b      	lsls	r3, r3, #2
 8046804:	429a      	cmp	r2, r3
 8046806:	d1eb      	bne.n	80467e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046808:	4b25      	ldr	r3, [pc, #148]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 804680a:	681b      	ldr	r3, [r3, #0]
 804680c:	f003 0307 	and.w	r3, r3, #7
 8046810:	683a      	ldr	r2, [r7, #0]
 8046812:	429a      	cmp	r2, r3
 8046814:	d20c      	bcs.n	8046830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046816:	4b22      	ldr	r3, [pc, #136]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 8046818:	683a      	ldr	r2, [r7, #0]
 804681a:	b2d2      	uxtb	r2, r2
 804681c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804681e:	4b20      	ldr	r3, [pc, #128]	; (80468a0 <HAL_RCC_ClockConfig+0x1b8>)
 8046820:	681b      	ldr	r3, [r3, #0]
 8046822:	f003 0307 	and.w	r3, r3, #7
 8046826:	683a      	ldr	r2, [r7, #0]
 8046828:	429a      	cmp	r2, r3
 804682a:	d001      	beq.n	8046830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 804682c:	2301      	movs	r3, #1
 804682e:	e032      	b.n	8046896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046830:	687b      	ldr	r3, [r7, #4]
 8046832:	681b      	ldr	r3, [r3, #0]
 8046834:	f003 0304 	and.w	r3, r3, #4
 8046838:	2b00      	cmp	r3, #0
 804683a:	d008      	beq.n	804684e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 804683c:	4b19      	ldr	r3, [pc, #100]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804683e:	689b      	ldr	r3, [r3, #8]
 8046840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046844:	687b      	ldr	r3, [r7, #4]
 8046846:	68db      	ldr	r3, [r3, #12]
 8046848:	4916      	ldr	r1, [pc, #88]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804684a:	4313      	orrs	r3, r2
 804684c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804684e:	687b      	ldr	r3, [r7, #4]
 8046850:	681b      	ldr	r3, [r3, #0]
 8046852:	f003 0308 	and.w	r3, r3, #8
 8046856:	2b00      	cmp	r3, #0
 8046858:	d009      	beq.n	804686e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804685a:	4b12      	ldr	r3, [pc, #72]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804685c:	689b      	ldr	r3, [r3, #8]
 804685e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8046862:	687b      	ldr	r3, [r7, #4]
 8046864:	691b      	ldr	r3, [r3, #16]
 8046866:	00db      	lsls	r3, r3, #3
 8046868:	490e      	ldr	r1, [pc, #56]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 804686a:	4313      	orrs	r3, r2
 804686c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 804686e:	f000 f821 	bl	80468b4 <HAL_RCC_GetSysClockFreq>
 8046872:	4602      	mov	r2, r0
 8046874:	4b0b      	ldr	r3, [pc, #44]	; (80468a4 <HAL_RCC_ClockConfig+0x1bc>)
 8046876:	689b      	ldr	r3, [r3, #8]
 8046878:	091b      	lsrs	r3, r3, #4
 804687a:	f003 030f 	and.w	r3, r3, #15
 804687e:	490a      	ldr	r1, [pc, #40]	; (80468a8 <HAL_RCC_ClockConfig+0x1c0>)
 8046880:	5ccb      	ldrb	r3, [r1, r3]
 8046882:	fa22 f303 	lsr.w	r3, r2, r3
 8046886:	4a09      	ldr	r2, [pc, #36]	; (80468ac <HAL_RCC_ClockConfig+0x1c4>)
 8046888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804688a:	4b09      	ldr	r3, [pc, #36]	; (80468b0 <HAL_RCC_ClockConfig+0x1c8>)
 804688c:	681b      	ldr	r3, [r3, #0]
 804688e:	4618      	mov	r0, r3
 8046890:	f7fe f9e2 	bl	8044c58 <HAL_InitTick>

  return HAL_OK;
 8046894:	2300      	movs	r3, #0
}
 8046896:	4618      	mov	r0, r3
 8046898:	3710      	adds	r7, #16
 804689a:	46bd      	mov	sp, r7
 804689c:	bd80      	pop	{r7, pc}
 804689e:	bf00      	nop
 80468a0:	40023c00 	.word	0x40023c00
 80468a4:	40023800 	.word	0x40023800
 80468a8:	0804e1c8 	.word	0x0804e1c8
 80468ac:	20000008 	.word	0x20000008
 80468b0:	2000000c 	.word	0x2000000c

080468b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80468b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80468b8:	b094      	sub	sp, #80	; 0x50
 80468ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80468bc:	2300      	movs	r3, #0
 80468be:	647b      	str	r3, [r7, #68]	; 0x44
 80468c0:	2300      	movs	r3, #0
 80468c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80468c4:	2300      	movs	r3, #0
 80468c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80468c8:	2300      	movs	r3, #0
 80468ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80468cc:	4b79      	ldr	r3, [pc, #484]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80468ce:	689b      	ldr	r3, [r3, #8]
 80468d0:	f003 030c 	and.w	r3, r3, #12
 80468d4:	2b08      	cmp	r3, #8
 80468d6:	d00d      	beq.n	80468f4 <HAL_RCC_GetSysClockFreq+0x40>
 80468d8:	2b08      	cmp	r3, #8
 80468da:	f200 80e1 	bhi.w	8046aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80468de:	2b00      	cmp	r3, #0
 80468e0:	d002      	beq.n	80468e8 <HAL_RCC_GetSysClockFreq+0x34>
 80468e2:	2b04      	cmp	r3, #4
 80468e4:	d003      	beq.n	80468ee <HAL_RCC_GetSysClockFreq+0x3a>
 80468e6:	e0db      	b.n	8046aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80468e8:	4b73      	ldr	r3, [pc, #460]	; (8046ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 80468ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80468ec:	e0db      	b.n	8046aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80468ee:	4b73      	ldr	r3, [pc, #460]	; (8046abc <HAL_RCC_GetSysClockFreq+0x208>)
 80468f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80468f2:	e0d8      	b.n	8046aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80468f4:	4b6f      	ldr	r3, [pc, #444]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80468f6:	685b      	ldr	r3, [r3, #4]
 80468f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80468fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80468fe:	4b6d      	ldr	r3, [pc, #436]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8046900:	685b      	ldr	r3, [r3, #4]
 8046902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046906:	2b00      	cmp	r3, #0
 8046908:	d063      	beq.n	80469d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804690a:	4b6a      	ldr	r3, [pc, #424]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 804690c:	685b      	ldr	r3, [r3, #4]
 804690e:	099b      	lsrs	r3, r3, #6
 8046910:	2200      	movs	r2, #0
 8046912:	63bb      	str	r3, [r7, #56]	; 0x38
 8046914:	63fa      	str	r2, [r7, #60]	; 0x3c
 8046916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804691c:	633b      	str	r3, [r7, #48]	; 0x30
 804691e:	2300      	movs	r3, #0
 8046920:	637b      	str	r3, [r7, #52]	; 0x34
 8046922:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8046926:	4622      	mov	r2, r4
 8046928:	462b      	mov	r3, r5
 804692a:	f04f 0000 	mov.w	r0, #0
 804692e:	f04f 0100 	mov.w	r1, #0
 8046932:	0159      	lsls	r1, r3, #5
 8046934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046938:	0150      	lsls	r0, r2, #5
 804693a:	4602      	mov	r2, r0
 804693c:	460b      	mov	r3, r1
 804693e:	4621      	mov	r1, r4
 8046940:	1a51      	subs	r1, r2, r1
 8046942:	6139      	str	r1, [r7, #16]
 8046944:	4629      	mov	r1, r5
 8046946:	eb63 0301 	sbc.w	r3, r3, r1
 804694a:	617b      	str	r3, [r7, #20]
 804694c:	f04f 0200 	mov.w	r2, #0
 8046950:	f04f 0300 	mov.w	r3, #0
 8046954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8046958:	4659      	mov	r1, fp
 804695a:	018b      	lsls	r3, r1, #6
 804695c:	4651      	mov	r1, sl
 804695e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8046962:	4651      	mov	r1, sl
 8046964:	018a      	lsls	r2, r1, #6
 8046966:	4651      	mov	r1, sl
 8046968:	ebb2 0801 	subs.w	r8, r2, r1
 804696c:	4659      	mov	r1, fp
 804696e:	eb63 0901 	sbc.w	r9, r3, r1
 8046972:	f04f 0200 	mov.w	r2, #0
 8046976:	f04f 0300 	mov.w	r3, #0
 804697a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804697e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8046982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8046986:	4690      	mov	r8, r2
 8046988:	4699      	mov	r9, r3
 804698a:	4623      	mov	r3, r4
 804698c:	eb18 0303 	adds.w	r3, r8, r3
 8046990:	60bb      	str	r3, [r7, #8]
 8046992:	462b      	mov	r3, r5
 8046994:	eb49 0303 	adc.w	r3, r9, r3
 8046998:	60fb      	str	r3, [r7, #12]
 804699a:	f04f 0200 	mov.w	r2, #0
 804699e:	f04f 0300 	mov.w	r3, #0
 80469a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80469a6:	4629      	mov	r1, r5
 80469a8:	024b      	lsls	r3, r1, #9
 80469aa:	4621      	mov	r1, r4
 80469ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80469b0:	4621      	mov	r1, r4
 80469b2:	024a      	lsls	r2, r1, #9
 80469b4:	4610      	mov	r0, r2
 80469b6:	4619      	mov	r1, r3
 80469b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80469ba:	2200      	movs	r2, #0
 80469bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80469be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80469c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80469c4:	f7fa f960 	bl	8040c88 <__aeabi_uldivmod>
 80469c8:	4602      	mov	r2, r0
 80469ca:	460b      	mov	r3, r1
 80469cc:	4613      	mov	r3, r2
 80469ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80469d0:	e058      	b.n	8046a84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80469d2:	4b38      	ldr	r3, [pc, #224]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80469d4:	685b      	ldr	r3, [r3, #4]
 80469d6:	099b      	lsrs	r3, r3, #6
 80469d8:	2200      	movs	r2, #0
 80469da:	4618      	mov	r0, r3
 80469dc:	4611      	mov	r1, r2
 80469de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80469e2:	623b      	str	r3, [r7, #32]
 80469e4:	2300      	movs	r3, #0
 80469e6:	627b      	str	r3, [r7, #36]	; 0x24
 80469e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80469ec:	4642      	mov	r2, r8
 80469ee:	464b      	mov	r3, r9
 80469f0:	f04f 0000 	mov.w	r0, #0
 80469f4:	f04f 0100 	mov.w	r1, #0
 80469f8:	0159      	lsls	r1, r3, #5
 80469fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80469fe:	0150      	lsls	r0, r2, #5
 8046a00:	4602      	mov	r2, r0
 8046a02:	460b      	mov	r3, r1
 8046a04:	4641      	mov	r1, r8
 8046a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8046a0a:	4649      	mov	r1, r9
 8046a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8046a10:	f04f 0200 	mov.w	r2, #0
 8046a14:	f04f 0300 	mov.w	r3, #0
 8046a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8046a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8046a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8046a24:	ebb2 040a 	subs.w	r4, r2, sl
 8046a28:	eb63 050b 	sbc.w	r5, r3, fp
 8046a2c:	f04f 0200 	mov.w	r2, #0
 8046a30:	f04f 0300 	mov.w	r3, #0
 8046a34:	00eb      	lsls	r3, r5, #3
 8046a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8046a3a:	00e2      	lsls	r2, r4, #3
 8046a3c:	4614      	mov	r4, r2
 8046a3e:	461d      	mov	r5, r3
 8046a40:	4643      	mov	r3, r8
 8046a42:	18e3      	adds	r3, r4, r3
 8046a44:	603b      	str	r3, [r7, #0]
 8046a46:	464b      	mov	r3, r9
 8046a48:	eb45 0303 	adc.w	r3, r5, r3
 8046a4c:	607b      	str	r3, [r7, #4]
 8046a4e:	f04f 0200 	mov.w	r2, #0
 8046a52:	f04f 0300 	mov.w	r3, #0
 8046a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8046a5a:	4629      	mov	r1, r5
 8046a5c:	028b      	lsls	r3, r1, #10
 8046a5e:	4621      	mov	r1, r4
 8046a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8046a64:	4621      	mov	r1, r4
 8046a66:	028a      	lsls	r2, r1, #10
 8046a68:	4610      	mov	r0, r2
 8046a6a:	4619      	mov	r1, r3
 8046a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046a6e:	2200      	movs	r2, #0
 8046a70:	61bb      	str	r3, [r7, #24]
 8046a72:	61fa      	str	r2, [r7, #28]
 8046a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046a78:	f7fa f906 	bl	8040c88 <__aeabi_uldivmod>
 8046a7c:	4602      	mov	r2, r0
 8046a7e:	460b      	mov	r3, r1
 8046a80:	4613      	mov	r3, r2
 8046a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8046a84:	4b0b      	ldr	r3, [pc, #44]	; (8046ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8046a86:	685b      	ldr	r3, [r3, #4]
 8046a88:	0c1b      	lsrs	r3, r3, #16
 8046a8a:	f003 0303 	and.w	r3, r3, #3
 8046a8e:	3301      	adds	r3, #1
 8046a90:	005b      	lsls	r3, r3, #1
 8046a92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8046a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8046a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8046a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046a9e:	e002      	b.n	8046aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8046aa0:	4b05      	ldr	r3, [pc, #20]	; (8046ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 8046aa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8046aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8046aa8:	4618      	mov	r0, r3
 8046aaa:	3750      	adds	r7, #80	; 0x50
 8046aac:	46bd      	mov	sp, r7
 8046aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046ab2:	bf00      	nop
 8046ab4:	40023800 	.word	0x40023800
 8046ab8:	00f42400 	.word	0x00f42400
 8046abc:	007a1200 	.word	0x007a1200

08046ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046ac0:	b480      	push	{r7}
 8046ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046ac4:	4b03      	ldr	r3, [pc, #12]	; (8046ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8046ac6:	681b      	ldr	r3, [r3, #0]
}
 8046ac8:	4618      	mov	r0, r3
 8046aca:	46bd      	mov	sp, r7
 8046acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ad0:	4770      	bx	lr
 8046ad2:	bf00      	nop
 8046ad4:	20000008 	.word	0x20000008

08046ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046ad8:	b580      	push	{r7, lr}
 8046ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8046adc:	f7ff fff0 	bl	8046ac0 <HAL_RCC_GetHCLKFreq>
 8046ae0:	4602      	mov	r2, r0
 8046ae2:	4b05      	ldr	r3, [pc, #20]	; (8046af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8046ae4:	689b      	ldr	r3, [r3, #8]
 8046ae6:	0a9b      	lsrs	r3, r3, #10
 8046ae8:	f003 0307 	and.w	r3, r3, #7
 8046aec:	4903      	ldr	r1, [pc, #12]	; (8046afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8046aee:	5ccb      	ldrb	r3, [r1, r3]
 8046af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046af4:	4618      	mov	r0, r3
 8046af6:	bd80      	pop	{r7, pc}
 8046af8:	40023800 	.word	0x40023800
 8046afc:	0804e1d8 	.word	0x0804e1d8

08046b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8046b00:	b580      	push	{r7, lr}
 8046b02:	b082      	sub	sp, #8
 8046b04:	af00      	add	r7, sp, #0
 8046b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8046b08:	687b      	ldr	r3, [r7, #4]
 8046b0a:	2b00      	cmp	r3, #0
 8046b0c:	d101      	bne.n	8046b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8046b0e:	2301      	movs	r3, #1
 8046b10:	e07b      	b.n	8046c0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8046b12:	687b      	ldr	r3, [r7, #4]
 8046b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046b16:	2b00      	cmp	r3, #0
 8046b18:	d108      	bne.n	8046b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046b1a:	687b      	ldr	r3, [r7, #4]
 8046b1c:	685b      	ldr	r3, [r3, #4]
 8046b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046b22:	d009      	beq.n	8046b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8046b24:	687b      	ldr	r3, [r7, #4]
 8046b26:	2200      	movs	r2, #0
 8046b28:	61da      	str	r2, [r3, #28]
 8046b2a:	e005      	b.n	8046b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8046b2c:	687b      	ldr	r3, [r7, #4]
 8046b2e:	2200      	movs	r2, #0
 8046b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8046b32:	687b      	ldr	r3, [r7, #4]
 8046b34:	2200      	movs	r2, #0
 8046b36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8046b38:	687b      	ldr	r3, [r7, #4]
 8046b3a:	2200      	movs	r2, #0
 8046b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8046b3e:	687b      	ldr	r3, [r7, #4]
 8046b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046b44:	b2db      	uxtb	r3, r3
 8046b46:	2b00      	cmp	r3, #0
 8046b48:	d106      	bne.n	8046b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8046b4a:	687b      	ldr	r3, [r7, #4]
 8046b4c:	2200      	movs	r2, #0
 8046b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8046b52:	6878      	ldr	r0, [r7, #4]
 8046b54:	f7fd fd50 	bl	80445f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8046b58:	687b      	ldr	r3, [r7, #4]
 8046b5a:	2202      	movs	r2, #2
 8046b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8046b60:	687b      	ldr	r3, [r7, #4]
 8046b62:	681b      	ldr	r3, [r3, #0]
 8046b64:	681a      	ldr	r2, [r3, #0]
 8046b66:	687b      	ldr	r3, [r7, #4]
 8046b68:	681b      	ldr	r3, [r3, #0]
 8046b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046b6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8046b70:	687b      	ldr	r3, [r7, #4]
 8046b72:	685b      	ldr	r3, [r3, #4]
 8046b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8046b78:	687b      	ldr	r3, [r7, #4]
 8046b7a:	689b      	ldr	r3, [r3, #8]
 8046b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8046b80:	431a      	orrs	r2, r3
 8046b82:	687b      	ldr	r3, [r7, #4]
 8046b84:	68db      	ldr	r3, [r3, #12]
 8046b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8046b8a:	431a      	orrs	r2, r3
 8046b8c:	687b      	ldr	r3, [r7, #4]
 8046b8e:	691b      	ldr	r3, [r3, #16]
 8046b90:	f003 0302 	and.w	r3, r3, #2
 8046b94:	431a      	orrs	r2, r3
 8046b96:	687b      	ldr	r3, [r7, #4]
 8046b98:	695b      	ldr	r3, [r3, #20]
 8046b9a:	f003 0301 	and.w	r3, r3, #1
 8046b9e:	431a      	orrs	r2, r3
 8046ba0:	687b      	ldr	r3, [r7, #4]
 8046ba2:	699b      	ldr	r3, [r3, #24]
 8046ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8046ba8:	431a      	orrs	r2, r3
 8046baa:	687b      	ldr	r3, [r7, #4]
 8046bac:	69db      	ldr	r3, [r3, #28]
 8046bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8046bb2:	431a      	orrs	r2, r3
 8046bb4:	687b      	ldr	r3, [r7, #4]
 8046bb6:	6a1b      	ldr	r3, [r3, #32]
 8046bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046bbc:	ea42 0103 	orr.w	r1, r2, r3
 8046bc0:	687b      	ldr	r3, [r7, #4]
 8046bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046bc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8046bc8:	687b      	ldr	r3, [r7, #4]
 8046bca:	681b      	ldr	r3, [r3, #0]
 8046bcc:	430a      	orrs	r2, r1
 8046bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8046bd0:	687b      	ldr	r3, [r7, #4]
 8046bd2:	699b      	ldr	r3, [r3, #24]
 8046bd4:	0c1b      	lsrs	r3, r3, #16
 8046bd6:	f003 0104 	and.w	r1, r3, #4
 8046bda:	687b      	ldr	r3, [r7, #4]
 8046bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046bde:	f003 0210 	and.w	r2, r3, #16
 8046be2:	687b      	ldr	r3, [r7, #4]
 8046be4:	681b      	ldr	r3, [r3, #0]
 8046be6:	430a      	orrs	r2, r1
 8046be8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8046bea:	687b      	ldr	r3, [r7, #4]
 8046bec:	681b      	ldr	r3, [r3, #0]
 8046bee:	69da      	ldr	r2, [r3, #28]
 8046bf0:	687b      	ldr	r3, [r7, #4]
 8046bf2:	681b      	ldr	r3, [r3, #0]
 8046bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8046bf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8046bfa:	687b      	ldr	r3, [r7, #4]
 8046bfc:	2200      	movs	r2, #0
 8046bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8046c00:	687b      	ldr	r3, [r7, #4]
 8046c02:	2201      	movs	r2, #1
 8046c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8046c08:	2300      	movs	r3, #0
}
 8046c0a:	4618      	mov	r0, r3
 8046c0c:	3708      	adds	r7, #8
 8046c0e:	46bd      	mov	sp, r7
 8046c10:	bd80      	pop	{r7, pc}

08046c12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8046c12:	b580      	push	{r7, lr}
 8046c14:	b088      	sub	sp, #32
 8046c16:	af02      	add	r7, sp, #8
 8046c18:	60f8      	str	r0, [r7, #12]
 8046c1a:	60b9      	str	r1, [r7, #8]
 8046c1c:	603b      	str	r3, [r7, #0]
 8046c1e:	4613      	mov	r3, r2
 8046c20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8046c22:	2300      	movs	r3, #0
 8046c24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8046c26:	68fb      	ldr	r3, [r7, #12]
 8046c28:	685b      	ldr	r3, [r3, #4]
 8046c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046c2e:	d112      	bne.n	8046c56 <HAL_SPI_Receive+0x44>
 8046c30:	68fb      	ldr	r3, [r7, #12]
 8046c32:	689b      	ldr	r3, [r3, #8]
 8046c34:	2b00      	cmp	r3, #0
 8046c36:	d10e      	bne.n	8046c56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8046c38:	68fb      	ldr	r3, [r7, #12]
 8046c3a:	2204      	movs	r2, #4
 8046c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8046c40:	88fa      	ldrh	r2, [r7, #6]
 8046c42:	683b      	ldr	r3, [r7, #0]
 8046c44:	9300      	str	r3, [sp, #0]
 8046c46:	4613      	mov	r3, r2
 8046c48:	68ba      	ldr	r2, [r7, #8]
 8046c4a:	68b9      	ldr	r1, [r7, #8]
 8046c4c:	68f8      	ldr	r0, [r7, #12]
 8046c4e:	f000 f8f1 	bl	8046e34 <HAL_SPI_TransmitReceive>
 8046c52:	4603      	mov	r3, r0
 8046c54:	e0ea      	b.n	8046e2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8046c56:	68fb      	ldr	r3, [r7, #12]
 8046c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8046c5c:	2b01      	cmp	r3, #1
 8046c5e:	d101      	bne.n	8046c64 <HAL_SPI_Receive+0x52>
 8046c60:	2302      	movs	r3, #2
 8046c62:	e0e3      	b.n	8046e2c <HAL_SPI_Receive+0x21a>
 8046c64:	68fb      	ldr	r3, [r7, #12]
 8046c66:	2201      	movs	r2, #1
 8046c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8046c6c:	f7fe f838 	bl	8044ce0 <HAL_GetTick>
 8046c70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8046c72:	68fb      	ldr	r3, [r7, #12]
 8046c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046c78:	b2db      	uxtb	r3, r3
 8046c7a:	2b01      	cmp	r3, #1
 8046c7c:	d002      	beq.n	8046c84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8046c7e:	2302      	movs	r3, #2
 8046c80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8046c82:	e0ca      	b.n	8046e1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8046c84:	68bb      	ldr	r3, [r7, #8]
 8046c86:	2b00      	cmp	r3, #0
 8046c88:	d002      	beq.n	8046c90 <HAL_SPI_Receive+0x7e>
 8046c8a:	88fb      	ldrh	r3, [r7, #6]
 8046c8c:	2b00      	cmp	r3, #0
 8046c8e:	d102      	bne.n	8046c96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8046c90:	2301      	movs	r3, #1
 8046c92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8046c94:	e0c1      	b.n	8046e1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8046c96:	68fb      	ldr	r3, [r7, #12]
 8046c98:	2204      	movs	r2, #4
 8046c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8046c9e:	68fb      	ldr	r3, [r7, #12]
 8046ca0:	2200      	movs	r2, #0
 8046ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8046ca4:	68fb      	ldr	r3, [r7, #12]
 8046ca6:	68ba      	ldr	r2, [r7, #8]
 8046ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8046caa:	68fb      	ldr	r3, [r7, #12]
 8046cac:	88fa      	ldrh	r2, [r7, #6]
 8046cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8046cb0:	68fb      	ldr	r3, [r7, #12]
 8046cb2:	88fa      	ldrh	r2, [r7, #6]
 8046cb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8046cb6:	68fb      	ldr	r3, [r7, #12]
 8046cb8:	2200      	movs	r2, #0
 8046cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8046cbc:	68fb      	ldr	r3, [r7, #12]
 8046cbe:	2200      	movs	r2, #0
 8046cc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8046cc2:	68fb      	ldr	r3, [r7, #12]
 8046cc4:	2200      	movs	r2, #0
 8046cc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8046cc8:	68fb      	ldr	r3, [r7, #12]
 8046cca:	2200      	movs	r2, #0
 8046ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8046cce:	68fb      	ldr	r3, [r7, #12]
 8046cd0:	2200      	movs	r2, #0
 8046cd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8046cd4:	68fb      	ldr	r3, [r7, #12]
 8046cd6:	689b      	ldr	r3, [r3, #8]
 8046cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046cdc:	d10f      	bne.n	8046cfe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8046cde:	68fb      	ldr	r3, [r7, #12]
 8046ce0:	681b      	ldr	r3, [r3, #0]
 8046ce2:	681a      	ldr	r2, [r3, #0]
 8046ce4:	68fb      	ldr	r3, [r7, #12]
 8046ce6:	681b      	ldr	r3, [r3, #0]
 8046ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8046cee:	68fb      	ldr	r3, [r7, #12]
 8046cf0:	681b      	ldr	r3, [r3, #0]
 8046cf2:	681a      	ldr	r2, [r3, #0]
 8046cf4:	68fb      	ldr	r3, [r7, #12]
 8046cf6:	681b      	ldr	r3, [r3, #0]
 8046cf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8046cfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046cfe:	68fb      	ldr	r3, [r7, #12]
 8046d00:	681b      	ldr	r3, [r3, #0]
 8046d02:	681b      	ldr	r3, [r3, #0]
 8046d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046d08:	2b40      	cmp	r3, #64	; 0x40
 8046d0a:	d007      	beq.n	8046d1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8046d0c:	68fb      	ldr	r3, [r7, #12]
 8046d0e:	681b      	ldr	r3, [r3, #0]
 8046d10:	681a      	ldr	r2, [r3, #0]
 8046d12:	68fb      	ldr	r3, [r7, #12]
 8046d14:	681b      	ldr	r3, [r3, #0]
 8046d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046d1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8046d1c:	68fb      	ldr	r3, [r7, #12]
 8046d1e:	68db      	ldr	r3, [r3, #12]
 8046d20:	2b00      	cmp	r3, #0
 8046d22:	d162      	bne.n	8046dea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8046d24:	e02e      	b.n	8046d84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8046d26:	68fb      	ldr	r3, [r7, #12]
 8046d28:	681b      	ldr	r3, [r3, #0]
 8046d2a:	689b      	ldr	r3, [r3, #8]
 8046d2c:	f003 0301 	and.w	r3, r3, #1
 8046d30:	2b01      	cmp	r3, #1
 8046d32:	d115      	bne.n	8046d60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8046d34:	68fb      	ldr	r3, [r7, #12]
 8046d36:	681b      	ldr	r3, [r3, #0]
 8046d38:	f103 020c 	add.w	r2, r3, #12
 8046d3c:	68fb      	ldr	r3, [r7, #12]
 8046d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046d40:	7812      	ldrb	r2, [r2, #0]
 8046d42:	b2d2      	uxtb	r2, r2
 8046d44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8046d46:	68fb      	ldr	r3, [r7, #12]
 8046d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046d4a:	1c5a      	adds	r2, r3, #1
 8046d4c:	68fb      	ldr	r3, [r7, #12]
 8046d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8046d50:	68fb      	ldr	r3, [r7, #12]
 8046d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046d54:	b29b      	uxth	r3, r3
 8046d56:	3b01      	subs	r3, #1
 8046d58:	b29a      	uxth	r2, r3
 8046d5a:	68fb      	ldr	r3, [r7, #12]
 8046d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8046d5e:	e011      	b.n	8046d84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8046d60:	f7fd ffbe 	bl	8044ce0 <HAL_GetTick>
 8046d64:	4602      	mov	r2, r0
 8046d66:	693b      	ldr	r3, [r7, #16]
 8046d68:	1ad3      	subs	r3, r2, r3
 8046d6a:	683a      	ldr	r2, [r7, #0]
 8046d6c:	429a      	cmp	r2, r3
 8046d6e:	d803      	bhi.n	8046d78 <HAL_SPI_Receive+0x166>
 8046d70:	683b      	ldr	r3, [r7, #0]
 8046d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046d76:	d102      	bne.n	8046d7e <HAL_SPI_Receive+0x16c>
 8046d78:	683b      	ldr	r3, [r7, #0]
 8046d7a:	2b00      	cmp	r3, #0
 8046d7c:	d102      	bne.n	8046d84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8046d7e:	2303      	movs	r3, #3
 8046d80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8046d82:	e04a      	b.n	8046e1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8046d84:	68fb      	ldr	r3, [r7, #12]
 8046d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046d88:	b29b      	uxth	r3, r3
 8046d8a:	2b00      	cmp	r3, #0
 8046d8c:	d1cb      	bne.n	8046d26 <HAL_SPI_Receive+0x114>
 8046d8e:	e031      	b.n	8046df4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8046d90:	68fb      	ldr	r3, [r7, #12]
 8046d92:	681b      	ldr	r3, [r3, #0]
 8046d94:	689b      	ldr	r3, [r3, #8]
 8046d96:	f003 0301 	and.w	r3, r3, #1
 8046d9a:	2b01      	cmp	r3, #1
 8046d9c:	d113      	bne.n	8046dc6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8046d9e:	68fb      	ldr	r3, [r7, #12]
 8046da0:	681b      	ldr	r3, [r3, #0]
 8046da2:	68da      	ldr	r2, [r3, #12]
 8046da4:	68fb      	ldr	r3, [r7, #12]
 8046da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046da8:	b292      	uxth	r2, r2
 8046daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8046dac:	68fb      	ldr	r3, [r7, #12]
 8046dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046db0:	1c9a      	adds	r2, r3, #2
 8046db2:	68fb      	ldr	r3, [r7, #12]
 8046db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8046db6:	68fb      	ldr	r3, [r7, #12]
 8046db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046dba:	b29b      	uxth	r3, r3
 8046dbc:	3b01      	subs	r3, #1
 8046dbe:	b29a      	uxth	r2, r3
 8046dc0:	68fb      	ldr	r3, [r7, #12]
 8046dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8046dc4:	e011      	b.n	8046dea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8046dc6:	f7fd ff8b 	bl	8044ce0 <HAL_GetTick>
 8046dca:	4602      	mov	r2, r0
 8046dcc:	693b      	ldr	r3, [r7, #16]
 8046dce:	1ad3      	subs	r3, r2, r3
 8046dd0:	683a      	ldr	r2, [r7, #0]
 8046dd2:	429a      	cmp	r2, r3
 8046dd4:	d803      	bhi.n	8046dde <HAL_SPI_Receive+0x1cc>
 8046dd6:	683b      	ldr	r3, [r7, #0]
 8046dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046ddc:	d102      	bne.n	8046de4 <HAL_SPI_Receive+0x1d2>
 8046dde:	683b      	ldr	r3, [r7, #0]
 8046de0:	2b00      	cmp	r3, #0
 8046de2:	d102      	bne.n	8046dea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8046de4:	2303      	movs	r3, #3
 8046de6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8046de8:	e017      	b.n	8046e1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8046dea:	68fb      	ldr	r3, [r7, #12]
 8046dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046dee:	b29b      	uxth	r3, r3
 8046df0:	2b00      	cmp	r3, #0
 8046df2:	d1cd      	bne.n	8046d90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8046df4:	693a      	ldr	r2, [r7, #16]
 8046df6:	6839      	ldr	r1, [r7, #0]
 8046df8:	68f8      	ldr	r0, [r7, #12]
 8046dfa:	f000 fa45 	bl	8047288 <SPI_EndRxTransaction>
 8046dfe:	4603      	mov	r3, r0
 8046e00:	2b00      	cmp	r3, #0
 8046e02:	d002      	beq.n	8046e0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8046e04:	68fb      	ldr	r3, [r7, #12]
 8046e06:	2220      	movs	r2, #32
 8046e08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8046e0a:	68fb      	ldr	r3, [r7, #12]
 8046e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8046e0e:	2b00      	cmp	r3, #0
 8046e10:	d002      	beq.n	8046e18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8046e12:	2301      	movs	r3, #1
 8046e14:	75fb      	strb	r3, [r7, #23]
 8046e16:	e000      	b.n	8046e1a <HAL_SPI_Receive+0x208>
  }

error :
 8046e18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8046e1a:	68fb      	ldr	r3, [r7, #12]
 8046e1c:	2201      	movs	r2, #1
 8046e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8046e22:	68fb      	ldr	r3, [r7, #12]
 8046e24:	2200      	movs	r2, #0
 8046e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8046e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8046e2c:	4618      	mov	r0, r3
 8046e2e:	3718      	adds	r7, #24
 8046e30:	46bd      	mov	sp, r7
 8046e32:	bd80      	pop	{r7, pc}

08046e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8046e34:	b580      	push	{r7, lr}
 8046e36:	b08c      	sub	sp, #48	; 0x30
 8046e38:	af00      	add	r7, sp, #0
 8046e3a:	60f8      	str	r0, [r7, #12]
 8046e3c:	60b9      	str	r1, [r7, #8]
 8046e3e:	607a      	str	r2, [r7, #4]
 8046e40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8046e42:	2301      	movs	r3, #1
 8046e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8046e46:	2300      	movs	r3, #0
 8046e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8046e4c:	68fb      	ldr	r3, [r7, #12]
 8046e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8046e52:	2b01      	cmp	r3, #1
 8046e54:	d101      	bne.n	8046e5a <HAL_SPI_TransmitReceive+0x26>
 8046e56:	2302      	movs	r3, #2
 8046e58:	e18a      	b.n	8047170 <HAL_SPI_TransmitReceive+0x33c>
 8046e5a:	68fb      	ldr	r3, [r7, #12]
 8046e5c:	2201      	movs	r2, #1
 8046e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8046e62:	f7fd ff3d 	bl	8044ce0 <HAL_GetTick>
 8046e66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8046e68:	68fb      	ldr	r3, [r7, #12]
 8046e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8046e72:	68fb      	ldr	r3, [r7, #12]
 8046e74:	685b      	ldr	r3, [r3, #4]
 8046e76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8046e78:	887b      	ldrh	r3, [r7, #2]
 8046e7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8046e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8046e80:	2b01      	cmp	r3, #1
 8046e82:	d00f      	beq.n	8046ea4 <HAL_SPI_TransmitReceive+0x70>
 8046e84:	69fb      	ldr	r3, [r7, #28]
 8046e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046e8a:	d107      	bne.n	8046e9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8046e8c:	68fb      	ldr	r3, [r7, #12]
 8046e8e:	689b      	ldr	r3, [r3, #8]
 8046e90:	2b00      	cmp	r3, #0
 8046e92:	d103      	bne.n	8046e9c <HAL_SPI_TransmitReceive+0x68>
 8046e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8046e98:	2b04      	cmp	r3, #4
 8046e9a:	d003      	beq.n	8046ea4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8046e9c:	2302      	movs	r3, #2
 8046e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8046ea2:	e15b      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8046ea4:	68bb      	ldr	r3, [r7, #8]
 8046ea6:	2b00      	cmp	r3, #0
 8046ea8:	d005      	beq.n	8046eb6 <HAL_SPI_TransmitReceive+0x82>
 8046eaa:	687b      	ldr	r3, [r7, #4]
 8046eac:	2b00      	cmp	r3, #0
 8046eae:	d002      	beq.n	8046eb6 <HAL_SPI_TransmitReceive+0x82>
 8046eb0:	887b      	ldrh	r3, [r7, #2]
 8046eb2:	2b00      	cmp	r3, #0
 8046eb4:	d103      	bne.n	8046ebe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8046eb6:	2301      	movs	r3, #1
 8046eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8046ebc:	e14e      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8046ebe:	68fb      	ldr	r3, [r7, #12]
 8046ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046ec4:	b2db      	uxtb	r3, r3
 8046ec6:	2b04      	cmp	r3, #4
 8046ec8:	d003      	beq.n	8046ed2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8046eca:	68fb      	ldr	r3, [r7, #12]
 8046ecc:	2205      	movs	r2, #5
 8046ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8046ed2:	68fb      	ldr	r3, [r7, #12]
 8046ed4:	2200      	movs	r2, #0
 8046ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8046ed8:	68fb      	ldr	r3, [r7, #12]
 8046eda:	687a      	ldr	r2, [r7, #4]
 8046edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8046ede:	68fb      	ldr	r3, [r7, #12]
 8046ee0:	887a      	ldrh	r2, [r7, #2]
 8046ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8046ee4:	68fb      	ldr	r3, [r7, #12]
 8046ee6:	887a      	ldrh	r2, [r7, #2]
 8046ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8046eea:	68fb      	ldr	r3, [r7, #12]
 8046eec:	68ba      	ldr	r2, [r7, #8]
 8046eee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8046ef0:	68fb      	ldr	r3, [r7, #12]
 8046ef2:	887a      	ldrh	r2, [r7, #2]
 8046ef4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8046ef6:	68fb      	ldr	r3, [r7, #12]
 8046ef8:	887a      	ldrh	r2, [r7, #2]
 8046efa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8046efc:	68fb      	ldr	r3, [r7, #12]
 8046efe:	2200      	movs	r2, #0
 8046f00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8046f02:	68fb      	ldr	r3, [r7, #12]
 8046f04:	2200      	movs	r2, #0
 8046f06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046f08:	68fb      	ldr	r3, [r7, #12]
 8046f0a:	681b      	ldr	r3, [r3, #0]
 8046f0c:	681b      	ldr	r3, [r3, #0]
 8046f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046f12:	2b40      	cmp	r3, #64	; 0x40
 8046f14:	d007      	beq.n	8046f26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8046f16:	68fb      	ldr	r3, [r7, #12]
 8046f18:	681b      	ldr	r3, [r3, #0]
 8046f1a:	681a      	ldr	r2, [r3, #0]
 8046f1c:	68fb      	ldr	r3, [r7, #12]
 8046f1e:	681b      	ldr	r3, [r3, #0]
 8046f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8046f26:	68fb      	ldr	r3, [r7, #12]
 8046f28:	68db      	ldr	r3, [r3, #12]
 8046f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8046f2e:	d178      	bne.n	8047022 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8046f30:	68fb      	ldr	r3, [r7, #12]
 8046f32:	685b      	ldr	r3, [r3, #4]
 8046f34:	2b00      	cmp	r3, #0
 8046f36:	d002      	beq.n	8046f3e <HAL_SPI_TransmitReceive+0x10a>
 8046f38:	8b7b      	ldrh	r3, [r7, #26]
 8046f3a:	2b01      	cmp	r3, #1
 8046f3c:	d166      	bne.n	804700c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8046f3e:	68fb      	ldr	r3, [r7, #12]
 8046f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046f42:	881a      	ldrh	r2, [r3, #0]
 8046f44:	68fb      	ldr	r3, [r7, #12]
 8046f46:	681b      	ldr	r3, [r3, #0]
 8046f48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8046f4a:	68fb      	ldr	r3, [r7, #12]
 8046f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046f4e:	1c9a      	adds	r2, r3, #2
 8046f50:	68fb      	ldr	r3, [r7, #12]
 8046f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8046f54:	68fb      	ldr	r3, [r7, #12]
 8046f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8046f58:	b29b      	uxth	r3, r3
 8046f5a:	3b01      	subs	r3, #1
 8046f5c:	b29a      	uxth	r2, r3
 8046f5e:	68fb      	ldr	r3, [r7, #12]
 8046f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046f62:	e053      	b.n	804700c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046f64:	68fb      	ldr	r3, [r7, #12]
 8046f66:	681b      	ldr	r3, [r3, #0]
 8046f68:	689b      	ldr	r3, [r3, #8]
 8046f6a:	f003 0302 	and.w	r3, r3, #2
 8046f6e:	2b02      	cmp	r3, #2
 8046f70:	d11b      	bne.n	8046faa <HAL_SPI_TransmitReceive+0x176>
 8046f72:	68fb      	ldr	r3, [r7, #12]
 8046f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8046f76:	b29b      	uxth	r3, r3
 8046f78:	2b00      	cmp	r3, #0
 8046f7a:	d016      	beq.n	8046faa <HAL_SPI_TransmitReceive+0x176>
 8046f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046f7e:	2b01      	cmp	r3, #1
 8046f80:	d113      	bne.n	8046faa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8046f82:	68fb      	ldr	r3, [r7, #12]
 8046f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046f86:	881a      	ldrh	r2, [r3, #0]
 8046f88:	68fb      	ldr	r3, [r7, #12]
 8046f8a:	681b      	ldr	r3, [r3, #0]
 8046f8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8046f8e:	68fb      	ldr	r3, [r7, #12]
 8046f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046f92:	1c9a      	adds	r2, r3, #2
 8046f94:	68fb      	ldr	r3, [r7, #12]
 8046f96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8046f98:	68fb      	ldr	r3, [r7, #12]
 8046f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8046f9c:	b29b      	uxth	r3, r3
 8046f9e:	3b01      	subs	r3, #1
 8046fa0:	b29a      	uxth	r2, r3
 8046fa2:	68fb      	ldr	r3, [r7, #12]
 8046fa4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8046fa6:	2300      	movs	r3, #0
 8046fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8046faa:	68fb      	ldr	r3, [r7, #12]
 8046fac:	681b      	ldr	r3, [r3, #0]
 8046fae:	689b      	ldr	r3, [r3, #8]
 8046fb0:	f003 0301 	and.w	r3, r3, #1
 8046fb4:	2b01      	cmp	r3, #1
 8046fb6:	d119      	bne.n	8046fec <HAL_SPI_TransmitReceive+0x1b8>
 8046fb8:	68fb      	ldr	r3, [r7, #12]
 8046fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046fbc:	b29b      	uxth	r3, r3
 8046fbe:	2b00      	cmp	r3, #0
 8046fc0:	d014      	beq.n	8046fec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8046fc2:	68fb      	ldr	r3, [r7, #12]
 8046fc4:	681b      	ldr	r3, [r3, #0]
 8046fc6:	68da      	ldr	r2, [r3, #12]
 8046fc8:	68fb      	ldr	r3, [r7, #12]
 8046fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046fcc:	b292      	uxth	r2, r2
 8046fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8046fd0:	68fb      	ldr	r3, [r7, #12]
 8046fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046fd4:	1c9a      	adds	r2, r3, #2
 8046fd6:	68fb      	ldr	r3, [r7, #12]
 8046fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8046fda:	68fb      	ldr	r3, [r7, #12]
 8046fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046fde:	b29b      	uxth	r3, r3
 8046fe0:	3b01      	subs	r3, #1
 8046fe2:	b29a      	uxth	r2, r3
 8046fe4:	68fb      	ldr	r3, [r7, #12]
 8046fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8046fe8:	2301      	movs	r3, #1
 8046fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8046fec:	f7fd fe78 	bl	8044ce0 <HAL_GetTick>
 8046ff0:	4602      	mov	r2, r0
 8046ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046ff4:	1ad3      	subs	r3, r2, r3
 8046ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8046ff8:	429a      	cmp	r2, r3
 8046ffa:	d807      	bhi.n	804700c <HAL_SPI_TransmitReceive+0x1d8>
 8046ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047002:	d003      	beq.n	804700c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8047004:	2303      	movs	r3, #3
 8047006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 804700a:	e0a7      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804700c:	68fb      	ldr	r3, [r7, #12]
 804700e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047010:	b29b      	uxth	r3, r3
 8047012:	2b00      	cmp	r3, #0
 8047014:	d1a6      	bne.n	8046f64 <HAL_SPI_TransmitReceive+0x130>
 8047016:	68fb      	ldr	r3, [r7, #12]
 8047018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804701a:	b29b      	uxth	r3, r3
 804701c:	2b00      	cmp	r3, #0
 804701e:	d1a1      	bne.n	8046f64 <HAL_SPI_TransmitReceive+0x130>
 8047020:	e07c      	b.n	804711c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047022:	68fb      	ldr	r3, [r7, #12]
 8047024:	685b      	ldr	r3, [r3, #4]
 8047026:	2b00      	cmp	r3, #0
 8047028:	d002      	beq.n	8047030 <HAL_SPI_TransmitReceive+0x1fc>
 804702a:	8b7b      	ldrh	r3, [r7, #26]
 804702c:	2b01      	cmp	r3, #1
 804702e:	d16b      	bne.n	8047108 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047030:	68fb      	ldr	r3, [r7, #12]
 8047032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047034:	68fb      	ldr	r3, [r7, #12]
 8047036:	681b      	ldr	r3, [r3, #0]
 8047038:	330c      	adds	r3, #12
 804703a:	7812      	ldrb	r2, [r2, #0]
 804703c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 804703e:	68fb      	ldr	r3, [r7, #12]
 8047040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047042:	1c5a      	adds	r2, r3, #1
 8047044:	68fb      	ldr	r3, [r7, #12]
 8047046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047048:	68fb      	ldr	r3, [r7, #12]
 804704a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804704c:	b29b      	uxth	r3, r3
 804704e:	3b01      	subs	r3, #1
 8047050:	b29a      	uxth	r2, r3
 8047052:	68fb      	ldr	r3, [r7, #12]
 8047054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047056:	e057      	b.n	8047108 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047058:	68fb      	ldr	r3, [r7, #12]
 804705a:	681b      	ldr	r3, [r3, #0]
 804705c:	689b      	ldr	r3, [r3, #8]
 804705e:	f003 0302 	and.w	r3, r3, #2
 8047062:	2b02      	cmp	r3, #2
 8047064:	d11c      	bne.n	80470a0 <HAL_SPI_TransmitReceive+0x26c>
 8047066:	68fb      	ldr	r3, [r7, #12]
 8047068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804706a:	b29b      	uxth	r3, r3
 804706c:	2b00      	cmp	r3, #0
 804706e:	d017      	beq.n	80470a0 <HAL_SPI_TransmitReceive+0x26c>
 8047070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047072:	2b01      	cmp	r3, #1
 8047074:	d114      	bne.n	80470a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8047076:	68fb      	ldr	r3, [r7, #12]
 8047078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804707a:	68fb      	ldr	r3, [r7, #12]
 804707c:	681b      	ldr	r3, [r3, #0]
 804707e:	330c      	adds	r3, #12
 8047080:	7812      	ldrb	r2, [r2, #0]
 8047082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8047084:	68fb      	ldr	r3, [r7, #12]
 8047086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047088:	1c5a      	adds	r2, r3, #1
 804708a:	68fb      	ldr	r3, [r7, #12]
 804708c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 804708e:	68fb      	ldr	r3, [r7, #12]
 8047090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047092:	b29b      	uxth	r3, r3
 8047094:	3b01      	subs	r3, #1
 8047096:	b29a      	uxth	r2, r3
 8047098:	68fb      	ldr	r3, [r7, #12]
 804709a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804709c:	2300      	movs	r3, #0
 804709e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80470a0:	68fb      	ldr	r3, [r7, #12]
 80470a2:	681b      	ldr	r3, [r3, #0]
 80470a4:	689b      	ldr	r3, [r3, #8]
 80470a6:	f003 0301 	and.w	r3, r3, #1
 80470aa:	2b01      	cmp	r3, #1
 80470ac:	d119      	bne.n	80470e2 <HAL_SPI_TransmitReceive+0x2ae>
 80470ae:	68fb      	ldr	r3, [r7, #12]
 80470b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80470b2:	b29b      	uxth	r3, r3
 80470b4:	2b00      	cmp	r3, #0
 80470b6:	d014      	beq.n	80470e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80470b8:	68fb      	ldr	r3, [r7, #12]
 80470ba:	681b      	ldr	r3, [r3, #0]
 80470bc:	68da      	ldr	r2, [r3, #12]
 80470be:	68fb      	ldr	r3, [r7, #12]
 80470c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80470c2:	b2d2      	uxtb	r2, r2
 80470c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80470c6:	68fb      	ldr	r3, [r7, #12]
 80470c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80470ca:	1c5a      	adds	r2, r3, #1
 80470cc:	68fb      	ldr	r3, [r7, #12]
 80470ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80470d0:	68fb      	ldr	r3, [r7, #12]
 80470d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80470d4:	b29b      	uxth	r3, r3
 80470d6:	3b01      	subs	r3, #1
 80470d8:	b29a      	uxth	r2, r3
 80470da:	68fb      	ldr	r3, [r7, #12]
 80470dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80470de:	2301      	movs	r3, #1
 80470e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80470e2:	f7fd fdfd 	bl	8044ce0 <HAL_GetTick>
 80470e6:	4602      	mov	r2, r0
 80470e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80470ea:	1ad3      	subs	r3, r2, r3
 80470ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80470ee:	429a      	cmp	r2, r3
 80470f0:	d803      	bhi.n	80470fa <HAL_SPI_TransmitReceive+0x2c6>
 80470f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80470f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80470f8:	d102      	bne.n	8047100 <HAL_SPI_TransmitReceive+0x2cc>
 80470fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80470fc:	2b00      	cmp	r3, #0
 80470fe:	d103      	bne.n	8047108 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8047100:	2303      	movs	r3, #3
 8047102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047106:	e029      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047108:	68fb      	ldr	r3, [r7, #12]
 804710a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804710c:	b29b      	uxth	r3, r3
 804710e:	2b00      	cmp	r3, #0
 8047110:	d1a2      	bne.n	8047058 <HAL_SPI_TransmitReceive+0x224>
 8047112:	68fb      	ldr	r3, [r7, #12]
 8047114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047116:	b29b      	uxth	r3, r3
 8047118:	2b00      	cmp	r3, #0
 804711a:	d19d      	bne.n	8047058 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804711e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8047120:	68f8      	ldr	r0, [r7, #12]
 8047122:	f000 f917 	bl	8047354 <SPI_EndRxTxTransaction>
 8047126:	4603      	mov	r3, r0
 8047128:	2b00      	cmp	r3, #0
 804712a:	d006      	beq.n	804713a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 804712c:	2301      	movs	r3, #1
 804712e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047132:	68fb      	ldr	r3, [r7, #12]
 8047134:	2220      	movs	r2, #32
 8047136:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8047138:	e010      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 804713a:	68fb      	ldr	r3, [r7, #12]
 804713c:	689b      	ldr	r3, [r3, #8]
 804713e:	2b00      	cmp	r3, #0
 8047140:	d10b      	bne.n	804715a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047142:	2300      	movs	r3, #0
 8047144:	617b      	str	r3, [r7, #20]
 8047146:	68fb      	ldr	r3, [r7, #12]
 8047148:	681b      	ldr	r3, [r3, #0]
 804714a:	68db      	ldr	r3, [r3, #12]
 804714c:	617b      	str	r3, [r7, #20]
 804714e:	68fb      	ldr	r3, [r7, #12]
 8047150:	681b      	ldr	r3, [r3, #0]
 8047152:	689b      	ldr	r3, [r3, #8]
 8047154:	617b      	str	r3, [r7, #20]
 8047156:	697b      	ldr	r3, [r7, #20]
 8047158:	e000      	b.n	804715c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 804715a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804715c:	68fb      	ldr	r3, [r7, #12]
 804715e:	2201      	movs	r2, #1
 8047160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047164:	68fb      	ldr	r3, [r7, #12]
 8047166:	2200      	movs	r2, #0
 8047168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 804716c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8047170:	4618      	mov	r0, r3
 8047172:	3730      	adds	r7, #48	; 0x30
 8047174:	46bd      	mov	sp, r7
 8047176:	bd80      	pop	{r7, pc}

08047178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8047178:	b580      	push	{r7, lr}
 804717a:	b088      	sub	sp, #32
 804717c:	af00      	add	r7, sp, #0
 804717e:	60f8      	str	r0, [r7, #12]
 8047180:	60b9      	str	r1, [r7, #8]
 8047182:	603b      	str	r3, [r7, #0]
 8047184:	4613      	mov	r3, r2
 8047186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8047188:	f7fd fdaa 	bl	8044ce0 <HAL_GetTick>
 804718c:	4602      	mov	r2, r0
 804718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047190:	1a9b      	subs	r3, r3, r2
 8047192:	683a      	ldr	r2, [r7, #0]
 8047194:	4413      	add	r3, r2
 8047196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8047198:	f7fd fda2 	bl	8044ce0 <HAL_GetTick>
 804719c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804719e:	4b39      	ldr	r3, [pc, #228]	; (8047284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80471a0:	681b      	ldr	r3, [r3, #0]
 80471a2:	015b      	lsls	r3, r3, #5
 80471a4:	0d1b      	lsrs	r3, r3, #20
 80471a6:	69fa      	ldr	r2, [r7, #28]
 80471a8:	fb02 f303 	mul.w	r3, r2, r3
 80471ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80471ae:	e054      	b.n	804725a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80471b0:	683b      	ldr	r3, [r7, #0]
 80471b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80471b6:	d050      	beq.n	804725a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80471b8:	f7fd fd92 	bl	8044ce0 <HAL_GetTick>
 80471bc:	4602      	mov	r2, r0
 80471be:	69bb      	ldr	r3, [r7, #24]
 80471c0:	1ad3      	subs	r3, r2, r3
 80471c2:	69fa      	ldr	r2, [r7, #28]
 80471c4:	429a      	cmp	r2, r3
 80471c6:	d902      	bls.n	80471ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80471c8:	69fb      	ldr	r3, [r7, #28]
 80471ca:	2b00      	cmp	r3, #0
 80471cc:	d13d      	bne.n	804724a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80471ce:	68fb      	ldr	r3, [r7, #12]
 80471d0:	681b      	ldr	r3, [r3, #0]
 80471d2:	685a      	ldr	r2, [r3, #4]
 80471d4:	68fb      	ldr	r3, [r7, #12]
 80471d6:	681b      	ldr	r3, [r3, #0]
 80471d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80471dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80471de:	68fb      	ldr	r3, [r7, #12]
 80471e0:	685b      	ldr	r3, [r3, #4]
 80471e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80471e6:	d111      	bne.n	804720c <SPI_WaitFlagStateUntilTimeout+0x94>
 80471e8:	68fb      	ldr	r3, [r7, #12]
 80471ea:	689b      	ldr	r3, [r3, #8]
 80471ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80471f0:	d004      	beq.n	80471fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80471f2:	68fb      	ldr	r3, [r7, #12]
 80471f4:	689b      	ldr	r3, [r3, #8]
 80471f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80471fa:	d107      	bne.n	804720c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80471fc:	68fb      	ldr	r3, [r7, #12]
 80471fe:	681b      	ldr	r3, [r3, #0]
 8047200:	681a      	ldr	r2, [r3, #0]
 8047202:	68fb      	ldr	r3, [r7, #12]
 8047204:	681b      	ldr	r3, [r3, #0]
 8047206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804720a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804720c:	68fb      	ldr	r3, [r7, #12]
 804720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047214:	d10f      	bne.n	8047236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8047216:	68fb      	ldr	r3, [r7, #12]
 8047218:	681b      	ldr	r3, [r3, #0]
 804721a:	681a      	ldr	r2, [r3, #0]
 804721c:	68fb      	ldr	r3, [r7, #12]
 804721e:	681b      	ldr	r3, [r3, #0]
 8047220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8047224:	601a      	str	r2, [r3, #0]
 8047226:	68fb      	ldr	r3, [r7, #12]
 8047228:	681b      	ldr	r3, [r3, #0]
 804722a:	681a      	ldr	r2, [r3, #0]
 804722c:	68fb      	ldr	r3, [r7, #12]
 804722e:	681b      	ldr	r3, [r3, #0]
 8047230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8047236:	68fb      	ldr	r3, [r7, #12]
 8047238:	2201      	movs	r2, #1
 804723a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804723e:	68fb      	ldr	r3, [r7, #12]
 8047240:	2200      	movs	r2, #0
 8047242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8047246:	2303      	movs	r3, #3
 8047248:	e017      	b.n	804727a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 804724a:	697b      	ldr	r3, [r7, #20]
 804724c:	2b00      	cmp	r3, #0
 804724e:	d101      	bne.n	8047254 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8047250:	2300      	movs	r3, #0
 8047252:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8047254:	697b      	ldr	r3, [r7, #20]
 8047256:	3b01      	subs	r3, #1
 8047258:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804725a:	68fb      	ldr	r3, [r7, #12]
 804725c:	681b      	ldr	r3, [r3, #0]
 804725e:	689a      	ldr	r2, [r3, #8]
 8047260:	68bb      	ldr	r3, [r7, #8]
 8047262:	4013      	ands	r3, r2
 8047264:	68ba      	ldr	r2, [r7, #8]
 8047266:	429a      	cmp	r2, r3
 8047268:	bf0c      	ite	eq
 804726a:	2301      	moveq	r3, #1
 804726c:	2300      	movne	r3, #0
 804726e:	b2db      	uxtb	r3, r3
 8047270:	461a      	mov	r2, r3
 8047272:	79fb      	ldrb	r3, [r7, #7]
 8047274:	429a      	cmp	r2, r3
 8047276:	d19b      	bne.n	80471b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8047278:	2300      	movs	r3, #0
}
 804727a:	4618      	mov	r0, r3
 804727c:	3720      	adds	r7, #32
 804727e:	46bd      	mov	sp, r7
 8047280:	bd80      	pop	{r7, pc}
 8047282:	bf00      	nop
 8047284:	20000008 	.word	0x20000008

08047288 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8047288:	b580      	push	{r7, lr}
 804728a:	b086      	sub	sp, #24
 804728c:	af02      	add	r7, sp, #8
 804728e:	60f8      	str	r0, [r7, #12]
 8047290:	60b9      	str	r1, [r7, #8]
 8047292:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047294:	68fb      	ldr	r3, [r7, #12]
 8047296:	685b      	ldr	r3, [r3, #4]
 8047298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804729c:	d111      	bne.n	80472c2 <SPI_EndRxTransaction+0x3a>
 804729e:	68fb      	ldr	r3, [r7, #12]
 80472a0:	689b      	ldr	r3, [r3, #8]
 80472a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80472a6:	d004      	beq.n	80472b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80472a8:	68fb      	ldr	r3, [r7, #12]
 80472aa:	689b      	ldr	r3, [r3, #8]
 80472ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80472b0:	d107      	bne.n	80472c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80472b2:	68fb      	ldr	r3, [r7, #12]
 80472b4:	681b      	ldr	r3, [r3, #0]
 80472b6:	681a      	ldr	r2, [r3, #0]
 80472b8:	68fb      	ldr	r3, [r7, #12]
 80472ba:	681b      	ldr	r3, [r3, #0]
 80472bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80472c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80472c2:	68fb      	ldr	r3, [r7, #12]
 80472c4:	685b      	ldr	r3, [r3, #4]
 80472c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80472ca:	d12a      	bne.n	8047322 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80472cc:	68fb      	ldr	r3, [r7, #12]
 80472ce:	689b      	ldr	r3, [r3, #8]
 80472d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80472d4:	d012      	beq.n	80472fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80472d6:	687b      	ldr	r3, [r7, #4]
 80472d8:	9300      	str	r3, [sp, #0]
 80472da:	68bb      	ldr	r3, [r7, #8]
 80472dc:	2200      	movs	r2, #0
 80472de:	2180      	movs	r1, #128	; 0x80
 80472e0:	68f8      	ldr	r0, [r7, #12]
 80472e2:	f7ff ff49 	bl	8047178 <SPI_WaitFlagStateUntilTimeout>
 80472e6:	4603      	mov	r3, r0
 80472e8:	2b00      	cmp	r3, #0
 80472ea:	d02d      	beq.n	8047348 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80472ec:	68fb      	ldr	r3, [r7, #12]
 80472ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80472f0:	f043 0220 	orr.w	r2, r3, #32
 80472f4:	68fb      	ldr	r3, [r7, #12]
 80472f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80472f8:	2303      	movs	r3, #3
 80472fa:	e026      	b.n	804734a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80472fc:	687b      	ldr	r3, [r7, #4]
 80472fe:	9300      	str	r3, [sp, #0]
 8047300:	68bb      	ldr	r3, [r7, #8]
 8047302:	2200      	movs	r2, #0
 8047304:	2101      	movs	r1, #1
 8047306:	68f8      	ldr	r0, [r7, #12]
 8047308:	f7ff ff36 	bl	8047178 <SPI_WaitFlagStateUntilTimeout>
 804730c:	4603      	mov	r3, r0
 804730e:	2b00      	cmp	r3, #0
 8047310:	d01a      	beq.n	8047348 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047312:	68fb      	ldr	r3, [r7, #12]
 8047314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047316:	f043 0220 	orr.w	r2, r3, #32
 804731a:	68fb      	ldr	r3, [r7, #12]
 804731c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 804731e:	2303      	movs	r3, #3
 8047320:	e013      	b.n	804734a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047322:	687b      	ldr	r3, [r7, #4]
 8047324:	9300      	str	r3, [sp, #0]
 8047326:	68bb      	ldr	r3, [r7, #8]
 8047328:	2200      	movs	r2, #0
 804732a:	2101      	movs	r1, #1
 804732c:	68f8      	ldr	r0, [r7, #12]
 804732e:	f7ff ff23 	bl	8047178 <SPI_WaitFlagStateUntilTimeout>
 8047332:	4603      	mov	r3, r0
 8047334:	2b00      	cmp	r3, #0
 8047336:	d007      	beq.n	8047348 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047338:	68fb      	ldr	r3, [r7, #12]
 804733a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804733c:	f043 0220 	orr.w	r2, r3, #32
 8047340:	68fb      	ldr	r3, [r7, #12]
 8047342:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047344:	2303      	movs	r3, #3
 8047346:	e000      	b.n	804734a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8047348:	2300      	movs	r3, #0
}
 804734a:	4618      	mov	r0, r3
 804734c:	3710      	adds	r7, #16
 804734e:	46bd      	mov	sp, r7
 8047350:	bd80      	pop	{r7, pc}
	...

08047354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8047354:	b580      	push	{r7, lr}
 8047356:	b088      	sub	sp, #32
 8047358:	af02      	add	r7, sp, #8
 804735a:	60f8      	str	r0, [r7, #12]
 804735c:	60b9      	str	r1, [r7, #8]
 804735e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8047360:	4b1b      	ldr	r3, [pc, #108]	; (80473d0 <SPI_EndRxTxTransaction+0x7c>)
 8047362:	681b      	ldr	r3, [r3, #0]
 8047364:	4a1b      	ldr	r2, [pc, #108]	; (80473d4 <SPI_EndRxTxTransaction+0x80>)
 8047366:	fba2 2303 	umull	r2, r3, r2, r3
 804736a:	0d5b      	lsrs	r3, r3, #21
 804736c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047370:	fb02 f303 	mul.w	r3, r2, r3
 8047374:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047376:	68fb      	ldr	r3, [r7, #12]
 8047378:	685b      	ldr	r3, [r3, #4]
 804737a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804737e:	d112      	bne.n	80473a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047380:	687b      	ldr	r3, [r7, #4]
 8047382:	9300      	str	r3, [sp, #0]
 8047384:	68bb      	ldr	r3, [r7, #8]
 8047386:	2200      	movs	r2, #0
 8047388:	2180      	movs	r1, #128	; 0x80
 804738a:	68f8      	ldr	r0, [r7, #12]
 804738c:	f7ff fef4 	bl	8047178 <SPI_WaitFlagStateUntilTimeout>
 8047390:	4603      	mov	r3, r0
 8047392:	2b00      	cmp	r3, #0
 8047394:	d016      	beq.n	80473c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047396:	68fb      	ldr	r3, [r7, #12]
 8047398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804739a:	f043 0220 	orr.w	r2, r3, #32
 804739e:	68fb      	ldr	r3, [r7, #12]
 80473a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80473a2:	2303      	movs	r3, #3
 80473a4:	e00f      	b.n	80473c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80473a6:	697b      	ldr	r3, [r7, #20]
 80473a8:	2b00      	cmp	r3, #0
 80473aa:	d00a      	beq.n	80473c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80473ac:	697b      	ldr	r3, [r7, #20]
 80473ae:	3b01      	subs	r3, #1
 80473b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80473b2:	68fb      	ldr	r3, [r7, #12]
 80473b4:	681b      	ldr	r3, [r3, #0]
 80473b6:	689b      	ldr	r3, [r3, #8]
 80473b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80473bc:	2b80      	cmp	r3, #128	; 0x80
 80473be:	d0f2      	beq.n	80473a6 <SPI_EndRxTxTransaction+0x52>
 80473c0:	e000      	b.n	80473c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80473c2:	bf00      	nop
  }

  return HAL_OK;
 80473c4:	2300      	movs	r3, #0
}
 80473c6:	4618      	mov	r0, r3
 80473c8:	3718      	adds	r7, #24
 80473ca:	46bd      	mov	sp, r7
 80473cc:	bd80      	pop	{r7, pc}
 80473ce:	bf00      	nop
 80473d0:	20000008 	.word	0x20000008
 80473d4:	165e9f81 	.word	0x165e9f81

080473d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80473d8:	b580      	push	{r7, lr}
 80473da:	b082      	sub	sp, #8
 80473dc:	af00      	add	r7, sp, #0
 80473de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	2b00      	cmp	r3, #0
 80473e4:	d101      	bne.n	80473ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80473e6:	2301      	movs	r3, #1
 80473e8:	e041      	b.n	804746e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80473ea:	687b      	ldr	r3, [r7, #4]
 80473ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80473f0:	b2db      	uxtb	r3, r3
 80473f2:	2b00      	cmp	r3, #0
 80473f4:	d106      	bne.n	8047404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80473f6:	687b      	ldr	r3, [r7, #4]
 80473f8:	2200      	movs	r2, #0
 80473fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80473fe:	6878      	ldr	r0, [r7, #4]
 8047400:	f7fd f98a 	bl	8044718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047404:	687b      	ldr	r3, [r7, #4]
 8047406:	2202      	movs	r2, #2
 8047408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804740c:	687b      	ldr	r3, [r7, #4]
 804740e:	681a      	ldr	r2, [r3, #0]
 8047410:	687b      	ldr	r3, [r7, #4]
 8047412:	3304      	adds	r3, #4
 8047414:	4619      	mov	r1, r3
 8047416:	4610      	mov	r0, r2
 8047418:	f000 fe28 	bl	804806c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804741c:	687b      	ldr	r3, [r7, #4]
 804741e:	2201      	movs	r2, #1
 8047420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047424:	687b      	ldr	r3, [r7, #4]
 8047426:	2201      	movs	r2, #1
 8047428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804742c:	687b      	ldr	r3, [r7, #4]
 804742e:	2201      	movs	r2, #1
 8047430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047434:	687b      	ldr	r3, [r7, #4]
 8047436:	2201      	movs	r2, #1
 8047438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804743c:	687b      	ldr	r3, [r7, #4]
 804743e:	2201      	movs	r2, #1
 8047440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047444:	687b      	ldr	r3, [r7, #4]
 8047446:	2201      	movs	r2, #1
 8047448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804744c:	687b      	ldr	r3, [r7, #4]
 804744e:	2201      	movs	r2, #1
 8047450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047454:	687b      	ldr	r3, [r7, #4]
 8047456:	2201      	movs	r2, #1
 8047458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804745c:	687b      	ldr	r3, [r7, #4]
 804745e:	2201      	movs	r2, #1
 8047460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8047464:	687b      	ldr	r3, [r7, #4]
 8047466:	2201      	movs	r2, #1
 8047468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804746c:	2300      	movs	r3, #0
}
 804746e:	4618      	mov	r0, r3
 8047470:	3708      	adds	r7, #8
 8047472:	46bd      	mov	sp, r7
 8047474:	bd80      	pop	{r7, pc}
	...

08047478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8047478:	b480      	push	{r7}
 804747a:	b085      	sub	sp, #20
 804747c:	af00      	add	r7, sp, #0
 804747e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047486:	b2db      	uxtb	r3, r3
 8047488:	2b01      	cmp	r3, #1
 804748a:	d001      	beq.n	8047490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 804748c:	2301      	movs	r3, #1
 804748e:	e04e      	b.n	804752e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047490:	687b      	ldr	r3, [r7, #4]
 8047492:	2202      	movs	r2, #2
 8047494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8047498:	687b      	ldr	r3, [r7, #4]
 804749a:	681b      	ldr	r3, [r3, #0]
 804749c:	68da      	ldr	r2, [r3, #12]
 804749e:	687b      	ldr	r3, [r7, #4]
 80474a0:	681b      	ldr	r3, [r3, #0]
 80474a2:	f042 0201 	orr.w	r2, r2, #1
 80474a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80474a8:	687b      	ldr	r3, [r7, #4]
 80474aa:	681b      	ldr	r3, [r3, #0]
 80474ac:	4a23      	ldr	r2, [pc, #140]	; (804753c <HAL_TIM_Base_Start_IT+0xc4>)
 80474ae:	4293      	cmp	r3, r2
 80474b0:	d022      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474b2:	687b      	ldr	r3, [r7, #4]
 80474b4:	681b      	ldr	r3, [r3, #0]
 80474b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80474ba:	d01d      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474bc:	687b      	ldr	r3, [r7, #4]
 80474be:	681b      	ldr	r3, [r3, #0]
 80474c0:	4a1f      	ldr	r2, [pc, #124]	; (8047540 <HAL_TIM_Base_Start_IT+0xc8>)
 80474c2:	4293      	cmp	r3, r2
 80474c4:	d018      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474c6:	687b      	ldr	r3, [r7, #4]
 80474c8:	681b      	ldr	r3, [r3, #0]
 80474ca:	4a1e      	ldr	r2, [pc, #120]	; (8047544 <HAL_TIM_Base_Start_IT+0xcc>)
 80474cc:	4293      	cmp	r3, r2
 80474ce:	d013      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474d0:	687b      	ldr	r3, [r7, #4]
 80474d2:	681b      	ldr	r3, [r3, #0]
 80474d4:	4a1c      	ldr	r2, [pc, #112]	; (8047548 <HAL_TIM_Base_Start_IT+0xd0>)
 80474d6:	4293      	cmp	r3, r2
 80474d8:	d00e      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474da:	687b      	ldr	r3, [r7, #4]
 80474dc:	681b      	ldr	r3, [r3, #0]
 80474de:	4a1b      	ldr	r2, [pc, #108]	; (804754c <HAL_TIM_Base_Start_IT+0xd4>)
 80474e0:	4293      	cmp	r3, r2
 80474e2:	d009      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474e4:	687b      	ldr	r3, [r7, #4]
 80474e6:	681b      	ldr	r3, [r3, #0]
 80474e8:	4a19      	ldr	r2, [pc, #100]	; (8047550 <HAL_TIM_Base_Start_IT+0xd8>)
 80474ea:	4293      	cmp	r3, r2
 80474ec:	d004      	beq.n	80474f8 <HAL_TIM_Base_Start_IT+0x80>
 80474ee:	687b      	ldr	r3, [r7, #4]
 80474f0:	681b      	ldr	r3, [r3, #0]
 80474f2:	4a18      	ldr	r2, [pc, #96]	; (8047554 <HAL_TIM_Base_Start_IT+0xdc>)
 80474f4:	4293      	cmp	r3, r2
 80474f6:	d111      	bne.n	804751c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80474f8:	687b      	ldr	r3, [r7, #4]
 80474fa:	681b      	ldr	r3, [r3, #0]
 80474fc:	689b      	ldr	r3, [r3, #8]
 80474fe:	f003 0307 	and.w	r3, r3, #7
 8047502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047504:	68fb      	ldr	r3, [r7, #12]
 8047506:	2b06      	cmp	r3, #6
 8047508:	d010      	beq.n	804752c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 804750a:	687b      	ldr	r3, [r7, #4]
 804750c:	681b      	ldr	r3, [r3, #0]
 804750e:	681a      	ldr	r2, [r3, #0]
 8047510:	687b      	ldr	r3, [r7, #4]
 8047512:	681b      	ldr	r3, [r3, #0]
 8047514:	f042 0201 	orr.w	r2, r2, #1
 8047518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804751a:	e007      	b.n	804752c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804751c:	687b      	ldr	r3, [r7, #4]
 804751e:	681b      	ldr	r3, [r3, #0]
 8047520:	681a      	ldr	r2, [r3, #0]
 8047522:	687b      	ldr	r3, [r7, #4]
 8047524:	681b      	ldr	r3, [r3, #0]
 8047526:	f042 0201 	orr.w	r2, r2, #1
 804752a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 804752c:	2300      	movs	r3, #0
}
 804752e:	4618      	mov	r0, r3
 8047530:	3714      	adds	r7, #20
 8047532:	46bd      	mov	sp, r7
 8047534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047538:	4770      	bx	lr
 804753a:	bf00      	nop
 804753c:	40010000 	.word	0x40010000
 8047540:	40000400 	.word	0x40000400
 8047544:	40000800 	.word	0x40000800
 8047548:	40000c00 	.word	0x40000c00
 804754c:	40010400 	.word	0x40010400
 8047550:	40014000 	.word	0x40014000
 8047554:	40001800 	.word	0x40001800

08047558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8047558:	b580      	push	{r7, lr}
 804755a:	b082      	sub	sp, #8
 804755c:	af00      	add	r7, sp, #0
 804755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047560:	687b      	ldr	r3, [r7, #4]
 8047562:	2b00      	cmp	r3, #0
 8047564:	d101      	bne.n	804756a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8047566:	2301      	movs	r3, #1
 8047568:	e041      	b.n	80475ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804756a:	687b      	ldr	r3, [r7, #4]
 804756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047570:	b2db      	uxtb	r3, r3
 8047572:	2b00      	cmp	r3, #0
 8047574:	d106      	bne.n	8047584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047576:	687b      	ldr	r3, [r7, #4]
 8047578:	2200      	movs	r2, #0
 804757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 804757e:	6878      	ldr	r0, [r7, #4]
 8047580:	f000 f839 	bl	80475f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047584:	687b      	ldr	r3, [r7, #4]
 8047586:	2202      	movs	r2, #2
 8047588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804758c:	687b      	ldr	r3, [r7, #4]
 804758e:	681a      	ldr	r2, [r3, #0]
 8047590:	687b      	ldr	r3, [r7, #4]
 8047592:	3304      	adds	r3, #4
 8047594:	4619      	mov	r1, r3
 8047596:	4610      	mov	r0, r2
 8047598:	f000 fd68 	bl	804806c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804759c:	687b      	ldr	r3, [r7, #4]
 804759e:	2201      	movs	r2, #1
 80475a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80475a4:	687b      	ldr	r3, [r7, #4]
 80475a6:	2201      	movs	r2, #1
 80475a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80475ac:	687b      	ldr	r3, [r7, #4]
 80475ae:	2201      	movs	r2, #1
 80475b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80475b4:	687b      	ldr	r3, [r7, #4]
 80475b6:	2201      	movs	r2, #1
 80475b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80475bc:	687b      	ldr	r3, [r7, #4]
 80475be:	2201      	movs	r2, #1
 80475c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80475c4:	687b      	ldr	r3, [r7, #4]
 80475c6:	2201      	movs	r2, #1
 80475c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80475cc:	687b      	ldr	r3, [r7, #4]
 80475ce:	2201      	movs	r2, #1
 80475d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80475d4:	687b      	ldr	r3, [r7, #4]
 80475d6:	2201      	movs	r2, #1
 80475d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80475dc:	687b      	ldr	r3, [r7, #4]
 80475de:	2201      	movs	r2, #1
 80475e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80475e4:	687b      	ldr	r3, [r7, #4]
 80475e6:	2201      	movs	r2, #1
 80475e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80475ec:	2300      	movs	r3, #0
}
 80475ee:	4618      	mov	r0, r3
 80475f0:	3708      	adds	r7, #8
 80475f2:	46bd      	mov	sp, r7
 80475f4:	bd80      	pop	{r7, pc}

080475f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80475f6:	b480      	push	{r7}
 80475f8:	b083      	sub	sp, #12
 80475fa:	af00      	add	r7, sp, #0
 80475fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80475fe:	bf00      	nop
 8047600:	370c      	adds	r7, #12
 8047602:	46bd      	mov	sp, r7
 8047604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047608:	4770      	bx	lr
	...

0804760c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 804760c:	b580      	push	{r7, lr}
 804760e:	b084      	sub	sp, #16
 8047610:	af00      	add	r7, sp, #0
 8047612:	6078      	str	r0, [r7, #4]
 8047614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8047616:	683b      	ldr	r3, [r7, #0]
 8047618:	2b00      	cmp	r3, #0
 804761a:	d109      	bne.n	8047630 <HAL_TIM_PWM_Start+0x24>
 804761c:	687b      	ldr	r3, [r7, #4]
 804761e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8047622:	b2db      	uxtb	r3, r3
 8047624:	2b01      	cmp	r3, #1
 8047626:	bf14      	ite	ne
 8047628:	2301      	movne	r3, #1
 804762a:	2300      	moveq	r3, #0
 804762c:	b2db      	uxtb	r3, r3
 804762e:	e022      	b.n	8047676 <HAL_TIM_PWM_Start+0x6a>
 8047630:	683b      	ldr	r3, [r7, #0]
 8047632:	2b04      	cmp	r3, #4
 8047634:	d109      	bne.n	804764a <HAL_TIM_PWM_Start+0x3e>
 8047636:	687b      	ldr	r3, [r7, #4]
 8047638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 804763c:	b2db      	uxtb	r3, r3
 804763e:	2b01      	cmp	r3, #1
 8047640:	bf14      	ite	ne
 8047642:	2301      	movne	r3, #1
 8047644:	2300      	moveq	r3, #0
 8047646:	b2db      	uxtb	r3, r3
 8047648:	e015      	b.n	8047676 <HAL_TIM_PWM_Start+0x6a>
 804764a:	683b      	ldr	r3, [r7, #0]
 804764c:	2b08      	cmp	r3, #8
 804764e:	d109      	bne.n	8047664 <HAL_TIM_PWM_Start+0x58>
 8047650:	687b      	ldr	r3, [r7, #4]
 8047652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8047656:	b2db      	uxtb	r3, r3
 8047658:	2b01      	cmp	r3, #1
 804765a:	bf14      	ite	ne
 804765c:	2301      	movne	r3, #1
 804765e:	2300      	moveq	r3, #0
 8047660:	b2db      	uxtb	r3, r3
 8047662:	e008      	b.n	8047676 <HAL_TIM_PWM_Start+0x6a>
 8047664:	687b      	ldr	r3, [r7, #4]
 8047666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804766a:	b2db      	uxtb	r3, r3
 804766c:	2b01      	cmp	r3, #1
 804766e:	bf14      	ite	ne
 8047670:	2301      	movne	r3, #1
 8047672:	2300      	moveq	r3, #0
 8047674:	b2db      	uxtb	r3, r3
 8047676:	2b00      	cmp	r3, #0
 8047678:	d001      	beq.n	804767e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 804767a:	2301      	movs	r3, #1
 804767c:	e07c      	b.n	8047778 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 804767e:	683b      	ldr	r3, [r7, #0]
 8047680:	2b00      	cmp	r3, #0
 8047682:	d104      	bne.n	804768e <HAL_TIM_PWM_Start+0x82>
 8047684:	687b      	ldr	r3, [r7, #4]
 8047686:	2202      	movs	r2, #2
 8047688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804768c:	e013      	b.n	80476b6 <HAL_TIM_PWM_Start+0xaa>
 804768e:	683b      	ldr	r3, [r7, #0]
 8047690:	2b04      	cmp	r3, #4
 8047692:	d104      	bne.n	804769e <HAL_TIM_PWM_Start+0x92>
 8047694:	687b      	ldr	r3, [r7, #4]
 8047696:	2202      	movs	r2, #2
 8047698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804769c:	e00b      	b.n	80476b6 <HAL_TIM_PWM_Start+0xaa>
 804769e:	683b      	ldr	r3, [r7, #0]
 80476a0:	2b08      	cmp	r3, #8
 80476a2:	d104      	bne.n	80476ae <HAL_TIM_PWM_Start+0xa2>
 80476a4:	687b      	ldr	r3, [r7, #4]
 80476a6:	2202      	movs	r2, #2
 80476a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80476ac:	e003      	b.n	80476b6 <HAL_TIM_PWM_Start+0xaa>
 80476ae:	687b      	ldr	r3, [r7, #4]
 80476b0:	2202      	movs	r2, #2
 80476b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80476b6:	687b      	ldr	r3, [r7, #4]
 80476b8:	681b      	ldr	r3, [r3, #0]
 80476ba:	2201      	movs	r2, #1
 80476bc:	6839      	ldr	r1, [r7, #0]
 80476be:	4618      	mov	r0, r3
 80476c0:	f000 ffbe 	bl	8048640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80476c4:	687b      	ldr	r3, [r7, #4]
 80476c6:	681b      	ldr	r3, [r3, #0]
 80476c8:	4a2d      	ldr	r2, [pc, #180]	; (8047780 <HAL_TIM_PWM_Start+0x174>)
 80476ca:	4293      	cmp	r3, r2
 80476cc:	d004      	beq.n	80476d8 <HAL_TIM_PWM_Start+0xcc>
 80476ce:	687b      	ldr	r3, [r7, #4]
 80476d0:	681b      	ldr	r3, [r3, #0]
 80476d2:	4a2c      	ldr	r2, [pc, #176]	; (8047784 <HAL_TIM_PWM_Start+0x178>)
 80476d4:	4293      	cmp	r3, r2
 80476d6:	d101      	bne.n	80476dc <HAL_TIM_PWM_Start+0xd0>
 80476d8:	2301      	movs	r3, #1
 80476da:	e000      	b.n	80476de <HAL_TIM_PWM_Start+0xd2>
 80476dc:	2300      	movs	r3, #0
 80476de:	2b00      	cmp	r3, #0
 80476e0:	d007      	beq.n	80476f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80476e2:	687b      	ldr	r3, [r7, #4]
 80476e4:	681b      	ldr	r3, [r3, #0]
 80476e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80476e8:	687b      	ldr	r3, [r7, #4]
 80476ea:	681b      	ldr	r3, [r3, #0]
 80476ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80476f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80476f2:	687b      	ldr	r3, [r7, #4]
 80476f4:	681b      	ldr	r3, [r3, #0]
 80476f6:	4a22      	ldr	r2, [pc, #136]	; (8047780 <HAL_TIM_PWM_Start+0x174>)
 80476f8:	4293      	cmp	r3, r2
 80476fa:	d022      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 80476fc:	687b      	ldr	r3, [r7, #4]
 80476fe:	681b      	ldr	r3, [r3, #0]
 8047700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047704:	d01d      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 8047706:	687b      	ldr	r3, [r7, #4]
 8047708:	681b      	ldr	r3, [r3, #0]
 804770a:	4a1f      	ldr	r2, [pc, #124]	; (8047788 <HAL_TIM_PWM_Start+0x17c>)
 804770c:	4293      	cmp	r3, r2
 804770e:	d018      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 8047710:	687b      	ldr	r3, [r7, #4]
 8047712:	681b      	ldr	r3, [r3, #0]
 8047714:	4a1d      	ldr	r2, [pc, #116]	; (804778c <HAL_TIM_PWM_Start+0x180>)
 8047716:	4293      	cmp	r3, r2
 8047718:	d013      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 804771a:	687b      	ldr	r3, [r7, #4]
 804771c:	681b      	ldr	r3, [r3, #0]
 804771e:	4a1c      	ldr	r2, [pc, #112]	; (8047790 <HAL_TIM_PWM_Start+0x184>)
 8047720:	4293      	cmp	r3, r2
 8047722:	d00e      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 8047724:	687b      	ldr	r3, [r7, #4]
 8047726:	681b      	ldr	r3, [r3, #0]
 8047728:	4a16      	ldr	r2, [pc, #88]	; (8047784 <HAL_TIM_PWM_Start+0x178>)
 804772a:	4293      	cmp	r3, r2
 804772c:	d009      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 804772e:	687b      	ldr	r3, [r7, #4]
 8047730:	681b      	ldr	r3, [r3, #0]
 8047732:	4a18      	ldr	r2, [pc, #96]	; (8047794 <HAL_TIM_PWM_Start+0x188>)
 8047734:	4293      	cmp	r3, r2
 8047736:	d004      	beq.n	8047742 <HAL_TIM_PWM_Start+0x136>
 8047738:	687b      	ldr	r3, [r7, #4]
 804773a:	681b      	ldr	r3, [r3, #0]
 804773c:	4a16      	ldr	r2, [pc, #88]	; (8047798 <HAL_TIM_PWM_Start+0x18c>)
 804773e:	4293      	cmp	r3, r2
 8047740:	d111      	bne.n	8047766 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047742:	687b      	ldr	r3, [r7, #4]
 8047744:	681b      	ldr	r3, [r3, #0]
 8047746:	689b      	ldr	r3, [r3, #8]
 8047748:	f003 0307 	and.w	r3, r3, #7
 804774c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804774e:	68fb      	ldr	r3, [r7, #12]
 8047750:	2b06      	cmp	r3, #6
 8047752:	d010      	beq.n	8047776 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8047754:	687b      	ldr	r3, [r7, #4]
 8047756:	681b      	ldr	r3, [r3, #0]
 8047758:	681a      	ldr	r2, [r3, #0]
 804775a:	687b      	ldr	r3, [r7, #4]
 804775c:	681b      	ldr	r3, [r3, #0]
 804775e:	f042 0201 	orr.w	r2, r2, #1
 8047762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047764:	e007      	b.n	8047776 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047766:	687b      	ldr	r3, [r7, #4]
 8047768:	681b      	ldr	r3, [r3, #0]
 804776a:	681a      	ldr	r2, [r3, #0]
 804776c:	687b      	ldr	r3, [r7, #4]
 804776e:	681b      	ldr	r3, [r3, #0]
 8047770:	f042 0201 	orr.w	r2, r2, #1
 8047774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8047776:	2300      	movs	r3, #0
}
 8047778:	4618      	mov	r0, r3
 804777a:	3710      	adds	r7, #16
 804777c:	46bd      	mov	sp, r7
 804777e:	bd80      	pop	{r7, pc}
 8047780:	40010000 	.word	0x40010000
 8047784:	40010400 	.word	0x40010400
 8047788:	40000400 	.word	0x40000400
 804778c:	40000800 	.word	0x40000800
 8047790:	40000c00 	.word	0x40000c00
 8047794:	40014000 	.word	0x40014000
 8047798:	40001800 	.word	0x40001800

0804779c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 804779c:	b580      	push	{r7, lr}
 804779e:	b082      	sub	sp, #8
 80477a0:	af00      	add	r7, sp, #0
 80477a2:	6078      	str	r0, [r7, #4]
 80477a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80477a6:	687b      	ldr	r3, [r7, #4]
 80477a8:	681b      	ldr	r3, [r3, #0]
 80477aa:	2200      	movs	r2, #0
 80477ac:	6839      	ldr	r1, [r7, #0]
 80477ae:	4618      	mov	r0, r3
 80477b0:	f000 ff46 	bl	8048640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80477b4:	687b      	ldr	r3, [r7, #4]
 80477b6:	681b      	ldr	r3, [r3, #0]
 80477b8:	4a2e      	ldr	r2, [pc, #184]	; (8047874 <HAL_TIM_PWM_Stop+0xd8>)
 80477ba:	4293      	cmp	r3, r2
 80477bc:	d004      	beq.n	80477c8 <HAL_TIM_PWM_Stop+0x2c>
 80477be:	687b      	ldr	r3, [r7, #4]
 80477c0:	681b      	ldr	r3, [r3, #0]
 80477c2:	4a2d      	ldr	r2, [pc, #180]	; (8047878 <HAL_TIM_PWM_Stop+0xdc>)
 80477c4:	4293      	cmp	r3, r2
 80477c6:	d101      	bne.n	80477cc <HAL_TIM_PWM_Stop+0x30>
 80477c8:	2301      	movs	r3, #1
 80477ca:	e000      	b.n	80477ce <HAL_TIM_PWM_Stop+0x32>
 80477cc:	2300      	movs	r3, #0
 80477ce:	2b00      	cmp	r3, #0
 80477d0:	d017      	beq.n	8047802 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80477d2:	687b      	ldr	r3, [r7, #4]
 80477d4:	681b      	ldr	r3, [r3, #0]
 80477d6:	6a1a      	ldr	r2, [r3, #32]
 80477d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80477dc:	4013      	ands	r3, r2
 80477de:	2b00      	cmp	r3, #0
 80477e0:	d10f      	bne.n	8047802 <HAL_TIM_PWM_Stop+0x66>
 80477e2:	687b      	ldr	r3, [r7, #4]
 80477e4:	681b      	ldr	r3, [r3, #0]
 80477e6:	6a1a      	ldr	r2, [r3, #32]
 80477e8:	f240 4344 	movw	r3, #1092	; 0x444
 80477ec:	4013      	ands	r3, r2
 80477ee:	2b00      	cmp	r3, #0
 80477f0:	d107      	bne.n	8047802 <HAL_TIM_PWM_Stop+0x66>
 80477f2:	687b      	ldr	r3, [r7, #4]
 80477f4:	681b      	ldr	r3, [r3, #0]
 80477f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80477f8:	687b      	ldr	r3, [r7, #4]
 80477fa:	681b      	ldr	r3, [r3, #0]
 80477fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8047800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8047802:	687b      	ldr	r3, [r7, #4]
 8047804:	681b      	ldr	r3, [r3, #0]
 8047806:	6a1a      	ldr	r2, [r3, #32]
 8047808:	f241 1311 	movw	r3, #4369	; 0x1111
 804780c:	4013      	ands	r3, r2
 804780e:	2b00      	cmp	r3, #0
 8047810:	d10f      	bne.n	8047832 <HAL_TIM_PWM_Stop+0x96>
 8047812:	687b      	ldr	r3, [r7, #4]
 8047814:	681b      	ldr	r3, [r3, #0]
 8047816:	6a1a      	ldr	r2, [r3, #32]
 8047818:	f240 4344 	movw	r3, #1092	; 0x444
 804781c:	4013      	ands	r3, r2
 804781e:	2b00      	cmp	r3, #0
 8047820:	d107      	bne.n	8047832 <HAL_TIM_PWM_Stop+0x96>
 8047822:	687b      	ldr	r3, [r7, #4]
 8047824:	681b      	ldr	r3, [r3, #0]
 8047826:	681a      	ldr	r2, [r3, #0]
 8047828:	687b      	ldr	r3, [r7, #4]
 804782a:	681b      	ldr	r3, [r3, #0]
 804782c:	f022 0201 	bic.w	r2, r2, #1
 8047830:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8047832:	683b      	ldr	r3, [r7, #0]
 8047834:	2b00      	cmp	r3, #0
 8047836:	d104      	bne.n	8047842 <HAL_TIM_PWM_Stop+0xa6>
 8047838:	687b      	ldr	r3, [r7, #4]
 804783a:	2201      	movs	r2, #1
 804783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047840:	e013      	b.n	804786a <HAL_TIM_PWM_Stop+0xce>
 8047842:	683b      	ldr	r3, [r7, #0]
 8047844:	2b04      	cmp	r3, #4
 8047846:	d104      	bne.n	8047852 <HAL_TIM_PWM_Stop+0xb6>
 8047848:	687b      	ldr	r3, [r7, #4]
 804784a:	2201      	movs	r2, #1
 804784c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047850:	e00b      	b.n	804786a <HAL_TIM_PWM_Stop+0xce>
 8047852:	683b      	ldr	r3, [r7, #0]
 8047854:	2b08      	cmp	r3, #8
 8047856:	d104      	bne.n	8047862 <HAL_TIM_PWM_Stop+0xc6>
 8047858:	687b      	ldr	r3, [r7, #4]
 804785a:	2201      	movs	r2, #1
 804785c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047860:	e003      	b.n	804786a <HAL_TIM_PWM_Stop+0xce>
 8047862:	687b      	ldr	r3, [r7, #4]
 8047864:	2201      	movs	r2, #1
 8047866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 804786a:	2300      	movs	r3, #0
}
 804786c:	4618      	mov	r0, r3
 804786e:	3708      	adds	r7, #8
 8047870:	46bd      	mov	sp, r7
 8047872:	bd80      	pop	{r7, pc}
 8047874:	40010000 	.word	0x40010000
 8047878:	40010400 	.word	0x40010400

0804787c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 804787c:	b580      	push	{r7, lr}
 804787e:	b086      	sub	sp, #24
 8047880:	af00      	add	r7, sp, #0
 8047882:	6078      	str	r0, [r7, #4]
 8047884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047886:	687b      	ldr	r3, [r7, #4]
 8047888:	2b00      	cmp	r3, #0
 804788a:	d101      	bne.n	8047890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 804788c:	2301      	movs	r3, #1
 804788e:	e097      	b.n	80479c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047890:	687b      	ldr	r3, [r7, #4]
 8047892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047896:	b2db      	uxtb	r3, r3
 8047898:	2b00      	cmp	r3, #0
 804789a:	d106      	bne.n	80478aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804789c:	687b      	ldr	r3, [r7, #4]
 804789e:	2200      	movs	r2, #0
 80478a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80478a4:	6878      	ldr	r0, [r7, #4]
 80478a6:	f7fc feef 	bl	8044688 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80478aa:	687b      	ldr	r3, [r7, #4]
 80478ac:	2202      	movs	r2, #2
 80478ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80478b2:	687b      	ldr	r3, [r7, #4]
 80478b4:	681b      	ldr	r3, [r3, #0]
 80478b6:	689b      	ldr	r3, [r3, #8]
 80478b8:	687a      	ldr	r2, [r7, #4]
 80478ba:	6812      	ldr	r2, [r2, #0]
 80478bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80478c0:	f023 0307 	bic.w	r3, r3, #7
 80478c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80478c6:	687b      	ldr	r3, [r7, #4]
 80478c8:	681a      	ldr	r2, [r3, #0]
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	3304      	adds	r3, #4
 80478ce:	4619      	mov	r1, r3
 80478d0:	4610      	mov	r0, r2
 80478d2:	f000 fbcb 	bl	804806c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80478d6:	687b      	ldr	r3, [r7, #4]
 80478d8:	681b      	ldr	r3, [r3, #0]
 80478da:	689b      	ldr	r3, [r3, #8]
 80478dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80478de:	687b      	ldr	r3, [r7, #4]
 80478e0:	681b      	ldr	r3, [r3, #0]
 80478e2:	699b      	ldr	r3, [r3, #24]
 80478e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80478e6:	687b      	ldr	r3, [r7, #4]
 80478e8:	681b      	ldr	r3, [r3, #0]
 80478ea:	6a1b      	ldr	r3, [r3, #32]
 80478ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80478ee:	683b      	ldr	r3, [r7, #0]
 80478f0:	681b      	ldr	r3, [r3, #0]
 80478f2:	697a      	ldr	r2, [r7, #20]
 80478f4:	4313      	orrs	r3, r2
 80478f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80478f8:	693b      	ldr	r3, [r7, #16]
 80478fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80478fe:	f023 0303 	bic.w	r3, r3, #3
 8047902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8047904:	683b      	ldr	r3, [r7, #0]
 8047906:	689a      	ldr	r2, [r3, #8]
 8047908:	683b      	ldr	r3, [r7, #0]
 804790a:	699b      	ldr	r3, [r3, #24]
 804790c:	021b      	lsls	r3, r3, #8
 804790e:	4313      	orrs	r3, r2
 8047910:	693a      	ldr	r2, [r7, #16]
 8047912:	4313      	orrs	r3, r2
 8047914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8047916:	693b      	ldr	r3, [r7, #16]
 8047918:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 804791c:	f023 030c 	bic.w	r3, r3, #12
 8047920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8047922:	693b      	ldr	r3, [r7, #16]
 8047924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8047928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804792c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 804792e:	683b      	ldr	r3, [r7, #0]
 8047930:	68da      	ldr	r2, [r3, #12]
 8047932:	683b      	ldr	r3, [r7, #0]
 8047934:	69db      	ldr	r3, [r3, #28]
 8047936:	021b      	lsls	r3, r3, #8
 8047938:	4313      	orrs	r3, r2
 804793a:	693a      	ldr	r2, [r7, #16]
 804793c:	4313      	orrs	r3, r2
 804793e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8047940:	683b      	ldr	r3, [r7, #0]
 8047942:	691b      	ldr	r3, [r3, #16]
 8047944:	011a      	lsls	r2, r3, #4
 8047946:	683b      	ldr	r3, [r7, #0]
 8047948:	6a1b      	ldr	r3, [r3, #32]
 804794a:	031b      	lsls	r3, r3, #12
 804794c:	4313      	orrs	r3, r2
 804794e:	693a      	ldr	r2, [r7, #16]
 8047950:	4313      	orrs	r3, r2
 8047952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8047954:	68fb      	ldr	r3, [r7, #12]
 8047956:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 804795a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 804795c:	68fb      	ldr	r3, [r7, #12]
 804795e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8047962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8047964:	683b      	ldr	r3, [r7, #0]
 8047966:	685a      	ldr	r2, [r3, #4]
 8047968:	683b      	ldr	r3, [r7, #0]
 804796a:	695b      	ldr	r3, [r3, #20]
 804796c:	011b      	lsls	r3, r3, #4
 804796e:	4313      	orrs	r3, r2
 8047970:	68fa      	ldr	r2, [r7, #12]
 8047972:	4313      	orrs	r3, r2
 8047974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8047976:	687b      	ldr	r3, [r7, #4]
 8047978:	681b      	ldr	r3, [r3, #0]
 804797a:	697a      	ldr	r2, [r7, #20]
 804797c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 804797e:	687b      	ldr	r3, [r7, #4]
 8047980:	681b      	ldr	r3, [r3, #0]
 8047982:	693a      	ldr	r2, [r7, #16]
 8047984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8047986:	687b      	ldr	r3, [r7, #4]
 8047988:	681b      	ldr	r3, [r3, #0]
 804798a:	68fa      	ldr	r2, [r7, #12]
 804798c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804798e:	687b      	ldr	r3, [r7, #4]
 8047990:	2201      	movs	r2, #1
 8047992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8047996:	687b      	ldr	r3, [r7, #4]
 8047998:	2201      	movs	r2, #1
 804799a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804799e:	687b      	ldr	r3, [r7, #4]
 80479a0:	2201      	movs	r2, #1
 80479a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80479a6:	687b      	ldr	r3, [r7, #4]
 80479a8:	2201      	movs	r2, #1
 80479aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80479ae:	687b      	ldr	r3, [r7, #4]
 80479b0:	2201      	movs	r2, #1
 80479b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80479b6:	687b      	ldr	r3, [r7, #4]
 80479b8:	2201      	movs	r2, #1
 80479ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80479be:	2300      	movs	r3, #0
}
 80479c0:	4618      	mov	r0, r3
 80479c2:	3718      	adds	r7, #24
 80479c4:	46bd      	mov	sp, r7
 80479c6:	bd80      	pop	{r7, pc}

080479c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80479c8:	b580      	push	{r7, lr}
 80479ca:	b084      	sub	sp, #16
 80479cc:	af00      	add	r7, sp, #0
 80479ce:	6078      	str	r0, [r7, #4]
 80479d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80479d2:	687b      	ldr	r3, [r7, #4]
 80479d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80479d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80479da:	687b      	ldr	r3, [r7, #4]
 80479dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80479e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80479e2:	687b      	ldr	r3, [r7, #4]
 80479e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80479e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80479ea:	687b      	ldr	r3, [r7, #4]
 80479ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80479f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80479f2:	683b      	ldr	r3, [r7, #0]
 80479f4:	2b00      	cmp	r3, #0
 80479f6:	d110      	bne.n	8047a1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80479f8:	7bfb      	ldrb	r3, [r7, #15]
 80479fa:	2b01      	cmp	r3, #1
 80479fc:	d102      	bne.n	8047a04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80479fe:	7b7b      	ldrb	r3, [r7, #13]
 8047a00:	2b01      	cmp	r3, #1
 8047a02:	d001      	beq.n	8047a08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8047a04:	2301      	movs	r3, #1
 8047a06:	e069      	b.n	8047adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a08:	687b      	ldr	r3, [r7, #4]
 8047a0a:	2202      	movs	r2, #2
 8047a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a10:	687b      	ldr	r3, [r7, #4]
 8047a12:	2202      	movs	r2, #2
 8047a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047a18:	e031      	b.n	8047a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8047a1a:	683b      	ldr	r3, [r7, #0]
 8047a1c:	2b04      	cmp	r3, #4
 8047a1e:	d110      	bne.n	8047a42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8047a20:	7bbb      	ldrb	r3, [r7, #14]
 8047a22:	2b01      	cmp	r3, #1
 8047a24:	d102      	bne.n	8047a2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8047a26:	7b3b      	ldrb	r3, [r7, #12]
 8047a28:	2b01      	cmp	r3, #1
 8047a2a:	d001      	beq.n	8047a30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8047a2c:	2301      	movs	r3, #1
 8047a2e:	e055      	b.n	8047adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a30:	687b      	ldr	r3, [r7, #4]
 8047a32:	2202      	movs	r2, #2
 8047a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a38:	687b      	ldr	r3, [r7, #4]
 8047a3a:	2202      	movs	r2, #2
 8047a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047a40:	e01d      	b.n	8047a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8047a42:	7bfb      	ldrb	r3, [r7, #15]
 8047a44:	2b01      	cmp	r3, #1
 8047a46:	d108      	bne.n	8047a5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8047a48:	7bbb      	ldrb	r3, [r7, #14]
 8047a4a:	2b01      	cmp	r3, #1
 8047a4c:	d105      	bne.n	8047a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8047a4e:	7b7b      	ldrb	r3, [r7, #13]
 8047a50:	2b01      	cmp	r3, #1
 8047a52:	d102      	bne.n	8047a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8047a54:	7b3b      	ldrb	r3, [r7, #12]
 8047a56:	2b01      	cmp	r3, #1
 8047a58:	d001      	beq.n	8047a5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8047a5a:	2301      	movs	r3, #1
 8047a5c:	e03e      	b.n	8047adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a5e:	687b      	ldr	r3, [r7, #4]
 8047a60:	2202      	movs	r2, #2
 8047a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a66:	687b      	ldr	r3, [r7, #4]
 8047a68:	2202      	movs	r2, #2
 8047a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a6e:	687b      	ldr	r3, [r7, #4]
 8047a70:	2202      	movs	r2, #2
 8047a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047a76:	687b      	ldr	r3, [r7, #4]
 8047a78:	2202      	movs	r2, #2
 8047a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8047a7e:	683b      	ldr	r3, [r7, #0]
 8047a80:	2b00      	cmp	r3, #0
 8047a82:	d003      	beq.n	8047a8c <HAL_TIM_Encoder_Start+0xc4>
 8047a84:	683b      	ldr	r3, [r7, #0]
 8047a86:	2b04      	cmp	r3, #4
 8047a88:	d008      	beq.n	8047a9c <HAL_TIM_Encoder_Start+0xd4>
 8047a8a:	e00f      	b.n	8047aac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8047a8c:	687b      	ldr	r3, [r7, #4]
 8047a8e:	681b      	ldr	r3, [r3, #0]
 8047a90:	2201      	movs	r2, #1
 8047a92:	2100      	movs	r1, #0
 8047a94:	4618      	mov	r0, r3
 8047a96:	f000 fdd3 	bl	8048640 <TIM_CCxChannelCmd>
      break;
 8047a9a:	e016      	b.n	8047aca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8047a9c:	687b      	ldr	r3, [r7, #4]
 8047a9e:	681b      	ldr	r3, [r3, #0]
 8047aa0:	2201      	movs	r2, #1
 8047aa2:	2104      	movs	r1, #4
 8047aa4:	4618      	mov	r0, r3
 8047aa6:	f000 fdcb 	bl	8048640 <TIM_CCxChannelCmd>
      break;
 8047aaa:	e00e      	b.n	8047aca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8047aac:	687b      	ldr	r3, [r7, #4]
 8047aae:	681b      	ldr	r3, [r3, #0]
 8047ab0:	2201      	movs	r2, #1
 8047ab2:	2100      	movs	r1, #0
 8047ab4:	4618      	mov	r0, r3
 8047ab6:	f000 fdc3 	bl	8048640 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8047aba:	687b      	ldr	r3, [r7, #4]
 8047abc:	681b      	ldr	r3, [r3, #0]
 8047abe:	2201      	movs	r2, #1
 8047ac0:	2104      	movs	r1, #4
 8047ac2:	4618      	mov	r0, r3
 8047ac4:	f000 fdbc 	bl	8048640 <TIM_CCxChannelCmd>
      break;
 8047ac8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8047aca:	687b      	ldr	r3, [r7, #4]
 8047acc:	681b      	ldr	r3, [r3, #0]
 8047ace:	681a      	ldr	r2, [r3, #0]
 8047ad0:	687b      	ldr	r3, [r7, #4]
 8047ad2:	681b      	ldr	r3, [r3, #0]
 8047ad4:	f042 0201 	orr.w	r2, r2, #1
 8047ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8047ada:	2300      	movs	r3, #0
}
 8047adc:	4618      	mov	r0, r3
 8047ade:	3710      	adds	r7, #16
 8047ae0:	46bd      	mov	sp, r7
 8047ae2:	bd80      	pop	{r7, pc}

08047ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8047ae4:	b580      	push	{r7, lr}
 8047ae6:	b082      	sub	sp, #8
 8047ae8:	af00      	add	r7, sp, #0
 8047aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8047aec:	687b      	ldr	r3, [r7, #4]
 8047aee:	681b      	ldr	r3, [r3, #0]
 8047af0:	691b      	ldr	r3, [r3, #16]
 8047af2:	f003 0302 	and.w	r3, r3, #2
 8047af6:	2b02      	cmp	r3, #2
 8047af8:	d122      	bne.n	8047b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8047afa:	687b      	ldr	r3, [r7, #4]
 8047afc:	681b      	ldr	r3, [r3, #0]
 8047afe:	68db      	ldr	r3, [r3, #12]
 8047b00:	f003 0302 	and.w	r3, r3, #2
 8047b04:	2b02      	cmp	r3, #2
 8047b06:	d11b      	bne.n	8047b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8047b08:	687b      	ldr	r3, [r7, #4]
 8047b0a:	681b      	ldr	r3, [r3, #0]
 8047b0c:	f06f 0202 	mvn.w	r2, #2
 8047b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8047b12:	687b      	ldr	r3, [r7, #4]
 8047b14:	2201      	movs	r2, #1
 8047b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8047b18:	687b      	ldr	r3, [r7, #4]
 8047b1a:	681b      	ldr	r3, [r3, #0]
 8047b1c:	699b      	ldr	r3, [r3, #24]
 8047b1e:	f003 0303 	and.w	r3, r3, #3
 8047b22:	2b00      	cmp	r3, #0
 8047b24:	d003      	beq.n	8047b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8047b26:	6878      	ldr	r0, [r7, #4]
 8047b28:	f000 fa81 	bl	804802e <HAL_TIM_IC_CaptureCallback>
 8047b2c:	e005      	b.n	8047b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8047b2e:	6878      	ldr	r0, [r7, #4]
 8047b30:	f000 fa73 	bl	804801a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047b34:	6878      	ldr	r0, [r7, #4]
 8047b36:	f000 fa84 	bl	8048042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047b3a:	687b      	ldr	r3, [r7, #4]
 8047b3c:	2200      	movs	r2, #0
 8047b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8047b40:	687b      	ldr	r3, [r7, #4]
 8047b42:	681b      	ldr	r3, [r3, #0]
 8047b44:	691b      	ldr	r3, [r3, #16]
 8047b46:	f003 0304 	and.w	r3, r3, #4
 8047b4a:	2b04      	cmp	r3, #4
 8047b4c:	d122      	bne.n	8047b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8047b4e:	687b      	ldr	r3, [r7, #4]
 8047b50:	681b      	ldr	r3, [r3, #0]
 8047b52:	68db      	ldr	r3, [r3, #12]
 8047b54:	f003 0304 	and.w	r3, r3, #4
 8047b58:	2b04      	cmp	r3, #4
 8047b5a:	d11b      	bne.n	8047b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8047b5c:	687b      	ldr	r3, [r7, #4]
 8047b5e:	681b      	ldr	r3, [r3, #0]
 8047b60:	f06f 0204 	mvn.w	r2, #4
 8047b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8047b66:	687b      	ldr	r3, [r7, #4]
 8047b68:	2202      	movs	r2, #2
 8047b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8047b6c:	687b      	ldr	r3, [r7, #4]
 8047b6e:	681b      	ldr	r3, [r3, #0]
 8047b70:	699b      	ldr	r3, [r3, #24]
 8047b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047b76:	2b00      	cmp	r3, #0
 8047b78:	d003      	beq.n	8047b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047b7a:	6878      	ldr	r0, [r7, #4]
 8047b7c:	f000 fa57 	bl	804802e <HAL_TIM_IC_CaptureCallback>
 8047b80:	e005      	b.n	8047b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047b82:	6878      	ldr	r0, [r7, #4]
 8047b84:	f000 fa49 	bl	804801a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047b88:	6878      	ldr	r0, [r7, #4]
 8047b8a:	f000 fa5a 	bl	8048042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047b8e:	687b      	ldr	r3, [r7, #4]
 8047b90:	2200      	movs	r2, #0
 8047b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8047b94:	687b      	ldr	r3, [r7, #4]
 8047b96:	681b      	ldr	r3, [r3, #0]
 8047b98:	691b      	ldr	r3, [r3, #16]
 8047b9a:	f003 0308 	and.w	r3, r3, #8
 8047b9e:	2b08      	cmp	r3, #8
 8047ba0:	d122      	bne.n	8047be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8047ba2:	687b      	ldr	r3, [r7, #4]
 8047ba4:	681b      	ldr	r3, [r3, #0]
 8047ba6:	68db      	ldr	r3, [r3, #12]
 8047ba8:	f003 0308 	and.w	r3, r3, #8
 8047bac:	2b08      	cmp	r3, #8
 8047bae:	d11b      	bne.n	8047be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8047bb0:	687b      	ldr	r3, [r7, #4]
 8047bb2:	681b      	ldr	r3, [r3, #0]
 8047bb4:	f06f 0208 	mvn.w	r2, #8
 8047bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8047bba:	687b      	ldr	r3, [r7, #4]
 8047bbc:	2204      	movs	r2, #4
 8047bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8047bc0:	687b      	ldr	r3, [r7, #4]
 8047bc2:	681b      	ldr	r3, [r3, #0]
 8047bc4:	69db      	ldr	r3, [r3, #28]
 8047bc6:	f003 0303 	and.w	r3, r3, #3
 8047bca:	2b00      	cmp	r3, #0
 8047bcc:	d003      	beq.n	8047bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047bce:	6878      	ldr	r0, [r7, #4]
 8047bd0:	f000 fa2d 	bl	804802e <HAL_TIM_IC_CaptureCallback>
 8047bd4:	e005      	b.n	8047be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047bd6:	6878      	ldr	r0, [r7, #4]
 8047bd8:	f000 fa1f 	bl	804801a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047bdc:	6878      	ldr	r0, [r7, #4]
 8047bde:	f000 fa30 	bl	8048042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047be2:	687b      	ldr	r3, [r7, #4]
 8047be4:	2200      	movs	r2, #0
 8047be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8047be8:	687b      	ldr	r3, [r7, #4]
 8047bea:	681b      	ldr	r3, [r3, #0]
 8047bec:	691b      	ldr	r3, [r3, #16]
 8047bee:	f003 0310 	and.w	r3, r3, #16
 8047bf2:	2b10      	cmp	r3, #16
 8047bf4:	d122      	bne.n	8047c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8047bf6:	687b      	ldr	r3, [r7, #4]
 8047bf8:	681b      	ldr	r3, [r3, #0]
 8047bfa:	68db      	ldr	r3, [r3, #12]
 8047bfc:	f003 0310 	and.w	r3, r3, #16
 8047c00:	2b10      	cmp	r3, #16
 8047c02:	d11b      	bne.n	8047c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8047c04:	687b      	ldr	r3, [r7, #4]
 8047c06:	681b      	ldr	r3, [r3, #0]
 8047c08:	f06f 0210 	mvn.w	r2, #16
 8047c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8047c0e:	687b      	ldr	r3, [r7, #4]
 8047c10:	2208      	movs	r2, #8
 8047c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8047c14:	687b      	ldr	r3, [r7, #4]
 8047c16:	681b      	ldr	r3, [r3, #0]
 8047c18:	69db      	ldr	r3, [r3, #28]
 8047c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047c1e:	2b00      	cmp	r3, #0
 8047c20:	d003      	beq.n	8047c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047c22:	6878      	ldr	r0, [r7, #4]
 8047c24:	f000 fa03 	bl	804802e <HAL_TIM_IC_CaptureCallback>
 8047c28:	e005      	b.n	8047c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047c2a:	6878      	ldr	r0, [r7, #4]
 8047c2c:	f000 f9f5 	bl	804801a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047c30:	6878      	ldr	r0, [r7, #4]
 8047c32:	f000 fa06 	bl	8048042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047c36:	687b      	ldr	r3, [r7, #4]
 8047c38:	2200      	movs	r2, #0
 8047c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8047c3c:	687b      	ldr	r3, [r7, #4]
 8047c3e:	681b      	ldr	r3, [r3, #0]
 8047c40:	691b      	ldr	r3, [r3, #16]
 8047c42:	f003 0301 	and.w	r3, r3, #1
 8047c46:	2b01      	cmp	r3, #1
 8047c48:	d10e      	bne.n	8047c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8047c4a:	687b      	ldr	r3, [r7, #4]
 8047c4c:	681b      	ldr	r3, [r3, #0]
 8047c4e:	68db      	ldr	r3, [r3, #12]
 8047c50:	f003 0301 	and.w	r3, r3, #1
 8047c54:	2b01      	cmp	r3, #1
 8047c56:	d107      	bne.n	8047c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8047c58:	687b      	ldr	r3, [r7, #4]
 8047c5a:	681b      	ldr	r3, [r3, #0]
 8047c5c:	f06f 0201 	mvn.w	r2, #1
 8047c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8047c62:	6878      	ldr	r0, [r7, #4]
 8047c64:	f000 f9cf 	bl	8048006 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8047c68:	687b      	ldr	r3, [r7, #4]
 8047c6a:	681b      	ldr	r3, [r3, #0]
 8047c6c:	691b      	ldr	r3, [r3, #16]
 8047c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047c72:	2b80      	cmp	r3, #128	; 0x80
 8047c74:	d10e      	bne.n	8047c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8047c76:	687b      	ldr	r3, [r7, #4]
 8047c78:	681b      	ldr	r3, [r3, #0]
 8047c7a:	68db      	ldr	r3, [r3, #12]
 8047c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047c80:	2b80      	cmp	r3, #128	; 0x80
 8047c82:	d107      	bne.n	8047c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8047c84:	687b      	ldr	r3, [r7, #4]
 8047c86:	681b      	ldr	r3, [r3, #0]
 8047c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8047c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8047c8e:	6878      	ldr	r0, [r7, #4]
 8047c90:	f000 fd82 	bl	8048798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8047c94:	687b      	ldr	r3, [r7, #4]
 8047c96:	681b      	ldr	r3, [r3, #0]
 8047c98:	691b      	ldr	r3, [r3, #16]
 8047c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047c9e:	2b40      	cmp	r3, #64	; 0x40
 8047ca0:	d10e      	bne.n	8047cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8047ca2:	687b      	ldr	r3, [r7, #4]
 8047ca4:	681b      	ldr	r3, [r3, #0]
 8047ca6:	68db      	ldr	r3, [r3, #12]
 8047ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047cac:	2b40      	cmp	r3, #64	; 0x40
 8047cae:	d107      	bne.n	8047cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8047cb0:	687b      	ldr	r3, [r7, #4]
 8047cb2:	681b      	ldr	r3, [r3, #0]
 8047cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8047cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8047cba:	6878      	ldr	r0, [r7, #4]
 8047cbc:	f000 f9cb 	bl	8048056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8047cc0:	687b      	ldr	r3, [r7, #4]
 8047cc2:	681b      	ldr	r3, [r3, #0]
 8047cc4:	691b      	ldr	r3, [r3, #16]
 8047cc6:	f003 0320 	and.w	r3, r3, #32
 8047cca:	2b20      	cmp	r3, #32
 8047ccc:	d10e      	bne.n	8047cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8047cce:	687b      	ldr	r3, [r7, #4]
 8047cd0:	681b      	ldr	r3, [r3, #0]
 8047cd2:	68db      	ldr	r3, [r3, #12]
 8047cd4:	f003 0320 	and.w	r3, r3, #32
 8047cd8:	2b20      	cmp	r3, #32
 8047cda:	d107      	bne.n	8047cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8047cdc:	687b      	ldr	r3, [r7, #4]
 8047cde:	681b      	ldr	r3, [r3, #0]
 8047ce0:	f06f 0220 	mvn.w	r2, #32
 8047ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8047ce6:	6878      	ldr	r0, [r7, #4]
 8047ce8:	f000 fd4c 	bl	8048784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8047cec:	bf00      	nop
 8047cee:	3708      	adds	r7, #8
 8047cf0:	46bd      	mov	sp, r7
 8047cf2:	bd80      	pop	{r7, pc}

08047cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8047cf4:	b580      	push	{r7, lr}
 8047cf6:	b086      	sub	sp, #24
 8047cf8:	af00      	add	r7, sp, #0
 8047cfa:	60f8      	str	r0, [r7, #12]
 8047cfc:	60b9      	str	r1, [r7, #8]
 8047cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8047d00:	2300      	movs	r3, #0
 8047d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8047d04:	68fb      	ldr	r3, [r7, #12]
 8047d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8047d0a:	2b01      	cmp	r3, #1
 8047d0c:	d101      	bne.n	8047d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8047d0e:	2302      	movs	r3, #2
 8047d10:	e0ae      	b.n	8047e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8047d12:	68fb      	ldr	r3, [r7, #12]
 8047d14:	2201      	movs	r2, #1
 8047d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8047d1a:	687b      	ldr	r3, [r7, #4]
 8047d1c:	2b0c      	cmp	r3, #12
 8047d1e:	f200 809f 	bhi.w	8047e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8047d22:	a201      	add	r2, pc, #4	; (adr r2, 8047d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8047d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047d28:	08047d5d 	.word	0x08047d5d
 8047d2c:	08047e61 	.word	0x08047e61
 8047d30:	08047e61 	.word	0x08047e61
 8047d34:	08047e61 	.word	0x08047e61
 8047d38:	08047d9d 	.word	0x08047d9d
 8047d3c:	08047e61 	.word	0x08047e61
 8047d40:	08047e61 	.word	0x08047e61
 8047d44:	08047e61 	.word	0x08047e61
 8047d48:	08047ddf 	.word	0x08047ddf
 8047d4c:	08047e61 	.word	0x08047e61
 8047d50:	08047e61 	.word	0x08047e61
 8047d54:	08047e61 	.word	0x08047e61
 8047d58:	08047e1f 	.word	0x08047e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8047d5c:	68fb      	ldr	r3, [r7, #12]
 8047d5e:	681b      	ldr	r3, [r3, #0]
 8047d60:	68b9      	ldr	r1, [r7, #8]
 8047d62:	4618      	mov	r0, r3
 8047d64:	f000 fa22 	bl	80481ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8047d68:	68fb      	ldr	r3, [r7, #12]
 8047d6a:	681b      	ldr	r3, [r3, #0]
 8047d6c:	699a      	ldr	r2, [r3, #24]
 8047d6e:	68fb      	ldr	r3, [r7, #12]
 8047d70:	681b      	ldr	r3, [r3, #0]
 8047d72:	f042 0208 	orr.w	r2, r2, #8
 8047d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8047d78:	68fb      	ldr	r3, [r7, #12]
 8047d7a:	681b      	ldr	r3, [r3, #0]
 8047d7c:	699a      	ldr	r2, [r3, #24]
 8047d7e:	68fb      	ldr	r3, [r7, #12]
 8047d80:	681b      	ldr	r3, [r3, #0]
 8047d82:	f022 0204 	bic.w	r2, r2, #4
 8047d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8047d88:	68fb      	ldr	r3, [r7, #12]
 8047d8a:	681b      	ldr	r3, [r3, #0]
 8047d8c:	6999      	ldr	r1, [r3, #24]
 8047d8e:	68bb      	ldr	r3, [r7, #8]
 8047d90:	691a      	ldr	r2, [r3, #16]
 8047d92:	68fb      	ldr	r3, [r7, #12]
 8047d94:	681b      	ldr	r3, [r3, #0]
 8047d96:	430a      	orrs	r2, r1
 8047d98:	619a      	str	r2, [r3, #24]
      break;
 8047d9a:	e064      	b.n	8047e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8047d9c:	68fb      	ldr	r3, [r7, #12]
 8047d9e:	681b      	ldr	r3, [r3, #0]
 8047da0:	68b9      	ldr	r1, [r7, #8]
 8047da2:	4618      	mov	r0, r3
 8047da4:	f000 fa72 	bl	804828c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8047da8:	68fb      	ldr	r3, [r7, #12]
 8047daa:	681b      	ldr	r3, [r3, #0]
 8047dac:	699a      	ldr	r2, [r3, #24]
 8047dae:	68fb      	ldr	r3, [r7, #12]
 8047db0:	681b      	ldr	r3, [r3, #0]
 8047db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8047db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8047db8:	68fb      	ldr	r3, [r7, #12]
 8047dba:	681b      	ldr	r3, [r3, #0]
 8047dbc:	699a      	ldr	r2, [r3, #24]
 8047dbe:	68fb      	ldr	r3, [r7, #12]
 8047dc0:	681b      	ldr	r3, [r3, #0]
 8047dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8047dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8047dc8:	68fb      	ldr	r3, [r7, #12]
 8047dca:	681b      	ldr	r3, [r3, #0]
 8047dcc:	6999      	ldr	r1, [r3, #24]
 8047dce:	68bb      	ldr	r3, [r7, #8]
 8047dd0:	691b      	ldr	r3, [r3, #16]
 8047dd2:	021a      	lsls	r2, r3, #8
 8047dd4:	68fb      	ldr	r3, [r7, #12]
 8047dd6:	681b      	ldr	r3, [r3, #0]
 8047dd8:	430a      	orrs	r2, r1
 8047dda:	619a      	str	r2, [r3, #24]
      break;
 8047ddc:	e043      	b.n	8047e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8047dde:	68fb      	ldr	r3, [r7, #12]
 8047de0:	681b      	ldr	r3, [r3, #0]
 8047de2:	68b9      	ldr	r1, [r7, #8]
 8047de4:	4618      	mov	r0, r3
 8047de6:	f000 fac7 	bl	8048378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8047dea:	68fb      	ldr	r3, [r7, #12]
 8047dec:	681b      	ldr	r3, [r3, #0]
 8047dee:	69da      	ldr	r2, [r3, #28]
 8047df0:	68fb      	ldr	r3, [r7, #12]
 8047df2:	681b      	ldr	r3, [r3, #0]
 8047df4:	f042 0208 	orr.w	r2, r2, #8
 8047df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8047dfa:	68fb      	ldr	r3, [r7, #12]
 8047dfc:	681b      	ldr	r3, [r3, #0]
 8047dfe:	69da      	ldr	r2, [r3, #28]
 8047e00:	68fb      	ldr	r3, [r7, #12]
 8047e02:	681b      	ldr	r3, [r3, #0]
 8047e04:	f022 0204 	bic.w	r2, r2, #4
 8047e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8047e0a:	68fb      	ldr	r3, [r7, #12]
 8047e0c:	681b      	ldr	r3, [r3, #0]
 8047e0e:	69d9      	ldr	r1, [r3, #28]
 8047e10:	68bb      	ldr	r3, [r7, #8]
 8047e12:	691a      	ldr	r2, [r3, #16]
 8047e14:	68fb      	ldr	r3, [r7, #12]
 8047e16:	681b      	ldr	r3, [r3, #0]
 8047e18:	430a      	orrs	r2, r1
 8047e1a:	61da      	str	r2, [r3, #28]
      break;
 8047e1c:	e023      	b.n	8047e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8047e1e:	68fb      	ldr	r3, [r7, #12]
 8047e20:	681b      	ldr	r3, [r3, #0]
 8047e22:	68b9      	ldr	r1, [r7, #8]
 8047e24:	4618      	mov	r0, r3
 8047e26:	f000 fb1b 	bl	8048460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8047e2a:	68fb      	ldr	r3, [r7, #12]
 8047e2c:	681b      	ldr	r3, [r3, #0]
 8047e2e:	69da      	ldr	r2, [r3, #28]
 8047e30:	68fb      	ldr	r3, [r7, #12]
 8047e32:	681b      	ldr	r3, [r3, #0]
 8047e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8047e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8047e3a:	68fb      	ldr	r3, [r7, #12]
 8047e3c:	681b      	ldr	r3, [r3, #0]
 8047e3e:	69da      	ldr	r2, [r3, #28]
 8047e40:	68fb      	ldr	r3, [r7, #12]
 8047e42:	681b      	ldr	r3, [r3, #0]
 8047e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8047e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8047e4a:	68fb      	ldr	r3, [r7, #12]
 8047e4c:	681b      	ldr	r3, [r3, #0]
 8047e4e:	69d9      	ldr	r1, [r3, #28]
 8047e50:	68bb      	ldr	r3, [r7, #8]
 8047e52:	691b      	ldr	r3, [r3, #16]
 8047e54:	021a      	lsls	r2, r3, #8
 8047e56:	68fb      	ldr	r3, [r7, #12]
 8047e58:	681b      	ldr	r3, [r3, #0]
 8047e5a:	430a      	orrs	r2, r1
 8047e5c:	61da      	str	r2, [r3, #28]
      break;
 8047e5e:	e002      	b.n	8047e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8047e60:	2301      	movs	r3, #1
 8047e62:	75fb      	strb	r3, [r7, #23]
      break;
 8047e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8047e66:	68fb      	ldr	r3, [r7, #12]
 8047e68:	2200      	movs	r2, #0
 8047e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8047e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8047e70:	4618      	mov	r0, r3
 8047e72:	3718      	adds	r7, #24
 8047e74:	46bd      	mov	sp, r7
 8047e76:	bd80      	pop	{r7, pc}

08047e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8047e78:	b580      	push	{r7, lr}
 8047e7a:	b084      	sub	sp, #16
 8047e7c:	af00      	add	r7, sp, #0
 8047e7e:	6078      	str	r0, [r7, #4]
 8047e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8047e82:	2300      	movs	r3, #0
 8047e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8047e86:	687b      	ldr	r3, [r7, #4]
 8047e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8047e8c:	2b01      	cmp	r3, #1
 8047e8e:	d101      	bne.n	8047e94 <HAL_TIM_ConfigClockSource+0x1c>
 8047e90:	2302      	movs	r3, #2
 8047e92:	e0b4      	b.n	8047ffe <HAL_TIM_ConfigClockSource+0x186>
 8047e94:	687b      	ldr	r3, [r7, #4]
 8047e96:	2201      	movs	r2, #1
 8047e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8047e9c:	687b      	ldr	r3, [r7, #4]
 8047e9e:	2202      	movs	r2, #2
 8047ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8047ea4:	687b      	ldr	r3, [r7, #4]
 8047ea6:	681b      	ldr	r3, [r3, #0]
 8047ea8:	689b      	ldr	r3, [r3, #8]
 8047eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8047eac:	68bb      	ldr	r3, [r7, #8]
 8047eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8047eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8047eb4:	68bb      	ldr	r3, [r7, #8]
 8047eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8047eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8047ebc:	687b      	ldr	r3, [r7, #4]
 8047ebe:	681b      	ldr	r3, [r3, #0]
 8047ec0:	68ba      	ldr	r2, [r7, #8]
 8047ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8047ec4:	683b      	ldr	r3, [r7, #0]
 8047ec6:	681b      	ldr	r3, [r3, #0]
 8047ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047ecc:	d03e      	beq.n	8047f4c <HAL_TIM_ConfigClockSource+0xd4>
 8047ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047ed2:	f200 8087 	bhi.w	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8047eda:	f000 8086 	beq.w	8047fea <HAL_TIM_ConfigClockSource+0x172>
 8047ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8047ee2:	d87f      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047ee4:	2b70      	cmp	r3, #112	; 0x70
 8047ee6:	d01a      	beq.n	8047f1e <HAL_TIM_ConfigClockSource+0xa6>
 8047ee8:	2b70      	cmp	r3, #112	; 0x70
 8047eea:	d87b      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047eec:	2b60      	cmp	r3, #96	; 0x60
 8047eee:	d050      	beq.n	8047f92 <HAL_TIM_ConfigClockSource+0x11a>
 8047ef0:	2b60      	cmp	r3, #96	; 0x60
 8047ef2:	d877      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047ef4:	2b50      	cmp	r3, #80	; 0x50
 8047ef6:	d03c      	beq.n	8047f72 <HAL_TIM_ConfigClockSource+0xfa>
 8047ef8:	2b50      	cmp	r3, #80	; 0x50
 8047efa:	d873      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047efc:	2b40      	cmp	r3, #64	; 0x40
 8047efe:	d058      	beq.n	8047fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8047f00:	2b40      	cmp	r3, #64	; 0x40
 8047f02:	d86f      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047f04:	2b30      	cmp	r3, #48	; 0x30
 8047f06:	d064      	beq.n	8047fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8047f08:	2b30      	cmp	r3, #48	; 0x30
 8047f0a:	d86b      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047f0c:	2b20      	cmp	r3, #32
 8047f0e:	d060      	beq.n	8047fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8047f10:	2b20      	cmp	r3, #32
 8047f12:	d867      	bhi.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8047f14:	2b00      	cmp	r3, #0
 8047f16:	d05c      	beq.n	8047fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8047f18:	2b10      	cmp	r3, #16
 8047f1a:	d05a      	beq.n	8047fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8047f1c:	e062      	b.n	8047fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8047f1e:	687b      	ldr	r3, [r7, #4]
 8047f20:	6818      	ldr	r0, [r3, #0]
 8047f22:	683b      	ldr	r3, [r7, #0]
 8047f24:	6899      	ldr	r1, [r3, #8]
 8047f26:	683b      	ldr	r3, [r7, #0]
 8047f28:	685a      	ldr	r2, [r3, #4]
 8047f2a:	683b      	ldr	r3, [r7, #0]
 8047f2c:	68db      	ldr	r3, [r3, #12]
 8047f2e:	f000 fb67 	bl	8048600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8047f32:	687b      	ldr	r3, [r7, #4]
 8047f34:	681b      	ldr	r3, [r3, #0]
 8047f36:	689b      	ldr	r3, [r3, #8]
 8047f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8047f3a:	68bb      	ldr	r3, [r7, #8]
 8047f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8047f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8047f42:	687b      	ldr	r3, [r7, #4]
 8047f44:	681b      	ldr	r3, [r3, #0]
 8047f46:	68ba      	ldr	r2, [r7, #8]
 8047f48:	609a      	str	r2, [r3, #8]
      break;
 8047f4a:	e04f      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8047f4c:	687b      	ldr	r3, [r7, #4]
 8047f4e:	6818      	ldr	r0, [r3, #0]
 8047f50:	683b      	ldr	r3, [r7, #0]
 8047f52:	6899      	ldr	r1, [r3, #8]
 8047f54:	683b      	ldr	r3, [r7, #0]
 8047f56:	685a      	ldr	r2, [r3, #4]
 8047f58:	683b      	ldr	r3, [r7, #0]
 8047f5a:	68db      	ldr	r3, [r3, #12]
 8047f5c:	f000 fb50 	bl	8048600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8047f60:	687b      	ldr	r3, [r7, #4]
 8047f62:	681b      	ldr	r3, [r3, #0]
 8047f64:	689a      	ldr	r2, [r3, #8]
 8047f66:	687b      	ldr	r3, [r7, #4]
 8047f68:	681b      	ldr	r3, [r3, #0]
 8047f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8047f6e:	609a      	str	r2, [r3, #8]
      break;
 8047f70:	e03c      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8047f72:	687b      	ldr	r3, [r7, #4]
 8047f74:	6818      	ldr	r0, [r3, #0]
 8047f76:	683b      	ldr	r3, [r7, #0]
 8047f78:	6859      	ldr	r1, [r3, #4]
 8047f7a:	683b      	ldr	r3, [r7, #0]
 8047f7c:	68db      	ldr	r3, [r3, #12]
 8047f7e:	461a      	mov	r2, r3
 8047f80:	f000 fac4 	bl	804850c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8047f84:	687b      	ldr	r3, [r7, #4]
 8047f86:	681b      	ldr	r3, [r3, #0]
 8047f88:	2150      	movs	r1, #80	; 0x50
 8047f8a:	4618      	mov	r0, r3
 8047f8c:	f000 fb1d 	bl	80485ca <TIM_ITRx_SetConfig>
      break;
 8047f90:	e02c      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8047f92:	687b      	ldr	r3, [r7, #4]
 8047f94:	6818      	ldr	r0, [r3, #0]
 8047f96:	683b      	ldr	r3, [r7, #0]
 8047f98:	6859      	ldr	r1, [r3, #4]
 8047f9a:	683b      	ldr	r3, [r7, #0]
 8047f9c:	68db      	ldr	r3, [r3, #12]
 8047f9e:	461a      	mov	r2, r3
 8047fa0:	f000 fae3 	bl	804856a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8047fa4:	687b      	ldr	r3, [r7, #4]
 8047fa6:	681b      	ldr	r3, [r3, #0]
 8047fa8:	2160      	movs	r1, #96	; 0x60
 8047faa:	4618      	mov	r0, r3
 8047fac:	f000 fb0d 	bl	80485ca <TIM_ITRx_SetConfig>
      break;
 8047fb0:	e01c      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8047fb2:	687b      	ldr	r3, [r7, #4]
 8047fb4:	6818      	ldr	r0, [r3, #0]
 8047fb6:	683b      	ldr	r3, [r7, #0]
 8047fb8:	6859      	ldr	r1, [r3, #4]
 8047fba:	683b      	ldr	r3, [r7, #0]
 8047fbc:	68db      	ldr	r3, [r3, #12]
 8047fbe:	461a      	mov	r2, r3
 8047fc0:	f000 faa4 	bl	804850c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	681b      	ldr	r3, [r3, #0]
 8047fc8:	2140      	movs	r1, #64	; 0x40
 8047fca:	4618      	mov	r0, r3
 8047fcc:	f000 fafd 	bl	80485ca <TIM_ITRx_SetConfig>
      break;
 8047fd0:	e00c      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8047fd2:	687b      	ldr	r3, [r7, #4]
 8047fd4:	681a      	ldr	r2, [r3, #0]
 8047fd6:	683b      	ldr	r3, [r7, #0]
 8047fd8:	681b      	ldr	r3, [r3, #0]
 8047fda:	4619      	mov	r1, r3
 8047fdc:	4610      	mov	r0, r2
 8047fde:	f000 faf4 	bl	80485ca <TIM_ITRx_SetConfig>
      break;
 8047fe2:	e003      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8047fe4:	2301      	movs	r3, #1
 8047fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8047fe8:	e000      	b.n	8047fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8047fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8047fec:	687b      	ldr	r3, [r7, #4]
 8047fee:	2201      	movs	r2, #1
 8047ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8047ff4:	687b      	ldr	r3, [r7, #4]
 8047ff6:	2200      	movs	r2, #0
 8047ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8047ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8047ffe:	4618      	mov	r0, r3
 8048000:	3710      	adds	r7, #16
 8048002:	46bd      	mov	sp, r7
 8048004:	bd80      	pop	{r7, pc}

08048006 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8048006:	b480      	push	{r7}
 8048008:	b083      	sub	sp, #12
 804800a:	af00      	add	r7, sp, #0
 804800c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 804800e:	bf00      	nop
 8048010:	370c      	adds	r7, #12
 8048012:	46bd      	mov	sp, r7
 8048014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048018:	4770      	bx	lr

0804801a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804801a:	b480      	push	{r7}
 804801c:	b083      	sub	sp, #12
 804801e:	af00      	add	r7, sp, #0
 8048020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8048022:	bf00      	nop
 8048024:	370c      	adds	r7, #12
 8048026:	46bd      	mov	sp, r7
 8048028:	f85d 7b04 	ldr.w	r7, [sp], #4
 804802c:	4770      	bx	lr

0804802e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804802e:	b480      	push	{r7}
 8048030:	b083      	sub	sp, #12
 8048032:	af00      	add	r7, sp, #0
 8048034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8048036:	bf00      	nop
 8048038:	370c      	adds	r7, #12
 804803a:	46bd      	mov	sp, r7
 804803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048040:	4770      	bx	lr

08048042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8048042:	b480      	push	{r7}
 8048044:	b083      	sub	sp, #12
 8048046:	af00      	add	r7, sp, #0
 8048048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804804a:	bf00      	nop
 804804c:	370c      	adds	r7, #12
 804804e:	46bd      	mov	sp, r7
 8048050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048054:	4770      	bx	lr

08048056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8048056:	b480      	push	{r7}
 8048058:	b083      	sub	sp, #12
 804805a:	af00      	add	r7, sp, #0
 804805c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804805e:	bf00      	nop
 8048060:	370c      	adds	r7, #12
 8048062:	46bd      	mov	sp, r7
 8048064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048068:	4770      	bx	lr
	...

0804806c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 804806c:	b480      	push	{r7}
 804806e:	b085      	sub	sp, #20
 8048070:	af00      	add	r7, sp, #0
 8048072:	6078      	str	r0, [r7, #4]
 8048074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8048076:	687b      	ldr	r3, [r7, #4]
 8048078:	681b      	ldr	r3, [r3, #0]
 804807a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 804807c:	687b      	ldr	r3, [r7, #4]
 804807e:	4a40      	ldr	r2, [pc, #256]	; (8048180 <TIM_Base_SetConfig+0x114>)
 8048080:	4293      	cmp	r3, r2
 8048082:	d013      	beq.n	80480ac <TIM_Base_SetConfig+0x40>
 8048084:	687b      	ldr	r3, [r7, #4]
 8048086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804808a:	d00f      	beq.n	80480ac <TIM_Base_SetConfig+0x40>
 804808c:	687b      	ldr	r3, [r7, #4]
 804808e:	4a3d      	ldr	r2, [pc, #244]	; (8048184 <TIM_Base_SetConfig+0x118>)
 8048090:	4293      	cmp	r3, r2
 8048092:	d00b      	beq.n	80480ac <TIM_Base_SetConfig+0x40>
 8048094:	687b      	ldr	r3, [r7, #4]
 8048096:	4a3c      	ldr	r2, [pc, #240]	; (8048188 <TIM_Base_SetConfig+0x11c>)
 8048098:	4293      	cmp	r3, r2
 804809a:	d007      	beq.n	80480ac <TIM_Base_SetConfig+0x40>
 804809c:	687b      	ldr	r3, [r7, #4]
 804809e:	4a3b      	ldr	r2, [pc, #236]	; (804818c <TIM_Base_SetConfig+0x120>)
 80480a0:	4293      	cmp	r3, r2
 80480a2:	d003      	beq.n	80480ac <TIM_Base_SetConfig+0x40>
 80480a4:	687b      	ldr	r3, [r7, #4]
 80480a6:	4a3a      	ldr	r2, [pc, #232]	; (8048190 <TIM_Base_SetConfig+0x124>)
 80480a8:	4293      	cmp	r3, r2
 80480aa:	d108      	bne.n	80480be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80480ac:	68fb      	ldr	r3, [r7, #12]
 80480ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80480b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80480b4:	683b      	ldr	r3, [r7, #0]
 80480b6:	685b      	ldr	r3, [r3, #4]
 80480b8:	68fa      	ldr	r2, [r7, #12]
 80480ba:	4313      	orrs	r3, r2
 80480bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80480be:	687b      	ldr	r3, [r7, #4]
 80480c0:	4a2f      	ldr	r2, [pc, #188]	; (8048180 <TIM_Base_SetConfig+0x114>)
 80480c2:	4293      	cmp	r3, r2
 80480c4:	d02b      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480c6:	687b      	ldr	r3, [r7, #4]
 80480c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80480cc:	d027      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480ce:	687b      	ldr	r3, [r7, #4]
 80480d0:	4a2c      	ldr	r2, [pc, #176]	; (8048184 <TIM_Base_SetConfig+0x118>)
 80480d2:	4293      	cmp	r3, r2
 80480d4:	d023      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480d6:	687b      	ldr	r3, [r7, #4]
 80480d8:	4a2b      	ldr	r2, [pc, #172]	; (8048188 <TIM_Base_SetConfig+0x11c>)
 80480da:	4293      	cmp	r3, r2
 80480dc:	d01f      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480de:	687b      	ldr	r3, [r7, #4]
 80480e0:	4a2a      	ldr	r2, [pc, #168]	; (804818c <TIM_Base_SetConfig+0x120>)
 80480e2:	4293      	cmp	r3, r2
 80480e4:	d01b      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480e6:	687b      	ldr	r3, [r7, #4]
 80480e8:	4a29      	ldr	r2, [pc, #164]	; (8048190 <TIM_Base_SetConfig+0x124>)
 80480ea:	4293      	cmp	r3, r2
 80480ec:	d017      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480ee:	687b      	ldr	r3, [r7, #4]
 80480f0:	4a28      	ldr	r2, [pc, #160]	; (8048194 <TIM_Base_SetConfig+0x128>)
 80480f2:	4293      	cmp	r3, r2
 80480f4:	d013      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480f6:	687b      	ldr	r3, [r7, #4]
 80480f8:	4a27      	ldr	r2, [pc, #156]	; (8048198 <TIM_Base_SetConfig+0x12c>)
 80480fa:	4293      	cmp	r3, r2
 80480fc:	d00f      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 80480fe:	687b      	ldr	r3, [r7, #4]
 8048100:	4a26      	ldr	r2, [pc, #152]	; (804819c <TIM_Base_SetConfig+0x130>)
 8048102:	4293      	cmp	r3, r2
 8048104:	d00b      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 8048106:	687b      	ldr	r3, [r7, #4]
 8048108:	4a25      	ldr	r2, [pc, #148]	; (80481a0 <TIM_Base_SetConfig+0x134>)
 804810a:	4293      	cmp	r3, r2
 804810c:	d007      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 804810e:	687b      	ldr	r3, [r7, #4]
 8048110:	4a24      	ldr	r2, [pc, #144]	; (80481a4 <TIM_Base_SetConfig+0x138>)
 8048112:	4293      	cmp	r3, r2
 8048114:	d003      	beq.n	804811e <TIM_Base_SetConfig+0xb2>
 8048116:	687b      	ldr	r3, [r7, #4]
 8048118:	4a23      	ldr	r2, [pc, #140]	; (80481a8 <TIM_Base_SetConfig+0x13c>)
 804811a:	4293      	cmp	r3, r2
 804811c:	d108      	bne.n	8048130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804811e:	68fb      	ldr	r3, [r7, #12]
 8048120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8048126:	683b      	ldr	r3, [r7, #0]
 8048128:	68db      	ldr	r3, [r3, #12]
 804812a:	68fa      	ldr	r2, [r7, #12]
 804812c:	4313      	orrs	r3, r2
 804812e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048130:	68fb      	ldr	r3, [r7, #12]
 8048132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8048136:	683b      	ldr	r3, [r7, #0]
 8048138:	695b      	ldr	r3, [r3, #20]
 804813a:	4313      	orrs	r3, r2
 804813c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804813e:	687b      	ldr	r3, [r7, #4]
 8048140:	68fa      	ldr	r2, [r7, #12]
 8048142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8048144:	683b      	ldr	r3, [r7, #0]
 8048146:	689a      	ldr	r2, [r3, #8]
 8048148:	687b      	ldr	r3, [r7, #4]
 804814a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804814c:	683b      	ldr	r3, [r7, #0]
 804814e:	681a      	ldr	r2, [r3, #0]
 8048150:	687b      	ldr	r3, [r7, #4]
 8048152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8048154:	687b      	ldr	r3, [r7, #4]
 8048156:	4a0a      	ldr	r2, [pc, #40]	; (8048180 <TIM_Base_SetConfig+0x114>)
 8048158:	4293      	cmp	r3, r2
 804815a:	d003      	beq.n	8048164 <TIM_Base_SetConfig+0xf8>
 804815c:	687b      	ldr	r3, [r7, #4]
 804815e:	4a0c      	ldr	r2, [pc, #48]	; (8048190 <TIM_Base_SetConfig+0x124>)
 8048160:	4293      	cmp	r3, r2
 8048162:	d103      	bne.n	804816c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8048164:	683b      	ldr	r3, [r7, #0]
 8048166:	691a      	ldr	r2, [r3, #16]
 8048168:	687b      	ldr	r3, [r7, #4]
 804816a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 804816c:	687b      	ldr	r3, [r7, #4]
 804816e:	2201      	movs	r2, #1
 8048170:	615a      	str	r2, [r3, #20]
}
 8048172:	bf00      	nop
 8048174:	3714      	adds	r7, #20
 8048176:	46bd      	mov	sp, r7
 8048178:	f85d 7b04 	ldr.w	r7, [sp], #4
 804817c:	4770      	bx	lr
 804817e:	bf00      	nop
 8048180:	40010000 	.word	0x40010000
 8048184:	40000400 	.word	0x40000400
 8048188:	40000800 	.word	0x40000800
 804818c:	40000c00 	.word	0x40000c00
 8048190:	40010400 	.word	0x40010400
 8048194:	40014000 	.word	0x40014000
 8048198:	40014400 	.word	0x40014400
 804819c:	40014800 	.word	0x40014800
 80481a0:	40001800 	.word	0x40001800
 80481a4:	40001c00 	.word	0x40001c00
 80481a8:	40002000 	.word	0x40002000

080481ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80481ac:	b480      	push	{r7}
 80481ae:	b087      	sub	sp, #28
 80481b0:	af00      	add	r7, sp, #0
 80481b2:	6078      	str	r0, [r7, #4]
 80481b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80481b6:	687b      	ldr	r3, [r7, #4]
 80481b8:	6a1b      	ldr	r3, [r3, #32]
 80481ba:	f023 0201 	bic.w	r2, r3, #1
 80481be:	687b      	ldr	r3, [r7, #4]
 80481c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80481c2:	687b      	ldr	r3, [r7, #4]
 80481c4:	6a1b      	ldr	r3, [r3, #32]
 80481c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80481c8:	687b      	ldr	r3, [r7, #4]
 80481ca:	685b      	ldr	r3, [r3, #4]
 80481cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80481ce:	687b      	ldr	r3, [r7, #4]
 80481d0:	699b      	ldr	r3, [r3, #24]
 80481d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80481d4:	68fb      	ldr	r3, [r7, #12]
 80481d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80481da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80481dc:	68fb      	ldr	r3, [r7, #12]
 80481de:	f023 0303 	bic.w	r3, r3, #3
 80481e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80481e4:	683b      	ldr	r3, [r7, #0]
 80481e6:	681b      	ldr	r3, [r3, #0]
 80481e8:	68fa      	ldr	r2, [r7, #12]
 80481ea:	4313      	orrs	r3, r2
 80481ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80481ee:	697b      	ldr	r3, [r7, #20]
 80481f0:	f023 0302 	bic.w	r3, r3, #2
 80481f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80481f6:	683b      	ldr	r3, [r7, #0]
 80481f8:	689b      	ldr	r3, [r3, #8]
 80481fa:	697a      	ldr	r2, [r7, #20]
 80481fc:	4313      	orrs	r3, r2
 80481fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8048200:	687b      	ldr	r3, [r7, #4]
 8048202:	4a20      	ldr	r2, [pc, #128]	; (8048284 <TIM_OC1_SetConfig+0xd8>)
 8048204:	4293      	cmp	r3, r2
 8048206:	d003      	beq.n	8048210 <TIM_OC1_SetConfig+0x64>
 8048208:	687b      	ldr	r3, [r7, #4]
 804820a:	4a1f      	ldr	r2, [pc, #124]	; (8048288 <TIM_OC1_SetConfig+0xdc>)
 804820c:	4293      	cmp	r3, r2
 804820e:	d10c      	bne.n	804822a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8048210:	697b      	ldr	r3, [r7, #20]
 8048212:	f023 0308 	bic.w	r3, r3, #8
 8048216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8048218:	683b      	ldr	r3, [r7, #0]
 804821a:	68db      	ldr	r3, [r3, #12]
 804821c:	697a      	ldr	r2, [r7, #20]
 804821e:	4313      	orrs	r3, r2
 8048220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8048222:	697b      	ldr	r3, [r7, #20]
 8048224:	f023 0304 	bic.w	r3, r3, #4
 8048228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 804822a:	687b      	ldr	r3, [r7, #4]
 804822c:	4a15      	ldr	r2, [pc, #84]	; (8048284 <TIM_OC1_SetConfig+0xd8>)
 804822e:	4293      	cmp	r3, r2
 8048230:	d003      	beq.n	804823a <TIM_OC1_SetConfig+0x8e>
 8048232:	687b      	ldr	r3, [r7, #4]
 8048234:	4a14      	ldr	r2, [pc, #80]	; (8048288 <TIM_OC1_SetConfig+0xdc>)
 8048236:	4293      	cmp	r3, r2
 8048238:	d111      	bne.n	804825e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 804823a:	693b      	ldr	r3, [r7, #16]
 804823c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8048240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8048242:	693b      	ldr	r3, [r7, #16]
 8048244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8048248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 804824a:	683b      	ldr	r3, [r7, #0]
 804824c:	695b      	ldr	r3, [r3, #20]
 804824e:	693a      	ldr	r2, [r7, #16]
 8048250:	4313      	orrs	r3, r2
 8048252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8048254:	683b      	ldr	r3, [r7, #0]
 8048256:	699b      	ldr	r3, [r3, #24]
 8048258:	693a      	ldr	r2, [r7, #16]
 804825a:	4313      	orrs	r3, r2
 804825c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 804825e:	687b      	ldr	r3, [r7, #4]
 8048260:	693a      	ldr	r2, [r7, #16]
 8048262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8048264:	687b      	ldr	r3, [r7, #4]
 8048266:	68fa      	ldr	r2, [r7, #12]
 8048268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 804826a:	683b      	ldr	r3, [r7, #0]
 804826c:	685a      	ldr	r2, [r3, #4]
 804826e:	687b      	ldr	r3, [r7, #4]
 8048270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8048272:	687b      	ldr	r3, [r7, #4]
 8048274:	697a      	ldr	r2, [r7, #20]
 8048276:	621a      	str	r2, [r3, #32]
}
 8048278:	bf00      	nop
 804827a:	371c      	adds	r7, #28
 804827c:	46bd      	mov	sp, r7
 804827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048282:	4770      	bx	lr
 8048284:	40010000 	.word	0x40010000
 8048288:	40010400 	.word	0x40010400

0804828c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 804828c:	b480      	push	{r7}
 804828e:	b087      	sub	sp, #28
 8048290:	af00      	add	r7, sp, #0
 8048292:	6078      	str	r0, [r7, #4]
 8048294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8048296:	687b      	ldr	r3, [r7, #4]
 8048298:	6a1b      	ldr	r3, [r3, #32]
 804829a:	f023 0210 	bic.w	r2, r3, #16
 804829e:	687b      	ldr	r3, [r7, #4]
 80482a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80482a2:	687b      	ldr	r3, [r7, #4]
 80482a4:	6a1b      	ldr	r3, [r3, #32]
 80482a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80482a8:	687b      	ldr	r3, [r7, #4]
 80482aa:	685b      	ldr	r3, [r3, #4]
 80482ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80482ae:	687b      	ldr	r3, [r7, #4]
 80482b0:	699b      	ldr	r3, [r3, #24]
 80482b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80482b4:	68fb      	ldr	r3, [r7, #12]
 80482b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80482ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80482bc:	68fb      	ldr	r3, [r7, #12]
 80482be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80482c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80482c4:	683b      	ldr	r3, [r7, #0]
 80482c6:	681b      	ldr	r3, [r3, #0]
 80482c8:	021b      	lsls	r3, r3, #8
 80482ca:	68fa      	ldr	r2, [r7, #12]
 80482cc:	4313      	orrs	r3, r2
 80482ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80482d0:	697b      	ldr	r3, [r7, #20]
 80482d2:	f023 0320 	bic.w	r3, r3, #32
 80482d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80482d8:	683b      	ldr	r3, [r7, #0]
 80482da:	689b      	ldr	r3, [r3, #8]
 80482dc:	011b      	lsls	r3, r3, #4
 80482de:	697a      	ldr	r2, [r7, #20]
 80482e0:	4313      	orrs	r3, r2
 80482e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80482e4:	687b      	ldr	r3, [r7, #4]
 80482e6:	4a22      	ldr	r2, [pc, #136]	; (8048370 <TIM_OC2_SetConfig+0xe4>)
 80482e8:	4293      	cmp	r3, r2
 80482ea:	d003      	beq.n	80482f4 <TIM_OC2_SetConfig+0x68>
 80482ec:	687b      	ldr	r3, [r7, #4]
 80482ee:	4a21      	ldr	r2, [pc, #132]	; (8048374 <TIM_OC2_SetConfig+0xe8>)
 80482f0:	4293      	cmp	r3, r2
 80482f2:	d10d      	bne.n	8048310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80482f4:	697b      	ldr	r3, [r7, #20]
 80482f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80482fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80482fc:	683b      	ldr	r3, [r7, #0]
 80482fe:	68db      	ldr	r3, [r3, #12]
 8048300:	011b      	lsls	r3, r3, #4
 8048302:	697a      	ldr	r2, [r7, #20]
 8048304:	4313      	orrs	r3, r2
 8048306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8048308:	697b      	ldr	r3, [r7, #20]
 804830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804830e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8048310:	687b      	ldr	r3, [r7, #4]
 8048312:	4a17      	ldr	r2, [pc, #92]	; (8048370 <TIM_OC2_SetConfig+0xe4>)
 8048314:	4293      	cmp	r3, r2
 8048316:	d003      	beq.n	8048320 <TIM_OC2_SetConfig+0x94>
 8048318:	687b      	ldr	r3, [r7, #4]
 804831a:	4a16      	ldr	r2, [pc, #88]	; (8048374 <TIM_OC2_SetConfig+0xe8>)
 804831c:	4293      	cmp	r3, r2
 804831e:	d113      	bne.n	8048348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8048320:	693b      	ldr	r3, [r7, #16]
 8048322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8048326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8048328:	693b      	ldr	r3, [r7, #16]
 804832a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804832e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8048330:	683b      	ldr	r3, [r7, #0]
 8048332:	695b      	ldr	r3, [r3, #20]
 8048334:	009b      	lsls	r3, r3, #2
 8048336:	693a      	ldr	r2, [r7, #16]
 8048338:	4313      	orrs	r3, r2
 804833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 804833c:	683b      	ldr	r3, [r7, #0]
 804833e:	699b      	ldr	r3, [r3, #24]
 8048340:	009b      	lsls	r3, r3, #2
 8048342:	693a      	ldr	r2, [r7, #16]
 8048344:	4313      	orrs	r3, r2
 8048346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8048348:	687b      	ldr	r3, [r7, #4]
 804834a:	693a      	ldr	r2, [r7, #16]
 804834c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 804834e:	687b      	ldr	r3, [r7, #4]
 8048350:	68fa      	ldr	r2, [r7, #12]
 8048352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8048354:	683b      	ldr	r3, [r7, #0]
 8048356:	685a      	ldr	r2, [r3, #4]
 8048358:	687b      	ldr	r3, [r7, #4]
 804835a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 804835c:	687b      	ldr	r3, [r7, #4]
 804835e:	697a      	ldr	r2, [r7, #20]
 8048360:	621a      	str	r2, [r3, #32]
}
 8048362:	bf00      	nop
 8048364:	371c      	adds	r7, #28
 8048366:	46bd      	mov	sp, r7
 8048368:	f85d 7b04 	ldr.w	r7, [sp], #4
 804836c:	4770      	bx	lr
 804836e:	bf00      	nop
 8048370:	40010000 	.word	0x40010000
 8048374:	40010400 	.word	0x40010400

08048378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8048378:	b480      	push	{r7}
 804837a:	b087      	sub	sp, #28
 804837c:	af00      	add	r7, sp, #0
 804837e:	6078      	str	r0, [r7, #4]
 8048380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8048382:	687b      	ldr	r3, [r7, #4]
 8048384:	6a1b      	ldr	r3, [r3, #32]
 8048386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 804838a:	687b      	ldr	r3, [r7, #4]
 804838c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 804838e:	687b      	ldr	r3, [r7, #4]
 8048390:	6a1b      	ldr	r3, [r3, #32]
 8048392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8048394:	687b      	ldr	r3, [r7, #4]
 8048396:	685b      	ldr	r3, [r3, #4]
 8048398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 804839a:	687b      	ldr	r3, [r7, #4]
 804839c:	69db      	ldr	r3, [r3, #28]
 804839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80483a0:	68fb      	ldr	r3, [r7, #12]
 80483a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80483a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80483a8:	68fb      	ldr	r3, [r7, #12]
 80483aa:	f023 0303 	bic.w	r3, r3, #3
 80483ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80483b0:	683b      	ldr	r3, [r7, #0]
 80483b2:	681b      	ldr	r3, [r3, #0]
 80483b4:	68fa      	ldr	r2, [r7, #12]
 80483b6:	4313      	orrs	r3, r2
 80483b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80483ba:	697b      	ldr	r3, [r7, #20]
 80483bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80483c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80483c2:	683b      	ldr	r3, [r7, #0]
 80483c4:	689b      	ldr	r3, [r3, #8]
 80483c6:	021b      	lsls	r3, r3, #8
 80483c8:	697a      	ldr	r2, [r7, #20]
 80483ca:	4313      	orrs	r3, r2
 80483cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80483ce:	687b      	ldr	r3, [r7, #4]
 80483d0:	4a21      	ldr	r2, [pc, #132]	; (8048458 <TIM_OC3_SetConfig+0xe0>)
 80483d2:	4293      	cmp	r3, r2
 80483d4:	d003      	beq.n	80483de <TIM_OC3_SetConfig+0x66>
 80483d6:	687b      	ldr	r3, [r7, #4]
 80483d8:	4a20      	ldr	r2, [pc, #128]	; (804845c <TIM_OC3_SetConfig+0xe4>)
 80483da:	4293      	cmp	r3, r2
 80483dc:	d10d      	bne.n	80483fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80483de:	697b      	ldr	r3, [r7, #20]
 80483e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80483e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80483e6:	683b      	ldr	r3, [r7, #0]
 80483e8:	68db      	ldr	r3, [r3, #12]
 80483ea:	021b      	lsls	r3, r3, #8
 80483ec:	697a      	ldr	r2, [r7, #20]
 80483ee:	4313      	orrs	r3, r2
 80483f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80483f2:	697b      	ldr	r3, [r7, #20]
 80483f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80483f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80483fa:	687b      	ldr	r3, [r7, #4]
 80483fc:	4a16      	ldr	r2, [pc, #88]	; (8048458 <TIM_OC3_SetConfig+0xe0>)
 80483fe:	4293      	cmp	r3, r2
 8048400:	d003      	beq.n	804840a <TIM_OC3_SetConfig+0x92>
 8048402:	687b      	ldr	r3, [r7, #4]
 8048404:	4a15      	ldr	r2, [pc, #84]	; (804845c <TIM_OC3_SetConfig+0xe4>)
 8048406:	4293      	cmp	r3, r2
 8048408:	d113      	bne.n	8048432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 804840a:	693b      	ldr	r3, [r7, #16]
 804840c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8048410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8048412:	693b      	ldr	r3, [r7, #16]
 8048414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8048418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 804841a:	683b      	ldr	r3, [r7, #0]
 804841c:	695b      	ldr	r3, [r3, #20]
 804841e:	011b      	lsls	r3, r3, #4
 8048420:	693a      	ldr	r2, [r7, #16]
 8048422:	4313      	orrs	r3, r2
 8048424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8048426:	683b      	ldr	r3, [r7, #0]
 8048428:	699b      	ldr	r3, [r3, #24]
 804842a:	011b      	lsls	r3, r3, #4
 804842c:	693a      	ldr	r2, [r7, #16]
 804842e:	4313      	orrs	r3, r2
 8048430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8048432:	687b      	ldr	r3, [r7, #4]
 8048434:	693a      	ldr	r2, [r7, #16]
 8048436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8048438:	687b      	ldr	r3, [r7, #4]
 804843a:	68fa      	ldr	r2, [r7, #12]
 804843c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 804843e:	683b      	ldr	r3, [r7, #0]
 8048440:	685a      	ldr	r2, [r3, #4]
 8048442:	687b      	ldr	r3, [r7, #4]
 8048444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8048446:	687b      	ldr	r3, [r7, #4]
 8048448:	697a      	ldr	r2, [r7, #20]
 804844a:	621a      	str	r2, [r3, #32]
}
 804844c:	bf00      	nop
 804844e:	371c      	adds	r7, #28
 8048450:	46bd      	mov	sp, r7
 8048452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048456:	4770      	bx	lr
 8048458:	40010000 	.word	0x40010000
 804845c:	40010400 	.word	0x40010400

08048460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8048460:	b480      	push	{r7}
 8048462:	b087      	sub	sp, #28
 8048464:	af00      	add	r7, sp, #0
 8048466:	6078      	str	r0, [r7, #4]
 8048468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 804846a:	687b      	ldr	r3, [r7, #4]
 804846c:	6a1b      	ldr	r3, [r3, #32]
 804846e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8048472:	687b      	ldr	r3, [r7, #4]
 8048474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8048476:	687b      	ldr	r3, [r7, #4]
 8048478:	6a1b      	ldr	r3, [r3, #32]
 804847a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 804847c:	687b      	ldr	r3, [r7, #4]
 804847e:	685b      	ldr	r3, [r3, #4]
 8048480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8048482:	687b      	ldr	r3, [r7, #4]
 8048484:	69db      	ldr	r3, [r3, #28]
 8048486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8048488:	68fb      	ldr	r3, [r7, #12]
 804848a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 804848e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8048490:	68fb      	ldr	r3, [r7, #12]
 8048492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8048498:	683b      	ldr	r3, [r7, #0]
 804849a:	681b      	ldr	r3, [r3, #0]
 804849c:	021b      	lsls	r3, r3, #8
 804849e:	68fa      	ldr	r2, [r7, #12]
 80484a0:	4313      	orrs	r3, r2
 80484a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80484a4:	693b      	ldr	r3, [r7, #16]
 80484a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80484aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80484ac:	683b      	ldr	r3, [r7, #0]
 80484ae:	689b      	ldr	r3, [r3, #8]
 80484b0:	031b      	lsls	r3, r3, #12
 80484b2:	693a      	ldr	r2, [r7, #16]
 80484b4:	4313      	orrs	r3, r2
 80484b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80484b8:	687b      	ldr	r3, [r7, #4]
 80484ba:	4a12      	ldr	r2, [pc, #72]	; (8048504 <TIM_OC4_SetConfig+0xa4>)
 80484bc:	4293      	cmp	r3, r2
 80484be:	d003      	beq.n	80484c8 <TIM_OC4_SetConfig+0x68>
 80484c0:	687b      	ldr	r3, [r7, #4]
 80484c2:	4a11      	ldr	r2, [pc, #68]	; (8048508 <TIM_OC4_SetConfig+0xa8>)
 80484c4:	4293      	cmp	r3, r2
 80484c6:	d109      	bne.n	80484dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80484c8:	697b      	ldr	r3, [r7, #20]
 80484ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80484ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80484d0:	683b      	ldr	r3, [r7, #0]
 80484d2:	695b      	ldr	r3, [r3, #20]
 80484d4:	019b      	lsls	r3, r3, #6
 80484d6:	697a      	ldr	r2, [r7, #20]
 80484d8:	4313      	orrs	r3, r2
 80484da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80484dc:	687b      	ldr	r3, [r7, #4]
 80484de:	697a      	ldr	r2, [r7, #20]
 80484e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80484e2:	687b      	ldr	r3, [r7, #4]
 80484e4:	68fa      	ldr	r2, [r7, #12]
 80484e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80484e8:	683b      	ldr	r3, [r7, #0]
 80484ea:	685a      	ldr	r2, [r3, #4]
 80484ec:	687b      	ldr	r3, [r7, #4]
 80484ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80484f0:	687b      	ldr	r3, [r7, #4]
 80484f2:	693a      	ldr	r2, [r7, #16]
 80484f4:	621a      	str	r2, [r3, #32]
}
 80484f6:	bf00      	nop
 80484f8:	371c      	adds	r7, #28
 80484fa:	46bd      	mov	sp, r7
 80484fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048500:	4770      	bx	lr
 8048502:	bf00      	nop
 8048504:	40010000 	.word	0x40010000
 8048508:	40010400 	.word	0x40010400

0804850c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 804850c:	b480      	push	{r7}
 804850e:	b087      	sub	sp, #28
 8048510:	af00      	add	r7, sp, #0
 8048512:	60f8      	str	r0, [r7, #12]
 8048514:	60b9      	str	r1, [r7, #8]
 8048516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8048518:	68fb      	ldr	r3, [r7, #12]
 804851a:	6a1b      	ldr	r3, [r3, #32]
 804851c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 804851e:	68fb      	ldr	r3, [r7, #12]
 8048520:	6a1b      	ldr	r3, [r3, #32]
 8048522:	f023 0201 	bic.w	r2, r3, #1
 8048526:	68fb      	ldr	r3, [r7, #12]
 8048528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804852a:	68fb      	ldr	r3, [r7, #12]
 804852c:	699b      	ldr	r3, [r3, #24]
 804852e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8048530:	693b      	ldr	r3, [r7, #16]
 8048532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8048536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8048538:	687b      	ldr	r3, [r7, #4]
 804853a:	011b      	lsls	r3, r3, #4
 804853c:	693a      	ldr	r2, [r7, #16]
 804853e:	4313      	orrs	r3, r2
 8048540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8048542:	697b      	ldr	r3, [r7, #20]
 8048544:	f023 030a 	bic.w	r3, r3, #10
 8048548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 804854a:	697a      	ldr	r2, [r7, #20]
 804854c:	68bb      	ldr	r3, [r7, #8]
 804854e:	4313      	orrs	r3, r2
 8048550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8048552:	68fb      	ldr	r3, [r7, #12]
 8048554:	693a      	ldr	r2, [r7, #16]
 8048556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048558:	68fb      	ldr	r3, [r7, #12]
 804855a:	697a      	ldr	r2, [r7, #20]
 804855c:	621a      	str	r2, [r3, #32]
}
 804855e:	bf00      	nop
 8048560:	371c      	adds	r7, #28
 8048562:	46bd      	mov	sp, r7
 8048564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048568:	4770      	bx	lr

0804856a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 804856a:	b480      	push	{r7}
 804856c:	b087      	sub	sp, #28
 804856e:	af00      	add	r7, sp, #0
 8048570:	60f8      	str	r0, [r7, #12]
 8048572:	60b9      	str	r1, [r7, #8]
 8048574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8048576:	68fb      	ldr	r3, [r7, #12]
 8048578:	6a1b      	ldr	r3, [r3, #32]
 804857a:	f023 0210 	bic.w	r2, r3, #16
 804857e:	68fb      	ldr	r3, [r7, #12]
 8048580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048582:	68fb      	ldr	r3, [r7, #12]
 8048584:	699b      	ldr	r3, [r3, #24]
 8048586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8048588:	68fb      	ldr	r3, [r7, #12]
 804858a:	6a1b      	ldr	r3, [r3, #32]
 804858c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 804858e:	697b      	ldr	r3, [r7, #20]
 8048590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8048596:	687b      	ldr	r3, [r7, #4]
 8048598:	031b      	lsls	r3, r3, #12
 804859a:	697a      	ldr	r2, [r7, #20]
 804859c:	4313      	orrs	r3, r2
 804859e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80485a0:	693b      	ldr	r3, [r7, #16]
 80485a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80485a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80485a8:	68bb      	ldr	r3, [r7, #8]
 80485aa:	011b      	lsls	r3, r3, #4
 80485ac:	693a      	ldr	r2, [r7, #16]
 80485ae:	4313      	orrs	r3, r2
 80485b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80485b2:	68fb      	ldr	r3, [r7, #12]
 80485b4:	697a      	ldr	r2, [r7, #20]
 80485b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80485b8:	68fb      	ldr	r3, [r7, #12]
 80485ba:	693a      	ldr	r2, [r7, #16]
 80485bc:	621a      	str	r2, [r3, #32]
}
 80485be:	bf00      	nop
 80485c0:	371c      	adds	r7, #28
 80485c2:	46bd      	mov	sp, r7
 80485c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485c8:	4770      	bx	lr

080485ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80485ca:	b480      	push	{r7}
 80485cc:	b085      	sub	sp, #20
 80485ce:	af00      	add	r7, sp, #0
 80485d0:	6078      	str	r0, [r7, #4]
 80485d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80485d4:	687b      	ldr	r3, [r7, #4]
 80485d6:	689b      	ldr	r3, [r3, #8]
 80485d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80485da:	68fb      	ldr	r3, [r7, #12]
 80485dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80485e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80485e2:	683a      	ldr	r2, [r7, #0]
 80485e4:	68fb      	ldr	r3, [r7, #12]
 80485e6:	4313      	orrs	r3, r2
 80485e8:	f043 0307 	orr.w	r3, r3, #7
 80485ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	68fa      	ldr	r2, [r7, #12]
 80485f2:	609a      	str	r2, [r3, #8]
}
 80485f4:	bf00      	nop
 80485f6:	3714      	adds	r7, #20
 80485f8:	46bd      	mov	sp, r7
 80485fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485fe:	4770      	bx	lr

08048600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8048600:	b480      	push	{r7}
 8048602:	b087      	sub	sp, #28
 8048604:	af00      	add	r7, sp, #0
 8048606:	60f8      	str	r0, [r7, #12]
 8048608:	60b9      	str	r1, [r7, #8]
 804860a:	607a      	str	r2, [r7, #4]
 804860c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804860e:	68fb      	ldr	r3, [r7, #12]
 8048610:	689b      	ldr	r3, [r3, #8]
 8048612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048614:	697b      	ldr	r3, [r7, #20]
 8048616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 804861a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 804861c:	683b      	ldr	r3, [r7, #0]
 804861e:	021a      	lsls	r2, r3, #8
 8048620:	687b      	ldr	r3, [r7, #4]
 8048622:	431a      	orrs	r2, r3
 8048624:	68bb      	ldr	r3, [r7, #8]
 8048626:	4313      	orrs	r3, r2
 8048628:	697a      	ldr	r2, [r7, #20]
 804862a:	4313      	orrs	r3, r2
 804862c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804862e:	68fb      	ldr	r3, [r7, #12]
 8048630:	697a      	ldr	r2, [r7, #20]
 8048632:	609a      	str	r2, [r3, #8]
}
 8048634:	bf00      	nop
 8048636:	371c      	adds	r7, #28
 8048638:	46bd      	mov	sp, r7
 804863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804863e:	4770      	bx	lr

08048640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8048640:	b480      	push	{r7}
 8048642:	b087      	sub	sp, #28
 8048644:	af00      	add	r7, sp, #0
 8048646:	60f8      	str	r0, [r7, #12]
 8048648:	60b9      	str	r1, [r7, #8]
 804864a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 804864c:	68bb      	ldr	r3, [r7, #8]
 804864e:	f003 031f 	and.w	r3, r3, #31
 8048652:	2201      	movs	r2, #1
 8048654:	fa02 f303 	lsl.w	r3, r2, r3
 8048658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 804865a:	68fb      	ldr	r3, [r7, #12]
 804865c:	6a1a      	ldr	r2, [r3, #32]
 804865e:	697b      	ldr	r3, [r7, #20]
 8048660:	43db      	mvns	r3, r3
 8048662:	401a      	ands	r2, r3
 8048664:	68fb      	ldr	r3, [r7, #12]
 8048666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8048668:	68fb      	ldr	r3, [r7, #12]
 804866a:	6a1a      	ldr	r2, [r3, #32]
 804866c:	68bb      	ldr	r3, [r7, #8]
 804866e:	f003 031f 	and.w	r3, r3, #31
 8048672:	6879      	ldr	r1, [r7, #4]
 8048674:	fa01 f303 	lsl.w	r3, r1, r3
 8048678:	431a      	orrs	r2, r3
 804867a:	68fb      	ldr	r3, [r7, #12]
 804867c:	621a      	str	r2, [r3, #32]
}
 804867e:	bf00      	nop
 8048680:	371c      	adds	r7, #28
 8048682:	46bd      	mov	sp, r7
 8048684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048688:	4770      	bx	lr
	...

0804868c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 804868c:	b480      	push	{r7}
 804868e:	b085      	sub	sp, #20
 8048690:	af00      	add	r7, sp, #0
 8048692:	6078      	str	r0, [r7, #4]
 8048694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8048696:	687b      	ldr	r3, [r7, #4]
 8048698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804869c:	2b01      	cmp	r3, #1
 804869e:	d101      	bne.n	80486a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80486a0:	2302      	movs	r3, #2
 80486a2:	e05a      	b.n	804875a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80486a4:	687b      	ldr	r3, [r7, #4]
 80486a6:	2201      	movs	r2, #1
 80486a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80486ac:	687b      	ldr	r3, [r7, #4]
 80486ae:	2202      	movs	r2, #2
 80486b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80486b4:	687b      	ldr	r3, [r7, #4]
 80486b6:	681b      	ldr	r3, [r3, #0]
 80486b8:	685b      	ldr	r3, [r3, #4]
 80486ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80486bc:	687b      	ldr	r3, [r7, #4]
 80486be:	681b      	ldr	r3, [r3, #0]
 80486c0:	689b      	ldr	r3, [r3, #8]
 80486c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80486c4:	68fb      	ldr	r3, [r7, #12]
 80486c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80486ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80486cc:	683b      	ldr	r3, [r7, #0]
 80486ce:	681b      	ldr	r3, [r3, #0]
 80486d0:	68fa      	ldr	r2, [r7, #12]
 80486d2:	4313      	orrs	r3, r2
 80486d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80486d6:	687b      	ldr	r3, [r7, #4]
 80486d8:	681b      	ldr	r3, [r3, #0]
 80486da:	68fa      	ldr	r2, [r7, #12]
 80486dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80486de:	687b      	ldr	r3, [r7, #4]
 80486e0:	681b      	ldr	r3, [r3, #0]
 80486e2:	4a21      	ldr	r2, [pc, #132]	; (8048768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80486e4:	4293      	cmp	r3, r2
 80486e6:	d022      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80486e8:	687b      	ldr	r3, [r7, #4]
 80486ea:	681b      	ldr	r3, [r3, #0]
 80486ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80486f0:	d01d      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80486f2:	687b      	ldr	r3, [r7, #4]
 80486f4:	681b      	ldr	r3, [r3, #0]
 80486f6:	4a1d      	ldr	r2, [pc, #116]	; (804876c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80486f8:	4293      	cmp	r3, r2
 80486fa:	d018      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80486fc:	687b      	ldr	r3, [r7, #4]
 80486fe:	681b      	ldr	r3, [r3, #0]
 8048700:	4a1b      	ldr	r2, [pc, #108]	; (8048770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8048702:	4293      	cmp	r3, r2
 8048704:	d013      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048706:	687b      	ldr	r3, [r7, #4]
 8048708:	681b      	ldr	r3, [r3, #0]
 804870a:	4a1a      	ldr	r2, [pc, #104]	; (8048774 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 804870c:	4293      	cmp	r3, r2
 804870e:	d00e      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048710:	687b      	ldr	r3, [r7, #4]
 8048712:	681b      	ldr	r3, [r3, #0]
 8048714:	4a18      	ldr	r2, [pc, #96]	; (8048778 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048716:	4293      	cmp	r3, r2
 8048718:	d009      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804871a:	687b      	ldr	r3, [r7, #4]
 804871c:	681b      	ldr	r3, [r3, #0]
 804871e:	4a17      	ldr	r2, [pc, #92]	; (804877c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048720:	4293      	cmp	r3, r2
 8048722:	d004      	beq.n	804872e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048724:	687b      	ldr	r3, [r7, #4]
 8048726:	681b      	ldr	r3, [r3, #0]
 8048728:	4a15      	ldr	r2, [pc, #84]	; (8048780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 804872a:	4293      	cmp	r3, r2
 804872c:	d10c      	bne.n	8048748 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804872e:	68bb      	ldr	r3, [r7, #8]
 8048730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048736:	683b      	ldr	r3, [r7, #0]
 8048738:	685b      	ldr	r3, [r3, #4]
 804873a:	68ba      	ldr	r2, [r7, #8]
 804873c:	4313      	orrs	r3, r2
 804873e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8048740:	687b      	ldr	r3, [r7, #4]
 8048742:	681b      	ldr	r3, [r3, #0]
 8048744:	68ba      	ldr	r2, [r7, #8]
 8048746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048748:	687b      	ldr	r3, [r7, #4]
 804874a:	2201      	movs	r2, #1
 804874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048750:	687b      	ldr	r3, [r7, #4]
 8048752:	2200      	movs	r2, #0
 8048754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048758:	2300      	movs	r3, #0
}
 804875a:	4618      	mov	r0, r3
 804875c:	3714      	adds	r7, #20
 804875e:	46bd      	mov	sp, r7
 8048760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048764:	4770      	bx	lr
 8048766:	bf00      	nop
 8048768:	40010000 	.word	0x40010000
 804876c:	40000400 	.word	0x40000400
 8048770:	40000800 	.word	0x40000800
 8048774:	40000c00 	.word	0x40000c00
 8048778:	40010400 	.word	0x40010400
 804877c:	40014000 	.word	0x40014000
 8048780:	40001800 	.word	0x40001800

08048784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048784:	b480      	push	{r7}
 8048786:	b083      	sub	sp, #12
 8048788:	af00      	add	r7, sp, #0
 804878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 804878c:	bf00      	nop
 804878e:	370c      	adds	r7, #12
 8048790:	46bd      	mov	sp, r7
 8048792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048796:	4770      	bx	lr

08048798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048798:	b480      	push	{r7}
 804879a:	b083      	sub	sp, #12
 804879c:	af00      	add	r7, sp, #0
 804879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80487a0:	bf00      	nop
 80487a2:	370c      	adds	r7, #12
 80487a4:	46bd      	mov	sp, r7
 80487a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80487aa:	4770      	bx	lr

080487ac <arm_pid_reset_f32>:
 80487ac:	2300      	movs	r3, #0
 80487ae:	7303      	strb	r3, [r0, #12]
 80487b0:	7343      	strb	r3, [r0, #13]
 80487b2:	7383      	strb	r3, [r0, #14]
 80487b4:	73c3      	strb	r3, [r0, #15]
 80487b6:	7403      	strb	r3, [r0, #16]
 80487b8:	7443      	strb	r3, [r0, #17]
 80487ba:	7483      	strb	r3, [r0, #18]
 80487bc:	74c3      	strb	r3, [r0, #19]
 80487be:	7503      	strb	r3, [r0, #20]
 80487c0:	7543      	strb	r3, [r0, #21]
 80487c2:	7583      	strb	r3, [r0, #22]
 80487c4:	75c3      	strb	r3, [r0, #23]
 80487c6:	4770      	bx	lr

080487c8 <arm_pid_init_f32>:
 80487c8:	edd0 6a08 	vldr	s13, [r0, #32]
 80487cc:	edd0 7a06 	vldr	s15, [r0, #24]
 80487d0:	ed90 7a07 	vldr	s14, [r0, #28]
 80487d4:	edc0 6a02 	vstr	s13, [r0, #8]
 80487d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80487dc:	ee36 6aa6 	vadd.f32	s12, s13, s13
 80487e0:	eef1 7a67 	vneg.f32	s15, s15
 80487e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80487e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80487ec:	ed80 7a00 	vstr	s14, [r0]
 80487f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80487f4:	b161      	cbz	r1, 8048810 <arm_pid_init_f32+0x48>
 80487f6:	2300      	movs	r3, #0
 80487f8:	7303      	strb	r3, [r0, #12]
 80487fa:	7343      	strb	r3, [r0, #13]
 80487fc:	7383      	strb	r3, [r0, #14]
 80487fe:	73c3      	strb	r3, [r0, #15]
 8048800:	7403      	strb	r3, [r0, #16]
 8048802:	7443      	strb	r3, [r0, #17]
 8048804:	7483      	strb	r3, [r0, #18]
 8048806:	74c3      	strb	r3, [r0, #19]
 8048808:	7503      	strb	r3, [r0, #20]
 804880a:	7543      	strb	r3, [r0, #21]
 804880c:	7583      	strb	r3, [r0, #22]
 804880e:	75c3      	strb	r3, [r0, #23]
 8048810:	4770      	bx	lr
 8048812:	bf00      	nop

08048814 <__errno>:
 8048814:	4b01      	ldr	r3, [pc, #4]	; (804881c <__errno+0x8>)
 8048816:	6818      	ldr	r0, [r3, #0]
 8048818:	4770      	bx	lr
 804881a:	bf00      	nop
 804881c:	20000014 	.word	0x20000014

08048820 <__libc_init_array>:
 8048820:	b570      	push	{r4, r5, r6, lr}
 8048822:	4d0d      	ldr	r5, [pc, #52]	; (8048858 <__libc_init_array+0x38>)
 8048824:	4c0d      	ldr	r4, [pc, #52]	; (804885c <__libc_init_array+0x3c>)
 8048826:	1b64      	subs	r4, r4, r5
 8048828:	10a4      	asrs	r4, r4, #2
 804882a:	2600      	movs	r6, #0
 804882c:	42a6      	cmp	r6, r4
 804882e:	d109      	bne.n	8048844 <__libc_init_array+0x24>
 8048830:	4d0b      	ldr	r5, [pc, #44]	; (8048860 <__libc_init_array+0x40>)
 8048832:	4c0c      	ldr	r4, [pc, #48]	; (8048864 <__libc_init_array+0x44>)
 8048834:	f005 fbee 	bl	804e014 <_init>
 8048838:	1b64      	subs	r4, r4, r5
 804883a:	10a4      	asrs	r4, r4, #2
 804883c:	2600      	movs	r6, #0
 804883e:	42a6      	cmp	r6, r4
 8048840:	d105      	bne.n	804884e <__libc_init_array+0x2e>
 8048842:	bd70      	pop	{r4, r5, r6, pc}
 8048844:	f855 3b04 	ldr.w	r3, [r5], #4
 8048848:	4798      	blx	r3
 804884a:	3601      	adds	r6, #1
 804884c:	e7ee      	b.n	804882c <__libc_init_array+0xc>
 804884e:	f855 3b04 	ldr.w	r3, [r5], #4
 8048852:	4798      	blx	r3
 8048854:	3601      	adds	r6, #1
 8048856:	e7f2      	b.n	804883e <__libc_init_array+0x1e>
 8048858:	0804e6e8 	.word	0x0804e6e8
 804885c:	0804e6e8 	.word	0x0804e6e8
 8048860:	0804e6e8 	.word	0x0804e6e8
 8048864:	0804e6ec 	.word	0x0804e6ec

08048868 <memcpy>:
 8048868:	440a      	add	r2, r1
 804886a:	4291      	cmp	r1, r2
 804886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8048870:	d100      	bne.n	8048874 <memcpy+0xc>
 8048872:	4770      	bx	lr
 8048874:	b510      	push	{r4, lr}
 8048876:	f811 4b01 	ldrb.w	r4, [r1], #1
 804887a:	f803 4f01 	strb.w	r4, [r3, #1]!
 804887e:	4291      	cmp	r1, r2
 8048880:	d1f9      	bne.n	8048876 <memcpy+0xe>
 8048882:	bd10      	pop	{r4, pc}

08048884 <memset>:
 8048884:	4402      	add	r2, r0
 8048886:	4603      	mov	r3, r0
 8048888:	4293      	cmp	r3, r2
 804888a:	d100      	bne.n	804888e <memset+0xa>
 804888c:	4770      	bx	lr
 804888e:	f803 1b01 	strb.w	r1, [r3], #1
 8048892:	e7f9      	b.n	8048888 <memset+0x4>

08048894 <__cvt>:
 8048894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8048898:	ec55 4b10 	vmov	r4, r5, d0
 804889c:	2d00      	cmp	r5, #0
 804889e:	460e      	mov	r6, r1
 80488a0:	4619      	mov	r1, r3
 80488a2:	462b      	mov	r3, r5
 80488a4:	bfbb      	ittet	lt
 80488a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80488aa:	461d      	movlt	r5, r3
 80488ac:	2300      	movge	r3, #0
 80488ae:	232d      	movlt	r3, #45	; 0x2d
 80488b0:	700b      	strb	r3, [r1, #0]
 80488b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80488b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80488b8:	4691      	mov	r9, r2
 80488ba:	f023 0820 	bic.w	r8, r3, #32
 80488be:	bfbc      	itt	lt
 80488c0:	4622      	movlt	r2, r4
 80488c2:	4614      	movlt	r4, r2
 80488c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80488c8:	d005      	beq.n	80488d6 <__cvt+0x42>
 80488ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80488ce:	d100      	bne.n	80488d2 <__cvt+0x3e>
 80488d0:	3601      	adds	r6, #1
 80488d2:	2102      	movs	r1, #2
 80488d4:	e000      	b.n	80488d8 <__cvt+0x44>
 80488d6:	2103      	movs	r1, #3
 80488d8:	ab03      	add	r3, sp, #12
 80488da:	9301      	str	r3, [sp, #4]
 80488dc:	ab02      	add	r3, sp, #8
 80488de:	9300      	str	r3, [sp, #0]
 80488e0:	ec45 4b10 	vmov	d0, r4, r5
 80488e4:	4653      	mov	r3, sl
 80488e6:	4632      	mov	r2, r6
 80488e8:	f001 fdf2 	bl	804a4d0 <_dtoa_r>
 80488ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80488f0:	4607      	mov	r7, r0
 80488f2:	d102      	bne.n	80488fa <__cvt+0x66>
 80488f4:	f019 0f01 	tst.w	r9, #1
 80488f8:	d022      	beq.n	8048940 <__cvt+0xac>
 80488fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80488fe:	eb07 0906 	add.w	r9, r7, r6
 8048902:	d110      	bne.n	8048926 <__cvt+0x92>
 8048904:	783b      	ldrb	r3, [r7, #0]
 8048906:	2b30      	cmp	r3, #48	; 0x30
 8048908:	d10a      	bne.n	8048920 <__cvt+0x8c>
 804890a:	2200      	movs	r2, #0
 804890c:	2300      	movs	r3, #0
 804890e:	4620      	mov	r0, r4
 8048910:	4629      	mov	r1, r5
 8048912:	f7f8 f8d9 	bl	8040ac8 <__aeabi_dcmpeq>
 8048916:	b918      	cbnz	r0, 8048920 <__cvt+0x8c>
 8048918:	f1c6 0601 	rsb	r6, r6, #1
 804891c:	f8ca 6000 	str.w	r6, [sl]
 8048920:	f8da 3000 	ldr.w	r3, [sl]
 8048924:	4499      	add	r9, r3
 8048926:	2200      	movs	r2, #0
 8048928:	2300      	movs	r3, #0
 804892a:	4620      	mov	r0, r4
 804892c:	4629      	mov	r1, r5
 804892e:	f7f8 f8cb 	bl	8040ac8 <__aeabi_dcmpeq>
 8048932:	b108      	cbz	r0, 8048938 <__cvt+0xa4>
 8048934:	f8cd 900c 	str.w	r9, [sp, #12]
 8048938:	2230      	movs	r2, #48	; 0x30
 804893a:	9b03      	ldr	r3, [sp, #12]
 804893c:	454b      	cmp	r3, r9
 804893e:	d307      	bcc.n	8048950 <__cvt+0xbc>
 8048940:	9b03      	ldr	r3, [sp, #12]
 8048942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8048944:	1bdb      	subs	r3, r3, r7
 8048946:	4638      	mov	r0, r7
 8048948:	6013      	str	r3, [r2, #0]
 804894a:	b004      	add	sp, #16
 804894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048950:	1c59      	adds	r1, r3, #1
 8048952:	9103      	str	r1, [sp, #12]
 8048954:	701a      	strb	r2, [r3, #0]
 8048956:	e7f0      	b.n	804893a <__cvt+0xa6>

08048958 <__exponent>:
 8048958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804895a:	4603      	mov	r3, r0
 804895c:	2900      	cmp	r1, #0
 804895e:	bfb8      	it	lt
 8048960:	4249      	neglt	r1, r1
 8048962:	f803 2b02 	strb.w	r2, [r3], #2
 8048966:	bfb4      	ite	lt
 8048968:	222d      	movlt	r2, #45	; 0x2d
 804896a:	222b      	movge	r2, #43	; 0x2b
 804896c:	2909      	cmp	r1, #9
 804896e:	7042      	strb	r2, [r0, #1]
 8048970:	dd2a      	ble.n	80489c8 <__exponent+0x70>
 8048972:	f10d 0407 	add.w	r4, sp, #7
 8048976:	46a4      	mov	ip, r4
 8048978:	270a      	movs	r7, #10
 804897a:	46a6      	mov	lr, r4
 804897c:	460a      	mov	r2, r1
 804897e:	fb91 f6f7 	sdiv	r6, r1, r7
 8048982:	fb07 1516 	mls	r5, r7, r6, r1
 8048986:	3530      	adds	r5, #48	; 0x30
 8048988:	2a63      	cmp	r2, #99	; 0x63
 804898a:	f104 34ff 	add.w	r4, r4, #4294967295
 804898e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8048992:	4631      	mov	r1, r6
 8048994:	dcf1      	bgt.n	804897a <__exponent+0x22>
 8048996:	3130      	adds	r1, #48	; 0x30
 8048998:	f1ae 0502 	sub.w	r5, lr, #2
 804899c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80489a0:	1c44      	adds	r4, r0, #1
 80489a2:	4629      	mov	r1, r5
 80489a4:	4561      	cmp	r1, ip
 80489a6:	d30a      	bcc.n	80489be <__exponent+0x66>
 80489a8:	f10d 0209 	add.w	r2, sp, #9
 80489ac:	eba2 020e 	sub.w	r2, r2, lr
 80489b0:	4565      	cmp	r5, ip
 80489b2:	bf88      	it	hi
 80489b4:	2200      	movhi	r2, #0
 80489b6:	4413      	add	r3, r2
 80489b8:	1a18      	subs	r0, r3, r0
 80489ba:	b003      	add	sp, #12
 80489bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80489be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80489c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80489c6:	e7ed      	b.n	80489a4 <__exponent+0x4c>
 80489c8:	2330      	movs	r3, #48	; 0x30
 80489ca:	3130      	adds	r1, #48	; 0x30
 80489cc:	7083      	strb	r3, [r0, #2]
 80489ce:	70c1      	strb	r1, [r0, #3]
 80489d0:	1d03      	adds	r3, r0, #4
 80489d2:	e7f1      	b.n	80489b8 <__exponent+0x60>

080489d4 <_printf_float>:
 80489d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80489d8:	ed2d 8b02 	vpush	{d8}
 80489dc:	b08d      	sub	sp, #52	; 0x34
 80489de:	460c      	mov	r4, r1
 80489e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80489e4:	4616      	mov	r6, r2
 80489e6:	461f      	mov	r7, r3
 80489e8:	4605      	mov	r5, r0
 80489ea:	f002 fecf 	bl	804b78c <_localeconv_r>
 80489ee:	f8d0 a000 	ldr.w	sl, [r0]
 80489f2:	4650      	mov	r0, sl
 80489f4:	f7f7 fbec 	bl	80401d0 <strlen>
 80489f8:	2300      	movs	r3, #0
 80489fa:	930a      	str	r3, [sp, #40]	; 0x28
 80489fc:	6823      	ldr	r3, [r4, #0]
 80489fe:	9305      	str	r3, [sp, #20]
 8048a00:	f8d8 3000 	ldr.w	r3, [r8]
 8048a04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8048a08:	3307      	adds	r3, #7
 8048a0a:	f023 0307 	bic.w	r3, r3, #7
 8048a0e:	f103 0208 	add.w	r2, r3, #8
 8048a12:	f8c8 2000 	str.w	r2, [r8]
 8048a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048a1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8048a1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8048a22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8048a26:	9307      	str	r3, [sp, #28]
 8048a28:	f8cd 8018 	str.w	r8, [sp, #24]
 8048a2c:	ee08 0a10 	vmov	s16, r0
 8048a30:	4b9f      	ldr	r3, [pc, #636]	; (8048cb0 <_printf_float+0x2dc>)
 8048a32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8048a36:	f04f 32ff 	mov.w	r2, #4294967295
 8048a3a:	f7f8 f877 	bl	8040b2c <__aeabi_dcmpun>
 8048a3e:	bb88      	cbnz	r0, 8048aa4 <_printf_float+0xd0>
 8048a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8048a44:	4b9a      	ldr	r3, [pc, #616]	; (8048cb0 <_printf_float+0x2dc>)
 8048a46:	f04f 32ff 	mov.w	r2, #4294967295
 8048a4a:	f7f8 f851 	bl	8040af0 <__aeabi_dcmple>
 8048a4e:	bb48      	cbnz	r0, 8048aa4 <_printf_float+0xd0>
 8048a50:	2200      	movs	r2, #0
 8048a52:	2300      	movs	r3, #0
 8048a54:	4640      	mov	r0, r8
 8048a56:	4649      	mov	r1, r9
 8048a58:	f7f8 f840 	bl	8040adc <__aeabi_dcmplt>
 8048a5c:	b110      	cbz	r0, 8048a64 <_printf_float+0x90>
 8048a5e:	232d      	movs	r3, #45	; 0x2d
 8048a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048a64:	4b93      	ldr	r3, [pc, #588]	; (8048cb4 <_printf_float+0x2e0>)
 8048a66:	4894      	ldr	r0, [pc, #592]	; (8048cb8 <_printf_float+0x2e4>)
 8048a68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8048a6c:	bf94      	ite	ls
 8048a6e:	4698      	movls	r8, r3
 8048a70:	4680      	movhi	r8, r0
 8048a72:	2303      	movs	r3, #3
 8048a74:	6123      	str	r3, [r4, #16]
 8048a76:	9b05      	ldr	r3, [sp, #20]
 8048a78:	f023 0204 	bic.w	r2, r3, #4
 8048a7c:	6022      	str	r2, [r4, #0]
 8048a7e:	f04f 0900 	mov.w	r9, #0
 8048a82:	9700      	str	r7, [sp, #0]
 8048a84:	4633      	mov	r3, r6
 8048a86:	aa0b      	add	r2, sp, #44	; 0x2c
 8048a88:	4621      	mov	r1, r4
 8048a8a:	4628      	mov	r0, r5
 8048a8c:	f000 f9d8 	bl	8048e40 <_printf_common>
 8048a90:	3001      	adds	r0, #1
 8048a92:	f040 8090 	bne.w	8048bb6 <_printf_float+0x1e2>
 8048a96:	f04f 30ff 	mov.w	r0, #4294967295
 8048a9a:	b00d      	add	sp, #52	; 0x34
 8048a9c:	ecbd 8b02 	vpop	{d8}
 8048aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048aa4:	4642      	mov	r2, r8
 8048aa6:	464b      	mov	r3, r9
 8048aa8:	4640      	mov	r0, r8
 8048aaa:	4649      	mov	r1, r9
 8048aac:	f7f8 f83e 	bl	8040b2c <__aeabi_dcmpun>
 8048ab0:	b140      	cbz	r0, 8048ac4 <_printf_float+0xf0>
 8048ab2:	464b      	mov	r3, r9
 8048ab4:	2b00      	cmp	r3, #0
 8048ab6:	bfbc      	itt	lt
 8048ab8:	232d      	movlt	r3, #45	; 0x2d
 8048aba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8048abe:	487f      	ldr	r0, [pc, #508]	; (8048cbc <_printf_float+0x2e8>)
 8048ac0:	4b7f      	ldr	r3, [pc, #508]	; (8048cc0 <_printf_float+0x2ec>)
 8048ac2:	e7d1      	b.n	8048a68 <_printf_float+0x94>
 8048ac4:	6863      	ldr	r3, [r4, #4]
 8048ac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8048aca:	9206      	str	r2, [sp, #24]
 8048acc:	1c5a      	adds	r2, r3, #1
 8048ace:	d13f      	bne.n	8048b50 <_printf_float+0x17c>
 8048ad0:	2306      	movs	r3, #6
 8048ad2:	6063      	str	r3, [r4, #4]
 8048ad4:	9b05      	ldr	r3, [sp, #20]
 8048ad6:	6861      	ldr	r1, [r4, #4]
 8048ad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8048adc:	2300      	movs	r3, #0
 8048ade:	9303      	str	r3, [sp, #12]
 8048ae0:	ab0a      	add	r3, sp, #40	; 0x28
 8048ae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8048ae6:	ab09      	add	r3, sp, #36	; 0x24
 8048ae8:	ec49 8b10 	vmov	d0, r8, r9
 8048aec:	9300      	str	r3, [sp, #0]
 8048aee:	6022      	str	r2, [r4, #0]
 8048af0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8048af4:	4628      	mov	r0, r5
 8048af6:	f7ff fecd 	bl	8048894 <__cvt>
 8048afa:	9b06      	ldr	r3, [sp, #24]
 8048afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048afe:	2b47      	cmp	r3, #71	; 0x47
 8048b00:	4680      	mov	r8, r0
 8048b02:	d108      	bne.n	8048b16 <_printf_float+0x142>
 8048b04:	1cc8      	adds	r0, r1, #3
 8048b06:	db02      	blt.n	8048b0e <_printf_float+0x13a>
 8048b08:	6863      	ldr	r3, [r4, #4]
 8048b0a:	4299      	cmp	r1, r3
 8048b0c:	dd41      	ble.n	8048b92 <_printf_float+0x1be>
 8048b0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8048b12:	fa5f fb8b 	uxtb.w	fp, fp
 8048b16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8048b1a:	d820      	bhi.n	8048b5e <_printf_float+0x18a>
 8048b1c:	3901      	subs	r1, #1
 8048b1e:	465a      	mov	r2, fp
 8048b20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8048b24:	9109      	str	r1, [sp, #36]	; 0x24
 8048b26:	f7ff ff17 	bl	8048958 <__exponent>
 8048b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048b2c:	1813      	adds	r3, r2, r0
 8048b2e:	2a01      	cmp	r2, #1
 8048b30:	4681      	mov	r9, r0
 8048b32:	6123      	str	r3, [r4, #16]
 8048b34:	dc02      	bgt.n	8048b3c <_printf_float+0x168>
 8048b36:	6822      	ldr	r2, [r4, #0]
 8048b38:	07d2      	lsls	r2, r2, #31
 8048b3a:	d501      	bpl.n	8048b40 <_printf_float+0x16c>
 8048b3c:	3301      	adds	r3, #1
 8048b3e:	6123      	str	r3, [r4, #16]
 8048b40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8048b44:	2b00      	cmp	r3, #0
 8048b46:	d09c      	beq.n	8048a82 <_printf_float+0xae>
 8048b48:	232d      	movs	r3, #45	; 0x2d
 8048b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048b4e:	e798      	b.n	8048a82 <_printf_float+0xae>
 8048b50:	9a06      	ldr	r2, [sp, #24]
 8048b52:	2a47      	cmp	r2, #71	; 0x47
 8048b54:	d1be      	bne.n	8048ad4 <_printf_float+0x100>
 8048b56:	2b00      	cmp	r3, #0
 8048b58:	d1bc      	bne.n	8048ad4 <_printf_float+0x100>
 8048b5a:	2301      	movs	r3, #1
 8048b5c:	e7b9      	b.n	8048ad2 <_printf_float+0xfe>
 8048b5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8048b62:	d118      	bne.n	8048b96 <_printf_float+0x1c2>
 8048b64:	2900      	cmp	r1, #0
 8048b66:	6863      	ldr	r3, [r4, #4]
 8048b68:	dd0b      	ble.n	8048b82 <_printf_float+0x1ae>
 8048b6a:	6121      	str	r1, [r4, #16]
 8048b6c:	b913      	cbnz	r3, 8048b74 <_printf_float+0x1a0>
 8048b6e:	6822      	ldr	r2, [r4, #0]
 8048b70:	07d0      	lsls	r0, r2, #31
 8048b72:	d502      	bpl.n	8048b7a <_printf_float+0x1a6>
 8048b74:	3301      	adds	r3, #1
 8048b76:	440b      	add	r3, r1
 8048b78:	6123      	str	r3, [r4, #16]
 8048b7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8048b7c:	f04f 0900 	mov.w	r9, #0
 8048b80:	e7de      	b.n	8048b40 <_printf_float+0x16c>
 8048b82:	b913      	cbnz	r3, 8048b8a <_printf_float+0x1b6>
 8048b84:	6822      	ldr	r2, [r4, #0]
 8048b86:	07d2      	lsls	r2, r2, #31
 8048b88:	d501      	bpl.n	8048b8e <_printf_float+0x1ba>
 8048b8a:	3302      	adds	r3, #2
 8048b8c:	e7f4      	b.n	8048b78 <_printf_float+0x1a4>
 8048b8e:	2301      	movs	r3, #1
 8048b90:	e7f2      	b.n	8048b78 <_printf_float+0x1a4>
 8048b92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8048b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048b98:	4299      	cmp	r1, r3
 8048b9a:	db05      	blt.n	8048ba8 <_printf_float+0x1d4>
 8048b9c:	6823      	ldr	r3, [r4, #0]
 8048b9e:	6121      	str	r1, [r4, #16]
 8048ba0:	07d8      	lsls	r0, r3, #31
 8048ba2:	d5ea      	bpl.n	8048b7a <_printf_float+0x1a6>
 8048ba4:	1c4b      	adds	r3, r1, #1
 8048ba6:	e7e7      	b.n	8048b78 <_printf_float+0x1a4>
 8048ba8:	2900      	cmp	r1, #0
 8048baa:	bfd4      	ite	le
 8048bac:	f1c1 0202 	rsble	r2, r1, #2
 8048bb0:	2201      	movgt	r2, #1
 8048bb2:	4413      	add	r3, r2
 8048bb4:	e7e0      	b.n	8048b78 <_printf_float+0x1a4>
 8048bb6:	6823      	ldr	r3, [r4, #0]
 8048bb8:	055a      	lsls	r2, r3, #21
 8048bba:	d407      	bmi.n	8048bcc <_printf_float+0x1f8>
 8048bbc:	6923      	ldr	r3, [r4, #16]
 8048bbe:	4642      	mov	r2, r8
 8048bc0:	4631      	mov	r1, r6
 8048bc2:	4628      	mov	r0, r5
 8048bc4:	47b8      	blx	r7
 8048bc6:	3001      	adds	r0, #1
 8048bc8:	d12c      	bne.n	8048c24 <_printf_float+0x250>
 8048bca:	e764      	b.n	8048a96 <_printf_float+0xc2>
 8048bcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8048bd0:	f240 80e0 	bls.w	8048d94 <_printf_float+0x3c0>
 8048bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8048bd8:	2200      	movs	r2, #0
 8048bda:	2300      	movs	r3, #0
 8048bdc:	f7f7 ff74 	bl	8040ac8 <__aeabi_dcmpeq>
 8048be0:	2800      	cmp	r0, #0
 8048be2:	d034      	beq.n	8048c4e <_printf_float+0x27a>
 8048be4:	4a37      	ldr	r2, [pc, #220]	; (8048cc4 <_printf_float+0x2f0>)
 8048be6:	2301      	movs	r3, #1
 8048be8:	4631      	mov	r1, r6
 8048bea:	4628      	mov	r0, r5
 8048bec:	47b8      	blx	r7
 8048bee:	3001      	adds	r0, #1
 8048bf0:	f43f af51 	beq.w	8048a96 <_printf_float+0xc2>
 8048bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048bf8:	429a      	cmp	r2, r3
 8048bfa:	db02      	blt.n	8048c02 <_printf_float+0x22e>
 8048bfc:	6823      	ldr	r3, [r4, #0]
 8048bfe:	07d8      	lsls	r0, r3, #31
 8048c00:	d510      	bpl.n	8048c24 <_printf_float+0x250>
 8048c02:	ee18 3a10 	vmov	r3, s16
 8048c06:	4652      	mov	r2, sl
 8048c08:	4631      	mov	r1, r6
 8048c0a:	4628      	mov	r0, r5
 8048c0c:	47b8      	blx	r7
 8048c0e:	3001      	adds	r0, #1
 8048c10:	f43f af41 	beq.w	8048a96 <_printf_float+0xc2>
 8048c14:	f04f 0800 	mov.w	r8, #0
 8048c18:	f104 091a 	add.w	r9, r4, #26
 8048c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048c1e:	3b01      	subs	r3, #1
 8048c20:	4543      	cmp	r3, r8
 8048c22:	dc09      	bgt.n	8048c38 <_printf_float+0x264>
 8048c24:	6823      	ldr	r3, [r4, #0]
 8048c26:	079b      	lsls	r3, r3, #30
 8048c28:	f100 8105 	bmi.w	8048e36 <_printf_float+0x462>
 8048c2c:	68e0      	ldr	r0, [r4, #12]
 8048c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048c30:	4298      	cmp	r0, r3
 8048c32:	bfb8      	it	lt
 8048c34:	4618      	movlt	r0, r3
 8048c36:	e730      	b.n	8048a9a <_printf_float+0xc6>
 8048c38:	2301      	movs	r3, #1
 8048c3a:	464a      	mov	r2, r9
 8048c3c:	4631      	mov	r1, r6
 8048c3e:	4628      	mov	r0, r5
 8048c40:	47b8      	blx	r7
 8048c42:	3001      	adds	r0, #1
 8048c44:	f43f af27 	beq.w	8048a96 <_printf_float+0xc2>
 8048c48:	f108 0801 	add.w	r8, r8, #1
 8048c4c:	e7e6      	b.n	8048c1c <_printf_float+0x248>
 8048c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048c50:	2b00      	cmp	r3, #0
 8048c52:	dc39      	bgt.n	8048cc8 <_printf_float+0x2f4>
 8048c54:	4a1b      	ldr	r2, [pc, #108]	; (8048cc4 <_printf_float+0x2f0>)
 8048c56:	2301      	movs	r3, #1
 8048c58:	4631      	mov	r1, r6
 8048c5a:	4628      	mov	r0, r5
 8048c5c:	47b8      	blx	r7
 8048c5e:	3001      	adds	r0, #1
 8048c60:	f43f af19 	beq.w	8048a96 <_printf_float+0xc2>
 8048c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048c68:	4313      	orrs	r3, r2
 8048c6a:	d102      	bne.n	8048c72 <_printf_float+0x29e>
 8048c6c:	6823      	ldr	r3, [r4, #0]
 8048c6e:	07d9      	lsls	r1, r3, #31
 8048c70:	d5d8      	bpl.n	8048c24 <_printf_float+0x250>
 8048c72:	ee18 3a10 	vmov	r3, s16
 8048c76:	4652      	mov	r2, sl
 8048c78:	4631      	mov	r1, r6
 8048c7a:	4628      	mov	r0, r5
 8048c7c:	47b8      	blx	r7
 8048c7e:	3001      	adds	r0, #1
 8048c80:	f43f af09 	beq.w	8048a96 <_printf_float+0xc2>
 8048c84:	f04f 0900 	mov.w	r9, #0
 8048c88:	f104 0a1a 	add.w	sl, r4, #26
 8048c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048c8e:	425b      	negs	r3, r3
 8048c90:	454b      	cmp	r3, r9
 8048c92:	dc01      	bgt.n	8048c98 <_printf_float+0x2c4>
 8048c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048c96:	e792      	b.n	8048bbe <_printf_float+0x1ea>
 8048c98:	2301      	movs	r3, #1
 8048c9a:	4652      	mov	r2, sl
 8048c9c:	4631      	mov	r1, r6
 8048c9e:	4628      	mov	r0, r5
 8048ca0:	47b8      	blx	r7
 8048ca2:	3001      	adds	r0, #1
 8048ca4:	f43f aef7 	beq.w	8048a96 <_printf_float+0xc2>
 8048ca8:	f109 0901 	add.w	r9, r9, #1
 8048cac:	e7ee      	b.n	8048c8c <_printf_float+0x2b8>
 8048cae:	bf00      	nop
 8048cb0:	7fefffff 	.word	0x7fefffff
 8048cb4:	0804e1e4 	.word	0x0804e1e4
 8048cb8:	0804e1e8 	.word	0x0804e1e8
 8048cbc:	0804e1f0 	.word	0x0804e1f0
 8048cc0:	0804e1ec 	.word	0x0804e1ec
 8048cc4:	0804e1f4 	.word	0x0804e1f4
 8048cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8048ccc:	429a      	cmp	r2, r3
 8048cce:	bfa8      	it	ge
 8048cd0:	461a      	movge	r2, r3
 8048cd2:	2a00      	cmp	r2, #0
 8048cd4:	4691      	mov	r9, r2
 8048cd6:	dc37      	bgt.n	8048d48 <_printf_float+0x374>
 8048cd8:	f04f 0b00 	mov.w	fp, #0
 8048cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8048ce0:	f104 021a 	add.w	r2, r4, #26
 8048ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8048ce6:	9305      	str	r3, [sp, #20]
 8048ce8:	eba3 0309 	sub.w	r3, r3, r9
 8048cec:	455b      	cmp	r3, fp
 8048cee:	dc33      	bgt.n	8048d58 <_printf_float+0x384>
 8048cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048cf4:	429a      	cmp	r2, r3
 8048cf6:	db3b      	blt.n	8048d70 <_printf_float+0x39c>
 8048cf8:	6823      	ldr	r3, [r4, #0]
 8048cfa:	07da      	lsls	r2, r3, #31
 8048cfc:	d438      	bmi.n	8048d70 <_printf_float+0x39c>
 8048cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048d00:	9a05      	ldr	r2, [sp, #20]
 8048d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048d04:	1a9a      	subs	r2, r3, r2
 8048d06:	eba3 0901 	sub.w	r9, r3, r1
 8048d0a:	4591      	cmp	r9, r2
 8048d0c:	bfa8      	it	ge
 8048d0e:	4691      	movge	r9, r2
 8048d10:	f1b9 0f00 	cmp.w	r9, #0
 8048d14:	dc35      	bgt.n	8048d82 <_printf_float+0x3ae>
 8048d16:	f04f 0800 	mov.w	r8, #0
 8048d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8048d1e:	f104 0a1a 	add.w	sl, r4, #26
 8048d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048d26:	1a9b      	subs	r3, r3, r2
 8048d28:	eba3 0309 	sub.w	r3, r3, r9
 8048d2c:	4543      	cmp	r3, r8
 8048d2e:	f77f af79 	ble.w	8048c24 <_printf_float+0x250>
 8048d32:	2301      	movs	r3, #1
 8048d34:	4652      	mov	r2, sl
 8048d36:	4631      	mov	r1, r6
 8048d38:	4628      	mov	r0, r5
 8048d3a:	47b8      	blx	r7
 8048d3c:	3001      	adds	r0, #1
 8048d3e:	f43f aeaa 	beq.w	8048a96 <_printf_float+0xc2>
 8048d42:	f108 0801 	add.w	r8, r8, #1
 8048d46:	e7ec      	b.n	8048d22 <_printf_float+0x34e>
 8048d48:	4613      	mov	r3, r2
 8048d4a:	4631      	mov	r1, r6
 8048d4c:	4642      	mov	r2, r8
 8048d4e:	4628      	mov	r0, r5
 8048d50:	47b8      	blx	r7
 8048d52:	3001      	adds	r0, #1
 8048d54:	d1c0      	bne.n	8048cd8 <_printf_float+0x304>
 8048d56:	e69e      	b.n	8048a96 <_printf_float+0xc2>
 8048d58:	2301      	movs	r3, #1
 8048d5a:	4631      	mov	r1, r6
 8048d5c:	4628      	mov	r0, r5
 8048d5e:	9205      	str	r2, [sp, #20]
 8048d60:	47b8      	blx	r7
 8048d62:	3001      	adds	r0, #1
 8048d64:	f43f ae97 	beq.w	8048a96 <_printf_float+0xc2>
 8048d68:	9a05      	ldr	r2, [sp, #20]
 8048d6a:	f10b 0b01 	add.w	fp, fp, #1
 8048d6e:	e7b9      	b.n	8048ce4 <_printf_float+0x310>
 8048d70:	ee18 3a10 	vmov	r3, s16
 8048d74:	4652      	mov	r2, sl
 8048d76:	4631      	mov	r1, r6
 8048d78:	4628      	mov	r0, r5
 8048d7a:	47b8      	blx	r7
 8048d7c:	3001      	adds	r0, #1
 8048d7e:	d1be      	bne.n	8048cfe <_printf_float+0x32a>
 8048d80:	e689      	b.n	8048a96 <_printf_float+0xc2>
 8048d82:	9a05      	ldr	r2, [sp, #20]
 8048d84:	464b      	mov	r3, r9
 8048d86:	4442      	add	r2, r8
 8048d88:	4631      	mov	r1, r6
 8048d8a:	4628      	mov	r0, r5
 8048d8c:	47b8      	blx	r7
 8048d8e:	3001      	adds	r0, #1
 8048d90:	d1c1      	bne.n	8048d16 <_printf_float+0x342>
 8048d92:	e680      	b.n	8048a96 <_printf_float+0xc2>
 8048d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048d96:	2a01      	cmp	r2, #1
 8048d98:	dc01      	bgt.n	8048d9e <_printf_float+0x3ca>
 8048d9a:	07db      	lsls	r3, r3, #31
 8048d9c:	d538      	bpl.n	8048e10 <_printf_float+0x43c>
 8048d9e:	2301      	movs	r3, #1
 8048da0:	4642      	mov	r2, r8
 8048da2:	4631      	mov	r1, r6
 8048da4:	4628      	mov	r0, r5
 8048da6:	47b8      	blx	r7
 8048da8:	3001      	adds	r0, #1
 8048daa:	f43f ae74 	beq.w	8048a96 <_printf_float+0xc2>
 8048dae:	ee18 3a10 	vmov	r3, s16
 8048db2:	4652      	mov	r2, sl
 8048db4:	4631      	mov	r1, r6
 8048db6:	4628      	mov	r0, r5
 8048db8:	47b8      	blx	r7
 8048dba:	3001      	adds	r0, #1
 8048dbc:	f43f ae6b 	beq.w	8048a96 <_printf_float+0xc2>
 8048dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8048dc4:	2200      	movs	r2, #0
 8048dc6:	2300      	movs	r3, #0
 8048dc8:	f7f7 fe7e 	bl	8040ac8 <__aeabi_dcmpeq>
 8048dcc:	b9d8      	cbnz	r0, 8048e06 <_printf_float+0x432>
 8048dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048dd0:	f108 0201 	add.w	r2, r8, #1
 8048dd4:	3b01      	subs	r3, #1
 8048dd6:	4631      	mov	r1, r6
 8048dd8:	4628      	mov	r0, r5
 8048dda:	47b8      	blx	r7
 8048ddc:	3001      	adds	r0, #1
 8048dde:	d10e      	bne.n	8048dfe <_printf_float+0x42a>
 8048de0:	e659      	b.n	8048a96 <_printf_float+0xc2>
 8048de2:	2301      	movs	r3, #1
 8048de4:	4652      	mov	r2, sl
 8048de6:	4631      	mov	r1, r6
 8048de8:	4628      	mov	r0, r5
 8048dea:	47b8      	blx	r7
 8048dec:	3001      	adds	r0, #1
 8048dee:	f43f ae52 	beq.w	8048a96 <_printf_float+0xc2>
 8048df2:	f108 0801 	add.w	r8, r8, #1
 8048df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048df8:	3b01      	subs	r3, #1
 8048dfa:	4543      	cmp	r3, r8
 8048dfc:	dcf1      	bgt.n	8048de2 <_printf_float+0x40e>
 8048dfe:	464b      	mov	r3, r9
 8048e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8048e04:	e6dc      	b.n	8048bc0 <_printf_float+0x1ec>
 8048e06:	f04f 0800 	mov.w	r8, #0
 8048e0a:	f104 0a1a 	add.w	sl, r4, #26
 8048e0e:	e7f2      	b.n	8048df6 <_printf_float+0x422>
 8048e10:	2301      	movs	r3, #1
 8048e12:	4642      	mov	r2, r8
 8048e14:	e7df      	b.n	8048dd6 <_printf_float+0x402>
 8048e16:	2301      	movs	r3, #1
 8048e18:	464a      	mov	r2, r9
 8048e1a:	4631      	mov	r1, r6
 8048e1c:	4628      	mov	r0, r5
 8048e1e:	47b8      	blx	r7
 8048e20:	3001      	adds	r0, #1
 8048e22:	f43f ae38 	beq.w	8048a96 <_printf_float+0xc2>
 8048e26:	f108 0801 	add.w	r8, r8, #1
 8048e2a:	68e3      	ldr	r3, [r4, #12]
 8048e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8048e2e:	1a5b      	subs	r3, r3, r1
 8048e30:	4543      	cmp	r3, r8
 8048e32:	dcf0      	bgt.n	8048e16 <_printf_float+0x442>
 8048e34:	e6fa      	b.n	8048c2c <_printf_float+0x258>
 8048e36:	f04f 0800 	mov.w	r8, #0
 8048e3a:	f104 0919 	add.w	r9, r4, #25
 8048e3e:	e7f4      	b.n	8048e2a <_printf_float+0x456>

08048e40 <_printf_common>:
 8048e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8048e44:	4616      	mov	r6, r2
 8048e46:	4699      	mov	r9, r3
 8048e48:	688a      	ldr	r2, [r1, #8]
 8048e4a:	690b      	ldr	r3, [r1, #16]
 8048e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8048e50:	4293      	cmp	r3, r2
 8048e52:	bfb8      	it	lt
 8048e54:	4613      	movlt	r3, r2
 8048e56:	6033      	str	r3, [r6, #0]
 8048e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8048e5c:	4607      	mov	r7, r0
 8048e5e:	460c      	mov	r4, r1
 8048e60:	b10a      	cbz	r2, 8048e66 <_printf_common+0x26>
 8048e62:	3301      	adds	r3, #1
 8048e64:	6033      	str	r3, [r6, #0]
 8048e66:	6823      	ldr	r3, [r4, #0]
 8048e68:	0699      	lsls	r1, r3, #26
 8048e6a:	bf42      	ittt	mi
 8048e6c:	6833      	ldrmi	r3, [r6, #0]
 8048e6e:	3302      	addmi	r3, #2
 8048e70:	6033      	strmi	r3, [r6, #0]
 8048e72:	6825      	ldr	r5, [r4, #0]
 8048e74:	f015 0506 	ands.w	r5, r5, #6
 8048e78:	d106      	bne.n	8048e88 <_printf_common+0x48>
 8048e7a:	f104 0a19 	add.w	sl, r4, #25
 8048e7e:	68e3      	ldr	r3, [r4, #12]
 8048e80:	6832      	ldr	r2, [r6, #0]
 8048e82:	1a9b      	subs	r3, r3, r2
 8048e84:	42ab      	cmp	r3, r5
 8048e86:	dc26      	bgt.n	8048ed6 <_printf_common+0x96>
 8048e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8048e8c:	1e13      	subs	r3, r2, #0
 8048e8e:	6822      	ldr	r2, [r4, #0]
 8048e90:	bf18      	it	ne
 8048e92:	2301      	movne	r3, #1
 8048e94:	0692      	lsls	r2, r2, #26
 8048e96:	d42b      	bmi.n	8048ef0 <_printf_common+0xb0>
 8048e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8048e9c:	4649      	mov	r1, r9
 8048e9e:	4638      	mov	r0, r7
 8048ea0:	47c0      	blx	r8
 8048ea2:	3001      	adds	r0, #1
 8048ea4:	d01e      	beq.n	8048ee4 <_printf_common+0xa4>
 8048ea6:	6823      	ldr	r3, [r4, #0]
 8048ea8:	68e5      	ldr	r5, [r4, #12]
 8048eaa:	6832      	ldr	r2, [r6, #0]
 8048eac:	f003 0306 	and.w	r3, r3, #6
 8048eb0:	2b04      	cmp	r3, #4
 8048eb2:	bf08      	it	eq
 8048eb4:	1aad      	subeq	r5, r5, r2
 8048eb6:	68a3      	ldr	r3, [r4, #8]
 8048eb8:	6922      	ldr	r2, [r4, #16]
 8048eba:	bf0c      	ite	eq
 8048ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8048ec0:	2500      	movne	r5, #0
 8048ec2:	4293      	cmp	r3, r2
 8048ec4:	bfc4      	itt	gt
 8048ec6:	1a9b      	subgt	r3, r3, r2
 8048ec8:	18ed      	addgt	r5, r5, r3
 8048eca:	2600      	movs	r6, #0
 8048ecc:	341a      	adds	r4, #26
 8048ece:	42b5      	cmp	r5, r6
 8048ed0:	d11a      	bne.n	8048f08 <_printf_common+0xc8>
 8048ed2:	2000      	movs	r0, #0
 8048ed4:	e008      	b.n	8048ee8 <_printf_common+0xa8>
 8048ed6:	2301      	movs	r3, #1
 8048ed8:	4652      	mov	r2, sl
 8048eda:	4649      	mov	r1, r9
 8048edc:	4638      	mov	r0, r7
 8048ede:	47c0      	blx	r8
 8048ee0:	3001      	adds	r0, #1
 8048ee2:	d103      	bne.n	8048eec <_printf_common+0xac>
 8048ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8048ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048eec:	3501      	adds	r5, #1
 8048eee:	e7c6      	b.n	8048e7e <_printf_common+0x3e>
 8048ef0:	18e1      	adds	r1, r4, r3
 8048ef2:	1c5a      	adds	r2, r3, #1
 8048ef4:	2030      	movs	r0, #48	; 0x30
 8048ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8048efa:	4422      	add	r2, r4
 8048efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8048f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8048f04:	3302      	adds	r3, #2
 8048f06:	e7c7      	b.n	8048e98 <_printf_common+0x58>
 8048f08:	2301      	movs	r3, #1
 8048f0a:	4622      	mov	r2, r4
 8048f0c:	4649      	mov	r1, r9
 8048f0e:	4638      	mov	r0, r7
 8048f10:	47c0      	blx	r8
 8048f12:	3001      	adds	r0, #1
 8048f14:	d0e6      	beq.n	8048ee4 <_printf_common+0xa4>
 8048f16:	3601      	adds	r6, #1
 8048f18:	e7d9      	b.n	8048ece <_printf_common+0x8e>
	...

08048f1c <_printf_i>:
 8048f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8048f20:	7e0f      	ldrb	r7, [r1, #24]
 8048f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8048f24:	2f78      	cmp	r7, #120	; 0x78
 8048f26:	4691      	mov	r9, r2
 8048f28:	4680      	mov	r8, r0
 8048f2a:	460c      	mov	r4, r1
 8048f2c:	469a      	mov	sl, r3
 8048f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8048f32:	d807      	bhi.n	8048f44 <_printf_i+0x28>
 8048f34:	2f62      	cmp	r7, #98	; 0x62
 8048f36:	d80a      	bhi.n	8048f4e <_printf_i+0x32>
 8048f38:	2f00      	cmp	r7, #0
 8048f3a:	f000 80d8 	beq.w	80490ee <_printf_i+0x1d2>
 8048f3e:	2f58      	cmp	r7, #88	; 0x58
 8048f40:	f000 80a3 	beq.w	804908a <_printf_i+0x16e>
 8048f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8048f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8048f4c:	e03a      	b.n	8048fc4 <_printf_i+0xa8>
 8048f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8048f52:	2b15      	cmp	r3, #21
 8048f54:	d8f6      	bhi.n	8048f44 <_printf_i+0x28>
 8048f56:	a101      	add	r1, pc, #4	; (adr r1, 8048f5c <_printf_i+0x40>)
 8048f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8048f5c:	08048fb5 	.word	0x08048fb5
 8048f60:	08048fc9 	.word	0x08048fc9
 8048f64:	08048f45 	.word	0x08048f45
 8048f68:	08048f45 	.word	0x08048f45
 8048f6c:	08048f45 	.word	0x08048f45
 8048f70:	08048f45 	.word	0x08048f45
 8048f74:	08048fc9 	.word	0x08048fc9
 8048f78:	08048f45 	.word	0x08048f45
 8048f7c:	08048f45 	.word	0x08048f45
 8048f80:	08048f45 	.word	0x08048f45
 8048f84:	08048f45 	.word	0x08048f45
 8048f88:	080490d5 	.word	0x080490d5
 8048f8c:	08048ff9 	.word	0x08048ff9
 8048f90:	080490b7 	.word	0x080490b7
 8048f94:	08048f45 	.word	0x08048f45
 8048f98:	08048f45 	.word	0x08048f45
 8048f9c:	080490f7 	.word	0x080490f7
 8048fa0:	08048f45 	.word	0x08048f45
 8048fa4:	08048ff9 	.word	0x08048ff9
 8048fa8:	08048f45 	.word	0x08048f45
 8048fac:	08048f45 	.word	0x08048f45
 8048fb0:	080490bf 	.word	0x080490bf
 8048fb4:	682b      	ldr	r3, [r5, #0]
 8048fb6:	1d1a      	adds	r2, r3, #4
 8048fb8:	681b      	ldr	r3, [r3, #0]
 8048fba:	602a      	str	r2, [r5, #0]
 8048fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8048fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8048fc4:	2301      	movs	r3, #1
 8048fc6:	e0a3      	b.n	8049110 <_printf_i+0x1f4>
 8048fc8:	6820      	ldr	r0, [r4, #0]
 8048fca:	6829      	ldr	r1, [r5, #0]
 8048fcc:	0606      	lsls	r6, r0, #24
 8048fce:	f101 0304 	add.w	r3, r1, #4
 8048fd2:	d50a      	bpl.n	8048fea <_printf_i+0xce>
 8048fd4:	680e      	ldr	r6, [r1, #0]
 8048fd6:	602b      	str	r3, [r5, #0]
 8048fd8:	2e00      	cmp	r6, #0
 8048fda:	da03      	bge.n	8048fe4 <_printf_i+0xc8>
 8048fdc:	232d      	movs	r3, #45	; 0x2d
 8048fde:	4276      	negs	r6, r6
 8048fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048fe4:	485e      	ldr	r0, [pc, #376]	; (8049160 <_printf_i+0x244>)
 8048fe6:	230a      	movs	r3, #10
 8048fe8:	e019      	b.n	804901e <_printf_i+0x102>
 8048fea:	680e      	ldr	r6, [r1, #0]
 8048fec:	602b      	str	r3, [r5, #0]
 8048fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8048ff2:	bf18      	it	ne
 8048ff4:	b236      	sxthne	r6, r6
 8048ff6:	e7ef      	b.n	8048fd8 <_printf_i+0xbc>
 8048ff8:	682b      	ldr	r3, [r5, #0]
 8048ffa:	6820      	ldr	r0, [r4, #0]
 8048ffc:	1d19      	adds	r1, r3, #4
 8048ffe:	6029      	str	r1, [r5, #0]
 8049000:	0601      	lsls	r1, r0, #24
 8049002:	d501      	bpl.n	8049008 <_printf_i+0xec>
 8049004:	681e      	ldr	r6, [r3, #0]
 8049006:	e002      	b.n	804900e <_printf_i+0xf2>
 8049008:	0646      	lsls	r6, r0, #25
 804900a:	d5fb      	bpl.n	8049004 <_printf_i+0xe8>
 804900c:	881e      	ldrh	r6, [r3, #0]
 804900e:	4854      	ldr	r0, [pc, #336]	; (8049160 <_printf_i+0x244>)
 8049010:	2f6f      	cmp	r7, #111	; 0x6f
 8049012:	bf0c      	ite	eq
 8049014:	2308      	moveq	r3, #8
 8049016:	230a      	movne	r3, #10
 8049018:	2100      	movs	r1, #0
 804901a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804901e:	6865      	ldr	r5, [r4, #4]
 8049020:	60a5      	str	r5, [r4, #8]
 8049022:	2d00      	cmp	r5, #0
 8049024:	bfa2      	ittt	ge
 8049026:	6821      	ldrge	r1, [r4, #0]
 8049028:	f021 0104 	bicge.w	r1, r1, #4
 804902c:	6021      	strge	r1, [r4, #0]
 804902e:	b90e      	cbnz	r6, 8049034 <_printf_i+0x118>
 8049030:	2d00      	cmp	r5, #0
 8049032:	d04d      	beq.n	80490d0 <_printf_i+0x1b4>
 8049034:	4615      	mov	r5, r2
 8049036:	fbb6 f1f3 	udiv	r1, r6, r3
 804903a:	fb03 6711 	mls	r7, r3, r1, r6
 804903e:	5dc7      	ldrb	r7, [r0, r7]
 8049040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8049044:	4637      	mov	r7, r6
 8049046:	42bb      	cmp	r3, r7
 8049048:	460e      	mov	r6, r1
 804904a:	d9f4      	bls.n	8049036 <_printf_i+0x11a>
 804904c:	2b08      	cmp	r3, #8
 804904e:	d10b      	bne.n	8049068 <_printf_i+0x14c>
 8049050:	6823      	ldr	r3, [r4, #0]
 8049052:	07de      	lsls	r6, r3, #31
 8049054:	d508      	bpl.n	8049068 <_printf_i+0x14c>
 8049056:	6923      	ldr	r3, [r4, #16]
 8049058:	6861      	ldr	r1, [r4, #4]
 804905a:	4299      	cmp	r1, r3
 804905c:	bfde      	ittt	le
 804905e:	2330      	movle	r3, #48	; 0x30
 8049060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8049064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8049068:	1b52      	subs	r2, r2, r5
 804906a:	6122      	str	r2, [r4, #16]
 804906c:	f8cd a000 	str.w	sl, [sp]
 8049070:	464b      	mov	r3, r9
 8049072:	aa03      	add	r2, sp, #12
 8049074:	4621      	mov	r1, r4
 8049076:	4640      	mov	r0, r8
 8049078:	f7ff fee2 	bl	8048e40 <_printf_common>
 804907c:	3001      	adds	r0, #1
 804907e:	d14c      	bne.n	804911a <_printf_i+0x1fe>
 8049080:	f04f 30ff 	mov.w	r0, #4294967295
 8049084:	b004      	add	sp, #16
 8049086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804908a:	4835      	ldr	r0, [pc, #212]	; (8049160 <_printf_i+0x244>)
 804908c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8049090:	6829      	ldr	r1, [r5, #0]
 8049092:	6823      	ldr	r3, [r4, #0]
 8049094:	f851 6b04 	ldr.w	r6, [r1], #4
 8049098:	6029      	str	r1, [r5, #0]
 804909a:	061d      	lsls	r5, r3, #24
 804909c:	d514      	bpl.n	80490c8 <_printf_i+0x1ac>
 804909e:	07df      	lsls	r7, r3, #31
 80490a0:	bf44      	itt	mi
 80490a2:	f043 0320 	orrmi.w	r3, r3, #32
 80490a6:	6023      	strmi	r3, [r4, #0]
 80490a8:	b91e      	cbnz	r6, 80490b2 <_printf_i+0x196>
 80490aa:	6823      	ldr	r3, [r4, #0]
 80490ac:	f023 0320 	bic.w	r3, r3, #32
 80490b0:	6023      	str	r3, [r4, #0]
 80490b2:	2310      	movs	r3, #16
 80490b4:	e7b0      	b.n	8049018 <_printf_i+0xfc>
 80490b6:	6823      	ldr	r3, [r4, #0]
 80490b8:	f043 0320 	orr.w	r3, r3, #32
 80490bc:	6023      	str	r3, [r4, #0]
 80490be:	2378      	movs	r3, #120	; 0x78
 80490c0:	4828      	ldr	r0, [pc, #160]	; (8049164 <_printf_i+0x248>)
 80490c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80490c6:	e7e3      	b.n	8049090 <_printf_i+0x174>
 80490c8:	0659      	lsls	r1, r3, #25
 80490ca:	bf48      	it	mi
 80490cc:	b2b6      	uxthmi	r6, r6
 80490ce:	e7e6      	b.n	804909e <_printf_i+0x182>
 80490d0:	4615      	mov	r5, r2
 80490d2:	e7bb      	b.n	804904c <_printf_i+0x130>
 80490d4:	682b      	ldr	r3, [r5, #0]
 80490d6:	6826      	ldr	r6, [r4, #0]
 80490d8:	6961      	ldr	r1, [r4, #20]
 80490da:	1d18      	adds	r0, r3, #4
 80490dc:	6028      	str	r0, [r5, #0]
 80490de:	0635      	lsls	r5, r6, #24
 80490e0:	681b      	ldr	r3, [r3, #0]
 80490e2:	d501      	bpl.n	80490e8 <_printf_i+0x1cc>
 80490e4:	6019      	str	r1, [r3, #0]
 80490e6:	e002      	b.n	80490ee <_printf_i+0x1d2>
 80490e8:	0670      	lsls	r0, r6, #25
 80490ea:	d5fb      	bpl.n	80490e4 <_printf_i+0x1c8>
 80490ec:	8019      	strh	r1, [r3, #0]
 80490ee:	2300      	movs	r3, #0
 80490f0:	6123      	str	r3, [r4, #16]
 80490f2:	4615      	mov	r5, r2
 80490f4:	e7ba      	b.n	804906c <_printf_i+0x150>
 80490f6:	682b      	ldr	r3, [r5, #0]
 80490f8:	1d1a      	adds	r2, r3, #4
 80490fa:	602a      	str	r2, [r5, #0]
 80490fc:	681d      	ldr	r5, [r3, #0]
 80490fe:	6862      	ldr	r2, [r4, #4]
 8049100:	2100      	movs	r1, #0
 8049102:	4628      	mov	r0, r5
 8049104:	f7f7 f86c 	bl	80401e0 <memchr>
 8049108:	b108      	cbz	r0, 804910e <_printf_i+0x1f2>
 804910a:	1b40      	subs	r0, r0, r5
 804910c:	6060      	str	r0, [r4, #4]
 804910e:	6863      	ldr	r3, [r4, #4]
 8049110:	6123      	str	r3, [r4, #16]
 8049112:	2300      	movs	r3, #0
 8049114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8049118:	e7a8      	b.n	804906c <_printf_i+0x150>
 804911a:	6923      	ldr	r3, [r4, #16]
 804911c:	462a      	mov	r2, r5
 804911e:	4649      	mov	r1, r9
 8049120:	4640      	mov	r0, r8
 8049122:	47d0      	blx	sl
 8049124:	3001      	adds	r0, #1
 8049126:	d0ab      	beq.n	8049080 <_printf_i+0x164>
 8049128:	6823      	ldr	r3, [r4, #0]
 804912a:	079b      	lsls	r3, r3, #30
 804912c:	d413      	bmi.n	8049156 <_printf_i+0x23a>
 804912e:	68e0      	ldr	r0, [r4, #12]
 8049130:	9b03      	ldr	r3, [sp, #12]
 8049132:	4298      	cmp	r0, r3
 8049134:	bfb8      	it	lt
 8049136:	4618      	movlt	r0, r3
 8049138:	e7a4      	b.n	8049084 <_printf_i+0x168>
 804913a:	2301      	movs	r3, #1
 804913c:	4632      	mov	r2, r6
 804913e:	4649      	mov	r1, r9
 8049140:	4640      	mov	r0, r8
 8049142:	47d0      	blx	sl
 8049144:	3001      	adds	r0, #1
 8049146:	d09b      	beq.n	8049080 <_printf_i+0x164>
 8049148:	3501      	adds	r5, #1
 804914a:	68e3      	ldr	r3, [r4, #12]
 804914c:	9903      	ldr	r1, [sp, #12]
 804914e:	1a5b      	subs	r3, r3, r1
 8049150:	42ab      	cmp	r3, r5
 8049152:	dcf2      	bgt.n	804913a <_printf_i+0x21e>
 8049154:	e7eb      	b.n	804912e <_printf_i+0x212>
 8049156:	2500      	movs	r5, #0
 8049158:	f104 0619 	add.w	r6, r4, #25
 804915c:	e7f5      	b.n	804914a <_printf_i+0x22e>
 804915e:	bf00      	nop
 8049160:	0804e1f6 	.word	0x0804e1f6
 8049164:	0804e207 	.word	0x0804e207

08049168 <_scanf_float>:
 8049168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804916c:	b087      	sub	sp, #28
 804916e:	4617      	mov	r7, r2
 8049170:	9303      	str	r3, [sp, #12]
 8049172:	688b      	ldr	r3, [r1, #8]
 8049174:	1e5a      	subs	r2, r3, #1
 8049176:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 804917a:	bf83      	ittte	hi
 804917c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8049180:	195b      	addhi	r3, r3, r5
 8049182:	9302      	strhi	r3, [sp, #8]
 8049184:	2300      	movls	r3, #0
 8049186:	bf86      	itte	hi
 8049188:	f240 135d 	movwhi	r3, #349	; 0x15d
 804918c:	608b      	strhi	r3, [r1, #8]
 804918e:	9302      	strls	r3, [sp, #8]
 8049190:	680b      	ldr	r3, [r1, #0]
 8049192:	468b      	mov	fp, r1
 8049194:	2500      	movs	r5, #0
 8049196:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 804919a:	f84b 3b1c 	str.w	r3, [fp], #28
 804919e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80491a2:	4680      	mov	r8, r0
 80491a4:	460c      	mov	r4, r1
 80491a6:	465e      	mov	r6, fp
 80491a8:	46aa      	mov	sl, r5
 80491aa:	46a9      	mov	r9, r5
 80491ac:	9501      	str	r5, [sp, #4]
 80491ae:	68a2      	ldr	r2, [r4, #8]
 80491b0:	b152      	cbz	r2, 80491c8 <_scanf_float+0x60>
 80491b2:	683b      	ldr	r3, [r7, #0]
 80491b4:	781b      	ldrb	r3, [r3, #0]
 80491b6:	2b4e      	cmp	r3, #78	; 0x4e
 80491b8:	d864      	bhi.n	8049284 <_scanf_float+0x11c>
 80491ba:	2b40      	cmp	r3, #64	; 0x40
 80491bc:	d83c      	bhi.n	8049238 <_scanf_float+0xd0>
 80491be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80491c2:	b2c8      	uxtb	r0, r1
 80491c4:	280e      	cmp	r0, #14
 80491c6:	d93a      	bls.n	804923e <_scanf_float+0xd6>
 80491c8:	f1b9 0f00 	cmp.w	r9, #0
 80491cc:	d003      	beq.n	80491d6 <_scanf_float+0x6e>
 80491ce:	6823      	ldr	r3, [r4, #0]
 80491d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80491d4:	6023      	str	r3, [r4, #0]
 80491d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80491da:	f1ba 0f01 	cmp.w	sl, #1
 80491de:	f200 8113 	bhi.w	8049408 <_scanf_float+0x2a0>
 80491e2:	455e      	cmp	r6, fp
 80491e4:	f200 8105 	bhi.w	80493f2 <_scanf_float+0x28a>
 80491e8:	2501      	movs	r5, #1
 80491ea:	4628      	mov	r0, r5
 80491ec:	b007      	add	sp, #28
 80491ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80491f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80491f6:	2a0d      	cmp	r2, #13
 80491f8:	d8e6      	bhi.n	80491c8 <_scanf_float+0x60>
 80491fa:	a101      	add	r1, pc, #4	; (adr r1, 8049200 <_scanf_float+0x98>)
 80491fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8049200:	0804933f 	.word	0x0804933f
 8049204:	080491c9 	.word	0x080491c9
 8049208:	080491c9 	.word	0x080491c9
 804920c:	080491c9 	.word	0x080491c9
 8049210:	0804939f 	.word	0x0804939f
 8049214:	08049377 	.word	0x08049377
 8049218:	080491c9 	.word	0x080491c9
 804921c:	080491c9 	.word	0x080491c9
 8049220:	0804934d 	.word	0x0804934d
 8049224:	080491c9 	.word	0x080491c9
 8049228:	080491c9 	.word	0x080491c9
 804922c:	080491c9 	.word	0x080491c9
 8049230:	080491c9 	.word	0x080491c9
 8049234:	08049305 	.word	0x08049305
 8049238:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 804923c:	e7db      	b.n	80491f6 <_scanf_float+0x8e>
 804923e:	290e      	cmp	r1, #14
 8049240:	d8c2      	bhi.n	80491c8 <_scanf_float+0x60>
 8049242:	a001      	add	r0, pc, #4	; (adr r0, 8049248 <_scanf_float+0xe0>)
 8049244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8049248:	080492f7 	.word	0x080492f7
 804924c:	080491c9 	.word	0x080491c9
 8049250:	080492f7 	.word	0x080492f7
 8049254:	0804938b 	.word	0x0804938b
 8049258:	080491c9 	.word	0x080491c9
 804925c:	080492a5 	.word	0x080492a5
 8049260:	080492e1 	.word	0x080492e1
 8049264:	080492e1 	.word	0x080492e1
 8049268:	080492e1 	.word	0x080492e1
 804926c:	080492e1 	.word	0x080492e1
 8049270:	080492e1 	.word	0x080492e1
 8049274:	080492e1 	.word	0x080492e1
 8049278:	080492e1 	.word	0x080492e1
 804927c:	080492e1 	.word	0x080492e1
 8049280:	080492e1 	.word	0x080492e1
 8049284:	2b6e      	cmp	r3, #110	; 0x6e
 8049286:	d809      	bhi.n	804929c <_scanf_float+0x134>
 8049288:	2b60      	cmp	r3, #96	; 0x60
 804928a:	d8b2      	bhi.n	80491f2 <_scanf_float+0x8a>
 804928c:	2b54      	cmp	r3, #84	; 0x54
 804928e:	d077      	beq.n	8049380 <_scanf_float+0x218>
 8049290:	2b59      	cmp	r3, #89	; 0x59
 8049292:	d199      	bne.n	80491c8 <_scanf_float+0x60>
 8049294:	2d07      	cmp	r5, #7
 8049296:	d197      	bne.n	80491c8 <_scanf_float+0x60>
 8049298:	2508      	movs	r5, #8
 804929a:	e029      	b.n	80492f0 <_scanf_float+0x188>
 804929c:	2b74      	cmp	r3, #116	; 0x74
 804929e:	d06f      	beq.n	8049380 <_scanf_float+0x218>
 80492a0:	2b79      	cmp	r3, #121	; 0x79
 80492a2:	e7f6      	b.n	8049292 <_scanf_float+0x12a>
 80492a4:	6821      	ldr	r1, [r4, #0]
 80492a6:	05c8      	lsls	r0, r1, #23
 80492a8:	d51a      	bpl.n	80492e0 <_scanf_float+0x178>
 80492aa:	9b02      	ldr	r3, [sp, #8]
 80492ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80492b0:	6021      	str	r1, [r4, #0]
 80492b2:	f109 0901 	add.w	r9, r9, #1
 80492b6:	b11b      	cbz	r3, 80492c0 <_scanf_float+0x158>
 80492b8:	3b01      	subs	r3, #1
 80492ba:	3201      	adds	r2, #1
 80492bc:	9302      	str	r3, [sp, #8]
 80492be:	60a2      	str	r2, [r4, #8]
 80492c0:	68a3      	ldr	r3, [r4, #8]
 80492c2:	3b01      	subs	r3, #1
 80492c4:	60a3      	str	r3, [r4, #8]
 80492c6:	6923      	ldr	r3, [r4, #16]
 80492c8:	3301      	adds	r3, #1
 80492ca:	6123      	str	r3, [r4, #16]
 80492cc:	687b      	ldr	r3, [r7, #4]
 80492ce:	3b01      	subs	r3, #1
 80492d0:	2b00      	cmp	r3, #0
 80492d2:	607b      	str	r3, [r7, #4]
 80492d4:	f340 8084 	ble.w	80493e0 <_scanf_float+0x278>
 80492d8:	683b      	ldr	r3, [r7, #0]
 80492da:	3301      	adds	r3, #1
 80492dc:	603b      	str	r3, [r7, #0]
 80492de:	e766      	b.n	80491ae <_scanf_float+0x46>
 80492e0:	eb1a 0f05 	cmn.w	sl, r5
 80492e4:	f47f af70 	bne.w	80491c8 <_scanf_float+0x60>
 80492e8:	6822      	ldr	r2, [r4, #0]
 80492ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80492ee:	6022      	str	r2, [r4, #0]
 80492f0:	f806 3b01 	strb.w	r3, [r6], #1
 80492f4:	e7e4      	b.n	80492c0 <_scanf_float+0x158>
 80492f6:	6822      	ldr	r2, [r4, #0]
 80492f8:	0610      	lsls	r0, r2, #24
 80492fa:	f57f af65 	bpl.w	80491c8 <_scanf_float+0x60>
 80492fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8049302:	e7f4      	b.n	80492ee <_scanf_float+0x186>
 8049304:	f1ba 0f00 	cmp.w	sl, #0
 8049308:	d10e      	bne.n	8049328 <_scanf_float+0x1c0>
 804930a:	f1b9 0f00 	cmp.w	r9, #0
 804930e:	d10e      	bne.n	804932e <_scanf_float+0x1c6>
 8049310:	6822      	ldr	r2, [r4, #0]
 8049312:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8049316:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 804931a:	d108      	bne.n	804932e <_scanf_float+0x1c6>
 804931c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8049320:	6022      	str	r2, [r4, #0]
 8049322:	f04f 0a01 	mov.w	sl, #1
 8049326:	e7e3      	b.n	80492f0 <_scanf_float+0x188>
 8049328:	f1ba 0f02 	cmp.w	sl, #2
 804932c:	d055      	beq.n	80493da <_scanf_float+0x272>
 804932e:	2d01      	cmp	r5, #1
 8049330:	d002      	beq.n	8049338 <_scanf_float+0x1d0>
 8049332:	2d04      	cmp	r5, #4
 8049334:	f47f af48 	bne.w	80491c8 <_scanf_float+0x60>
 8049338:	3501      	adds	r5, #1
 804933a:	b2ed      	uxtb	r5, r5
 804933c:	e7d8      	b.n	80492f0 <_scanf_float+0x188>
 804933e:	f1ba 0f01 	cmp.w	sl, #1
 8049342:	f47f af41 	bne.w	80491c8 <_scanf_float+0x60>
 8049346:	f04f 0a02 	mov.w	sl, #2
 804934a:	e7d1      	b.n	80492f0 <_scanf_float+0x188>
 804934c:	b97d      	cbnz	r5, 804936e <_scanf_float+0x206>
 804934e:	f1b9 0f00 	cmp.w	r9, #0
 8049352:	f47f af3c 	bne.w	80491ce <_scanf_float+0x66>
 8049356:	6822      	ldr	r2, [r4, #0]
 8049358:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 804935c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8049360:	f47f af39 	bne.w	80491d6 <_scanf_float+0x6e>
 8049364:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8049368:	6022      	str	r2, [r4, #0]
 804936a:	2501      	movs	r5, #1
 804936c:	e7c0      	b.n	80492f0 <_scanf_float+0x188>
 804936e:	2d03      	cmp	r5, #3
 8049370:	d0e2      	beq.n	8049338 <_scanf_float+0x1d0>
 8049372:	2d05      	cmp	r5, #5
 8049374:	e7de      	b.n	8049334 <_scanf_float+0x1cc>
 8049376:	2d02      	cmp	r5, #2
 8049378:	f47f af26 	bne.w	80491c8 <_scanf_float+0x60>
 804937c:	2503      	movs	r5, #3
 804937e:	e7b7      	b.n	80492f0 <_scanf_float+0x188>
 8049380:	2d06      	cmp	r5, #6
 8049382:	f47f af21 	bne.w	80491c8 <_scanf_float+0x60>
 8049386:	2507      	movs	r5, #7
 8049388:	e7b2      	b.n	80492f0 <_scanf_float+0x188>
 804938a:	6822      	ldr	r2, [r4, #0]
 804938c:	0591      	lsls	r1, r2, #22
 804938e:	f57f af1b 	bpl.w	80491c8 <_scanf_float+0x60>
 8049392:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8049396:	6022      	str	r2, [r4, #0]
 8049398:	f8cd 9004 	str.w	r9, [sp, #4]
 804939c:	e7a8      	b.n	80492f0 <_scanf_float+0x188>
 804939e:	6822      	ldr	r2, [r4, #0]
 80493a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80493a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80493a8:	d006      	beq.n	80493b8 <_scanf_float+0x250>
 80493aa:	0550      	lsls	r0, r2, #21
 80493ac:	f57f af0c 	bpl.w	80491c8 <_scanf_float+0x60>
 80493b0:	f1b9 0f00 	cmp.w	r9, #0
 80493b4:	f43f af0f 	beq.w	80491d6 <_scanf_float+0x6e>
 80493b8:	0591      	lsls	r1, r2, #22
 80493ba:	bf58      	it	pl
 80493bc:	9901      	ldrpl	r1, [sp, #4]
 80493be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80493c2:	bf58      	it	pl
 80493c4:	eba9 0101 	subpl.w	r1, r9, r1
 80493c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80493cc:	bf58      	it	pl
 80493ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80493d2:	6022      	str	r2, [r4, #0]
 80493d4:	f04f 0900 	mov.w	r9, #0
 80493d8:	e78a      	b.n	80492f0 <_scanf_float+0x188>
 80493da:	f04f 0a03 	mov.w	sl, #3
 80493de:	e787      	b.n	80492f0 <_scanf_float+0x188>
 80493e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80493e4:	4639      	mov	r1, r7
 80493e6:	4640      	mov	r0, r8
 80493e8:	4798      	blx	r3
 80493ea:	2800      	cmp	r0, #0
 80493ec:	f43f aedf 	beq.w	80491ae <_scanf_float+0x46>
 80493f0:	e6ea      	b.n	80491c8 <_scanf_float+0x60>
 80493f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80493f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80493fa:	463a      	mov	r2, r7
 80493fc:	4640      	mov	r0, r8
 80493fe:	4798      	blx	r3
 8049400:	6923      	ldr	r3, [r4, #16]
 8049402:	3b01      	subs	r3, #1
 8049404:	6123      	str	r3, [r4, #16]
 8049406:	e6ec      	b.n	80491e2 <_scanf_float+0x7a>
 8049408:	1e6b      	subs	r3, r5, #1
 804940a:	2b06      	cmp	r3, #6
 804940c:	d825      	bhi.n	804945a <_scanf_float+0x2f2>
 804940e:	2d02      	cmp	r5, #2
 8049410:	d836      	bhi.n	8049480 <_scanf_float+0x318>
 8049412:	455e      	cmp	r6, fp
 8049414:	f67f aee8 	bls.w	80491e8 <_scanf_float+0x80>
 8049418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 804941c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8049420:	463a      	mov	r2, r7
 8049422:	4640      	mov	r0, r8
 8049424:	4798      	blx	r3
 8049426:	6923      	ldr	r3, [r4, #16]
 8049428:	3b01      	subs	r3, #1
 804942a:	6123      	str	r3, [r4, #16]
 804942c:	e7f1      	b.n	8049412 <_scanf_float+0x2aa>
 804942e:	9802      	ldr	r0, [sp, #8]
 8049430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8049434:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8049438:	9002      	str	r0, [sp, #8]
 804943a:	463a      	mov	r2, r7
 804943c:	4640      	mov	r0, r8
 804943e:	4798      	blx	r3
 8049440:	6923      	ldr	r3, [r4, #16]
 8049442:	3b01      	subs	r3, #1
 8049444:	6123      	str	r3, [r4, #16]
 8049446:	f10a 3aff 	add.w	sl, sl, #4294967295
 804944a:	fa5f fa8a 	uxtb.w	sl, sl
 804944e:	f1ba 0f02 	cmp.w	sl, #2
 8049452:	d1ec      	bne.n	804942e <_scanf_float+0x2c6>
 8049454:	3d03      	subs	r5, #3
 8049456:	b2ed      	uxtb	r5, r5
 8049458:	1b76      	subs	r6, r6, r5
 804945a:	6823      	ldr	r3, [r4, #0]
 804945c:	05da      	lsls	r2, r3, #23
 804945e:	d52f      	bpl.n	80494c0 <_scanf_float+0x358>
 8049460:	055b      	lsls	r3, r3, #21
 8049462:	d510      	bpl.n	8049486 <_scanf_float+0x31e>
 8049464:	455e      	cmp	r6, fp
 8049466:	f67f aebf 	bls.w	80491e8 <_scanf_float+0x80>
 804946a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 804946e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8049472:	463a      	mov	r2, r7
 8049474:	4640      	mov	r0, r8
 8049476:	4798      	blx	r3
 8049478:	6923      	ldr	r3, [r4, #16]
 804947a:	3b01      	subs	r3, #1
 804947c:	6123      	str	r3, [r4, #16]
 804947e:	e7f1      	b.n	8049464 <_scanf_float+0x2fc>
 8049480:	46aa      	mov	sl, r5
 8049482:	9602      	str	r6, [sp, #8]
 8049484:	e7df      	b.n	8049446 <_scanf_float+0x2de>
 8049486:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 804948a:	6923      	ldr	r3, [r4, #16]
 804948c:	2965      	cmp	r1, #101	; 0x65
 804948e:	f103 33ff 	add.w	r3, r3, #4294967295
 8049492:	f106 35ff 	add.w	r5, r6, #4294967295
 8049496:	6123      	str	r3, [r4, #16]
 8049498:	d00c      	beq.n	80494b4 <_scanf_float+0x34c>
 804949a:	2945      	cmp	r1, #69	; 0x45
 804949c:	d00a      	beq.n	80494b4 <_scanf_float+0x34c>
 804949e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80494a2:	463a      	mov	r2, r7
 80494a4:	4640      	mov	r0, r8
 80494a6:	4798      	blx	r3
 80494a8:	6923      	ldr	r3, [r4, #16]
 80494aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80494ae:	3b01      	subs	r3, #1
 80494b0:	1eb5      	subs	r5, r6, #2
 80494b2:	6123      	str	r3, [r4, #16]
 80494b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80494b8:	463a      	mov	r2, r7
 80494ba:	4640      	mov	r0, r8
 80494bc:	4798      	blx	r3
 80494be:	462e      	mov	r6, r5
 80494c0:	6825      	ldr	r5, [r4, #0]
 80494c2:	f015 0510 	ands.w	r5, r5, #16
 80494c6:	d159      	bne.n	804957c <_scanf_float+0x414>
 80494c8:	7035      	strb	r5, [r6, #0]
 80494ca:	6823      	ldr	r3, [r4, #0]
 80494cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80494d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80494d4:	d11b      	bne.n	804950e <_scanf_float+0x3a6>
 80494d6:	9b01      	ldr	r3, [sp, #4]
 80494d8:	454b      	cmp	r3, r9
 80494da:	eba3 0209 	sub.w	r2, r3, r9
 80494de:	d123      	bne.n	8049528 <_scanf_float+0x3c0>
 80494e0:	2200      	movs	r2, #0
 80494e2:	4659      	mov	r1, fp
 80494e4:	4640      	mov	r0, r8
 80494e6:	f000 fe99 	bl	804a21c <_strtod_r>
 80494ea:	6822      	ldr	r2, [r4, #0]
 80494ec:	9b03      	ldr	r3, [sp, #12]
 80494ee:	f012 0f02 	tst.w	r2, #2
 80494f2:	ec57 6b10 	vmov	r6, r7, d0
 80494f6:	681b      	ldr	r3, [r3, #0]
 80494f8:	d021      	beq.n	804953e <_scanf_float+0x3d6>
 80494fa:	9903      	ldr	r1, [sp, #12]
 80494fc:	1d1a      	adds	r2, r3, #4
 80494fe:	600a      	str	r2, [r1, #0]
 8049500:	681b      	ldr	r3, [r3, #0]
 8049502:	e9c3 6700 	strd	r6, r7, [r3]
 8049506:	68e3      	ldr	r3, [r4, #12]
 8049508:	3301      	adds	r3, #1
 804950a:	60e3      	str	r3, [r4, #12]
 804950c:	e66d      	b.n	80491ea <_scanf_float+0x82>
 804950e:	9b04      	ldr	r3, [sp, #16]
 8049510:	2b00      	cmp	r3, #0
 8049512:	d0e5      	beq.n	80494e0 <_scanf_float+0x378>
 8049514:	9905      	ldr	r1, [sp, #20]
 8049516:	230a      	movs	r3, #10
 8049518:	462a      	mov	r2, r5
 804951a:	3101      	adds	r1, #1
 804951c:	4640      	mov	r0, r8
 804951e:	f000 ff05 	bl	804a32c <_strtol_r>
 8049522:	9b04      	ldr	r3, [sp, #16]
 8049524:	9e05      	ldr	r6, [sp, #20]
 8049526:	1ac2      	subs	r2, r0, r3
 8049528:	f204 136f 	addw	r3, r4, #367	; 0x16f
 804952c:	429e      	cmp	r6, r3
 804952e:	bf28      	it	cs
 8049530:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8049534:	4912      	ldr	r1, [pc, #72]	; (8049580 <_scanf_float+0x418>)
 8049536:	4630      	mov	r0, r6
 8049538:	f000 f82c 	bl	8049594 <siprintf>
 804953c:	e7d0      	b.n	80494e0 <_scanf_float+0x378>
 804953e:	9903      	ldr	r1, [sp, #12]
 8049540:	f012 0f04 	tst.w	r2, #4
 8049544:	f103 0204 	add.w	r2, r3, #4
 8049548:	600a      	str	r2, [r1, #0]
 804954a:	d1d9      	bne.n	8049500 <_scanf_float+0x398>
 804954c:	f8d3 8000 	ldr.w	r8, [r3]
 8049550:	ee10 2a10 	vmov	r2, s0
 8049554:	ee10 0a10 	vmov	r0, s0
 8049558:	463b      	mov	r3, r7
 804955a:	4639      	mov	r1, r7
 804955c:	f7f7 fae6 	bl	8040b2c <__aeabi_dcmpun>
 8049560:	b128      	cbz	r0, 804956e <_scanf_float+0x406>
 8049562:	4808      	ldr	r0, [pc, #32]	; (8049584 <_scanf_float+0x41c>)
 8049564:	f000 f810 	bl	8049588 <nanf>
 8049568:	ed88 0a00 	vstr	s0, [r8]
 804956c:	e7cb      	b.n	8049506 <_scanf_float+0x39e>
 804956e:	4630      	mov	r0, r6
 8049570:	4639      	mov	r1, r7
 8049572:	f7f7 fb39 	bl	8040be8 <__aeabi_d2f>
 8049576:	f8c8 0000 	str.w	r0, [r8]
 804957a:	e7c4      	b.n	8049506 <_scanf_float+0x39e>
 804957c:	2500      	movs	r5, #0
 804957e:	e634      	b.n	80491ea <_scanf_float+0x82>
 8049580:	0804e218 	.word	0x0804e218
 8049584:	0804e648 	.word	0x0804e648

08049588 <nanf>:
 8049588:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8049590 <nanf+0x8>
 804958c:	4770      	bx	lr
 804958e:	bf00      	nop
 8049590:	7fc00000 	.word	0x7fc00000

08049594 <siprintf>:
 8049594:	b40e      	push	{r1, r2, r3}
 8049596:	b500      	push	{lr}
 8049598:	b09c      	sub	sp, #112	; 0x70
 804959a:	ab1d      	add	r3, sp, #116	; 0x74
 804959c:	9002      	str	r0, [sp, #8]
 804959e:	9006      	str	r0, [sp, #24]
 80495a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80495a4:	4809      	ldr	r0, [pc, #36]	; (80495cc <siprintf+0x38>)
 80495a6:	9107      	str	r1, [sp, #28]
 80495a8:	9104      	str	r1, [sp, #16]
 80495aa:	4909      	ldr	r1, [pc, #36]	; (80495d0 <siprintf+0x3c>)
 80495ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80495b0:	9105      	str	r1, [sp, #20]
 80495b2:	6800      	ldr	r0, [r0, #0]
 80495b4:	9301      	str	r3, [sp, #4]
 80495b6:	a902      	add	r1, sp, #8
 80495b8:	f002 ff1a 	bl	804c3f0 <_svfiprintf_r>
 80495bc:	9b02      	ldr	r3, [sp, #8]
 80495be:	2200      	movs	r2, #0
 80495c0:	701a      	strb	r2, [r3, #0]
 80495c2:	b01c      	add	sp, #112	; 0x70
 80495c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80495c8:	b003      	add	sp, #12
 80495ca:	4770      	bx	lr
 80495cc:	20000014 	.word	0x20000014
 80495d0:	ffff0208 	.word	0xffff0208

080495d4 <sulp>:
 80495d4:	b570      	push	{r4, r5, r6, lr}
 80495d6:	4604      	mov	r4, r0
 80495d8:	460d      	mov	r5, r1
 80495da:	ec45 4b10 	vmov	d0, r4, r5
 80495de:	4616      	mov	r6, r2
 80495e0:	f002 fc64 	bl	804beac <__ulp>
 80495e4:	ec51 0b10 	vmov	r0, r1, d0
 80495e8:	b17e      	cbz	r6, 804960a <sulp+0x36>
 80495ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80495ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80495f2:	2b00      	cmp	r3, #0
 80495f4:	dd09      	ble.n	804960a <sulp+0x36>
 80495f6:	051b      	lsls	r3, r3, #20
 80495f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80495fc:	2400      	movs	r4, #0
 80495fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8049602:	4622      	mov	r2, r4
 8049604:	462b      	mov	r3, r5
 8049606:	f7f6 fff7 	bl	80405f8 <__aeabi_dmul>
 804960a:	bd70      	pop	{r4, r5, r6, pc}
 804960c:	0000      	movs	r0, r0
	...

08049610 <_strtod_l>:
 8049610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049614:	ed2d 8b02 	vpush	{d8}
 8049618:	b09d      	sub	sp, #116	; 0x74
 804961a:	461f      	mov	r7, r3
 804961c:	2300      	movs	r3, #0
 804961e:	9318      	str	r3, [sp, #96]	; 0x60
 8049620:	4ba2      	ldr	r3, [pc, #648]	; (80498ac <_strtod_l+0x29c>)
 8049622:	9213      	str	r2, [sp, #76]	; 0x4c
 8049624:	681b      	ldr	r3, [r3, #0]
 8049626:	9305      	str	r3, [sp, #20]
 8049628:	4604      	mov	r4, r0
 804962a:	4618      	mov	r0, r3
 804962c:	4688      	mov	r8, r1
 804962e:	f7f6 fdcf 	bl	80401d0 <strlen>
 8049632:	f04f 0a00 	mov.w	sl, #0
 8049636:	4605      	mov	r5, r0
 8049638:	f04f 0b00 	mov.w	fp, #0
 804963c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8049640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049642:	781a      	ldrb	r2, [r3, #0]
 8049644:	2a2b      	cmp	r2, #43	; 0x2b
 8049646:	d04e      	beq.n	80496e6 <_strtod_l+0xd6>
 8049648:	d83b      	bhi.n	80496c2 <_strtod_l+0xb2>
 804964a:	2a0d      	cmp	r2, #13
 804964c:	d834      	bhi.n	80496b8 <_strtod_l+0xa8>
 804964e:	2a08      	cmp	r2, #8
 8049650:	d834      	bhi.n	80496bc <_strtod_l+0xac>
 8049652:	2a00      	cmp	r2, #0
 8049654:	d03e      	beq.n	80496d4 <_strtod_l+0xc4>
 8049656:	2300      	movs	r3, #0
 8049658:	930a      	str	r3, [sp, #40]	; 0x28
 804965a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 804965c:	7833      	ldrb	r3, [r6, #0]
 804965e:	2b30      	cmp	r3, #48	; 0x30
 8049660:	f040 80b0 	bne.w	80497c4 <_strtod_l+0x1b4>
 8049664:	7873      	ldrb	r3, [r6, #1]
 8049666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804966a:	2b58      	cmp	r3, #88	; 0x58
 804966c:	d168      	bne.n	8049740 <_strtod_l+0x130>
 804966e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8049670:	9301      	str	r3, [sp, #4]
 8049672:	ab18      	add	r3, sp, #96	; 0x60
 8049674:	9702      	str	r7, [sp, #8]
 8049676:	9300      	str	r3, [sp, #0]
 8049678:	4a8d      	ldr	r2, [pc, #564]	; (80498b0 <_strtod_l+0x2a0>)
 804967a:	ab19      	add	r3, sp, #100	; 0x64
 804967c:	a917      	add	r1, sp, #92	; 0x5c
 804967e:	4620      	mov	r0, r4
 8049680:	f001 fd7c 	bl	804b17c <__gethex>
 8049684:	f010 0707 	ands.w	r7, r0, #7
 8049688:	4605      	mov	r5, r0
 804968a:	d005      	beq.n	8049698 <_strtod_l+0x88>
 804968c:	2f06      	cmp	r7, #6
 804968e:	d12c      	bne.n	80496ea <_strtod_l+0xda>
 8049690:	3601      	adds	r6, #1
 8049692:	2300      	movs	r3, #0
 8049694:	9617      	str	r6, [sp, #92]	; 0x5c
 8049696:	930a      	str	r3, [sp, #40]	; 0x28
 8049698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 804969a:	2b00      	cmp	r3, #0
 804969c:	f040 8590 	bne.w	804a1c0 <_strtod_l+0xbb0>
 80496a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80496a2:	b1eb      	cbz	r3, 80496e0 <_strtod_l+0xd0>
 80496a4:	4652      	mov	r2, sl
 80496a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80496aa:	ec43 2b10 	vmov	d0, r2, r3
 80496ae:	b01d      	add	sp, #116	; 0x74
 80496b0:	ecbd 8b02 	vpop	{d8}
 80496b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80496b8:	2a20      	cmp	r2, #32
 80496ba:	d1cc      	bne.n	8049656 <_strtod_l+0x46>
 80496bc:	3301      	adds	r3, #1
 80496be:	9317      	str	r3, [sp, #92]	; 0x5c
 80496c0:	e7be      	b.n	8049640 <_strtod_l+0x30>
 80496c2:	2a2d      	cmp	r2, #45	; 0x2d
 80496c4:	d1c7      	bne.n	8049656 <_strtod_l+0x46>
 80496c6:	2201      	movs	r2, #1
 80496c8:	920a      	str	r2, [sp, #40]	; 0x28
 80496ca:	1c5a      	adds	r2, r3, #1
 80496cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80496ce:	785b      	ldrb	r3, [r3, #1]
 80496d0:	2b00      	cmp	r3, #0
 80496d2:	d1c2      	bne.n	804965a <_strtod_l+0x4a>
 80496d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80496d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80496da:	2b00      	cmp	r3, #0
 80496dc:	f040 856e 	bne.w	804a1bc <_strtod_l+0xbac>
 80496e0:	4652      	mov	r2, sl
 80496e2:	465b      	mov	r3, fp
 80496e4:	e7e1      	b.n	80496aa <_strtod_l+0x9a>
 80496e6:	2200      	movs	r2, #0
 80496e8:	e7ee      	b.n	80496c8 <_strtod_l+0xb8>
 80496ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80496ec:	b13a      	cbz	r2, 80496fe <_strtod_l+0xee>
 80496ee:	2135      	movs	r1, #53	; 0x35
 80496f0:	a81a      	add	r0, sp, #104	; 0x68
 80496f2:	f002 fce6 	bl	804c0c2 <__copybits>
 80496f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80496f8:	4620      	mov	r0, r4
 80496fa:	f002 f8a5 	bl	804b848 <_Bfree>
 80496fe:	3f01      	subs	r7, #1
 8049700:	2f04      	cmp	r7, #4
 8049702:	d806      	bhi.n	8049712 <_strtod_l+0x102>
 8049704:	e8df f007 	tbb	[pc, r7]
 8049708:	1714030a 	.word	0x1714030a
 804970c:	0a          	.byte	0x0a
 804970d:	00          	.byte	0x00
 804970e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8049712:	0728      	lsls	r0, r5, #28
 8049714:	d5c0      	bpl.n	8049698 <_strtod_l+0x88>
 8049716:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 804971a:	e7bd      	b.n	8049698 <_strtod_l+0x88>
 804971c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8049720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8049722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8049726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 804972a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 804972e:	e7f0      	b.n	8049712 <_strtod_l+0x102>
 8049730:	f8df b180 	ldr.w	fp, [pc, #384]	; 80498b4 <_strtod_l+0x2a4>
 8049734:	e7ed      	b.n	8049712 <_strtod_l+0x102>
 8049736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 804973a:	f04f 3aff 	mov.w	sl, #4294967295
 804973e:	e7e8      	b.n	8049712 <_strtod_l+0x102>
 8049740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049742:	1c5a      	adds	r2, r3, #1
 8049744:	9217      	str	r2, [sp, #92]	; 0x5c
 8049746:	785b      	ldrb	r3, [r3, #1]
 8049748:	2b30      	cmp	r3, #48	; 0x30
 804974a:	d0f9      	beq.n	8049740 <_strtod_l+0x130>
 804974c:	2b00      	cmp	r3, #0
 804974e:	d0a3      	beq.n	8049698 <_strtod_l+0x88>
 8049750:	2301      	movs	r3, #1
 8049752:	f04f 0900 	mov.w	r9, #0
 8049756:	9304      	str	r3, [sp, #16]
 8049758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 804975a:	9308      	str	r3, [sp, #32]
 804975c:	f8cd 901c 	str.w	r9, [sp, #28]
 8049760:	464f      	mov	r7, r9
 8049762:	220a      	movs	r2, #10
 8049764:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8049766:	7806      	ldrb	r6, [r0, #0]
 8049768:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 804976c:	b2d9      	uxtb	r1, r3
 804976e:	2909      	cmp	r1, #9
 8049770:	d92a      	bls.n	80497c8 <_strtod_l+0x1b8>
 8049772:	9905      	ldr	r1, [sp, #20]
 8049774:	462a      	mov	r2, r5
 8049776:	f002 ff53 	bl	804c620 <strncmp>
 804977a:	b398      	cbz	r0, 80497e4 <_strtod_l+0x1d4>
 804977c:	2000      	movs	r0, #0
 804977e:	4632      	mov	r2, r6
 8049780:	463d      	mov	r5, r7
 8049782:	9005      	str	r0, [sp, #20]
 8049784:	4603      	mov	r3, r0
 8049786:	2a65      	cmp	r2, #101	; 0x65
 8049788:	d001      	beq.n	804978e <_strtod_l+0x17e>
 804978a:	2a45      	cmp	r2, #69	; 0x45
 804978c:	d118      	bne.n	80497c0 <_strtod_l+0x1b0>
 804978e:	b91d      	cbnz	r5, 8049798 <_strtod_l+0x188>
 8049790:	9a04      	ldr	r2, [sp, #16]
 8049792:	4302      	orrs	r2, r0
 8049794:	d09e      	beq.n	80496d4 <_strtod_l+0xc4>
 8049796:	2500      	movs	r5, #0
 8049798:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 804979c:	f108 0201 	add.w	r2, r8, #1
 80497a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80497a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80497a6:	2a2b      	cmp	r2, #43	; 0x2b
 80497a8:	d075      	beq.n	8049896 <_strtod_l+0x286>
 80497aa:	2a2d      	cmp	r2, #45	; 0x2d
 80497ac:	d07b      	beq.n	80498a6 <_strtod_l+0x296>
 80497ae:	f04f 0c00 	mov.w	ip, #0
 80497b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80497b6:	2909      	cmp	r1, #9
 80497b8:	f240 8082 	bls.w	80498c0 <_strtod_l+0x2b0>
 80497bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80497c0:	2600      	movs	r6, #0
 80497c2:	e09d      	b.n	8049900 <_strtod_l+0x2f0>
 80497c4:	2300      	movs	r3, #0
 80497c6:	e7c4      	b.n	8049752 <_strtod_l+0x142>
 80497c8:	2f08      	cmp	r7, #8
 80497ca:	bfd8      	it	le
 80497cc:	9907      	ldrle	r1, [sp, #28]
 80497ce:	f100 0001 	add.w	r0, r0, #1
 80497d2:	bfda      	itte	le
 80497d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80497d8:	9307      	strle	r3, [sp, #28]
 80497da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80497de:	3701      	adds	r7, #1
 80497e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80497e2:	e7bf      	b.n	8049764 <_strtod_l+0x154>
 80497e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80497e6:	195a      	adds	r2, r3, r5
 80497e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80497ea:	5d5a      	ldrb	r2, [r3, r5]
 80497ec:	2f00      	cmp	r7, #0
 80497ee:	d037      	beq.n	8049860 <_strtod_l+0x250>
 80497f0:	9005      	str	r0, [sp, #20]
 80497f2:	463d      	mov	r5, r7
 80497f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80497f8:	2b09      	cmp	r3, #9
 80497fa:	d912      	bls.n	8049822 <_strtod_l+0x212>
 80497fc:	2301      	movs	r3, #1
 80497fe:	e7c2      	b.n	8049786 <_strtod_l+0x176>
 8049800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049802:	1c5a      	adds	r2, r3, #1
 8049804:	9217      	str	r2, [sp, #92]	; 0x5c
 8049806:	785a      	ldrb	r2, [r3, #1]
 8049808:	3001      	adds	r0, #1
 804980a:	2a30      	cmp	r2, #48	; 0x30
 804980c:	d0f8      	beq.n	8049800 <_strtod_l+0x1f0>
 804980e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8049812:	2b08      	cmp	r3, #8
 8049814:	f200 84d9 	bhi.w	804a1ca <_strtod_l+0xbba>
 8049818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 804981a:	9005      	str	r0, [sp, #20]
 804981c:	2000      	movs	r0, #0
 804981e:	9308      	str	r3, [sp, #32]
 8049820:	4605      	mov	r5, r0
 8049822:	3a30      	subs	r2, #48	; 0x30
 8049824:	f100 0301 	add.w	r3, r0, #1
 8049828:	d014      	beq.n	8049854 <_strtod_l+0x244>
 804982a:	9905      	ldr	r1, [sp, #20]
 804982c:	4419      	add	r1, r3
 804982e:	9105      	str	r1, [sp, #20]
 8049830:	462b      	mov	r3, r5
 8049832:	eb00 0e05 	add.w	lr, r0, r5
 8049836:	210a      	movs	r1, #10
 8049838:	4573      	cmp	r3, lr
 804983a:	d113      	bne.n	8049864 <_strtod_l+0x254>
 804983c:	182b      	adds	r3, r5, r0
 804983e:	2b08      	cmp	r3, #8
 8049840:	f105 0501 	add.w	r5, r5, #1
 8049844:	4405      	add	r5, r0
 8049846:	dc1c      	bgt.n	8049882 <_strtod_l+0x272>
 8049848:	9907      	ldr	r1, [sp, #28]
 804984a:	230a      	movs	r3, #10
 804984c:	fb03 2301 	mla	r3, r3, r1, r2
 8049850:	9307      	str	r3, [sp, #28]
 8049852:	2300      	movs	r3, #0
 8049854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8049856:	1c51      	adds	r1, r2, #1
 8049858:	9117      	str	r1, [sp, #92]	; 0x5c
 804985a:	7852      	ldrb	r2, [r2, #1]
 804985c:	4618      	mov	r0, r3
 804985e:	e7c9      	b.n	80497f4 <_strtod_l+0x1e4>
 8049860:	4638      	mov	r0, r7
 8049862:	e7d2      	b.n	804980a <_strtod_l+0x1fa>
 8049864:	2b08      	cmp	r3, #8
 8049866:	dc04      	bgt.n	8049872 <_strtod_l+0x262>
 8049868:	9e07      	ldr	r6, [sp, #28]
 804986a:	434e      	muls	r6, r1
 804986c:	9607      	str	r6, [sp, #28]
 804986e:	3301      	adds	r3, #1
 8049870:	e7e2      	b.n	8049838 <_strtod_l+0x228>
 8049872:	f103 0c01 	add.w	ip, r3, #1
 8049876:	f1bc 0f10 	cmp.w	ip, #16
 804987a:	bfd8      	it	le
 804987c:	fb01 f909 	mulle.w	r9, r1, r9
 8049880:	e7f5      	b.n	804986e <_strtod_l+0x25e>
 8049882:	2d10      	cmp	r5, #16
 8049884:	bfdc      	itt	le
 8049886:	230a      	movle	r3, #10
 8049888:	fb03 2909 	mlale	r9, r3, r9, r2
 804988c:	e7e1      	b.n	8049852 <_strtod_l+0x242>
 804988e:	2300      	movs	r3, #0
 8049890:	9305      	str	r3, [sp, #20]
 8049892:	2301      	movs	r3, #1
 8049894:	e77c      	b.n	8049790 <_strtod_l+0x180>
 8049896:	f04f 0c00 	mov.w	ip, #0
 804989a:	f108 0202 	add.w	r2, r8, #2
 804989e:	9217      	str	r2, [sp, #92]	; 0x5c
 80498a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80498a4:	e785      	b.n	80497b2 <_strtod_l+0x1a2>
 80498a6:	f04f 0c01 	mov.w	ip, #1
 80498aa:	e7f6      	b.n	804989a <_strtod_l+0x28a>
 80498ac:	0804e48c 	.word	0x0804e48c
 80498b0:	0804e220 	.word	0x0804e220
 80498b4:	7ff00000 	.word	0x7ff00000
 80498b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80498ba:	1c51      	adds	r1, r2, #1
 80498bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80498be:	7852      	ldrb	r2, [r2, #1]
 80498c0:	2a30      	cmp	r2, #48	; 0x30
 80498c2:	d0f9      	beq.n	80498b8 <_strtod_l+0x2a8>
 80498c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80498c8:	2908      	cmp	r1, #8
 80498ca:	f63f af79 	bhi.w	80497c0 <_strtod_l+0x1b0>
 80498ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80498d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80498d4:	9206      	str	r2, [sp, #24]
 80498d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80498d8:	1c51      	adds	r1, r2, #1
 80498da:	9117      	str	r1, [sp, #92]	; 0x5c
 80498dc:	7852      	ldrb	r2, [r2, #1]
 80498de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80498e2:	2e09      	cmp	r6, #9
 80498e4:	d937      	bls.n	8049956 <_strtod_l+0x346>
 80498e6:	9e06      	ldr	r6, [sp, #24]
 80498e8:	1b89      	subs	r1, r1, r6
 80498ea:	2908      	cmp	r1, #8
 80498ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80498f0:	dc02      	bgt.n	80498f8 <_strtod_l+0x2e8>
 80498f2:	4576      	cmp	r6, lr
 80498f4:	bfa8      	it	ge
 80498f6:	4676      	movge	r6, lr
 80498f8:	f1bc 0f00 	cmp.w	ip, #0
 80498fc:	d000      	beq.n	8049900 <_strtod_l+0x2f0>
 80498fe:	4276      	negs	r6, r6
 8049900:	2d00      	cmp	r5, #0
 8049902:	d14d      	bne.n	80499a0 <_strtod_l+0x390>
 8049904:	9904      	ldr	r1, [sp, #16]
 8049906:	4301      	orrs	r1, r0
 8049908:	f47f aec6 	bne.w	8049698 <_strtod_l+0x88>
 804990c:	2b00      	cmp	r3, #0
 804990e:	f47f aee1 	bne.w	80496d4 <_strtod_l+0xc4>
 8049912:	2a69      	cmp	r2, #105	; 0x69
 8049914:	d027      	beq.n	8049966 <_strtod_l+0x356>
 8049916:	dc24      	bgt.n	8049962 <_strtod_l+0x352>
 8049918:	2a49      	cmp	r2, #73	; 0x49
 804991a:	d024      	beq.n	8049966 <_strtod_l+0x356>
 804991c:	2a4e      	cmp	r2, #78	; 0x4e
 804991e:	f47f aed9 	bne.w	80496d4 <_strtod_l+0xc4>
 8049922:	499f      	ldr	r1, [pc, #636]	; (8049ba0 <_strtod_l+0x590>)
 8049924:	a817      	add	r0, sp, #92	; 0x5c
 8049926:	f001 fe81 	bl	804b62c <__match>
 804992a:	2800      	cmp	r0, #0
 804992c:	f43f aed2 	beq.w	80496d4 <_strtod_l+0xc4>
 8049930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049932:	781b      	ldrb	r3, [r3, #0]
 8049934:	2b28      	cmp	r3, #40	; 0x28
 8049936:	d12d      	bne.n	8049994 <_strtod_l+0x384>
 8049938:	499a      	ldr	r1, [pc, #616]	; (8049ba4 <_strtod_l+0x594>)
 804993a:	aa1a      	add	r2, sp, #104	; 0x68
 804993c:	a817      	add	r0, sp, #92	; 0x5c
 804993e:	f001 fe89 	bl	804b654 <__hexnan>
 8049942:	2805      	cmp	r0, #5
 8049944:	d126      	bne.n	8049994 <_strtod_l+0x384>
 8049946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8049948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 804994c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8049950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8049954:	e6a0      	b.n	8049698 <_strtod_l+0x88>
 8049956:	210a      	movs	r1, #10
 8049958:	fb01 2e0e 	mla	lr, r1, lr, r2
 804995c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8049960:	e7b9      	b.n	80498d6 <_strtod_l+0x2c6>
 8049962:	2a6e      	cmp	r2, #110	; 0x6e
 8049964:	e7db      	b.n	804991e <_strtod_l+0x30e>
 8049966:	4990      	ldr	r1, [pc, #576]	; (8049ba8 <_strtod_l+0x598>)
 8049968:	a817      	add	r0, sp, #92	; 0x5c
 804996a:	f001 fe5f 	bl	804b62c <__match>
 804996e:	2800      	cmp	r0, #0
 8049970:	f43f aeb0 	beq.w	80496d4 <_strtod_l+0xc4>
 8049974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049976:	498d      	ldr	r1, [pc, #564]	; (8049bac <_strtod_l+0x59c>)
 8049978:	3b01      	subs	r3, #1
 804997a:	a817      	add	r0, sp, #92	; 0x5c
 804997c:	9317      	str	r3, [sp, #92]	; 0x5c
 804997e:	f001 fe55 	bl	804b62c <__match>
 8049982:	b910      	cbnz	r0, 804998a <_strtod_l+0x37a>
 8049984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049986:	3301      	adds	r3, #1
 8049988:	9317      	str	r3, [sp, #92]	; 0x5c
 804998a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8049bbc <_strtod_l+0x5ac>
 804998e:	f04f 0a00 	mov.w	sl, #0
 8049992:	e681      	b.n	8049698 <_strtod_l+0x88>
 8049994:	4886      	ldr	r0, [pc, #536]	; (8049bb0 <_strtod_l+0x5a0>)
 8049996:	f002 fe2b 	bl	804c5f0 <nan>
 804999a:	ec5b ab10 	vmov	sl, fp, d0
 804999e:	e67b      	b.n	8049698 <_strtod_l+0x88>
 80499a0:	9b05      	ldr	r3, [sp, #20]
 80499a2:	9807      	ldr	r0, [sp, #28]
 80499a4:	1af3      	subs	r3, r6, r3
 80499a6:	2f00      	cmp	r7, #0
 80499a8:	bf08      	it	eq
 80499aa:	462f      	moveq	r7, r5
 80499ac:	2d10      	cmp	r5, #16
 80499ae:	9306      	str	r3, [sp, #24]
 80499b0:	46a8      	mov	r8, r5
 80499b2:	bfa8      	it	ge
 80499b4:	f04f 0810 	movge.w	r8, #16
 80499b8:	f7f6 fda4 	bl	8040504 <__aeabi_ui2d>
 80499bc:	2d09      	cmp	r5, #9
 80499be:	4682      	mov	sl, r0
 80499c0:	468b      	mov	fp, r1
 80499c2:	dd13      	ble.n	80499ec <_strtod_l+0x3dc>
 80499c4:	4b7b      	ldr	r3, [pc, #492]	; (8049bb4 <_strtod_l+0x5a4>)
 80499c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80499ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80499ce:	f7f6 fe13 	bl	80405f8 <__aeabi_dmul>
 80499d2:	4682      	mov	sl, r0
 80499d4:	4648      	mov	r0, r9
 80499d6:	468b      	mov	fp, r1
 80499d8:	f7f6 fd94 	bl	8040504 <__aeabi_ui2d>
 80499dc:	4602      	mov	r2, r0
 80499de:	460b      	mov	r3, r1
 80499e0:	4650      	mov	r0, sl
 80499e2:	4659      	mov	r1, fp
 80499e4:	f7f6 fc52 	bl	804028c <__adddf3>
 80499e8:	4682      	mov	sl, r0
 80499ea:	468b      	mov	fp, r1
 80499ec:	2d0f      	cmp	r5, #15
 80499ee:	dc38      	bgt.n	8049a62 <_strtod_l+0x452>
 80499f0:	9b06      	ldr	r3, [sp, #24]
 80499f2:	2b00      	cmp	r3, #0
 80499f4:	f43f ae50 	beq.w	8049698 <_strtod_l+0x88>
 80499f8:	dd24      	ble.n	8049a44 <_strtod_l+0x434>
 80499fa:	2b16      	cmp	r3, #22
 80499fc:	dc0b      	bgt.n	8049a16 <_strtod_l+0x406>
 80499fe:	496d      	ldr	r1, [pc, #436]	; (8049bb4 <_strtod_l+0x5a4>)
 8049a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8049a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049a08:	4652      	mov	r2, sl
 8049a0a:	465b      	mov	r3, fp
 8049a0c:	f7f6 fdf4 	bl	80405f8 <__aeabi_dmul>
 8049a10:	4682      	mov	sl, r0
 8049a12:	468b      	mov	fp, r1
 8049a14:	e640      	b.n	8049698 <_strtod_l+0x88>
 8049a16:	9a06      	ldr	r2, [sp, #24]
 8049a18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8049a1c:	4293      	cmp	r3, r2
 8049a1e:	db20      	blt.n	8049a62 <_strtod_l+0x452>
 8049a20:	4c64      	ldr	r4, [pc, #400]	; (8049bb4 <_strtod_l+0x5a4>)
 8049a22:	f1c5 050f 	rsb	r5, r5, #15
 8049a26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8049a2a:	4652      	mov	r2, sl
 8049a2c:	465b      	mov	r3, fp
 8049a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049a32:	f7f6 fde1 	bl	80405f8 <__aeabi_dmul>
 8049a36:	9b06      	ldr	r3, [sp, #24]
 8049a38:	1b5d      	subs	r5, r3, r5
 8049a3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8049a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8049a42:	e7e3      	b.n	8049a0c <_strtod_l+0x3fc>
 8049a44:	9b06      	ldr	r3, [sp, #24]
 8049a46:	3316      	adds	r3, #22
 8049a48:	db0b      	blt.n	8049a62 <_strtod_l+0x452>
 8049a4a:	9b05      	ldr	r3, [sp, #20]
 8049a4c:	1b9e      	subs	r6, r3, r6
 8049a4e:	4b59      	ldr	r3, [pc, #356]	; (8049bb4 <_strtod_l+0x5a4>)
 8049a50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8049a54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8049a58:	4650      	mov	r0, sl
 8049a5a:	4659      	mov	r1, fp
 8049a5c:	f7f6 fef6 	bl	804084c <__aeabi_ddiv>
 8049a60:	e7d6      	b.n	8049a10 <_strtod_l+0x400>
 8049a62:	9b06      	ldr	r3, [sp, #24]
 8049a64:	eba5 0808 	sub.w	r8, r5, r8
 8049a68:	4498      	add	r8, r3
 8049a6a:	f1b8 0f00 	cmp.w	r8, #0
 8049a6e:	dd74      	ble.n	8049b5a <_strtod_l+0x54a>
 8049a70:	f018 030f 	ands.w	r3, r8, #15
 8049a74:	d00a      	beq.n	8049a8c <_strtod_l+0x47c>
 8049a76:	494f      	ldr	r1, [pc, #316]	; (8049bb4 <_strtod_l+0x5a4>)
 8049a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8049a7c:	4652      	mov	r2, sl
 8049a7e:	465b      	mov	r3, fp
 8049a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049a84:	f7f6 fdb8 	bl	80405f8 <__aeabi_dmul>
 8049a88:	4682      	mov	sl, r0
 8049a8a:	468b      	mov	fp, r1
 8049a8c:	f038 080f 	bics.w	r8, r8, #15
 8049a90:	d04f      	beq.n	8049b32 <_strtod_l+0x522>
 8049a92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8049a96:	dd22      	ble.n	8049ade <_strtod_l+0x4ce>
 8049a98:	2500      	movs	r5, #0
 8049a9a:	462e      	mov	r6, r5
 8049a9c:	9507      	str	r5, [sp, #28]
 8049a9e:	9505      	str	r5, [sp, #20]
 8049aa0:	2322      	movs	r3, #34	; 0x22
 8049aa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8049bbc <_strtod_l+0x5ac>
 8049aa6:	6023      	str	r3, [r4, #0]
 8049aa8:	f04f 0a00 	mov.w	sl, #0
 8049aac:	9b07      	ldr	r3, [sp, #28]
 8049aae:	2b00      	cmp	r3, #0
 8049ab0:	f43f adf2 	beq.w	8049698 <_strtod_l+0x88>
 8049ab4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049ab6:	4620      	mov	r0, r4
 8049ab8:	f001 fec6 	bl	804b848 <_Bfree>
 8049abc:	9905      	ldr	r1, [sp, #20]
 8049abe:	4620      	mov	r0, r4
 8049ac0:	f001 fec2 	bl	804b848 <_Bfree>
 8049ac4:	4631      	mov	r1, r6
 8049ac6:	4620      	mov	r0, r4
 8049ac8:	f001 febe 	bl	804b848 <_Bfree>
 8049acc:	9907      	ldr	r1, [sp, #28]
 8049ace:	4620      	mov	r0, r4
 8049ad0:	f001 feba 	bl	804b848 <_Bfree>
 8049ad4:	4629      	mov	r1, r5
 8049ad6:	4620      	mov	r0, r4
 8049ad8:	f001 feb6 	bl	804b848 <_Bfree>
 8049adc:	e5dc      	b.n	8049698 <_strtod_l+0x88>
 8049ade:	4b36      	ldr	r3, [pc, #216]	; (8049bb8 <_strtod_l+0x5a8>)
 8049ae0:	9304      	str	r3, [sp, #16]
 8049ae2:	2300      	movs	r3, #0
 8049ae4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8049ae8:	4650      	mov	r0, sl
 8049aea:	4659      	mov	r1, fp
 8049aec:	4699      	mov	r9, r3
 8049aee:	f1b8 0f01 	cmp.w	r8, #1
 8049af2:	dc21      	bgt.n	8049b38 <_strtod_l+0x528>
 8049af4:	b10b      	cbz	r3, 8049afa <_strtod_l+0x4ea>
 8049af6:	4682      	mov	sl, r0
 8049af8:	468b      	mov	fp, r1
 8049afa:	4b2f      	ldr	r3, [pc, #188]	; (8049bb8 <_strtod_l+0x5a8>)
 8049afc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8049b00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8049b04:	4652      	mov	r2, sl
 8049b06:	465b      	mov	r3, fp
 8049b08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8049b0c:	f7f6 fd74 	bl	80405f8 <__aeabi_dmul>
 8049b10:	4b2a      	ldr	r3, [pc, #168]	; (8049bbc <_strtod_l+0x5ac>)
 8049b12:	460a      	mov	r2, r1
 8049b14:	400b      	ands	r3, r1
 8049b16:	492a      	ldr	r1, [pc, #168]	; (8049bc0 <_strtod_l+0x5b0>)
 8049b18:	428b      	cmp	r3, r1
 8049b1a:	4682      	mov	sl, r0
 8049b1c:	d8bc      	bhi.n	8049a98 <_strtod_l+0x488>
 8049b1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8049b22:	428b      	cmp	r3, r1
 8049b24:	bf86      	itte	hi
 8049b26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8049bc4 <_strtod_l+0x5b4>
 8049b2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8049b2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8049b32:	2300      	movs	r3, #0
 8049b34:	9304      	str	r3, [sp, #16]
 8049b36:	e084      	b.n	8049c42 <_strtod_l+0x632>
 8049b38:	f018 0f01 	tst.w	r8, #1
 8049b3c:	d005      	beq.n	8049b4a <_strtod_l+0x53a>
 8049b3e:	9b04      	ldr	r3, [sp, #16]
 8049b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b44:	f7f6 fd58 	bl	80405f8 <__aeabi_dmul>
 8049b48:	2301      	movs	r3, #1
 8049b4a:	9a04      	ldr	r2, [sp, #16]
 8049b4c:	3208      	adds	r2, #8
 8049b4e:	f109 0901 	add.w	r9, r9, #1
 8049b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8049b56:	9204      	str	r2, [sp, #16]
 8049b58:	e7c9      	b.n	8049aee <_strtod_l+0x4de>
 8049b5a:	d0ea      	beq.n	8049b32 <_strtod_l+0x522>
 8049b5c:	f1c8 0800 	rsb	r8, r8, #0
 8049b60:	f018 020f 	ands.w	r2, r8, #15
 8049b64:	d00a      	beq.n	8049b7c <_strtod_l+0x56c>
 8049b66:	4b13      	ldr	r3, [pc, #76]	; (8049bb4 <_strtod_l+0x5a4>)
 8049b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8049b6c:	4650      	mov	r0, sl
 8049b6e:	4659      	mov	r1, fp
 8049b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b74:	f7f6 fe6a 	bl	804084c <__aeabi_ddiv>
 8049b78:	4682      	mov	sl, r0
 8049b7a:	468b      	mov	fp, r1
 8049b7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8049b80:	d0d7      	beq.n	8049b32 <_strtod_l+0x522>
 8049b82:	f1b8 0f1f 	cmp.w	r8, #31
 8049b86:	dd1f      	ble.n	8049bc8 <_strtod_l+0x5b8>
 8049b88:	2500      	movs	r5, #0
 8049b8a:	462e      	mov	r6, r5
 8049b8c:	9507      	str	r5, [sp, #28]
 8049b8e:	9505      	str	r5, [sp, #20]
 8049b90:	2322      	movs	r3, #34	; 0x22
 8049b92:	f04f 0a00 	mov.w	sl, #0
 8049b96:	f04f 0b00 	mov.w	fp, #0
 8049b9a:	6023      	str	r3, [r4, #0]
 8049b9c:	e786      	b.n	8049aac <_strtod_l+0x49c>
 8049b9e:	bf00      	nop
 8049ba0:	0804e1f1 	.word	0x0804e1f1
 8049ba4:	0804e234 	.word	0x0804e234
 8049ba8:	0804e1e9 	.word	0x0804e1e9
 8049bac:	0804e399 	.word	0x0804e399
 8049bb0:	0804e648 	.word	0x0804e648
 8049bb4:	0804e528 	.word	0x0804e528
 8049bb8:	0804e500 	.word	0x0804e500
 8049bbc:	7ff00000 	.word	0x7ff00000
 8049bc0:	7ca00000 	.word	0x7ca00000
 8049bc4:	7fefffff 	.word	0x7fefffff
 8049bc8:	f018 0310 	ands.w	r3, r8, #16
 8049bcc:	bf18      	it	ne
 8049bce:	236a      	movne	r3, #106	; 0x6a
 8049bd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8049f80 <_strtod_l+0x970>
 8049bd4:	9304      	str	r3, [sp, #16]
 8049bd6:	4650      	mov	r0, sl
 8049bd8:	4659      	mov	r1, fp
 8049bda:	2300      	movs	r3, #0
 8049bdc:	f018 0f01 	tst.w	r8, #1
 8049be0:	d004      	beq.n	8049bec <_strtod_l+0x5dc>
 8049be2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8049be6:	f7f6 fd07 	bl	80405f8 <__aeabi_dmul>
 8049bea:	2301      	movs	r3, #1
 8049bec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8049bf0:	f109 0908 	add.w	r9, r9, #8
 8049bf4:	d1f2      	bne.n	8049bdc <_strtod_l+0x5cc>
 8049bf6:	b10b      	cbz	r3, 8049bfc <_strtod_l+0x5ec>
 8049bf8:	4682      	mov	sl, r0
 8049bfa:	468b      	mov	fp, r1
 8049bfc:	9b04      	ldr	r3, [sp, #16]
 8049bfe:	b1c3      	cbz	r3, 8049c32 <_strtod_l+0x622>
 8049c00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8049c04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8049c08:	2b00      	cmp	r3, #0
 8049c0a:	4659      	mov	r1, fp
 8049c0c:	dd11      	ble.n	8049c32 <_strtod_l+0x622>
 8049c0e:	2b1f      	cmp	r3, #31
 8049c10:	f340 8124 	ble.w	8049e5c <_strtod_l+0x84c>
 8049c14:	2b34      	cmp	r3, #52	; 0x34
 8049c16:	bfde      	ittt	le
 8049c18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8049c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8049c20:	fa03 f202 	lslle.w	r2, r3, r2
 8049c24:	f04f 0a00 	mov.w	sl, #0
 8049c28:	bfcc      	ite	gt
 8049c2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8049c2e:	ea02 0b01 	andle.w	fp, r2, r1
 8049c32:	2200      	movs	r2, #0
 8049c34:	2300      	movs	r3, #0
 8049c36:	4650      	mov	r0, sl
 8049c38:	4659      	mov	r1, fp
 8049c3a:	f7f6 ff45 	bl	8040ac8 <__aeabi_dcmpeq>
 8049c3e:	2800      	cmp	r0, #0
 8049c40:	d1a2      	bne.n	8049b88 <_strtod_l+0x578>
 8049c42:	9b07      	ldr	r3, [sp, #28]
 8049c44:	9300      	str	r3, [sp, #0]
 8049c46:	9908      	ldr	r1, [sp, #32]
 8049c48:	462b      	mov	r3, r5
 8049c4a:	463a      	mov	r2, r7
 8049c4c:	4620      	mov	r0, r4
 8049c4e:	f001 fe63 	bl	804b918 <__s2b>
 8049c52:	9007      	str	r0, [sp, #28]
 8049c54:	2800      	cmp	r0, #0
 8049c56:	f43f af1f 	beq.w	8049a98 <_strtod_l+0x488>
 8049c5a:	9b05      	ldr	r3, [sp, #20]
 8049c5c:	1b9e      	subs	r6, r3, r6
 8049c5e:	9b06      	ldr	r3, [sp, #24]
 8049c60:	2b00      	cmp	r3, #0
 8049c62:	bfb4      	ite	lt
 8049c64:	4633      	movlt	r3, r6
 8049c66:	2300      	movge	r3, #0
 8049c68:	930c      	str	r3, [sp, #48]	; 0x30
 8049c6a:	9b06      	ldr	r3, [sp, #24]
 8049c6c:	2500      	movs	r5, #0
 8049c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8049c72:	9312      	str	r3, [sp, #72]	; 0x48
 8049c74:	462e      	mov	r6, r5
 8049c76:	9b07      	ldr	r3, [sp, #28]
 8049c78:	4620      	mov	r0, r4
 8049c7a:	6859      	ldr	r1, [r3, #4]
 8049c7c:	f001 fda4 	bl	804b7c8 <_Balloc>
 8049c80:	9005      	str	r0, [sp, #20]
 8049c82:	2800      	cmp	r0, #0
 8049c84:	f43f af0c 	beq.w	8049aa0 <_strtod_l+0x490>
 8049c88:	9b07      	ldr	r3, [sp, #28]
 8049c8a:	691a      	ldr	r2, [r3, #16]
 8049c8c:	3202      	adds	r2, #2
 8049c8e:	f103 010c 	add.w	r1, r3, #12
 8049c92:	0092      	lsls	r2, r2, #2
 8049c94:	300c      	adds	r0, #12
 8049c96:	f7fe fde7 	bl	8048868 <memcpy>
 8049c9a:	ec4b ab10 	vmov	d0, sl, fp
 8049c9e:	aa1a      	add	r2, sp, #104	; 0x68
 8049ca0:	a919      	add	r1, sp, #100	; 0x64
 8049ca2:	4620      	mov	r0, r4
 8049ca4:	f002 f97e 	bl	804bfa4 <__d2b>
 8049ca8:	ec4b ab18 	vmov	d8, sl, fp
 8049cac:	9018      	str	r0, [sp, #96]	; 0x60
 8049cae:	2800      	cmp	r0, #0
 8049cb0:	f43f aef6 	beq.w	8049aa0 <_strtod_l+0x490>
 8049cb4:	2101      	movs	r1, #1
 8049cb6:	4620      	mov	r0, r4
 8049cb8:	f001 fec8 	bl	804ba4c <__i2b>
 8049cbc:	4606      	mov	r6, r0
 8049cbe:	2800      	cmp	r0, #0
 8049cc0:	f43f aeee 	beq.w	8049aa0 <_strtod_l+0x490>
 8049cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8049cc6:	9904      	ldr	r1, [sp, #16]
 8049cc8:	2b00      	cmp	r3, #0
 8049cca:	bfab      	itete	ge
 8049ccc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8049cce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8049cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8049cd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8049cd6:	bfac      	ite	ge
 8049cd8:	eb03 0902 	addge.w	r9, r3, r2
 8049cdc:	1ad7      	sublt	r7, r2, r3
 8049cde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8049ce0:	eba3 0801 	sub.w	r8, r3, r1
 8049ce4:	4490      	add	r8, r2
 8049ce6:	4ba1      	ldr	r3, [pc, #644]	; (8049f6c <_strtod_l+0x95c>)
 8049ce8:	f108 38ff 	add.w	r8, r8, #4294967295
 8049cec:	4598      	cmp	r8, r3
 8049cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8049cf2:	f280 80c7 	bge.w	8049e84 <_strtod_l+0x874>
 8049cf6:	eba3 0308 	sub.w	r3, r3, r8
 8049cfa:	2b1f      	cmp	r3, #31
 8049cfc:	eba2 0203 	sub.w	r2, r2, r3
 8049d00:	f04f 0101 	mov.w	r1, #1
 8049d04:	f300 80b1 	bgt.w	8049e6a <_strtod_l+0x85a>
 8049d08:	fa01 f303 	lsl.w	r3, r1, r3
 8049d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8049d0e:	2300      	movs	r3, #0
 8049d10:	9308      	str	r3, [sp, #32]
 8049d12:	eb09 0802 	add.w	r8, r9, r2
 8049d16:	9b04      	ldr	r3, [sp, #16]
 8049d18:	45c1      	cmp	r9, r8
 8049d1a:	4417      	add	r7, r2
 8049d1c:	441f      	add	r7, r3
 8049d1e:	464b      	mov	r3, r9
 8049d20:	bfa8      	it	ge
 8049d22:	4643      	movge	r3, r8
 8049d24:	42bb      	cmp	r3, r7
 8049d26:	bfa8      	it	ge
 8049d28:	463b      	movge	r3, r7
 8049d2a:	2b00      	cmp	r3, #0
 8049d2c:	bfc2      	ittt	gt
 8049d2e:	eba8 0803 	subgt.w	r8, r8, r3
 8049d32:	1aff      	subgt	r7, r7, r3
 8049d34:	eba9 0903 	subgt.w	r9, r9, r3
 8049d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8049d3a:	2b00      	cmp	r3, #0
 8049d3c:	dd17      	ble.n	8049d6e <_strtod_l+0x75e>
 8049d3e:	4631      	mov	r1, r6
 8049d40:	461a      	mov	r2, r3
 8049d42:	4620      	mov	r0, r4
 8049d44:	f001 ff42 	bl	804bbcc <__pow5mult>
 8049d48:	4606      	mov	r6, r0
 8049d4a:	2800      	cmp	r0, #0
 8049d4c:	f43f aea8 	beq.w	8049aa0 <_strtod_l+0x490>
 8049d50:	4601      	mov	r1, r0
 8049d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8049d54:	4620      	mov	r0, r4
 8049d56:	f001 fe8f 	bl	804ba78 <__multiply>
 8049d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8049d5c:	2800      	cmp	r0, #0
 8049d5e:	f43f ae9f 	beq.w	8049aa0 <_strtod_l+0x490>
 8049d62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049d64:	4620      	mov	r0, r4
 8049d66:	f001 fd6f 	bl	804b848 <_Bfree>
 8049d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049d6c:	9318      	str	r3, [sp, #96]	; 0x60
 8049d6e:	f1b8 0f00 	cmp.w	r8, #0
 8049d72:	f300 808c 	bgt.w	8049e8e <_strtod_l+0x87e>
 8049d76:	9b06      	ldr	r3, [sp, #24]
 8049d78:	2b00      	cmp	r3, #0
 8049d7a:	dd08      	ble.n	8049d8e <_strtod_l+0x77e>
 8049d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8049d7e:	9905      	ldr	r1, [sp, #20]
 8049d80:	4620      	mov	r0, r4
 8049d82:	f001 ff23 	bl	804bbcc <__pow5mult>
 8049d86:	9005      	str	r0, [sp, #20]
 8049d88:	2800      	cmp	r0, #0
 8049d8a:	f43f ae89 	beq.w	8049aa0 <_strtod_l+0x490>
 8049d8e:	2f00      	cmp	r7, #0
 8049d90:	dd08      	ble.n	8049da4 <_strtod_l+0x794>
 8049d92:	9905      	ldr	r1, [sp, #20]
 8049d94:	463a      	mov	r2, r7
 8049d96:	4620      	mov	r0, r4
 8049d98:	f001 ff72 	bl	804bc80 <__lshift>
 8049d9c:	9005      	str	r0, [sp, #20]
 8049d9e:	2800      	cmp	r0, #0
 8049da0:	f43f ae7e 	beq.w	8049aa0 <_strtod_l+0x490>
 8049da4:	f1b9 0f00 	cmp.w	r9, #0
 8049da8:	dd08      	ble.n	8049dbc <_strtod_l+0x7ac>
 8049daa:	4631      	mov	r1, r6
 8049dac:	464a      	mov	r2, r9
 8049dae:	4620      	mov	r0, r4
 8049db0:	f001 ff66 	bl	804bc80 <__lshift>
 8049db4:	4606      	mov	r6, r0
 8049db6:	2800      	cmp	r0, #0
 8049db8:	f43f ae72 	beq.w	8049aa0 <_strtod_l+0x490>
 8049dbc:	9a05      	ldr	r2, [sp, #20]
 8049dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049dc0:	4620      	mov	r0, r4
 8049dc2:	f001 ffe9 	bl	804bd98 <__mdiff>
 8049dc6:	4605      	mov	r5, r0
 8049dc8:	2800      	cmp	r0, #0
 8049dca:	f43f ae69 	beq.w	8049aa0 <_strtod_l+0x490>
 8049dce:	68c3      	ldr	r3, [r0, #12]
 8049dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8049dd2:	2300      	movs	r3, #0
 8049dd4:	60c3      	str	r3, [r0, #12]
 8049dd6:	4631      	mov	r1, r6
 8049dd8:	f001 ffc2 	bl	804bd60 <__mcmp>
 8049ddc:	2800      	cmp	r0, #0
 8049dde:	da60      	bge.n	8049ea2 <_strtod_l+0x892>
 8049de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049de2:	ea53 030a 	orrs.w	r3, r3, sl
 8049de6:	f040 8082 	bne.w	8049eee <_strtod_l+0x8de>
 8049dea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8049dee:	2b00      	cmp	r3, #0
 8049df0:	d17d      	bne.n	8049eee <_strtod_l+0x8de>
 8049df2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8049df6:	0d1b      	lsrs	r3, r3, #20
 8049df8:	051b      	lsls	r3, r3, #20
 8049dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8049dfe:	d976      	bls.n	8049eee <_strtod_l+0x8de>
 8049e00:	696b      	ldr	r3, [r5, #20]
 8049e02:	b913      	cbnz	r3, 8049e0a <_strtod_l+0x7fa>
 8049e04:	692b      	ldr	r3, [r5, #16]
 8049e06:	2b01      	cmp	r3, #1
 8049e08:	dd71      	ble.n	8049eee <_strtod_l+0x8de>
 8049e0a:	4629      	mov	r1, r5
 8049e0c:	2201      	movs	r2, #1
 8049e0e:	4620      	mov	r0, r4
 8049e10:	f001 ff36 	bl	804bc80 <__lshift>
 8049e14:	4631      	mov	r1, r6
 8049e16:	4605      	mov	r5, r0
 8049e18:	f001 ffa2 	bl	804bd60 <__mcmp>
 8049e1c:	2800      	cmp	r0, #0
 8049e1e:	dd66      	ble.n	8049eee <_strtod_l+0x8de>
 8049e20:	9904      	ldr	r1, [sp, #16]
 8049e22:	4a53      	ldr	r2, [pc, #332]	; (8049f70 <_strtod_l+0x960>)
 8049e24:	465b      	mov	r3, fp
 8049e26:	2900      	cmp	r1, #0
 8049e28:	f000 8081 	beq.w	8049f2e <_strtod_l+0x91e>
 8049e2c:	ea02 010b 	and.w	r1, r2, fp
 8049e30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8049e34:	dc7b      	bgt.n	8049f2e <_strtod_l+0x91e>
 8049e36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8049e3a:	f77f aea9 	ble.w	8049b90 <_strtod_l+0x580>
 8049e3e:	4b4d      	ldr	r3, [pc, #308]	; (8049f74 <_strtod_l+0x964>)
 8049e40:	4650      	mov	r0, sl
 8049e42:	4659      	mov	r1, fp
 8049e44:	2200      	movs	r2, #0
 8049e46:	f7f6 fbd7 	bl	80405f8 <__aeabi_dmul>
 8049e4a:	460b      	mov	r3, r1
 8049e4c:	4303      	orrs	r3, r0
 8049e4e:	bf08      	it	eq
 8049e50:	2322      	moveq	r3, #34	; 0x22
 8049e52:	4682      	mov	sl, r0
 8049e54:	468b      	mov	fp, r1
 8049e56:	bf08      	it	eq
 8049e58:	6023      	streq	r3, [r4, #0]
 8049e5a:	e62b      	b.n	8049ab4 <_strtod_l+0x4a4>
 8049e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8049e60:	fa02 f303 	lsl.w	r3, r2, r3
 8049e64:	ea03 0a0a 	and.w	sl, r3, sl
 8049e68:	e6e3      	b.n	8049c32 <_strtod_l+0x622>
 8049e6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8049e6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8049e72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8049e76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8049e7a:	fa01 f308 	lsl.w	r3, r1, r8
 8049e7e:	9308      	str	r3, [sp, #32]
 8049e80:	910d      	str	r1, [sp, #52]	; 0x34
 8049e82:	e746      	b.n	8049d12 <_strtod_l+0x702>
 8049e84:	2300      	movs	r3, #0
 8049e86:	9308      	str	r3, [sp, #32]
 8049e88:	2301      	movs	r3, #1
 8049e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8049e8c:	e741      	b.n	8049d12 <_strtod_l+0x702>
 8049e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049e90:	4642      	mov	r2, r8
 8049e92:	4620      	mov	r0, r4
 8049e94:	f001 fef4 	bl	804bc80 <__lshift>
 8049e98:	9018      	str	r0, [sp, #96]	; 0x60
 8049e9a:	2800      	cmp	r0, #0
 8049e9c:	f47f af6b 	bne.w	8049d76 <_strtod_l+0x766>
 8049ea0:	e5fe      	b.n	8049aa0 <_strtod_l+0x490>
 8049ea2:	465f      	mov	r7, fp
 8049ea4:	d16e      	bne.n	8049f84 <_strtod_l+0x974>
 8049ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8049ea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8049eac:	b342      	cbz	r2, 8049f00 <_strtod_l+0x8f0>
 8049eae:	4a32      	ldr	r2, [pc, #200]	; (8049f78 <_strtod_l+0x968>)
 8049eb0:	4293      	cmp	r3, r2
 8049eb2:	d128      	bne.n	8049f06 <_strtod_l+0x8f6>
 8049eb4:	9b04      	ldr	r3, [sp, #16]
 8049eb6:	4651      	mov	r1, sl
 8049eb8:	b1eb      	cbz	r3, 8049ef6 <_strtod_l+0x8e6>
 8049eba:	4b2d      	ldr	r3, [pc, #180]	; (8049f70 <_strtod_l+0x960>)
 8049ebc:	403b      	ands	r3, r7
 8049ebe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8049ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8049ec6:	d819      	bhi.n	8049efc <_strtod_l+0x8ec>
 8049ec8:	0d1b      	lsrs	r3, r3, #20
 8049eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8049ece:	fa02 f303 	lsl.w	r3, r2, r3
 8049ed2:	4299      	cmp	r1, r3
 8049ed4:	d117      	bne.n	8049f06 <_strtod_l+0x8f6>
 8049ed6:	4b29      	ldr	r3, [pc, #164]	; (8049f7c <_strtod_l+0x96c>)
 8049ed8:	429f      	cmp	r7, r3
 8049eda:	d102      	bne.n	8049ee2 <_strtod_l+0x8d2>
 8049edc:	3101      	adds	r1, #1
 8049ede:	f43f addf 	beq.w	8049aa0 <_strtod_l+0x490>
 8049ee2:	4b23      	ldr	r3, [pc, #140]	; (8049f70 <_strtod_l+0x960>)
 8049ee4:	403b      	ands	r3, r7
 8049ee6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8049eea:	f04f 0a00 	mov.w	sl, #0
 8049eee:	9b04      	ldr	r3, [sp, #16]
 8049ef0:	2b00      	cmp	r3, #0
 8049ef2:	d1a4      	bne.n	8049e3e <_strtod_l+0x82e>
 8049ef4:	e5de      	b.n	8049ab4 <_strtod_l+0x4a4>
 8049ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8049efa:	e7ea      	b.n	8049ed2 <_strtod_l+0x8c2>
 8049efc:	4613      	mov	r3, r2
 8049efe:	e7e8      	b.n	8049ed2 <_strtod_l+0x8c2>
 8049f00:	ea53 030a 	orrs.w	r3, r3, sl
 8049f04:	d08c      	beq.n	8049e20 <_strtod_l+0x810>
 8049f06:	9b08      	ldr	r3, [sp, #32]
 8049f08:	b1db      	cbz	r3, 8049f42 <_strtod_l+0x932>
 8049f0a:	423b      	tst	r3, r7
 8049f0c:	d0ef      	beq.n	8049eee <_strtod_l+0x8de>
 8049f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049f10:	9a04      	ldr	r2, [sp, #16]
 8049f12:	4650      	mov	r0, sl
 8049f14:	4659      	mov	r1, fp
 8049f16:	b1c3      	cbz	r3, 8049f4a <_strtod_l+0x93a>
 8049f18:	f7ff fb5c 	bl	80495d4 <sulp>
 8049f1c:	4602      	mov	r2, r0
 8049f1e:	460b      	mov	r3, r1
 8049f20:	ec51 0b18 	vmov	r0, r1, d8
 8049f24:	f7f6 f9b2 	bl	804028c <__adddf3>
 8049f28:	4682      	mov	sl, r0
 8049f2a:	468b      	mov	fp, r1
 8049f2c:	e7df      	b.n	8049eee <_strtod_l+0x8de>
 8049f2e:	4013      	ands	r3, r2
 8049f30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8049f34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8049f38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8049f3c:	f04f 3aff 	mov.w	sl, #4294967295
 8049f40:	e7d5      	b.n	8049eee <_strtod_l+0x8de>
 8049f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8049f44:	ea13 0f0a 	tst.w	r3, sl
 8049f48:	e7e0      	b.n	8049f0c <_strtod_l+0x8fc>
 8049f4a:	f7ff fb43 	bl	80495d4 <sulp>
 8049f4e:	4602      	mov	r2, r0
 8049f50:	460b      	mov	r3, r1
 8049f52:	ec51 0b18 	vmov	r0, r1, d8
 8049f56:	f7f6 f997 	bl	8040288 <__aeabi_dsub>
 8049f5a:	2200      	movs	r2, #0
 8049f5c:	2300      	movs	r3, #0
 8049f5e:	4682      	mov	sl, r0
 8049f60:	468b      	mov	fp, r1
 8049f62:	f7f6 fdb1 	bl	8040ac8 <__aeabi_dcmpeq>
 8049f66:	2800      	cmp	r0, #0
 8049f68:	d0c1      	beq.n	8049eee <_strtod_l+0x8de>
 8049f6a:	e611      	b.n	8049b90 <_strtod_l+0x580>
 8049f6c:	fffffc02 	.word	0xfffffc02
 8049f70:	7ff00000 	.word	0x7ff00000
 8049f74:	39500000 	.word	0x39500000
 8049f78:	000fffff 	.word	0x000fffff
 8049f7c:	7fefffff 	.word	0x7fefffff
 8049f80:	0804e248 	.word	0x0804e248
 8049f84:	4631      	mov	r1, r6
 8049f86:	4628      	mov	r0, r5
 8049f88:	f002 f868 	bl	804c05c <__ratio>
 8049f8c:	ec59 8b10 	vmov	r8, r9, d0
 8049f90:	ee10 0a10 	vmov	r0, s0
 8049f94:	2200      	movs	r2, #0
 8049f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8049f9a:	4649      	mov	r1, r9
 8049f9c:	f7f6 fda8 	bl	8040af0 <__aeabi_dcmple>
 8049fa0:	2800      	cmp	r0, #0
 8049fa2:	d07a      	beq.n	804a09a <_strtod_l+0xa8a>
 8049fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049fa6:	2b00      	cmp	r3, #0
 8049fa8:	d04a      	beq.n	804a040 <_strtod_l+0xa30>
 8049faa:	4b95      	ldr	r3, [pc, #596]	; (804a200 <_strtod_l+0xbf0>)
 8049fac:	2200      	movs	r2, #0
 8049fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8049fb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 804a200 <_strtod_l+0xbf0>
 8049fb6:	f04f 0800 	mov.w	r8, #0
 8049fba:	4b92      	ldr	r3, [pc, #584]	; (804a204 <_strtod_l+0xbf4>)
 8049fbc:	403b      	ands	r3, r7
 8049fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8049fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8049fc2:	4b91      	ldr	r3, [pc, #580]	; (804a208 <_strtod_l+0xbf8>)
 8049fc4:	429a      	cmp	r2, r3
 8049fc6:	f040 80b0 	bne.w	804a12a <_strtod_l+0xb1a>
 8049fca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8049fce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8049fd2:	ec4b ab10 	vmov	d0, sl, fp
 8049fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8049fda:	f001 ff67 	bl	804beac <__ulp>
 8049fde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8049fe2:	ec53 2b10 	vmov	r2, r3, d0
 8049fe6:	f7f6 fb07 	bl	80405f8 <__aeabi_dmul>
 8049fea:	4652      	mov	r2, sl
 8049fec:	465b      	mov	r3, fp
 8049fee:	f7f6 f94d 	bl	804028c <__adddf3>
 8049ff2:	460b      	mov	r3, r1
 8049ff4:	4983      	ldr	r1, [pc, #524]	; (804a204 <_strtod_l+0xbf4>)
 8049ff6:	4a85      	ldr	r2, [pc, #532]	; (804a20c <_strtod_l+0xbfc>)
 8049ff8:	4019      	ands	r1, r3
 8049ffa:	4291      	cmp	r1, r2
 8049ffc:	4682      	mov	sl, r0
 8049ffe:	d960      	bls.n	804a0c2 <_strtod_l+0xab2>
 804a000:	ee18 3a90 	vmov	r3, s17
 804a004:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 804a008:	4293      	cmp	r3, r2
 804a00a:	d104      	bne.n	804a016 <_strtod_l+0xa06>
 804a00c:	ee18 3a10 	vmov	r3, s16
 804a010:	3301      	adds	r3, #1
 804a012:	f43f ad45 	beq.w	8049aa0 <_strtod_l+0x490>
 804a016:	f8df b200 	ldr.w	fp, [pc, #512]	; 804a218 <_strtod_l+0xc08>
 804a01a:	f04f 3aff 	mov.w	sl, #4294967295
 804a01e:	9918      	ldr	r1, [sp, #96]	; 0x60
 804a020:	4620      	mov	r0, r4
 804a022:	f001 fc11 	bl	804b848 <_Bfree>
 804a026:	9905      	ldr	r1, [sp, #20]
 804a028:	4620      	mov	r0, r4
 804a02a:	f001 fc0d 	bl	804b848 <_Bfree>
 804a02e:	4631      	mov	r1, r6
 804a030:	4620      	mov	r0, r4
 804a032:	f001 fc09 	bl	804b848 <_Bfree>
 804a036:	4629      	mov	r1, r5
 804a038:	4620      	mov	r0, r4
 804a03a:	f001 fc05 	bl	804b848 <_Bfree>
 804a03e:	e61a      	b.n	8049c76 <_strtod_l+0x666>
 804a040:	f1ba 0f00 	cmp.w	sl, #0
 804a044:	d11b      	bne.n	804a07e <_strtod_l+0xa6e>
 804a046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a04a:	b9f3      	cbnz	r3, 804a08a <_strtod_l+0xa7a>
 804a04c:	4b6c      	ldr	r3, [pc, #432]	; (804a200 <_strtod_l+0xbf0>)
 804a04e:	2200      	movs	r2, #0
 804a050:	4640      	mov	r0, r8
 804a052:	4649      	mov	r1, r9
 804a054:	f7f6 fd42 	bl	8040adc <__aeabi_dcmplt>
 804a058:	b9d0      	cbnz	r0, 804a090 <_strtod_l+0xa80>
 804a05a:	4640      	mov	r0, r8
 804a05c:	4649      	mov	r1, r9
 804a05e:	4b6c      	ldr	r3, [pc, #432]	; (804a210 <_strtod_l+0xc00>)
 804a060:	2200      	movs	r2, #0
 804a062:	f7f6 fac9 	bl	80405f8 <__aeabi_dmul>
 804a066:	4680      	mov	r8, r0
 804a068:	4689      	mov	r9, r1
 804a06a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 804a06e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 804a072:	9315      	str	r3, [sp, #84]	; 0x54
 804a074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 804a078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804a07c:	e79d      	b.n	8049fba <_strtod_l+0x9aa>
 804a07e:	f1ba 0f01 	cmp.w	sl, #1
 804a082:	d102      	bne.n	804a08a <_strtod_l+0xa7a>
 804a084:	2f00      	cmp	r7, #0
 804a086:	f43f ad83 	beq.w	8049b90 <_strtod_l+0x580>
 804a08a:	4b62      	ldr	r3, [pc, #392]	; (804a214 <_strtod_l+0xc04>)
 804a08c:	2200      	movs	r2, #0
 804a08e:	e78e      	b.n	8049fae <_strtod_l+0x99e>
 804a090:	f8df 917c 	ldr.w	r9, [pc, #380]	; 804a210 <_strtod_l+0xc00>
 804a094:	f04f 0800 	mov.w	r8, #0
 804a098:	e7e7      	b.n	804a06a <_strtod_l+0xa5a>
 804a09a:	4b5d      	ldr	r3, [pc, #372]	; (804a210 <_strtod_l+0xc00>)
 804a09c:	4640      	mov	r0, r8
 804a09e:	4649      	mov	r1, r9
 804a0a0:	2200      	movs	r2, #0
 804a0a2:	f7f6 faa9 	bl	80405f8 <__aeabi_dmul>
 804a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a0a8:	4680      	mov	r8, r0
 804a0aa:	4689      	mov	r9, r1
 804a0ac:	b933      	cbnz	r3, 804a0bc <_strtod_l+0xaac>
 804a0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804a0b2:	900e      	str	r0, [sp, #56]	; 0x38
 804a0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 804a0b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 804a0ba:	e7dd      	b.n	804a078 <_strtod_l+0xa68>
 804a0bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 804a0c0:	e7f9      	b.n	804a0b6 <_strtod_l+0xaa6>
 804a0c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 804a0c6:	9b04      	ldr	r3, [sp, #16]
 804a0c8:	2b00      	cmp	r3, #0
 804a0ca:	d1a8      	bne.n	804a01e <_strtod_l+0xa0e>
 804a0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804a0d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a0d2:	0d1b      	lsrs	r3, r3, #20
 804a0d4:	051b      	lsls	r3, r3, #20
 804a0d6:	429a      	cmp	r2, r3
 804a0d8:	d1a1      	bne.n	804a01e <_strtod_l+0xa0e>
 804a0da:	4640      	mov	r0, r8
 804a0dc:	4649      	mov	r1, r9
 804a0de:	f7f6 fdeb 	bl	8040cb8 <__aeabi_d2lz>
 804a0e2:	f7f6 fa5b 	bl	804059c <__aeabi_l2d>
 804a0e6:	4602      	mov	r2, r0
 804a0e8:	460b      	mov	r3, r1
 804a0ea:	4640      	mov	r0, r8
 804a0ec:	4649      	mov	r1, r9
 804a0ee:	f7f6 f8cb 	bl	8040288 <__aeabi_dsub>
 804a0f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804a0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a0f8:	ea43 030a 	orr.w	r3, r3, sl
 804a0fc:	4313      	orrs	r3, r2
 804a0fe:	4680      	mov	r8, r0
 804a100:	4689      	mov	r9, r1
 804a102:	d055      	beq.n	804a1b0 <_strtod_l+0xba0>
 804a104:	a336      	add	r3, pc, #216	; (adr r3, 804a1e0 <_strtod_l+0xbd0>)
 804a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a10a:	f7f6 fce7 	bl	8040adc <__aeabi_dcmplt>
 804a10e:	2800      	cmp	r0, #0
 804a110:	f47f acd0 	bne.w	8049ab4 <_strtod_l+0x4a4>
 804a114:	a334      	add	r3, pc, #208	; (adr r3, 804a1e8 <_strtod_l+0xbd8>)
 804a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a11a:	4640      	mov	r0, r8
 804a11c:	4649      	mov	r1, r9
 804a11e:	f7f6 fcfb 	bl	8040b18 <__aeabi_dcmpgt>
 804a122:	2800      	cmp	r0, #0
 804a124:	f43f af7b 	beq.w	804a01e <_strtod_l+0xa0e>
 804a128:	e4c4      	b.n	8049ab4 <_strtod_l+0x4a4>
 804a12a:	9b04      	ldr	r3, [sp, #16]
 804a12c:	b333      	cbz	r3, 804a17c <_strtod_l+0xb6c>
 804a12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804a130:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 804a134:	d822      	bhi.n	804a17c <_strtod_l+0xb6c>
 804a136:	a32e      	add	r3, pc, #184	; (adr r3, 804a1f0 <_strtod_l+0xbe0>)
 804a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a13c:	4640      	mov	r0, r8
 804a13e:	4649      	mov	r1, r9
 804a140:	f7f6 fcd6 	bl	8040af0 <__aeabi_dcmple>
 804a144:	b1a0      	cbz	r0, 804a170 <_strtod_l+0xb60>
 804a146:	4649      	mov	r1, r9
 804a148:	4640      	mov	r0, r8
 804a14a:	f7f6 fd2d 	bl	8040ba8 <__aeabi_d2uiz>
 804a14e:	2801      	cmp	r0, #1
 804a150:	bf38      	it	cc
 804a152:	2001      	movcc	r0, #1
 804a154:	f7f6 f9d6 	bl	8040504 <__aeabi_ui2d>
 804a158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a15a:	4680      	mov	r8, r0
 804a15c:	4689      	mov	r9, r1
 804a15e:	bb23      	cbnz	r3, 804a1aa <_strtod_l+0xb9a>
 804a160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804a164:	9010      	str	r0, [sp, #64]	; 0x40
 804a166:	9311      	str	r3, [sp, #68]	; 0x44
 804a168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 804a16c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a174:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 804a178:	1a9b      	subs	r3, r3, r2
 804a17a:	9309      	str	r3, [sp, #36]	; 0x24
 804a17c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a180:	eeb0 0a48 	vmov.f32	s0, s16
 804a184:	eef0 0a68 	vmov.f32	s1, s17
 804a188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804a18c:	f001 fe8e 	bl	804beac <__ulp>
 804a190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a194:	ec53 2b10 	vmov	r2, r3, d0
 804a198:	f7f6 fa2e 	bl	80405f8 <__aeabi_dmul>
 804a19c:	ec53 2b18 	vmov	r2, r3, d8
 804a1a0:	f7f6 f874 	bl	804028c <__adddf3>
 804a1a4:	4682      	mov	sl, r0
 804a1a6:	468b      	mov	fp, r1
 804a1a8:	e78d      	b.n	804a0c6 <_strtod_l+0xab6>
 804a1aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 804a1ae:	e7db      	b.n	804a168 <_strtod_l+0xb58>
 804a1b0:	a311      	add	r3, pc, #68	; (adr r3, 804a1f8 <_strtod_l+0xbe8>)
 804a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a1b6:	f7f6 fc91 	bl	8040adc <__aeabi_dcmplt>
 804a1ba:	e7b2      	b.n	804a122 <_strtod_l+0xb12>
 804a1bc:	2300      	movs	r3, #0
 804a1be:	930a      	str	r3, [sp, #40]	; 0x28
 804a1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 804a1c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 804a1c4:	6013      	str	r3, [r2, #0]
 804a1c6:	f7ff ba6b 	b.w	80496a0 <_strtod_l+0x90>
 804a1ca:	2a65      	cmp	r2, #101	; 0x65
 804a1cc:	f43f ab5f 	beq.w	804988e <_strtod_l+0x27e>
 804a1d0:	2a45      	cmp	r2, #69	; 0x45
 804a1d2:	f43f ab5c 	beq.w	804988e <_strtod_l+0x27e>
 804a1d6:	2301      	movs	r3, #1
 804a1d8:	f7ff bb94 	b.w	8049904 <_strtod_l+0x2f4>
 804a1dc:	f3af 8000 	nop.w
 804a1e0:	94a03595 	.word	0x94a03595
 804a1e4:	3fdfffff 	.word	0x3fdfffff
 804a1e8:	35afe535 	.word	0x35afe535
 804a1ec:	3fe00000 	.word	0x3fe00000
 804a1f0:	ffc00000 	.word	0xffc00000
 804a1f4:	41dfffff 	.word	0x41dfffff
 804a1f8:	94a03595 	.word	0x94a03595
 804a1fc:	3fcfffff 	.word	0x3fcfffff
 804a200:	3ff00000 	.word	0x3ff00000
 804a204:	7ff00000 	.word	0x7ff00000
 804a208:	7fe00000 	.word	0x7fe00000
 804a20c:	7c9fffff 	.word	0x7c9fffff
 804a210:	3fe00000 	.word	0x3fe00000
 804a214:	bff00000 	.word	0xbff00000
 804a218:	7fefffff 	.word	0x7fefffff

0804a21c <_strtod_r>:
 804a21c:	4b01      	ldr	r3, [pc, #4]	; (804a224 <_strtod_r+0x8>)
 804a21e:	f7ff b9f7 	b.w	8049610 <_strtod_l>
 804a222:	bf00      	nop
 804a224:	2000007c 	.word	0x2000007c

0804a228 <_strtol_l.constprop.0>:
 804a228:	2b01      	cmp	r3, #1
 804a22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804a22e:	d001      	beq.n	804a234 <_strtol_l.constprop.0+0xc>
 804a230:	2b24      	cmp	r3, #36	; 0x24
 804a232:	d906      	bls.n	804a242 <_strtol_l.constprop.0+0x1a>
 804a234:	f7fe faee 	bl	8048814 <__errno>
 804a238:	2316      	movs	r3, #22
 804a23a:	6003      	str	r3, [r0, #0]
 804a23c:	2000      	movs	r0, #0
 804a23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804a242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 804a328 <_strtol_l.constprop.0+0x100>
 804a246:	460d      	mov	r5, r1
 804a248:	462e      	mov	r6, r5
 804a24a:	f815 4b01 	ldrb.w	r4, [r5], #1
 804a24e:	f814 700c 	ldrb.w	r7, [r4, ip]
 804a252:	f017 0708 	ands.w	r7, r7, #8
 804a256:	d1f7      	bne.n	804a248 <_strtol_l.constprop.0+0x20>
 804a258:	2c2d      	cmp	r4, #45	; 0x2d
 804a25a:	d132      	bne.n	804a2c2 <_strtol_l.constprop.0+0x9a>
 804a25c:	782c      	ldrb	r4, [r5, #0]
 804a25e:	2701      	movs	r7, #1
 804a260:	1cb5      	adds	r5, r6, #2
 804a262:	2b00      	cmp	r3, #0
 804a264:	d05b      	beq.n	804a31e <_strtol_l.constprop.0+0xf6>
 804a266:	2b10      	cmp	r3, #16
 804a268:	d109      	bne.n	804a27e <_strtol_l.constprop.0+0x56>
 804a26a:	2c30      	cmp	r4, #48	; 0x30
 804a26c:	d107      	bne.n	804a27e <_strtol_l.constprop.0+0x56>
 804a26e:	782c      	ldrb	r4, [r5, #0]
 804a270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 804a274:	2c58      	cmp	r4, #88	; 0x58
 804a276:	d14d      	bne.n	804a314 <_strtol_l.constprop.0+0xec>
 804a278:	786c      	ldrb	r4, [r5, #1]
 804a27a:	2310      	movs	r3, #16
 804a27c:	3502      	adds	r5, #2
 804a27e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 804a282:	f108 38ff 	add.w	r8, r8, #4294967295
 804a286:	f04f 0c00 	mov.w	ip, #0
 804a28a:	fbb8 f9f3 	udiv	r9, r8, r3
 804a28e:	4666      	mov	r6, ip
 804a290:	fb03 8a19 	mls	sl, r3, r9, r8
 804a294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 804a298:	f1be 0f09 	cmp.w	lr, #9
 804a29c:	d816      	bhi.n	804a2cc <_strtol_l.constprop.0+0xa4>
 804a29e:	4674      	mov	r4, lr
 804a2a0:	42a3      	cmp	r3, r4
 804a2a2:	dd24      	ble.n	804a2ee <_strtol_l.constprop.0+0xc6>
 804a2a4:	f1bc 0f00 	cmp.w	ip, #0
 804a2a8:	db1e      	blt.n	804a2e8 <_strtol_l.constprop.0+0xc0>
 804a2aa:	45b1      	cmp	r9, r6
 804a2ac:	d31c      	bcc.n	804a2e8 <_strtol_l.constprop.0+0xc0>
 804a2ae:	d101      	bne.n	804a2b4 <_strtol_l.constprop.0+0x8c>
 804a2b0:	45a2      	cmp	sl, r4
 804a2b2:	db19      	blt.n	804a2e8 <_strtol_l.constprop.0+0xc0>
 804a2b4:	fb06 4603 	mla	r6, r6, r3, r4
 804a2b8:	f04f 0c01 	mov.w	ip, #1
 804a2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 804a2c0:	e7e8      	b.n	804a294 <_strtol_l.constprop.0+0x6c>
 804a2c2:	2c2b      	cmp	r4, #43	; 0x2b
 804a2c4:	bf04      	itt	eq
 804a2c6:	782c      	ldrbeq	r4, [r5, #0]
 804a2c8:	1cb5      	addeq	r5, r6, #2
 804a2ca:	e7ca      	b.n	804a262 <_strtol_l.constprop.0+0x3a>
 804a2cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 804a2d0:	f1be 0f19 	cmp.w	lr, #25
 804a2d4:	d801      	bhi.n	804a2da <_strtol_l.constprop.0+0xb2>
 804a2d6:	3c37      	subs	r4, #55	; 0x37
 804a2d8:	e7e2      	b.n	804a2a0 <_strtol_l.constprop.0+0x78>
 804a2da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 804a2de:	f1be 0f19 	cmp.w	lr, #25
 804a2e2:	d804      	bhi.n	804a2ee <_strtol_l.constprop.0+0xc6>
 804a2e4:	3c57      	subs	r4, #87	; 0x57
 804a2e6:	e7db      	b.n	804a2a0 <_strtol_l.constprop.0+0x78>
 804a2e8:	f04f 3cff 	mov.w	ip, #4294967295
 804a2ec:	e7e6      	b.n	804a2bc <_strtol_l.constprop.0+0x94>
 804a2ee:	f1bc 0f00 	cmp.w	ip, #0
 804a2f2:	da05      	bge.n	804a300 <_strtol_l.constprop.0+0xd8>
 804a2f4:	2322      	movs	r3, #34	; 0x22
 804a2f6:	6003      	str	r3, [r0, #0]
 804a2f8:	4646      	mov	r6, r8
 804a2fa:	b942      	cbnz	r2, 804a30e <_strtol_l.constprop.0+0xe6>
 804a2fc:	4630      	mov	r0, r6
 804a2fe:	e79e      	b.n	804a23e <_strtol_l.constprop.0+0x16>
 804a300:	b107      	cbz	r7, 804a304 <_strtol_l.constprop.0+0xdc>
 804a302:	4276      	negs	r6, r6
 804a304:	2a00      	cmp	r2, #0
 804a306:	d0f9      	beq.n	804a2fc <_strtol_l.constprop.0+0xd4>
 804a308:	f1bc 0f00 	cmp.w	ip, #0
 804a30c:	d000      	beq.n	804a310 <_strtol_l.constprop.0+0xe8>
 804a30e:	1e69      	subs	r1, r5, #1
 804a310:	6011      	str	r1, [r2, #0]
 804a312:	e7f3      	b.n	804a2fc <_strtol_l.constprop.0+0xd4>
 804a314:	2430      	movs	r4, #48	; 0x30
 804a316:	2b00      	cmp	r3, #0
 804a318:	d1b1      	bne.n	804a27e <_strtol_l.constprop.0+0x56>
 804a31a:	2308      	movs	r3, #8
 804a31c:	e7af      	b.n	804a27e <_strtol_l.constprop.0+0x56>
 804a31e:	2c30      	cmp	r4, #48	; 0x30
 804a320:	d0a5      	beq.n	804a26e <_strtol_l.constprop.0+0x46>
 804a322:	230a      	movs	r3, #10
 804a324:	e7ab      	b.n	804a27e <_strtol_l.constprop.0+0x56>
 804a326:	bf00      	nop
 804a328:	0804e296 	.word	0x0804e296

0804a32c <_strtol_r>:
 804a32c:	f7ff bf7c 	b.w	804a228 <_strtol_l.constprop.0>

0804a330 <__utoa>:
 804a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 804a332:	4c1f      	ldr	r4, [pc, #124]	; (804a3b0 <__utoa+0x80>)
 804a334:	b08b      	sub	sp, #44	; 0x2c
 804a336:	4605      	mov	r5, r0
 804a338:	460b      	mov	r3, r1
 804a33a:	466e      	mov	r6, sp
 804a33c:	f104 0c20 	add.w	ip, r4, #32
 804a340:	6820      	ldr	r0, [r4, #0]
 804a342:	6861      	ldr	r1, [r4, #4]
 804a344:	4637      	mov	r7, r6
 804a346:	c703      	stmia	r7!, {r0, r1}
 804a348:	3408      	adds	r4, #8
 804a34a:	4564      	cmp	r4, ip
 804a34c:	463e      	mov	r6, r7
 804a34e:	d1f7      	bne.n	804a340 <__utoa+0x10>
 804a350:	7921      	ldrb	r1, [r4, #4]
 804a352:	7139      	strb	r1, [r7, #4]
 804a354:	1e91      	subs	r1, r2, #2
 804a356:	6820      	ldr	r0, [r4, #0]
 804a358:	6038      	str	r0, [r7, #0]
 804a35a:	2922      	cmp	r1, #34	; 0x22
 804a35c:	f04f 0100 	mov.w	r1, #0
 804a360:	d904      	bls.n	804a36c <__utoa+0x3c>
 804a362:	7019      	strb	r1, [r3, #0]
 804a364:	460b      	mov	r3, r1
 804a366:	4618      	mov	r0, r3
 804a368:	b00b      	add	sp, #44	; 0x2c
 804a36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804a36c:	1e58      	subs	r0, r3, #1
 804a36e:	4684      	mov	ip, r0
 804a370:	fbb5 f7f2 	udiv	r7, r5, r2
 804a374:	fb02 5617 	mls	r6, r2, r7, r5
 804a378:	3628      	adds	r6, #40	; 0x28
 804a37a:	446e      	add	r6, sp
 804a37c:	460c      	mov	r4, r1
 804a37e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 804a382:	f80c 6f01 	strb.w	r6, [ip, #1]!
 804a386:	462e      	mov	r6, r5
 804a388:	42b2      	cmp	r2, r6
 804a38a:	f101 0101 	add.w	r1, r1, #1
 804a38e:	463d      	mov	r5, r7
 804a390:	d9ee      	bls.n	804a370 <__utoa+0x40>
 804a392:	2200      	movs	r2, #0
 804a394:	545a      	strb	r2, [r3, r1]
 804a396:	1919      	adds	r1, r3, r4
 804a398:	1aa5      	subs	r5, r4, r2
 804a39a:	42aa      	cmp	r2, r5
 804a39c:	dae3      	bge.n	804a366 <__utoa+0x36>
 804a39e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 804a3a2:	780e      	ldrb	r6, [r1, #0]
 804a3a4:	7006      	strb	r6, [r0, #0]
 804a3a6:	3201      	adds	r2, #1
 804a3a8:	f801 5901 	strb.w	r5, [r1], #-1
 804a3ac:	e7f4      	b.n	804a398 <__utoa+0x68>
 804a3ae:	bf00      	nop
 804a3b0:	0804e270 	.word	0x0804e270

0804a3b4 <utoa>:
 804a3b4:	f7ff bfbc 	b.w	804a330 <__utoa>

0804a3b8 <quorem>:
 804a3b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a3bc:	6903      	ldr	r3, [r0, #16]
 804a3be:	690c      	ldr	r4, [r1, #16]
 804a3c0:	42a3      	cmp	r3, r4
 804a3c2:	4607      	mov	r7, r0
 804a3c4:	f2c0 8081 	blt.w	804a4ca <quorem+0x112>
 804a3c8:	3c01      	subs	r4, #1
 804a3ca:	f101 0814 	add.w	r8, r1, #20
 804a3ce:	f100 0514 	add.w	r5, r0, #20
 804a3d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804a3d6:	9301      	str	r3, [sp, #4]
 804a3d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 804a3dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804a3e0:	3301      	adds	r3, #1
 804a3e2:	429a      	cmp	r2, r3
 804a3e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 804a3e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 804a3ec:	fbb2 f6f3 	udiv	r6, r2, r3
 804a3f0:	d331      	bcc.n	804a456 <quorem+0x9e>
 804a3f2:	f04f 0e00 	mov.w	lr, #0
 804a3f6:	4640      	mov	r0, r8
 804a3f8:	46ac      	mov	ip, r5
 804a3fa:	46f2      	mov	sl, lr
 804a3fc:	f850 2b04 	ldr.w	r2, [r0], #4
 804a400:	b293      	uxth	r3, r2
 804a402:	fb06 e303 	mla	r3, r6, r3, lr
 804a406:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 804a40a:	b29b      	uxth	r3, r3
 804a40c:	ebaa 0303 	sub.w	r3, sl, r3
 804a410:	f8dc a000 	ldr.w	sl, [ip]
 804a414:	0c12      	lsrs	r2, r2, #16
 804a416:	fa13 f38a 	uxtah	r3, r3, sl
 804a41a:	fb06 e202 	mla	r2, r6, r2, lr
 804a41e:	9300      	str	r3, [sp, #0]
 804a420:	9b00      	ldr	r3, [sp, #0]
 804a422:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 804a426:	b292      	uxth	r2, r2
 804a428:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 804a42c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 804a430:	f8bd 3000 	ldrh.w	r3, [sp]
 804a434:	4581      	cmp	r9, r0
 804a436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a43a:	f84c 3b04 	str.w	r3, [ip], #4
 804a43e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 804a442:	d2db      	bcs.n	804a3fc <quorem+0x44>
 804a444:	f855 300b 	ldr.w	r3, [r5, fp]
 804a448:	b92b      	cbnz	r3, 804a456 <quorem+0x9e>
 804a44a:	9b01      	ldr	r3, [sp, #4]
 804a44c:	3b04      	subs	r3, #4
 804a44e:	429d      	cmp	r5, r3
 804a450:	461a      	mov	r2, r3
 804a452:	d32e      	bcc.n	804a4b2 <quorem+0xfa>
 804a454:	613c      	str	r4, [r7, #16]
 804a456:	4638      	mov	r0, r7
 804a458:	f001 fc82 	bl	804bd60 <__mcmp>
 804a45c:	2800      	cmp	r0, #0
 804a45e:	db24      	blt.n	804a4aa <quorem+0xf2>
 804a460:	3601      	adds	r6, #1
 804a462:	4628      	mov	r0, r5
 804a464:	f04f 0c00 	mov.w	ip, #0
 804a468:	f858 2b04 	ldr.w	r2, [r8], #4
 804a46c:	f8d0 e000 	ldr.w	lr, [r0]
 804a470:	b293      	uxth	r3, r2
 804a472:	ebac 0303 	sub.w	r3, ip, r3
 804a476:	0c12      	lsrs	r2, r2, #16
 804a478:	fa13 f38e 	uxtah	r3, r3, lr
 804a47c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 804a480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 804a484:	b29b      	uxth	r3, r3
 804a486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a48a:	45c1      	cmp	r9, r8
 804a48c:	f840 3b04 	str.w	r3, [r0], #4
 804a490:	ea4f 4c22 	mov.w	ip, r2, asr #16
 804a494:	d2e8      	bcs.n	804a468 <quorem+0xb0>
 804a496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804a49a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804a49e:	b922      	cbnz	r2, 804a4aa <quorem+0xf2>
 804a4a0:	3b04      	subs	r3, #4
 804a4a2:	429d      	cmp	r5, r3
 804a4a4:	461a      	mov	r2, r3
 804a4a6:	d30a      	bcc.n	804a4be <quorem+0x106>
 804a4a8:	613c      	str	r4, [r7, #16]
 804a4aa:	4630      	mov	r0, r6
 804a4ac:	b003      	add	sp, #12
 804a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a4b2:	6812      	ldr	r2, [r2, #0]
 804a4b4:	3b04      	subs	r3, #4
 804a4b6:	2a00      	cmp	r2, #0
 804a4b8:	d1cc      	bne.n	804a454 <quorem+0x9c>
 804a4ba:	3c01      	subs	r4, #1
 804a4bc:	e7c7      	b.n	804a44e <quorem+0x96>
 804a4be:	6812      	ldr	r2, [r2, #0]
 804a4c0:	3b04      	subs	r3, #4
 804a4c2:	2a00      	cmp	r2, #0
 804a4c4:	d1f0      	bne.n	804a4a8 <quorem+0xf0>
 804a4c6:	3c01      	subs	r4, #1
 804a4c8:	e7eb      	b.n	804a4a2 <quorem+0xea>
 804a4ca:	2000      	movs	r0, #0
 804a4cc:	e7ee      	b.n	804a4ac <quorem+0xf4>
	...

0804a4d0 <_dtoa_r>:
 804a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a4d4:	ed2d 8b04 	vpush	{d8-d9}
 804a4d8:	ec57 6b10 	vmov	r6, r7, d0
 804a4dc:	b093      	sub	sp, #76	; 0x4c
 804a4de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 804a4e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 804a4e4:	9106      	str	r1, [sp, #24]
 804a4e6:	ee10 aa10 	vmov	sl, s0
 804a4ea:	4604      	mov	r4, r0
 804a4ec:	9209      	str	r2, [sp, #36]	; 0x24
 804a4ee:	930c      	str	r3, [sp, #48]	; 0x30
 804a4f0:	46bb      	mov	fp, r7
 804a4f2:	b975      	cbnz	r5, 804a512 <_dtoa_r+0x42>
 804a4f4:	2010      	movs	r0, #16
 804a4f6:	f001 f94d 	bl	804b794 <malloc>
 804a4fa:	4602      	mov	r2, r0
 804a4fc:	6260      	str	r0, [r4, #36]	; 0x24
 804a4fe:	b920      	cbnz	r0, 804a50a <_dtoa_r+0x3a>
 804a500:	4ba7      	ldr	r3, [pc, #668]	; (804a7a0 <_dtoa_r+0x2d0>)
 804a502:	21ea      	movs	r1, #234	; 0xea
 804a504:	48a7      	ldr	r0, [pc, #668]	; (804a7a4 <_dtoa_r+0x2d4>)
 804a506:	f002 f8ad 	bl	804c664 <__assert_func>
 804a50a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 804a50e:	6005      	str	r5, [r0, #0]
 804a510:	60c5      	str	r5, [r0, #12]
 804a512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804a514:	6819      	ldr	r1, [r3, #0]
 804a516:	b151      	cbz	r1, 804a52e <_dtoa_r+0x5e>
 804a518:	685a      	ldr	r2, [r3, #4]
 804a51a:	604a      	str	r2, [r1, #4]
 804a51c:	2301      	movs	r3, #1
 804a51e:	4093      	lsls	r3, r2
 804a520:	608b      	str	r3, [r1, #8]
 804a522:	4620      	mov	r0, r4
 804a524:	f001 f990 	bl	804b848 <_Bfree>
 804a528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804a52a:	2200      	movs	r2, #0
 804a52c:	601a      	str	r2, [r3, #0]
 804a52e:	1e3b      	subs	r3, r7, #0
 804a530:	bfaa      	itet	ge
 804a532:	2300      	movge	r3, #0
 804a534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 804a538:	f8c8 3000 	strge.w	r3, [r8]
 804a53c:	4b9a      	ldr	r3, [pc, #616]	; (804a7a8 <_dtoa_r+0x2d8>)
 804a53e:	bfbc      	itt	lt
 804a540:	2201      	movlt	r2, #1
 804a542:	f8c8 2000 	strlt.w	r2, [r8]
 804a546:	ea33 030b 	bics.w	r3, r3, fp
 804a54a:	d11b      	bne.n	804a584 <_dtoa_r+0xb4>
 804a54c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804a54e:	f242 730f 	movw	r3, #9999	; 0x270f
 804a552:	6013      	str	r3, [r2, #0]
 804a554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a558:	4333      	orrs	r3, r6
 804a55a:	f000 8592 	beq.w	804b082 <_dtoa_r+0xbb2>
 804a55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a560:	b963      	cbnz	r3, 804a57c <_dtoa_r+0xac>
 804a562:	4b92      	ldr	r3, [pc, #584]	; (804a7ac <_dtoa_r+0x2dc>)
 804a564:	e022      	b.n	804a5ac <_dtoa_r+0xdc>
 804a566:	4b92      	ldr	r3, [pc, #584]	; (804a7b0 <_dtoa_r+0x2e0>)
 804a568:	9301      	str	r3, [sp, #4]
 804a56a:	3308      	adds	r3, #8
 804a56c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 804a56e:	6013      	str	r3, [r2, #0]
 804a570:	9801      	ldr	r0, [sp, #4]
 804a572:	b013      	add	sp, #76	; 0x4c
 804a574:	ecbd 8b04 	vpop	{d8-d9}
 804a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a57c:	4b8b      	ldr	r3, [pc, #556]	; (804a7ac <_dtoa_r+0x2dc>)
 804a57e:	9301      	str	r3, [sp, #4]
 804a580:	3303      	adds	r3, #3
 804a582:	e7f3      	b.n	804a56c <_dtoa_r+0x9c>
 804a584:	2200      	movs	r2, #0
 804a586:	2300      	movs	r3, #0
 804a588:	4650      	mov	r0, sl
 804a58a:	4659      	mov	r1, fp
 804a58c:	f7f6 fa9c 	bl	8040ac8 <__aeabi_dcmpeq>
 804a590:	ec4b ab19 	vmov	d9, sl, fp
 804a594:	4680      	mov	r8, r0
 804a596:	b158      	cbz	r0, 804a5b0 <_dtoa_r+0xe0>
 804a598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804a59a:	2301      	movs	r3, #1
 804a59c:	6013      	str	r3, [r2, #0]
 804a59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a5a0:	2b00      	cmp	r3, #0
 804a5a2:	f000 856b 	beq.w	804b07c <_dtoa_r+0xbac>
 804a5a6:	4883      	ldr	r0, [pc, #524]	; (804a7b4 <_dtoa_r+0x2e4>)
 804a5a8:	6018      	str	r0, [r3, #0]
 804a5aa:	1e43      	subs	r3, r0, #1
 804a5ac:	9301      	str	r3, [sp, #4]
 804a5ae:	e7df      	b.n	804a570 <_dtoa_r+0xa0>
 804a5b0:	ec4b ab10 	vmov	d0, sl, fp
 804a5b4:	aa10      	add	r2, sp, #64	; 0x40
 804a5b6:	a911      	add	r1, sp, #68	; 0x44
 804a5b8:	4620      	mov	r0, r4
 804a5ba:	f001 fcf3 	bl	804bfa4 <__d2b>
 804a5be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 804a5c2:	ee08 0a10 	vmov	s16, r0
 804a5c6:	2d00      	cmp	r5, #0
 804a5c8:	f000 8084 	beq.w	804a6d4 <_dtoa_r+0x204>
 804a5cc:	ee19 3a90 	vmov	r3, s19
 804a5d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 804a5d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 804a5d8:	4656      	mov	r6, sl
 804a5da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 804a5de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 804a5e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 804a5e6:	4b74      	ldr	r3, [pc, #464]	; (804a7b8 <_dtoa_r+0x2e8>)
 804a5e8:	2200      	movs	r2, #0
 804a5ea:	4630      	mov	r0, r6
 804a5ec:	4639      	mov	r1, r7
 804a5ee:	f7f5 fe4b 	bl	8040288 <__aeabi_dsub>
 804a5f2:	a365      	add	r3, pc, #404	; (adr r3, 804a788 <_dtoa_r+0x2b8>)
 804a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a5f8:	f7f5 fffe 	bl	80405f8 <__aeabi_dmul>
 804a5fc:	a364      	add	r3, pc, #400	; (adr r3, 804a790 <_dtoa_r+0x2c0>)
 804a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a602:	f7f5 fe43 	bl	804028c <__adddf3>
 804a606:	4606      	mov	r6, r0
 804a608:	4628      	mov	r0, r5
 804a60a:	460f      	mov	r7, r1
 804a60c:	f7f5 ff8a 	bl	8040524 <__aeabi_i2d>
 804a610:	a361      	add	r3, pc, #388	; (adr r3, 804a798 <_dtoa_r+0x2c8>)
 804a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a616:	f7f5 ffef 	bl	80405f8 <__aeabi_dmul>
 804a61a:	4602      	mov	r2, r0
 804a61c:	460b      	mov	r3, r1
 804a61e:	4630      	mov	r0, r6
 804a620:	4639      	mov	r1, r7
 804a622:	f7f5 fe33 	bl	804028c <__adddf3>
 804a626:	4606      	mov	r6, r0
 804a628:	460f      	mov	r7, r1
 804a62a:	f7f6 fa95 	bl	8040b58 <__aeabi_d2iz>
 804a62e:	2200      	movs	r2, #0
 804a630:	9000      	str	r0, [sp, #0]
 804a632:	2300      	movs	r3, #0
 804a634:	4630      	mov	r0, r6
 804a636:	4639      	mov	r1, r7
 804a638:	f7f6 fa50 	bl	8040adc <__aeabi_dcmplt>
 804a63c:	b150      	cbz	r0, 804a654 <_dtoa_r+0x184>
 804a63e:	9800      	ldr	r0, [sp, #0]
 804a640:	f7f5 ff70 	bl	8040524 <__aeabi_i2d>
 804a644:	4632      	mov	r2, r6
 804a646:	463b      	mov	r3, r7
 804a648:	f7f6 fa3e 	bl	8040ac8 <__aeabi_dcmpeq>
 804a64c:	b910      	cbnz	r0, 804a654 <_dtoa_r+0x184>
 804a64e:	9b00      	ldr	r3, [sp, #0]
 804a650:	3b01      	subs	r3, #1
 804a652:	9300      	str	r3, [sp, #0]
 804a654:	9b00      	ldr	r3, [sp, #0]
 804a656:	2b16      	cmp	r3, #22
 804a658:	d85a      	bhi.n	804a710 <_dtoa_r+0x240>
 804a65a:	9a00      	ldr	r2, [sp, #0]
 804a65c:	4b57      	ldr	r3, [pc, #348]	; (804a7bc <_dtoa_r+0x2ec>)
 804a65e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a666:	ec51 0b19 	vmov	r0, r1, d9
 804a66a:	f7f6 fa37 	bl	8040adc <__aeabi_dcmplt>
 804a66e:	2800      	cmp	r0, #0
 804a670:	d050      	beq.n	804a714 <_dtoa_r+0x244>
 804a672:	9b00      	ldr	r3, [sp, #0]
 804a674:	3b01      	subs	r3, #1
 804a676:	9300      	str	r3, [sp, #0]
 804a678:	2300      	movs	r3, #0
 804a67a:	930b      	str	r3, [sp, #44]	; 0x2c
 804a67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804a67e:	1b5d      	subs	r5, r3, r5
 804a680:	1e6b      	subs	r3, r5, #1
 804a682:	9305      	str	r3, [sp, #20]
 804a684:	bf45      	ittet	mi
 804a686:	f1c5 0301 	rsbmi	r3, r5, #1
 804a68a:	9304      	strmi	r3, [sp, #16]
 804a68c:	2300      	movpl	r3, #0
 804a68e:	2300      	movmi	r3, #0
 804a690:	bf4c      	ite	mi
 804a692:	9305      	strmi	r3, [sp, #20]
 804a694:	9304      	strpl	r3, [sp, #16]
 804a696:	9b00      	ldr	r3, [sp, #0]
 804a698:	2b00      	cmp	r3, #0
 804a69a:	db3d      	blt.n	804a718 <_dtoa_r+0x248>
 804a69c:	9b05      	ldr	r3, [sp, #20]
 804a69e:	9a00      	ldr	r2, [sp, #0]
 804a6a0:	920a      	str	r2, [sp, #40]	; 0x28
 804a6a2:	4413      	add	r3, r2
 804a6a4:	9305      	str	r3, [sp, #20]
 804a6a6:	2300      	movs	r3, #0
 804a6a8:	9307      	str	r3, [sp, #28]
 804a6aa:	9b06      	ldr	r3, [sp, #24]
 804a6ac:	2b09      	cmp	r3, #9
 804a6ae:	f200 8089 	bhi.w	804a7c4 <_dtoa_r+0x2f4>
 804a6b2:	2b05      	cmp	r3, #5
 804a6b4:	bfc4      	itt	gt
 804a6b6:	3b04      	subgt	r3, #4
 804a6b8:	9306      	strgt	r3, [sp, #24]
 804a6ba:	9b06      	ldr	r3, [sp, #24]
 804a6bc:	f1a3 0302 	sub.w	r3, r3, #2
 804a6c0:	bfcc      	ite	gt
 804a6c2:	2500      	movgt	r5, #0
 804a6c4:	2501      	movle	r5, #1
 804a6c6:	2b03      	cmp	r3, #3
 804a6c8:	f200 8087 	bhi.w	804a7da <_dtoa_r+0x30a>
 804a6cc:	e8df f003 	tbb	[pc, r3]
 804a6d0:	59383a2d 	.word	0x59383a2d
 804a6d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 804a6d8:	441d      	add	r5, r3
 804a6da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 804a6de:	2b20      	cmp	r3, #32
 804a6e0:	bfc1      	itttt	gt
 804a6e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 804a6e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 804a6ea:	fa0b f303 	lslgt.w	r3, fp, r3
 804a6ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 804a6f2:	bfda      	itte	le
 804a6f4:	f1c3 0320 	rsble	r3, r3, #32
 804a6f8:	fa06 f003 	lslle.w	r0, r6, r3
 804a6fc:	4318      	orrgt	r0, r3
 804a6fe:	f7f5 ff01 	bl	8040504 <__aeabi_ui2d>
 804a702:	2301      	movs	r3, #1
 804a704:	4606      	mov	r6, r0
 804a706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 804a70a:	3d01      	subs	r5, #1
 804a70c:	930e      	str	r3, [sp, #56]	; 0x38
 804a70e:	e76a      	b.n	804a5e6 <_dtoa_r+0x116>
 804a710:	2301      	movs	r3, #1
 804a712:	e7b2      	b.n	804a67a <_dtoa_r+0x1aa>
 804a714:	900b      	str	r0, [sp, #44]	; 0x2c
 804a716:	e7b1      	b.n	804a67c <_dtoa_r+0x1ac>
 804a718:	9b04      	ldr	r3, [sp, #16]
 804a71a:	9a00      	ldr	r2, [sp, #0]
 804a71c:	1a9b      	subs	r3, r3, r2
 804a71e:	9304      	str	r3, [sp, #16]
 804a720:	4253      	negs	r3, r2
 804a722:	9307      	str	r3, [sp, #28]
 804a724:	2300      	movs	r3, #0
 804a726:	930a      	str	r3, [sp, #40]	; 0x28
 804a728:	e7bf      	b.n	804a6aa <_dtoa_r+0x1da>
 804a72a:	2300      	movs	r3, #0
 804a72c:	9308      	str	r3, [sp, #32]
 804a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a730:	2b00      	cmp	r3, #0
 804a732:	dc55      	bgt.n	804a7e0 <_dtoa_r+0x310>
 804a734:	2301      	movs	r3, #1
 804a736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804a73a:	461a      	mov	r2, r3
 804a73c:	9209      	str	r2, [sp, #36]	; 0x24
 804a73e:	e00c      	b.n	804a75a <_dtoa_r+0x28a>
 804a740:	2301      	movs	r3, #1
 804a742:	e7f3      	b.n	804a72c <_dtoa_r+0x25c>
 804a744:	2300      	movs	r3, #0
 804a746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804a748:	9308      	str	r3, [sp, #32]
 804a74a:	9b00      	ldr	r3, [sp, #0]
 804a74c:	4413      	add	r3, r2
 804a74e:	9302      	str	r3, [sp, #8]
 804a750:	3301      	adds	r3, #1
 804a752:	2b01      	cmp	r3, #1
 804a754:	9303      	str	r3, [sp, #12]
 804a756:	bfb8      	it	lt
 804a758:	2301      	movlt	r3, #1
 804a75a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804a75c:	2200      	movs	r2, #0
 804a75e:	6042      	str	r2, [r0, #4]
 804a760:	2204      	movs	r2, #4
 804a762:	f102 0614 	add.w	r6, r2, #20
 804a766:	429e      	cmp	r6, r3
 804a768:	6841      	ldr	r1, [r0, #4]
 804a76a:	d93d      	bls.n	804a7e8 <_dtoa_r+0x318>
 804a76c:	4620      	mov	r0, r4
 804a76e:	f001 f82b 	bl	804b7c8 <_Balloc>
 804a772:	9001      	str	r0, [sp, #4]
 804a774:	2800      	cmp	r0, #0
 804a776:	d13b      	bne.n	804a7f0 <_dtoa_r+0x320>
 804a778:	4b11      	ldr	r3, [pc, #68]	; (804a7c0 <_dtoa_r+0x2f0>)
 804a77a:	4602      	mov	r2, r0
 804a77c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 804a780:	e6c0      	b.n	804a504 <_dtoa_r+0x34>
 804a782:	2301      	movs	r3, #1
 804a784:	e7df      	b.n	804a746 <_dtoa_r+0x276>
 804a786:	bf00      	nop
 804a788:	636f4361 	.word	0x636f4361
 804a78c:	3fd287a7 	.word	0x3fd287a7
 804a790:	8b60c8b3 	.word	0x8b60c8b3
 804a794:	3fc68a28 	.word	0x3fc68a28
 804a798:	509f79fb 	.word	0x509f79fb
 804a79c:	3fd34413 	.word	0x3fd34413
 804a7a0:	0804e3a3 	.word	0x0804e3a3
 804a7a4:	0804e3ba 	.word	0x0804e3ba
 804a7a8:	7ff00000 	.word	0x7ff00000
 804a7ac:	0804e39f 	.word	0x0804e39f
 804a7b0:	0804e396 	.word	0x0804e396
 804a7b4:	0804e1f5 	.word	0x0804e1f5
 804a7b8:	3ff80000 	.word	0x3ff80000
 804a7bc:	0804e528 	.word	0x0804e528
 804a7c0:	0804e415 	.word	0x0804e415
 804a7c4:	2501      	movs	r5, #1
 804a7c6:	2300      	movs	r3, #0
 804a7c8:	9306      	str	r3, [sp, #24]
 804a7ca:	9508      	str	r5, [sp, #32]
 804a7cc:	f04f 33ff 	mov.w	r3, #4294967295
 804a7d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804a7d4:	2200      	movs	r2, #0
 804a7d6:	2312      	movs	r3, #18
 804a7d8:	e7b0      	b.n	804a73c <_dtoa_r+0x26c>
 804a7da:	2301      	movs	r3, #1
 804a7dc:	9308      	str	r3, [sp, #32]
 804a7de:	e7f5      	b.n	804a7cc <_dtoa_r+0x2fc>
 804a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a7e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804a7e6:	e7b8      	b.n	804a75a <_dtoa_r+0x28a>
 804a7e8:	3101      	adds	r1, #1
 804a7ea:	6041      	str	r1, [r0, #4]
 804a7ec:	0052      	lsls	r2, r2, #1
 804a7ee:	e7b8      	b.n	804a762 <_dtoa_r+0x292>
 804a7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804a7f2:	9a01      	ldr	r2, [sp, #4]
 804a7f4:	601a      	str	r2, [r3, #0]
 804a7f6:	9b03      	ldr	r3, [sp, #12]
 804a7f8:	2b0e      	cmp	r3, #14
 804a7fa:	f200 809d 	bhi.w	804a938 <_dtoa_r+0x468>
 804a7fe:	2d00      	cmp	r5, #0
 804a800:	f000 809a 	beq.w	804a938 <_dtoa_r+0x468>
 804a804:	9b00      	ldr	r3, [sp, #0]
 804a806:	2b00      	cmp	r3, #0
 804a808:	dd32      	ble.n	804a870 <_dtoa_r+0x3a0>
 804a80a:	4ab7      	ldr	r2, [pc, #732]	; (804aae8 <_dtoa_r+0x618>)
 804a80c:	f003 030f 	and.w	r3, r3, #15
 804a810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804a814:	e9d3 8900 	ldrd	r8, r9, [r3]
 804a818:	9b00      	ldr	r3, [sp, #0]
 804a81a:	05d8      	lsls	r0, r3, #23
 804a81c:	ea4f 1723 	mov.w	r7, r3, asr #4
 804a820:	d516      	bpl.n	804a850 <_dtoa_r+0x380>
 804a822:	4bb2      	ldr	r3, [pc, #712]	; (804aaec <_dtoa_r+0x61c>)
 804a824:	ec51 0b19 	vmov	r0, r1, d9
 804a828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 804a82c:	f7f6 f80e 	bl	804084c <__aeabi_ddiv>
 804a830:	f007 070f 	and.w	r7, r7, #15
 804a834:	4682      	mov	sl, r0
 804a836:	468b      	mov	fp, r1
 804a838:	2503      	movs	r5, #3
 804a83a:	4eac      	ldr	r6, [pc, #688]	; (804aaec <_dtoa_r+0x61c>)
 804a83c:	b957      	cbnz	r7, 804a854 <_dtoa_r+0x384>
 804a83e:	4642      	mov	r2, r8
 804a840:	464b      	mov	r3, r9
 804a842:	4650      	mov	r0, sl
 804a844:	4659      	mov	r1, fp
 804a846:	f7f6 f801 	bl	804084c <__aeabi_ddiv>
 804a84a:	4682      	mov	sl, r0
 804a84c:	468b      	mov	fp, r1
 804a84e:	e028      	b.n	804a8a2 <_dtoa_r+0x3d2>
 804a850:	2502      	movs	r5, #2
 804a852:	e7f2      	b.n	804a83a <_dtoa_r+0x36a>
 804a854:	07f9      	lsls	r1, r7, #31
 804a856:	d508      	bpl.n	804a86a <_dtoa_r+0x39a>
 804a858:	4640      	mov	r0, r8
 804a85a:	4649      	mov	r1, r9
 804a85c:	e9d6 2300 	ldrd	r2, r3, [r6]
 804a860:	f7f5 feca 	bl	80405f8 <__aeabi_dmul>
 804a864:	3501      	adds	r5, #1
 804a866:	4680      	mov	r8, r0
 804a868:	4689      	mov	r9, r1
 804a86a:	107f      	asrs	r7, r7, #1
 804a86c:	3608      	adds	r6, #8
 804a86e:	e7e5      	b.n	804a83c <_dtoa_r+0x36c>
 804a870:	f000 809b 	beq.w	804a9aa <_dtoa_r+0x4da>
 804a874:	9b00      	ldr	r3, [sp, #0]
 804a876:	4f9d      	ldr	r7, [pc, #628]	; (804aaec <_dtoa_r+0x61c>)
 804a878:	425e      	negs	r6, r3
 804a87a:	4b9b      	ldr	r3, [pc, #620]	; (804aae8 <_dtoa_r+0x618>)
 804a87c:	f006 020f 	and.w	r2, r6, #15
 804a880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a888:	ec51 0b19 	vmov	r0, r1, d9
 804a88c:	f7f5 feb4 	bl	80405f8 <__aeabi_dmul>
 804a890:	1136      	asrs	r6, r6, #4
 804a892:	4682      	mov	sl, r0
 804a894:	468b      	mov	fp, r1
 804a896:	2300      	movs	r3, #0
 804a898:	2502      	movs	r5, #2
 804a89a:	2e00      	cmp	r6, #0
 804a89c:	d17a      	bne.n	804a994 <_dtoa_r+0x4c4>
 804a89e:	2b00      	cmp	r3, #0
 804a8a0:	d1d3      	bne.n	804a84a <_dtoa_r+0x37a>
 804a8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a8a4:	2b00      	cmp	r3, #0
 804a8a6:	f000 8082 	beq.w	804a9ae <_dtoa_r+0x4de>
 804a8aa:	4b91      	ldr	r3, [pc, #580]	; (804aaf0 <_dtoa_r+0x620>)
 804a8ac:	2200      	movs	r2, #0
 804a8ae:	4650      	mov	r0, sl
 804a8b0:	4659      	mov	r1, fp
 804a8b2:	f7f6 f913 	bl	8040adc <__aeabi_dcmplt>
 804a8b6:	2800      	cmp	r0, #0
 804a8b8:	d079      	beq.n	804a9ae <_dtoa_r+0x4de>
 804a8ba:	9b03      	ldr	r3, [sp, #12]
 804a8bc:	2b00      	cmp	r3, #0
 804a8be:	d076      	beq.n	804a9ae <_dtoa_r+0x4de>
 804a8c0:	9b02      	ldr	r3, [sp, #8]
 804a8c2:	2b00      	cmp	r3, #0
 804a8c4:	dd36      	ble.n	804a934 <_dtoa_r+0x464>
 804a8c6:	9b00      	ldr	r3, [sp, #0]
 804a8c8:	4650      	mov	r0, sl
 804a8ca:	4659      	mov	r1, fp
 804a8cc:	1e5f      	subs	r7, r3, #1
 804a8ce:	2200      	movs	r2, #0
 804a8d0:	4b88      	ldr	r3, [pc, #544]	; (804aaf4 <_dtoa_r+0x624>)
 804a8d2:	f7f5 fe91 	bl	80405f8 <__aeabi_dmul>
 804a8d6:	9e02      	ldr	r6, [sp, #8]
 804a8d8:	4682      	mov	sl, r0
 804a8da:	468b      	mov	fp, r1
 804a8dc:	3501      	adds	r5, #1
 804a8de:	4628      	mov	r0, r5
 804a8e0:	f7f5 fe20 	bl	8040524 <__aeabi_i2d>
 804a8e4:	4652      	mov	r2, sl
 804a8e6:	465b      	mov	r3, fp
 804a8e8:	f7f5 fe86 	bl	80405f8 <__aeabi_dmul>
 804a8ec:	4b82      	ldr	r3, [pc, #520]	; (804aaf8 <_dtoa_r+0x628>)
 804a8ee:	2200      	movs	r2, #0
 804a8f0:	f7f5 fccc 	bl	804028c <__adddf3>
 804a8f4:	46d0      	mov	r8, sl
 804a8f6:	46d9      	mov	r9, fp
 804a8f8:	4682      	mov	sl, r0
 804a8fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 804a8fe:	2e00      	cmp	r6, #0
 804a900:	d158      	bne.n	804a9b4 <_dtoa_r+0x4e4>
 804a902:	4b7e      	ldr	r3, [pc, #504]	; (804aafc <_dtoa_r+0x62c>)
 804a904:	2200      	movs	r2, #0
 804a906:	4640      	mov	r0, r8
 804a908:	4649      	mov	r1, r9
 804a90a:	f7f5 fcbd 	bl	8040288 <__aeabi_dsub>
 804a90e:	4652      	mov	r2, sl
 804a910:	465b      	mov	r3, fp
 804a912:	4680      	mov	r8, r0
 804a914:	4689      	mov	r9, r1
 804a916:	f7f6 f8ff 	bl	8040b18 <__aeabi_dcmpgt>
 804a91a:	2800      	cmp	r0, #0
 804a91c:	f040 8295 	bne.w	804ae4a <_dtoa_r+0x97a>
 804a920:	4652      	mov	r2, sl
 804a922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 804a926:	4640      	mov	r0, r8
 804a928:	4649      	mov	r1, r9
 804a92a:	f7f6 f8d7 	bl	8040adc <__aeabi_dcmplt>
 804a92e:	2800      	cmp	r0, #0
 804a930:	f040 8289 	bne.w	804ae46 <_dtoa_r+0x976>
 804a934:	ec5b ab19 	vmov	sl, fp, d9
 804a938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804a93a:	2b00      	cmp	r3, #0
 804a93c:	f2c0 8148 	blt.w	804abd0 <_dtoa_r+0x700>
 804a940:	9a00      	ldr	r2, [sp, #0]
 804a942:	2a0e      	cmp	r2, #14
 804a944:	f300 8144 	bgt.w	804abd0 <_dtoa_r+0x700>
 804a948:	4b67      	ldr	r3, [pc, #412]	; (804aae8 <_dtoa_r+0x618>)
 804a94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a94e:	e9d3 8900 	ldrd	r8, r9, [r3]
 804a952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a954:	2b00      	cmp	r3, #0
 804a956:	f280 80d5 	bge.w	804ab04 <_dtoa_r+0x634>
 804a95a:	9b03      	ldr	r3, [sp, #12]
 804a95c:	2b00      	cmp	r3, #0
 804a95e:	f300 80d1 	bgt.w	804ab04 <_dtoa_r+0x634>
 804a962:	f040 826f 	bne.w	804ae44 <_dtoa_r+0x974>
 804a966:	4b65      	ldr	r3, [pc, #404]	; (804aafc <_dtoa_r+0x62c>)
 804a968:	2200      	movs	r2, #0
 804a96a:	4640      	mov	r0, r8
 804a96c:	4649      	mov	r1, r9
 804a96e:	f7f5 fe43 	bl	80405f8 <__aeabi_dmul>
 804a972:	4652      	mov	r2, sl
 804a974:	465b      	mov	r3, fp
 804a976:	f7f6 f8c5 	bl	8040b04 <__aeabi_dcmpge>
 804a97a:	9e03      	ldr	r6, [sp, #12]
 804a97c:	4637      	mov	r7, r6
 804a97e:	2800      	cmp	r0, #0
 804a980:	f040 8245 	bne.w	804ae0e <_dtoa_r+0x93e>
 804a984:	9d01      	ldr	r5, [sp, #4]
 804a986:	2331      	movs	r3, #49	; 0x31
 804a988:	f805 3b01 	strb.w	r3, [r5], #1
 804a98c:	9b00      	ldr	r3, [sp, #0]
 804a98e:	3301      	adds	r3, #1
 804a990:	9300      	str	r3, [sp, #0]
 804a992:	e240      	b.n	804ae16 <_dtoa_r+0x946>
 804a994:	07f2      	lsls	r2, r6, #31
 804a996:	d505      	bpl.n	804a9a4 <_dtoa_r+0x4d4>
 804a998:	e9d7 2300 	ldrd	r2, r3, [r7]
 804a99c:	f7f5 fe2c 	bl	80405f8 <__aeabi_dmul>
 804a9a0:	3501      	adds	r5, #1
 804a9a2:	2301      	movs	r3, #1
 804a9a4:	1076      	asrs	r6, r6, #1
 804a9a6:	3708      	adds	r7, #8
 804a9a8:	e777      	b.n	804a89a <_dtoa_r+0x3ca>
 804a9aa:	2502      	movs	r5, #2
 804a9ac:	e779      	b.n	804a8a2 <_dtoa_r+0x3d2>
 804a9ae:	9f00      	ldr	r7, [sp, #0]
 804a9b0:	9e03      	ldr	r6, [sp, #12]
 804a9b2:	e794      	b.n	804a8de <_dtoa_r+0x40e>
 804a9b4:	9901      	ldr	r1, [sp, #4]
 804a9b6:	4b4c      	ldr	r3, [pc, #304]	; (804aae8 <_dtoa_r+0x618>)
 804a9b8:	4431      	add	r1, r6
 804a9ba:	910d      	str	r1, [sp, #52]	; 0x34
 804a9bc:	9908      	ldr	r1, [sp, #32]
 804a9be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 804a9c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 804a9c6:	2900      	cmp	r1, #0
 804a9c8:	d043      	beq.n	804aa52 <_dtoa_r+0x582>
 804a9ca:	494d      	ldr	r1, [pc, #308]	; (804ab00 <_dtoa_r+0x630>)
 804a9cc:	2000      	movs	r0, #0
 804a9ce:	f7f5 ff3d 	bl	804084c <__aeabi_ddiv>
 804a9d2:	4652      	mov	r2, sl
 804a9d4:	465b      	mov	r3, fp
 804a9d6:	f7f5 fc57 	bl	8040288 <__aeabi_dsub>
 804a9da:	9d01      	ldr	r5, [sp, #4]
 804a9dc:	4682      	mov	sl, r0
 804a9de:	468b      	mov	fp, r1
 804a9e0:	4649      	mov	r1, r9
 804a9e2:	4640      	mov	r0, r8
 804a9e4:	f7f6 f8b8 	bl	8040b58 <__aeabi_d2iz>
 804a9e8:	4606      	mov	r6, r0
 804a9ea:	f7f5 fd9b 	bl	8040524 <__aeabi_i2d>
 804a9ee:	4602      	mov	r2, r0
 804a9f0:	460b      	mov	r3, r1
 804a9f2:	4640      	mov	r0, r8
 804a9f4:	4649      	mov	r1, r9
 804a9f6:	f7f5 fc47 	bl	8040288 <__aeabi_dsub>
 804a9fa:	3630      	adds	r6, #48	; 0x30
 804a9fc:	f805 6b01 	strb.w	r6, [r5], #1
 804aa00:	4652      	mov	r2, sl
 804aa02:	465b      	mov	r3, fp
 804aa04:	4680      	mov	r8, r0
 804aa06:	4689      	mov	r9, r1
 804aa08:	f7f6 f868 	bl	8040adc <__aeabi_dcmplt>
 804aa0c:	2800      	cmp	r0, #0
 804aa0e:	d163      	bne.n	804aad8 <_dtoa_r+0x608>
 804aa10:	4642      	mov	r2, r8
 804aa12:	464b      	mov	r3, r9
 804aa14:	4936      	ldr	r1, [pc, #216]	; (804aaf0 <_dtoa_r+0x620>)
 804aa16:	2000      	movs	r0, #0
 804aa18:	f7f5 fc36 	bl	8040288 <__aeabi_dsub>
 804aa1c:	4652      	mov	r2, sl
 804aa1e:	465b      	mov	r3, fp
 804aa20:	f7f6 f85c 	bl	8040adc <__aeabi_dcmplt>
 804aa24:	2800      	cmp	r0, #0
 804aa26:	f040 80b5 	bne.w	804ab94 <_dtoa_r+0x6c4>
 804aa2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804aa2c:	429d      	cmp	r5, r3
 804aa2e:	d081      	beq.n	804a934 <_dtoa_r+0x464>
 804aa30:	4b30      	ldr	r3, [pc, #192]	; (804aaf4 <_dtoa_r+0x624>)
 804aa32:	2200      	movs	r2, #0
 804aa34:	4650      	mov	r0, sl
 804aa36:	4659      	mov	r1, fp
 804aa38:	f7f5 fdde 	bl	80405f8 <__aeabi_dmul>
 804aa3c:	4b2d      	ldr	r3, [pc, #180]	; (804aaf4 <_dtoa_r+0x624>)
 804aa3e:	4682      	mov	sl, r0
 804aa40:	468b      	mov	fp, r1
 804aa42:	4640      	mov	r0, r8
 804aa44:	4649      	mov	r1, r9
 804aa46:	2200      	movs	r2, #0
 804aa48:	f7f5 fdd6 	bl	80405f8 <__aeabi_dmul>
 804aa4c:	4680      	mov	r8, r0
 804aa4e:	4689      	mov	r9, r1
 804aa50:	e7c6      	b.n	804a9e0 <_dtoa_r+0x510>
 804aa52:	4650      	mov	r0, sl
 804aa54:	4659      	mov	r1, fp
 804aa56:	f7f5 fdcf 	bl	80405f8 <__aeabi_dmul>
 804aa5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804aa5c:	9d01      	ldr	r5, [sp, #4]
 804aa5e:	930f      	str	r3, [sp, #60]	; 0x3c
 804aa60:	4682      	mov	sl, r0
 804aa62:	468b      	mov	fp, r1
 804aa64:	4649      	mov	r1, r9
 804aa66:	4640      	mov	r0, r8
 804aa68:	f7f6 f876 	bl	8040b58 <__aeabi_d2iz>
 804aa6c:	4606      	mov	r6, r0
 804aa6e:	f7f5 fd59 	bl	8040524 <__aeabi_i2d>
 804aa72:	3630      	adds	r6, #48	; 0x30
 804aa74:	4602      	mov	r2, r0
 804aa76:	460b      	mov	r3, r1
 804aa78:	4640      	mov	r0, r8
 804aa7a:	4649      	mov	r1, r9
 804aa7c:	f7f5 fc04 	bl	8040288 <__aeabi_dsub>
 804aa80:	f805 6b01 	strb.w	r6, [r5], #1
 804aa84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804aa86:	429d      	cmp	r5, r3
 804aa88:	4680      	mov	r8, r0
 804aa8a:	4689      	mov	r9, r1
 804aa8c:	f04f 0200 	mov.w	r2, #0
 804aa90:	d124      	bne.n	804aadc <_dtoa_r+0x60c>
 804aa92:	4b1b      	ldr	r3, [pc, #108]	; (804ab00 <_dtoa_r+0x630>)
 804aa94:	4650      	mov	r0, sl
 804aa96:	4659      	mov	r1, fp
 804aa98:	f7f5 fbf8 	bl	804028c <__adddf3>
 804aa9c:	4602      	mov	r2, r0
 804aa9e:	460b      	mov	r3, r1
 804aaa0:	4640      	mov	r0, r8
 804aaa2:	4649      	mov	r1, r9
 804aaa4:	f7f6 f838 	bl	8040b18 <__aeabi_dcmpgt>
 804aaa8:	2800      	cmp	r0, #0
 804aaaa:	d173      	bne.n	804ab94 <_dtoa_r+0x6c4>
 804aaac:	4652      	mov	r2, sl
 804aaae:	465b      	mov	r3, fp
 804aab0:	4913      	ldr	r1, [pc, #76]	; (804ab00 <_dtoa_r+0x630>)
 804aab2:	2000      	movs	r0, #0
 804aab4:	f7f5 fbe8 	bl	8040288 <__aeabi_dsub>
 804aab8:	4602      	mov	r2, r0
 804aaba:	460b      	mov	r3, r1
 804aabc:	4640      	mov	r0, r8
 804aabe:	4649      	mov	r1, r9
 804aac0:	f7f6 f80c 	bl	8040adc <__aeabi_dcmplt>
 804aac4:	2800      	cmp	r0, #0
 804aac6:	f43f af35 	beq.w	804a934 <_dtoa_r+0x464>
 804aaca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 804aacc:	1e6b      	subs	r3, r5, #1
 804aace:	930f      	str	r3, [sp, #60]	; 0x3c
 804aad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 804aad4:	2b30      	cmp	r3, #48	; 0x30
 804aad6:	d0f8      	beq.n	804aaca <_dtoa_r+0x5fa>
 804aad8:	9700      	str	r7, [sp, #0]
 804aada:	e049      	b.n	804ab70 <_dtoa_r+0x6a0>
 804aadc:	4b05      	ldr	r3, [pc, #20]	; (804aaf4 <_dtoa_r+0x624>)
 804aade:	f7f5 fd8b 	bl	80405f8 <__aeabi_dmul>
 804aae2:	4680      	mov	r8, r0
 804aae4:	4689      	mov	r9, r1
 804aae6:	e7bd      	b.n	804aa64 <_dtoa_r+0x594>
 804aae8:	0804e528 	.word	0x0804e528
 804aaec:	0804e500 	.word	0x0804e500
 804aaf0:	3ff00000 	.word	0x3ff00000
 804aaf4:	40240000 	.word	0x40240000
 804aaf8:	401c0000 	.word	0x401c0000
 804aafc:	40140000 	.word	0x40140000
 804ab00:	3fe00000 	.word	0x3fe00000
 804ab04:	9d01      	ldr	r5, [sp, #4]
 804ab06:	4656      	mov	r6, sl
 804ab08:	465f      	mov	r7, fp
 804ab0a:	4642      	mov	r2, r8
 804ab0c:	464b      	mov	r3, r9
 804ab0e:	4630      	mov	r0, r6
 804ab10:	4639      	mov	r1, r7
 804ab12:	f7f5 fe9b 	bl	804084c <__aeabi_ddiv>
 804ab16:	f7f6 f81f 	bl	8040b58 <__aeabi_d2iz>
 804ab1a:	4682      	mov	sl, r0
 804ab1c:	f7f5 fd02 	bl	8040524 <__aeabi_i2d>
 804ab20:	4642      	mov	r2, r8
 804ab22:	464b      	mov	r3, r9
 804ab24:	f7f5 fd68 	bl	80405f8 <__aeabi_dmul>
 804ab28:	4602      	mov	r2, r0
 804ab2a:	460b      	mov	r3, r1
 804ab2c:	4630      	mov	r0, r6
 804ab2e:	4639      	mov	r1, r7
 804ab30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 804ab34:	f7f5 fba8 	bl	8040288 <__aeabi_dsub>
 804ab38:	f805 6b01 	strb.w	r6, [r5], #1
 804ab3c:	9e01      	ldr	r6, [sp, #4]
 804ab3e:	9f03      	ldr	r7, [sp, #12]
 804ab40:	1bae      	subs	r6, r5, r6
 804ab42:	42b7      	cmp	r7, r6
 804ab44:	4602      	mov	r2, r0
 804ab46:	460b      	mov	r3, r1
 804ab48:	d135      	bne.n	804abb6 <_dtoa_r+0x6e6>
 804ab4a:	f7f5 fb9f 	bl	804028c <__adddf3>
 804ab4e:	4642      	mov	r2, r8
 804ab50:	464b      	mov	r3, r9
 804ab52:	4606      	mov	r6, r0
 804ab54:	460f      	mov	r7, r1
 804ab56:	f7f5 ffdf 	bl	8040b18 <__aeabi_dcmpgt>
 804ab5a:	b9d0      	cbnz	r0, 804ab92 <_dtoa_r+0x6c2>
 804ab5c:	4642      	mov	r2, r8
 804ab5e:	464b      	mov	r3, r9
 804ab60:	4630      	mov	r0, r6
 804ab62:	4639      	mov	r1, r7
 804ab64:	f7f5 ffb0 	bl	8040ac8 <__aeabi_dcmpeq>
 804ab68:	b110      	cbz	r0, 804ab70 <_dtoa_r+0x6a0>
 804ab6a:	f01a 0f01 	tst.w	sl, #1
 804ab6e:	d110      	bne.n	804ab92 <_dtoa_r+0x6c2>
 804ab70:	4620      	mov	r0, r4
 804ab72:	ee18 1a10 	vmov	r1, s16
 804ab76:	f000 fe67 	bl	804b848 <_Bfree>
 804ab7a:	2300      	movs	r3, #0
 804ab7c:	9800      	ldr	r0, [sp, #0]
 804ab7e:	702b      	strb	r3, [r5, #0]
 804ab80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804ab82:	3001      	adds	r0, #1
 804ab84:	6018      	str	r0, [r3, #0]
 804ab86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804ab88:	2b00      	cmp	r3, #0
 804ab8a:	f43f acf1 	beq.w	804a570 <_dtoa_r+0xa0>
 804ab8e:	601d      	str	r5, [r3, #0]
 804ab90:	e4ee      	b.n	804a570 <_dtoa_r+0xa0>
 804ab92:	9f00      	ldr	r7, [sp, #0]
 804ab94:	462b      	mov	r3, r5
 804ab96:	461d      	mov	r5, r3
 804ab98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804ab9c:	2a39      	cmp	r2, #57	; 0x39
 804ab9e:	d106      	bne.n	804abae <_dtoa_r+0x6de>
 804aba0:	9a01      	ldr	r2, [sp, #4]
 804aba2:	429a      	cmp	r2, r3
 804aba4:	d1f7      	bne.n	804ab96 <_dtoa_r+0x6c6>
 804aba6:	9901      	ldr	r1, [sp, #4]
 804aba8:	2230      	movs	r2, #48	; 0x30
 804abaa:	3701      	adds	r7, #1
 804abac:	700a      	strb	r2, [r1, #0]
 804abae:	781a      	ldrb	r2, [r3, #0]
 804abb0:	3201      	adds	r2, #1
 804abb2:	701a      	strb	r2, [r3, #0]
 804abb4:	e790      	b.n	804aad8 <_dtoa_r+0x608>
 804abb6:	4ba6      	ldr	r3, [pc, #664]	; (804ae50 <_dtoa_r+0x980>)
 804abb8:	2200      	movs	r2, #0
 804abba:	f7f5 fd1d 	bl	80405f8 <__aeabi_dmul>
 804abbe:	2200      	movs	r2, #0
 804abc0:	2300      	movs	r3, #0
 804abc2:	4606      	mov	r6, r0
 804abc4:	460f      	mov	r7, r1
 804abc6:	f7f5 ff7f 	bl	8040ac8 <__aeabi_dcmpeq>
 804abca:	2800      	cmp	r0, #0
 804abcc:	d09d      	beq.n	804ab0a <_dtoa_r+0x63a>
 804abce:	e7cf      	b.n	804ab70 <_dtoa_r+0x6a0>
 804abd0:	9a08      	ldr	r2, [sp, #32]
 804abd2:	2a00      	cmp	r2, #0
 804abd4:	f000 80d7 	beq.w	804ad86 <_dtoa_r+0x8b6>
 804abd8:	9a06      	ldr	r2, [sp, #24]
 804abda:	2a01      	cmp	r2, #1
 804abdc:	f300 80ba 	bgt.w	804ad54 <_dtoa_r+0x884>
 804abe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 804abe2:	2a00      	cmp	r2, #0
 804abe4:	f000 80b2 	beq.w	804ad4c <_dtoa_r+0x87c>
 804abe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 804abec:	9e07      	ldr	r6, [sp, #28]
 804abee:	9d04      	ldr	r5, [sp, #16]
 804abf0:	9a04      	ldr	r2, [sp, #16]
 804abf2:	441a      	add	r2, r3
 804abf4:	9204      	str	r2, [sp, #16]
 804abf6:	9a05      	ldr	r2, [sp, #20]
 804abf8:	2101      	movs	r1, #1
 804abfa:	441a      	add	r2, r3
 804abfc:	4620      	mov	r0, r4
 804abfe:	9205      	str	r2, [sp, #20]
 804ac00:	f000 ff24 	bl	804ba4c <__i2b>
 804ac04:	4607      	mov	r7, r0
 804ac06:	2d00      	cmp	r5, #0
 804ac08:	dd0c      	ble.n	804ac24 <_dtoa_r+0x754>
 804ac0a:	9b05      	ldr	r3, [sp, #20]
 804ac0c:	2b00      	cmp	r3, #0
 804ac0e:	dd09      	ble.n	804ac24 <_dtoa_r+0x754>
 804ac10:	42ab      	cmp	r3, r5
 804ac12:	9a04      	ldr	r2, [sp, #16]
 804ac14:	bfa8      	it	ge
 804ac16:	462b      	movge	r3, r5
 804ac18:	1ad2      	subs	r2, r2, r3
 804ac1a:	9204      	str	r2, [sp, #16]
 804ac1c:	9a05      	ldr	r2, [sp, #20]
 804ac1e:	1aed      	subs	r5, r5, r3
 804ac20:	1ad3      	subs	r3, r2, r3
 804ac22:	9305      	str	r3, [sp, #20]
 804ac24:	9b07      	ldr	r3, [sp, #28]
 804ac26:	b31b      	cbz	r3, 804ac70 <_dtoa_r+0x7a0>
 804ac28:	9b08      	ldr	r3, [sp, #32]
 804ac2a:	2b00      	cmp	r3, #0
 804ac2c:	f000 80af 	beq.w	804ad8e <_dtoa_r+0x8be>
 804ac30:	2e00      	cmp	r6, #0
 804ac32:	dd13      	ble.n	804ac5c <_dtoa_r+0x78c>
 804ac34:	4639      	mov	r1, r7
 804ac36:	4632      	mov	r2, r6
 804ac38:	4620      	mov	r0, r4
 804ac3a:	f000 ffc7 	bl	804bbcc <__pow5mult>
 804ac3e:	ee18 2a10 	vmov	r2, s16
 804ac42:	4601      	mov	r1, r0
 804ac44:	4607      	mov	r7, r0
 804ac46:	4620      	mov	r0, r4
 804ac48:	f000 ff16 	bl	804ba78 <__multiply>
 804ac4c:	ee18 1a10 	vmov	r1, s16
 804ac50:	4680      	mov	r8, r0
 804ac52:	4620      	mov	r0, r4
 804ac54:	f000 fdf8 	bl	804b848 <_Bfree>
 804ac58:	ee08 8a10 	vmov	s16, r8
 804ac5c:	9b07      	ldr	r3, [sp, #28]
 804ac5e:	1b9a      	subs	r2, r3, r6
 804ac60:	d006      	beq.n	804ac70 <_dtoa_r+0x7a0>
 804ac62:	ee18 1a10 	vmov	r1, s16
 804ac66:	4620      	mov	r0, r4
 804ac68:	f000 ffb0 	bl	804bbcc <__pow5mult>
 804ac6c:	ee08 0a10 	vmov	s16, r0
 804ac70:	2101      	movs	r1, #1
 804ac72:	4620      	mov	r0, r4
 804ac74:	f000 feea 	bl	804ba4c <__i2b>
 804ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804ac7a:	2b00      	cmp	r3, #0
 804ac7c:	4606      	mov	r6, r0
 804ac7e:	f340 8088 	ble.w	804ad92 <_dtoa_r+0x8c2>
 804ac82:	461a      	mov	r2, r3
 804ac84:	4601      	mov	r1, r0
 804ac86:	4620      	mov	r0, r4
 804ac88:	f000 ffa0 	bl	804bbcc <__pow5mult>
 804ac8c:	9b06      	ldr	r3, [sp, #24]
 804ac8e:	2b01      	cmp	r3, #1
 804ac90:	4606      	mov	r6, r0
 804ac92:	f340 8081 	ble.w	804ad98 <_dtoa_r+0x8c8>
 804ac96:	f04f 0800 	mov.w	r8, #0
 804ac9a:	6933      	ldr	r3, [r6, #16]
 804ac9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 804aca0:	6918      	ldr	r0, [r3, #16]
 804aca2:	f000 fe83 	bl	804b9ac <__hi0bits>
 804aca6:	f1c0 0020 	rsb	r0, r0, #32
 804acaa:	9b05      	ldr	r3, [sp, #20]
 804acac:	4418      	add	r0, r3
 804acae:	f010 001f 	ands.w	r0, r0, #31
 804acb2:	f000 8092 	beq.w	804adda <_dtoa_r+0x90a>
 804acb6:	f1c0 0320 	rsb	r3, r0, #32
 804acba:	2b04      	cmp	r3, #4
 804acbc:	f340 808a 	ble.w	804add4 <_dtoa_r+0x904>
 804acc0:	f1c0 001c 	rsb	r0, r0, #28
 804acc4:	9b04      	ldr	r3, [sp, #16]
 804acc6:	4403      	add	r3, r0
 804acc8:	9304      	str	r3, [sp, #16]
 804acca:	9b05      	ldr	r3, [sp, #20]
 804accc:	4403      	add	r3, r0
 804acce:	4405      	add	r5, r0
 804acd0:	9305      	str	r3, [sp, #20]
 804acd2:	9b04      	ldr	r3, [sp, #16]
 804acd4:	2b00      	cmp	r3, #0
 804acd6:	dd07      	ble.n	804ace8 <_dtoa_r+0x818>
 804acd8:	ee18 1a10 	vmov	r1, s16
 804acdc:	461a      	mov	r2, r3
 804acde:	4620      	mov	r0, r4
 804ace0:	f000 ffce 	bl	804bc80 <__lshift>
 804ace4:	ee08 0a10 	vmov	s16, r0
 804ace8:	9b05      	ldr	r3, [sp, #20]
 804acea:	2b00      	cmp	r3, #0
 804acec:	dd05      	ble.n	804acfa <_dtoa_r+0x82a>
 804acee:	4631      	mov	r1, r6
 804acf0:	461a      	mov	r2, r3
 804acf2:	4620      	mov	r0, r4
 804acf4:	f000 ffc4 	bl	804bc80 <__lshift>
 804acf8:	4606      	mov	r6, r0
 804acfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804acfc:	2b00      	cmp	r3, #0
 804acfe:	d06e      	beq.n	804adde <_dtoa_r+0x90e>
 804ad00:	ee18 0a10 	vmov	r0, s16
 804ad04:	4631      	mov	r1, r6
 804ad06:	f001 f82b 	bl	804bd60 <__mcmp>
 804ad0a:	2800      	cmp	r0, #0
 804ad0c:	da67      	bge.n	804adde <_dtoa_r+0x90e>
 804ad0e:	9b00      	ldr	r3, [sp, #0]
 804ad10:	3b01      	subs	r3, #1
 804ad12:	ee18 1a10 	vmov	r1, s16
 804ad16:	9300      	str	r3, [sp, #0]
 804ad18:	220a      	movs	r2, #10
 804ad1a:	2300      	movs	r3, #0
 804ad1c:	4620      	mov	r0, r4
 804ad1e:	f000 fdb5 	bl	804b88c <__multadd>
 804ad22:	9b08      	ldr	r3, [sp, #32]
 804ad24:	ee08 0a10 	vmov	s16, r0
 804ad28:	2b00      	cmp	r3, #0
 804ad2a:	f000 81b1 	beq.w	804b090 <_dtoa_r+0xbc0>
 804ad2e:	2300      	movs	r3, #0
 804ad30:	4639      	mov	r1, r7
 804ad32:	220a      	movs	r2, #10
 804ad34:	4620      	mov	r0, r4
 804ad36:	f000 fda9 	bl	804b88c <__multadd>
 804ad3a:	9b02      	ldr	r3, [sp, #8]
 804ad3c:	2b00      	cmp	r3, #0
 804ad3e:	4607      	mov	r7, r0
 804ad40:	f300 808e 	bgt.w	804ae60 <_dtoa_r+0x990>
 804ad44:	9b06      	ldr	r3, [sp, #24]
 804ad46:	2b02      	cmp	r3, #2
 804ad48:	dc51      	bgt.n	804adee <_dtoa_r+0x91e>
 804ad4a:	e089      	b.n	804ae60 <_dtoa_r+0x990>
 804ad4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804ad4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 804ad52:	e74b      	b.n	804abec <_dtoa_r+0x71c>
 804ad54:	9b03      	ldr	r3, [sp, #12]
 804ad56:	1e5e      	subs	r6, r3, #1
 804ad58:	9b07      	ldr	r3, [sp, #28]
 804ad5a:	42b3      	cmp	r3, r6
 804ad5c:	bfbf      	itttt	lt
 804ad5e:	9b07      	ldrlt	r3, [sp, #28]
 804ad60:	9607      	strlt	r6, [sp, #28]
 804ad62:	1af2      	sublt	r2, r6, r3
 804ad64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 804ad66:	bfb6      	itet	lt
 804ad68:	189b      	addlt	r3, r3, r2
 804ad6a:	1b9e      	subge	r6, r3, r6
 804ad6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 804ad6e:	9b03      	ldr	r3, [sp, #12]
 804ad70:	bfb8      	it	lt
 804ad72:	2600      	movlt	r6, #0
 804ad74:	2b00      	cmp	r3, #0
 804ad76:	bfb7      	itett	lt
 804ad78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 804ad7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 804ad80:	1a9d      	sublt	r5, r3, r2
 804ad82:	2300      	movlt	r3, #0
 804ad84:	e734      	b.n	804abf0 <_dtoa_r+0x720>
 804ad86:	9e07      	ldr	r6, [sp, #28]
 804ad88:	9d04      	ldr	r5, [sp, #16]
 804ad8a:	9f08      	ldr	r7, [sp, #32]
 804ad8c:	e73b      	b.n	804ac06 <_dtoa_r+0x736>
 804ad8e:	9a07      	ldr	r2, [sp, #28]
 804ad90:	e767      	b.n	804ac62 <_dtoa_r+0x792>
 804ad92:	9b06      	ldr	r3, [sp, #24]
 804ad94:	2b01      	cmp	r3, #1
 804ad96:	dc18      	bgt.n	804adca <_dtoa_r+0x8fa>
 804ad98:	f1ba 0f00 	cmp.w	sl, #0
 804ad9c:	d115      	bne.n	804adca <_dtoa_r+0x8fa>
 804ad9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804ada2:	b993      	cbnz	r3, 804adca <_dtoa_r+0x8fa>
 804ada4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804ada8:	0d1b      	lsrs	r3, r3, #20
 804adaa:	051b      	lsls	r3, r3, #20
 804adac:	b183      	cbz	r3, 804add0 <_dtoa_r+0x900>
 804adae:	9b04      	ldr	r3, [sp, #16]
 804adb0:	3301      	adds	r3, #1
 804adb2:	9304      	str	r3, [sp, #16]
 804adb4:	9b05      	ldr	r3, [sp, #20]
 804adb6:	3301      	adds	r3, #1
 804adb8:	9305      	str	r3, [sp, #20]
 804adba:	f04f 0801 	mov.w	r8, #1
 804adbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804adc0:	2b00      	cmp	r3, #0
 804adc2:	f47f af6a 	bne.w	804ac9a <_dtoa_r+0x7ca>
 804adc6:	2001      	movs	r0, #1
 804adc8:	e76f      	b.n	804acaa <_dtoa_r+0x7da>
 804adca:	f04f 0800 	mov.w	r8, #0
 804adce:	e7f6      	b.n	804adbe <_dtoa_r+0x8ee>
 804add0:	4698      	mov	r8, r3
 804add2:	e7f4      	b.n	804adbe <_dtoa_r+0x8ee>
 804add4:	f43f af7d 	beq.w	804acd2 <_dtoa_r+0x802>
 804add8:	4618      	mov	r0, r3
 804adda:	301c      	adds	r0, #28
 804addc:	e772      	b.n	804acc4 <_dtoa_r+0x7f4>
 804adde:	9b03      	ldr	r3, [sp, #12]
 804ade0:	2b00      	cmp	r3, #0
 804ade2:	dc37      	bgt.n	804ae54 <_dtoa_r+0x984>
 804ade4:	9b06      	ldr	r3, [sp, #24]
 804ade6:	2b02      	cmp	r3, #2
 804ade8:	dd34      	ble.n	804ae54 <_dtoa_r+0x984>
 804adea:	9b03      	ldr	r3, [sp, #12]
 804adec:	9302      	str	r3, [sp, #8]
 804adee:	9b02      	ldr	r3, [sp, #8]
 804adf0:	b96b      	cbnz	r3, 804ae0e <_dtoa_r+0x93e>
 804adf2:	4631      	mov	r1, r6
 804adf4:	2205      	movs	r2, #5
 804adf6:	4620      	mov	r0, r4
 804adf8:	f000 fd48 	bl	804b88c <__multadd>
 804adfc:	4601      	mov	r1, r0
 804adfe:	4606      	mov	r6, r0
 804ae00:	ee18 0a10 	vmov	r0, s16
 804ae04:	f000 ffac 	bl	804bd60 <__mcmp>
 804ae08:	2800      	cmp	r0, #0
 804ae0a:	f73f adbb 	bgt.w	804a984 <_dtoa_r+0x4b4>
 804ae0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804ae10:	9d01      	ldr	r5, [sp, #4]
 804ae12:	43db      	mvns	r3, r3
 804ae14:	9300      	str	r3, [sp, #0]
 804ae16:	f04f 0800 	mov.w	r8, #0
 804ae1a:	4631      	mov	r1, r6
 804ae1c:	4620      	mov	r0, r4
 804ae1e:	f000 fd13 	bl	804b848 <_Bfree>
 804ae22:	2f00      	cmp	r7, #0
 804ae24:	f43f aea4 	beq.w	804ab70 <_dtoa_r+0x6a0>
 804ae28:	f1b8 0f00 	cmp.w	r8, #0
 804ae2c:	d005      	beq.n	804ae3a <_dtoa_r+0x96a>
 804ae2e:	45b8      	cmp	r8, r7
 804ae30:	d003      	beq.n	804ae3a <_dtoa_r+0x96a>
 804ae32:	4641      	mov	r1, r8
 804ae34:	4620      	mov	r0, r4
 804ae36:	f000 fd07 	bl	804b848 <_Bfree>
 804ae3a:	4639      	mov	r1, r7
 804ae3c:	4620      	mov	r0, r4
 804ae3e:	f000 fd03 	bl	804b848 <_Bfree>
 804ae42:	e695      	b.n	804ab70 <_dtoa_r+0x6a0>
 804ae44:	2600      	movs	r6, #0
 804ae46:	4637      	mov	r7, r6
 804ae48:	e7e1      	b.n	804ae0e <_dtoa_r+0x93e>
 804ae4a:	9700      	str	r7, [sp, #0]
 804ae4c:	4637      	mov	r7, r6
 804ae4e:	e599      	b.n	804a984 <_dtoa_r+0x4b4>
 804ae50:	40240000 	.word	0x40240000
 804ae54:	9b08      	ldr	r3, [sp, #32]
 804ae56:	2b00      	cmp	r3, #0
 804ae58:	f000 80ca 	beq.w	804aff0 <_dtoa_r+0xb20>
 804ae5c:	9b03      	ldr	r3, [sp, #12]
 804ae5e:	9302      	str	r3, [sp, #8]
 804ae60:	2d00      	cmp	r5, #0
 804ae62:	dd05      	ble.n	804ae70 <_dtoa_r+0x9a0>
 804ae64:	4639      	mov	r1, r7
 804ae66:	462a      	mov	r2, r5
 804ae68:	4620      	mov	r0, r4
 804ae6a:	f000 ff09 	bl	804bc80 <__lshift>
 804ae6e:	4607      	mov	r7, r0
 804ae70:	f1b8 0f00 	cmp.w	r8, #0
 804ae74:	d05b      	beq.n	804af2e <_dtoa_r+0xa5e>
 804ae76:	6879      	ldr	r1, [r7, #4]
 804ae78:	4620      	mov	r0, r4
 804ae7a:	f000 fca5 	bl	804b7c8 <_Balloc>
 804ae7e:	4605      	mov	r5, r0
 804ae80:	b928      	cbnz	r0, 804ae8e <_dtoa_r+0x9be>
 804ae82:	4b87      	ldr	r3, [pc, #540]	; (804b0a0 <_dtoa_r+0xbd0>)
 804ae84:	4602      	mov	r2, r0
 804ae86:	f240 21ea 	movw	r1, #746	; 0x2ea
 804ae8a:	f7ff bb3b 	b.w	804a504 <_dtoa_r+0x34>
 804ae8e:	693a      	ldr	r2, [r7, #16]
 804ae90:	3202      	adds	r2, #2
 804ae92:	0092      	lsls	r2, r2, #2
 804ae94:	f107 010c 	add.w	r1, r7, #12
 804ae98:	300c      	adds	r0, #12
 804ae9a:	f7fd fce5 	bl	8048868 <memcpy>
 804ae9e:	2201      	movs	r2, #1
 804aea0:	4629      	mov	r1, r5
 804aea2:	4620      	mov	r0, r4
 804aea4:	f000 feec 	bl	804bc80 <__lshift>
 804aea8:	9b01      	ldr	r3, [sp, #4]
 804aeaa:	f103 0901 	add.w	r9, r3, #1
 804aeae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 804aeb2:	4413      	add	r3, r2
 804aeb4:	9305      	str	r3, [sp, #20]
 804aeb6:	f00a 0301 	and.w	r3, sl, #1
 804aeba:	46b8      	mov	r8, r7
 804aebc:	9304      	str	r3, [sp, #16]
 804aebe:	4607      	mov	r7, r0
 804aec0:	4631      	mov	r1, r6
 804aec2:	ee18 0a10 	vmov	r0, s16
 804aec6:	f7ff fa77 	bl	804a3b8 <quorem>
 804aeca:	4641      	mov	r1, r8
 804aecc:	9002      	str	r0, [sp, #8]
 804aece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 804aed2:	ee18 0a10 	vmov	r0, s16
 804aed6:	f000 ff43 	bl	804bd60 <__mcmp>
 804aeda:	463a      	mov	r2, r7
 804aedc:	9003      	str	r0, [sp, #12]
 804aede:	4631      	mov	r1, r6
 804aee0:	4620      	mov	r0, r4
 804aee2:	f000 ff59 	bl	804bd98 <__mdiff>
 804aee6:	68c2      	ldr	r2, [r0, #12]
 804aee8:	f109 3bff 	add.w	fp, r9, #4294967295
 804aeec:	4605      	mov	r5, r0
 804aeee:	bb02      	cbnz	r2, 804af32 <_dtoa_r+0xa62>
 804aef0:	4601      	mov	r1, r0
 804aef2:	ee18 0a10 	vmov	r0, s16
 804aef6:	f000 ff33 	bl	804bd60 <__mcmp>
 804aefa:	4602      	mov	r2, r0
 804aefc:	4629      	mov	r1, r5
 804aefe:	4620      	mov	r0, r4
 804af00:	9207      	str	r2, [sp, #28]
 804af02:	f000 fca1 	bl	804b848 <_Bfree>
 804af06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 804af0a:	ea43 0102 	orr.w	r1, r3, r2
 804af0e:	9b04      	ldr	r3, [sp, #16]
 804af10:	430b      	orrs	r3, r1
 804af12:	464d      	mov	r5, r9
 804af14:	d10f      	bne.n	804af36 <_dtoa_r+0xa66>
 804af16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804af1a:	d02a      	beq.n	804af72 <_dtoa_r+0xaa2>
 804af1c:	9b03      	ldr	r3, [sp, #12]
 804af1e:	2b00      	cmp	r3, #0
 804af20:	dd02      	ble.n	804af28 <_dtoa_r+0xa58>
 804af22:	9b02      	ldr	r3, [sp, #8]
 804af24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 804af28:	f88b a000 	strb.w	sl, [fp]
 804af2c:	e775      	b.n	804ae1a <_dtoa_r+0x94a>
 804af2e:	4638      	mov	r0, r7
 804af30:	e7ba      	b.n	804aea8 <_dtoa_r+0x9d8>
 804af32:	2201      	movs	r2, #1
 804af34:	e7e2      	b.n	804aefc <_dtoa_r+0xa2c>
 804af36:	9b03      	ldr	r3, [sp, #12]
 804af38:	2b00      	cmp	r3, #0
 804af3a:	db04      	blt.n	804af46 <_dtoa_r+0xa76>
 804af3c:	9906      	ldr	r1, [sp, #24]
 804af3e:	430b      	orrs	r3, r1
 804af40:	9904      	ldr	r1, [sp, #16]
 804af42:	430b      	orrs	r3, r1
 804af44:	d122      	bne.n	804af8c <_dtoa_r+0xabc>
 804af46:	2a00      	cmp	r2, #0
 804af48:	ddee      	ble.n	804af28 <_dtoa_r+0xa58>
 804af4a:	ee18 1a10 	vmov	r1, s16
 804af4e:	2201      	movs	r2, #1
 804af50:	4620      	mov	r0, r4
 804af52:	f000 fe95 	bl	804bc80 <__lshift>
 804af56:	4631      	mov	r1, r6
 804af58:	ee08 0a10 	vmov	s16, r0
 804af5c:	f000 ff00 	bl	804bd60 <__mcmp>
 804af60:	2800      	cmp	r0, #0
 804af62:	dc03      	bgt.n	804af6c <_dtoa_r+0xa9c>
 804af64:	d1e0      	bne.n	804af28 <_dtoa_r+0xa58>
 804af66:	f01a 0f01 	tst.w	sl, #1
 804af6a:	d0dd      	beq.n	804af28 <_dtoa_r+0xa58>
 804af6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804af70:	d1d7      	bne.n	804af22 <_dtoa_r+0xa52>
 804af72:	2339      	movs	r3, #57	; 0x39
 804af74:	f88b 3000 	strb.w	r3, [fp]
 804af78:	462b      	mov	r3, r5
 804af7a:	461d      	mov	r5, r3
 804af7c:	3b01      	subs	r3, #1
 804af7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 804af82:	2a39      	cmp	r2, #57	; 0x39
 804af84:	d071      	beq.n	804b06a <_dtoa_r+0xb9a>
 804af86:	3201      	adds	r2, #1
 804af88:	701a      	strb	r2, [r3, #0]
 804af8a:	e746      	b.n	804ae1a <_dtoa_r+0x94a>
 804af8c:	2a00      	cmp	r2, #0
 804af8e:	dd07      	ble.n	804afa0 <_dtoa_r+0xad0>
 804af90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804af94:	d0ed      	beq.n	804af72 <_dtoa_r+0xaa2>
 804af96:	f10a 0301 	add.w	r3, sl, #1
 804af9a:	f88b 3000 	strb.w	r3, [fp]
 804af9e:	e73c      	b.n	804ae1a <_dtoa_r+0x94a>
 804afa0:	9b05      	ldr	r3, [sp, #20]
 804afa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 804afa6:	4599      	cmp	r9, r3
 804afa8:	d047      	beq.n	804b03a <_dtoa_r+0xb6a>
 804afaa:	ee18 1a10 	vmov	r1, s16
 804afae:	2300      	movs	r3, #0
 804afb0:	220a      	movs	r2, #10
 804afb2:	4620      	mov	r0, r4
 804afb4:	f000 fc6a 	bl	804b88c <__multadd>
 804afb8:	45b8      	cmp	r8, r7
 804afba:	ee08 0a10 	vmov	s16, r0
 804afbe:	f04f 0300 	mov.w	r3, #0
 804afc2:	f04f 020a 	mov.w	r2, #10
 804afc6:	4641      	mov	r1, r8
 804afc8:	4620      	mov	r0, r4
 804afca:	d106      	bne.n	804afda <_dtoa_r+0xb0a>
 804afcc:	f000 fc5e 	bl	804b88c <__multadd>
 804afd0:	4680      	mov	r8, r0
 804afd2:	4607      	mov	r7, r0
 804afd4:	f109 0901 	add.w	r9, r9, #1
 804afd8:	e772      	b.n	804aec0 <_dtoa_r+0x9f0>
 804afda:	f000 fc57 	bl	804b88c <__multadd>
 804afde:	4639      	mov	r1, r7
 804afe0:	4680      	mov	r8, r0
 804afe2:	2300      	movs	r3, #0
 804afe4:	220a      	movs	r2, #10
 804afe6:	4620      	mov	r0, r4
 804afe8:	f000 fc50 	bl	804b88c <__multadd>
 804afec:	4607      	mov	r7, r0
 804afee:	e7f1      	b.n	804afd4 <_dtoa_r+0xb04>
 804aff0:	9b03      	ldr	r3, [sp, #12]
 804aff2:	9302      	str	r3, [sp, #8]
 804aff4:	9d01      	ldr	r5, [sp, #4]
 804aff6:	ee18 0a10 	vmov	r0, s16
 804affa:	4631      	mov	r1, r6
 804affc:	f7ff f9dc 	bl	804a3b8 <quorem>
 804b000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 804b004:	9b01      	ldr	r3, [sp, #4]
 804b006:	f805 ab01 	strb.w	sl, [r5], #1
 804b00a:	1aea      	subs	r2, r5, r3
 804b00c:	9b02      	ldr	r3, [sp, #8]
 804b00e:	4293      	cmp	r3, r2
 804b010:	dd09      	ble.n	804b026 <_dtoa_r+0xb56>
 804b012:	ee18 1a10 	vmov	r1, s16
 804b016:	2300      	movs	r3, #0
 804b018:	220a      	movs	r2, #10
 804b01a:	4620      	mov	r0, r4
 804b01c:	f000 fc36 	bl	804b88c <__multadd>
 804b020:	ee08 0a10 	vmov	s16, r0
 804b024:	e7e7      	b.n	804aff6 <_dtoa_r+0xb26>
 804b026:	9b02      	ldr	r3, [sp, #8]
 804b028:	2b00      	cmp	r3, #0
 804b02a:	bfc8      	it	gt
 804b02c:	461d      	movgt	r5, r3
 804b02e:	9b01      	ldr	r3, [sp, #4]
 804b030:	bfd8      	it	le
 804b032:	2501      	movle	r5, #1
 804b034:	441d      	add	r5, r3
 804b036:	f04f 0800 	mov.w	r8, #0
 804b03a:	ee18 1a10 	vmov	r1, s16
 804b03e:	2201      	movs	r2, #1
 804b040:	4620      	mov	r0, r4
 804b042:	f000 fe1d 	bl	804bc80 <__lshift>
 804b046:	4631      	mov	r1, r6
 804b048:	ee08 0a10 	vmov	s16, r0
 804b04c:	f000 fe88 	bl	804bd60 <__mcmp>
 804b050:	2800      	cmp	r0, #0
 804b052:	dc91      	bgt.n	804af78 <_dtoa_r+0xaa8>
 804b054:	d102      	bne.n	804b05c <_dtoa_r+0xb8c>
 804b056:	f01a 0f01 	tst.w	sl, #1
 804b05a:	d18d      	bne.n	804af78 <_dtoa_r+0xaa8>
 804b05c:	462b      	mov	r3, r5
 804b05e:	461d      	mov	r5, r3
 804b060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804b064:	2a30      	cmp	r2, #48	; 0x30
 804b066:	d0fa      	beq.n	804b05e <_dtoa_r+0xb8e>
 804b068:	e6d7      	b.n	804ae1a <_dtoa_r+0x94a>
 804b06a:	9a01      	ldr	r2, [sp, #4]
 804b06c:	429a      	cmp	r2, r3
 804b06e:	d184      	bne.n	804af7a <_dtoa_r+0xaaa>
 804b070:	9b00      	ldr	r3, [sp, #0]
 804b072:	3301      	adds	r3, #1
 804b074:	9300      	str	r3, [sp, #0]
 804b076:	2331      	movs	r3, #49	; 0x31
 804b078:	7013      	strb	r3, [r2, #0]
 804b07a:	e6ce      	b.n	804ae1a <_dtoa_r+0x94a>
 804b07c:	4b09      	ldr	r3, [pc, #36]	; (804b0a4 <_dtoa_r+0xbd4>)
 804b07e:	f7ff ba95 	b.w	804a5ac <_dtoa_r+0xdc>
 804b082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804b084:	2b00      	cmp	r3, #0
 804b086:	f47f aa6e 	bne.w	804a566 <_dtoa_r+0x96>
 804b08a:	4b07      	ldr	r3, [pc, #28]	; (804b0a8 <_dtoa_r+0xbd8>)
 804b08c:	f7ff ba8e 	b.w	804a5ac <_dtoa_r+0xdc>
 804b090:	9b02      	ldr	r3, [sp, #8]
 804b092:	2b00      	cmp	r3, #0
 804b094:	dcae      	bgt.n	804aff4 <_dtoa_r+0xb24>
 804b096:	9b06      	ldr	r3, [sp, #24]
 804b098:	2b02      	cmp	r3, #2
 804b09a:	f73f aea8 	bgt.w	804adee <_dtoa_r+0x91e>
 804b09e:	e7a9      	b.n	804aff4 <_dtoa_r+0xb24>
 804b0a0:	0804e415 	.word	0x0804e415
 804b0a4:	0804e1f4 	.word	0x0804e1f4
 804b0a8:	0804e396 	.word	0x0804e396

0804b0ac <rshift>:
 804b0ac:	6903      	ldr	r3, [r0, #16]
 804b0ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 804b0b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804b0b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 804b0ba:	f100 0414 	add.w	r4, r0, #20
 804b0be:	dd45      	ble.n	804b14c <rshift+0xa0>
 804b0c0:	f011 011f 	ands.w	r1, r1, #31
 804b0c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 804b0c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 804b0cc:	d10c      	bne.n	804b0e8 <rshift+0x3c>
 804b0ce:	f100 0710 	add.w	r7, r0, #16
 804b0d2:	4629      	mov	r1, r5
 804b0d4:	42b1      	cmp	r1, r6
 804b0d6:	d334      	bcc.n	804b142 <rshift+0x96>
 804b0d8:	1a9b      	subs	r3, r3, r2
 804b0da:	009b      	lsls	r3, r3, #2
 804b0dc:	1eea      	subs	r2, r5, #3
 804b0de:	4296      	cmp	r6, r2
 804b0e0:	bf38      	it	cc
 804b0e2:	2300      	movcc	r3, #0
 804b0e4:	4423      	add	r3, r4
 804b0e6:	e015      	b.n	804b114 <rshift+0x68>
 804b0e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 804b0ec:	f1c1 0820 	rsb	r8, r1, #32
 804b0f0:	40cf      	lsrs	r7, r1
 804b0f2:	f105 0e04 	add.w	lr, r5, #4
 804b0f6:	46a1      	mov	r9, r4
 804b0f8:	4576      	cmp	r6, lr
 804b0fa:	46f4      	mov	ip, lr
 804b0fc:	d815      	bhi.n	804b12a <rshift+0x7e>
 804b0fe:	1a9a      	subs	r2, r3, r2
 804b100:	0092      	lsls	r2, r2, #2
 804b102:	3a04      	subs	r2, #4
 804b104:	3501      	adds	r5, #1
 804b106:	42ae      	cmp	r6, r5
 804b108:	bf38      	it	cc
 804b10a:	2200      	movcc	r2, #0
 804b10c:	18a3      	adds	r3, r4, r2
 804b10e:	50a7      	str	r7, [r4, r2]
 804b110:	b107      	cbz	r7, 804b114 <rshift+0x68>
 804b112:	3304      	adds	r3, #4
 804b114:	1b1a      	subs	r2, r3, r4
 804b116:	42a3      	cmp	r3, r4
 804b118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 804b11c:	bf08      	it	eq
 804b11e:	2300      	moveq	r3, #0
 804b120:	6102      	str	r2, [r0, #16]
 804b122:	bf08      	it	eq
 804b124:	6143      	streq	r3, [r0, #20]
 804b126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804b12a:	f8dc c000 	ldr.w	ip, [ip]
 804b12e:	fa0c fc08 	lsl.w	ip, ip, r8
 804b132:	ea4c 0707 	orr.w	r7, ip, r7
 804b136:	f849 7b04 	str.w	r7, [r9], #4
 804b13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 804b13e:	40cf      	lsrs	r7, r1
 804b140:	e7da      	b.n	804b0f8 <rshift+0x4c>
 804b142:	f851 cb04 	ldr.w	ip, [r1], #4
 804b146:	f847 cf04 	str.w	ip, [r7, #4]!
 804b14a:	e7c3      	b.n	804b0d4 <rshift+0x28>
 804b14c:	4623      	mov	r3, r4
 804b14e:	e7e1      	b.n	804b114 <rshift+0x68>

0804b150 <__hexdig_fun>:
 804b150:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 804b154:	2b09      	cmp	r3, #9
 804b156:	d802      	bhi.n	804b15e <__hexdig_fun+0xe>
 804b158:	3820      	subs	r0, #32
 804b15a:	b2c0      	uxtb	r0, r0
 804b15c:	4770      	bx	lr
 804b15e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 804b162:	2b05      	cmp	r3, #5
 804b164:	d801      	bhi.n	804b16a <__hexdig_fun+0x1a>
 804b166:	3847      	subs	r0, #71	; 0x47
 804b168:	e7f7      	b.n	804b15a <__hexdig_fun+0xa>
 804b16a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 804b16e:	2b05      	cmp	r3, #5
 804b170:	d801      	bhi.n	804b176 <__hexdig_fun+0x26>
 804b172:	3827      	subs	r0, #39	; 0x27
 804b174:	e7f1      	b.n	804b15a <__hexdig_fun+0xa>
 804b176:	2000      	movs	r0, #0
 804b178:	4770      	bx	lr
	...

0804b17c <__gethex>:
 804b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b180:	ed2d 8b02 	vpush	{d8}
 804b184:	b089      	sub	sp, #36	; 0x24
 804b186:	ee08 0a10 	vmov	s16, r0
 804b18a:	9304      	str	r3, [sp, #16]
 804b18c:	4bb4      	ldr	r3, [pc, #720]	; (804b460 <__gethex+0x2e4>)
 804b18e:	681b      	ldr	r3, [r3, #0]
 804b190:	9301      	str	r3, [sp, #4]
 804b192:	4618      	mov	r0, r3
 804b194:	468b      	mov	fp, r1
 804b196:	4690      	mov	r8, r2
 804b198:	f7f5 f81a 	bl	80401d0 <strlen>
 804b19c:	9b01      	ldr	r3, [sp, #4]
 804b19e:	f8db 2000 	ldr.w	r2, [fp]
 804b1a2:	4403      	add	r3, r0
 804b1a4:	4682      	mov	sl, r0
 804b1a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804b1aa:	9305      	str	r3, [sp, #20]
 804b1ac:	1c93      	adds	r3, r2, #2
 804b1ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 804b1b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 804b1b6:	32fe      	adds	r2, #254	; 0xfe
 804b1b8:	18d1      	adds	r1, r2, r3
 804b1ba:	461f      	mov	r7, r3
 804b1bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 804b1c0:	9100      	str	r1, [sp, #0]
 804b1c2:	2830      	cmp	r0, #48	; 0x30
 804b1c4:	d0f8      	beq.n	804b1b8 <__gethex+0x3c>
 804b1c6:	f7ff ffc3 	bl	804b150 <__hexdig_fun>
 804b1ca:	4604      	mov	r4, r0
 804b1cc:	2800      	cmp	r0, #0
 804b1ce:	d13a      	bne.n	804b246 <__gethex+0xca>
 804b1d0:	9901      	ldr	r1, [sp, #4]
 804b1d2:	4652      	mov	r2, sl
 804b1d4:	4638      	mov	r0, r7
 804b1d6:	f001 fa23 	bl	804c620 <strncmp>
 804b1da:	4605      	mov	r5, r0
 804b1dc:	2800      	cmp	r0, #0
 804b1de:	d168      	bne.n	804b2b2 <__gethex+0x136>
 804b1e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 804b1e4:	eb07 060a 	add.w	r6, r7, sl
 804b1e8:	f7ff ffb2 	bl	804b150 <__hexdig_fun>
 804b1ec:	2800      	cmp	r0, #0
 804b1ee:	d062      	beq.n	804b2b6 <__gethex+0x13a>
 804b1f0:	4633      	mov	r3, r6
 804b1f2:	7818      	ldrb	r0, [r3, #0]
 804b1f4:	2830      	cmp	r0, #48	; 0x30
 804b1f6:	461f      	mov	r7, r3
 804b1f8:	f103 0301 	add.w	r3, r3, #1
 804b1fc:	d0f9      	beq.n	804b1f2 <__gethex+0x76>
 804b1fe:	f7ff ffa7 	bl	804b150 <__hexdig_fun>
 804b202:	2301      	movs	r3, #1
 804b204:	fab0 f480 	clz	r4, r0
 804b208:	0964      	lsrs	r4, r4, #5
 804b20a:	4635      	mov	r5, r6
 804b20c:	9300      	str	r3, [sp, #0]
 804b20e:	463a      	mov	r2, r7
 804b210:	4616      	mov	r6, r2
 804b212:	3201      	adds	r2, #1
 804b214:	7830      	ldrb	r0, [r6, #0]
 804b216:	f7ff ff9b 	bl	804b150 <__hexdig_fun>
 804b21a:	2800      	cmp	r0, #0
 804b21c:	d1f8      	bne.n	804b210 <__gethex+0x94>
 804b21e:	9901      	ldr	r1, [sp, #4]
 804b220:	4652      	mov	r2, sl
 804b222:	4630      	mov	r0, r6
 804b224:	f001 f9fc 	bl	804c620 <strncmp>
 804b228:	b980      	cbnz	r0, 804b24c <__gethex+0xd0>
 804b22a:	b94d      	cbnz	r5, 804b240 <__gethex+0xc4>
 804b22c:	eb06 050a 	add.w	r5, r6, sl
 804b230:	462a      	mov	r2, r5
 804b232:	4616      	mov	r6, r2
 804b234:	3201      	adds	r2, #1
 804b236:	7830      	ldrb	r0, [r6, #0]
 804b238:	f7ff ff8a 	bl	804b150 <__hexdig_fun>
 804b23c:	2800      	cmp	r0, #0
 804b23e:	d1f8      	bne.n	804b232 <__gethex+0xb6>
 804b240:	1bad      	subs	r5, r5, r6
 804b242:	00ad      	lsls	r5, r5, #2
 804b244:	e004      	b.n	804b250 <__gethex+0xd4>
 804b246:	2400      	movs	r4, #0
 804b248:	4625      	mov	r5, r4
 804b24a:	e7e0      	b.n	804b20e <__gethex+0x92>
 804b24c:	2d00      	cmp	r5, #0
 804b24e:	d1f7      	bne.n	804b240 <__gethex+0xc4>
 804b250:	7833      	ldrb	r3, [r6, #0]
 804b252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804b256:	2b50      	cmp	r3, #80	; 0x50
 804b258:	d13b      	bne.n	804b2d2 <__gethex+0x156>
 804b25a:	7873      	ldrb	r3, [r6, #1]
 804b25c:	2b2b      	cmp	r3, #43	; 0x2b
 804b25e:	d02c      	beq.n	804b2ba <__gethex+0x13e>
 804b260:	2b2d      	cmp	r3, #45	; 0x2d
 804b262:	d02e      	beq.n	804b2c2 <__gethex+0x146>
 804b264:	1c71      	adds	r1, r6, #1
 804b266:	f04f 0900 	mov.w	r9, #0
 804b26a:	7808      	ldrb	r0, [r1, #0]
 804b26c:	f7ff ff70 	bl	804b150 <__hexdig_fun>
 804b270:	1e43      	subs	r3, r0, #1
 804b272:	b2db      	uxtb	r3, r3
 804b274:	2b18      	cmp	r3, #24
 804b276:	d82c      	bhi.n	804b2d2 <__gethex+0x156>
 804b278:	f1a0 0210 	sub.w	r2, r0, #16
 804b27c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 804b280:	f7ff ff66 	bl	804b150 <__hexdig_fun>
 804b284:	1e43      	subs	r3, r0, #1
 804b286:	b2db      	uxtb	r3, r3
 804b288:	2b18      	cmp	r3, #24
 804b28a:	d91d      	bls.n	804b2c8 <__gethex+0x14c>
 804b28c:	f1b9 0f00 	cmp.w	r9, #0
 804b290:	d000      	beq.n	804b294 <__gethex+0x118>
 804b292:	4252      	negs	r2, r2
 804b294:	4415      	add	r5, r2
 804b296:	f8cb 1000 	str.w	r1, [fp]
 804b29a:	b1e4      	cbz	r4, 804b2d6 <__gethex+0x15a>
 804b29c:	9b00      	ldr	r3, [sp, #0]
 804b29e:	2b00      	cmp	r3, #0
 804b2a0:	bf14      	ite	ne
 804b2a2:	2700      	movne	r7, #0
 804b2a4:	2706      	moveq	r7, #6
 804b2a6:	4638      	mov	r0, r7
 804b2a8:	b009      	add	sp, #36	; 0x24
 804b2aa:	ecbd 8b02 	vpop	{d8}
 804b2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b2b2:	463e      	mov	r6, r7
 804b2b4:	4625      	mov	r5, r4
 804b2b6:	2401      	movs	r4, #1
 804b2b8:	e7ca      	b.n	804b250 <__gethex+0xd4>
 804b2ba:	f04f 0900 	mov.w	r9, #0
 804b2be:	1cb1      	adds	r1, r6, #2
 804b2c0:	e7d3      	b.n	804b26a <__gethex+0xee>
 804b2c2:	f04f 0901 	mov.w	r9, #1
 804b2c6:	e7fa      	b.n	804b2be <__gethex+0x142>
 804b2c8:	230a      	movs	r3, #10
 804b2ca:	fb03 0202 	mla	r2, r3, r2, r0
 804b2ce:	3a10      	subs	r2, #16
 804b2d0:	e7d4      	b.n	804b27c <__gethex+0x100>
 804b2d2:	4631      	mov	r1, r6
 804b2d4:	e7df      	b.n	804b296 <__gethex+0x11a>
 804b2d6:	1bf3      	subs	r3, r6, r7
 804b2d8:	3b01      	subs	r3, #1
 804b2da:	4621      	mov	r1, r4
 804b2dc:	2b07      	cmp	r3, #7
 804b2de:	dc0b      	bgt.n	804b2f8 <__gethex+0x17c>
 804b2e0:	ee18 0a10 	vmov	r0, s16
 804b2e4:	f000 fa70 	bl	804b7c8 <_Balloc>
 804b2e8:	4604      	mov	r4, r0
 804b2ea:	b940      	cbnz	r0, 804b2fe <__gethex+0x182>
 804b2ec:	4b5d      	ldr	r3, [pc, #372]	; (804b464 <__gethex+0x2e8>)
 804b2ee:	4602      	mov	r2, r0
 804b2f0:	21de      	movs	r1, #222	; 0xde
 804b2f2:	485d      	ldr	r0, [pc, #372]	; (804b468 <__gethex+0x2ec>)
 804b2f4:	f001 f9b6 	bl	804c664 <__assert_func>
 804b2f8:	3101      	adds	r1, #1
 804b2fa:	105b      	asrs	r3, r3, #1
 804b2fc:	e7ee      	b.n	804b2dc <__gethex+0x160>
 804b2fe:	f100 0914 	add.w	r9, r0, #20
 804b302:	f04f 0b00 	mov.w	fp, #0
 804b306:	f1ca 0301 	rsb	r3, sl, #1
 804b30a:	f8cd 9008 	str.w	r9, [sp, #8]
 804b30e:	f8cd b000 	str.w	fp, [sp]
 804b312:	9306      	str	r3, [sp, #24]
 804b314:	42b7      	cmp	r7, r6
 804b316:	d340      	bcc.n	804b39a <__gethex+0x21e>
 804b318:	9802      	ldr	r0, [sp, #8]
 804b31a:	9b00      	ldr	r3, [sp, #0]
 804b31c:	f840 3b04 	str.w	r3, [r0], #4
 804b320:	eba0 0009 	sub.w	r0, r0, r9
 804b324:	1080      	asrs	r0, r0, #2
 804b326:	0146      	lsls	r6, r0, #5
 804b328:	6120      	str	r0, [r4, #16]
 804b32a:	4618      	mov	r0, r3
 804b32c:	f000 fb3e 	bl	804b9ac <__hi0bits>
 804b330:	1a30      	subs	r0, r6, r0
 804b332:	f8d8 6000 	ldr.w	r6, [r8]
 804b336:	42b0      	cmp	r0, r6
 804b338:	dd63      	ble.n	804b402 <__gethex+0x286>
 804b33a:	1b87      	subs	r7, r0, r6
 804b33c:	4639      	mov	r1, r7
 804b33e:	4620      	mov	r0, r4
 804b340:	f000 fee2 	bl	804c108 <__any_on>
 804b344:	4682      	mov	sl, r0
 804b346:	b1a8      	cbz	r0, 804b374 <__gethex+0x1f8>
 804b348:	1e7b      	subs	r3, r7, #1
 804b34a:	1159      	asrs	r1, r3, #5
 804b34c:	f003 021f 	and.w	r2, r3, #31
 804b350:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 804b354:	f04f 0a01 	mov.w	sl, #1
 804b358:	fa0a f202 	lsl.w	r2, sl, r2
 804b35c:	420a      	tst	r2, r1
 804b35e:	d009      	beq.n	804b374 <__gethex+0x1f8>
 804b360:	4553      	cmp	r3, sl
 804b362:	dd05      	ble.n	804b370 <__gethex+0x1f4>
 804b364:	1eb9      	subs	r1, r7, #2
 804b366:	4620      	mov	r0, r4
 804b368:	f000 fece 	bl	804c108 <__any_on>
 804b36c:	2800      	cmp	r0, #0
 804b36e:	d145      	bne.n	804b3fc <__gethex+0x280>
 804b370:	f04f 0a02 	mov.w	sl, #2
 804b374:	4639      	mov	r1, r7
 804b376:	4620      	mov	r0, r4
 804b378:	f7ff fe98 	bl	804b0ac <rshift>
 804b37c:	443d      	add	r5, r7
 804b37e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804b382:	42ab      	cmp	r3, r5
 804b384:	da4c      	bge.n	804b420 <__gethex+0x2a4>
 804b386:	ee18 0a10 	vmov	r0, s16
 804b38a:	4621      	mov	r1, r4
 804b38c:	f000 fa5c 	bl	804b848 <_Bfree>
 804b390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804b392:	2300      	movs	r3, #0
 804b394:	6013      	str	r3, [r2, #0]
 804b396:	27a3      	movs	r7, #163	; 0xa3
 804b398:	e785      	b.n	804b2a6 <__gethex+0x12a>
 804b39a:	1e73      	subs	r3, r6, #1
 804b39c:	9a05      	ldr	r2, [sp, #20]
 804b39e:	9303      	str	r3, [sp, #12]
 804b3a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 804b3a4:	4293      	cmp	r3, r2
 804b3a6:	d019      	beq.n	804b3dc <__gethex+0x260>
 804b3a8:	f1bb 0f20 	cmp.w	fp, #32
 804b3ac:	d107      	bne.n	804b3be <__gethex+0x242>
 804b3ae:	9b02      	ldr	r3, [sp, #8]
 804b3b0:	9a00      	ldr	r2, [sp, #0]
 804b3b2:	f843 2b04 	str.w	r2, [r3], #4
 804b3b6:	9302      	str	r3, [sp, #8]
 804b3b8:	2300      	movs	r3, #0
 804b3ba:	9300      	str	r3, [sp, #0]
 804b3bc:	469b      	mov	fp, r3
 804b3be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 804b3c2:	f7ff fec5 	bl	804b150 <__hexdig_fun>
 804b3c6:	9b00      	ldr	r3, [sp, #0]
 804b3c8:	f000 000f 	and.w	r0, r0, #15
 804b3cc:	fa00 f00b 	lsl.w	r0, r0, fp
 804b3d0:	4303      	orrs	r3, r0
 804b3d2:	9300      	str	r3, [sp, #0]
 804b3d4:	f10b 0b04 	add.w	fp, fp, #4
 804b3d8:	9b03      	ldr	r3, [sp, #12]
 804b3da:	e00d      	b.n	804b3f8 <__gethex+0x27c>
 804b3dc:	9b03      	ldr	r3, [sp, #12]
 804b3de:	9a06      	ldr	r2, [sp, #24]
 804b3e0:	4413      	add	r3, r2
 804b3e2:	42bb      	cmp	r3, r7
 804b3e4:	d3e0      	bcc.n	804b3a8 <__gethex+0x22c>
 804b3e6:	4618      	mov	r0, r3
 804b3e8:	9901      	ldr	r1, [sp, #4]
 804b3ea:	9307      	str	r3, [sp, #28]
 804b3ec:	4652      	mov	r2, sl
 804b3ee:	f001 f917 	bl	804c620 <strncmp>
 804b3f2:	9b07      	ldr	r3, [sp, #28]
 804b3f4:	2800      	cmp	r0, #0
 804b3f6:	d1d7      	bne.n	804b3a8 <__gethex+0x22c>
 804b3f8:	461e      	mov	r6, r3
 804b3fa:	e78b      	b.n	804b314 <__gethex+0x198>
 804b3fc:	f04f 0a03 	mov.w	sl, #3
 804b400:	e7b8      	b.n	804b374 <__gethex+0x1f8>
 804b402:	da0a      	bge.n	804b41a <__gethex+0x29e>
 804b404:	1a37      	subs	r7, r6, r0
 804b406:	4621      	mov	r1, r4
 804b408:	ee18 0a10 	vmov	r0, s16
 804b40c:	463a      	mov	r2, r7
 804b40e:	f000 fc37 	bl	804bc80 <__lshift>
 804b412:	1bed      	subs	r5, r5, r7
 804b414:	4604      	mov	r4, r0
 804b416:	f100 0914 	add.w	r9, r0, #20
 804b41a:	f04f 0a00 	mov.w	sl, #0
 804b41e:	e7ae      	b.n	804b37e <__gethex+0x202>
 804b420:	f8d8 0004 	ldr.w	r0, [r8, #4]
 804b424:	42a8      	cmp	r0, r5
 804b426:	dd72      	ble.n	804b50e <__gethex+0x392>
 804b428:	1b45      	subs	r5, r0, r5
 804b42a:	42ae      	cmp	r6, r5
 804b42c:	dc36      	bgt.n	804b49c <__gethex+0x320>
 804b42e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804b432:	2b02      	cmp	r3, #2
 804b434:	d02a      	beq.n	804b48c <__gethex+0x310>
 804b436:	2b03      	cmp	r3, #3
 804b438:	d02c      	beq.n	804b494 <__gethex+0x318>
 804b43a:	2b01      	cmp	r3, #1
 804b43c:	d11c      	bne.n	804b478 <__gethex+0x2fc>
 804b43e:	42ae      	cmp	r6, r5
 804b440:	d11a      	bne.n	804b478 <__gethex+0x2fc>
 804b442:	2e01      	cmp	r6, #1
 804b444:	d112      	bne.n	804b46c <__gethex+0x2f0>
 804b446:	9a04      	ldr	r2, [sp, #16]
 804b448:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804b44c:	6013      	str	r3, [r2, #0]
 804b44e:	2301      	movs	r3, #1
 804b450:	6123      	str	r3, [r4, #16]
 804b452:	f8c9 3000 	str.w	r3, [r9]
 804b456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804b458:	2762      	movs	r7, #98	; 0x62
 804b45a:	601c      	str	r4, [r3, #0]
 804b45c:	e723      	b.n	804b2a6 <__gethex+0x12a>
 804b45e:	bf00      	nop
 804b460:	0804e48c 	.word	0x0804e48c
 804b464:	0804e415 	.word	0x0804e415
 804b468:	0804e426 	.word	0x0804e426
 804b46c:	1e71      	subs	r1, r6, #1
 804b46e:	4620      	mov	r0, r4
 804b470:	f000 fe4a 	bl	804c108 <__any_on>
 804b474:	2800      	cmp	r0, #0
 804b476:	d1e6      	bne.n	804b446 <__gethex+0x2ca>
 804b478:	ee18 0a10 	vmov	r0, s16
 804b47c:	4621      	mov	r1, r4
 804b47e:	f000 f9e3 	bl	804b848 <_Bfree>
 804b482:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804b484:	2300      	movs	r3, #0
 804b486:	6013      	str	r3, [r2, #0]
 804b488:	2750      	movs	r7, #80	; 0x50
 804b48a:	e70c      	b.n	804b2a6 <__gethex+0x12a>
 804b48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b48e:	2b00      	cmp	r3, #0
 804b490:	d1f2      	bne.n	804b478 <__gethex+0x2fc>
 804b492:	e7d8      	b.n	804b446 <__gethex+0x2ca>
 804b494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b496:	2b00      	cmp	r3, #0
 804b498:	d1d5      	bne.n	804b446 <__gethex+0x2ca>
 804b49a:	e7ed      	b.n	804b478 <__gethex+0x2fc>
 804b49c:	1e6f      	subs	r7, r5, #1
 804b49e:	f1ba 0f00 	cmp.w	sl, #0
 804b4a2:	d131      	bne.n	804b508 <__gethex+0x38c>
 804b4a4:	b127      	cbz	r7, 804b4b0 <__gethex+0x334>
 804b4a6:	4639      	mov	r1, r7
 804b4a8:	4620      	mov	r0, r4
 804b4aa:	f000 fe2d 	bl	804c108 <__any_on>
 804b4ae:	4682      	mov	sl, r0
 804b4b0:	117b      	asrs	r3, r7, #5
 804b4b2:	2101      	movs	r1, #1
 804b4b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 804b4b8:	f007 071f 	and.w	r7, r7, #31
 804b4bc:	fa01 f707 	lsl.w	r7, r1, r7
 804b4c0:	421f      	tst	r7, r3
 804b4c2:	4629      	mov	r1, r5
 804b4c4:	4620      	mov	r0, r4
 804b4c6:	bf18      	it	ne
 804b4c8:	f04a 0a02 	orrne.w	sl, sl, #2
 804b4cc:	1b76      	subs	r6, r6, r5
 804b4ce:	f7ff fded 	bl	804b0ac <rshift>
 804b4d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 804b4d6:	2702      	movs	r7, #2
 804b4d8:	f1ba 0f00 	cmp.w	sl, #0
 804b4dc:	d048      	beq.n	804b570 <__gethex+0x3f4>
 804b4de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804b4e2:	2b02      	cmp	r3, #2
 804b4e4:	d015      	beq.n	804b512 <__gethex+0x396>
 804b4e6:	2b03      	cmp	r3, #3
 804b4e8:	d017      	beq.n	804b51a <__gethex+0x39e>
 804b4ea:	2b01      	cmp	r3, #1
 804b4ec:	d109      	bne.n	804b502 <__gethex+0x386>
 804b4ee:	f01a 0f02 	tst.w	sl, #2
 804b4f2:	d006      	beq.n	804b502 <__gethex+0x386>
 804b4f4:	f8d9 0000 	ldr.w	r0, [r9]
 804b4f8:	ea4a 0a00 	orr.w	sl, sl, r0
 804b4fc:	f01a 0f01 	tst.w	sl, #1
 804b500:	d10e      	bne.n	804b520 <__gethex+0x3a4>
 804b502:	f047 0710 	orr.w	r7, r7, #16
 804b506:	e033      	b.n	804b570 <__gethex+0x3f4>
 804b508:	f04f 0a01 	mov.w	sl, #1
 804b50c:	e7d0      	b.n	804b4b0 <__gethex+0x334>
 804b50e:	2701      	movs	r7, #1
 804b510:	e7e2      	b.n	804b4d8 <__gethex+0x35c>
 804b512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b514:	f1c3 0301 	rsb	r3, r3, #1
 804b518:	9315      	str	r3, [sp, #84]	; 0x54
 804b51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b51c:	2b00      	cmp	r3, #0
 804b51e:	d0f0      	beq.n	804b502 <__gethex+0x386>
 804b520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 804b524:	f104 0314 	add.w	r3, r4, #20
 804b528:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 804b52c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 804b530:	f04f 0c00 	mov.w	ip, #0
 804b534:	4618      	mov	r0, r3
 804b536:	f853 2b04 	ldr.w	r2, [r3], #4
 804b53a:	f1b2 3fff 	cmp.w	r2, #4294967295
 804b53e:	d01c      	beq.n	804b57a <__gethex+0x3fe>
 804b540:	3201      	adds	r2, #1
 804b542:	6002      	str	r2, [r0, #0]
 804b544:	2f02      	cmp	r7, #2
 804b546:	f104 0314 	add.w	r3, r4, #20
 804b54a:	d13f      	bne.n	804b5cc <__gethex+0x450>
 804b54c:	f8d8 2000 	ldr.w	r2, [r8]
 804b550:	3a01      	subs	r2, #1
 804b552:	42b2      	cmp	r2, r6
 804b554:	d10a      	bne.n	804b56c <__gethex+0x3f0>
 804b556:	1171      	asrs	r1, r6, #5
 804b558:	2201      	movs	r2, #1
 804b55a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 804b55e:	f006 061f 	and.w	r6, r6, #31
 804b562:	fa02 f606 	lsl.w	r6, r2, r6
 804b566:	421e      	tst	r6, r3
 804b568:	bf18      	it	ne
 804b56a:	4617      	movne	r7, r2
 804b56c:	f047 0720 	orr.w	r7, r7, #32
 804b570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804b572:	601c      	str	r4, [r3, #0]
 804b574:	9b04      	ldr	r3, [sp, #16]
 804b576:	601d      	str	r5, [r3, #0]
 804b578:	e695      	b.n	804b2a6 <__gethex+0x12a>
 804b57a:	4299      	cmp	r1, r3
 804b57c:	f843 cc04 	str.w	ip, [r3, #-4]
 804b580:	d8d8      	bhi.n	804b534 <__gethex+0x3b8>
 804b582:	68a3      	ldr	r3, [r4, #8]
 804b584:	459b      	cmp	fp, r3
 804b586:	db19      	blt.n	804b5bc <__gethex+0x440>
 804b588:	6861      	ldr	r1, [r4, #4]
 804b58a:	ee18 0a10 	vmov	r0, s16
 804b58e:	3101      	adds	r1, #1
 804b590:	f000 f91a 	bl	804b7c8 <_Balloc>
 804b594:	4681      	mov	r9, r0
 804b596:	b918      	cbnz	r0, 804b5a0 <__gethex+0x424>
 804b598:	4b1a      	ldr	r3, [pc, #104]	; (804b604 <__gethex+0x488>)
 804b59a:	4602      	mov	r2, r0
 804b59c:	2184      	movs	r1, #132	; 0x84
 804b59e:	e6a8      	b.n	804b2f2 <__gethex+0x176>
 804b5a0:	6922      	ldr	r2, [r4, #16]
 804b5a2:	3202      	adds	r2, #2
 804b5a4:	f104 010c 	add.w	r1, r4, #12
 804b5a8:	0092      	lsls	r2, r2, #2
 804b5aa:	300c      	adds	r0, #12
 804b5ac:	f7fd f95c 	bl	8048868 <memcpy>
 804b5b0:	4621      	mov	r1, r4
 804b5b2:	ee18 0a10 	vmov	r0, s16
 804b5b6:	f000 f947 	bl	804b848 <_Bfree>
 804b5ba:	464c      	mov	r4, r9
 804b5bc:	6923      	ldr	r3, [r4, #16]
 804b5be:	1c5a      	adds	r2, r3, #1
 804b5c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 804b5c4:	6122      	str	r2, [r4, #16]
 804b5c6:	2201      	movs	r2, #1
 804b5c8:	615a      	str	r2, [r3, #20]
 804b5ca:	e7bb      	b.n	804b544 <__gethex+0x3c8>
 804b5cc:	6922      	ldr	r2, [r4, #16]
 804b5ce:	455a      	cmp	r2, fp
 804b5d0:	dd0b      	ble.n	804b5ea <__gethex+0x46e>
 804b5d2:	2101      	movs	r1, #1
 804b5d4:	4620      	mov	r0, r4
 804b5d6:	f7ff fd69 	bl	804b0ac <rshift>
 804b5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804b5de:	3501      	adds	r5, #1
 804b5e0:	42ab      	cmp	r3, r5
 804b5e2:	f6ff aed0 	blt.w	804b386 <__gethex+0x20a>
 804b5e6:	2701      	movs	r7, #1
 804b5e8:	e7c0      	b.n	804b56c <__gethex+0x3f0>
 804b5ea:	f016 061f 	ands.w	r6, r6, #31
 804b5ee:	d0fa      	beq.n	804b5e6 <__gethex+0x46a>
 804b5f0:	4453      	add	r3, sl
 804b5f2:	f1c6 0620 	rsb	r6, r6, #32
 804b5f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 804b5fa:	f000 f9d7 	bl	804b9ac <__hi0bits>
 804b5fe:	42b0      	cmp	r0, r6
 804b600:	dbe7      	blt.n	804b5d2 <__gethex+0x456>
 804b602:	e7f0      	b.n	804b5e6 <__gethex+0x46a>
 804b604:	0804e415 	.word	0x0804e415

0804b608 <L_shift>:
 804b608:	f1c2 0208 	rsb	r2, r2, #8
 804b60c:	0092      	lsls	r2, r2, #2
 804b60e:	b570      	push	{r4, r5, r6, lr}
 804b610:	f1c2 0620 	rsb	r6, r2, #32
 804b614:	6843      	ldr	r3, [r0, #4]
 804b616:	6804      	ldr	r4, [r0, #0]
 804b618:	fa03 f506 	lsl.w	r5, r3, r6
 804b61c:	432c      	orrs	r4, r5
 804b61e:	40d3      	lsrs	r3, r2
 804b620:	6004      	str	r4, [r0, #0]
 804b622:	f840 3f04 	str.w	r3, [r0, #4]!
 804b626:	4288      	cmp	r0, r1
 804b628:	d3f4      	bcc.n	804b614 <L_shift+0xc>
 804b62a:	bd70      	pop	{r4, r5, r6, pc}

0804b62c <__match>:
 804b62c:	b530      	push	{r4, r5, lr}
 804b62e:	6803      	ldr	r3, [r0, #0]
 804b630:	3301      	adds	r3, #1
 804b632:	f811 4b01 	ldrb.w	r4, [r1], #1
 804b636:	b914      	cbnz	r4, 804b63e <__match+0x12>
 804b638:	6003      	str	r3, [r0, #0]
 804b63a:	2001      	movs	r0, #1
 804b63c:	bd30      	pop	{r4, r5, pc}
 804b63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 804b646:	2d19      	cmp	r5, #25
 804b648:	bf98      	it	ls
 804b64a:	3220      	addls	r2, #32
 804b64c:	42a2      	cmp	r2, r4
 804b64e:	d0f0      	beq.n	804b632 <__match+0x6>
 804b650:	2000      	movs	r0, #0
 804b652:	e7f3      	b.n	804b63c <__match+0x10>

0804b654 <__hexnan>:
 804b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b658:	680b      	ldr	r3, [r1, #0]
 804b65a:	115e      	asrs	r6, r3, #5
 804b65c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 804b660:	f013 031f 	ands.w	r3, r3, #31
 804b664:	b087      	sub	sp, #28
 804b666:	bf18      	it	ne
 804b668:	3604      	addne	r6, #4
 804b66a:	2500      	movs	r5, #0
 804b66c:	1f37      	subs	r7, r6, #4
 804b66e:	4690      	mov	r8, r2
 804b670:	6802      	ldr	r2, [r0, #0]
 804b672:	9301      	str	r3, [sp, #4]
 804b674:	4682      	mov	sl, r0
 804b676:	f846 5c04 	str.w	r5, [r6, #-4]
 804b67a:	46b9      	mov	r9, r7
 804b67c:	463c      	mov	r4, r7
 804b67e:	9502      	str	r5, [sp, #8]
 804b680:	46ab      	mov	fp, r5
 804b682:	7851      	ldrb	r1, [r2, #1]
 804b684:	1c53      	adds	r3, r2, #1
 804b686:	9303      	str	r3, [sp, #12]
 804b688:	b341      	cbz	r1, 804b6dc <__hexnan+0x88>
 804b68a:	4608      	mov	r0, r1
 804b68c:	9205      	str	r2, [sp, #20]
 804b68e:	9104      	str	r1, [sp, #16]
 804b690:	f7ff fd5e 	bl	804b150 <__hexdig_fun>
 804b694:	2800      	cmp	r0, #0
 804b696:	d14f      	bne.n	804b738 <__hexnan+0xe4>
 804b698:	9904      	ldr	r1, [sp, #16]
 804b69a:	9a05      	ldr	r2, [sp, #20]
 804b69c:	2920      	cmp	r1, #32
 804b69e:	d818      	bhi.n	804b6d2 <__hexnan+0x7e>
 804b6a0:	9b02      	ldr	r3, [sp, #8]
 804b6a2:	459b      	cmp	fp, r3
 804b6a4:	dd13      	ble.n	804b6ce <__hexnan+0x7a>
 804b6a6:	454c      	cmp	r4, r9
 804b6a8:	d206      	bcs.n	804b6b8 <__hexnan+0x64>
 804b6aa:	2d07      	cmp	r5, #7
 804b6ac:	dc04      	bgt.n	804b6b8 <__hexnan+0x64>
 804b6ae:	462a      	mov	r2, r5
 804b6b0:	4649      	mov	r1, r9
 804b6b2:	4620      	mov	r0, r4
 804b6b4:	f7ff ffa8 	bl	804b608 <L_shift>
 804b6b8:	4544      	cmp	r4, r8
 804b6ba:	d950      	bls.n	804b75e <__hexnan+0x10a>
 804b6bc:	2300      	movs	r3, #0
 804b6be:	f1a4 0904 	sub.w	r9, r4, #4
 804b6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 804b6c6:	f8cd b008 	str.w	fp, [sp, #8]
 804b6ca:	464c      	mov	r4, r9
 804b6cc:	461d      	mov	r5, r3
 804b6ce:	9a03      	ldr	r2, [sp, #12]
 804b6d0:	e7d7      	b.n	804b682 <__hexnan+0x2e>
 804b6d2:	2929      	cmp	r1, #41	; 0x29
 804b6d4:	d156      	bne.n	804b784 <__hexnan+0x130>
 804b6d6:	3202      	adds	r2, #2
 804b6d8:	f8ca 2000 	str.w	r2, [sl]
 804b6dc:	f1bb 0f00 	cmp.w	fp, #0
 804b6e0:	d050      	beq.n	804b784 <__hexnan+0x130>
 804b6e2:	454c      	cmp	r4, r9
 804b6e4:	d206      	bcs.n	804b6f4 <__hexnan+0xa0>
 804b6e6:	2d07      	cmp	r5, #7
 804b6e8:	dc04      	bgt.n	804b6f4 <__hexnan+0xa0>
 804b6ea:	462a      	mov	r2, r5
 804b6ec:	4649      	mov	r1, r9
 804b6ee:	4620      	mov	r0, r4
 804b6f0:	f7ff ff8a 	bl	804b608 <L_shift>
 804b6f4:	4544      	cmp	r4, r8
 804b6f6:	d934      	bls.n	804b762 <__hexnan+0x10e>
 804b6f8:	f1a8 0204 	sub.w	r2, r8, #4
 804b6fc:	4623      	mov	r3, r4
 804b6fe:	f853 1b04 	ldr.w	r1, [r3], #4
 804b702:	f842 1f04 	str.w	r1, [r2, #4]!
 804b706:	429f      	cmp	r7, r3
 804b708:	d2f9      	bcs.n	804b6fe <__hexnan+0xaa>
 804b70a:	1b3b      	subs	r3, r7, r4
 804b70c:	f023 0303 	bic.w	r3, r3, #3
 804b710:	3304      	adds	r3, #4
 804b712:	3401      	adds	r4, #1
 804b714:	3e03      	subs	r6, #3
 804b716:	42b4      	cmp	r4, r6
 804b718:	bf88      	it	hi
 804b71a:	2304      	movhi	r3, #4
 804b71c:	4443      	add	r3, r8
 804b71e:	2200      	movs	r2, #0
 804b720:	f843 2b04 	str.w	r2, [r3], #4
 804b724:	429f      	cmp	r7, r3
 804b726:	d2fb      	bcs.n	804b720 <__hexnan+0xcc>
 804b728:	683b      	ldr	r3, [r7, #0]
 804b72a:	b91b      	cbnz	r3, 804b734 <__hexnan+0xe0>
 804b72c:	4547      	cmp	r7, r8
 804b72e:	d127      	bne.n	804b780 <__hexnan+0x12c>
 804b730:	2301      	movs	r3, #1
 804b732:	603b      	str	r3, [r7, #0]
 804b734:	2005      	movs	r0, #5
 804b736:	e026      	b.n	804b786 <__hexnan+0x132>
 804b738:	3501      	adds	r5, #1
 804b73a:	2d08      	cmp	r5, #8
 804b73c:	f10b 0b01 	add.w	fp, fp, #1
 804b740:	dd06      	ble.n	804b750 <__hexnan+0xfc>
 804b742:	4544      	cmp	r4, r8
 804b744:	d9c3      	bls.n	804b6ce <__hexnan+0x7a>
 804b746:	2300      	movs	r3, #0
 804b748:	f844 3c04 	str.w	r3, [r4, #-4]
 804b74c:	2501      	movs	r5, #1
 804b74e:	3c04      	subs	r4, #4
 804b750:	6822      	ldr	r2, [r4, #0]
 804b752:	f000 000f 	and.w	r0, r0, #15
 804b756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 804b75a:	6022      	str	r2, [r4, #0]
 804b75c:	e7b7      	b.n	804b6ce <__hexnan+0x7a>
 804b75e:	2508      	movs	r5, #8
 804b760:	e7b5      	b.n	804b6ce <__hexnan+0x7a>
 804b762:	9b01      	ldr	r3, [sp, #4]
 804b764:	2b00      	cmp	r3, #0
 804b766:	d0df      	beq.n	804b728 <__hexnan+0xd4>
 804b768:	f04f 32ff 	mov.w	r2, #4294967295
 804b76c:	f1c3 0320 	rsb	r3, r3, #32
 804b770:	fa22 f303 	lsr.w	r3, r2, r3
 804b774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 804b778:	401a      	ands	r2, r3
 804b77a:	f846 2c04 	str.w	r2, [r6, #-4]
 804b77e:	e7d3      	b.n	804b728 <__hexnan+0xd4>
 804b780:	3f04      	subs	r7, #4
 804b782:	e7d1      	b.n	804b728 <__hexnan+0xd4>
 804b784:	2004      	movs	r0, #4
 804b786:	b007      	add	sp, #28
 804b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804b78c <_localeconv_r>:
 804b78c:	4800      	ldr	r0, [pc, #0]	; (804b790 <_localeconv_r+0x4>)
 804b78e:	4770      	bx	lr
 804b790:	2000016c 	.word	0x2000016c

0804b794 <malloc>:
 804b794:	4b02      	ldr	r3, [pc, #8]	; (804b7a0 <malloc+0xc>)
 804b796:	4601      	mov	r1, r0
 804b798:	6818      	ldr	r0, [r3, #0]
 804b79a:	f000 bd59 	b.w	804c250 <_malloc_r>
 804b79e:	bf00      	nop
 804b7a0:	20000014 	.word	0x20000014

0804b7a4 <__ascii_mbtowc>:
 804b7a4:	b082      	sub	sp, #8
 804b7a6:	b901      	cbnz	r1, 804b7aa <__ascii_mbtowc+0x6>
 804b7a8:	a901      	add	r1, sp, #4
 804b7aa:	b142      	cbz	r2, 804b7be <__ascii_mbtowc+0x1a>
 804b7ac:	b14b      	cbz	r3, 804b7c2 <__ascii_mbtowc+0x1e>
 804b7ae:	7813      	ldrb	r3, [r2, #0]
 804b7b0:	600b      	str	r3, [r1, #0]
 804b7b2:	7812      	ldrb	r2, [r2, #0]
 804b7b4:	1e10      	subs	r0, r2, #0
 804b7b6:	bf18      	it	ne
 804b7b8:	2001      	movne	r0, #1
 804b7ba:	b002      	add	sp, #8
 804b7bc:	4770      	bx	lr
 804b7be:	4610      	mov	r0, r2
 804b7c0:	e7fb      	b.n	804b7ba <__ascii_mbtowc+0x16>
 804b7c2:	f06f 0001 	mvn.w	r0, #1
 804b7c6:	e7f8      	b.n	804b7ba <__ascii_mbtowc+0x16>

0804b7c8 <_Balloc>:
 804b7c8:	b570      	push	{r4, r5, r6, lr}
 804b7ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804b7cc:	4604      	mov	r4, r0
 804b7ce:	460d      	mov	r5, r1
 804b7d0:	b976      	cbnz	r6, 804b7f0 <_Balloc+0x28>
 804b7d2:	2010      	movs	r0, #16
 804b7d4:	f7ff ffde 	bl	804b794 <malloc>
 804b7d8:	4602      	mov	r2, r0
 804b7da:	6260      	str	r0, [r4, #36]	; 0x24
 804b7dc:	b920      	cbnz	r0, 804b7e8 <_Balloc+0x20>
 804b7de:	4b18      	ldr	r3, [pc, #96]	; (804b840 <_Balloc+0x78>)
 804b7e0:	4818      	ldr	r0, [pc, #96]	; (804b844 <_Balloc+0x7c>)
 804b7e2:	2166      	movs	r1, #102	; 0x66
 804b7e4:	f000 ff3e 	bl	804c664 <__assert_func>
 804b7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804b7ec:	6006      	str	r6, [r0, #0]
 804b7ee:	60c6      	str	r6, [r0, #12]
 804b7f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 804b7f2:	68f3      	ldr	r3, [r6, #12]
 804b7f4:	b183      	cbz	r3, 804b818 <_Balloc+0x50>
 804b7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804b7f8:	68db      	ldr	r3, [r3, #12]
 804b7fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 804b7fe:	b9b8      	cbnz	r0, 804b830 <_Balloc+0x68>
 804b800:	2101      	movs	r1, #1
 804b802:	fa01 f605 	lsl.w	r6, r1, r5
 804b806:	1d72      	adds	r2, r6, #5
 804b808:	0092      	lsls	r2, r2, #2
 804b80a:	4620      	mov	r0, r4
 804b80c:	f000 fc9d 	bl	804c14a <_calloc_r>
 804b810:	b160      	cbz	r0, 804b82c <_Balloc+0x64>
 804b812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804b816:	e00e      	b.n	804b836 <_Balloc+0x6e>
 804b818:	2221      	movs	r2, #33	; 0x21
 804b81a:	2104      	movs	r1, #4
 804b81c:	4620      	mov	r0, r4
 804b81e:	f000 fc94 	bl	804c14a <_calloc_r>
 804b822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804b824:	60f0      	str	r0, [r6, #12]
 804b826:	68db      	ldr	r3, [r3, #12]
 804b828:	2b00      	cmp	r3, #0
 804b82a:	d1e4      	bne.n	804b7f6 <_Balloc+0x2e>
 804b82c:	2000      	movs	r0, #0
 804b82e:	bd70      	pop	{r4, r5, r6, pc}
 804b830:	6802      	ldr	r2, [r0, #0]
 804b832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804b836:	2300      	movs	r3, #0
 804b838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 804b83c:	e7f7      	b.n	804b82e <_Balloc+0x66>
 804b83e:	bf00      	nop
 804b840:	0804e3a3 	.word	0x0804e3a3
 804b844:	0804e4a0 	.word	0x0804e4a0

0804b848 <_Bfree>:
 804b848:	b570      	push	{r4, r5, r6, lr}
 804b84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804b84c:	4605      	mov	r5, r0
 804b84e:	460c      	mov	r4, r1
 804b850:	b976      	cbnz	r6, 804b870 <_Bfree+0x28>
 804b852:	2010      	movs	r0, #16
 804b854:	f7ff ff9e 	bl	804b794 <malloc>
 804b858:	4602      	mov	r2, r0
 804b85a:	6268      	str	r0, [r5, #36]	; 0x24
 804b85c:	b920      	cbnz	r0, 804b868 <_Bfree+0x20>
 804b85e:	4b09      	ldr	r3, [pc, #36]	; (804b884 <_Bfree+0x3c>)
 804b860:	4809      	ldr	r0, [pc, #36]	; (804b888 <_Bfree+0x40>)
 804b862:	218a      	movs	r1, #138	; 0x8a
 804b864:	f000 fefe 	bl	804c664 <__assert_func>
 804b868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804b86c:	6006      	str	r6, [r0, #0]
 804b86e:	60c6      	str	r6, [r0, #12]
 804b870:	b13c      	cbz	r4, 804b882 <_Bfree+0x3a>
 804b872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 804b874:	6862      	ldr	r2, [r4, #4]
 804b876:	68db      	ldr	r3, [r3, #12]
 804b878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804b87c:	6021      	str	r1, [r4, #0]
 804b87e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804b882:	bd70      	pop	{r4, r5, r6, pc}
 804b884:	0804e3a3 	.word	0x0804e3a3
 804b888:	0804e4a0 	.word	0x0804e4a0

0804b88c <__multadd>:
 804b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b890:	690d      	ldr	r5, [r1, #16]
 804b892:	4607      	mov	r7, r0
 804b894:	460c      	mov	r4, r1
 804b896:	461e      	mov	r6, r3
 804b898:	f101 0c14 	add.w	ip, r1, #20
 804b89c:	2000      	movs	r0, #0
 804b89e:	f8dc 3000 	ldr.w	r3, [ip]
 804b8a2:	b299      	uxth	r1, r3
 804b8a4:	fb02 6101 	mla	r1, r2, r1, r6
 804b8a8:	0c1e      	lsrs	r6, r3, #16
 804b8aa:	0c0b      	lsrs	r3, r1, #16
 804b8ac:	fb02 3306 	mla	r3, r2, r6, r3
 804b8b0:	b289      	uxth	r1, r1
 804b8b2:	3001      	adds	r0, #1
 804b8b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 804b8b8:	4285      	cmp	r5, r0
 804b8ba:	f84c 1b04 	str.w	r1, [ip], #4
 804b8be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 804b8c2:	dcec      	bgt.n	804b89e <__multadd+0x12>
 804b8c4:	b30e      	cbz	r6, 804b90a <__multadd+0x7e>
 804b8c6:	68a3      	ldr	r3, [r4, #8]
 804b8c8:	42ab      	cmp	r3, r5
 804b8ca:	dc19      	bgt.n	804b900 <__multadd+0x74>
 804b8cc:	6861      	ldr	r1, [r4, #4]
 804b8ce:	4638      	mov	r0, r7
 804b8d0:	3101      	adds	r1, #1
 804b8d2:	f7ff ff79 	bl	804b7c8 <_Balloc>
 804b8d6:	4680      	mov	r8, r0
 804b8d8:	b928      	cbnz	r0, 804b8e6 <__multadd+0x5a>
 804b8da:	4602      	mov	r2, r0
 804b8dc:	4b0c      	ldr	r3, [pc, #48]	; (804b910 <__multadd+0x84>)
 804b8de:	480d      	ldr	r0, [pc, #52]	; (804b914 <__multadd+0x88>)
 804b8e0:	21b5      	movs	r1, #181	; 0xb5
 804b8e2:	f000 febf 	bl	804c664 <__assert_func>
 804b8e6:	6922      	ldr	r2, [r4, #16]
 804b8e8:	3202      	adds	r2, #2
 804b8ea:	f104 010c 	add.w	r1, r4, #12
 804b8ee:	0092      	lsls	r2, r2, #2
 804b8f0:	300c      	adds	r0, #12
 804b8f2:	f7fc ffb9 	bl	8048868 <memcpy>
 804b8f6:	4621      	mov	r1, r4
 804b8f8:	4638      	mov	r0, r7
 804b8fa:	f7ff ffa5 	bl	804b848 <_Bfree>
 804b8fe:	4644      	mov	r4, r8
 804b900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 804b904:	3501      	adds	r5, #1
 804b906:	615e      	str	r6, [r3, #20]
 804b908:	6125      	str	r5, [r4, #16]
 804b90a:	4620      	mov	r0, r4
 804b90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b910:	0804e415 	.word	0x0804e415
 804b914:	0804e4a0 	.word	0x0804e4a0

0804b918 <__s2b>:
 804b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b91c:	460c      	mov	r4, r1
 804b91e:	4615      	mov	r5, r2
 804b920:	461f      	mov	r7, r3
 804b922:	2209      	movs	r2, #9
 804b924:	3308      	adds	r3, #8
 804b926:	4606      	mov	r6, r0
 804b928:	fb93 f3f2 	sdiv	r3, r3, r2
 804b92c:	2100      	movs	r1, #0
 804b92e:	2201      	movs	r2, #1
 804b930:	429a      	cmp	r2, r3
 804b932:	db09      	blt.n	804b948 <__s2b+0x30>
 804b934:	4630      	mov	r0, r6
 804b936:	f7ff ff47 	bl	804b7c8 <_Balloc>
 804b93a:	b940      	cbnz	r0, 804b94e <__s2b+0x36>
 804b93c:	4602      	mov	r2, r0
 804b93e:	4b19      	ldr	r3, [pc, #100]	; (804b9a4 <__s2b+0x8c>)
 804b940:	4819      	ldr	r0, [pc, #100]	; (804b9a8 <__s2b+0x90>)
 804b942:	21ce      	movs	r1, #206	; 0xce
 804b944:	f000 fe8e 	bl	804c664 <__assert_func>
 804b948:	0052      	lsls	r2, r2, #1
 804b94a:	3101      	adds	r1, #1
 804b94c:	e7f0      	b.n	804b930 <__s2b+0x18>
 804b94e:	9b08      	ldr	r3, [sp, #32]
 804b950:	6143      	str	r3, [r0, #20]
 804b952:	2d09      	cmp	r5, #9
 804b954:	f04f 0301 	mov.w	r3, #1
 804b958:	6103      	str	r3, [r0, #16]
 804b95a:	dd16      	ble.n	804b98a <__s2b+0x72>
 804b95c:	f104 0909 	add.w	r9, r4, #9
 804b960:	46c8      	mov	r8, r9
 804b962:	442c      	add	r4, r5
 804b964:	f818 3b01 	ldrb.w	r3, [r8], #1
 804b968:	4601      	mov	r1, r0
 804b96a:	3b30      	subs	r3, #48	; 0x30
 804b96c:	220a      	movs	r2, #10
 804b96e:	4630      	mov	r0, r6
 804b970:	f7ff ff8c 	bl	804b88c <__multadd>
 804b974:	45a0      	cmp	r8, r4
 804b976:	d1f5      	bne.n	804b964 <__s2b+0x4c>
 804b978:	f1a5 0408 	sub.w	r4, r5, #8
 804b97c:	444c      	add	r4, r9
 804b97e:	1b2d      	subs	r5, r5, r4
 804b980:	1963      	adds	r3, r4, r5
 804b982:	42bb      	cmp	r3, r7
 804b984:	db04      	blt.n	804b990 <__s2b+0x78>
 804b986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b98a:	340a      	adds	r4, #10
 804b98c:	2509      	movs	r5, #9
 804b98e:	e7f6      	b.n	804b97e <__s2b+0x66>
 804b990:	f814 3b01 	ldrb.w	r3, [r4], #1
 804b994:	4601      	mov	r1, r0
 804b996:	3b30      	subs	r3, #48	; 0x30
 804b998:	220a      	movs	r2, #10
 804b99a:	4630      	mov	r0, r6
 804b99c:	f7ff ff76 	bl	804b88c <__multadd>
 804b9a0:	e7ee      	b.n	804b980 <__s2b+0x68>
 804b9a2:	bf00      	nop
 804b9a4:	0804e415 	.word	0x0804e415
 804b9a8:	0804e4a0 	.word	0x0804e4a0

0804b9ac <__hi0bits>:
 804b9ac:	0c03      	lsrs	r3, r0, #16
 804b9ae:	041b      	lsls	r3, r3, #16
 804b9b0:	b9d3      	cbnz	r3, 804b9e8 <__hi0bits+0x3c>
 804b9b2:	0400      	lsls	r0, r0, #16
 804b9b4:	2310      	movs	r3, #16
 804b9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 804b9ba:	bf04      	itt	eq
 804b9bc:	0200      	lsleq	r0, r0, #8
 804b9be:	3308      	addeq	r3, #8
 804b9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 804b9c4:	bf04      	itt	eq
 804b9c6:	0100      	lsleq	r0, r0, #4
 804b9c8:	3304      	addeq	r3, #4
 804b9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 804b9ce:	bf04      	itt	eq
 804b9d0:	0080      	lsleq	r0, r0, #2
 804b9d2:	3302      	addeq	r3, #2
 804b9d4:	2800      	cmp	r0, #0
 804b9d6:	db05      	blt.n	804b9e4 <__hi0bits+0x38>
 804b9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 804b9dc:	f103 0301 	add.w	r3, r3, #1
 804b9e0:	bf08      	it	eq
 804b9e2:	2320      	moveq	r3, #32
 804b9e4:	4618      	mov	r0, r3
 804b9e6:	4770      	bx	lr
 804b9e8:	2300      	movs	r3, #0
 804b9ea:	e7e4      	b.n	804b9b6 <__hi0bits+0xa>

0804b9ec <__lo0bits>:
 804b9ec:	6803      	ldr	r3, [r0, #0]
 804b9ee:	f013 0207 	ands.w	r2, r3, #7
 804b9f2:	4601      	mov	r1, r0
 804b9f4:	d00b      	beq.n	804ba0e <__lo0bits+0x22>
 804b9f6:	07da      	lsls	r2, r3, #31
 804b9f8:	d423      	bmi.n	804ba42 <__lo0bits+0x56>
 804b9fa:	0798      	lsls	r0, r3, #30
 804b9fc:	bf49      	itett	mi
 804b9fe:	085b      	lsrmi	r3, r3, #1
 804ba00:	089b      	lsrpl	r3, r3, #2
 804ba02:	2001      	movmi	r0, #1
 804ba04:	600b      	strmi	r3, [r1, #0]
 804ba06:	bf5c      	itt	pl
 804ba08:	600b      	strpl	r3, [r1, #0]
 804ba0a:	2002      	movpl	r0, #2
 804ba0c:	4770      	bx	lr
 804ba0e:	b298      	uxth	r0, r3
 804ba10:	b9a8      	cbnz	r0, 804ba3e <__lo0bits+0x52>
 804ba12:	0c1b      	lsrs	r3, r3, #16
 804ba14:	2010      	movs	r0, #16
 804ba16:	b2da      	uxtb	r2, r3
 804ba18:	b90a      	cbnz	r2, 804ba1e <__lo0bits+0x32>
 804ba1a:	3008      	adds	r0, #8
 804ba1c:	0a1b      	lsrs	r3, r3, #8
 804ba1e:	071a      	lsls	r2, r3, #28
 804ba20:	bf04      	itt	eq
 804ba22:	091b      	lsreq	r3, r3, #4
 804ba24:	3004      	addeq	r0, #4
 804ba26:	079a      	lsls	r2, r3, #30
 804ba28:	bf04      	itt	eq
 804ba2a:	089b      	lsreq	r3, r3, #2
 804ba2c:	3002      	addeq	r0, #2
 804ba2e:	07da      	lsls	r2, r3, #31
 804ba30:	d403      	bmi.n	804ba3a <__lo0bits+0x4e>
 804ba32:	085b      	lsrs	r3, r3, #1
 804ba34:	f100 0001 	add.w	r0, r0, #1
 804ba38:	d005      	beq.n	804ba46 <__lo0bits+0x5a>
 804ba3a:	600b      	str	r3, [r1, #0]
 804ba3c:	4770      	bx	lr
 804ba3e:	4610      	mov	r0, r2
 804ba40:	e7e9      	b.n	804ba16 <__lo0bits+0x2a>
 804ba42:	2000      	movs	r0, #0
 804ba44:	4770      	bx	lr
 804ba46:	2020      	movs	r0, #32
 804ba48:	4770      	bx	lr
	...

0804ba4c <__i2b>:
 804ba4c:	b510      	push	{r4, lr}
 804ba4e:	460c      	mov	r4, r1
 804ba50:	2101      	movs	r1, #1
 804ba52:	f7ff feb9 	bl	804b7c8 <_Balloc>
 804ba56:	4602      	mov	r2, r0
 804ba58:	b928      	cbnz	r0, 804ba66 <__i2b+0x1a>
 804ba5a:	4b05      	ldr	r3, [pc, #20]	; (804ba70 <__i2b+0x24>)
 804ba5c:	4805      	ldr	r0, [pc, #20]	; (804ba74 <__i2b+0x28>)
 804ba5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 804ba62:	f000 fdff 	bl	804c664 <__assert_func>
 804ba66:	2301      	movs	r3, #1
 804ba68:	6144      	str	r4, [r0, #20]
 804ba6a:	6103      	str	r3, [r0, #16]
 804ba6c:	bd10      	pop	{r4, pc}
 804ba6e:	bf00      	nop
 804ba70:	0804e415 	.word	0x0804e415
 804ba74:	0804e4a0 	.word	0x0804e4a0

0804ba78 <__multiply>:
 804ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ba7c:	4691      	mov	r9, r2
 804ba7e:	690a      	ldr	r2, [r1, #16]
 804ba80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804ba84:	429a      	cmp	r2, r3
 804ba86:	bfb8      	it	lt
 804ba88:	460b      	movlt	r3, r1
 804ba8a:	460c      	mov	r4, r1
 804ba8c:	bfbc      	itt	lt
 804ba8e:	464c      	movlt	r4, r9
 804ba90:	4699      	movlt	r9, r3
 804ba92:	6927      	ldr	r7, [r4, #16]
 804ba94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 804ba98:	68a3      	ldr	r3, [r4, #8]
 804ba9a:	6861      	ldr	r1, [r4, #4]
 804ba9c:	eb07 060a 	add.w	r6, r7, sl
 804baa0:	42b3      	cmp	r3, r6
 804baa2:	b085      	sub	sp, #20
 804baa4:	bfb8      	it	lt
 804baa6:	3101      	addlt	r1, #1
 804baa8:	f7ff fe8e 	bl	804b7c8 <_Balloc>
 804baac:	b930      	cbnz	r0, 804babc <__multiply+0x44>
 804baae:	4602      	mov	r2, r0
 804bab0:	4b44      	ldr	r3, [pc, #272]	; (804bbc4 <__multiply+0x14c>)
 804bab2:	4845      	ldr	r0, [pc, #276]	; (804bbc8 <__multiply+0x150>)
 804bab4:	f240 115d 	movw	r1, #349	; 0x15d
 804bab8:	f000 fdd4 	bl	804c664 <__assert_func>
 804babc:	f100 0514 	add.w	r5, r0, #20
 804bac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 804bac4:	462b      	mov	r3, r5
 804bac6:	2200      	movs	r2, #0
 804bac8:	4543      	cmp	r3, r8
 804baca:	d321      	bcc.n	804bb10 <__multiply+0x98>
 804bacc:	f104 0314 	add.w	r3, r4, #20
 804bad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 804bad4:	f109 0314 	add.w	r3, r9, #20
 804bad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 804badc:	9202      	str	r2, [sp, #8]
 804bade:	1b3a      	subs	r2, r7, r4
 804bae0:	3a15      	subs	r2, #21
 804bae2:	f022 0203 	bic.w	r2, r2, #3
 804bae6:	3204      	adds	r2, #4
 804bae8:	f104 0115 	add.w	r1, r4, #21
 804baec:	428f      	cmp	r7, r1
 804baee:	bf38      	it	cc
 804baf0:	2204      	movcc	r2, #4
 804baf2:	9201      	str	r2, [sp, #4]
 804baf4:	9a02      	ldr	r2, [sp, #8]
 804baf6:	9303      	str	r3, [sp, #12]
 804baf8:	429a      	cmp	r2, r3
 804bafa:	d80c      	bhi.n	804bb16 <__multiply+0x9e>
 804bafc:	2e00      	cmp	r6, #0
 804bafe:	dd03      	ble.n	804bb08 <__multiply+0x90>
 804bb00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 804bb04:	2b00      	cmp	r3, #0
 804bb06:	d05a      	beq.n	804bbbe <__multiply+0x146>
 804bb08:	6106      	str	r6, [r0, #16]
 804bb0a:	b005      	add	sp, #20
 804bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804bb10:	f843 2b04 	str.w	r2, [r3], #4
 804bb14:	e7d8      	b.n	804bac8 <__multiply+0x50>
 804bb16:	f8b3 a000 	ldrh.w	sl, [r3]
 804bb1a:	f1ba 0f00 	cmp.w	sl, #0
 804bb1e:	d024      	beq.n	804bb6a <__multiply+0xf2>
 804bb20:	f104 0e14 	add.w	lr, r4, #20
 804bb24:	46a9      	mov	r9, r5
 804bb26:	f04f 0c00 	mov.w	ip, #0
 804bb2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 804bb2e:	f8d9 1000 	ldr.w	r1, [r9]
 804bb32:	fa1f fb82 	uxth.w	fp, r2
 804bb36:	b289      	uxth	r1, r1
 804bb38:	fb0a 110b 	mla	r1, sl, fp, r1
 804bb3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 804bb40:	f8d9 2000 	ldr.w	r2, [r9]
 804bb44:	4461      	add	r1, ip
 804bb46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 804bb4a:	fb0a c20b 	mla	r2, sl, fp, ip
 804bb4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 804bb52:	b289      	uxth	r1, r1
 804bb54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 804bb58:	4577      	cmp	r7, lr
 804bb5a:	f849 1b04 	str.w	r1, [r9], #4
 804bb5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 804bb62:	d8e2      	bhi.n	804bb2a <__multiply+0xb2>
 804bb64:	9a01      	ldr	r2, [sp, #4]
 804bb66:	f845 c002 	str.w	ip, [r5, r2]
 804bb6a:	9a03      	ldr	r2, [sp, #12]
 804bb6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 804bb70:	3304      	adds	r3, #4
 804bb72:	f1b9 0f00 	cmp.w	r9, #0
 804bb76:	d020      	beq.n	804bbba <__multiply+0x142>
 804bb78:	6829      	ldr	r1, [r5, #0]
 804bb7a:	f104 0c14 	add.w	ip, r4, #20
 804bb7e:	46ae      	mov	lr, r5
 804bb80:	f04f 0a00 	mov.w	sl, #0
 804bb84:	f8bc b000 	ldrh.w	fp, [ip]
 804bb88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 804bb8c:	fb09 220b 	mla	r2, r9, fp, r2
 804bb90:	4492      	add	sl, r2
 804bb92:	b289      	uxth	r1, r1
 804bb94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 804bb98:	f84e 1b04 	str.w	r1, [lr], #4
 804bb9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 804bba0:	f8be 1000 	ldrh.w	r1, [lr]
 804bba4:	0c12      	lsrs	r2, r2, #16
 804bba6:	fb09 1102 	mla	r1, r9, r2, r1
 804bbaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 804bbae:	4567      	cmp	r7, ip
 804bbb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 804bbb4:	d8e6      	bhi.n	804bb84 <__multiply+0x10c>
 804bbb6:	9a01      	ldr	r2, [sp, #4]
 804bbb8:	50a9      	str	r1, [r5, r2]
 804bbba:	3504      	adds	r5, #4
 804bbbc:	e79a      	b.n	804baf4 <__multiply+0x7c>
 804bbbe:	3e01      	subs	r6, #1
 804bbc0:	e79c      	b.n	804bafc <__multiply+0x84>
 804bbc2:	bf00      	nop
 804bbc4:	0804e415 	.word	0x0804e415
 804bbc8:	0804e4a0 	.word	0x0804e4a0

0804bbcc <__pow5mult>:
 804bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804bbd0:	4615      	mov	r5, r2
 804bbd2:	f012 0203 	ands.w	r2, r2, #3
 804bbd6:	4606      	mov	r6, r0
 804bbd8:	460f      	mov	r7, r1
 804bbda:	d007      	beq.n	804bbec <__pow5mult+0x20>
 804bbdc:	4c25      	ldr	r4, [pc, #148]	; (804bc74 <__pow5mult+0xa8>)
 804bbde:	3a01      	subs	r2, #1
 804bbe0:	2300      	movs	r3, #0
 804bbe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804bbe6:	f7ff fe51 	bl	804b88c <__multadd>
 804bbea:	4607      	mov	r7, r0
 804bbec:	10ad      	asrs	r5, r5, #2
 804bbee:	d03d      	beq.n	804bc6c <__pow5mult+0xa0>
 804bbf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 804bbf2:	b97c      	cbnz	r4, 804bc14 <__pow5mult+0x48>
 804bbf4:	2010      	movs	r0, #16
 804bbf6:	f7ff fdcd 	bl	804b794 <malloc>
 804bbfa:	4602      	mov	r2, r0
 804bbfc:	6270      	str	r0, [r6, #36]	; 0x24
 804bbfe:	b928      	cbnz	r0, 804bc0c <__pow5mult+0x40>
 804bc00:	4b1d      	ldr	r3, [pc, #116]	; (804bc78 <__pow5mult+0xac>)
 804bc02:	481e      	ldr	r0, [pc, #120]	; (804bc7c <__pow5mult+0xb0>)
 804bc04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 804bc08:	f000 fd2c 	bl	804c664 <__assert_func>
 804bc0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 804bc10:	6004      	str	r4, [r0, #0]
 804bc12:	60c4      	str	r4, [r0, #12]
 804bc14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 804bc18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 804bc1c:	b94c      	cbnz	r4, 804bc32 <__pow5mult+0x66>
 804bc1e:	f240 2171 	movw	r1, #625	; 0x271
 804bc22:	4630      	mov	r0, r6
 804bc24:	f7ff ff12 	bl	804ba4c <__i2b>
 804bc28:	2300      	movs	r3, #0
 804bc2a:	f8c8 0008 	str.w	r0, [r8, #8]
 804bc2e:	4604      	mov	r4, r0
 804bc30:	6003      	str	r3, [r0, #0]
 804bc32:	f04f 0900 	mov.w	r9, #0
 804bc36:	07eb      	lsls	r3, r5, #31
 804bc38:	d50a      	bpl.n	804bc50 <__pow5mult+0x84>
 804bc3a:	4639      	mov	r1, r7
 804bc3c:	4622      	mov	r2, r4
 804bc3e:	4630      	mov	r0, r6
 804bc40:	f7ff ff1a 	bl	804ba78 <__multiply>
 804bc44:	4639      	mov	r1, r7
 804bc46:	4680      	mov	r8, r0
 804bc48:	4630      	mov	r0, r6
 804bc4a:	f7ff fdfd 	bl	804b848 <_Bfree>
 804bc4e:	4647      	mov	r7, r8
 804bc50:	106d      	asrs	r5, r5, #1
 804bc52:	d00b      	beq.n	804bc6c <__pow5mult+0xa0>
 804bc54:	6820      	ldr	r0, [r4, #0]
 804bc56:	b938      	cbnz	r0, 804bc68 <__pow5mult+0x9c>
 804bc58:	4622      	mov	r2, r4
 804bc5a:	4621      	mov	r1, r4
 804bc5c:	4630      	mov	r0, r6
 804bc5e:	f7ff ff0b 	bl	804ba78 <__multiply>
 804bc62:	6020      	str	r0, [r4, #0]
 804bc64:	f8c0 9000 	str.w	r9, [r0]
 804bc68:	4604      	mov	r4, r0
 804bc6a:	e7e4      	b.n	804bc36 <__pow5mult+0x6a>
 804bc6c:	4638      	mov	r0, r7
 804bc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804bc72:	bf00      	nop
 804bc74:	0804e5f0 	.word	0x0804e5f0
 804bc78:	0804e3a3 	.word	0x0804e3a3
 804bc7c:	0804e4a0 	.word	0x0804e4a0

0804bc80 <__lshift>:
 804bc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bc84:	460c      	mov	r4, r1
 804bc86:	6849      	ldr	r1, [r1, #4]
 804bc88:	6923      	ldr	r3, [r4, #16]
 804bc8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 804bc8e:	68a3      	ldr	r3, [r4, #8]
 804bc90:	4607      	mov	r7, r0
 804bc92:	4691      	mov	r9, r2
 804bc94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 804bc98:	f108 0601 	add.w	r6, r8, #1
 804bc9c:	42b3      	cmp	r3, r6
 804bc9e:	db0b      	blt.n	804bcb8 <__lshift+0x38>
 804bca0:	4638      	mov	r0, r7
 804bca2:	f7ff fd91 	bl	804b7c8 <_Balloc>
 804bca6:	4605      	mov	r5, r0
 804bca8:	b948      	cbnz	r0, 804bcbe <__lshift+0x3e>
 804bcaa:	4602      	mov	r2, r0
 804bcac:	4b2a      	ldr	r3, [pc, #168]	; (804bd58 <__lshift+0xd8>)
 804bcae:	482b      	ldr	r0, [pc, #172]	; (804bd5c <__lshift+0xdc>)
 804bcb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 804bcb4:	f000 fcd6 	bl	804c664 <__assert_func>
 804bcb8:	3101      	adds	r1, #1
 804bcba:	005b      	lsls	r3, r3, #1
 804bcbc:	e7ee      	b.n	804bc9c <__lshift+0x1c>
 804bcbe:	2300      	movs	r3, #0
 804bcc0:	f100 0114 	add.w	r1, r0, #20
 804bcc4:	f100 0210 	add.w	r2, r0, #16
 804bcc8:	4618      	mov	r0, r3
 804bcca:	4553      	cmp	r3, sl
 804bccc:	db37      	blt.n	804bd3e <__lshift+0xbe>
 804bcce:	6920      	ldr	r0, [r4, #16]
 804bcd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 804bcd4:	f104 0314 	add.w	r3, r4, #20
 804bcd8:	f019 091f 	ands.w	r9, r9, #31
 804bcdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 804bce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 804bce4:	d02f      	beq.n	804bd46 <__lshift+0xc6>
 804bce6:	f1c9 0e20 	rsb	lr, r9, #32
 804bcea:	468a      	mov	sl, r1
 804bcec:	f04f 0c00 	mov.w	ip, #0
 804bcf0:	681a      	ldr	r2, [r3, #0]
 804bcf2:	fa02 f209 	lsl.w	r2, r2, r9
 804bcf6:	ea42 020c 	orr.w	r2, r2, ip
 804bcfa:	f84a 2b04 	str.w	r2, [sl], #4
 804bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 804bd02:	4298      	cmp	r0, r3
 804bd04:	fa22 fc0e 	lsr.w	ip, r2, lr
 804bd08:	d8f2      	bhi.n	804bcf0 <__lshift+0x70>
 804bd0a:	1b03      	subs	r3, r0, r4
 804bd0c:	3b15      	subs	r3, #21
 804bd0e:	f023 0303 	bic.w	r3, r3, #3
 804bd12:	3304      	adds	r3, #4
 804bd14:	f104 0215 	add.w	r2, r4, #21
 804bd18:	4290      	cmp	r0, r2
 804bd1a:	bf38      	it	cc
 804bd1c:	2304      	movcc	r3, #4
 804bd1e:	f841 c003 	str.w	ip, [r1, r3]
 804bd22:	f1bc 0f00 	cmp.w	ip, #0
 804bd26:	d001      	beq.n	804bd2c <__lshift+0xac>
 804bd28:	f108 0602 	add.w	r6, r8, #2
 804bd2c:	3e01      	subs	r6, #1
 804bd2e:	4638      	mov	r0, r7
 804bd30:	612e      	str	r6, [r5, #16]
 804bd32:	4621      	mov	r1, r4
 804bd34:	f7ff fd88 	bl	804b848 <_Bfree>
 804bd38:	4628      	mov	r0, r5
 804bd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bd3e:	f842 0f04 	str.w	r0, [r2, #4]!
 804bd42:	3301      	adds	r3, #1
 804bd44:	e7c1      	b.n	804bcca <__lshift+0x4a>
 804bd46:	3904      	subs	r1, #4
 804bd48:	f853 2b04 	ldr.w	r2, [r3], #4
 804bd4c:	f841 2f04 	str.w	r2, [r1, #4]!
 804bd50:	4298      	cmp	r0, r3
 804bd52:	d8f9      	bhi.n	804bd48 <__lshift+0xc8>
 804bd54:	e7ea      	b.n	804bd2c <__lshift+0xac>
 804bd56:	bf00      	nop
 804bd58:	0804e415 	.word	0x0804e415
 804bd5c:	0804e4a0 	.word	0x0804e4a0

0804bd60 <__mcmp>:
 804bd60:	b530      	push	{r4, r5, lr}
 804bd62:	6902      	ldr	r2, [r0, #16]
 804bd64:	690c      	ldr	r4, [r1, #16]
 804bd66:	1b12      	subs	r2, r2, r4
 804bd68:	d10e      	bne.n	804bd88 <__mcmp+0x28>
 804bd6a:	f100 0314 	add.w	r3, r0, #20
 804bd6e:	3114      	adds	r1, #20
 804bd70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 804bd74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 804bd78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 804bd7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 804bd80:	42a5      	cmp	r5, r4
 804bd82:	d003      	beq.n	804bd8c <__mcmp+0x2c>
 804bd84:	d305      	bcc.n	804bd92 <__mcmp+0x32>
 804bd86:	2201      	movs	r2, #1
 804bd88:	4610      	mov	r0, r2
 804bd8a:	bd30      	pop	{r4, r5, pc}
 804bd8c:	4283      	cmp	r3, r0
 804bd8e:	d3f3      	bcc.n	804bd78 <__mcmp+0x18>
 804bd90:	e7fa      	b.n	804bd88 <__mcmp+0x28>
 804bd92:	f04f 32ff 	mov.w	r2, #4294967295
 804bd96:	e7f7      	b.n	804bd88 <__mcmp+0x28>

0804bd98 <__mdiff>:
 804bd98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804bd9c:	460c      	mov	r4, r1
 804bd9e:	4606      	mov	r6, r0
 804bda0:	4611      	mov	r1, r2
 804bda2:	4620      	mov	r0, r4
 804bda4:	4690      	mov	r8, r2
 804bda6:	f7ff ffdb 	bl	804bd60 <__mcmp>
 804bdaa:	1e05      	subs	r5, r0, #0
 804bdac:	d110      	bne.n	804bdd0 <__mdiff+0x38>
 804bdae:	4629      	mov	r1, r5
 804bdb0:	4630      	mov	r0, r6
 804bdb2:	f7ff fd09 	bl	804b7c8 <_Balloc>
 804bdb6:	b930      	cbnz	r0, 804bdc6 <__mdiff+0x2e>
 804bdb8:	4b3a      	ldr	r3, [pc, #232]	; (804bea4 <__mdiff+0x10c>)
 804bdba:	4602      	mov	r2, r0
 804bdbc:	f240 2132 	movw	r1, #562	; 0x232
 804bdc0:	4839      	ldr	r0, [pc, #228]	; (804bea8 <__mdiff+0x110>)
 804bdc2:	f000 fc4f 	bl	804c664 <__assert_func>
 804bdc6:	2301      	movs	r3, #1
 804bdc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 804bdcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804bdd0:	bfa4      	itt	ge
 804bdd2:	4643      	movge	r3, r8
 804bdd4:	46a0      	movge	r8, r4
 804bdd6:	4630      	mov	r0, r6
 804bdd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 804bddc:	bfa6      	itte	ge
 804bdde:	461c      	movge	r4, r3
 804bde0:	2500      	movge	r5, #0
 804bde2:	2501      	movlt	r5, #1
 804bde4:	f7ff fcf0 	bl	804b7c8 <_Balloc>
 804bde8:	b920      	cbnz	r0, 804bdf4 <__mdiff+0x5c>
 804bdea:	4b2e      	ldr	r3, [pc, #184]	; (804bea4 <__mdiff+0x10c>)
 804bdec:	4602      	mov	r2, r0
 804bdee:	f44f 7110 	mov.w	r1, #576	; 0x240
 804bdf2:	e7e5      	b.n	804bdc0 <__mdiff+0x28>
 804bdf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 804bdf8:	6926      	ldr	r6, [r4, #16]
 804bdfa:	60c5      	str	r5, [r0, #12]
 804bdfc:	f104 0914 	add.w	r9, r4, #20
 804be00:	f108 0514 	add.w	r5, r8, #20
 804be04:	f100 0e14 	add.w	lr, r0, #20
 804be08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 804be0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 804be10:	f108 0210 	add.w	r2, r8, #16
 804be14:	46f2      	mov	sl, lr
 804be16:	2100      	movs	r1, #0
 804be18:	f859 3b04 	ldr.w	r3, [r9], #4
 804be1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 804be20:	fa1f f883 	uxth.w	r8, r3
 804be24:	fa11 f18b 	uxtah	r1, r1, fp
 804be28:	0c1b      	lsrs	r3, r3, #16
 804be2a:	eba1 0808 	sub.w	r8, r1, r8
 804be2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 804be32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 804be36:	fa1f f888 	uxth.w	r8, r8
 804be3a:	1419      	asrs	r1, r3, #16
 804be3c:	454e      	cmp	r6, r9
 804be3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 804be42:	f84a 3b04 	str.w	r3, [sl], #4
 804be46:	d8e7      	bhi.n	804be18 <__mdiff+0x80>
 804be48:	1b33      	subs	r3, r6, r4
 804be4a:	3b15      	subs	r3, #21
 804be4c:	f023 0303 	bic.w	r3, r3, #3
 804be50:	3304      	adds	r3, #4
 804be52:	3415      	adds	r4, #21
 804be54:	42a6      	cmp	r6, r4
 804be56:	bf38      	it	cc
 804be58:	2304      	movcc	r3, #4
 804be5a:	441d      	add	r5, r3
 804be5c:	4473      	add	r3, lr
 804be5e:	469e      	mov	lr, r3
 804be60:	462e      	mov	r6, r5
 804be62:	4566      	cmp	r6, ip
 804be64:	d30e      	bcc.n	804be84 <__mdiff+0xec>
 804be66:	f10c 0203 	add.w	r2, ip, #3
 804be6a:	1b52      	subs	r2, r2, r5
 804be6c:	f022 0203 	bic.w	r2, r2, #3
 804be70:	3d03      	subs	r5, #3
 804be72:	45ac      	cmp	ip, r5
 804be74:	bf38      	it	cc
 804be76:	2200      	movcc	r2, #0
 804be78:	441a      	add	r2, r3
 804be7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 804be7e:	b17b      	cbz	r3, 804bea0 <__mdiff+0x108>
 804be80:	6107      	str	r7, [r0, #16]
 804be82:	e7a3      	b.n	804bdcc <__mdiff+0x34>
 804be84:	f856 8b04 	ldr.w	r8, [r6], #4
 804be88:	fa11 f288 	uxtah	r2, r1, r8
 804be8c:	1414      	asrs	r4, r2, #16
 804be8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 804be92:	b292      	uxth	r2, r2
 804be94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 804be98:	f84e 2b04 	str.w	r2, [lr], #4
 804be9c:	1421      	asrs	r1, r4, #16
 804be9e:	e7e0      	b.n	804be62 <__mdiff+0xca>
 804bea0:	3f01      	subs	r7, #1
 804bea2:	e7ea      	b.n	804be7a <__mdiff+0xe2>
 804bea4:	0804e415 	.word	0x0804e415
 804bea8:	0804e4a0 	.word	0x0804e4a0

0804beac <__ulp>:
 804beac:	b082      	sub	sp, #8
 804beae:	ed8d 0b00 	vstr	d0, [sp]
 804beb2:	9b01      	ldr	r3, [sp, #4]
 804beb4:	4912      	ldr	r1, [pc, #72]	; (804bf00 <__ulp+0x54>)
 804beb6:	4019      	ands	r1, r3
 804beb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 804bebc:	2900      	cmp	r1, #0
 804bebe:	dd05      	ble.n	804becc <__ulp+0x20>
 804bec0:	2200      	movs	r2, #0
 804bec2:	460b      	mov	r3, r1
 804bec4:	ec43 2b10 	vmov	d0, r2, r3
 804bec8:	b002      	add	sp, #8
 804beca:	4770      	bx	lr
 804becc:	4249      	negs	r1, r1
 804bece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 804bed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 804bed6:	f04f 0200 	mov.w	r2, #0
 804beda:	f04f 0300 	mov.w	r3, #0
 804bede:	da04      	bge.n	804beea <__ulp+0x3e>
 804bee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 804bee4:	fa41 f300 	asr.w	r3, r1, r0
 804bee8:	e7ec      	b.n	804bec4 <__ulp+0x18>
 804beea:	f1a0 0114 	sub.w	r1, r0, #20
 804beee:	291e      	cmp	r1, #30
 804bef0:	bfda      	itte	le
 804bef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 804bef6:	fa20 f101 	lsrle.w	r1, r0, r1
 804befa:	2101      	movgt	r1, #1
 804befc:	460a      	mov	r2, r1
 804befe:	e7e1      	b.n	804bec4 <__ulp+0x18>
 804bf00:	7ff00000 	.word	0x7ff00000

0804bf04 <__b2d>:
 804bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bf06:	6905      	ldr	r5, [r0, #16]
 804bf08:	f100 0714 	add.w	r7, r0, #20
 804bf0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 804bf10:	1f2e      	subs	r6, r5, #4
 804bf12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 804bf16:	4620      	mov	r0, r4
 804bf18:	f7ff fd48 	bl	804b9ac <__hi0bits>
 804bf1c:	f1c0 0320 	rsb	r3, r0, #32
 804bf20:	280a      	cmp	r0, #10
 804bf22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 804bfa0 <__b2d+0x9c>
 804bf26:	600b      	str	r3, [r1, #0]
 804bf28:	dc14      	bgt.n	804bf54 <__b2d+0x50>
 804bf2a:	f1c0 0e0b 	rsb	lr, r0, #11
 804bf2e:	fa24 f10e 	lsr.w	r1, r4, lr
 804bf32:	42b7      	cmp	r7, r6
 804bf34:	ea41 030c 	orr.w	r3, r1, ip
 804bf38:	bf34      	ite	cc
 804bf3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804bf3e:	2100      	movcs	r1, #0
 804bf40:	3015      	adds	r0, #21
 804bf42:	fa04 f000 	lsl.w	r0, r4, r0
 804bf46:	fa21 f10e 	lsr.w	r1, r1, lr
 804bf4a:	ea40 0201 	orr.w	r2, r0, r1
 804bf4e:	ec43 2b10 	vmov	d0, r2, r3
 804bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bf54:	42b7      	cmp	r7, r6
 804bf56:	bf3a      	itte	cc
 804bf58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804bf5c:	f1a5 0608 	subcc.w	r6, r5, #8
 804bf60:	2100      	movcs	r1, #0
 804bf62:	380b      	subs	r0, #11
 804bf64:	d017      	beq.n	804bf96 <__b2d+0x92>
 804bf66:	f1c0 0c20 	rsb	ip, r0, #32
 804bf6a:	fa04 f500 	lsl.w	r5, r4, r0
 804bf6e:	42be      	cmp	r6, r7
 804bf70:	fa21 f40c 	lsr.w	r4, r1, ip
 804bf74:	ea45 0504 	orr.w	r5, r5, r4
 804bf78:	bf8c      	ite	hi
 804bf7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 804bf7e:	2400      	movls	r4, #0
 804bf80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 804bf84:	fa01 f000 	lsl.w	r0, r1, r0
 804bf88:	fa24 f40c 	lsr.w	r4, r4, ip
 804bf8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804bf90:	ea40 0204 	orr.w	r2, r0, r4
 804bf94:	e7db      	b.n	804bf4e <__b2d+0x4a>
 804bf96:	ea44 030c 	orr.w	r3, r4, ip
 804bf9a:	460a      	mov	r2, r1
 804bf9c:	e7d7      	b.n	804bf4e <__b2d+0x4a>
 804bf9e:	bf00      	nop
 804bfa0:	3ff00000 	.word	0x3ff00000

0804bfa4 <__d2b>:
 804bfa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804bfa8:	4689      	mov	r9, r1
 804bfaa:	2101      	movs	r1, #1
 804bfac:	ec57 6b10 	vmov	r6, r7, d0
 804bfb0:	4690      	mov	r8, r2
 804bfb2:	f7ff fc09 	bl	804b7c8 <_Balloc>
 804bfb6:	4604      	mov	r4, r0
 804bfb8:	b930      	cbnz	r0, 804bfc8 <__d2b+0x24>
 804bfba:	4602      	mov	r2, r0
 804bfbc:	4b25      	ldr	r3, [pc, #148]	; (804c054 <__d2b+0xb0>)
 804bfbe:	4826      	ldr	r0, [pc, #152]	; (804c058 <__d2b+0xb4>)
 804bfc0:	f240 310a 	movw	r1, #778	; 0x30a
 804bfc4:	f000 fb4e 	bl	804c664 <__assert_func>
 804bfc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 804bfcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 804bfd0:	bb35      	cbnz	r5, 804c020 <__d2b+0x7c>
 804bfd2:	2e00      	cmp	r6, #0
 804bfd4:	9301      	str	r3, [sp, #4]
 804bfd6:	d028      	beq.n	804c02a <__d2b+0x86>
 804bfd8:	4668      	mov	r0, sp
 804bfda:	9600      	str	r6, [sp, #0]
 804bfdc:	f7ff fd06 	bl	804b9ec <__lo0bits>
 804bfe0:	9900      	ldr	r1, [sp, #0]
 804bfe2:	b300      	cbz	r0, 804c026 <__d2b+0x82>
 804bfe4:	9a01      	ldr	r2, [sp, #4]
 804bfe6:	f1c0 0320 	rsb	r3, r0, #32
 804bfea:	fa02 f303 	lsl.w	r3, r2, r3
 804bfee:	430b      	orrs	r3, r1
 804bff0:	40c2      	lsrs	r2, r0
 804bff2:	6163      	str	r3, [r4, #20]
 804bff4:	9201      	str	r2, [sp, #4]
 804bff6:	9b01      	ldr	r3, [sp, #4]
 804bff8:	61a3      	str	r3, [r4, #24]
 804bffa:	2b00      	cmp	r3, #0
 804bffc:	bf14      	ite	ne
 804bffe:	2202      	movne	r2, #2
 804c000:	2201      	moveq	r2, #1
 804c002:	6122      	str	r2, [r4, #16]
 804c004:	b1d5      	cbz	r5, 804c03c <__d2b+0x98>
 804c006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 804c00a:	4405      	add	r5, r0
 804c00c:	f8c9 5000 	str.w	r5, [r9]
 804c010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 804c014:	f8c8 0000 	str.w	r0, [r8]
 804c018:	4620      	mov	r0, r4
 804c01a:	b003      	add	sp, #12
 804c01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804c020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804c024:	e7d5      	b.n	804bfd2 <__d2b+0x2e>
 804c026:	6161      	str	r1, [r4, #20]
 804c028:	e7e5      	b.n	804bff6 <__d2b+0x52>
 804c02a:	a801      	add	r0, sp, #4
 804c02c:	f7ff fcde 	bl	804b9ec <__lo0bits>
 804c030:	9b01      	ldr	r3, [sp, #4]
 804c032:	6163      	str	r3, [r4, #20]
 804c034:	2201      	movs	r2, #1
 804c036:	6122      	str	r2, [r4, #16]
 804c038:	3020      	adds	r0, #32
 804c03a:	e7e3      	b.n	804c004 <__d2b+0x60>
 804c03c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 804c040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 804c044:	f8c9 0000 	str.w	r0, [r9]
 804c048:	6918      	ldr	r0, [r3, #16]
 804c04a:	f7ff fcaf 	bl	804b9ac <__hi0bits>
 804c04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 804c052:	e7df      	b.n	804c014 <__d2b+0x70>
 804c054:	0804e415 	.word	0x0804e415
 804c058:	0804e4a0 	.word	0x0804e4a0

0804c05c <__ratio>:
 804c05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c060:	4688      	mov	r8, r1
 804c062:	4669      	mov	r1, sp
 804c064:	4681      	mov	r9, r0
 804c066:	f7ff ff4d 	bl	804bf04 <__b2d>
 804c06a:	a901      	add	r1, sp, #4
 804c06c:	4640      	mov	r0, r8
 804c06e:	ec55 4b10 	vmov	r4, r5, d0
 804c072:	f7ff ff47 	bl	804bf04 <__b2d>
 804c076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804c07a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 804c07e:	eba3 0c02 	sub.w	ip, r3, r2
 804c082:	e9dd 3200 	ldrd	r3, r2, [sp]
 804c086:	1a9b      	subs	r3, r3, r2
 804c088:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 804c08c:	ec51 0b10 	vmov	r0, r1, d0
 804c090:	2b00      	cmp	r3, #0
 804c092:	bfd6      	itet	le
 804c094:	460a      	movle	r2, r1
 804c096:	462a      	movgt	r2, r5
 804c098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 804c09c:	468b      	mov	fp, r1
 804c09e:	462f      	mov	r7, r5
 804c0a0:	bfd4      	ite	le
 804c0a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 804c0a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 804c0aa:	4620      	mov	r0, r4
 804c0ac:	ee10 2a10 	vmov	r2, s0
 804c0b0:	465b      	mov	r3, fp
 804c0b2:	4639      	mov	r1, r7
 804c0b4:	f7f4 fbca 	bl	804084c <__aeabi_ddiv>
 804c0b8:	ec41 0b10 	vmov	d0, r0, r1
 804c0bc:	b003      	add	sp, #12
 804c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804c0c2 <__copybits>:
 804c0c2:	3901      	subs	r1, #1
 804c0c4:	b570      	push	{r4, r5, r6, lr}
 804c0c6:	1149      	asrs	r1, r1, #5
 804c0c8:	6914      	ldr	r4, [r2, #16]
 804c0ca:	3101      	adds	r1, #1
 804c0cc:	f102 0314 	add.w	r3, r2, #20
 804c0d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 804c0d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 804c0d8:	1f05      	subs	r5, r0, #4
 804c0da:	42a3      	cmp	r3, r4
 804c0dc:	d30c      	bcc.n	804c0f8 <__copybits+0x36>
 804c0de:	1aa3      	subs	r3, r4, r2
 804c0e0:	3b11      	subs	r3, #17
 804c0e2:	f023 0303 	bic.w	r3, r3, #3
 804c0e6:	3211      	adds	r2, #17
 804c0e8:	42a2      	cmp	r2, r4
 804c0ea:	bf88      	it	hi
 804c0ec:	2300      	movhi	r3, #0
 804c0ee:	4418      	add	r0, r3
 804c0f0:	2300      	movs	r3, #0
 804c0f2:	4288      	cmp	r0, r1
 804c0f4:	d305      	bcc.n	804c102 <__copybits+0x40>
 804c0f6:	bd70      	pop	{r4, r5, r6, pc}
 804c0f8:	f853 6b04 	ldr.w	r6, [r3], #4
 804c0fc:	f845 6f04 	str.w	r6, [r5, #4]!
 804c100:	e7eb      	b.n	804c0da <__copybits+0x18>
 804c102:	f840 3b04 	str.w	r3, [r0], #4
 804c106:	e7f4      	b.n	804c0f2 <__copybits+0x30>

0804c108 <__any_on>:
 804c108:	f100 0214 	add.w	r2, r0, #20
 804c10c:	6900      	ldr	r0, [r0, #16]
 804c10e:	114b      	asrs	r3, r1, #5
 804c110:	4298      	cmp	r0, r3
 804c112:	b510      	push	{r4, lr}
 804c114:	db11      	blt.n	804c13a <__any_on+0x32>
 804c116:	dd0a      	ble.n	804c12e <__any_on+0x26>
 804c118:	f011 011f 	ands.w	r1, r1, #31
 804c11c:	d007      	beq.n	804c12e <__any_on+0x26>
 804c11e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 804c122:	fa24 f001 	lsr.w	r0, r4, r1
 804c126:	fa00 f101 	lsl.w	r1, r0, r1
 804c12a:	428c      	cmp	r4, r1
 804c12c:	d10b      	bne.n	804c146 <__any_on+0x3e>
 804c12e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 804c132:	4293      	cmp	r3, r2
 804c134:	d803      	bhi.n	804c13e <__any_on+0x36>
 804c136:	2000      	movs	r0, #0
 804c138:	bd10      	pop	{r4, pc}
 804c13a:	4603      	mov	r3, r0
 804c13c:	e7f7      	b.n	804c12e <__any_on+0x26>
 804c13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 804c142:	2900      	cmp	r1, #0
 804c144:	d0f5      	beq.n	804c132 <__any_on+0x2a>
 804c146:	2001      	movs	r0, #1
 804c148:	e7f6      	b.n	804c138 <__any_on+0x30>

0804c14a <_calloc_r>:
 804c14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c14c:	fba1 2402 	umull	r2, r4, r1, r2
 804c150:	b94c      	cbnz	r4, 804c166 <_calloc_r+0x1c>
 804c152:	4611      	mov	r1, r2
 804c154:	9201      	str	r2, [sp, #4]
 804c156:	f000 f87b 	bl	804c250 <_malloc_r>
 804c15a:	9a01      	ldr	r2, [sp, #4]
 804c15c:	4605      	mov	r5, r0
 804c15e:	b930      	cbnz	r0, 804c16e <_calloc_r+0x24>
 804c160:	4628      	mov	r0, r5
 804c162:	b003      	add	sp, #12
 804c164:	bd30      	pop	{r4, r5, pc}
 804c166:	220c      	movs	r2, #12
 804c168:	6002      	str	r2, [r0, #0]
 804c16a:	2500      	movs	r5, #0
 804c16c:	e7f8      	b.n	804c160 <_calloc_r+0x16>
 804c16e:	4621      	mov	r1, r4
 804c170:	f7fc fb88 	bl	8048884 <memset>
 804c174:	e7f4      	b.n	804c160 <_calloc_r+0x16>
	...

0804c178 <_free_r>:
 804c178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c17a:	2900      	cmp	r1, #0
 804c17c:	d044      	beq.n	804c208 <_free_r+0x90>
 804c17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c182:	9001      	str	r0, [sp, #4]
 804c184:	2b00      	cmp	r3, #0
 804c186:	f1a1 0404 	sub.w	r4, r1, #4
 804c18a:	bfb8      	it	lt
 804c18c:	18e4      	addlt	r4, r4, r3
 804c18e:	f000 fab3 	bl	804c6f8 <__malloc_lock>
 804c192:	4a1e      	ldr	r2, [pc, #120]	; (804c20c <_free_r+0x94>)
 804c194:	9801      	ldr	r0, [sp, #4]
 804c196:	6813      	ldr	r3, [r2, #0]
 804c198:	b933      	cbnz	r3, 804c1a8 <_free_r+0x30>
 804c19a:	6063      	str	r3, [r4, #4]
 804c19c:	6014      	str	r4, [r2, #0]
 804c19e:	b003      	add	sp, #12
 804c1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804c1a4:	f000 baae 	b.w	804c704 <__malloc_unlock>
 804c1a8:	42a3      	cmp	r3, r4
 804c1aa:	d908      	bls.n	804c1be <_free_r+0x46>
 804c1ac:	6825      	ldr	r5, [r4, #0]
 804c1ae:	1961      	adds	r1, r4, r5
 804c1b0:	428b      	cmp	r3, r1
 804c1b2:	bf01      	itttt	eq
 804c1b4:	6819      	ldreq	r1, [r3, #0]
 804c1b6:	685b      	ldreq	r3, [r3, #4]
 804c1b8:	1949      	addeq	r1, r1, r5
 804c1ba:	6021      	streq	r1, [r4, #0]
 804c1bc:	e7ed      	b.n	804c19a <_free_r+0x22>
 804c1be:	461a      	mov	r2, r3
 804c1c0:	685b      	ldr	r3, [r3, #4]
 804c1c2:	b10b      	cbz	r3, 804c1c8 <_free_r+0x50>
 804c1c4:	42a3      	cmp	r3, r4
 804c1c6:	d9fa      	bls.n	804c1be <_free_r+0x46>
 804c1c8:	6811      	ldr	r1, [r2, #0]
 804c1ca:	1855      	adds	r5, r2, r1
 804c1cc:	42a5      	cmp	r5, r4
 804c1ce:	d10b      	bne.n	804c1e8 <_free_r+0x70>
 804c1d0:	6824      	ldr	r4, [r4, #0]
 804c1d2:	4421      	add	r1, r4
 804c1d4:	1854      	adds	r4, r2, r1
 804c1d6:	42a3      	cmp	r3, r4
 804c1d8:	6011      	str	r1, [r2, #0]
 804c1da:	d1e0      	bne.n	804c19e <_free_r+0x26>
 804c1dc:	681c      	ldr	r4, [r3, #0]
 804c1de:	685b      	ldr	r3, [r3, #4]
 804c1e0:	6053      	str	r3, [r2, #4]
 804c1e2:	4421      	add	r1, r4
 804c1e4:	6011      	str	r1, [r2, #0]
 804c1e6:	e7da      	b.n	804c19e <_free_r+0x26>
 804c1e8:	d902      	bls.n	804c1f0 <_free_r+0x78>
 804c1ea:	230c      	movs	r3, #12
 804c1ec:	6003      	str	r3, [r0, #0]
 804c1ee:	e7d6      	b.n	804c19e <_free_r+0x26>
 804c1f0:	6825      	ldr	r5, [r4, #0]
 804c1f2:	1961      	adds	r1, r4, r5
 804c1f4:	428b      	cmp	r3, r1
 804c1f6:	bf04      	itt	eq
 804c1f8:	6819      	ldreq	r1, [r3, #0]
 804c1fa:	685b      	ldreq	r3, [r3, #4]
 804c1fc:	6063      	str	r3, [r4, #4]
 804c1fe:	bf04      	itt	eq
 804c200:	1949      	addeq	r1, r1, r5
 804c202:	6021      	streq	r1, [r4, #0]
 804c204:	6054      	str	r4, [r2, #4]
 804c206:	e7ca      	b.n	804c19e <_free_r+0x26>
 804c208:	b003      	add	sp, #12
 804c20a:	bd30      	pop	{r4, r5, pc}
 804c20c:	20000230 	.word	0x20000230

0804c210 <sbrk_aligned>:
 804c210:	b570      	push	{r4, r5, r6, lr}
 804c212:	4e0e      	ldr	r6, [pc, #56]	; (804c24c <sbrk_aligned+0x3c>)
 804c214:	460c      	mov	r4, r1
 804c216:	6831      	ldr	r1, [r6, #0]
 804c218:	4605      	mov	r5, r0
 804c21a:	b911      	cbnz	r1, 804c222 <sbrk_aligned+0x12>
 804c21c:	f000 f9f0 	bl	804c600 <_sbrk_r>
 804c220:	6030      	str	r0, [r6, #0]
 804c222:	4621      	mov	r1, r4
 804c224:	4628      	mov	r0, r5
 804c226:	f000 f9eb 	bl	804c600 <_sbrk_r>
 804c22a:	1c43      	adds	r3, r0, #1
 804c22c:	d00a      	beq.n	804c244 <sbrk_aligned+0x34>
 804c22e:	1cc4      	adds	r4, r0, #3
 804c230:	f024 0403 	bic.w	r4, r4, #3
 804c234:	42a0      	cmp	r0, r4
 804c236:	d007      	beq.n	804c248 <sbrk_aligned+0x38>
 804c238:	1a21      	subs	r1, r4, r0
 804c23a:	4628      	mov	r0, r5
 804c23c:	f000 f9e0 	bl	804c600 <_sbrk_r>
 804c240:	3001      	adds	r0, #1
 804c242:	d101      	bne.n	804c248 <sbrk_aligned+0x38>
 804c244:	f04f 34ff 	mov.w	r4, #4294967295
 804c248:	4620      	mov	r0, r4
 804c24a:	bd70      	pop	{r4, r5, r6, pc}
 804c24c:	20000234 	.word	0x20000234

0804c250 <_malloc_r>:
 804c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c254:	1ccd      	adds	r5, r1, #3
 804c256:	f025 0503 	bic.w	r5, r5, #3
 804c25a:	3508      	adds	r5, #8
 804c25c:	2d0c      	cmp	r5, #12
 804c25e:	bf38      	it	cc
 804c260:	250c      	movcc	r5, #12
 804c262:	2d00      	cmp	r5, #0
 804c264:	4607      	mov	r7, r0
 804c266:	db01      	blt.n	804c26c <_malloc_r+0x1c>
 804c268:	42a9      	cmp	r1, r5
 804c26a:	d905      	bls.n	804c278 <_malloc_r+0x28>
 804c26c:	230c      	movs	r3, #12
 804c26e:	603b      	str	r3, [r7, #0]
 804c270:	2600      	movs	r6, #0
 804c272:	4630      	mov	r0, r6
 804c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c278:	4e2e      	ldr	r6, [pc, #184]	; (804c334 <_malloc_r+0xe4>)
 804c27a:	f000 fa3d 	bl	804c6f8 <__malloc_lock>
 804c27e:	6833      	ldr	r3, [r6, #0]
 804c280:	461c      	mov	r4, r3
 804c282:	bb34      	cbnz	r4, 804c2d2 <_malloc_r+0x82>
 804c284:	4629      	mov	r1, r5
 804c286:	4638      	mov	r0, r7
 804c288:	f7ff ffc2 	bl	804c210 <sbrk_aligned>
 804c28c:	1c43      	adds	r3, r0, #1
 804c28e:	4604      	mov	r4, r0
 804c290:	d14d      	bne.n	804c32e <_malloc_r+0xde>
 804c292:	6834      	ldr	r4, [r6, #0]
 804c294:	4626      	mov	r6, r4
 804c296:	2e00      	cmp	r6, #0
 804c298:	d140      	bne.n	804c31c <_malloc_r+0xcc>
 804c29a:	6823      	ldr	r3, [r4, #0]
 804c29c:	4631      	mov	r1, r6
 804c29e:	4638      	mov	r0, r7
 804c2a0:	eb04 0803 	add.w	r8, r4, r3
 804c2a4:	f000 f9ac 	bl	804c600 <_sbrk_r>
 804c2a8:	4580      	cmp	r8, r0
 804c2aa:	d13a      	bne.n	804c322 <_malloc_r+0xd2>
 804c2ac:	6821      	ldr	r1, [r4, #0]
 804c2ae:	3503      	adds	r5, #3
 804c2b0:	1a6d      	subs	r5, r5, r1
 804c2b2:	f025 0503 	bic.w	r5, r5, #3
 804c2b6:	3508      	adds	r5, #8
 804c2b8:	2d0c      	cmp	r5, #12
 804c2ba:	bf38      	it	cc
 804c2bc:	250c      	movcc	r5, #12
 804c2be:	4629      	mov	r1, r5
 804c2c0:	4638      	mov	r0, r7
 804c2c2:	f7ff ffa5 	bl	804c210 <sbrk_aligned>
 804c2c6:	3001      	adds	r0, #1
 804c2c8:	d02b      	beq.n	804c322 <_malloc_r+0xd2>
 804c2ca:	6823      	ldr	r3, [r4, #0]
 804c2cc:	442b      	add	r3, r5
 804c2ce:	6023      	str	r3, [r4, #0]
 804c2d0:	e00e      	b.n	804c2f0 <_malloc_r+0xa0>
 804c2d2:	6822      	ldr	r2, [r4, #0]
 804c2d4:	1b52      	subs	r2, r2, r5
 804c2d6:	d41e      	bmi.n	804c316 <_malloc_r+0xc6>
 804c2d8:	2a0b      	cmp	r2, #11
 804c2da:	d916      	bls.n	804c30a <_malloc_r+0xba>
 804c2dc:	1961      	adds	r1, r4, r5
 804c2de:	42a3      	cmp	r3, r4
 804c2e0:	6025      	str	r5, [r4, #0]
 804c2e2:	bf18      	it	ne
 804c2e4:	6059      	strne	r1, [r3, #4]
 804c2e6:	6863      	ldr	r3, [r4, #4]
 804c2e8:	bf08      	it	eq
 804c2ea:	6031      	streq	r1, [r6, #0]
 804c2ec:	5162      	str	r2, [r4, r5]
 804c2ee:	604b      	str	r3, [r1, #4]
 804c2f0:	4638      	mov	r0, r7
 804c2f2:	f104 060b 	add.w	r6, r4, #11
 804c2f6:	f000 fa05 	bl	804c704 <__malloc_unlock>
 804c2fa:	f026 0607 	bic.w	r6, r6, #7
 804c2fe:	1d23      	adds	r3, r4, #4
 804c300:	1af2      	subs	r2, r6, r3
 804c302:	d0b6      	beq.n	804c272 <_malloc_r+0x22>
 804c304:	1b9b      	subs	r3, r3, r6
 804c306:	50a3      	str	r3, [r4, r2]
 804c308:	e7b3      	b.n	804c272 <_malloc_r+0x22>
 804c30a:	6862      	ldr	r2, [r4, #4]
 804c30c:	42a3      	cmp	r3, r4
 804c30e:	bf0c      	ite	eq
 804c310:	6032      	streq	r2, [r6, #0]
 804c312:	605a      	strne	r2, [r3, #4]
 804c314:	e7ec      	b.n	804c2f0 <_malloc_r+0xa0>
 804c316:	4623      	mov	r3, r4
 804c318:	6864      	ldr	r4, [r4, #4]
 804c31a:	e7b2      	b.n	804c282 <_malloc_r+0x32>
 804c31c:	4634      	mov	r4, r6
 804c31e:	6876      	ldr	r6, [r6, #4]
 804c320:	e7b9      	b.n	804c296 <_malloc_r+0x46>
 804c322:	230c      	movs	r3, #12
 804c324:	603b      	str	r3, [r7, #0]
 804c326:	4638      	mov	r0, r7
 804c328:	f000 f9ec 	bl	804c704 <__malloc_unlock>
 804c32c:	e7a1      	b.n	804c272 <_malloc_r+0x22>
 804c32e:	6025      	str	r5, [r4, #0]
 804c330:	e7de      	b.n	804c2f0 <_malloc_r+0xa0>
 804c332:	bf00      	nop
 804c334:	20000230 	.word	0x20000230

0804c338 <__ssputs_r>:
 804c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c33c:	688e      	ldr	r6, [r1, #8]
 804c33e:	429e      	cmp	r6, r3
 804c340:	4682      	mov	sl, r0
 804c342:	460c      	mov	r4, r1
 804c344:	4690      	mov	r8, r2
 804c346:	461f      	mov	r7, r3
 804c348:	d838      	bhi.n	804c3bc <__ssputs_r+0x84>
 804c34a:	898a      	ldrh	r2, [r1, #12]
 804c34c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804c350:	d032      	beq.n	804c3b8 <__ssputs_r+0x80>
 804c352:	6825      	ldr	r5, [r4, #0]
 804c354:	6909      	ldr	r1, [r1, #16]
 804c356:	eba5 0901 	sub.w	r9, r5, r1
 804c35a:	6965      	ldr	r5, [r4, #20]
 804c35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804c360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804c364:	3301      	adds	r3, #1
 804c366:	444b      	add	r3, r9
 804c368:	106d      	asrs	r5, r5, #1
 804c36a:	429d      	cmp	r5, r3
 804c36c:	bf38      	it	cc
 804c36e:	461d      	movcc	r5, r3
 804c370:	0553      	lsls	r3, r2, #21
 804c372:	d531      	bpl.n	804c3d8 <__ssputs_r+0xa0>
 804c374:	4629      	mov	r1, r5
 804c376:	f7ff ff6b 	bl	804c250 <_malloc_r>
 804c37a:	4606      	mov	r6, r0
 804c37c:	b950      	cbnz	r0, 804c394 <__ssputs_r+0x5c>
 804c37e:	230c      	movs	r3, #12
 804c380:	f8ca 3000 	str.w	r3, [sl]
 804c384:	89a3      	ldrh	r3, [r4, #12]
 804c386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c38a:	81a3      	strh	r3, [r4, #12]
 804c38c:	f04f 30ff 	mov.w	r0, #4294967295
 804c390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c394:	6921      	ldr	r1, [r4, #16]
 804c396:	464a      	mov	r2, r9
 804c398:	f7fc fa66 	bl	8048868 <memcpy>
 804c39c:	89a3      	ldrh	r3, [r4, #12]
 804c39e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804c3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804c3a6:	81a3      	strh	r3, [r4, #12]
 804c3a8:	6126      	str	r6, [r4, #16]
 804c3aa:	6165      	str	r5, [r4, #20]
 804c3ac:	444e      	add	r6, r9
 804c3ae:	eba5 0509 	sub.w	r5, r5, r9
 804c3b2:	6026      	str	r6, [r4, #0]
 804c3b4:	60a5      	str	r5, [r4, #8]
 804c3b6:	463e      	mov	r6, r7
 804c3b8:	42be      	cmp	r6, r7
 804c3ba:	d900      	bls.n	804c3be <__ssputs_r+0x86>
 804c3bc:	463e      	mov	r6, r7
 804c3be:	6820      	ldr	r0, [r4, #0]
 804c3c0:	4632      	mov	r2, r6
 804c3c2:	4641      	mov	r1, r8
 804c3c4:	f000 f97e 	bl	804c6c4 <memmove>
 804c3c8:	68a3      	ldr	r3, [r4, #8]
 804c3ca:	1b9b      	subs	r3, r3, r6
 804c3cc:	60a3      	str	r3, [r4, #8]
 804c3ce:	6823      	ldr	r3, [r4, #0]
 804c3d0:	4433      	add	r3, r6
 804c3d2:	6023      	str	r3, [r4, #0]
 804c3d4:	2000      	movs	r0, #0
 804c3d6:	e7db      	b.n	804c390 <__ssputs_r+0x58>
 804c3d8:	462a      	mov	r2, r5
 804c3da:	f000 f999 	bl	804c710 <_realloc_r>
 804c3de:	4606      	mov	r6, r0
 804c3e0:	2800      	cmp	r0, #0
 804c3e2:	d1e1      	bne.n	804c3a8 <__ssputs_r+0x70>
 804c3e4:	6921      	ldr	r1, [r4, #16]
 804c3e6:	4650      	mov	r0, sl
 804c3e8:	f7ff fec6 	bl	804c178 <_free_r>
 804c3ec:	e7c7      	b.n	804c37e <__ssputs_r+0x46>
	...

0804c3f0 <_svfiprintf_r>:
 804c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c3f4:	4698      	mov	r8, r3
 804c3f6:	898b      	ldrh	r3, [r1, #12]
 804c3f8:	061b      	lsls	r3, r3, #24
 804c3fa:	b09d      	sub	sp, #116	; 0x74
 804c3fc:	4607      	mov	r7, r0
 804c3fe:	460d      	mov	r5, r1
 804c400:	4614      	mov	r4, r2
 804c402:	d50e      	bpl.n	804c422 <_svfiprintf_r+0x32>
 804c404:	690b      	ldr	r3, [r1, #16]
 804c406:	b963      	cbnz	r3, 804c422 <_svfiprintf_r+0x32>
 804c408:	2140      	movs	r1, #64	; 0x40
 804c40a:	f7ff ff21 	bl	804c250 <_malloc_r>
 804c40e:	6028      	str	r0, [r5, #0]
 804c410:	6128      	str	r0, [r5, #16]
 804c412:	b920      	cbnz	r0, 804c41e <_svfiprintf_r+0x2e>
 804c414:	230c      	movs	r3, #12
 804c416:	603b      	str	r3, [r7, #0]
 804c418:	f04f 30ff 	mov.w	r0, #4294967295
 804c41c:	e0d1      	b.n	804c5c2 <_svfiprintf_r+0x1d2>
 804c41e:	2340      	movs	r3, #64	; 0x40
 804c420:	616b      	str	r3, [r5, #20]
 804c422:	2300      	movs	r3, #0
 804c424:	9309      	str	r3, [sp, #36]	; 0x24
 804c426:	2320      	movs	r3, #32
 804c428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804c42c:	f8cd 800c 	str.w	r8, [sp, #12]
 804c430:	2330      	movs	r3, #48	; 0x30
 804c432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804c5dc <_svfiprintf_r+0x1ec>
 804c436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804c43a:	f04f 0901 	mov.w	r9, #1
 804c43e:	4623      	mov	r3, r4
 804c440:	469a      	mov	sl, r3
 804c442:	f813 2b01 	ldrb.w	r2, [r3], #1
 804c446:	b10a      	cbz	r2, 804c44c <_svfiprintf_r+0x5c>
 804c448:	2a25      	cmp	r2, #37	; 0x25
 804c44a:	d1f9      	bne.n	804c440 <_svfiprintf_r+0x50>
 804c44c:	ebba 0b04 	subs.w	fp, sl, r4
 804c450:	d00b      	beq.n	804c46a <_svfiprintf_r+0x7a>
 804c452:	465b      	mov	r3, fp
 804c454:	4622      	mov	r2, r4
 804c456:	4629      	mov	r1, r5
 804c458:	4638      	mov	r0, r7
 804c45a:	f7ff ff6d 	bl	804c338 <__ssputs_r>
 804c45e:	3001      	adds	r0, #1
 804c460:	f000 80aa 	beq.w	804c5b8 <_svfiprintf_r+0x1c8>
 804c464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804c466:	445a      	add	r2, fp
 804c468:	9209      	str	r2, [sp, #36]	; 0x24
 804c46a:	f89a 3000 	ldrb.w	r3, [sl]
 804c46e:	2b00      	cmp	r3, #0
 804c470:	f000 80a2 	beq.w	804c5b8 <_svfiprintf_r+0x1c8>
 804c474:	2300      	movs	r3, #0
 804c476:	f04f 32ff 	mov.w	r2, #4294967295
 804c47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804c47e:	f10a 0a01 	add.w	sl, sl, #1
 804c482:	9304      	str	r3, [sp, #16]
 804c484:	9307      	str	r3, [sp, #28]
 804c486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804c48a:	931a      	str	r3, [sp, #104]	; 0x68
 804c48c:	4654      	mov	r4, sl
 804c48e:	2205      	movs	r2, #5
 804c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c494:	4851      	ldr	r0, [pc, #324]	; (804c5dc <_svfiprintf_r+0x1ec>)
 804c496:	f7f3 fea3 	bl	80401e0 <memchr>
 804c49a:	9a04      	ldr	r2, [sp, #16]
 804c49c:	b9d8      	cbnz	r0, 804c4d6 <_svfiprintf_r+0xe6>
 804c49e:	06d0      	lsls	r0, r2, #27
 804c4a0:	bf44      	itt	mi
 804c4a2:	2320      	movmi	r3, #32
 804c4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c4a8:	0711      	lsls	r1, r2, #28
 804c4aa:	bf44      	itt	mi
 804c4ac:	232b      	movmi	r3, #43	; 0x2b
 804c4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c4b2:	f89a 3000 	ldrb.w	r3, [sl]
 804c4b6:	2b2a      	cmp	r3, #42	; 0x2a
 804c4b8:	d015      	beq.n	804c4e6 <_svfiprintf_r+0xf6>
 804c4ba:	9a07      	ldr	r2, [sp, #28]
 804c4bc:	4654      	mov	r4, sl
 804c4be:	2000      	movs	r0, #0
 804c4c0:	f04f 0c0a 	mov.w	ip, #10
 804c4c4:	4621      	mov	r1, r4
 804c4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c4ca:	3b30      	subs	r3, #48	; 0x30
 804c4cc:	2b09      	cmp	r3, #9
 804c4ce:	d94e      	bls.n	804c56e <_svfiprintf_r+0x17e>
 804c4d0:	b1b0      	cbz	r0, 804c500 <_svfiprintf_r+0x110>
 804c4d2:	9207      	str	r2, [sp, #28]
 804c4d4:	e014      	b.n	804c500 <_svfiprintf_r+0x110>
 804c4d6:	eba0 0308 	sub.w	r3, r0, r8
 804c4da:	fa09 f303 	lsl.w	r3, r9, r3
 804c4de:	4313      	orrs	r3, r2
 804c4e0:	9304      	str	r3, [sp, #16]
 804c4e2:	46a2      	mov	sl, r4
 804c4e4:	e7d2      	b.n	804c48c <_svfiprintf_r+0x9c>
 804c4e6:	9b03      	ldr	r3, [sp, #12]
 804c4e8:	1d19      	adds	r1, r3, #4
 804c4ea:	681b      	ldr	r3, [r3, #0]
 804c4ec:	9103      	str	r1, [sp, #12]
 804c4ee:	2b00      	cmp	r3, #0
 804c4f0:	bfbb      	ittet	lt
 804c4f2:	425b      	neglt	r3, r3
 804c4f4:	f042 0202 	orrlt.w	r2, r2, #2
 804c4f8:	9307      	strge	r3, [sp, #28]
 804c4fa:	9307      	strlt	r3, [sp, #28]
 804c4fc:	bfb8      	it	lt
 804c4fe:	9204      	strlt	r2, [sp, #16]
 804c500:	7823      	ldrb	r3, [r4, #0]
 804c502:	2b2e      	cmp	r3, #46	; 0x2e
 804c504:	d10c      	bne.n	804c520 <_svfiprintf_r+0x130>
 804c506:	7863      	ldrb	r3, [r4, #1]
 804c508:	2b2a      	cmp	r3, #42	; 0x2a
 804c50a:	d135      	bne.n	804c578 <_svfiprintf_r+0x188>
 804c50c:	9b03      	ldr	r3, [sp, #12]
 804c50e:	1d1a      	adds	r2, r3, #4
 804c510:	681b      	ldr	r3, [r3, #0]
 804c512:	9203      	str	r2, [sp, #12]
 804c514:	2b00      	cmp	r3, #0
 804c516:	bfb8      	it	lt
 804c518:	f04f 33ff 	movlt.w	r3, #4294967295
 804c51c:	3402      	adds	r4, #2
 804c51e:	9305      	str	r3, [sp, #20]
 804c520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804c5ec <_svfiprintf_r+0x1fc>
 804c524:	7821      	ldrb	r1, [r4, #0]
 804c526:	2203      	movs	r2, #3
 804c528:	4650      	mov	r0, sl
 804c52a:	f7f3 fe59 	bl	80401e0 <memchr>
 804c52e:	b140      	cbz	r0, 804c542 <_svfiprintf_r+0x152>
 804c530:	2340      	movs	r3, #64	; 0x40
 804c532:	eba0 000a 	sub.w	r0, r0, sl
 804c536:	fa03 f000 	lsl.w	r0, r3, r0
 804c53a:	9b04      	ldr	r3, [sp, #16]
 804c53c:	4303      	orrs	r3, r0
 804c53e:	3401      	adds	r4, #1
 804c540:	9304      	str	r3, [sp, #16]
 804c542:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c546:	4826      	ldr	r0, [pc, #152]	; (804c5e0 <_svfiprintf_r+0x1f0>)
 804c548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804c54c:	2206      	movs	r2, #6
 804c54e:	f7f3 fe47 	bl	80401e0 <memchr>
 804c552:	2800      	cmp	r0, #0
 804c554:	d038      	beq.n	804c5c8 <_svfiprintf_r+0x1d8>
 804c556:	4b23      	ldr	r3, [pc, #140]	; (804c5e4 <_svfiprintf_r+0x1f4>)
 804c558:	bb1b      	cbnz	r3, 804c5a2 <_svfiprintf_r+0x1b2>
 804c55a:	9b03      	ldr	r3, [sp, #12]
 804c55c:	3307      	adds	r3, #7
 804c55e:	f023 0307 	bic.w	r3, r3, #7
 804c562:	3308      	adds	r3, #8
 804c564:	9303      	str	r3, [sp, #12]
 804c566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804c568:	4433      	add	r3, r6
 804c56a:	9309      	str	r3, [sp, #36]	; 0x24
 804c56c:	e767      	b.n	804c43e <_svfiprintf_r+0x4e>
 804c56e:	fb0c 3202 	mla	r2, ip, r2, r3
 804c572:	460c      	mov	r4, r1
 804c574:	2001      	movs	r0, #1
 804c576:	e7a5      	b.n	804c4c4 <_svfiprintf_r+0xd4>
 804c578:	2300      	movs	r3, #0
 804c57a:	3401      	adds	r4, #1
 804c57c:	9305      	str	r3, [sp, #20]
 804c57e:	4619      	mov	r1, r3
 804c580:	f04f 0c0a 	mov.w	ip, #10
 804c584:	4620      	mov	r0, r4
 804c586:	f810 2b01 	ldrb.w	r2, [r0], #1
 804c58a:	3a30      	subs	r2, #48	; 0x30
 804c58c:	2a09      	cmp	r2, #9
 804c58e:	d903      	bls.n	804c598 <_svfiprintf_r+0x1a8>
 804c590:	2b00      	cmp	r3, #0
 804c592:	d0c5      	beq.n	804c520 <_svfiprintf_r+0x130>
 804c594:	9105      	str	r1, [sp, #20]
 804c596:	e7c3      	b.n	804c520 <_svfiprintf_r+0x130>
 804c598:	fb0c 2101 	mla	r1, ip, r1, r2
 804c59c:	4604      	mov	r4, r0
 804c59e:	2301      	movs	r3, #1
 804c5a0:	e7f0      	b.n	804c584 <_svfiprintf_r+0x194>
 804c5a2:	ab03      	add	r3, sp, #12
 804c5a4:	9300      	str	r3, [sp, #0]
 804c5a6:	462a      	mov	r2, r5
 804c5a8:	4b0f      	ldr	r3, [pc, #60]	; (804c5e8 <_svfiprintf_r+0x1f8>)
 804c5aa:	a904      	add	r1, sp, #16
 804c5ac:	4638      	mov	r0, r7
 804c5ae:	f7fc fa11 	bl	80489d4 <_printf_float>
 804c5b2:	1c42      	adds	r2, r0, #1
 804c5b4:	4606      	mov	r6, r0
 804c5b6:	d1d6      	bne.n	804c566 <_svfiprintf_r+0x176>
 804c5b8:	89ab      	ldrh	r3, [r5, #12]
 804c5ba:	065b      	lsls	r3, r3, #25
 804c5bc:	f53f af2c 	bmi.w	804c418 <_svfiprintf_r+0x28>
 804c5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 804c5c2:	b01d      	add	sp, #116	; 0x74
 804c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c5c8:	ab03      	add	r3, sp, #12
 804c5ca:	9300      	str	r3, [sp, #0]
 804c5cc:	462a      	mov	r2, r5
 804c5ce:	4b06      	ldr	r3, [pc, #24]	; (804c5e8 <_svfiprintf_r+0x1f8>)
 804c5d0:	a904      	add	r1, sp, #16
 804c5d2:	4638      	mov	r0, r7
 804c5d4:	f7fc fca2 	bl	8048f1c <_printf_i>
 804c5d8:	e7eb      	b.n	804c5b2 <_svfiprintf_r+0x1c2>
 804c5da:	bf00      	nop
 804c5dc:	0804e5fc 	.word	0x0804e5fc
 804c5e0:	0804e606 	.word	0x0804e606
 804c5e4:	080489d5 	.word	0x080489d5
 804c5e8:	0804c339 	.word	0x0804c339
 804c5ec:	0804e602 	.word	0x0804e602

0804c5f0 <nan>:
 804c5f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 804c5f8 <nan+0x8>
 804c5f4:	4770      	bx	lr
 804c5f6:	bf00      	nop
 804c5f8:	00000000 	.word	0x00000000
 804c5fc:	7ff80000 	.word	0x7ff80000

0804c600 <_sbrk_r>:
 804c600:	b538      	push	{r3, r4, r5, lr}
 804c602:	4d06      	ldr	r5, [pc, #24]	; (804c61c <_sbrk_r+0x1c>)
 804c604:	2300      	movs	r3, #0
 804c606:	4604      	mov	r4, r0
 804c608:	4608      	mov	r0, r1
 804c60a:	602b      	str	r3, [r5, #0]
 804c60c:	f7f8 fa58 	bl	8044ac0 <_sbrk>
 804c610:	1c43      	adds	r3, r0, #1
 804c612:	d102      	bne.n	804c61a <_sbrk_r+0x1a>
 804c614:	682b      	ldr	r3, [r5, #0]
 804c616:	b103      	cbz	r3, 804c61a <_sbrk_r+0x1a>
 804c618:	6023      	str	r3, [r4, #0]
 804c61a:	bd38      	pop	{r3, r4, r5, pc}
 804c61c:	20000238 	.word	0x20000238

0804c620 <strncmp>:
 804c620:	b510      	push	{r4, lr}
 804c622:	b17a      	cbz	r2, 804c644 <strncmp+0x24>
 804c624:	4603      	mov	r3, r0
 804c626:	3901      	subs	r1, #1
 804c628:	1884      	adds	r4, r0, r2
 804c62a:	f813 0b01 	ldrb.w	r0, [r3], #1
 804c62e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 804c632:	4290      	cmp	r0, r2
 804c634:	d101      	bne.n	804c63a <strncmp+0x1a>
 804c636:	42a3      	cmp	r3, r4
 804c638:	d101      	bne.n	804c63e <strncmp+0x1e>
 804c63a:	1a80      	subs	r0, r0, r2
 804c63c:	bd10      	pop	{r4, pc}
 804c63e:	2800      	cmp	r0, #0
 804c640:	d1f3      	bne.n	804c62a <strncmp+0xa>
 804c642:	e7fa      	b.n	804c63a <strncmp+0x1a>
 804c644:	4610      	mov	r0, r2
 804c646:	e7f9      	b.n	804c63c <strncmp+0x1c>

0804c648 <__ascii_wctomb>:
 804c648:	b149      	cbz	r1, 804c65e <__ascii_wctomb+0x16>
 804c64a:	2aff      	cmp	r2, #255	; 0xff
 804c64c:	bf85      	ittet	hi
 804c64e:	238a      	movhi	r3, #138	; 0x8a
 804c650:	6003      	strhi	r3, [r0, #0]
 804c652:	700a      	strbls	r2, [r1, #0]
 804c654:	f04f 30ff 	movhi.w	r0, #4294967295
 804c658:	bf98      	it	ls
 804c65a:	2001      	movls	r0, #1
 804c65c:	4770      	bx	lr
 804c65e:	4608      	mov	r0, r1
 804c660:	4770      	bx	lr
	...

0804c664 <__assert_func>:
 804c664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804c666:	4614      	mov	r4, r2
 804c668:	461a      	mov	r2, r3
 804c66a:	4b09      	ldr	r3, [pc, #36]	; (804c690 <__assert_func+0x2c>)
 804c66c:	681b      	ldr	r3, [r3, #0]
 804c66e:	4605      	mov	r5, r0
 804c670:	68d8      	ldr	r0, [r3, #12]
 804c672:	b14c      	cbz	r4, 804c688 <__assert_func+0x24>
 804c674:	4b07      	ldr	r3, [pc, #28]	; (804c694 <__assert_func+0x30>)
 804c676:	9100      	str	r1, [sp, #0]
 804c678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804c67c:	4906      	ldr	r1, [pc, #24]	; (804c698 <__assert_func+0x34>)
 804c67e:	462b      	mov	r3, r5
 804c680:	f000 f80e 	bl	804c6a0 <fiprintf>
 804c684:	f000 fa8c 	bl	804cba0 <abort>
 804c688:	4b04      	ldr	r3, [pc, #16]	; (804c69c <__assert_func+0x38>)
 804c68a:	461c      	mov	r4, r3
 804c68c:	e7f3      	b.n	804c676 <__assert_func+0x12>
 804c68e:	bf00      	nop
 804c690:	20000014 	.word	0x20000014
 804c694:	0804e60d 	.word	0x0804e60d
 804c698:	0804e61a 	.word	0x0804e61a
 804c69c:	0804e648 	.word	0x0804e648

0804c6a0 <fiprintf>:
 804c6a0:	b40e      	push	{r1, r2, r3}
 804c6a2:	b503      	push	{r0, r1, lr}
 804c6a4:	4601      	mov	r1, r0
 804c6a6:	ab03      	add	r3, sp, #12
 804c6a8:	4805      	ldr	r0, [pc, #20]	; (804c6c0 <fiprintf+0x20>)
 804c6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 804c6ae:	6800      	ldr	r0, [r0, #0]
 804c6b0:	9301      	str	r3, [sp, #4]
 804c6b2:	f000 f885 	bl	804c7c0 <_vfiprintf_r>
 804c6b6:	b002      	add	sp, #8
 804c6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 804c6bc:	b003      	add	sp, #12
 804c6be:	4770      	bx	lr
 804c6c0:	20000014 	.word	0x20000014

0804c6c4 <memmove>:
 804c6c4:	4288      	cmp	r0, r1
 804c6c6:	b510      	push	{r4, lr}
 804c6c8:	eb01 0402 	add.w	r4, r1, r2
 804c6cc:	d902      	bls.n	804c6d4 <memmove+0x10>
 804c6ce:	4284      	cmp	r4, r0
 804c6d0:	4623      	mov	r3, r4
 804c6d2:	d807      	bhi.n	804c6e4 <memmove+0x20>
 804c6d4:	1e43      	subs	r3, r0, #1
 804c6d6:	42a1      	cmp	r1, r4
 804c6d8:	d008      	beq.n	804c6ec <memmove+0x28>
 804c6da:	f811 2b01 	ldrb.w	r2, [r1], #1
 804c6de:	f803 2f01 	strb.w	r2, [r3, #1]!
 804c6e2:	e7f8      	b.n	804c6d6 <memmove+0x12>
 804c6e4:	4402      	add	r2, r0
 804c6e6:	4601      	mov	r1, r0
 804c6e8:	428a      	cmp	r2, r1
 804c6ea:	d100      	bne.n	804c6ee <memmove+0x2a>
 804c6ec:	bd10      	pop	{r4, pc}
 804c6ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804c6f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804c6f6:	e7f7      	b.n	804c6e8 <memmove+0x24>

0804c6f8 <__malloc_lock>:
 804c6f8:	4801      	ldr	r0, [pc, #4]	; (804c700 <__malloc_lock+0x8>)
 804c6fa:	f000 bc11 	b.w	804cf20 <__retarget_lock_acquire_recursive>
 804c6fe:	bf00      	nop
 804c700:	2000023c 	.word	0x2000023c

0804c704 <__malloc_unlock>:
 804c704:	4801      	ldr	r0, [pc, #4]	; (804c70c <__malloc_unlock+0x8>)
 804c706:	f000 bc0c 	b.w	804cf22 <__retarget_lock_release_recursive>
 804c70a:	bf00      	nop
 804c70c:	2000023c 	.word	0x2000023c

0804c710 <_realloc_r>:
 804c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c714:	4680      	mov	r8, r0
 804c716:	4614      	mov	r4, r2
 804c718:	460e      	mov	r6, r1
 804c71a:	b921      	cbnz	r1, 804c726 <_realloc_r+0x16>
 804c71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804c720:	4611      	mov	r1, r2
 804c722:	f7ff bd95 	b.w	804c250 <_malloc_r>
 804c726:	b92a      	cbnz	r2, 804c734 <_realloc_r+0x24>
 804c728:	f7ff fd26 	bl	804c178 <_free_r>
 804c72c:	4625      	mov	r5, r4
 804c72e:	4628      	mov	r0, r5
 804c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c734:	f000 fc5c 	bl	804cff0 <_malloc_usable_size_r>
 804c738:	4284      	cmp	r4, r0
 804c73a:	4607      	mov	r7, r0
 804c73c:	d802      	bhi.n	804c744 <_realloc_r+0x34>
 804c73e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804c742:	d812      	bhi.n	804c76a <_realloc_r+0x5a>
 804c744:	4621      	mov	r1, r4
 804c746:	4640      	mov	r0, r8
 804c748:	f7ff fd82 	bl	804c250 <_malloc_r>
 804c74c:	4605      	mov	r5, r0
 804c74e:	2800      	cmp	r0, #0
 804c750:	d0ed      	beq.n	804c72e <_realloc_r+0x1e>
 804c752:	42bc      	cmp	r4, r7
 804c754:	4622      	mov	r2, r4
 804c756:	4631      	mov	r1, r6
 804c758:	bf28      	it	cs
 804c75a:	463a      	movcs	r2, r7
 804c75c:	f7fc f884 	bl	8048868 <memcpy>
 804c760:	4631      	mov	r1, r6
 804c762:	4640      	mov	r0, r8
 804c764:	f7ff fd08 	bl	804c178 <_free_r>
 804c768:	e7e1      	b.n	804c72e <_realloc_r+0x1e>
 804c76a:	4635      	mov	r5, r6
 804c76c:	e7df      	b.n	804c72e <_realloc_r+0x1e>

0804c76e <__sfputc_r>:
 804c76e:	6893      	ldr	r3, [r2, #8]
 804c770:	3b01      	subs	r3, #1
 804c772:	2b00      	cmp	r3, #0
 804c774:	b410      	push	{r4}
 804c776:	6093      	str	r3, [r2, #8]
 804c778:	da08      	bge.n	804c78c <__sfputc_r+0x1e>
 804c77a:	6994      	ldr	r4, [r2, #24]
 804c77c:	42a3      	cmp	r3, r4
 804c77e:	db01      	blt.n	804c784 <__sfputc_r+0x16>
 804c780:	290a      	cmp	r1, #10
 804c782:	d103      	bne.n	804c78c <__sfputc_r+0x1e>
 804c784:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c788:	f000 b94a 	b.w	804ca20 <__swbuf_r>
 804c78c:	6813      	ldr	r3, [r2, #0]
 804c78e:	1c58      	adds	r0, r3, #1
 804c790:	6010      	str	r0, [r2, #0]
 804c792:	7019      	strb	r1, [r3, #0]
 804c794:	4608      	mov	r0, r1
 804c796:	f85d 4b04 	ldr.w	r4, [sp], #4
 804c79a:	4770      	bx	lr

0804c79c <__sfputs_r>:
 804c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c79e:	4606      	mov	r6, r0
 804c7a0:	460f      	mov	r7, r1
 804c7a2:	4614      	mov	r4, r2
 804c7a4:	18d5      	adds	r5, r2, r3
 804c7a6:	42ac      	cmp	r4, r5
 804c7a8:	d101      	bne.n	804c7ae <__sfputs_r+0x12>
 804c7aa:	2000      	movs	r0, #0
 804c7ac:	e007      	b.n	804c7be <__sfputs_r+0x22>
 804c7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c7b2:	463a      	mov	r2, r7
 804c7b4:	4630      	mov	r0, r6
 804c7b6:	f7ff ffda 	bl	804c76e <__sfputc_r>
 804c7ba:	1c43      	adds	r3, r0, #1
 804c7bc:	d1f3      	bne.n	804c7a6 <__sfputs_r+0xa>
 804c7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0804c7c0 <_vfiprintf_r>:
 804c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c7c4:	460d      	mov	r5, r1
 804c7c6:	b09d      	sub	sp, #116	; 0x74
 804c7c8:	4614      	mov	r4, r2
 804c7ca:	4698      	mov	r8, r3
 804c7cc:	4606      	mov	r6, r0
 804c7ce:	b118      	cbz	r0, 804c7d8 <_vfiprintf_r+0x18>
 804c7d0:	6983      	ldr	r3, [r0, #24]
 804c7d2:	b90b      	cbnz	r3, 804c7d8 <_vfiprintf_r+0x18>
 804c7d4:	f000 fb06 	bl	804cde4 <__sinit>
 804c7d8:	4b89      	ldr	r3, [pc, #548]	; (804ca00 <_vfiprintf_r+0x240>)
 804c7da:	429d      	cmp	r5, r3
 804c7dc:	d11b      	bne.n	804c816 <_vfiprintf_r+0x56>
 804c7de:	6875      	ldr	r5, [r6, #4]
 804c7e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804c7e2:	07d9      	lsls	r1, r3, #31
 804c7e4:	d405      	bmi.n	804c7f2 <_vfiprintf_r+0x32>
 804c7e6:	89ab      	ldrh	r3, [r5, #12]
 804c7e8:	059a      	lsls	r2, r3, #22
 804c7ea:	d402      	bmi.n	804c7f2 <_vfiprintf_r+0x32>
 804c7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804c7ee:	f000 fb97 	bl	804cf20 <__retarget_lock_acquire_recursive>
 804c7f2:	89ab      	ldrh	r3, [r5, #12]
 804c7f4:	071b      	lsls	r3, r3, #28
 804c7f6:	d501      	bpl.n	804c7fc <_vfiprintf_r+0x3c>
 804c7f8:	692b      	ldr	r3, [r5, #16]
 804c7fa:	b9eb      	cbnz	r3, 804c838 <_vfiprintf_r+0x78>
 804c7fc:	4629      	mov	r1, r5
 804c7fe:	4630      	mov	r0, r6
 804c800:	f000 f960 	bl	804cac4 <__swsetup_r>
 804c804:	b1c0      	cbz	r0, 804c838 <_vfiprintf_r+0x78>
 804c806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804c808:	07dc      	lsls	r4, r3, #31
 804c80a:	d50e      	bpl.n	804c82a <_vfiprintf_r+0x6a>
 804c80c:	f04f 30ff 	mov.w	r0, #4294967295
 804c810:	b01d      	add	sp, #116	; 0x74
 804c812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c816:	4b7b      	ldr	r3, [pc, #492]	; (804ca04 <_vfiprintf_r+0x244>)
 804c818:	429d      	cmp	r5, r3
 804c81a:	d101      	bne.n	804c820 <_vfiprintf_r+0x60>
 804c81c:	68b5      	ldr	r5, [r6, #8]
 804c81e:	e7df      	b.n	804c7e0 <_vfiprintf_r+0x20>
 804c820:	4b79      	ldr	r3, [pc, #484]	; (804ca08 <_vfiprintf_r+0x248>)
 804c822:	429d      	cmp	r5, r3
 804c824:	bf08      	it	eq
 804c826:	68f5      	ldreq	r5, [r6, #12]
 804c828:	e7da      	b.n	804c7e0 <_vfiprintf_r+0x20>
 804c82a:	89ab      	ldrh	r3, [r5, #12]
 804c82c:	0598      	lsls	r0, r3, #22
 804c82e:	d4ed      	bmi.n	804c80c <_vfiprintf_r+0x4c>
 804c830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804c832:	f000 fb76 	bl	804cf22 <__retarget_lock_release_recursive>
 804c836:	e7e9      	b.n	804c80c <_vfiprintf_r+0x4c>
 804c838:	2300      	movs	r3, #0
 804c83a:	9309      	str	r3, [sp, #36]	; 0x24
 804c83c:	2320      	movs	r3, #32
 804c83e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804c842:	f8cd 800c 	str.w	r8, [sp, #12]
 804c846:	2330      	movs	r3, #48	; 0x30
 804c848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804ca0c <_vfiprintf_r+0x24c>
 804c84c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804c850:	f04f 0901 	mov.w	r9, #1
 804c854:	4623      	mov	r3, r4
 804c856:	469a      	mov	sl, r3
 804c858:	f813 2b01 	ldrb.w	r2, [r3], #1
 804c85c:	b10a      	cbz	r2, 804c862 <_vfiprintf_r+0xa2>
 804c85e:	2a25      	cmp	r2, #37	; 0x25
 804c860:	d1f9      	bne.n	804c856 <_vfiprintf_r+0x96>
 804c862:	ebba 0b04 	subs.w	fp, sl, r4
 804c866:	d00b      	beq.n	804c880 <_vfiprintf_r+0xc0>
 804c868:	465b      	mov	r3, fp
 804c86a:	4622      	mov	r2, r4
 804c86c:	4629      	mov	r1, r5
 804c86e:	4630      	mov	r0, r6
 804c870:	f7ff ff94 	bl	804c79c <__sfputs_r>
 804c874:	3001      	adds	r0, #1
 804c876:	f000 80aa 	beq.w	804c9ce <_vfiprintf_r+0x20e>
 804c87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804c87c:	445a      	add	r2, fp
 804c87e:	9209      	str	r2, [sp, #36]	; 0x24
 804c880:	f89a 3000 	ldrb.w	r3, [sl]
 804c884:	2b00      	cmp	r3, #0
 804c886:	f000 80a2 	beq.w	804c9ce <_vfiprintf_r+0x20e>
 804c88a:	2300      	movs	r3, #0
 804c88c:	f04f 32ff 	mov.w	r2, #4294967295
 804c890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804c894:	f10a 0a01 	add.w	sl, sl, #1
 804c898:	9304      	str	r3, [sp, #16]
 804c89a:	9307      	str	r3, [sp, #28]
 804c89c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804c8a0:	931a      	str	r3, [sp, #104]	; 0x68
 804c8a2:	4654      	mov	r4, sl
 804c8a4:	2205      	movs	r2, #5
 804c8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c8aa:	4858      	ldr	r0, [pc, #352]	; (804ca0c <_vfiprintf_r+0x24c>)
 804c8ac:	f7f3 fc98 	bl	80401e0 <memchr>
 804c8b0:	9a04      	ldr	r2, [sp, #16]
 804c8b2:	b9d8      	cbnz	r0, 804c8ec <_vfiprintf_r+0x12c>
 804c8b4:	06d1      	lsls	r1, r2, #27
 804c8b6:	bf44      	itt	mi
 804c8b8:	2320      	movmi	r3, #32
 804c8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c8be:	0713      	lsls	r3, r2, #28
 804c8c0:	bf44      	itt	mi
 804c8c2:	232b      	movmi	r3, #43	; 0x2b
 804c8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c8c8:	f89a 3000 	ldrb.w	r3, [sl]
 804c8cc:	2b2a      	cmp	r3, #42	; 0x2a
 804c8ce:	d015      	beq.n	804c8fc <_vfiprintf_r+0x13c>
 804c8d0:	9a07      	ldr	r2, [sp, #28]
 804c8d2:	4654      	mov	r4, sl
 804c8d4:	2000      	movs	r0, #0
 804c8d6:	f04f 0c0a 	mov.w	ip, #10
 804c8da:	4621      	mov	r1, r4
 804c8dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c8e0:	3b30      	subs	r3, #48	; 0x30
 804c8e2:	2b09      	cmp	r3, #9
 804c8e4:	d94e      	bls.n	804c984 <_vfiprintf_r+0x1c4>
 804c8e6:	b1b0      	cbz	r0, 804c916 <_vfiprintf_r+0x156>
 804c8e8:	9207      	str	r2, [sp, #28]
 804c8ea:	e014      	b.n	804c916 <_vfiprintf_r+0x156>
 804c8ec:	eba0 0308 	sub.w	r3, r0, r8
 804c8f0:	fa09 f303 	lsl.w	r3, r9, r3
 804c8f4:	4313      	orrs	r3, r2
 804c8f6:	9304      	str	r3, [sp, #16]
 804c8f8:	46a2      	mov	sl, r4
 804c8fa:	e7d2      	b.n	804c8a2 <_vfiprintf_r+0xe2>
 804c8fc:	9b03      	ldr	r3, [sp, #12]
 804c8fe:	1d19      	adds	r1, r3, #4
 804c900:	681b      	ldr	r3, [r3, #0]
 804c902:	9103      	str	r1, [sp, #12]
 804c904:	2b00      	cmp	r3, #0
 804c906:	bfbb      	ittet	lt
 804c908:	425b      	neglt	r3, r3
 804c90a:	f042 0202 	orrlt.w	r2, r2, #2
 804c90e:	9307      	strge	r3, [sp, #28]
 804c910:	9307      	strlt	r3, [sp, #28]
 804c912:	bfb8      	it	lt
 804c914:	9204      	strlt	r2, [sp, #16]
 804c916:	7823      	ldrb	r3, [r4, #0]
 804c918:	2b2e      	cmp	r3, #46	; 0x2e
 804c91a:	d10c      	bne.n	804c936 <_vfiprintf_r+0x176>
 804c91c:	7863      	ldrb	r3, [r4, #1]
 804c91e:	2b2a      	cmp	r3, #42	; 0x2a
 804c920:	d135      	bne.n	804c98e <_vfiprintf_r+0x1ce>
 804c922:	9b03      	ldr	r3, [sp, #12]
 804c924:	1d1a      	adds	r2, r3, #4
 804c926:	681b      	ldr	r3, [r3, #0]
 804c928:	9203      	str	r2, [sp, #12]
 804c92a:	2b00      	cmp	r3, #0
 804c92c:	bfb8      	it	lt
 804c92e:	f04f 33ff 	movlt.w	r3, #4294967295
 804c932:	3402      	adds	r4, #2
 804c934:	9305      	str	r3, [sp, #20]
 804c936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804ca1c <_vfiprintf_r+0x25c>
 804c93a:	7821      	ldrb	r1, [r4, #0]
 804c93c:	2203      	movs	r2, #3
 804c93e:	4650      	mov	r0, sl
 804c940:	f7f3 fc4e 	bl	80401e0 <memchr>
 804c944:	b140      	cbz	r0, 804c958 <_vfiprintf_r+0x198>
 804c946:	2340      	movs	r3, #64	; 0x40
 804c948:	eba0 000a 	sub.w	r0, r0, sl
 804c94c:	fa03 f000 	lsl.w	r0, r3, r0
 804c950:	9b04      	ldr	r3, [sp, #16]
 804c952:	4303      	orrs	r3, r0
 804c954:	3401      	adds	r4, #1
 804c956:	9304      	str	r3, [sp, #16]
 804c958:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c95c:	482c      	ldr	r0, [pc, #176]	; (804ca10 <_vfiprintf_r+0x250>)
 804c95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804c962:	2206      	movs	r2, #6
 804c964:	f7f3 fc3c 	bl	80401e0 <memchr>
 804c968:	2800      	cmp	r0, #0
 804c96a:	d03f      	beq.n	804c9ec <_vfiprintf_r+0x22c>
 804c96c:	4b29      	ldr	r3, [pc, #164]	; (804ca14 <_vfiprintf_r+0x254>)
 804c96e:	bb1b      	cbnz	r3, 804c9b8 <_vfiprintf_r+0x1f8>
 804c970:	9b03      	ldr	r3, [sp, #12]
 804c972:	3307      	adds	r3, #7
 804c974:	f023 0307 	bic.w	r3, r3, #7
 804c978:	3308      	adds	r3, #8
 804c97a:	9303      	str	r3, [sp, #12]
 804c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804c97e:	443b      	add	r3, r7
 804c980:	9309      	str	r3, [sp, #36]	; 0x24
 804c982:	e767      	b.n	804c854 <_vfiprintf_r+0x94>
 804c984:	fb0c 3202 	mla	r2, ip, r2, r3
 804c988:	460c      	mov	r4, r1
 804c98a:	2001      	movs	r0, #1
 804c98c:	e7a5      	b.n	804c8da <_vfiprintf_r+0x11a>
 804c98e:	2300      	movs	r3, #0
 804c990:	3401      	adds	r4, #1
 804c992:	9305      	str	r3, [sp, #20]
 804c994:	4619      	mov	r1, r3
 804c996:	f04f 0c0a 	mov.w	ip, #10
 804c99a:	4620      	mov	r0, r4
 804c99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 804c9a0:	3a30      	subs	r2, #48	; 0x30
 804c9a2:	2a09      	cmp	r2, #9
 804c9a4:	d903      	bls.n	804c9ae <_vfiprintf_r+0x1ee>
 804c9a6:	2b00      	cmp	r3, #0
 804c9a8:	d0c5      	beq.n	804c936 <_vfiprintf_r+0x176>
 804c9aa:	9105      	str	r1, [sp, #20]
 804c9ac:	e7c3      	b.n	804c936 <_vfiprintf_r+0x176>
 804c9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 804c9b2:	4604      	mov	r4, r0
 804c9b4:	2301      	movs	r3, #1
 804c9b6:	e7f0      	b.n	804c99a <_vfiprintf_r+0x1da>
 804c9b8:	ab03      	add	r3, sp, #12
 804c9ba:	9300      	str	r3, [sp, #0]
 804c9bc:	462a      	mov	r2, r5
 804c9be:	4b16      	ldr	r3, [pc, #88]	; (804ca18 <_vfiprintf_r+0x258>)
 804c9c0:	a904      	add	r1, sp, #16
 804c9c2:	4630      	mov	r0, r6
 804c9c4:	f7fc f806 	bl	80489d4 <_printf_float>
 804c9c8:	4607      	mov	r7, r0
 804c9ca:	1c78      	adds	r0, r7, #1
 804c9cc:	d1d6      	bne.n	804c97c <_vfiprintf_r+0x1bc>
 804c9ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804c9d0:	07d9      	lsls	r1, r3, #31
 804c9d2:	d405      	bmi.n	804c9e0 <_vfiprintf_r+0x220>
 804c9d4:	89ab      	ldrh	r3, [r5, #12]
 804c9d6:	059a      	lsls	r2, r3, #22
 804c9d8:	d402      	bmi.n	804c9e0 <_vfiprintf_r+0x220>
 804c9da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804c9dc:	f000 faa1 	bl	804cf22 <__retarget_lock_release_recursive>
 804c9e0:	89ab      	ldrh	r3, [r5, #12]
 804c9e2:	065b      	lsls	r3, r3, #25
 804c9e4:	f53f af12 	bmi.w	804c80c <_vfiprintf_r+0x4c>
 804c9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 804c9ea:	e711      	b.n	804c810 <_vfiprintf_r+0x50>
 804c9ec:	ab03      	add	r3, sp, #12
 804c9ee:	9300      	str	r3, [sp, #0]
 804c9f0:	462a      	mov	r2, r5
 804c9f2:	4b09      	ldr	r3, [pc, #36]	; (804ca18 <_vfiprintf_r+0x258>)
 804c9f4:	a904      	add	r1, sp, #16
 804c9f6:	4630      	mov	r0, r6
 804c9f8:	f7fc fa90 	bl	8048f1c <_printf_i>
 804c9fc:	e7e4      	b.n	804c9c8 <_vfiprintf_r+0x208>
 804c9fe:	bf00      	nop
 804ca00:	0804e66c 	.word	0x0804e66c
 804ca04:	0804e68c 	.word	0x0804e68c
 804ca08:	0804e64c 	.word	0x0804e64c
 804ca0c:	0804e5fc 	.word	0x0804e5fc
 804ca10:	0804e606 	.word	0x0804e606
 804ca14:	080489d5 	.word	0x080489d5
 804ca18:	0804c79d 	.word	0x0804c79d
 804ca1c:	0804e602 	.word	0x0804e602

0804ca20 <__swbuf_r>:
 804ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ca22:	460e      	mov	r6, r1
 804ca24:	4614      	mov	r4, r2
 804ca26:	4605      	mov	r5, r0
 804ca28:	b118      	cbz	r0, 804ca32 <__swbuf_r+0x12>
 804ca2a:	6983      	ldr	r3, [r0, #24]
 804ca2c:	b90b      	cbnz	r3, 804ca32 <__swbuf_r+0x12>
 804ca2e:	f000 f9d9 	bl	804cde4 <__sinit>
 804ca32:	4b21      	ldr	r3, [pc, #132]	; (804cab8 <__swbuf_r+0x98>)
 804ca34:	429c      	cmp	r4, r3
 804ca36:	d12b      	bne.n	804ca90 <__swbuf_r+0x70>
 804ca38:	686c      	ldr	r4, [r5, #4]
 804ca3a:	69a3      	ldr	r3, [r4, #24]
 804ca3c:	60a3      	str	r3, [r4, #8]
 804ca3e:	89a3      	ldrh	r3, [r4, #12]
 804ca40:	071a      	lsls	r2, r3, #28
 804ca42:	d52f      	bpl.n	804caa4 <__swbuf_r+0x84>
 804ca44:	6923      	ldr	r3, [r4, #16]
 804ca46:	b36b      	cbz	r3, 804caa4 <__swbuf_r+0x84>
 804ca48:	6923      	ldr	r3, [r4, #16]
 804ca4a:	6820      	ldr	r0, [r4, #0]
 804ca4c:	1ac0      	subs	r0, r0, r3
 804ca4e:	6963      	ldr	r3, [r4, #20]
 804ca50:	b2f6      	uxtb	r6, r6
 804ca52:	4283      	cmp	r3, r0
 804ca54:	4637      	mov	r7, r6
 804ca56:	dc04      	bgt.n	804ca62 <__swbuf_r+0x42>
 804ca58:	4621      	mov	r1, r4
 804ca5a:	4628      	mov	r0, r5
 804ca5c:	f000 f92e 	bl	804ccbc <_fflush_r>
 804ca60:	bb30      	cbnz	r0, 804cab0 <__swbuf_r+0x90>
 804ca62:	68a3      	ldr	r3, [r4, #8]
 804ca64:	3b01      	subs	r3, #1
 804ca66:	60a3      	str	r3, [r4, #8]
 804ca68:	6823      	ldr	r3, [r4, #0]
 804ca6a:	1c5a      	adds	r2, r3, #1
 804ca6c:	6022      	str	r2, [r4, #0]
 804ca6e:	701e      	strb	r6, [r3, #0]
 804ca70:	6963      	ldr	r3, [r4, #20]
 804ca72:	3001      	adds	r0, #1
 804ca74:	4283      	cmp	r3, r0
 804ca76:	d004      	beq.n	804ca82 <__swbuf_r+0x62>
 804ca78:	89a3      	ldrh	r3, [r4, #12]
 804ca7a:	07db      	lsls	r3, r3, #31
 804ca7c:	d506      	bpl.n	804ca8c <__swbuf_r+0x6c>
 804ca7e:	2e0a      	cmp	r6, #10
 804ca80:	d104      	bne.n	804ca8c <__swbuf_r+0x6c>
 804ca82:	4621      	mov	r1, r4
 804ca84:	4628      	mov	r0, r5
 804ca86:	f000 f919 	bl	804ccbc <_fflush_r>
 804ca8a:	b988      	cbnz	r0, 804cab0 <__swbuf_r+0x90>
 804ca8c:	4638      	mov	r0, r7
 804ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804ca90:	4b0a      	ldr	r3, [pc, #40]	; (804cabc <__swbuf_r+0x9c>)
 804ca92:	429c      	cmp	r4, r3
 804ca94:	d101      	bne.n	804ca9a <__swbuf_r+0x7a>
 804ca96:	68ac      	ldr	r4, [r5, #8]
 804ca98:	e7cf      	b.n	804ca3a <__swbuf_r+0x1a>
 804ca9a:	4b09      	ldr	r3, [pc, #36]	; (804cac0 <__swbuf_r+0xa0>)
 804ca9c:	429c      	cmp	r4, r3
 804ca9e:	bf08      	it	eq
 804caa0:	68ec      	ldreq	r4, [r5, #12]
 804caa2:	e7ca      	b.n	804ca3a <__swbuf_r+0x1a>
 804caa4:	4621      	mov	r1, r4
 804caa6:	4628      	mov	r0, r5
 804caa8:	f000 f80c 	bl	804cac4 <__swsetup_r>
 804caac:	2800      	cmp	r0, #0
 804caae:	d0cb      	beq.n	804ca48 <__swbuf_r+0x28>
 804cab0:	f04f 37ff 	mov.w	r7, #4294967295
 804cab4:	e7ea      	b.n	804ca8c <__swbuf_r+0x6c>
 804cab6:	bf00      	nop
 804cab8:	0804e66c 	.word	0x0804e66c
 804cabc:	0804e68c 	.word	0x0804e68c
 804cac0:	0804e64c 	.word	0x0804e64c

0804cac4 <__swsetup_r>:
 804cac4:	4b32      	ldr	r3, [pc, #200]	; (804cb90 <__swsetup_r+0xcc>)
 804cac6:	b570      	push	{r4, r5, r6, lr}
 804cac8:	681d      	ldr	r5, [r3, #0]
 804caca:	4606      	mov	r6, r0
 804cacc:	460c      	mov	r4, r1
 804cace:	b125      	cbz	r5, 804cada <__swsetup_r+0x16>
 804cad0:	69ab      	ldr	r3, [r5, #24]
 804cad2:	b913      	cbnz	r3, 804cada <__swsetup_r+0x16>
 804cad4:	4628      	mov	r0, r5
 804cad6:	f000 f985 	bl	804cde4 <__sinit>
 804cada:	4b2e      	ldr	r3, [pc, #184]	; (804cb94 <__swsetup_r+0xd0>)
 804cadc:	429c      	cmp	r4, r3
 804cade:	d10f      	bne.n	804cb00 <__swsetup_r+0x3c>
 804cae0:	686c      	ldr	r4, [r5, #4]
 804cae2:	89a3      	ldrh	r3, [r4, #12]
 804cae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cae8:	0719      	lsls	r1, r3, #28
 804caea:	d42c      	bmi.n	804cb46 <__swsetup_r+0x82>
 804caec:	06dd      	lsls	r5, r3, #27
 804caee:	d411      	bmi.n	804cb14 <__swsetup_r+0x50>
 804caf0:	2309      	movs	r3, #9
 804caf2:	6033      	str	r3, [r6, #0]
 804caf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804caf8:	81a3      	strh	r3, [r4, #12]
 804cafa:	f04f 30ff 	mov.w	r0, #4294967295
 804cafe:	e03e      	b.n	804cb7e <__swsetup_r+0xba>
 804cb00:	4b25      	ldr	r3, [pc, #148]	; (804cb98 <__swsetup_r+0xd4>)
 804cb02:	429c      	cmp	r4, r3
 804cb04:	d101      	bne.n	804cb0a <__swsetup_r+0x46>
 804cb06:	68ac      	ldr	r4, [r5, #8]
 804cb08:	e7eb      	b.n	804cae2 <__swsetup_r+0x1e>
 804cb0a:	4b24      	ldr	r3, [pc, #144]	; (804cb9c <__swsetup_r+0xd8>)
 804cb0c:	429c      	cmp	r4, r3
 804cb0e:	bf08      	it	eq
 804cb10:	68ec      	ldreq	r4, [r5, #12]
 804cb12:	e7e6      	b.n	804cae2 <__swsetup_r+0x1e>
 804cb14:	0758      	lsls	r0, r3, #29
 804cb16:	d512      	bpl.n	804cb3e <__swsetup_r+0x7a>
 804cb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cb1a:	b141      	cbz	r1, 804cb2e <__swsetup_r+0x6a>
 804cb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cb20:	4299      	cmp	r1, r3
 804cb22:	d002      	beq.n	804cb2a <__swsetup_r+0x66>
 804cb24:	4630      	mov	r0, r6
 804cb26:	f7ff fb27 	bl	804c178 <_free_r>
 804cb2a:	2300      	movs	r3, #0
 804cb2c:	6363      	str	r3, [r4, #52]	; 0x34
 804cb2e:	89a3      	ldrh	r3, [r4, #12]
 804cb30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804cb34:	81a3      	strh	r3, [r4, #12]
 804cb36:	2300      	movs	r3, #0
 804cb38:	6063      	str	r3, [r4, #4]
 804cb3a:	6923      	ldr	r3, [r4, #16]
 804cb3c:	6023      	str	r3, [r4, #0]
 804cb3e:	89a3      	ldrh	r3, [r4, #12]
 804cb40:	f043 0308 	orr.w	r3, r3, #8
 804cb44:	81a3      	strh	r3, [r4, #12]
 804cb46:	6923      	ldr	r3, [r4, #16]
 804cb48:	b94b      	cbnz	r3, 804cb5e <__swsetup_r+0x9a>
 804cb4a:	89a3      	ldrh	r3, [r4, #12]
 804cb4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804cb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804cb54:	d003      	beq.n	804cb5e <__swsetup_r+0x9a>
 804cb56:	4621      	mov	r1, r4
 804cb58:	4630      	mov	r0, r6
 804cb5a:	f000 fa09 	bl	804cf70 <__smakebuf_r>
 804cb5e:	89a0      	ldrh	r0, [r4, #12]
 804cb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cb64:	f010 0301 	ands.w	r3, r0, #1
 804cb68:	d00a      	beq.n	804cb80 <__swsetup_r+0xbc>
 804cb6a:	2300      	movs	r3, #0
 804cb6c:	60a3      	str	r3, [r4, #8]
 804cb6e:	6963      	ldr	r3, [r4, #20]
 804cb70:	425b      	negs	r3, r3
 804cb72:	61a3      	str	r3, [r4, #24]
 804cb74:	6923      	ldr	r3, [r4, #16]
 804cb76:	b943      	cbnz	r3, 804cb8a <__swsetup_r+0xc6>
 804cb78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804cb7c:	d1ba      	bne.n	804caf4 <__swsetup_r+0x30>
 804cb7e:	bd70      	pop	{r4, r5, r6, pc}
 804cb80:	0781      	lsls	r1, r0, #30
 804cb82:	bf58      	it	pl
 804cb84:	6963      	ldrpl	r3, [r4, #20]
 804cb86:	60a3      	str	r3, [r4, #8]
 804cb88:	e7f4      	b.n	804cb74 <__swsetup_r+0xb0>
 804cb8a:	2000      	movs	r0, #0
 804cb8c:	e7f7      	b.n	804cb7e <__swsetup_r+0xba>
 804cb8e:	bf00      	nop
 804cb90:	20000014 	.word	0x20000014
 804cb94:	0804e66c 	.word	0x0804e66c
 804cb98:	0804e68c 	.word	0x0804e68c
 804cb9c:	0804e64c 	.word	0x0804e64c

0804cba0 <abort>:
 804cba0:	b508      	push	{r3, lr}
 804cba2:	2006      	movs	r0, #6
 804cba4:	f000 fa54 	bl	804d050 <raise>
 804cba8:	2001      	movs	r0, #1
 804cbaa:	f7f7 ff11 	bl	80449d0 <_exit>
	...

0804cbb0 <__sflush_r>:
 804cbb0:	898a      	ldrh	r2, [r1, #12]
 804cbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cbb6:	4605      	mov	r5, r0
 804cbb8:	0710      	lsls	r0, r2, #28
 804cbba:	460c      	mov	r4, r1
 804cbbc:	d458      	bmi.n	804cc70 <__sflush_r+0xc0>
 804cbbe:	684b      	ldr	r3, [r1, #4]
 804cbc0:	2b00      	cmp	r3, #0
 804cbc2:	dc05      	bgt.n	804cbd0 <__sflush_r+0x20>
 804cbc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804cbc6:	2b00      	cmp	r3, #0
 804cbc8:	dc02      	bgt.n	804cbd0 <__sflush_r+0x20>
 804cbca:	2000      	movs	r0, #0
 804cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cbd2:	2e00      	cmp	r6, #0
 804cbd4:	d0f9      	beq.n	804cbca <__sflush_r+0x1a>
 804cbd6:	2300      	movs	r3, #0
 804cbd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804cbdc:	682f      	ldr	r7, [r5, #0]
 804cbde:	602b      	str	r3, [r5, #0]
 804cbe0:	d032      	beq.n	804cc48 <__sflush_r+0x98>
 804cbe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804cbe4:	89a3      	ldrh	r3, [r4, #12]
 804cbe6:	075a      	lsls	r2, r3, #29
 804cbe8:	d505      	bpl.n	804cbf6 <__sflush_r+0x46>
 804cbea:	6863      	ldr	r3, [r4, #4]
 804cbec:	1ac0      	subs	r0, r0, r3
 804cbee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804cbf0:	b10b      	cbz	r3, 804cbf6 <__sflush_r+0x46>
 804cbf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804cbf4:	1ac0      	subs	r0, r0, r3
 804cbf6:	2300      	movs	r3, #0
 804cbf8:	4602      	mov	r2, r0
 804cbfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cbfc:	6a21      	ldr	r1, [r4, #32]
 804cbfe:	4628      	mov	r0, r5
 804cc00:	47b0      	blx	r6
 804cc02:	1c43      	adds	r3, r0, #1
 804cc04:	89a3      	ldrh	r3, [r4, #12]
 804cc06:	d106      	bne.n	804cc16 <__sflush_r+0x66>
 804cc08:	6829      	ldr	r1, [r5, #0]
 804cc0a:	291d      	cmp	r1, #29
 804cc0c:	d82c      	bhi.n	804cc68 <__sflush_r+0xb8>
 804cc0e:	4a2a      	ldr	r2, [pc, #168]	; (804ccb8 <__sflush_r+0x108>)
 804cc10:	40ca      	lsrs	r2, r1
 804cc12:	07d6      	lsls	r6, r2, #31
 804cc14:	d528      	bpl.n	804cc68 <__sflush_r+0xb8>
 804cc16:	2200      	movs	r2, #0
 804cc18:	6062      	str	r2, [r4, #4]
 804cc1a:	04d9      	lsls	r1, r3, #19
 804cc1c:	6922      	ldr	r2, [r4, #16]
 804cc1e:	6022      	str	r2, [r4, #0]
 804cc20:	d504      	bpl.n	804cc2c <__sflush_r+0x7c>
 804cc22:	1c42      	adds	r2, r0, #1
 804cc24:	d101      	bne.n	804cc2a <__sflush_r+0x7a>
 804cc26:	682b      	ldr	r3, [r5, #0]
 804cc28:	b903      	cbnz	r3, 804cc2c <__sflush_r+0x7c>
 804cc2a:	6560      	str	r0, [r4, #84]	; 0x54
 804cc2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cc2e:	602f      	str	r7, [r5, #0]
 804cc30:	2900      	cmp	r1, #0
 804cc32:	d0ca      	beq.n	804cbca <__sflush_r+0x1a>
 804cc34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cc38:	4299      	cmp	r1, r3
 804cc3a:	d002      	beq.n	804cc42 <__sflush_r+0x92>
 804cc3c:	4628      	mov	r0, r5
 804cc3e:	f7ff fa9b 	bl	804c178 <_free_r>
 804cc42:	2000      	movs	r0, #0
 804cc44:	6360      	str	r0, [r4, #52]	; 0x34
 804cc46:	e7c1      	b.n	804cbcc <__sflush_r+0x1c>
 804cc48:	6a21      	ldr	r1, [r4, #32]
 804cc4a:	2301      	movs	r3, #1
 804cc4c:	4628      	mov	r0, r5
 804cc4e:	47b0      	blx	r6
 804cc50:	1c41      	adds	r1, r0, #1
 804cc52:	d1c7      	bne.n	804cbe4 <__sflush_r+0x34>
 804cc54:	682b      	ldr	r3, [r5, #0]
 804cc56:	2b00      	cmp	r3, #0
 804cc58:	d0c4      	beq.n	804cbe4 <__sflush_r+0x34>
 804cc5a:	2b1d      	cmp	r3, #29
 804cc5c:	d001      	beq.n	804cc62 <__sflush_r+0xb2>
 804cc5e:	2b16      	cmp	r3, #22
 804cc60:	d101      	bne.n	804cc66 <__sflush_r+0xb6>
 804cc62:	602f      	str	r7, [r5, #0]
 804cc64:	e7b1      	b.n	804cbca <__sflush_r+0x1a>
 804cc66:	89a3      	ldrh	r3, [r4, #12]
 804cc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cc6c:	81a3      	strh	r3, [r4, #12]
 804cc6e:	e7ad      	b.n	804cbcc <__sflush_r+0x1c>
 804cc70:	690f      	ldr	r7, [r1, #16]
 804cc72:	2f00      	cmp	r7, #0
 804cc74:	d0a9      	beq.n	804cbca <__sflush_r+0x1a>
 804cc76:	0793      	lsls	r3, r2, #30
 804cc78:	680e      	ldr	r6, [r1, #0]
 804cc7a:	bf08      	it	eq
 804cc7c:	694b      	ldreq	r3, [r1, #20]
 804cc7e:	600f      	str	r7, [r1, #0]
 804cc80:	bf18      	it	ne
 804cc82:	2300      	movne	r3, #0
 804cc84:	eba6 0807 	sub.w	r8, r6, r7
 804cc88:	608b      	str	r3, [r1, #8]
 804cc8a:	f1b8 0f00 	cmp.w	r8, #0
 804cc8e:	dd9c      	ble.n	804cbca <__sflush_r+0x1a>
 804cc90:	6a21      	ldr	r1, [r4, #32]
 804cc92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804cc94:	4643      	mov	r3, r8
 804cc96:	463a      	mov	r2, r7
 804cc98:	4628      	mov	r0, r5
 804cc9a:	47b0      	blx	r6
 804cc9c:	2800      	cmp	r0, #0
 804cc9e:	dc06      	bgt.n	804ccae <__sflush_r+0xfe>
 804cca0:	89a3      	ldrh	r3, [r4, #12]
 804cca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cca6:	81a3      	strh	r3, [r4, #12]
 804cca8:	f04f 30ff 	mov.w	r0, #4294967295
 804ccac:	e78e      	b.n	804cbcc <__sflush_r+0x1c>
 804ccae:	4407      	add	r7, r0
 804ccb0:	eba8 0800 	sub.w	r8, r8, r0
 804ccb4:	e7e9      	b.n	804cc8a <__sflush_r+0xda>
 804ccb6:	bf00      	nop
 804ccb8:	20400001 	.word	0x20400001

0804ccbc <_fflush_r>:
 804ccbc:	b538      	push	{r3, r4, r5, lr}
 804ccbe:	690b      	ldr	r3, [r1, #16]
 804ccc0:	4605      	mov	r5, r0
 804ccc2:	460c      	mov	r4, r1
 804ccc4:	b913      	cbnz	r3, 804cccc <_fflush_r+0x10>
 804ccc6:	2500      	movs	r5, #0
 804ccc8:	4628      	mov	r0, r5
 804ccca:	bd38      	pop	{r3, r4, r5, pc}
 804cccc:	b118      	cbz	r0, 804ccd6 <_fflush_r+0x1a>
 804ccce:	6983      	ldr	r3, [r0, #24]
 804ccd0:	b90b      	cbnz	r3, 804ccd6 <_fflush_r+0x1a>
 804ccd2:	f000 f887 	bl	804cde4 <__sinit>
 804ccd6:	4b14      	ldr	r3, [pc, #80]	; (804cd28 <_fflush_r+0x6c>)
 804ccd8:	429c      	cmp	r4, r3
 804ccda:	d11b      	bne.n	804cd14 <_fflush_r+0x58>
 804ccdc:	686c      	ldr	r4, [r5, #4]
 804ccde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cce2:	2b00      	cmp	r3, #0
 804cce4:	d0ef      	beq.n	804ccc6 <_fflush_r+0xa>
 804cce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804cce8:	07d0      	lsls	r0, r2, #31
 804ccea:	d404      	bmi.n	804ccf6 <_fflush_r+0x3a>
 804ccec:	0599      	lsls	r1, r3, #22
 804ccee:	d402      	bmi.n	804ccf6 <_fflush_r+0x3a>
 804ccf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804ccf2:	f000 f915 	bl	804cf20 <__retarget_lock_acquire_recursive>
 804ccf6:	4628      	mov	r0, r5
 804ccf8:	4621      	mov	r1, r4
 804ccfa:	f7ff ff59 	bl	804cbb0 <__sflush_r>
 804ccfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804cd00:	07da      	lsls	r2, r3, #31
 804cd02:	4605      	mov	r5, r0
 804cd04:	d4e0      	bmi.n	804ccc8 <_fflush_r+0xc>
 804cd06:	89a3      	ldrh	r3, [r4, #12]
 804cd08:	059b      	lsls	r3, r3, #22
 804cd0a:	d4dd      	bmi.n	804ccc8 <_fflush_r+0xc>
 804cd0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cd0e:	f000 f908 	bl	804cf22 <__retarget_lock_release_recursive>
 804cd12:	e7d9      	b.n	804ccc8 <_fflush_r+0xc>
 804cd14:	4b05      	ldr	r3, [pc, #20]	; (804cd2c <_fflush_r+0x70>)
 804cd16:	429c      	cmp	r4, r3
 804cd18:	d101      	bne.n	804cd1e <_fflush_r+0x62>
 804cd1a:	68ac      	ldr	r4, [r5, #8]
 804cd1c:	e7df      	b.n	804ccde <_fflush_r+0x22>
 804cd1e:	4b04      	ldr	r3, [pc, #16]	; (804cd30 <_fflush_r+0x74>)
 804cd20:	429c      	cmp	r4, r3
 804cd22:	bf08      	it	eq
 804cd24:	68ec      	ldreq	r4, [r5, #12]
 804cd26:	e7da      	b.n	804ccde <_fflush_r+0x22>
 804cd28:	0804e66c 	.word	0x0804e66c
 804cd2c:	0804e68c 	.word	0x0804e68c
 804cd30:	0804e64c 	.word	0x0804e64c

0804cd34 <std>:
 804cd34:	2300      	movs	r3, #0
 804cd36:	b510      	push	{r4, lr}
 804cd38:	4604      	mov	r4, r0
 804cd3a:	e9c0 3300 	strd	r3, r3, [r0]
 804cd3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804cd42:	6083      	str	r3, [r0, #8]
 804cd44:	8181      	strh	r1, [r0, #12]
 804cd46:	6643      	str	r3, [r0, #100]	; 0x64
 804cd48:	81c2      	strh	r2, [r0, #14]
 804cd4a:	6183      	str	r3, [r0, #24]
 804cd4c:	4619      	mov	r1, r3
 804cd4e:	2208      	movs	r2, #8
 804cd50:	305c      	adds	r0, #92	; 0x5c
 804cd52:	f7fb fd97 	bl	8048884 <memset>
 804cd56:	4b05      	ldr	r3, [pc, #20]	; (804cd6c <std+0x38>)
 804cd58:	6263      	str	r3, [r4, #36]	; 0x24
 804cd5a:	4b05      	ldr	r3, [pc, #20]	; (804cd70 <std+0x3c>)
 804cd5c:	62a3      	str	r3, [r4, #40]	; 0x28
 804cd5e:	4b05      	ldr	r3, [pc, #20]	; (804cd74 <std+0x40>)
 804cd60:	62e3      	str	r3, [r4, #44]	; 0x2c
 804cd62:	4b05      	ldr	r3, [pc, #20]	; (804cd78 <std+0x44>)
 804cd64:	6224      	str	r4, [r4, #32]
 804cd66:	6323      	str	r3, [r4, #48]	; 0x30
 804cd68:	bd10      	pop	{r4, pc}
 804cd6a:	bf00      	nop
 804cd6c:	0804d089 	.word	0x0804d089
 804cd70:	0804d0ab 	.word	0x0804d0ab
 804cd74:	0804d0e3 	.word	0x0804d0e3
 804cd78:	0804d107 	.word	0x0804d107

0804cd7c <_cleanup_r>:
 804cd7c:	4901      	ldr	r1, [pc, #4]	; (804cd84 <_cleanup_r+0x8>)
 804cd7e:	f000 b8af 	b.w	804cee0 <_fwalk_reent>
 804cd82:	bf00      	nop
 804cd84:	0804ccbd 	.word	0x0804ccbd

0804cd88 <__sfmoreglue>:
 804cd88:	b570      	push	{r4, r5, r6, lr}
 804cd8a:	2268      	movs	r2, #104	; 0x68
 804cd8c:	1e4d      	subs	r5, r1, #1
 804cd8e:	4355      	muls	r5, r2
 804cd90:	460e      	mov	r6, r1
 804cd92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804cd96:	f7ff fa5b 	bl	804c250 <_malloc_r>
 804cd9a:	4604      	mov	r4, r0
 804cd9c:	b140      	cbz	r0, 804cdb0 <__sfmoreglue+0x28>
 804cd9e:	2100      	movs	r1, #0
 804cda0:	e9c0 1600 	strd	r1, r6, [r0]
 804cda4:	300c      	adds	r0, #12
 804cda6:	60a0      	str	r0, [r4, #8]
 804cda8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804cdac:	f7fb fd6a 	bl	8048884 <memset>
 804cdb0:	4620      	mov	r0, r4
 804cdb2:	bd70      	pop	{r4, r5, r6, pc}

0804cdb4 <__sfp_lock_acquire>:
 804cdb4:	4801      	ldr	r0, [pc, #4]	; (804cdbc <__sfp_lock_acquire+0x8>)
 804cdb6:	f000 b8b3 	b.w	804cf20 <__retarget_lock_acquire_recursive>
 804cdba:	bf00      	nop
 804cdbc:	2000023d 	.word	0x2000023d

0804cdc0 <__sfp_lock_release>:
 804cdc0:	4801      	ldr	r0, [pc, #4]	; (804cdc8 <__sfp_lock_release+0x8>)
 804cdc2:	f000 b8ae 	b.w	804cf22 <__retarget_lock_release_recursive>
 804cdc6:	bf00      	nop
 804cdc8:	2000023d 	.word	0x2000023d

0804cdcc <__sinit_lock_acquire>:
 804cdcc:	4801      	ldr	r0, [pc, #4]	; (804cdd4 <__sinit_lock_acquire+0x8>)
 804cdce:	f000 b8a7 	b.w	804cf20 <__retarget_lock_acquire_recursive>
 804cdd2:	bf00      	nop
 804cdd4:	2000023e 	.word	0x2000023e

0804cdd8 <__sinit_lock_release>:
 804cdd8:	4801      	ldr	r0, [pc, #4]	; (804cde0 <__sinit_lock_release+0x8>)
 804cdda:	f000 b8a2 	b.w	804cf22 <__retarget_lock_release_recursive>
 804cdde:	bf00      	nop
 804cde0:	2000023e 	.word	0x2000023e

0804cde4 <__sinit>:
 804cde4:	b510      	push	{r4, lr}
 804cde6:	4604      	mov	r4, r0
 804cde8:	f7ff fff0 	bl	804cdcc <__sinit_lock_acquire>
 804cdec:	69a3      	ldr	r3, [r4, #24]
 804cdee:	b11b      	cbz	r3, 804cdf8 <__sinit+0x14>
 804cdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804cdf4:	f7ff bff0 	b.w	804cdd8 <__sinit_lock_release>
 804cdf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804cdfc:	6523      	str	r3, [r4, #80]	; 0x50
 804cdfe:	4b13      	ldr	r3, [pc, #76]	; (804ce4c <__sinit+0x68>)
 804ce00:	4a13      	ldr	r2, [pc, #76]	; (804ce50 <__sinit+0x6c>)
 804ce02:	681b      	ldr	r3, [r3, #0]
 804ce04:	62a2      	str	r2, [r4, #40]	; 0x28
 804ce06:	42a3      	cmp	r3, r4
 804ce08:	bf04      	itt	eq
 804ce0a:	2301      	moveq	r3, #1
 804ce0c:	61a3      	streq	r3, [r4, #24]
 804ce0e:	4620      	mov	r0, r4
 804ce10:	f000 f820 	bl	804ce54 <__sfp>
 804ce14:	6060      	str	r0, [r4, #4]
 804ce16:	4620      	mov	r0, r4
 804ce18:	f000 f81c 	bl	804ce54 <__sfp>
 804ce1c:	60a0      	str	r0, [r4, #8]
 804ce1e:	4620      	mov	r0, r4
 804ce20:	f000 f818 	bl	804ce54 <__sfp>
 804ce24:	2200      	movs	r2, #0
 804ce26:	60e0      	str	r0, [r4, #12]
 804ce28:	2104      	movs	r1, #4
 804ce2a:	6860      	ldr	r0, [r4, #4]
 804ce2c:	f7ff ff82 	bl	804cd34 <std>
 804ce30:	68a0      	ldr	r0, [r4, #8]
 804ce32:	2201      	movs	r2, #1
 804ce34:	2109      	movs	r1, #9
 804ce36:	f7ff ff7d 	bl	804cd34 <std>
 804ce3a:	68e0      	ldr	r0, [r4, #12]
 804ce3c:	2202      	movs	r2, #2
 804ce3e:	2112      	movs	r1, #18
 804ce40:	f7ff ff78 	bl	804cd34 <std>
 804ce44:	2301      	movs	r3, #1
 804ce46:	61a3      	str	r3, [r4, #24]
 804ce48:	e7d2      	b.n	804cdf0 <__sinit+0xc>
 804ce4a:	bf00      	nop
 804ce4c:	0804e1e0 	.word	0x0804e1e0
 804ce50:	0804cd7d 	.word	0x0804cd7d

0804ce54 <__sfp>:
 804ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ce56:	4607      	mov	r7, r0
 804ce58:	f7ff ffac 	bl	804cdb4 <__sfp_lock_acquire>
 804ce5c:	4b1e      	ldr	r3, [pc, #120]	; (804ced8 <__sfp+0x84>)
 804ce5e:	681e      	ldr	r6, [r3, #0]
 804ce60:	69b3      	ldr	r3, [r6, #24]
 804ce62:	b913      	cbnz	r3, 804ce6a <__sfp+0x16>
 804ce64:	4630      	mov	r0, r6
 804ce66:	f7ff ffbd 	bl	804cde4 <__sinit>
 804ce6a:	3648      	adds	r6, #72	; 0x48
 804ce6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804ce70:	3b01      	subs	r3, #1
 804ce72:	d503      	bpl.n	804ce7c <__sfp+0x28>
 804ce74:	6833      	ldr	r3, [r6, #0]
 804ce76:	b30b      	cbz	r3, 804cebc <__sfp+0x68>
 804ce78:	6836      	ldr	r6, [r6, #0]
 804ce7a:	e7f7      	b.n	804ce6c <__sfp+0x18>
 804ce7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804ce80:	b9d5      	cbnz	r5, 804ceb8 <__sfp+0x64>
 804ce82:	4b16      	ldr	r3, [pc, #88]	; (804cedc <__sfp+0x88>)
 804ce84:	60e3      	str	r3, [r4, #12]
 804ce86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804ce8a:	6665      	str	r5, [r4, #100]	; 0x64
 804ce8c:	f000 f847 	bl	804cf1e <__retarget_lock_init_recursive>
 804ce90:	f7ff ff96 	bl	804cdc0 <__sfp_lock_release>
 804ce94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804ce98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804ce9c:	6025      	str	r5, [r4, #0]
 804ce9e:	61a5      	str	r5, [r4, #24]
 804cea0:	2208      	movs	r2, #8
 804cea2:	4629      	mov	r1, r5
 804cea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804cea8:	f7fb fcec 	bl	8048884 <memset>
 804ceac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804ceb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804ceb4:	4620      	mov	r0, r4
 804ceb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804ceb8:	3468      	adds	r4, #104	; 0x68
 804ceba:	e7d9      	b.n	804ce70 <__sfp+0x1c>
 804cebc:	2104      	movs	r1, #4
 804cebe:	4638      	mov	r0, r7
 804cec0:	f7ff ff62 	bl	804cd88 <__sfmoreglue>
 804cec4:	4604      	mov	r4, r0
 804cec6:	6030      	str	r0, [r6, #0]
 804cec8:	2800      	cmp	r0, #0
 804ceca:	d1d5      	bne.n	804ce78 <__sfp+0x24>
 804cecc:	f7ff ff78 	bl	804cdc0 <__sfp_lock_release>
 804ced0:	230c      	movs	r3, #12
 804ced2:	603b      	str	r3, [r7, #0]
 804ced4:	e7ee      	b.n	804ceb4 <__sfp+0x60>
 804ced6:	bf00      	nop
 804ced8:	0804e1e0 	.word	0x0804e1e0
 804cedc:	ffff0001 	.word	0xffff0001

0804cee0 <_fwalk_reent>:
 804cee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804cee4:	4606      	mov	r6, r0
 804cee6:	4688      	mov	r8, r1
 804cee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804ceec:	2700      	movs	r7, #0
 804ceee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804cef2:	f1b9 0901 	subs.w	r9, r9, #1
 804cef6:	d505      	bpl.n	804cf04 <_fwalk_reent+0x24>
 804cef8:	6824      	ldr	r4, [r4, #0]
 804cefa:	2c00      	cmp	r4, #0
 804cefc:	d1f7      	bne.n	804ceee <_fwalk_reent+0xe>
 804cefe:	4638      	mov	r0, r7
 804cf00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804cf04:	89ab      	ldrh	r3, [r5, #12]
 804cf06:	2b01      	cmp	r3, #1
 804cf08:	d907      	bls.n	804cf1a <_fwalk_reent+0x3a>
 804cf0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804cf0e:	3301      	adds	r3, #1
 804cf10:	d003      	beq.n	804cf1a <_fwalk_reent+0x3a>
 804cf12:	4629      	mov	r1, r5
 804cf14:	4630      	mov	r0, r6
 804cf16:	47c0      	blx	r8
 804cf18:	4307      	orrs	r7, r0
 804cf1a:	3568      	adds	r5, #104	; 0x68
 804cf1c:	e7e9      	b.n	804cef2 <_fwalk_reent+0x12>

0804cf1e <__retarget_lock_init_recursive>:
 804cf1e:	4770      	bx	lr

0804cf20 <__retarget_lock_acquire_recursive>:
 804cf20:	4770      	bx	lr

0804cf22 <__retarget_lock_release_recursive>:
 804cf22:	4770      	bx	lr

0804cf24 <__swhatbuf_r>:
 804cf24:	b570      	push	{r4, r5, r6, lr}
 804cf26:	460e      	mov	r6, r1
 804cf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804cf2c:	2900      	cmp	r1, #0
 804cf2e:	b096      	sub	sp, #88	; 0x58
 804cf30:	4614      	mov	r4, r2
 804cf32:	461d      	mov	r5, r3
 804cf34:	da08      	bge.n	804cf48 <__swhatbuf_r+0x24>
 804cf36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804cf3a:	2200      	movs	r2, #0
 804cf3c:	602a      	str	r2, [r5, #0]
 804cf3e:	061a      	lsls	r2, r3, #24
 804cf40:	d410      	bmi.n	804cf64 <__swhatbuf_r+0x40>
 804cf42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804cf46:	e00e      	b.n	804cf66 <__swhatbuf_r+0x42>
 804cf48:	466a      	mov	r2, sp
 804cf4a:	f000 f903 	bl	804d154 <_fstat_r>
 804cf4e:	2800      	cmp	r0, #0
 804cf50:	dbf1      	blt.n	804cf36 <__swhatbuf_r+0x12>
 804cf52:	9a01      	ldr	r2, [sp, #4]
 804cf54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804cf58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804cf5c:	425a      	negs	r2, r3
 804cf5e:	415a      	adcs	r2, r3
 804cf60:	602a      	str	r2, [r5, #0]
 804cf62:	e7ee      	b.n	804cf42 <__swhatbuf_r+0x1e>
 804cf64:	2340      	movs	r3, #64	; 0x40
 804cf66:	2000      	movs	r0, #0
 804cf68:	6023      	str	r3, [r4, #0]
 804cf6a:	b016      	add	sp, #88	; 0x58
 804cf6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0804cf70 <__smakebuf_r>:
 804cf70:	898b      	ldrh	r3, [r1, #12]
 804cf72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804cf74:	079d      	lsls	r5, r3, #30
 804cf76:	4606      	mov	r6, r0
 804cf78:	460c      	mov	r4, r1
 804cf7a:	d507      	bpl.n	804cf8c <__smakebuf_r+0x1c>
 804cf7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804cf80:	6023      	str	r3, [r4, #0]
 804cf82:	6123      	str	r3, [r4, #16]
 804cf84:	2301      	movs	r3, #1
 804cf86:	6163      	str	r3, [r4, #20]
 804cf88:	b002      	add	sp, #8
 804cf8a:	bd70      	pop	{r4, r5, r6, pc}
 804cf8c:	ab01      	add	r3, sp, #4
 804cf8e:	466a      	mov	r2, sp
 804cf90:	f7ff ffc8 	bl	804cf24 <__swhatbuf_r>
 804cf94:	9900      	ldr	r1, [sp, #0]
 804cf96:	4605      	mov	r5, r0
 804cf98:	4630      	mov	r0, r6
 804cf9a:	f7ff f959 	bl	804c250 <_malloc_r>
 804cf9e:	b948      	cbnz	r0, 804cfb4 <__smakebuf_r+0x44>
 804cfa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cfa4:	059a      	lsls	r2, r3, #22
 804cfa6:	d4ef      	bmi.n	804cf88 <__smakebuf_r+0x18>
 804cfa8:	f023 0303 	bic.w	r3, r3, #3
 804cfac:	f043 0302 	orr.w	r3, r3, #2
 804cfb0:	81a3      	strh	r3, [r4, #12]
 804cfb2:	e7e3      	b.n	804cf7c <__smakebuf_r+0xc>
 804cfb4:	4b0d      	ldr	r3, [pc, #52]	; (804cfec <__smakebuf_r+0x7c>)
 804cfb6:	62b3      	str	r3, [r6, #40]	; 0x28
 804cfb8:	89a3      	ldrh	r3, [r4, #12]
 804cfba:	6020      	str	r0, [r4, #0]
 804cfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804cfc0:	81a3      	strh	r3, [r4, #12]
 804cfc2:	9b00      	ldr	r3, [sp, #0]
 804cfc4:	6163      	str	r3, [r4, #20]
 804cfc6:	9b01      	ldr	r3, [sp, #4]
 804cfc8:	6120      	str	r0, [r4, #16]
 804cfca:	b15b      	cbz	r3, 804cfe4 <__smakebuf_r+0x74>
 804cfcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804cfd0:	4630      	mov	r0, r6
 804cfd2:	f000 f8d1 	bl	804d178 <_isatty_r>
 804cfd6:	b128      	cbz	r0, 804cfe4 <__smakebuf_r+0x74>
 804cfd8:	89a3      	ldrh	r3, [r4, #12]
 804cfda:	f023 0303 	bic.w	r3, r3, #3
 804cfde:	f043 0301 	orr.w	r3, r3, #1
 804cfe2:	81a3      	strh	r3, [r4, #12]
 804cfe4:	89a0      	ldrh	r0, [r4, #12]
 804cfe6:	4305      	orrs	r5, r0
 804cfe8:	81a5      	strh	r5, [r4, #12]
 804cfea:	e7cd      	b.n	804cf88 <__smakebuf_r+0x18>
 804cfec:	0804cd7d 	.word	0x0804cd7d

0804cff0 <_malloc_usable_size_r>:
 804cff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804cff4:	1f18      	subs	r0, r3, #4
 804cff6:	2b00      	cmp	r3, #0
 804cff8:	bfbc      	itt	lt
 804cffa:	580b      	ldrlt	r3, [r1, r0]
 804cffc:	18c0      	addlt	r0, r0, r3
 804cffe:	4770      	bx	lr

0804d000 <_raise_r>:
 804d000:	291f      	cmp	r1, #31
 804d002:	b538      	push	{r3, r4, r5, lr}
 804d004:	4604      	mov	r4, r0
 804d006:	460d      	mov	r5, r1
 804d008:	d904      	bls.n	804d014 <_raise_r+0x14>
 804d00a:	2316      	movs	r3, #22
 804d00c:	6003      	str	r3, [r0, #0]
 804d00e:	f04f 30ff 	mov.w	r0, #4294967295
 804d012:	bd38      	pop	{r3, r4, r5, pc}
 804d014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 804d016:	b112      	cbz	r2, 804d01e <_raise_r+0x1e>
 804d018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 804d01c:	b94b      	cbnz	r3, 804d032 <_raise_r+0x32>
 804d01e:	4620      	mov	r0, r4
 804d020:	f000 f830 	bl	804d084 <_getpid_r>
 804d024:	462a      	mov	r2, r5
 804d026:	4601      	mov	r1, r0
 804d028:	4620      	mov	r0, r4
 804d02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804d02e:	f000 b817 	b.w	804d060 <_kill_r>
 804d032:	2b01      	cmp	r3, #1
 804d034:	d00a      	beq.n	804d04c <_raise_r+0x4c>
 804d036:	1c59      	adds	r1, r3, #1
 804d038:	d103      	bne.n	804d042 <_raise_r+0x42>
 804d03a:	2316      	movs	r3, #22
 804d03c:	6003      	str	r3, [r0, #0]
 804d03e:	2001      	movs	r0, #1
 804d040:	e7e7      	b.n	804d012 <_raise_r+0x12>
 804d042:	2400      	movs	r4, #0
 804d044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 804d048:	4628      	mov	r0, r5
 804d04a:	4798      	blx	r3
 804d04c:	2000      	movs	r0, #0
 804d04e:	e7e0      	b.n	804d012 <_raise_r+0x12>

0804d050 <raise>:
 804d050:	4b02      	ldr	r3, [pc, #8]	; (804d05c <raise+0xc>)
 804d052:	4601      	mov	r1, r0
 804d054:	6818      	ldr	r0, [r3, #0]
 804d056:	f7ff bfd3 	b.w	804d000 <_raise_r>
 804d05a:	bf00      	nop
 804d05c:	20000014 	.word	0x20000014

0804d060 <_kill_r>:
 804d060:	b538      	push	{r3, r4, r5, lr}
 804d062:	4d07      	ldr	r5, [pc, #28]	; (804d080 <_kill_r+0x20>)
 804d064:	2300      	movs	r3, #0
 804d066:	4604      	mov	r4, r0
 804d068:	4608      	mov	r0, r1
 804d06a:	4611      	mov	r1, r2
 804d06c:	602b      	str	r3, [r5, #0]
 804d06e:	f7f7 fc9f 	bl	80449b0 <_kill>
 804d072:	1c43      	adds	r3, r0, #1
 804d074:	d102      	bne.n	804d07c <_kill_r+0x1c>
 804d076:	682b      	ldr	r3, [r5, #0]
 804d078:	b103      	cbz	r3, 804d07c <_kill_r+0x1c>
 804d07a:	6023      	str	r3, [r4, #0]
 804d07c:	bd38      	pop	{r3, r4, r5, pc}
 804d07e:	bf00      	nop
 804d080:	20000238 	.word	0x20000238

0804d084 <_getpid_r>:
 804d084:	f7f7 bc8c 	b.w	80449a0 <_getpid>

0804d088 <__sread>:
 804d088:	b510      	push	{r4, lr}
 804d08a:	460c      	mov	r4, r1
 804d08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d090:	f000 f894 	bl	804d1bc <_read_r>
 804d094:	2800      	cmp	r0, #0
 804d096:	bfab      	itete	ge
 804d098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804d09a:	89a3      	ldrhlt	r3, [r4, #12]
 804d09c:	181b      	addge	r3, r3, r0
 804d09e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804d0a2:	bfac      	ite	ge
 804d0a4:	6563      	strge	r3, [r4, #84]	; 0x54
 804d0a6:	81a3      	strhlt	r3, [r4, #12]
 804d0a8:	bd10      	pop	{r4, pc}

0804d0aa <__swrite>:
 804d0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d0ae:	461f      	mov	r7, r3
 804d0b0:	898b      	ldrh	r3, [r1, #12]
 804d0b2:	05db      	lsls	r3, r3, #23
 804d0b4:	4605      	mov	r5, r0
 804d0b6:	460c      	mov	r4, r1
 804d0b8:	4616      	mov	r6, r2
 804d0ba:	d505      	bpl.n	804d0c8 <__swrite+0x1e>
 804d0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d0c0:	2302      	movs	r3, #2
 804d0c2:	2200      	movs	r2, #0
 804d0c4:	f000 f868 	bl	804d198 <_lseek_r>
 804d0c8:	89a3      	ldrh	r3, [r4, #12]
 804d0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d0ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804d0d2:	81a3      	strh	r3, [r4, #12]
 804d0d4:	4632      	mov	r2, r6
 804d0d6:	463b      	mov	r3, r7
 804d0d8:	4628      	mov	r0, r5
 804d0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804d0de:	f000 b817 	b.w	804d110 <_write_r>

0804d0e2 <__sseek>:
 804d0e2:	b510      	push	{r4, lr}
 804d0e4:	460c      	mov	r4, r1
 804d0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d0ea:	f000 f855 	bl	804d198 <_lseek_r>
 804d0ee:	1c43      	adds	r3, r0, #1
 804d0f0:	89a3      	ldrh	r3, [r4, #12]
 804d0f2:	bf15      	itete	ne
 804d0f4:	6560      	strne	r0, [r4, #84]	; 0x54
 804d0f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804d0fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804d0fe:	81a3      	strheq	r3, [r4, #12]
 804d100:	bf18      	it	ne
 804d102:	81a3      	strhne	r3, [r4, #12]
 804d104:	bd10      	pop	{r4, pc}

0804d106 <__sclose>:
 804d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d10a:	f000 b813 	b.w	804d134 <_close_r>
	...

0804d110 <_write_r>:
 804d110:	b538      	push	{r3, r4, r5, lr}
 804d112:	4d07      	ldr	r5, [pc, #28]	; (804d130 <_write_r+0x20>)
 804d114:	4604      	mov	r4, r0
 804d116:	4608      	mov	r0, r1
 804d118:	4611      	mov	r1, r2
 804d11a:	2200      	movs	r2, #0
 804d11c:	602a      	str	r2, [r5, #0]
 804d11e:	461a      	mov	r2, r3
 804d120:	f7f7 fc7d 	bl	8044a1e <_write>
 804d124:	1c43      	adds	r3, r0, #1
 804d126:	d102      	bne.n	804d12e <_write_r+0x1e>
 804d128:	682b      	ldr	r3, [r5, #0]
 804d12a:	b103      	cbz	r3, 804d12e <_write_r+0x1e>
 804d12c:	6023      	str	r3, [r4, #0]
 804d12e:	bd38      	pop	{r3, r4, r5, pc}
 804d130:	20000238 	.word	0x20000238

0804d134 <_close_r>:
 804d134:	b538      	push	{r3, r4, r5, lr}
 804d136:	4d06      	ldr	r5, [pc, #24]	; (804d150 <_close_r+0x1c>)
 804d138:	2300      	movs	r3, #0
 804d13a:	4604      	mov	r4, r0
 804d13c:	4608      	mov	r0, r1
 804d13e:	602b      	str	r3, [r5, #0]
 804d140:	f7f7 fc89 	bl	8044a56 <_close>
 804d144:	1c43      	adds	r3, r0, #1
 804d146:	d102      	bne.n	804d14e <_close_r+0x1a>
 804d148:	682b      	ldr	r3, [r5, #0]
 804d14a:	b103      	cbz	r3, 804d14e <_close_r+0x1a>
 804d14c:	6023      	str	r3, [r4, #0]
 804d14e:	bd38      	pop	{r3, r4, r5, pc}
 804d150:	20000238 	.word	0x20000238

0804d154 <_fstat_r>:
 804d154:	b538      	push	{r3, r4, r5, lr}
 804d156:	4d07      	ldr	r5, [pc, #28]	; (804d174 <_fstat_r+0x20>)
 804d158:	2300      	movs	r3, #0
 804d15a:	4604      	mov	r4, r0
 804d15c:	4608      	mov	r0, r1
 804d15e:	4611      	mov	r1, r2
 804d160:	602b      	str	r3, [r5, #0]
 804d162:	f7f7 fc84 	bl	8044a6e <_fstat>
 804d166:	1c43      	adds	r3, r0, #1
 804d168:	d102      	bne.n	804d170 <_fstat_r+0x1c>
 804d16a:	682b      	ldr	r3, [r5, #0]
 804d16c:	b103      	cbz	r3, 804d170 <_fstat_r+0x1c>
 804d16e:	6023      	str	r3, [r4, #0]
 804d170:	bd38      	pop	{r3, r4, r5, pc}
 804d172:	bf00      	nop
 804d174:	20000238 	.word	0x20000238

0804d178 <_isatty_r>:
 804d178:	b538      	push	{r3, r4, r5, lr}
 804d17a:	4d06      	ldr	r5, [pc, #24]	; (804d194 <_isatty_r+0x1c>)
 804d17c:	2300      	movs	r3, #0
 804d17e:	4604      	mov	r4, r0
 804d180:	4608      	mov	r0, r1
 804d182:	602b      	str	r3, [r5, #0]
 804d184:	f7f7 fc83 	bl	8044a8e <_isatty>
 804d188:	1c43      	adds	r3, r0, #1
 804d18a:	d102      	bne.n	804d192 <_isatty_r+0x1a>
 804d18c:	682b      	ldr	r3, [r5, #0]
 804d18e:	b103      	cbz	r3, 804d192 <_isatty_r+0x1a>
 804d190:	6023      	str	r3, [r4, #0]
 804d192:	bd38      	pop	{r3, r4, r5, pc}
 804d194:	20000238 	.word	0x20000238

0804d198 <_lseek_r>:
 804d198:	b538      	push	{r3, r4, r5, lr}
 804d19a:	4d07      	ldr	r5, [pc, #28]	; (804d1b8 <_lseek_r+0x20>)
 804d19c:	4604      	mov	r4, r0
 804d19e:	4608      	mov	r0, r1
 804d1a0:	4611      	mov	r1, r2
 804d1a2:	2200      	movs	r2, #0
 804d1a4:	602a      	str	r2, [r5, #0]
 804d1a6:	461a      	mov	r2, r3
 804d1a8:	f7f7 fc7c 	bl	8044aa4 <_lseek>
 804d1ac:	1c43      	adds	r3, r0, #1
 804d1ae:	d102      	bne.n	804d1b6 <_lseek_r+0x1e>
 804d1b0:	682b      	ldr	r3, [r5, #0]
 804d1b2:	b103      	cbz	r3, 804d1b6 <_lseek_r+0x1e>
 804d1b4:	6023      	str	r3, [r4, #0]
 804d1b6:	bd38      	pop	{r3, r4, r5, pc}
 804d1b8:	20000238 	.word	0x20000238

0804d1bc <_read_r>:
 804d1bc:	b538      	push	{r3, r4, r5, lr}
 804d1be:	4d07      	ldr	r5, [pc, #28]	; (804d1dc <_read_r+0x20>)
 804d1c0:	4604      	mov	r4, r0
 804d1c2:	4608      	mov	r0, r1
 804d1c4:	4611      	mov	r1, r2
 804d1c6:	2200      	movs	r2, #0
 804d1c8:	602a      	str	r2, [r5, #0]
 804d1ca:	461a      	mov	r2, r3
 804d1cc:	f7f7 fc0a 	bl	80449e4 <_read>
 804d1d0:	1c43      	adds	r3, r0, #1
 804d1d2:	d102      	bne.n	804d1da <_read_r+0x1e>
 804d1d4:	682b      	ldr	r3, [r5, #0]
 804d1d6:	b103      	cbz	r3, 804d1da <_read_r+0x1e>
 804d1d8:	6023      	str	r3, [r4, #0]
 804d1da:	bd38      	pop	{r3, r4, r5, pc}
 804d1dc:	20000238 	.word	0x20000238

0804d1e0 <pow>:
 804d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d1e2:	ed2d 8b02 	vpush	{d8}
 804d1e6:	eeb0 8a40 	vmov.f32	s16, s0
 804d1ea:	eef0 8a60 	vmov.f32	s17, s1
 804d1ee:	ec55 4b11 	vmov	r4, r5, d1
 804d1f2:	f000 f865 	bl	804d2c0 <__ieee754_pow>
 804d1f6:	4622      	mov	r2, r4
 804d1f8:	462b      	mov	r3, r5
 804d1fa:	4620      	mov	r0, r4
 804d1fc:	4629      	mov	r1, r5
 804d1fe:	ec57 6b10 	vmov	r6, r7, d0
 804d202:	f7f3 fc93 	bl	8040b2c <__aeabi_dcmpun>
 804d206:	2800      	cmp	r0, #0
 804d208:	d13b      	bne.n	804d282 <pow+0xa2>
 804d20a:	ec51 0b18 	vmov	r0, r1, d8
 804d20e:	2200      	movs	r2, #0
 804d210:	2300      	movs	r3, #0
 804d212:	f7f3 fc59 	bl	8040ac8 <__aeabi_dcmpeq>
 804d216:	b1b8      	cbz	r0, 804d248 <pow+0x68>
 804d218:	2200      	movs	r2, #0
 804d21a:	2300      	movs	r3, #0
 804d21c:	4620      	mov	r0, r4
 804d21e:	4629      	mov	r1, r5
 804d220:	f7f3 fc52 	bl	8040ac8 <__aeabi_dcmpeq>
 804d224:	2800      	cmp	r0, #0
 804d226:	d146      	bne.n	804d2b6 <pow+0xd6>
 804d228:	ec45 4b10 	vmov	d0, r4, r5
 804d22c:	f000 fe61 	bl	804def2 <finite>
 804d230:	b338      	cbz	r0, 804d282 <pow+0xa2>
 804d232:	2200      	movs	r2, #0
 804d234:	2300      	movs	r3, #0
 804d236:	4620      	mov	r0, r4
 804d238:	4629      	mov	r1, r5
 804d23a:	f7f3 fc4f 	bl	8040adc <__aeabi_dcmplt>
 804d23e:	b300      	cbz	r0, 804d282 <pow+0xa2>
 804d240:	f7fb fae8 	bl	8048814 <__errno>
 804d244:	2322      	movs	r3, #34	; 0x22
 804d246:	e01b      	b.n	804d280 <pow+0xa0>
 804d248:	ec47 6b10 	vmov	d0, r6, r7
 804d24c:	f000 fe51 	bl	804def2 <finite>
 804d250:	b9e0      	cbnz	r0, 804d28c <pow+0xac>
 804d252:	eeb0 0a48 	vmov.f32	s0, s16
 804d256:	eef0 0a68 	vmov.f32	s1, s17
 804d25a:	f000 fe4a 	bl	804def2 <finite>
 804d25e:	b1a8      	cbz	r0, 804d28c <pow+0xac>
 804d260:	ec45 4b10 	vmov	d0, r4, r5
 804d264:	f000 fe45 	bl	804def2 <finite>
 804d268:	b180      	cbz	r0, 804d28c <pow+0xac>
 804d26a:	4632      	mov	r2, r6
 804d26c:	463b      	mov	r3, r7
 804d26e:	4630      	mov	r0, r6
 804d270:	4639      	mov	r1, r7
 804d272:	f7f3 fc5b 	bl	8040b2c <__aeabi_dcmpun>
 804d276:	2800      	cmp	r0, #0
 804d278:	d0e2      	beq.n	804d240 <pow+0x60>
 804d27a:	f7fb facb 	bl	8048814 <__errno>
 804d27e:	2321      	movs	r3, #33	; 0x21
 804d280:	6003      	str	r3, [r0, #0]
 804d282:	ecbd 8b02 	vpop	{d8}
 804d286:	ec47 6b10 	vmov	d0, r6, r7
 804d28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d28c:	2200      	movs	r2, #0
 804d28e:	2300      	movs	r3, #0
 804d290:	4630      	mov	r0, r6
 804d292:	4639      	mov	r1, r7
 804d294:	f7f3 fc18 	bl	8040ac8 <__aeabi_dcmpeq>
 804d298:	2800      	cmp	r0, #0
 804d29a:	d0f2      	beq.n	804d282 <pow+0xa2>
 804d29c:	eeb0 0a48 	vmov.f32	s0, s16
 804d2a0:	eef0 0a68 	vmov.f32	s1, s17
 804d2a4:	f000 fe25 	bl	804def2 <finite>
 804d2a8:	2800      	cmp	r0, #0
 804d2aa:	d0ea      	beq.n	804d282 <pow+0xa2>
 804d2ac:	ec45 4b10 	vmov	d0, r4, r5
 804d2b0:	f000 fe1f 	bl	804def2 <finite>
 804d2b4:	e7c3      	b.n	804d23e <pow+0x5e>
 804d2b6:	4f01      	ldr	r7, [pc, #4]	; (804d2bc <pow+0xdc>)
 804d2b8:	2600      	movs	r6, #0
 804d2ba:	e7e2      	b.n	804d282 <pow+0xa2>
 804d2bc:	3ff00000 	.word	0x3ff00000

0804d2c0 <__ieee754_pow>:
 804d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d2c4:	ed2d 8b06 	vpush	{d8-d10}
 804d2c8:	b089      	sub	sp, #36	; 0x24
 804d2ca:	ed8d 1b00 	vstr	d1, [sp]
 804d2ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 804d2d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 804d2d6:	ea58 0102 	orrs.w	r1, r8, r2
 804d2da:	ec57 6b10 	vmov	r6, r7, d0
 804d2de:	d115      	bne.n	804d30c <__ieee754_pow+0x4c>
 804d2e0:	19b3      	adds	r3, r6, r6
 804d2e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 804d2e6:	4152      	adcs	r2, r2
 804d2e8:	4299      	cmp	r1, r3
 804d2ea:	4b89      	ldr	r3, [pc, #548]	; (804d510 <__ieee754_pow+0x250>)
 804d2ec:	4193      	sbcs	r3, r2
 804d2ee:	f080 84d2 	bcs.w	804dc96 <__ieee754_pow+0x9d6>
 804d2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 804d2f6:	4630      	mov	r0, r6
 804d2f8:	4639      	mov	r1, r7
 804d2fa:	f7f2 ffc7 	bl	804028c <__adddf3>
 804d2fe:	ec41 0b10 	vmov	d0, r0, r1
 804d302:	b009      	add	sp, #36	; 0x24
 804d304:	ecbd 8b06 	vpop	{d8-d10}
 804d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d30c:	4b81      	ldr	r3, [pc, #516]	; (804d514 <__ieee754_pow+0x254>)
 804d30e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 804d312:	429c      	cmp	r4, r3
 804d314:	ee10 aa10 	vmov	sl, s0
 804d318:	463d      	mov	r5, r7
 804d31a:	dc06      	bgt.n	804d32a <__ieee754_pow+0x6a>
 804d31c:	d101      	bne.n	804d322 <__ieee754_pow+0x62>
 804d31e:	2e00      	cmp	r6, #0
 804d320:	d1e7      	bne.n	804d2f2 <__ieee754_pow+0x32>
 804d322:	4598      	cmp	r8, r3
 804d324:	dc01      	bgt.n	804d32a <__ieee754_pow+0x6a>
 804d326:	d10f      	bne.n	804d348 <__ieee754_pow+0x88>
 804d328:	b172      	cbz	r2, 804d348 <__ieee754_pow+0x88>
 804d32a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 804d32e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 804d332:	ea55 050a 	orrs.w	r5, r5, sl
 804d336:	d1dc      	bne.n	804d2f2 <__ieee754_pow+0x32>
 804d338:	e9dd 3200 	ldrd	r3, r2, [sp]
 804d33c:	18db      	adds	r3, r3, r3
 804d33e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 804d342:	4152      	adcs	r2, r2
 804d344:	429d      	cmp	r5, r3
 804d346:	e7d0      	b.n	804d2ea <__ieee754_pow+0x2a>
 804d348:	2d00      	cmp	r5, #0
 804d34a:	da3b      	bge.n	804d3c4 <__ieee754_pow+0x104>
 804d34c:	4b72      	ldr	r3, [pc, #456]	; (804d518 <__ieee754_pow+0x258>)
 804d34e:	4598      	cmp	r8, r3
 804d350:	dc51      	bgt.n	804d3f6 <__ieee754_pow+0x136>
 804d352:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 804d356:	4598      	cmp	r8, r3
 804d358:	f340 84ac 	ble.w	804dcb4 <__ieee754_pow+0x9f4>
 804d35c:	ea4f 5328 	mov.w	r3, r8, asr #20
 804d360:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804d364:	2b14      	cmp	r3, #20
 804d366:	dd0f      	ble.n	804d388 <__ieee754_pow+0xc8>
 804d368:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 804d36c:	fa22 f103 	lsr.w	r1, r2, r3
 804d370:	fa01 f303 	lsl.w	r3, r1, r3
 804d374:	4293      	cmp	r3, r2
 804d376:	f040 849d 	bne.w	804dcb4 <__ieee754_pow+0x9f4>
 804d37a:	f001 0101 	and.w	r1, r1, #1
 804d37e:	f1c1 0302 	rsb	r3, r1, #2
 804d382:	9304      	str	r3, [sp, #16]
 804d384:	b182      	cbz	r2, 804d3a8 <__ieee754_pow+0xe8>
 804d386:	e05f      	b.n	804d448 <__ieee754_pow+0x188>
 804d388:	2a00      	cmp	r2, #0
 804d38a:	d15b      	bne.n	804d444 <__ieee754_pow+0x184>
 804d38c:	f1c3 0314 	rsb	r3, r3, #20
 804d390:	fa48 f103 	asr.w	r1, r8, r3
 804d394:	fa01 f303 	lsl.w	r3, r1, r3
 804d398:	4543      	cmp	r3, r8
 804d39a:	f040 8488 	bne.w	804dcae <__ieee754_pow+0x9ee>
 804d39e:	f001 0101 	and.w	r1, r1, #1
 804d3a2:	f1c1 0302 	rsb	r3, r1, #2
 804d3a6:	9304      	str	r3, [sp, #16]
 804d3a8:	4b5c      	ldr	r3, [pc, #368]	; (804d51c <__ieee754_pow+0x25c>)
 804d3aa:	4598      	cmp	r8, r3
 804d3ac:	d132      	bne.n	804d414 <__ieee754_pow+0x154>
 804d3ae:	f1b9 0f00 	cmp.w	r9, #0
 804d3b2:	f280 8478 	bge.w	804dca6 <__ieee754_pow+0x9e6>
 804d3b6:	4959      	ldr	r1, [pc, #356]	; (804d51c <__ieee754_pow+0x25c>)
 804d3b8:	4632      	mov	r2, r6
 804d3ba:	463b      	mov	r3, r7
 804d3bc:	2000      	movs	r0, #0
 804d3be:	f7f3 fa45 	bl	804084c <__aeabi_ddiv>
 804d3c2:	e79c      	b.n	804d2fe <__ieee754_pow+0x3e>
 804d3c4:	2300      	movs	r3, #0
 804d3c6:	9304      	str	r3, [sp, #16]
 804d3c8:	2a00      	cmp	r2, #0
 804d3ca:	d13d      	bne.n	804d448 <__ieee754_pow+0x188>
 804d3cc:	4b51      	ldr	r3, [pc, #324]	; (804d514 <__ieee754_pow+0x254>)
 804d3ce:	4598      	cmp	r8, r3
 804d3d0:	d1ea      	bne.n	804d3a8 <__ieee754_pow+0xe8>
 804d3d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 804d3d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 804d3da:	ea53 030a 	orrs.w	r3, r3, sl
 804d3de:	f000 845a 	beq.w	804dc96 <__ieee754_pow+0x9d6>
 804d3e2:	4b4f      	ldr	r3, [pc, #316]	; (804d520 <__ieee754_pow+0x260>)
 804d3e4:	429c      	cmp	r4, r3
 804d3e6:	dd08      	ble.n	804d3fa <__ieee754_pow+0x13a>
 804d3e8:	f1b9 0f00 	cmp.w	r9, #0
 804d3ec:	f2c0 8457 	blt.w	804dc9e <__ieee754_pow+0x9de>
 804d3f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d3f4:	e783      	b.n	804d2fe <__ieee754_pow+0x3e>
 804d3f6:	2302      	movs	r3, #2
 804d3f8:	e7e5      	b.n	804d3c6 <__ieee754_pow+0x106>
 804d3fa:	f1b9 0f00 	cmp.w	r9, #0
 804d3fe:	f04f 0000 	mov.w	r0, #0
 804d402:	f04f 0100 	mov.w	r1, #0
 804d406:	f6bf af7a 	bge.w	804d2fe <__ieee754_pow+0x3e>
 804d40a:	e9dd 0300 	ldrd	r0, r3, [sp]
 804d40e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 804d412:	e774      	b.n	804d2fe <__ieee754_pow+0x3e>
 804d414:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 804d418:	d106      	bne.n	804d428 <__ieee754_pow+0x168>
 804d41a:	4632      	mov	r2, r6
 804d41c:	463b      	mov	r3, r7
 804d41e:	4630      	mov	r0, r6
 804d420:	4639      	mov	r1, r7
 804d422:	f7f3 f8e9 	bl	80405f8 <__aeabi_dmul>
 804d426:	e76a      	b.n	804d2fe <__ieee754_pow+0x3e>
 804d428:	4b3e      	ldr	r3, [pc, #248]	; (804d524 <__ieee754_pow+0x264>)
 804d42a:	4599      	cmp	r9, r3
 804d42c:	d10c      	bne.n	804d448 <__ieee754_pow+0x188>
 804d42e:	2d00      	cmp	r5, #0
 804d430:	db0a      	blt.n	804d448 <__ieee754_pow+0x188>
 804d432:	ec47 6b10 	vmov	d0, r6, r7
 804d436:	b009      	add	sp, #36	; 0x24
 804d438:	ecbd 8b06 	vpop	{d8-d10}
 804d43c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d440:	f000 bc6c 	b.w	804dd1c <__ieee754_sqrt>
 804d444:	2300      	movs	r3, #0
 804d446:	9304      	str	r3, [sp, #16]
 804d448:	ec47 6b10 	vmov	d0, r6, r7
 804d44c:	f000 fd48 	bl	804dee0 <fabs>
 804d450:	ec51 0b10 	vmov	r0, r1, d0
 804d454:	f1ba 0f00 	cmp.w	sl, #0
 804d458:	d129      	bne.n	804d4ae <__ieee754_pow+0x1ee>
 804d45a:	b124      	cbz	r4, 804d466 <__ieee754_pow+0x1a6>
 804d45c:	4b2f      	ldr	r3, [pc, #188]	; (804d51c <__ieee754_pow+0x25c>)
 804d45e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 804d462:	429a      	cmp	r2, r3
 804d464:	d123      	bne.n	804d4ae <__ieee754_pow+0x1ee>
 804d466:	f1b9 0f00 	cmp.w	r9, #0
 804d46a:	da05      	bge.n	804d478 <__ieee754_pow+0x1b8>
 804d46c:	4602      	mov	r2, r0
 804d46e:	460b      	mov	r3, r1
 804d470:	2000      	movs	r0, #0
 804d472:	492a      	ldr	r1, [pc, #168]	; (804d51c <__ieee754_pow+0x25c>)
 804d474:	f7f3 f9ea 	bl	804084c <__aeabi_ddiv>
 804d478:	2d00      	cmp	r5, #0
 804d47a:	f6bf af40 	bge.w	804d2fe <__ieee754_pow+0x3e>
 804d47e:	9b04      	ldr	r3, [sp, #16]
 804d480:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 804d484:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 804d488:	4323      	orrs	r3, r4
 804d48a:	d108      	bne.n	804d49e <__ieee754_pow+0x1de>
 804d48c:	4602      	mov	r2, r0
 804d48e:	460b      	mov	r3, r1
 804d490:	4610      	mov	r0, r2
 804d492:	4619      	mov	r1, r3
 804d494:	f7f2 fef8 	bl	8040288 <__aeabi_dsub>
 804d498:	4602      	mov	r2, r0
 804d49a:	460b      	mov	r3, r1
 804d49c:	e78f      	b.n	804d3be <__ieee754_pow+0xfe>
 804d49e:	9b04      	ldr	r3, [sp, #16]
 804d4a0:	2b01      	cmp	r3, #1
 804d4a2:	f47f af2c 	bne.w	804d2fe <__ieee754_pow+0x3e>
 804d4a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804d4aa:	4619      	mov	r1, r3
 804d4ac:	e727      	b.n	804d2fe <__ieee754_pow+0x3e>
 804d4ae:	0feb      	lsrs	r3, r5, #31
 804d4b0:	3b01      	subs	r3, #1
 804d4b2:	9306      	str	r3, [sp, #24]
 804d4b4:	9a06      	ldr	r2, [sp, #24]
 804d4b6:	9b04      	ldr	r3, [sp, #16]
 804d4b8:	4313      	orrs	r3, r2
 804d4ba:	d102      	bne.n	804d4c2 <__ieee754_pow+0x202>
 804d4bc:	4632      	mov	r2, r6
 804d4be:	463b      	mov	r3, r7
 804d4c0:	e7e6      	b.n	804d490 <__ieee754_pow+0x1d0>
 804d4c2:	4b19      	ldr	r3, [pc, #100]	; (804d528 <__ieee754_pow+0x268>)
 804d4c4:	4598      	cmp	r8, r3
 804d4c6:	f340 80fb 	ble.w	804d6c0 <__ieee754_pow+0x400>
 804d4ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 804d4ce:	4598      	cmp	r8, r3
 804d4d0:	4b13      	ldr	r3, [pc, #76]	; (804d520 <__ieee754_pow+0x260>)
 804d4d2:	dd0c      	ble.n	804d4ee <__ieee754_pow+0x22e>
 804d4d4:	429c      	cmp	r4, r3
 804d4d6:	dc0f      	bgt.n	804d4f8 <__ieee754_pow+0x238>
 804d4d8:	f1b9 0f00 	cmp.w	r9, #0
 804d4dc:	da0f      	bge.n	804d4fe <__ieee754_pow+0x23e>
 804d4de:	2000      	movs	r0, #0
 804d4e0:	b009      	add	sp, #36	; 0x24
 804d4e2:	ecbd 8b06 	vpop	{d8-d10}
 804d4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d4ea:	f000 bcf0 	b.w	804dece <__math_oflow>
 804d4ee:	429c      	cmp	r4, r3
 804d4f0:	dbf2      	blt.n	804d4d8 <__ieee754_pow+0x218>
 804d4f2:	4b0a      	ldr	r3, [pc, #40]	; (804d51c <__ieee754_pow+0x25c>)
 804d4f4:	429c      	cmp	r4, r3
 804d4f6:	dd19      	ble.n	804d52c <__ieee754_pow+0x26c>
 804d4f8:	f1b9 0f00 	cmp.w	r9, #0
 804d4fc:	dcef      	bgt.n	804d4de <__ieee754_pow+0x21e>
 804d4fe:	2000      	movs	r0, #0
 804d500:	b009      	add	sp, #36	; 0x24
 804d502:	ecbd 8b06 	vpop	{d8-d10}
 804d506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d50a:	f000 bcd7 	b.w	804debc <__math_uflow>
 804d50e:	bf00      	nop
 804d510:	fff00000 	.word	0xfff00000
 804d514:	7ff00000 	.word	0x7ff00000
 804d518:	433fffff 	.word	0x433fffff
 804d51c:	3ff00000 	.word	0x3ff00000
 804d520:	3fefffff 	.word	0x3fefffff
 804d524:	3fe00000 	.word	0x3fe00000
 804d528:	41e00000 	.word	0x41e00000
 804d52c:	4b60      	ldr	r3, [pc, #384]	; (804d6b0 <__ieee754_pow+0x3f0>)
 804d52e:	2200      	movs	r2, #0
 804d530:	f7f2 feaa 	bl	8040288 <__aeabi_dsub>
 804d534:	a354      	add	r3, pc, #336	; (adr r3, 804d688 <__ieee754_pow+0x3c8>)
 804d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d53a:	4604      	mov	r4, r0
 804d53c:	460d      	mov	r5, r1
 804d53e:	f7f3 f85b 	bl	80405f8 <__aeabi_dmul>
 804d542:	a353      	add	r3, pc, #332	; (adr r3, 804d690 <__ieee754_pow+0x3d0>)
 804d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d548:	4606      	mov	r6, r0
 804d54a:	460f      	mov	r7, r1
 804d54c:	4620      	mov	r0, r4
 804d54e:	4629      	mov	r1, r5
 804d550:	f7f3 f852 	bl	80405f8 <__aeabi_dmul>
 804d554:	4b57      	ldr	r3, [pc, #348]	; (804d6b4 <__ieee754_pow+0x3f4>)
 804d556:	4682      	mov	sl, r0
 804d558:	468b      	mov	fp, r1
 804d55a:	2200      	movs	r2, #0
 804d55c:	4620      	mov	r0, r4
 804d55e:	4629      	mov	r1, r5
 804d560:	f7f3 f84a 	bl	80405f8 <__aeabi_dmul>
 804d564:	4602      	mov	r2, r0
 804d566:	460b      	mov	r3, r1
 804d568:	a14b      	add	r1, pc, #300	; (adr r1, 804d698 <__ieee754_pow+0x3d8>)
 804d56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d56e:	f7f2 fe8b 	bl	8040288 <__aeabi_dsub>
 804d572:	4622      	mov	r2, r4
 804d574:	462b      	mov	r3, r5
 804d576:	f7f3 f83f 	bl	80405f8 <__aeabi_dmul>
 804d57a:	4602      	mov	r2, r0
 804d57c:	460b      	mov	r3, r1
 804d57e:	2000      	movs	r0, #0
 804d580:	494d      	ldr	r1, [pc, #308]	; (804d6b8 <__ieee754_pow+0x3f8>)
 804d582:	f7f2 fe81 	bl	8040288 <__aeabi_dsub>
 804d586:	4622      	mov	r2, r4
 804d588:	4680      	mov	r8, r0
 804d58a:	4689      	mov	r9, r1
 804d58c:	462b      	mov	r3, r5
 804d58e:	4620      	mov	r0, r4
 804d590:	4629      	mov	r1, r5
 804d592:	f7f3 f831 	bl	80405f8 <__aeabi_dmul>
 804d596:	4602      	mov	r2, r0
 804d598:	460b      	mov	r3, r1
 804d59a:	4640      	mov	r0, r8
 804d59c:	4649      	mov	r1, r9
 804d59e:	f7f3 f82b 	bl	80405f8 <__aeabi_dmul>
 804d5a2:	a33f      	add	r3, pc, #252	; (adr r3, 804d6a0 <__ieee754_pow+0x3e0>)
 804d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d5a8:	f7f3 f826 	bl	80405f8 <__aeabi_dmul>
 804d5ac:	4602      	mov	r2, r0
 804d5ae:	460b      	mov	r3, r1
 804d5b0:	4650      	mov	r0, sl
 804d5b2:	4659      	mov	r1, fp
 804d5b4:	f7f2 fe68 	bl	8040288 <__aeabi_dsub>
 804d5b8:	4602      	mov	r2, r0
 804d5ba:	460b      	mov	r3, r1
 804d5bc:	4680      	mov	r8, r0
 804d5be:	4689      	mov	r9, r1
 804d5c0:	4630      	mov	r0, r6
 804d5c2:	4639      	mov	r1, r7
 804d5c4:	f7f2 fe62 	bl	804028c <__adddf3>
 804d5c8:	2000      	movs	r0, #0
 804d5ca:	4632      	mov	r2, r6
 804d5cc:	463b      	mov	r3, r7
 804d5ce:	4604      	mov	r4, r0
 804d5d0:	460d      	mov	r5, r1
 804d5d2:	f7f2 fe59 	bl	8040288 <__aeabi_dsub>
 804d5d6:	4602      	mov	r2, r0
 804d5d8:	460b      	mov	r3, r1
 804d5da:	4640      	mov	r0, r8
 804d5dc:	4649      	mov	r1, r9
 804d5de:	f7f2 fe53 	bl	8040288 <__aeabi_dsub>
 804d5e2:	9b04      	ldr	r3, [sp, #16]
 804d5e4:	9a06      	ldr	r2, [sp, #24]
 804d5e6:	3b01      	subs	r3, #1
 804d5e8:	4313      	orrs	r3, r2
 804d5ea:	4682      	mov	sl, r0
 804d5ec:	468b      	mov	fp, r1
 804d5ee:	f040 81e7 	bne.w	804d9c0 <__ieee754_pow+0x700>
 804d5f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 804d6a8 <__ieee754_pow+0x3e8>
 804d5f6:	eeb0 8a47 	vmov.f32	s16, s14
 804d5fa:	eef0 8a67 	vmov.f32	s17, s15
 804d5fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 804d602:	2600      	movs	r6, #0
 804d604:	4632      	mov	r2, r6
 804d606:	463b      	mov	r3, r7
 804d608:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d60c:	f7f2 fe3c 	bl	8040288 <__aeabi_dsub>
 804d610:	4622      	mov	r2, r4
 804d612:	462b      	mov	r3, r5
 804d614:	f7f2 fff0 	bl	80405f8 <__aeabi_dmul>
 804d618:	e9dd 2300 	ldrd	r2, r3, [sp]
 804d61c:	4680      	mov	r8, r0
 804d61e:	4689      	mov	r9, r1
 804d620:	4650      	mov	r0, sl
 804d622:	4659      	mov	r1, fp
 804d624:	f7f2 ffe8 	bl	80405f8 <__aeabi_dmul>
 804d628:	4602      	mov	r2, r0
 804d62a:	460b      	mov	r3, r1
 804d62c:	4640      	mov	r0, r8
 804d62e:	4649      	mov	r1, r9
 804d630:	f7f2 fe2c 	bl	804028c <__adddf3>
 804d634:	4632      	mov	r2, r6
 804d636:	463b      	mov	r3, r7
 804d638:	4680      	mov	r8, r0
 804d63a:	4689      	mov	r9, r1
 804d63c:	4620      	mov	r0, r4
 804d63e:	4629      	mov	r1, r5
 804d640:	f7f2 ffda 	bl	80405f8 <__aeabi_dmul>
 804d644:	460b      	mov	r3, r1
 804d646:	4604      	mov	r4, r0
 804d648:	460d      	mov	r5, r1
 804d64a:	4602      	mov	r2, r0
 804d64c:	4649      	mov	r1, r9
 804d64e:	4640      	mov	r0, r8
 804d650:	f7f2 fe1c 	bl	804028c <__adddf3>
 804d654:	4b19      	ldr	r3, [pc, #100]	; (804d6bc <__ieee754_pow+0x3fc>)
 804d656:	4299      	cmp	r1, r3
 804d658:	ec45 4b19 	vmov	d9, r4, r5
 804d65c:	4606      	mov	r6, r0
 804d65e:	460f      	mov	r7, r1
 804d660:	468b      	mov	fp, r1
 804d662:	f340 82f1 	ble.w	804dc48 <__ieee754_pow+0x988>
 804d666:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 804d66a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 804d66e:	4303      	orrs	r3, r0
 804d670:	f000 81e4 	beq.w	804da3c <__ieee754_pow+0x77c>
 804d674:	ec51 0b18 	vmov	r0, r1, d8
 804d678:	2200      	movs	r2, #0
 804d67a:	2300      	movs	r3, #0
 804d67c:	f7f3 fa2e 	bl	8040adc <__aeabi_dcmplt>
 804d680:	3800      	subs	r0, #0
 804d682:	bf18      	it	ne
 804d684:	2001      	movne	r0, #1
 804d686:	e72b      	b.n	804d4e0 <__ieee754_pow+0x220>
 804d688:	60000000 	.word	0x60000000
 804d68c:	3ff71547 	.word	0x3ff71547
 804d690:	f85ddf44 	.word	0xf85ddf44
 804d694:	3e54ae0b 	.word	0x3e54ae0b
 804d698:	55555555 	.word	0x55555555
 804d69c:	3fd55555 	.word	0x3fd55555
 804d6a0:	652b82fe 	.word	0x652b82fe
 804d6a4:	3ff71547 	.word	0x3ff71547
 804d6a8:	00000000 	.word	0x00000000
 804d6ac:	bff00000 	.word	0xbff00000
 804d6b0:	3ff00000 	.word	0x3ff00000
 804d6b4:	3fd00000 	.word	0x3fd00000
 804d6b8:	3fe00000 	.word	0x3fe00000
 804d6bc:	408fffff 	.word	0x408fffff
 804d6c0:	4bd5      	ldr	r3, [pc, #852]	; (804da18 <__ieee754_pow+0x758>)
 804d6c2:	402b      	ands	r3, r5
 804d6c4:	2200      	movs	r2, #0
 804d6c6:	b92b      	cbnz	r3, 804d6d4 <__ieee754_pow+0x414>
 804d6c8:	4bd4      	ldr	r3, [pc, #848]	; (804da1c <__ieee754_pow+0x75c>)
 804d6ca:	f7f2 ff95 	bl	80405f8 <__aeabi_dmul>
 804d6ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 804d6d2:	460c      	mov	r4, r1
 804d6d4:	1523      	asrs	r3, r4, #20
 804d6d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804d6da:	4413      	add	r3, r2
 804d6dc:	9305      	str	r3, [sp, #20]
 804d6de:	4bd0      	ldr	r3, [pc, #832]	; (804da20 <__ieee754_pow+0x760>)
 804d6e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 804d6e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 804d6e8:	429c      	cmp	r4, r3
 804d6ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 804d6ee:	dd08      	ble.n	804d702 <__ieee754_pow+0x442>
 804d6f0:	4bcc      	ldr	r3, [pc, #816]	; (804da24 <__ieee754_pow+0x764>)
 804d6f2:	429c      	cmp	r4, r3
 804d6f4:	f340 8162 	ble.w	804d9bc <__ieee754_pow+0x6fc>
 804d6f8:	9b05      	ldr	r3, [sp, #20]
 804d6fa:	3301      	adds	r3, #1
 804d6fc:	9305      	str	r3, [sp, #20]
 804d6fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 804d702:	2400      	movs	r4, #0
 804d704:	00e3      	lsls	r3, r4, #3
 804d706:	9307      	str	r3, [sp, #28]
 804d708:	4bc7      	ldr	r3, [pc, #796]	; (804da28 <__ieee754_pow+0x768>)
 804d70a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 804d70e:	ed93 7b00 	vldr	d7, [r3]
 804d712:	4629      	mov	r1, r5
 804d714:	ec53 2b17 	vmov	r2, r3, d7
 804d718:	eeb0 9a47 	vmov.f32	s18, s14
 804d71c:	eef0 9a67 	vmov.f32	s19, s15
 804d720:	4682      	mov	sl, r0
 804d722:	f7f2 fdb1 	bl	8040288 <__aeabi_dsub>
 804d726:	4652      	mov	r2, sl
 804d728:	4606      	mov	r6, r0
 804d72a:	460f      	mov	r7, r1
 804d72c:	462b      	mov	r3, r5
 804d72e:	ec51 0b19 	vmov	r0, r1, d9
 804d732:	f7f2 fdab 	bl	804028c <__adddf3>
 804d736:	4602      	mov	r2, r0
 804d738:	460b      	mov	r3, r1
 804d73a:	2000      	movs	r0, #0
 804d73c:	49bb      	ldr	r1, [pc, #748]	; (804da2c <__ieee754_pow+0x76c>)
 804d73e:	f7f3 f885 	bl	804084c <__aeabi_ddiv>
 804d742:	ec41 0b1a 	vmov	d10, r0, r1
 804d746:	4602      	mov	r2, r0
 804d748:	460b      	mov	r3, r1
 804d74a:	4630      	mov	r0, r6
 804d74c:	4639      	mov	r1, r7
 804d74e:	f7f2 ff53 	bl	80405f8 <__aeabi_dmul>
 804d752:	2300      	movs	r3, #0
 804d754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804d758:	9302      	str	r3, [sp, #8]
 804d75a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 804d75e:	46ab      	mov	fp, r5
 804d760:	106d      	asrs	r5, r5, #1
 804d762:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 804d766:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 804d76a:	ec41 0b18 	vmov	d8, r0, r1
 804d76e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 804d772:	2200      	movs	r2, #0
 804d774:	4640      	mov	r0, r8
 804d776:	4649      	mov	r1, r9
 804d778:	4614      	mov	r4, r2
 804d77a:	461d      	mov	r5, r3
 804d77c:	f7f2 ff3c 	bl	80405f8 <__aeabi_dmul>
 804d780:	4602      	mov	r2, r0
 804d782:	460b      	mov	r3, r1
 804d784:	4630      	mov	r0, r6
 804d786:	4639      	mov	r1, r7
 804d788:	f7f2 fd7e 	bl	8040288 <__aeabi_dsub>
 804d78c:	ec53 2b19 	vmov	r2, r3, d9
 804d790:	4606      	mov	r6, r0
 804d792:	460f      	mov	r7, r1
 804d794:	4620      	mov	r0, r4
 804d796:	4629      	mov	r1, r5
 804d798:	f7f2 fd76 	bl	8040288 <__aeabi_dsub>
 804d79c:	4602      	mov	r2, r0
 804d79e:	460b      	mov	r3, r1
 804d7a0:	4650      	mov	r0, sl
 804d7a2:	4659      	mov	r1, fp
 804d7a4:	f7f2 fd70 	bl	8040288 <__aeabi_dsub>
 804d7a8:	4642      	mov	r2, r8
 804d7aa:	464b      	mov	r3, r9
 804d7ac:	f7f2 ff24 	bl	80405f8 <__aeabi_dmul>
 804d7b0:	4602      	mov	r2, r0
 804d7b2:	460b      	mov	r3, r1
 804d7b4:	4630      	mov	r0, r6
 804d7b6:	4639      	mov	r1, r7
 804d7b8:	f7f2 fd66 	bl	8040288 <__aeabi_dsub>
 804d7bc:	ec53 2b1a 	vmov	r2, r3, d10
 804d7c0:	f7f2 ff1a 	bl	80405f8 <__aeabi_dmul>
 804d7c4:	ec53 2b18 	vmov	r2, r3, d8
 804d7c8:	ec41 0b19 	vmov	d9, r0, r1
 804d7cc:	ec51 0b18 	vmov	r0, r1, d8
 804d7d0:	f7f2 ff12 	bl	80405f8 <__aeabi_dmul>
 804d7d4:	a37c      	add	r3, pc, #496	; (adr r3, 804d9c8 <__ieee754_pow+0x708>)
 804d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d7da:	4604      	mov	r4, r0
 804d7dc:	460d      	mov	r5, r1
 804d7de:	f7f2 ff0b 	bl	80405f8 <__aeabi_dmul>
 804d7e2:	a37b      	add	r3, pc, #492	; (adr r3, 804d9d0 <__ieee754_pow+0x710>)
 804d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d7e8:	f7f2 fd50 	bl	804028c <__adddf3>
 804d7ec:	4622      	mov	r2, r4
 804d7ee:	462b      	mov	r3, r5
 804d7f0:	f7f2 ff02 	bl	80405f8 <__aeabi_dmul>
 804d7f4:	a378      	add	r3, pc, #480	; (adr r3, 804d9d8 <__ieee754_pow+0x718>)
 804d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d7fa:	f7f2 fd47 	bl	804028c <__adddf3>
 804d7fe:	4622      	mov	r2, r4
 804d800:	462b      	mov	r3, r5
 804d802:	f7f2 fef9 	bl	80405f8 <__aeabi_dmul>
 804d806:	a376      	add	r3, pc, #472	; (adr r3, 804d9e0 <__ieee754_pow+0x720>)
 804d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d80c:	f7f2 fd3e 	bl	804028c <__adddf3>
 804d810:	4622      	mov	r2, r4
 804d812:	462b      	mov	r3, r5
 804d814:	f7f2 fef0 	bl	80405f8 <__aeabi_dmul>
 804d818:	a373      	add	r3, pc, #460	; (adr r3, 804d9e8 <__ieee754_pow+0x728>)
 804d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d81e:	f7f2 fd35 	bl	804028c <__adddf3>
 804d822:	4622      	mov	r2, r4
 804d824:	462b      	mov	r3, r5
 804d826:	f7f2 fee7 	bl	80405f8 <__aeabi_dmul>
 804d82a:	a371      	add	r3, pc, #452	; (adr r3, 804d9f0 <__ieee754_pow+0x730>)
 804d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d830:	f7f2 fd2c 	bl	804028c <__adddf3>
 804d834:	4622      	mov	r2, r4
 804d836:	4606      	mov	r6, r0
 804d838:	460f      	mov	r7, r1
 804d83a:	462b      	mov	r3, r5
 804d83c:	4620      	mov	r0, r4
 804d83e:	4629      	mov	r1, r5
 804d840:	f7f2 feda 	bl	80405f8 <__aeabi_dmul>
 804d844:	4602      	mov	r2, r0
 804d846:	460b      	mov	r3, r1
 804d848:	4630      	mov	r0, r6
 804d84a:	4639      	mov	r1, r7
 804d84c:	f7f2 fed4 	bl	80405f8 <__aeabi_dmul>
 804d850:	4642      	mov	r2, r8
 804d852:	4604      	mov	r4, r0
 804d854:	460d      	mov	r5, r1
 804d856:	464b      	mov	r3, r9
 804d858:	ec51 0b18 	vmov	r0, r1, d8
 804d85c:	f7f2 fd16 	bl	804028c <__adddf3>
 804d860:	ec53 2b19 	vmov	r2, r3, d9
 804d864:	f7f2 fec8 	bl	80405f8 <__aeabi_dmul>
 804d868:	4622      	mov	r2, r4
 804d86a:	462b      	mov	r3, r5
 804d86c:	f7f2 fd0e 	bl	804028c <__adddf3>
 804d870:	4642      	mov	r2, r8
 804d872:	4682      	mov	sl, r0
 804d874:	468b      	mov	fp, r1
 804d876:	464b      	mov	r3, r9
 804d878:	4640      	mov	r0, r8
 804d87a:	4649      	mov	r1, r9
 804d87c:	f7f2 febc 	bl	80405f8 <__aeabi_dmul>
 804d880:	4b6b      	ldr	r3, [pc, #428]	; (804da30 <__ieee754_pow+0x770>)
 804d882:	2200      	movs	r2, #0
 804d884:	4606      	mov	r6, r0
 804d886:	460f      	mov	r7, r1
 804d888:	f7f2 fd00 	bl	804028c <__adddf3>
 804d88c:	4652      	mov	r2, sl
 804d88e:	465b      	mov	r3, fp
 804d890:	f7f2 fcfc 	bl	804028c <__adddf3>
 804d894:	2000      	movs	r0, #0
 804d896:	4604      	mov	r4, r0
 804d898:	460d      	mov	r5, r1
 804d89a:	4602      	mov	r2, r0
 804d89c:	460b      	mov	r3, r1
 804d89e:	4640      	mov	r0, r8
 804d8a0:	4649      	mov	r1, r9
 804d8a2:	f7f2 fea9 	bl	80405f8 <__aeabi_dmul>
 804d8a6:	4b62      	ldr	r3, [pc, #392]	; (804da30 <__ieee754_pow+0x770>)
 804d8a8:	4680      	mov	r8, r0
 804d8aa:	4689      	mov	r9, r1
 804d8ac:	2200      	movs	r2, #0
 804d8ae:	4620      	mov	r0, r4
 804d8b0:	4629      	mov	r1, r5
 804d8b2:	f7f2 fce9 	bl	8040288 <__aeabi_dsub>
 804d8b6:	4632      	mov	r2, r6
 804d8b8:	463b      	mov	r3, r7
 804d8ba:	f7f2 fce5 	bl	8040288 <__aeabi_dsub>
 804d8be:	4602      	mov	r2, r0
 804d8c0:	460b      	mov	r3, r1
 804d8c2:	4650      	mov	r0, sl
 804d8c4:	4659      	mov	r1, fp
 804d8c6:	f7f2 fcdf 	bl	8040288 <__aeabi_dsub>
 804d8ca:	ec53 2b18 	vmov	r2, r3, d8
 804d8ce:	f7f2 fe93 	bl	80405f8 <__aeabi_dmul>
 804d8d2:	4622      	mov	r2, r4
 804d8d4:	4606      	mov	r6, r0
 804d8d6:	460f      	mov	r7, r1
 804d8d8:	462b      	mov	r3, r5
 804d8da:	ec51 0b19 	vmov	r0, r1, d9
 804d8de:	f7f2 fe8b 	bl	80405f8 <__aeabi_dmul>
 804d8e2:	4602      	mov	r2, r0
 804d8e4:	460b      	mov	r3, r1
 804d8e6:	4630      	mov	r0, r6
 804d8e8:	4639      	mov	r1, r7
 804d8ea:	f7f2 fccf 	bl	804028c <__adddf3>
 804d8ee:	4606      	mov	r6, r0
 804d8f0:	460f      	mov	r7, r1
 804d8f2:	4602      	mov	r2, r0
 804d8f4:	460b      	mov	r3, r1
 804d8f6:	4640      	mov	r0, r8
 804d8f8:	4649      	mov	r1, r9
 804d8fa:	f7f2 fcc7 	bl	804028c <__adddf3>
 804d8fe:	a33e      	add	r3, pc, #248	; (adr r3, 804d9f8 <__ieee754_pow+0x738>)
 804d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d904:	2000      	movs	r0, #0
 804d906:	4604      	mov	r4, r0
 804d908:	460d      	mov	r5, r1
 804d90a:	f7f2 fe75 	bl	80405f8 <__aeabi_dmul>
 804d90e:	4642      	mov	r2, r8
 804d910:	ec41 0b18 	vmov	d8, r0, r1
 804d914:	464b      	mov	r3, r9
 804d916:	4620      	mov	r0, r4
 804d918:	4629      	mov	r1, r5
 804d91a:	f7f2 fcb5 	bl	8040288 <__aeabi_dsub>
 804d91e:	4602      	mov	r2, r0
 804d920:	460b      	mov	r3, r1
 804d922:	4630      	mov	r0, r6
 804d924:	4639      	mov	r1, r7
 804d926:	f7f2 fcaf 	bl	8040288 <__aeabi_dsub>
 804d92a:	a335      	add	r3, pc, #212	; (adr r3, 804da00 <__ieee754_pow+0x740>)
 804d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d930:	f7f2 fe62 	bl	80405f8 <__aeabi_dmul>
 804d934:	a334      	add	r3, pc, #208	; (adr r3, 804da08 <__ieee754_pow+0x748>)
 804d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d93a:	4606      	mov	r6, r0
 804d93c:	460f      	mov	r7, r1
 804d93e:	4620      	mov	r0, r4
 804d940:	4629      	mov	r1, r5
 804d942:	f7f2 fe59 	bl	80405f8 <__aeabi_dmul>
 804d946:	4602      	mov	r2, r0
 804d948:	460b      	mov	r3, r1
 804d94a:	4630      	mov	r0, r6
 804d94c:	4639      	mov	r1, r7
 804d94e:	f7f2 fc9d 	bl	804028c <__adddf3>
 804d952:	9a07      	ldr	r2, [sp, #28]
 804d954:	4b37      	ldr	r3, [pc, #220]	; (804da34 <__ieee754_pow+0x774>)
 804d956:	4413      	add	r3, r2
 804d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d95c:	f7f2 fc96 	bl	804028c <__adddf3>
 804d960:	4682      	mov	sl, r0
 804d962:	9805      	ldr	r0, [sp, #20]
 804d964:	468b      	mov	fp, r1
 804d966:	f7f2 fddd 	bl	8040524 <__aeabi_i2d>
 804d96a:	9a07      	ldr	r2, [sp, #28]
 804d96c:	4b32      	ldr	r3, [pc, #200]	; (804da38 <__ieee754_pow+0x778>)
 804d96e:	4413      	add	r3, r2
 804d970:	e9d3 8900 	ldrd	r8, r9, [r3]
 804d974:	4606      	mov	r6, r0
 804d976:	460f      	mov	r7, r1
 804d978:	4652      	mov	r2, sl
 804d97a:	465b      	mov	r3, fp
 804d97c:	ec51 0b18 	vmov	r0, r1, d8
 804d980:	f7f2 fc84 	bl	804028c <__adddf3>
 804d984:	4642      	mov	r2, r8
 804d986:	464b      	mov	r3, r9
 804d988:	f7f2 fc80 	bl	804028c <__adddf3>
 804d98c:	4632      	mov	r2, r6
 804d98e:	463b      	mov	r3, r7
 804d990:	f7f2 fc7c 	bl	804028c <__adddf3>
 804d994:	2000      	movs	r0, #0
 804d996:	4632      	mov	r2, r6
 804d998:	463b      	mov	r3, r7
 804d99a:	4604      	mov	r4, r0
 804d99c:	460d      	mov	r5, r1
 804d99e:	f7f2 fc73 	bl	8040288 <__aeabi_dsub>
 804d9a2:	4642      	mov	r2, r8
 804d9a4:	464b      	mov	r3, r9
 804d9a6:	f7f2 fc6f 	bl	8040288 <__aeabi_dsub>
 804d9aa:	ec53 2b18 	vmov	r2, r3, d8
 804d9ae:	f7f2 fc6b 	bl	8040288 <__aeabi_dsub>
 804d9b2:	4602      	mov	r2, r0
 804d9b4:	460b      	mov	r3, r1
 804d9b6:	4650      	mov	r0, sl
 804d9b8:	4659      	mov	r1, fp
 804d9ba:	e610      	b.n	804d5de <__ieee754_pow+0x31e>
 804d9bc:	2401      	movs	r4, #1
 804d9be:	e6a1      	b.n	804d704 <__ieee754_pow+0x444>
 804d9c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 804da10 <__ieee754_pow+0x750>
 804d9c4:	e617      	b.n	804d5f6 <__ieee754_pow+0x336>
 804d9c6:	bf00      	nop
 804d9c8:	4a454eef 	.word	0x4a454eef
 804d9cc:	3fca7e28 	.word	0x3fca7e28
 804d9d0:	93c9db65 	.word	0x93c9db65
 804d9d4:	3fcd864a 	.word	0x3fcd864a
 804d9d8:	a91d4101 	.word	0xa91d4101
 804d9dc:	3fd17460 	.word	0x3fd17460
 804d9e0:	518f264d 	.word	0x518f264d
 804d9e4:	3fd55555 	.word	0x3fd55555
 804d9e8:	db6fabff 	.word	0xdb6fabff
 804d9ec:	3fdb6db6 	.word	0x3fdb6db6
 804d9f0:	33333303 	.word	0x33333303
 804d9f4:	3fe33333 	.word	0x3fe33333
 804d9f8:	e0000000 	.word	0xe0000000
 804d9fc:	3feec709 	.word	0x3feec709
 804da00:	dc3a03fd 	.word	0xdc3a03fd
 804da04:	3feec709 	.word	0x3feec709
 804da08:	145b01f5 	.word	0x145b01f5
 804da0c:	be3e2fe0 	.word	0xbe3e2fe0
 804da10:	00000000 	.word	0x00000000
 804da14:	3ff00000 	.word	0x3ff00000
 804da18:	7ff00000 	.word	0x7ff00000
 804da1c:	43400000 	.word	0x43400000
 804da20:	0003988e 	.word	0x0003988e
 804da24:	000bb679 	.word	0x000bb679
 804da28:	0804e6b0 	.word	0x0804e6b0
 804da2c:	3ff00000 	.word	0x3ff00000
 804da30:	40080000 	.word	0x40080000
 804da34:	0804e6d0 	.word	0x0804e6d0
 804da38:	0804e6c0 	.word	0x0804e6c0
 804da3c:	a3b5      	add	r3, pc, #724	; (adr r3, 804dd14 <__ieee754_pow+0xa54>)
 804da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804da42:	4640      	mov	r0, r8
 804da44:	4649      	mov	r1, r9
 804da46:	f7f2 fc21 	bl	804028c <__adddf3>
 804da4a:	4622      	mov	r2, r4
 804da4c:	ec41 0b1a 	vmov	d10, r0, r1
 804da50:	462b      	mov	r3, r5
 804da52:	4630      	mov	r0, r6
 804da54:	4639      	mov	r1, r7
 804da56:	f7f2 fc17 	bl	8040288 <__aeabi_dsub>
 804da5a:	4602      	mov	r2, r0
 804da5c:	460b      	mov	r3, r1
 804da5e:	ec51 0b1a 	vmov	r0, r1, d10
 804da62:	f7f3 f859 	bl	8040b18 <__aeabi_dcmpgt>
 804da66:	2800      	cmp	r0, #0
 804da68:	f47f ae04 	bne.w	804d674 <__ieee754_pow+0x3b4>
 804da6c:	4aa4      	ldr	r2, [pc, #656]	; (804dd00 <__ieee754_pow+0xa40>)
 804da6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804da72:	4293      	cmp	r3, r2
 804da74:	f340 8108 	ble.w	804dc88 <__ieee754_pow+0x9c8>
 804da78:	151b      	asrs	r3, r3, #20
 804da7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 804da7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 804da82:	fa4a f303 	asr.w	r3, sl, r3
 804da86:	445b      	add	r3, fp
 804da88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 804da8c:	4e9d      	ldr	r6, [pc, #628]	; (804dd04 <__ieee754_pow+0xa44>)
 804da8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 804da92:	4116      	asrs	r6, r2
 804da94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 804da98:	2000      	movs	r0, #0
 804da9a:	ea23 0106 	bic.w	r1, r3, r6
 804da9e:	f1c2 0214 	rsb	r2, r2, #20
 804daa2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 804daa6:	fa4a fa02 	asr.w	sl, sl, r2
 804daaa:	f1bb 0f00 	cmp.w	fp, #0
 804daae:	4602      	mov	r2, r0
 804dab0:	460b      	mov	r3, r1
 804dab2:	4620      	mov	r0, r4
 804dab4:	4629      	mov	r1, r5
 804dab6:	bfb8      	it	lt
 804dab8:	f1ca 0a00 	rsblt	sl, sl, #0
 804dabc:	f7f2 fbe4 	bl	8040288 <__aeabi_dsub>
 804dac0:	ec41 0b19 	vmov	d9, r0, r1
 804dac4:	4642      	mov	r2, r8
 804dac6:	464b      	mov	r3, r9
 804dac8:	ec51 0b19 	vmov	r0, r1, d9
 804dacc:	f7f2 fbde 	bl	804028c <__adddf3>
 804dad0:	a37b      	add	r3, pc, #492	; (adr r3, 804dcc0 <__ieee754_pow+0xa00>)
 804dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dad6:	2000      	movs	r0, #0
 804dad8:	4604      	mov	r4, r0
 804dada:	460d      	mov	r5, r1
 804dadc:	f7f2 fd8c 	bl	80405f8 <__aeabi_dmul>
 804dae0:	ec53 2b19 	vmov	r2, r3, d9
 804dae4:	4606      	mov	r6, r0
 804dae6:	460f      	mov	r7, r1
 804dae8:	4620      	mov	r0, r4
 804daea:	4629      	mov	r1, r5
 804daec:	f7f2 fbcc 	bl	8040288 <__aeabi_dsub>
 804daf0:	4602      	mov	r2, r0
 804daf2:	460b      	mov	r3, r1
 804daf4:	4640      	mov	r0, r8
 804daf6:	4649      	mov	r1, r9
 804daf8:	f7f2 fbc6 	bl	8040288 <__aeabi_dsub>
 804dafc:	a372      	add	r3, pc, #456	; (adr r3, 804dcc8 <__ieee754_pow+0xa08>)
 804dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db02:	f7f2 fd79 	bl	80405f8 <__aeabi_dmul>
 804db06:	a372      	add	r3, pc, #456	; (adr r3, 804dcd0 <__ieee754_pow+0xa10>)
 804db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db0c:	4680      	mov	r8, r0
 804db0e:	4689      	mov	r9, r1
 804db10:	4620      	mov	r0, r4
 804db12:	4629      	mov	r1, r5
 804db14:	f7f2 fd70 	bl	80405f8 <__aeabi_dmul>
 804db18:	4602      	mov	r2, r0
 804db1a:	460b      	mov	r3, r1
 804db1c:	4640      	mov	r0, r8
 804db1e:	4649      	mov	r1, r9
 804db20:	f7f2 fbb4 	bl	804028c <__adddf3>
 804db24:	4604      	mov	r4, r0
 804db26:	460d      	mov	r5, r1
 804db28:	4602      	mov	r2, r0
 804db2a:	460b      	mov	r3, r1
 804db2c:	4630      	mov	r0, r6
 804db2e:	4639      	mov	r1, r7
 804db30:	f7f2 fbac 	bl	804028c <__adddf3>
 804db34:	4632      	mov	r2, r6
 804db36:	463b      	mov	r3, r7
 804db38:	4680      	mov	r8, r0
 804db3a:	4689      	mov	r9, r1
 804db3c:	f7f2 fba4 	bl	8040288 <__aeabi_dsub>
 804db40:	4602      	mov	r2, r0
 804db42:	460b      	mov	r3, r1
 804db44:	4620      	mov	r0, r4
 804db46:	4629      	mov	r1, r5
 804db48:	f7f2 fb9e 	bl	8040288 <__aeabi_dsub>
 804db4c:	4642      	mov	r2, r8
 804db4e:	4606      	mov	r6, r0
 804db50:	460f      	mov	r7, r1
 804db52:	464b      	mov	r3, r9
 804db54:	4640      	mov	r0, r8
 804db56:	4649      	mov	r1, r9
 804db58:	f7f2 fd4e 	bl	80405f8 <__aeabi_dmul>
 804db5c:	a35e      	add	r3, pc, #376	; (adr r3, 804dcd8 <__ieee754_pow+0xa18>)
 804db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db62:	4604      	mov	r4, r0
 804db64:	460d      	mov	r5, r1
 804db66:	f7f2 fd47 	bl	80405f8 <__aeabi_dmul>
 804db6a:	a35d      	add	r3, pc, #372	; (adr r3, 804dce0 <__ieee754_pow+0xa20>)
 804db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db70:	f7f2 fb8a 	bl	8040288 <__aeabi_dsub>
 804db74:	4622      	mov	r2, r4
 804db76:	462b      	mov	r3, r5
 804db78:	f7f2 fd3e 	bl	80405f8 <__aeabi_dmul>
 804db7c:	a35a      	add	r3, pc, #360	; (adr r3, 804dce8 <__ieee754_pow+0xa28>)
 804db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db82:	f7f2 fb83 	bl	804028c <__adddf3>
 804db86:	4622      	mov	r2, r4
 804db88:	462b      	mov	r3, r5
 804db8a:	f7f2 fd35 	bl	80405f8 <__aeabi_dmul>
 804db8e:	a358      	add	r3, pc, #352	; (adr r3, 804dcf0 <__ieee754_pow+0xa30>)
 804db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db94:	f7f2 fb78 	bl	8040288 <__aeabi_dsub>
 804db98:	4622      	mov	r2, r4
 804db9a:	462b      	mov	r3, r5
 804db9c:	f7f2 fd2c 	bl	80405f8 <__aeabi_dmul>
 804dba0:	a355      	add	r3, pc, #340	; (adr r3, 804dcf8 <__ieee754_pow+0xa38>)
 804dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dba6:	f7f2 fb71 	bl	804028c <__adddf3>
 804dbaa:	4622      	mov	r2, r4
 804dbac:	462b      	mov	r3, r5
 804dbae:	f7f2 fd23 	bl	80405f8 <__aeabi_dmul>
 804dbb2:	4602      	mov	r2, r0
 804dbb4:	460b      	mov	r3, r1
 804dbb6:	4640      	mov	r0, r8
 804dbb8:	4649      	mov	r1, r9
 804dbba:	f7f2 fb65 	bl	8040288 <__aeabi_dsub>
 804dbbe:	4604      	mov	r4, r0
 804dbc0:	460d      	mov	r5, r1
 804dbc2:	4602      	mov	r2, r0
 804dbc4:	460b      	mov	r3, r1
 804dbc6:	4640      	mov	r0, r8
 804dbc8:	4649      	mov	r1, r9
 804dbca:	f7f2 fd15 	bl	80405f8 <__aeabi_dmul>
 804dbce:	2200      	movs	r2, #0
 804dbd0:	ec41 0b19 	vmov	d9, r0, r1
 804dbd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804dbd8:	4620      	mov	r0, r4
 804dbda:	4629      	mov	r1, r5
 804dbdc:	f7f2 fb54 	bl	8040288 <__aeabi_dsub>
 804dbe0:	4602      	mov	r2, r0
 804dbe2:	460b      	mov	r3, r1
 804dbe4:	ec51 0b19 	vmov	r0, r1, d9
 804dbe8:	f7f2 fe30 	bl	804084c <__aeabi_ddiv>
 804dbec:	4632      	mov	r2, r6
 804dbee:	4604      	mov	r4, r0
 804dbf0:	460d      	mov	r5, r1
 804dbf2:	463b      	mov	r3, r7
 804dbf4:	4640      	mov	r0, r8
 804dbf6:	4649      	mov	r1, r9
 804dbf8:	f7f2 fcfe 	bl	80405f8 <__aeabi_dmul>
 804dbfc:	4632      	mov	r2, r6
 804dbfe:	463b      	mov	r3, r7
 804dc00:	f7f2 fb44 	bl	804028c <__adddf3>
 804dc04:	4602      	mov	r2, r0
 804dc06:	460b      	mov	r3, r1
 804dc08:	4620      	mov	r0, r4
 804dc0a:	4629      	mov	r1, r5
 804dc0c:	f7f2 fb3c 	bl	8040288 <__aeabi_dsub>
 804dc10:	4642      	mov	r2, r8
 804dc12:	464b      	mov	r3, r9
 804dc14:	f7f2 fb38 	bl	8040288 <__aeabi_dsub>
 804dc18:	460b      	mov	r3, r1
 804dc1a:	4602      	mov	r2, r0
 804dc1c:	493a      	ldr	r1, [pc, #232]	; (804dd08 <__ieee754_pow+0xa48>)
 804dc1e:	2000      	movs	r0, #0
 804dc20:	f7f2 fb32 	bl	8040288 <__aeabi_dsub>
 804dc24:	ec41 0b10 	vmov	d0, r0, r1
 804dc28:	ee10 3a90 	vmov	r3, s1
 804dc2c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 804dc30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804dc34:	da2b      	bge.n	804dc8e <__ieee754_pow+0x9ce>
 804dc36:	4650      	mov	r0, sl
 804dc38:	f000 f966 	bl	804df08 <scalbn>
 804dc3c:	ec51 0b10 	vmov	r0, r1, d0
 804dc40:	ec53 2b18 	vmov	r2, r3, d8
 804dc44:	f7ff bbed 	b.w	804d422 <__ieee754_pow+0x162>
 804dc48:	4b30      	ldr	r3, [pc, #192]	; (804dd0c <__ieee754_pow+0xa4c>)
 804dc4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 804dc4e:	429e      	cmp	r6, r3
 804dc50:	f77f af0c 	ble.w	804da6c <__ieee754_pow+0x7ac>
 804dc54:	4b2e      	ldr	r3, [pc, #184]	; (804dd10 <__ieee754_pow+0xa50>)
 804dc56:	440b      	add	r3, r1
 804dc58:	4303      	orrs	r3, r0
 804dc5a:	d009      	beq.n	804dc70 <__ieee754_pow+0x9b0>
 804dc5c:	ec51 0b18 	vmov	r0, r1, d8
 804dc60:	2200      	movs	r2, #0
 804dc62:	2300      	movs	r3, #0
 804dc64:	f7f2 ff3a 	bl	8040adc <__aeabi_dcmplt>
 804dc68:	3800      	subs	r0, #0
 804dc6a:	bf18      	it	ne
 804dc6c:	2001      	movne	r0, #1
 804dc6e:	e447      	b.n	804d500 <__ieee754_pow+0x240>
 804dc70:	4622      	mov	r2, r4
 804dc72:	462b      	mov	r3, r5
 804dc74:	f7f2 fb08 	bl	8040288 <__aeabi_dsub>
 804dc78:	4642      	mov	r2, r8
 804dc7a:	464b      	mov	r3, r9
 804dc7c:	f7f2 ff42 	bl	8040b04 <__aeabi_dcmpge>
 804dc80:	2800      	cmp	r0, #0
 804dc82:	f43f aef3 	beq.w	804da6c <__ieee754_pow+0x7ac>
 804dc86:	e7e9      	b.n	804dc5c <__ieee754_pow+0x99c>
 804dc88:	f04f 0a00 	mov.w	sl, #0
 804dc8c:	e71a      	b.n	804dac4 <__ieee754_pow+0x804>
 804dc8e:	ec51 0b10 	vmov	r0, r1, d0
 804dc92:	4619      	mov	r1, r3
 804dc94:	e7d4      	b.n	804dc40 <__ieee754_pow+0x980>
 804dc96:	491c      	ldr	r1, [pc, #112]	; (804dd08 <__ieee754_pow+0xa48>)
 804dc98:	2000      	movs	r0, #0
 804dc9a:	f7ff bb30 	b.w	804d2fe <__ieee754_pow+0x3e>
 804dc9e:	2000      	movs	r0, #0
 804dca0:	2100      	movs	r1, #0
 804dca2:	f7ff bb2c 	b.w	804d2fe <__ieee754_pow+0x3e>
 804dca6:	4630      	mov	r0, r6
 804dca8:	4639      	mov	r1, r7
 804dcaa:	f7ff bb28 	b.w	804d2fe <__ieee754_pow+0x3e>
 804dcae:	9204      	str	r2, [sp, #16]
 804dcb0:	f7ff bb7a 	b.w	804d3a8 <__ieee754_pow+0xe8>
 804dcb4:	2300      	movs	r3, #0
 804dcb6:	f7ff bb64 	b.w	804d382 <__ieee754_pow+0xc2>
 804dcba:	bf00      	nop
 804dcbc:	f3af 8000 	nop.w
 804dcc0:	00000000 	.word	0x00000000
 804dcc4:	3fe62e43 	.word	0x3fe62e43
 804dcc8:	fefa39ef 	.word	0xfefa39ef
 804dccc:	3fe62e42 	.word	0x3fe62e42
 804dcd0:	0ca86c39 	.word	0x0ca86c39
 804dcd4:	be205c61 	.word	0xbe205c61
 804dcd8:	72bea4d0 	.word	0x72bea4d0
 804dcdc:	3e663769 	.word	0x3e663769
 804dce0:	c5d26bf1 	.word	0xc5d26bf1
 804dce4:	3ebbbd41 	.word	0x3ebbbd41
 804dce8:	af25de2c 	.word	0xaf25de2c
 804dcec:	3f11566a 	.word	0x3f11566a
 804dcf0:	16bebd93 	.word	0x16bebd93
 804dcf4:	3f66c16c 	.word	0x3f66c16c
 804dcf8:	5555553e 	.word	0x5555553e
 804dcfc:	3fc55555 	.word	0x3fc55555
 804dd00:	3fe00000 	.word	0x3fe00000
 804dd04:	000fffff 	.word	0x000fffff
 804dd08:	3ff00000 	.word	0x3ff00000
 804dd0c:	4090cbff 	.word	0x4090cbff
 804dd10:	3f6f3400 	.word	0x3f6f3400
 804dd14:	652b82fe 	.word	0x652b82fe
 804dd18:	3c971547 	.word	0x3c971547

0804dd1c <__ieee754_sqrt>:
 804dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804dd20:	ec55 4b10 	vmov	r4, r5, d0
 804dd24:	4e55      	ldr	r6, [pc, #340]	; (804de7c <__ieee754_sqrt+0x160>)
 804dd26:	43ae      	bics	r6, r5
 804dd28:	ee10 0a10 	vmov	r0, s0
 804dd2c:	ee10 3a10 	vmov	r3, s0
 804dd30:	462a      	mov	r2, r5
 804dd32:	4629      	mov	r1, r5
 804dd34:	d110      	bne.n	804dd58 <__ieee754_sqrt+0x3c>
 804dd36:	ee10 2a10 	vmov	r2, s0
 804dd3a:	462b      	mov	r3, r5
 804dd3c:	f7f2 fc5c 	bl	80405f8 <__aeabi_dmul>
 804dd40:	4602      	mov	r2, r0
 804dd42:	460b      	mov	r3, r1
 804dd44:	4620      	mov	r0, r4
 804dd46:	4629      	mov	r1, r5
 804dd48:	f7f2 faa0 	bl	804028c <__adddf3>
 804dd4c:	4604      	mov	r4, r0
 804dd4e:	460d      	mov	r5, r1
 804dd50:	ec45 4b10 	vmov	d0, r4, r5
 804dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804dd58:	2d00      	cmp	r5, #0
 804dd5a:	dc10      	bgt.n	804dd7e <__ieee754_sqrt+0x62>
 804dd5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 804dd60:	4330      	orrs	r0, r6
 804dd62:	d0f5      	beq.n	804dd50 <__ieee754_sqrt+0x34>
 804dd64:	b15d      	cbz	r5, 804dd7e <__ieee754_sqrt+0x62>
 804dd66:	ee10 2a10 	vmov	r2, s0
 804dd6a:	462b      	mov	r3, r5
 804dd6c:	ee10 0a10 	vmov	r0, s0
 804dd70:	f7f2 fa8a 	bl	8040288 <__aeabi_dsub>
 804dd74:	4602      	mov	r2, r0
 804dd76:	460b      	mov	r3, r1
 804dd78:	f7f2 fd68 	bl	804084c <__aeabi_ddiv>
 804dd7c:	e7e6      	b.n	804dd4c <__ieee754_sqrt+0x30>
 804dd7e:	1512      	asrs	r2, r2, #20
 804dd80:	d074      	beq.n	804de6c <__ieee754_sqrt+0x150>
 804dd82:	07d4      	lsls	r4, r2, #31
 804dd84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 804dd88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 804dd8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 804dd90:	bf5e      	ittt	pl
 804dd92:	0fda      	lsrpl	r2, r3, #31
 804dd94:	005b      	lslpl	r3, r3, #1
 804dd96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 804dd9a:	2400      	movs	r4, #0
 804dd9c:	0fda      	lsrs	r2, r3, #31
 804dd9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 804dda2:	107f      	asrs	r7, r7, #1
 804dda4:	005b      	lsls	r3, r3, #1
 804dda6:	2516      	movs	r5, #22
 804dda8:	4620      	mov	r0, r4
 804ddaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 804ddae:	1886      	adds	r6, r0, r2
 804ddb0:	428e      	cmp	r6, r1
 804ddb2:	bfde      	ittt	le
 804ddb4:	1b89      	suble	r1, r1, r6
 804ddb6:	18b0      	addle	r0, r6, r2
 804ddb8:	18a4      	addle	r4, r4, r2
 804ddba:	0049      	lsls	r1, r1, #1
 804ddbc:	3d01      	subs	r5, #1
 804ddbe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 804ddc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 804ddc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804ddca:	d1f0      	bne.n	804ddae <__ieee754_sqrt+0x92>
 804ddcc:	462a      	mov	r2, r5
 804ddce:	f04f 0e20 	mov.w	lr, #32
 804ddd2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 804ddd6:	4281      	cmp	r1, r0
 804ddd8:	eb06 0c05 	add.w	ip, r6, r5
 804dddc:	dc02      	bgt.n	804dde4 <__ieee754_sqrt+0xc8>
 804ddde:	d113      	bne.n	804de08 <__ieee754_sqrt+0xec>
 804dde0:	459c      	cmp	ip, r3
 804dde2:	d811      	bhi.n	804de08 <__ieee754_sqrt+0xec>
 804dde4:	f1bc 0f00 	cmp.w	ip, #0
 804dde8:	eb0c 0506 	add.w	r5, ip, r6
 804ddec:	da43      	bge.n	804de76 <__ieee754_sqrt+0x15a>
 804ddee:	2d00      	cmp	r5, #0
 804ddf0:	db41      	blt.n	804de76 <__ieee754_sqrt+0x15a>
 804ddf2:	f100 0801 	add.w	r8, r0, #1
 804ddf6:	1a09      	subs	r1, r1, r0
 804ddf8:	459c      	cmp	ip, r3
 804ddfa:	bf88      	it	hi
 804ddfc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 804de00:	eba3 030c 	sub.w	r3, r3, ip
 804de04:	4432      	add	r2, r6
 804de06:	4640      	mov	r0, r8
 804de08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 804de0c:	f1be 0e01 	subs.w	lr, lr, #1
 804de10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 804de14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804de18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 804de1c:	d1db      	bne.n	804ddd6 <__ieee754_sqrt+0xba>
 804de1e:	430b      	orrs	r3, r1
 804de20:	d006      	beq.n	804de30 <__ieee754_sqrt+0x114>
 804de22:	1c50      	adds	r0, r2, #1
 804de24:	bf13      	iteet	ne
 804de26:	3201      	addne	r2, #1
 804de28:	3401      	addeq	r4, #1
 804de2a:	4672      	moveq	r2, lr
 804de2c:	f022 0201 	bicne.w	r2, r2, #1
 804de30:	1063      	asrs	r3, r4, #1
 804de32:	0852      	lsrs	r2, r2, #1
 804de34:	07e1      	lsls	r1, r4, #31
 804de36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 804de3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 804de3e:	bf48      	it	mi
 804de40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 804de44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 804de48:	4614      	mov	r4, r2
 804de4a:	e781      	b.n	804dd50 <__ieee754_sqrt+0x34>
 804de4c:	0ad9      	lsrs	r1, r3, #11
 804de4e:	3815      	subs	r0, #21
 804de50:	055b      	lsls	r3, r3, #21
 804de52:	2900      	cmp	r1, #0
 804de54:	d0fa      	beq.n	804de4c <__ieee754_sqrt+0x130>
 804de56:	02cd      	lsls	r5, r1, #11
 804de58:	d50a      	bpl.n	804de70 <__ieee754_sqrt+0x154>
 804de5a:	f1c2 0420 	rsb	r4, r2, #32
 804de5e:	fa23 f404 	lsr.w	r4, r3, r4
 804de62:	1e55      	subs	r5, r2, #1
 804de64:	4093      	lsls	r3, r2
 804de66:	4321      	orrs	r1, r4
 804de68:	1b42      	subs	r2, r0, r5
 804de6a:	e78a      	b.n	804dd82 <__ieee754_sqrt+0x66>
 804de6c:	4610      	mov	r0, r2
 804de6e:	e7f0      	b.n	804de52 <__ieee754_sqrt+0x136>
 804de70:	0049      	lsls	r1, r1, #1
 804de72:	3201      	adds	r2, #1
 804de74:	e7ef      	b.n	804de56 <__ieee754_sqrt+0x13a>
 804de76:	4680      	mov	r8, r0
 804de78:	e7bd      	b.n	804ddf6 <__ieee754_sqrt+0xda>
 804de7a:	bf00      	nop
 804de7c:	7ff00000 	.word	0x7ff00000

0804de80 <with_errno>:
 804de80:	b570      	push	{r4, r5, r6, lr}
 804de82:	4604      	mov	r4, r0
 804de84:	460d      	mov	r5, r1
 804de86:	4616      	mov	r6, r2
 804de88:	f7fa fcc4 	bl	8048814 <__errno>
 804de8c:	4629      	mov	r1, r5
 804de8e:	6006      	str	r6, [r0, #0]
 804de90:	4620      	mov	r0, r4
 804de92:	bd70      	pop	{r4, r5, r6, pc}

0804de94 <xflow>:
 804de94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804de96:	4614      	mov	r4, r2
 804de98:	461d      	mov	r5, r3
 804de9a:	b108      	cbz	r0, 804dea0 <xflow+0xc>
 804de9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 804dea0:	e9cd 2300 	strd	r2, r3, [sp]
 804dea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 804dea8:	4620      	mov	r0, r4
 804deaa:	4629      	mov	r1, r5
 804deac:	f7f2 fba4 	bl	80405f8 <__aeabi_dmul>
 804deb0:	2222      	movs	r2, #34	; 0x22
 804deb2:	b003      	add	sp, #12
 804deb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804deb8:	f7ff bfe2 	b.w	804de80 <with_errno>

0804debc <__math_uflow>:
 804debc:	b508      	push	{r3, lr}
 804debe:	2200      	movs	r2, #0
 804dec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 804dec4:	f7ff ffe6 	bl	804de94 <xflow>
 804dec8:	ec41 0b10 	vmov	d0, r0, r1
 804decc:	bd08      	pop	{r3, pc}

0804dece <__math_oflow>:
 804dece:	b508      	push	{r3, lr}
 804ded0:	2200      	movs	r2, #0
 804ded2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 804ded6:	f7ff ffdd 	bl	804de94 <xflow>
 804deda:	ec41 0b10 	vmov	d0, r0, r1
 804dede:	bd08      	pop	{r3, pc}

0804dee0 <fabs>:
 804dee0:	ec51 0b10 	vmov	r0, r1, d0
 804dee4:	ee10 2a10 	vmov	r2, s0
 804dee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 804deec:	ec43 2b10 	vmov	d0, r2, r3
 804def0:	4770      	bx	lr

0804def2 <finite>:
 804def2:	b082      	sub	sp, #8
 804def4:	ed8d 0b00 	vstr	d0, [sp]
 804def8:	9801      	ldr	r0, [sp, #4]
 804defa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 804defe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 804df02:	0fc0      	lsrs	r0, r0, #31
 804df04:	b002      	add	sp, #8
 804df06:	4770      	bx	lr

0804df08 <scalbn>:
 804df08:	b570      	push	{r4, r5, r6, lr}
 804df0a:	ec55 4b10 	vmov	r4, r5, d0
 804df0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 804df12:	4606      	mov	r6, r0
 804df14:	462b      	mov	r3, r5
 804df16:	b99a      	cbnz	r2, 804df40 <scalbn+0x38>
 804df18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 804df1c:	4323      	orrs	r3, r4
 804df1e:	d036      	beq.n	804df8e <scalbn+0x86>
 804df20:	4b39      	ldr	r3, [pc, #228]	; (804e008 <scalbn+0x100>)
 804df22:	4629      	mov	r1, r5
 804df24:	ee10 0a10 	vmov	r0, s0
 804df28:	2200      	movs	r2, #0
 804df2a:	f7f2 fb65 	bl	80405f8 <__aeabi_dmul>
 804df2e:	4b37      	ldr	r3, [pc, #220]	; (804e00c <scalbn+0x104>)
 804df30:	429e      	cmp	r6, r3
 804df32:	4604      	mov	r4, r0
 804df34:	460d      	mov	r5, r1
 804df36:	da10      	bge.n	804df5a <scalbn+0x52>
 804df38:	a32b      	add	r3, pc, #172	; (adr r3, 804dfe8 <scalbn+0xe0>)
 804df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804df3e:	e03a      	b.n	804dfb6 <scalbn+0xae>
 804df40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 804df44:	428a      	cmp	r2, r1
 804df46:	d10c      	bne.n	804df62 <scalbn+0x5a>
 804df48:	ee10 2a10 	vmov	r2, s0
 804df4c:	4620      	mov	r0, r4
 804df4e:	4629      	mov	r1, r5
 804df50:	f7f2 f99c 	bl	804028c <__adddf3>
 804df54:	4604      	mov	r4, r0
 804df56:	460d      	mov	r5, r1
 804df58:	e019      	b.n	804df8e <scalbn+0x86>
 804df5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 804df5e:	460b      	mov	r3, r1
 804df60:	3a36      	subs	r2, #54	; 0x36
 804df62:	4432      	add	r2, r6
 804df64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 804df68:	428a      	cmp	r2, r1
 804df6a:	dd08      	ble.n	804df7e <scalbn+0x76>
 804df6c:	2d00      	cmp	r5, #0
 804df6e:	a120      	add	r1, pc, #128	; (adr r1, 804dff0 <scalbn+0xe8>)
 804df70:	e9d1 0100 	ldrd	r0, r1, [r1]
 804df74:	da1c      	bge.n	804dfb0 <scalbn+0xa8>
 804df76:	a120      	add	r1, pc, #128	; (adr r1, 804dff8 <scalbn+0xf0>)
 804df78:	e9d1 0100 	ldrd	r0, r1, [r1]
 804df7c:	e018      	b.n	804dfb0 <scalbn+0xa8>
 804df7e:	2a00      	cmp	r2, #0
 804df80:	dd08      	ble.n	804df94 <scalbn+0x8c>
 804df82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804df86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804df8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804df8e:	ec45 4b10 	vmov	d0, r4, r5
 804df92:	bd70      	pop	{r4, r5, r6, pc}
 804df94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 804df98:	da19      	bge.n	804dfce <scalbn+0xc6>
 804df9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 804df9e:	429e      	cmp	r6, r3
 804dfa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 804dfa4:	dd0a      	ble.n	804dfbc <scalbn+0xb4>
 804dfa6:	a112      	add	r1, pc, #72	; (adr r1, 804dff0 <scalbn+0xe8>)
 804dfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 804dfac:	2b00      	cmp	r3, #0
 804dfae:	d1e2      	bne.n	804df76 <scalbn+0x6e>
 804dfb0:	a30f      	add	r3, pc, #60	; (adr r3, 804dff0 <scalbn+0xe8>)
 804dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dfb6:	f7f2 fb1f 	bl	80405f8 <__aeabi_dmul>
 804dfba:	e7cb      	b.n	804df54 <scalbn+0x4c>
 804dfbc:	a10a      	add	r1, pc, #40	; (adr r1, 804dfe8 <scalbn+0xe0>)
 804dfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 804dfc2:	2b00      	cmp	r3, #0
 804dfc4:	d0b8      	beq.n	804df38 <scalbn+0x30>
 804dfc6:	a10e      	add	r1, pc, #56	; (adr r1, 804e000 <scalbn+0xf8>)
 804dfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 804dfcc:	e7b4      	b.n	804df38 <scalbn+0x30>
 804dfce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804dfd2:	3236      	adds	r2, #54	; 0x36
 804dfd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804dfd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 804dfdc:	4620      	mov	r0, r4
 804dfde:	4b0c      	ldr	r3, [pc, #48]	; (804e010 <scalbn+0x108>)
 804dfe0:	2200      	movs	r2, #0
 804dfe2:	e7e8      	b.n	804dfb6 <scalbn+0xae>
 804dfe4:	f3af 8000 	nop.w
 804dfe8:	c2f8f359 	.word	0xc2f8f359
 804dfec:	01a56e1f 	.word	0x01a56e1f
 804dff0:	8800759c 	.word	0x8800759c
 804dff4:	7e37e43c 	.word	0x7e37e43c
 804dff8:	8800759c 	.word	0x8800759c
 804dffc:	fe37e43c 	.word	0xfe37e43c
 804e000:	c2f8f359 	.word	0xc2f8f359
 804e004:	81a56e1f 	.word	0x81a56e1f
 804e008:	43500000 	.word	0x43500000
 804e00c:	ffff3cb0 	.word	0xffff3cb0
 804e010:	3c900000 	.word	0x3c900000

0804e014 <_init>:
 804e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e016:	bf00      	nop
 804e018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e01a:	bc08      	pop	{r3}
 804e01c:	469e      	mov	lr, r3
 804e01e:	4770      	bx	lr

0804e020 <_fini>:
 804e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e022:	bf00      	nop
 804e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e026:	bc08      	pop	{r3}
 804e028:	469e      	mov	lr, r3
 804e02a:	4770      	bx	lr


ReflowPreheater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d4  08040190  08040190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0804e368  0804e368  0001e368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ea18  0804ea18  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0804ea18  0804ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ea20  0804ea20  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ea20  0804ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804ea24  0804ea24  0001ea24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0804ea28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000033c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b2c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3e  00000000  00000000  00034d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001138  00000000  00000000  00038cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003aba  00000000  00000000  00039e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001503a  00000000  00000000  0003d8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d09c0  00000000  00000000  0005291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  001232dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006600  00000000  00000000  0012339c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	; (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	; (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	; (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	200001e8 	.word	0x200001e8
 80401ac:	00000000 	.word	0x00000000
 80401b0:	0804e34c 	.word	0x0804e34c

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	; (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	; (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	; (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	200001ec 	.word	0x200001ec
 80401cc:	0804e34c 	.word	0x0804e34c

080401d0 <strlen>:
 80401d0:	4603      	mov	r3, r0
 80401d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401d6:	2a00      	cmp	r2, #0
 80401d8:	d1fb      	bne.n	80401d2 <strlen+0x2>
 80401da:	1a18      	subs	r0, r3, r0
 80401dc:	3801      	subs	r0, #1
 80401de:	4770      	bx	lr

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_drsub>:
 8040280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8040284:	e002      	b.n	804028c <__adddf3>
 8040286:	bf00      	nop

08040288 <__aeabi_dsub>:
 8040288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0804028c <__adddf3>:
 804028c:	b530      	push	{r4, r5, lr}
 804028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040296:	ea94 0f05 	teq	r4, r5
 804029a:	bf08      	it	eq
 804029c:	ea90 0f02 	teqeq	r0, r2
 80402a0:	bf1f      	itttt	ne
 80402a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402b2:	f000 80e2 	beq.w	804047a <__adddf3+0x1ee>
 80402b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402be:	bfb8      	it	lt
 80402c0:	426d      	neglt	r5, r5
 80402c2:	dd0c      	ble.n	80402de <__adddf3+0x52>
 80402c4:	442c      	add	r4, r5
 80402c6:	ea80 0202 	eor.w	r2, r0, r2
 80402ca:	ea81 0303 	eor.w	r3, r1, r3
 80402ce:	ea82 0000 	eor.w	r0, r2, r0
 80402d2:	ea83 0101 	eor.w	r1, r3, r1
 80402d6:	ea80 0202 	eor.w	r2, r0, r2
 80402da:	ea81 0303 	eor.w	r3, r1, r3
 80402de:	2d36      	cmp	r5, #54	; 0x36
 80402e0:	bf88      	it	hi
 80402e2:	bd30      	pophi	{r4, r5, pc}
 80402e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402f4:	d002      	beq.n	80402fc <__adddf3+0x70>
 80402f6:	4240      	negs	r0, r0
 80402f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040308:	d002      	beq.n	8040310 <__adddf3+0x84>
 804030a:	4252      	negs	r2, r2
 804030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040310:	ea94 0f05 	teq	r4, r5
 8040314:	f000 80a7 	beq.w	8040466 <__adddf3+0x1da>
 8040318:	f1a4 0401 	sub.w	r4, r4, #1
 804031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040320:	db0d      	blt.n	804033e <__adddf3+0xb2>
 8040322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040326:	fa22 f205 	lsr.w	r2, r2, r5
 804032a:	1880      	adds	r0, r0, r2
 804032c:	f141 0100 	adc.w	r1, r1, #0
 8040330:	fa03 f20e 	lsl.w	r2, r3, lr
 8040334:	1880      	adds	r0, r0, r2
 8040336:	fa43 f305 	asr.w	r3, r3, r5
 804033a:	4159      	adcs	r1, r3
 804033c:	e00e      	b.n	804035c <__adddf3+0xd0>
 804033e:	f1a5 0520 	sub.w	r5, r5, #32
 8040342:	f10e 0e20 	add.w	lr, lr, #32
 8040346:	2a01      	cmp	r2, #1
 8040348:	fa03 fc0e 	lsl.w	ip, r3, lr
 804034c:	bf28      	it	cs
 804034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040352:	fa43 f305 	asr.w	r3, r3, r5
 8040356:	18c0      	adds	r0, r0, r3
 8040358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040360:	d507      	bpl.n	8040372 <__adddf3+0xe6>
 8040362:	f04f 0e00 	mov.w	lr, #0
 8040366:	f1dc 0c00 	rsbs	ip, ip, #0
 804036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040376:	d31b      	bcc.n	80403b0 <__adddf3+0x124>
 8040378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804037c:	d30c      	bcc.n	8040398 <__adddf3+0x10c>
 804037e:	0849      	lsrs	r1, r1, #1
 8040380:	ea5f 0030 	movs.w	r0, r0, rrx
 8040384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040388:	f104 0401 	add.w	r4, r4, #1
 804038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040394:	f080 809a 	bcs.w	80404cc <__adddf3+0x240>
 8040398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804039c:	bf08      	it	eq
 804039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403a2:	f150 0000 	adcs.w	r0, r0, #0
 80403a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403aa:	ea41 0105 	orr.w	r1, r1, r5
 80403ae:	bd30      	pop	{r4, r5, pc}
 80403b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403b4:	4140      	adcs	r0, r0
 80403b6:	eb41 0101 	adc.w	r1, r1, r1
 80403ba:	3c01      	subs	r4, #1
 80403bc:	bf28      	it	cs
 80403be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403c2:	d2e9      	bcs.n	8040398 <__adddf3+0x10c>
 80403c4:	f091 0f00 	teq	r1, #0
 80403c8:	bf04      	itt	eq
 80403ca:	4601      	moveq	r1, r0
 80403cc:	2000      	moveq	r0, #0
 80403ce:	fab1 f381 	clz	r3, r1
 80403d2:	bf08      	it	eq
 80403d4:	3320      	addeq	r3, #32
 80403d6:	f1a3 030b 	sub.w	r3, r3, #11
 80403da:	f1b3 0220 	subs.w	r2, r3, #32
 80403de:	da0c      	bge.n	80403fa <__adddf3+0x16e>
 80403e0:	320c      	adds	r2, #12
 80403e2:	dd08      	ble.n	80403f6 <__adddf3+0x16a>
 80403e4:	f102 0c14 	add.w	ip, r2, #20
 80403e8:	f1c2 020c 	rsb	r2, r2, #12
 80403ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80403f0:	fa21 f102 	lsr.w	r1, r1, r2
 80403f4:	e00c      	b.n	8040410 <__adddf3+0x184>
 80403f6:	f102 0214 	add.w	r2, r2, #20
 80403fa:	bfd8      	it	le
 80403fc:	f1c2 0c20 	rsble	ip, r2, #32
 8040400:	fa01 f102 	lsl.w	r1, r1, r2
 8040404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040408:	bfdc      	itt	le
 804040a:	ea41 010c 	orrle.w	r1, r1, ip
 804040e:	4090      	lslle	r0, r2
 8040410:	1ae4      	subs	r4, r4, r3
 8040412:	bfa2      	ittt	ge
 8040414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040418:	4329      	orrge	r1, r5
 804041a:	bd30      	popge	{r4, r5, pc}
 804041c:	ea6f 0404 	mvn.w	r4, r4
 8040420:	3c1f      	subs	r4, #31
 8040422:	da1c      	bge.n	804045e <__adddf3+0x1d2>
 8040424:	340c      	adds	r4, #12
 8040426:	dc0e      	bgt.n	8040446 <__adddf3+0x1ba>
 8040428:	f104 0414 	add.w	r4, r4, #20
 804042c:	f1c4 0220 	rsb	r2, r4, #32
 8040430:	fa20 f004 	lsr.w	r0, r0, r4
 8040434:	fa01 f302 	lsl.w	r3, r1, r2
 8040438:	ea40 0003 	orr.w	r0, r0, r3
 804043c:	fa21 f304 	lsr.w	r3, r1, r4
 8040440:	ea45 0103 	orr.w	r1, r5, r3
 8040444:	bd30      	pop	{r4, r5, pc}
 8040446:	f1c4 040c 	rsb	r4, r4, #12
 804044a:	f1c4 0220 	rsb	r2, r4, #32
 804044e:	fa20 f002 	lsr.w	r0, r0, r2
 8040452:	fa01 f304 	lsl.w	r3, r1, r4
 8040456:	ea40 0003 	orr.w	r0, r0, r3
 804045a:	4629      	mov	r1, r5
 804045c:	bd30      	pop	{r4, r5, pc}
 804045e:	fa21 f004 	lsr.w	r0, r1, r4
 8040462:	4629      	mov	r1, r5
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f094 0f00 	teq	r4, #0
 804046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804046e:	bf06      	itte	eq
 8040470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040474:	3401      	addeq	r4, #1
 8040476:	3d01      	subne	r5, #1
 8040478:	e74e      	b.n	8040318 <__adddf3+0x8c>
 804047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804047e:	bf18      	it	ne
 8040480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040484:	d029      	beq.n	80404da <__adddf3+0x24e>
 8040486:	ea94 0f05 	teq	r4, r5
 804048a:	bf08      	it	eq
 804048c:	ea90 0f02 	teqeq	r0, r2
 8040490:	d005      	beq.n	804049e <__adddf3+0x212>
 8040492:	ea54 0c00 	orrs.w	ip, r4, r0
 8040496:	bf04      	itt	eq
 8040498:	4619      	moveq	r1, r3
 804049a:	4610      	moveq	r0, r2
 804049c:	bd30      	pop	{r4, r5, pc}
 804049e:	ea91 0f03 	teq	r1, r3
 80404a2:	bf1e      	ittt	ne
 80404a4:	2100      	movne	r1, #0
 80404a6:	2000      	movne	r0, #0
 80404a8:	bd30      	popne	{r4, r5, pc}
 80404aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ae:	d105      	bne.n	80404bc <__adddf3+0x230>
 80404b0:	0040      	lsls	r0, r0, #1
 80404b2:	4149      	adcs	r1, r1
 80404b4:	bf28      	it	cs
 80404b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404ba:	bd30      	pop	{r4, r5, pc}
 80404bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404c0:	bf3c      	itt	cc
 80404c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404c6:	bd30      	popcc	{r4, r5, pc}
 80404c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404d4:	f04f 0000 	mov.w	r0, #0
 80404d8:	bd30      	pop	{r4, r5, pc}
 80404da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404de:	bf1a      	itte	ne
 80404e0:	4619      	movne	r1, r3
 80404e2:	4610      	movne	r0, r2
 80404e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404e8:	bf1c      	itt	ne
 80404ea:	460b      	movne	r3, r1
 80404ec:	4602      	movne	r2, r0
 80404ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404f2:	bf06      	itte	eq
 80404f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404f8:	ea91 0f03 	teqeq	r1, r3
 80404fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040500:	bd30      	pop	{r4, r5, pc}
 8040502:	bf00      	nop

08040504 <__aeabi_ui2d>:
 8040504:	f090 0f00 	teq	r0, #0
 8040508:	bf04      	itt	eq
 804050a:	2100      	moveq	r1, #0
 804050c:	4770      	bxeq	lr
 804050e:	b530      	push	{r4, r5, lr}
 8040510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040518:	f04f 0500 	mov.w	r5, #0
 804051c:	f04f 0100 	mov.w	r1, #0
 8040520:	e750      	b.n	80403c4 <__adddf3+0x138>
 8040522:	bf00      	nop

08040524 <__aeabi_i2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804053c:	bf48      	it	mi
 804053e:	4240      	negmi	r0, r0
 8040540:	f04f 0100 	mov.w	r1, #0
 8040544:	e73e      	b.n	80403c4 <__adddf3+0x138>
 8040546:	bf00      	nop

08040548 <__aeabi_f2d>:
 8040548:	0042      	lsls	r2, r0, #1
 804054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040556:	bf1f      	itttt	ne
 8040558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040564:	4770      	bxne	lr
 8040566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804056a:	bf08      	it	eq
 804056c:	4770      	bxeq	lr
 804056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040572:	bf04      	itt	eq
 8040574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040578:	4770      	bxeq	lr
 804057a:	b530      	push	{r4, r5, lr}
 804057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040588:	e71c      	b.n	80403c4 <__adddf3+0x138>
 804058a:	bf00      	nop

0804058c <__aeabi_ul2d>:
 804058c:	ea50 0201 	orrs.w	r2, r0, r1
 8040590:	bf08      	it	eq
 8040592:	4770      	bxeq	lr
 8040594:	b530      	push	{r4, r5, lr}
 8040596:	f04f 0500 	mov.w	r5, #0
 804059a:	e00a      	b.n	80405b2 <__aeabi_l2d+0x16>

0804059c <__aeabi_l2d>:
 804059c:	ea50 0201 	orrs.w	r2, r0, r1
 80405a0:	bf08      	it	eq
 80405a2:	4770      	bxeq	lr
 80405a4:	b530      	push	{r4, r5, lr}
 80405a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405aa:	d502      	bpl.n	80405b2 <__aeabi_l2d+0x16>
 80405ac:	4240      	negs	r0, r0
 80405ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405be:	f43f aed8 	beq.w	8040372 <__adddf3+0xe6>
 80405c2:	f04f 0203 	mov.w	r2, #3
 80405c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ca:	bf18      	it	ne
 80405cc:	3203      	addne	r2, #3
 80405ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405d2:	bf18      	it	ne
 80405d4:	3203      	addne	r2, #3
 80405d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405da:	f1c2 0320 	rsb	r3, r2, #32
 80405de:	fa00 fc03 	lsl.w	ip, r0, r3
 80405e2:	fa20 f002 	lsr.w	r0, r0, r2
 80405e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80405ea:	ea40 000e 	orr.w	r0, r0, lr
 80405ee:	fa21 f102 	lsr.w	r1, r1, r2
 80405f2:	4414      	add	r4, r2
 80405f4:	e6bd      	b.n	8040372 <__adddf3+0xe6>
 80405f6:	bf00      	nop

080405f8 <__aeabi_dmul>:
 80405f8:	b570      	push	{r4, r5, r6, lr}
 80405fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040606:	bf1d      	ittte	ne
 8040608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804060c:	ea94 0f0c 	teqne	r4, ip
 8040610:	ea95 0f0c 	teqne	r5, ip
 8040614:	f000 f8de 	bleq	80407d4 <__aeabi_dmul+0x1dc>
 8040618:	442c      	add	r4, r5
 804061a:	ea81 0603 	eor.w	r6, r1, r3
 804061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804062a:	bf18      	it	ne
 804062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040638:	d038      	beq.n	80406ac <__aeabi_dmul+0xb4>
 804063a:	fba0 ce02 	umull	ip, lr, r0, r2
 804063e:	f04f 0500 	mov.w	r5, #0
 8040642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804064e:	f04f 0600 	mov.w	r6, #0
 8040652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040656:	f09c 0f00 	teq	ip, #0
 804065a:	bf18      	it	ne
 804065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804066c:	d204      	bcs.n	8040678 <__aeabi_dmul+0x80>
 804066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040672:	416d      	adcs	r5, r5
 8040674:	eb46 0606 	adc.w	r6, r6, r6
 8040678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040690:	bf88      	it	hi
 8040692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040696:	d81e      	bhi.n	80406d6 <__aeabi_dmul+0xde>
 8040698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804069c:	bf08      	it	eq
 804069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406a2:	f150 0000 	adcs.w	r0, r0, #0
 80406a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406aa:	bd70      	pop	{r4, r5, r6, pc}
 80406ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406b0:	ea46 0101 	orr.w	r1, r6, r1
 80406b4:	ea40 0002 	orr.w	r0, r0, r2
 80406b8:	ea81 0103 	eor.w	r1, r1, r3
 80406bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406c0:	bfc2      	ittt	gt
 80406c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	popgt	{r4, r5, r6, pc}
 80406cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406d0:	f04f 0e00 	mov.w	lr, #0
 80406d4:	3c01      	subs	r4, #1
 80406d6:	f300 80ab 	bgt.w	8040830 <__aeabi_dmul+0x238>
 80406da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406de:	bfde      	ittt	le
 80406e0:	2000      	movle	r0, #0
 80406e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406e6:	bd70      	pople	{r4, r5, r6, pc}
 80406e8:	f1c4 0400 	rsb	r4, r4, #0
 80406ec:	3c20      	subs	r4, #32
 80406ee:	da35      	bge.n	804075c <__aeabi_dmul+0x164>
 80406f0:	340c      	adds	r4, #12
 80406f2:	dc1b      	bgt.n	804072c <__aeabi_dmul+0x134>
 80406f4:	f104 0414 	add.w	r4, r4, #20
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f305 	lsl.w	r3, r0, r5
 8040700:	fa20 f004 	lsr.w	r0, r0, r4
 8040704:	fa01 f205 	lsl.w	r2, r1, r5
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040718:	fa21 f604 	lsr.w	r6, r1, r4
 804071c:	eb42 0106 	adc.w	r1, r2, r6
 8040720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040724:	bf08      	it	eq
 8040726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804072a:	bd70      	pop	{r4, r5, r6, pc}
 804072c:	f1c4 040c 	rsb	r4, r4, #12
 8040730:	f1c4 0520 	rsb	r5, r4, #32
 8040734:	fa00 f304 	lsl.w	r3, r0, r4
 8040738:	fa20 f005 	lsr.w	r0, r0, r5
 804073c:	fa01 f204 	lsl.w	r2, r1, r4
 8040740:	ea40 0002 	orr.w	r0, r0, r2
 8040744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804074c:	f141 0100 	adc.w	r1, r1, #0
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f1c4 0520 	rsb	r5, r4, #32
 8040760:	fa00 f205 	lsl.w	r2, r0, r5
 8040764:	ea4e 0e02 	orr.w	lr, lr, r2
 8040768:	fa20 f304 	lsr.w	r3, r0, r4
 804076c:	fa01 f205 	lsl.w	r2, r1, r5
 8040770:	ea43 0302 	orr.w	r3, r3, r2
 8040774:	fa21 f004 	lsr.w	r0, r1, r4
 8040778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804077c:	fa21 f204 	lsr.w	r2, r1, r4
 8040780:	ea20 0002 	bic.w	r0, r0, r2
 8040784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804078c:	bf08      	it	eq
 804078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040792:	bd70      	pop	{r4, r5, r6, pc}
 8040794:	f094 0f00 	teq	r4, #0
 8040798:	d10f      	bne.n	80407ba <__aeabi_dmul+0x1c2>
 804079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804079e:	0040      	lsls	r0, r0, #1
 80407a0:	eb41 0101 	adc.w	r1, r1, r1
 80407a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407a8:	bf08      	it	eq
 80407aa:	3c01      	subeq	r4, #1
 80407ac:	d0f7      	beq.n	804079e <__aeabi_dmul+0x1a6>
 80407ae:	ea41 0106 	orr.w	r1, r1, r6
 80407b2:	f095 0f00 	teq	r5, #0
 80407b6:	bf18      	it	ne
 80407b8:	4770      	bxne	lr
 80407ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407be:	0052      	lsls	r2, r2, #1
 80407c0:	eb43 0303 	adc.w	r3, r3, r3
 80407c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3d01      	subeq	r5, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1c6>
 80407ce:	ea43 0306 	orr.w	r3, r3, r6
 80407d2:	4770      	bx	lr
 80407d4:	ea94 0f0c 	teq	r4, ip
 80407d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407dc:	bf18      	it	ne
 80407de:	ea95 0f0c 	teqne	r5, ip
 80407e2:	d00c      	beq.n	80407fe <__aeabi_dmul+0x206>
 80407e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407e8:	bf18      	it	ne
 80407ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407ee:	d1d1      	bne.n	8040794 <__aeabi_dmul+0x19c>
 80407f0:	ea81 0103 	eor.w	r1, r1, r3
 80407f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407f8:	f04f 0000 	mov.w	r0, #0
 80407fc:	bd70      	pop	{r4, r5, r6, pc}
 80407fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040802:	bf06      	itte	eq
 8040804:	4610      	moveq	r0, r2
 8040806:	4619      	moveq	r1, r3
 8040808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080c:	d019      	beq.n	8040842 <__aeabi_dmul+0x24a>
 804080e:	ea94 0f0c 	teq	r4, ip
 8040812:	d102      	bne.n	804081a <__aeabi_dmul+0x222>
 8040814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040818:	d113      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804081a:	ea95 0f0c 	teq	r5, ip
 804081e:	d105      	bne.n	804082c <__aeabi_dmul+0x234>
 8040820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040824:	bf1c      	itt	ne
 8040826:	4610      	movne	r0, r2
 8040828:	4619      	movne	r1, r3
 804082a:	d10a      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804082c:	ea81 0103 	eor.w	r1, r1, r3
 8040830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804083c:	f04f 0000 	mov.w	r0, #0
 8040840:	bd70      	pop	{r4, r5, r6, pc}
 8040842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804084a:	bd70      	pop	{r4, r5, r6, pc}

0804084c <__aeabi_ddiv>:
 804084c:	b570      	push	{r4, r5, r6, lr}
 804084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804085a:	bf1d      	ittte	ne
 804085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040860:	ea94 0f0c 	teqne	r4, ip
 8040864:	ea95 0f0c 	teqne	r5, ip
 8040868:	f000 f8a7 	bleq	80409ba <__aeabi_ddiv+0x16e>
 804086c:	eba4 0405 	sub.w	r4, r4, r5
 8040870:	ea81 0e03 	eor.w	lr, r1, r3
 8040874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804087c:	f000 8088 	beq.w	8040990 <__aeabi_ddiv+0x144>
 8040880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408a4:	429d      	cmp	r5, r3
 80408a6:	bf08      	it	eq
 80408a8:	4296      	cmpeq	r6, r2
 80408aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408b2:	d202      	bcs.n	80408ba <__aeabi_ddiv+0x6e>
 80408b4:	085b      	lsrs	r3, r3, #1
 80408b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ba:	1ab6      	subs	r6, r6, r2
 80408bc:	eb65 0503 	sbc.w	r5, r5, r3
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ee:	bf22      	ittt	cs
 80408f0:	1ab6      	subcs	r6, r6, r2
 80408f2:	4675      	movcs	r5, lr
 80408f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408f8:	085b      	lsrs	r3, r3, #1
 80408fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8040902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040906:	bf22      	ittt	cs
 8040908:	1ab6      	subcs	r6, r6, r2
 804090a:	4675      	movcs	r5, lr
 804090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040910:	085b      	lsrs	r3, r3, #1
 8040912:	ea4f 0232 	mov.w	r2, r2, rrx
 8040916:	ebb6 0e02 	subs.w	lr, r6, r2
 804091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804091e:	bf22      	ittt	cs
 8040920:	1ab6      	subcs	r6, r6, r2
 8040922:	4675      	movcs	r5, lr
 8040924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040928:	ea55 0e06 	orrs.w	lr, r5, r6
 804092c:	d018      	beq.n	8040960 <__aeabi_ddiv+0x114>
 804092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804094a:	d1c0      	bne.n	80408ce <__aeabi_ddiv+0x82>
 804094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040950:	d10b      	bne.n	804096a <__aeabi_ddiv+0x11e>
 8040952:	ea41 0100 	orr.w	r1, r1, r0
 8040956:	f04f 0000 	mov.w	r0, #0
 804095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804095e:	e7b6      	b.n	80408ce <__aeabi_ddiv+0x82>
 8040960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040964:	bf04      	itt	eq
 8040966:	4301      	orreq	r1, r0
 8040968:	2000      	moveq	r0, #0
 804096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804096e:	bf88      	it	hi
 8040970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040974:	f63f aeaf 	bhi.w	80406d6 <__aeabi_dmul+0xde>
 8040978:	ebb5 0c03 	subs.w	ip, r5, r3
 804097c:	bf04      	itt	eq
 804097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040986:	f150 0000 	adcs.w	r0, r0, #0
 804098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804098e:	bd70      	pop	{r4, r5, r6, pc}
 8040990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804099c:	bfc2      	ittt	gt
 804099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409a6:	bd70      	popgt	{r4, r5, r6, pc}
 80409a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409ac:	f04f 0e00 	mov.w	lr, #0
 80409b0:	3c01      	subs	r4, #1
 80409b2:	e690      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409b4:	ea45 0e06 	orr.w	lr, r5, r6
 80409b8:	e68d      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409be:	ea94 0f0c 	teq	r4, ip
 80409c2:	bf08      	it	eq
 80409c4:	ea95 0f0c 	teqeq	r5, ip
 80409c8:	f43f af3b 	beq.w	8040842 <__aeabi_dmul+0x24a>
 80409cc:	ea94 0f0c 	teq	r4, ip
 80409d0:	d10a      	bne.n	80409e8 <__aeabi_ddiv+0x19c>
 80409d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409d6:	f47f af34 	bne.w	8040842 <__aeabi_dmul+0x24a>
 80409da:	ea95 0f0c 	teq	r5, ip
 80409de:	f47f af25 	bne.w	804082c <__aeabi_dmul+0x234>
 80409e2:	4610      	mov	r0, r2
 80409e4:	4619      	mov	r1, r3
 80409e6:	e72c      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409e8:	ea95 0f0c 	teq	r5, ip
 80409ec:	d106      	bne.n	80409fc <__aeabi_ddiv+0x1b0>
 80409ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409f2:	f43f aefd 	beq.w	80407f0 <__aeabi_dmul+0x1f8>
 80409f6:	4610      	mov	r0, r2
 80409f8:	4619      	mov	r1, r3
 80409fa:	e722      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a00:	bf18      	it	ne
 8040a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a06:	f47f aec5 	bne.w	8040794 <__aeabi_dmul+0x19c>
 8040a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a0e:	f47f af0d 	bne.w	804082c <__aeabi_dmul+0x234>
 8040a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a16:	f47f aeeb 	bne.w	80407f0 <__aeabi_dmul+0x1f8>
 8040a1a:	e712      	b.n	8040842 <__aeabi_dmul+0x24a>

08040a1c <__gedf2>:
 8040a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a20:	e006      	b.n	8040a30 <__cmpdf2+0x4>
 8040a22:	bf00      	nop

08040a24 <__ledf2>:
 8040a24:	f04f 0c01 	mov.w	ip, #1
 8040a28:	e002      	b.n	8040a30 <__cmpdf2+0x4>
 8040a2a:	bf00      	nop

08040a2c <__cmpdf2>:
 8040a2c:	f04f 0c01 	mov.w	ip, #1
 8040a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a40:	bf18      	it	ne
 8040a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a46:	d01b      	beq.n	8040a80 <__cmpdf2+0x54>
 8040a48:	b001      	add	sp, #4
 8040a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a4e:	bf0c      	ite	eq
 8040a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a54:	ea91 0f03 	teqne	r1, r3
 8040a58:	bf02      	ittt	eq
 8040a5a:	ea90 0f02 	teqeq	r0, r2
 8040a5e:	2000      	moveq	r0, #0
 8040a60:	4770      	bxeq	lr
 8040a62:	f110 0f00 	cmn.w	r0, #0
 8040a66:	ea91 0f03 	teq	r1, r3
 8040a6a:	bf58      	it	pl
 8040a6c:	4299      	cmppl	r1, r3
 8040a6e:	bf08      	it	eq
 8040a70:	4290      	cmpeq	r0, r2
 8040a72:	bf2c      	ite	cs
 8040a74:	17d8      	asrcs	r0, r3, #31
 8040a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a7a:	f040 0001 	orr.w	r0, r0, #1
 8040a7e:	4770      	bx	lr
 8040a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a88:	d102      	bne.n	8040a90 <__cmpdf2+0x64>
 8040a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a8e:	d107      	bne.n	8040aa0 <__cmpdf2+0x74>
 8040a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a98:	d1d6      	bne.n	8040a48 <__cmpdf2+0x1c>
 8040a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a9e:	d0d3      	beq.n	8040a48 <__cmpdf2+0x1c>
 8040aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040aa4:	4770      	bx	lr
 8040aa6:	bf00      	nop

08040aa8 <__aeabi_cdrcmple>:
 8040aa8:	4684      	mov	ip, r0
 8040aaa:	4610      	mov	r0, r2
 8040aac:	4662      	mov	r2, ip
 8040aae:	468c      	mov	ip, r1
 8040ab0:	4619      	mov	r1, r3
 8040ab2:	4663      	mov	r3, ip
 8040ab4:	e000      	b.n	8040ab8 <__aeabi_cdcmpeq>
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_cdcmpeq>:
 8040ab8:	b501      	push	{r0, lr}
 8040aba:	f7ff ffb7 	bl	8040a2c <__cmpdf2>
 8040abe:	2800      	cmp	r0, #0
 8040ac0:	bf48      	it	mi
 8040ac2:	f110 0f00 	cmnmi.w	r0, #0
 8040ac6:	bd01      	pop	{r0, pc}

08040ac8 <__aeabi_dcmpeq>:
 8040ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040acc:	f7ff fff4 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ad0:	bf0c      	ite	eq
 8040ad2:	2001      	moveq	r0, #1
 8040ad4:	2000      	movne	r0, #0
 8040ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ada:	bf00      	nop

08040adc <__aeabi_dcmplt>:
 8040adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae0:	f7ff ffea 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ae4:	bf34      	ite	cc
 8040ae6:	2001      	movcc	r0, #1
 8040ae8:	2000      	movcs	r0, #0
 8040aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aee:	bf00      	nop

08040af0 <__aeabi_dcmple>:
 8040af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040af4:	f7ff ffe0 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040af8:	bf94      	ite	ls
 8040afa:	2001      	movls	r0, #1
 8040afc:	2000      	movhi	r0, #0
 8040afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b02:	bf00      	nop

08040b04 <__aeabi_dcmpge>:
 8040b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b08:	f7ff ffce 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b0c:	bf94      	ite	ls
 8040b0e:	2001      	movls	r0, #1
 8040b10:	2000      	movhi	r0, #0
 8040b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b16:	bf00      	nop

08040b18 <__aeabi_dcmpgt>:
 8040b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b1c:	f7ff ffc4 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b20:	bf34      	ite	cc
 8040b22:	2001      	movcc	r0, #1
 8040b24:	2000      	movcs	r0, #0
 8040b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b2a:	bf00      	nop

08040b2c <__aeabi_dcmpun>:
 8040b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b34:	d102      	bne.n	8040b3c <__aeabi_dcmpun+0x10>
 8040b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b3a:	d10a      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b44:	d102      	bne.n	8040b4c <__aeabi_dcmpun+0x20>
 8040b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b4a:	d102      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b4c:	f04f 0000 	mov.w	r0, #0
 8040b50:	4770      	bx	lr
 8040b52:	f04f 0001 	mov.w	r0, #1
 8040b56:	4770      	bx	lr

08040b58 <__aeabi_d2iz>:
 8040b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b60:	d215      	bcs.n	8040b8e <__aeabi_d2iz+0x36>
 8040b62:	d511      	bpl.n	8040b88 <__aeabi_d2iz+0x30>
 8040b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b6c:	d912      	bls.n	8040b94 <__aeabi_d2iz+0x3c>
 8040b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8040b82:	bf18      	it	ne
 8040b84:	4240      	negne	r0, r0
 8040b86:	4770      	bx	lr
 8040b88:	f04f 0000 	mov.w	r0, #0
 8040b8c:	4770      	bx	lr
 8040b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b92:	d105      	bne.n	8040ba0 <__aeabi_d2iz+0x48>
 8040b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b98:	bf08      	it	eq
 8040b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b9e:	4770      	bx	lr
 8040ba0:	f04f 0000 	mov.w	r0, #0
 8040ba4:	4770      	bx	lr
 8040ba6:	bf00      	nop

08040ba8 <__aeabi_d2uiz>:
 8040ba8:	004a      	lsls	r2, r1, #1
 8040baa:	d211      	bcs.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040bb0:	d211      	bcs.n	8040bd6 <__aeabi_d2uiz+0x2e>
 8040bb2:	d50d      	bpl.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040bbc:	d40e      	bmi.n	8040bdc <__aeabi_d2uiz+0x34>
 8040bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040bca:	fa23 f002 	lsr.w	r0, r3, r2
 8040bce:	4770      	bx	lr
 8040bd0:	f04f 0000 	mov.w	r0, #0
 8040bd4:	4770      	bx	lr
 8040bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bda:	d102      	bne.n	8040be2 <__aeabi_d2uiz+0x3a>
 8040bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8040be0:	4770      	bx	lr
 8040be2:	f04f 0000 	mov.w	r0, #0
 8040be6:	4770      	bx	lr

08040be8 <__aeabi_d2f>:
 8040be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040bf0:	bf24      	itt	cs
 8040bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040bfa:	d90d      	bls.n	8040c18 <__aeabi_d2f+0x30>
 8040bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040c10:	bf08      	it	eq
 8040c12:	f020 0001 	biceq.w	r0, r0, #1
 8040c16:	4770      	bx	lr
 8040c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040c1c:	d121      	bne.n	8040c62 <__aeabi_d2f+0x7a>
 8040c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040c22:	bfbc      	itt	lt
 8040c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040c28:	4770      	bxlt	lr
 8040c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040c32:	f1c2 0218 	rsb	r2, r2, #24
 8040c36:	f1c2 0c20 	rsb	ip, r2, #32
 8040c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8040c42:	bf18      	it	ne
 8040c44:	f040 0001 	orrne.w	r0, r0, #1
 8040c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c54:	ea40 000c 	orr.w	r0, r0, ip
 8040c58:	fa23 f302 	lsr.w	r3, r3, r2
 8040c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c60:	e7cc      	b.n	8040bfc <__aeabi_d2f+0x14>
 8040c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c66:	d107      	bne.n	8040c78 <__aeabi_d2f+0x90>
 8040c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c6c:	bf1e      	ittt	ne
 8040c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040c76:	4770      	bxne	lr
 8040c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040c84:	4770      	bx	lr
 8040c86:	bf00      	nop

08040c88 <__aeabi_uldivmod>:
 8040c88:	b953      	cbnz	r3, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8a:	b94a      	cbnz	r2, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8c:	2900      	cmp	r1, #0
 8040c8e:	bf08      	it	eq
 8040c90:	2800      	cmpeq	r0, #0
 8040c92:	bf1c      	itt	ne
 8040c94:	f04f 31ff 	movne.w	r1, #4294967295
 8040c98:	f04f 30ff 	movne.w	r0, #4294967295
 8040c9c:	f000 b9aa 	b.w	8040ff4 <__aeabi_idiv0>
 8040ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040ca8:	f000 f83c 	bl	8040d24 <__udivmoddi4>
 8040cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040cb4:	b004      	add	sp, #16
 8040cb6:	4770      	bx	lr

08040cb8 <__aeabi_d2lz>:
 8040cb8:	b538      	push	{r3, r4, r5, lr}
 8040cba:	2200      	movs	r2, #0
 8040cbc:	2300      	movs	r3, #0
 8040cbe:	4604      	mov	r4, r0
 8040cc0:	460d      	mov	r5, r1
 8040cc2:	f7ff ff0b 	bl	8040adc <__aeabi_dcmplt>
 8040cc6:	b928      	cbnz	r0, 8040cd4 <__aeabi_d2lz+0x1c>
 8040cc8:	4620      	mov	r0, r4
 8040cca:	4629      	mov	r1, r5
 8040ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040cd0:	f000 b80a 	b.w	8040ce8 <__aeabi_d2ulz>
 8040cd4:	4620      	mov	r0, r4
 8040cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040cda:	f000 f805 	bl	8040ce8 <__aeabi_d2ulz>
 8040cde:	4240      	negs	r0, r0
 8040ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040ce4:	bd38      	pop	{r3, r4, r5, pc}
 8040ce6:	bf00      	nop

08040ce8 <__aeabi_d2ulz>:
 8040ce8:	b5d0      	push	{r4, r6, r7, lr}
 8040cea:	4b0c      	ldr	r3, [pc, #48]	; (8040d1c <__aeabi_d2ulz+0x34>)
 8040cec:	2200      	movs	r2, #0
 8040cee:	4606      	mov	r6, r0
 8040cf0:	460f      	mov	r7, r1
 8040cf2:	f7ff fc81 	bl	80405f8 <__aeabi_dmul>
 8040cf6:	f7ff ff57 	bl	8040ba8 <__aeabi_d2uiz>
 8040cfa:	4604      	mov	r4, r0
 8040cfc:	f7ff fc02 	bl	8040504 <__aeabi_ui2d>
 8040d00:	4b07      	ldr	r3, [pc, #28]	; (8040d20 <__aeabi_d2ulz+0x38>)
 8040d02:	2200      	movs	r2, #0
 8040d04:	f7ff fc78 	bl	80405f8 <__aeabi_dmul>
 8040d08:	4602      	mov	r2, r0
 8040d0a:	460b      	mov	r3, r1
 8040d0c:	4630      	mov	r0, r6
 8040d0e:	4639      	mov	r1, r7
 8040d10:	f7ff faba 	bl	8040288 <__aeabi_dsub>
 8040d14:	f7ff ff48 	bl	8040ba8 <__aeabi_d2uiz>
 8040d18:	4621      	mov	r1, r4
 8040d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8040d1c:	3df00000 	.word	0x3df00000
 8040d20:	41f00000 	.word	0x41f00000

08040d24 <__udivmoddi4>:
 8040d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040d28:	9d08      	ldr	r5, [sp, #32]
 8040d2a:	4604      	mov	r4, r0
 8040d2c:	468e      	mov	lr, r1
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	d14d      	bne.n	8040dce <__udivmoddi4+0xaa>
 8040d32:	428a      	cmp	r2, r1
 8040d34:	4694      	mov	ip, r2
 8040d36:	d969      	bls.n	8040e0c <__udivmoddi4+0xe8>
 8040d38:	fab2 f282 	clz	r2, r2
 8040d3c:	b152      	cbz	r2, 8040d54 <__udivmoddi4+0x30>
 8040d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8040d42:	f1c2 0120 	rsb	r1, r2, #32
 8040d46:	fa20 f101 	lsr.w	r1, r0, r1
 8040d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8040d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8040d52:	4094      	lsls	r4, r2
 8040d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040d58:	0c21      	lsrs	r1, r4, #16
 8040d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8040d5e:	fa1f f78c 	uxth.w	r7, ip
 8040d62:	fb08 e316 	mls	r3, r8, r6, lr
 8040d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040d6a:	fb06 f107 	mul.w	r1, r6, r7
 8040d6e:	4299      	cmp	r1, r3
 8040d70:	d90a      	bls.n	8040d88 <__udivmoddi4+0x64>
 8040d72:	eb1c 0303 	adds.w	r3, ip, r3
 8040d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8040d7a:	f080 811f 	bcs.w	8040fbc <__udivmoddi4+0x298>
 8040d7e:	4299      	cmp	r1, r3
 8040d80:	f240 811c 	bls.w	8040fbc <__udivmoddi4+0x298>
 8040d84:	3e02      	subs	r6, #2
 8040d86:	4463      	add	r3, ip
 8040d88:	1a5b      	subs	r3, r3, r1
 8040d8a:	b2a4      	uxth	r4, r4
 8040d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040d90:	fb08 3310 	mls	r3, r8, r0, r3
 8040d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040d98:	fb00 f707 	mul.w	r7, r0, r7
 8040d9c:	42a7      	cmp	r7, r4
 8040d9e:	d90a      	bls.n	8040db6 <__udivmoddi4+0x92>
 8040da0:	eb1c 0404 	adds.w	r4, ip, r4
 8040da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8040da8:	f080 810a 	bcs.w	8040fc0 <__udivmoddi4+0x29c>
 8040dac:	42a7      	cmp	r7, r4
 8040dae:	f240 8107 	bls.w	8040fc0 <__udivmoddi4+0x29c>
 8040db2:	4464      	add	r4, ip
 8040db4:	3802      	subs	r0, #2
 8040db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040dba:	1be4      	subs	r4, r4, r7
 8040dbc:	2600      	movs	r6, #0
 8040dbe:	b11d      	cbz	r5, 8040dc8 <__udivmoddi4+0xa4>
 8040dc0:	40d4      	lsrs	r4, r2
 8040dc2:	2300      	movs	r3, #0
 8040dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8040dc8:	4631      	mov	r1, r6
 8040dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040dce:	428b      	cmp	r3, r1
 8040dd0:	d909      	bls.n	8040de6 <__udivmoddi4+0xc2>
 8040dd2:	2d00      	cmp	r5, #0
 8040dd4:	f000 80ef 	beq.w	8040fb6 <__udivmoddi4+0x292>
 8040dd8:	2600      	movs	r6, #0
 8040dda:	e9c5 0100 	strd	r0, r1, [r5]
 8040dde:	4630      	mov	r0, r6
 8040de0:	4631      	mov	r1, r6
 8040de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040de6:	fab3 f683 	clz	r6, r3
 8040dea:	2e00      	cmp	r6, #0
 8040dec:	d14a      	bne.n	8040e84 <__udivmoddi4+0x160>
 8040dee:	428b      	cmp	r3, r1
 8040df0:	d302      	bcc.n	8040df8 <__udivmoddi4+0xd4>
 8040df2:	4282      	cmp	r2, r0
 8040df4:	f200 80f9 	bhi.w	8040fea <__udivmoddi4+0x2c6>
 8040df8:	1a84      	subs	r4, r0, r2
 8040dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8040dfe:	2001      	movs	r0, #1
 8040e00:	469e      	mov	lr, r3
 8040e02:	2d00      	cmp	r5, #0
 8040e04:	d0e0      	beq.n	8040dc8 <__udivmoddi4+0xa4>
 8040e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8040e0a:	e7dd      	b.n	8040dc8 <__udivmoddi4+0xa4>
 8040e0c:	b902      	cbnz	r2, 8040e10 <__udivmoddi4+0xec>
 8040e0e:	deff      	udf	#255	; 0xff
 8040e10:	fab2 f282 	clz	r2, r2
 8040e14:	2a00      	cmp	r2, #0
 8040e16:	f040 8092 	bne.w	8040f3e <__udivmoddi4+0x21a>
 8040e1a:	eba1 010c 	sub.w	r1, r1, ip
 8040e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040e22:	fa1f fe8c 	uxth.w	lr, ip
 8040e26:	2601      	movs	r6, #1
 8040e28:	0c20      	lsrs	r0, r4, #16
 8040e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8040e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8040e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040e36:	fb0e f003 	mul.w	r0, lr, r3
 8040e3a:	4288      	cmp	r0, r1
 8040e3c:	d908      	bls.n	8040e50 <__udivmoddi4+0x12c>
 8040e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8040e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8040e46:	d202      	bcs.n	8040e4e <__udivmoddi4+0x12a>
 8040e48:	4288      	cmp	r0, r1
 8040e4a:	f200 80cb 	bhi.w	8040fe4 <__udivmoddi4+0x2c0>
 8040e4e:	4643      	mov	r3, r8
 8040e50:	1a09      	subs	r1, r1, r0
 8040e52:	b2a4      	uxth	r4, r4
 8040e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8040e58:	fb07 1110 	mls	r1, r7, r0, r1
 8040e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040e60:	fb0e fe00 	mul.w	lr, lr, r0
 8040e64:	45a6      	cmp	lr, r4
 8040e66:	d908      	bls.n	8040e7a <__udivmoddi4+0x156>
 8040e68:	eb1c 0404 	adds.w	r4, ip, r4
 8040e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8040e70:	d202      	bcs.n	8040e78 <__udivmoddi4+0x154>
 8040e72:	45a6      	cmp	lr, r4
 8040e74:	f200 80bb 	bhi.w	8040fee <__udivmoddi4+0x2ca>
 8040e78:	4608      	mov	r0, r1
 8040e7a:	eba4 040e 	sub.w	r4, r4, lr
 8040e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040e82:	e79c      	b.n	8040dbe <__udivmoddi4+0x9a>
 8040e84:	f1c6 0720 	rsb	r7, r6, #32
 8040e88:	40b3      	lsls	r3, r6
 8040e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8040e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8040e92:	fa20 f407 	lsr.w	r4, r0, r7
 8040e96:	fa01 f306 	lsl.w	r3, r1, r6
 8040e9a:	431c      	orrs	r4, r3
 8040e9c:	40f9      	lsrs	r1, r7
 8040e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8040ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8040eaa:	0c20      	lsrs	r0, r4, #16
 8040eac:	fa1f fe8c 	uxth.w	lr, ip
 8040eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8040eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8040ebc:	4288      	cmp	r0, r1
 8040ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8040ec2:	d90b      	bls.n	8040edc <__udivmoddi4+0x1b8>
 8040ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8040ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8040ecc:	f080 8088 	bcs.w	8040fe0 <__udivmoddi4+0x2bc>
 8040ed0:	4288      	cmp	r0, r1
 8040ed2:	f240 8085 	bls.w	8040fe0 <__udivmoddi4+0x2bc>
 8040ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8040eda:	4461      	add	r1, ip
 8040edc:	1a09      	subs	r1, r1, r0
 8040ede:	b2a4      	uxth	r4, r4
 8040ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8040ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8040ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8040ef0:	458e      	cmp	lr, r1
 8040ef2:	d908      	bls.n	8040f06 <__udivmoddi4+0x1e2>
 8040ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8040ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8040efc:	d26c      	bcs.n	8040fd8 <__udivmoddi4+0x2b4>
 8040efe:	458e      	cmp	lr, r1
 8040f00:	d96a      	bls.n	8040fd8 <__udivmoddi4+0x2b4>
 8040f02:	3802      	subs	r0, #2
 8040f04:	4461      	add	r1, ip
 8040f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8040f0e:	eba1 010e 	sub.w	r1, r1, lr
 8040f12:	42a1      	cmp	r1, r4
 8040f14:	46c8      	mov	r8, r9
 8040f16:	46a6      	mov	lr, r4
 8040f18:	d356      	bcc.n	8040fc8 <__udivmoddi4+0x2a4>
 8040f1a:	d053      	beq.n	8040fc4 <__udivmoddi4+0x2a0>
 8040f1c:	b15d      	cbz	r5, 8040f36 <__udivmoddi4+0x212>
 8040f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8040f22:	eb61 010e 	sbc.w	r1, r1, lr
 8040f26:	fa01 f707 	lsl.w	r7, r1, r7
 8040f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8040f2e:	40f1      	lsrs	r1, r6
 8040f30:	431f      	orrs	r7, r3
 8040f32:	e9c5 7100 	strd	r7, r1, [r5]
 8040f36:	2600      	movs	r6, #0
 8040f38:	4631      	mov	r1, r6
 8040f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040f3e:	f1c2 0320 	rsb	r3, r2, #32
 8040f42:	40d8      	lsrs	r0, r3
 8040f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8040f48:	fa21 f303 	lsr.w	r3, r1, r3
 8040f4c:	4091      	lsls	r1, r2
 8040f4e:	4301      	orrs	r1, r0
 8040f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040f54:	fa1f fe8c 	uxth.w	lr, ip
 8040f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8040f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8040f60:	0c0b      	lsrs	r3, r1, #16
 8040f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040f66:	fb00 f60e 	mul.w	r6, r0, lr
 8040f6a:	429e      	cmp	r6, r3
 8040f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8040f70:	d908      	bls.n	8040f84 <__udivmoddi4+0x260>
 8040f72:	eb1c 0303 	adds.w	r3, ip, r3
 8040f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8040f7a:	d22f      	bcs.n	8040fdc <__udivmoddi4+0x2b8>
 8040f7c:	429e      	cmp	r6, r3
 8040f7e:	d92d      	bls.n	8040fdc <__udivmoddi4+0x2b8>
 8040f80:	3802      	subs	r0, #2
 8040f82:	4463      	add	r3, ip
 8040f84:	1b9b      	subs	r3, r3, r6
 8040f86:	b289      	uxth	r1, r1
 8040f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8040f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8040f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040f94:	fb06 f30e 	mul.w	r3, r6, lr
 8040f98:	428b      	cmp	r3, r1
 8040f9a:	d908      	bls.n	8040fae <__udivmoddi4+0x28a>
 8040f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8040fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8040fa4:	d216      	bcs.n	8040fd4 <__udivmoddi4+0x2b0>
 8040fa6:	428b      	cmp	r3, r1
 8040fa8:	d914      	bls.n	8040fd4 <__udivmoddi4+0x2b0>
 8040faa:	3e02      	subs	r6, #2
 8040fac:	4461      	add	r1, ip
 8040fae:	1ac9      	subs	r1, r1, r3
 8040fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040fb4:	e738      	b.n	8040e28 <__udivmoddi4+0x104>
 8040fb6:	462e      	mov	r6, r5
 8040fb8:	4628      	mov	r0, r5
 8040fba:	e705      	b.n	8040dc8 <__udivmoddi4+0xa4>
 8040fbc:	4606      	mov	r6, r0
 8040fbe:	e6e3      	b.n	8040d88 <__udivmoddi4+0x64>
 8040fc0:	4618      	mov	r0, r3
 8040fc2:	e6f8      	b.n	8040db6 <__udivmoddi4+0x92>
 8040fc4:	454b      	cmp	r3, r9
 8040fc6:	d2a9      	bcs.n	8040f1c <__udivmoddi4+0x1f8>
 8040fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8040fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040fd0:	3801      	subs	r0, #1
 8040fd2:	e7a3      	b.n	8040f1c <__udivmoddi4+0x1f8>
 8040fd4:	4646      	mov	r6, r8
 8040fd6:	e7ea      	b.n	8040fae <__udivmoddi4+0x28a>
 8040fd8:	4620      	mov	r0, r4
 8040fda:	e794      	b.n	8040f06 <__udivmoddi4+0x1e2>
 8040fdc:	4640      	mov	r0, r8
 8040fde:	e7d1      	b.n	8040f84 <__udivmoddi4+0x260>
 8040fe0:	46d0      	mov	r8, sl
 8040fe2:	e77b      	b.n	8040edc <__udivmoddi4+0x1b8>
 8040fe4:	3b02      	subs	r3, #2
 8040fe6:	4461      	add	r1, ip
 8040fe8:	e732      	b.n	8040e50 <__udivmoddi4+0x12c>
 8040fea:	4630      	mov	r0, r6
 8040fec:	e709      	b.n	8040e02 <__udivmoddi4+0xde>
 8040fee:	4464      	add	r4, ip
 8040ff0:	3802      	subs	r0, #2
 8040ff2:	e742      	b.n	8040e7a <__udivmoddi4+0x156>

08040ff4 <__aeabi_idiv0>:
 8040ff4:	4770      	bx	lr
 8040ff6:	bf00      	nop

08040ff8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8040ff8:	b480      	push	{r7}
 8040ffa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8040ffc:	f3bf 8f4f 	dsb	sy
}
 8041000:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8041002:	4b06      	ldr	r3, [pc, #24]	; (804101c <__NVIC_SystemReset+0x24>)
 8041004:	68db      	ldr	r3, [r3, #12]
 8041006:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 804100a:	4904      	ldr	r1, [pc, #16]	; (804101c <__NVIC_SystemReset+0x24>)
 804100c:	4b04      	ldr	r3, [pc, #16]	; (8041020 <__NVIC_SystemReset+0x28>)
 804100e:	4313      	orrs	r3, r2
 8041010:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8041012:	f3bf 8f4f 	dsb	sy
}
 8041016:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8041018:	bf00      	nop
 804101a:	e7fd      	b.n	8041018 <__NVIC_SystemReset+0x20>
 804101c:	e000ed00 	.word	0xe000ed00
 8041020:	05fa0004 	.word	0x05fa0004

08041024 <reverse>:
uint16_t counterBank2;
arm_pid_instance_f32 PID;
msTempControlParams *p_CtrlParams = &CtrlParams;
extern uint32_t u32_EEPromErrCnt;
void reverse(unsigned char* str, int len)
{
 8041024:	b480      	push	{r7}
 8041026:	b087      	sub	sp, #28
 8041028:	af00      	add	r7, sp, #0
 804102a:	6078      	str	r0, [r7, #4]
 804102c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 804102e:	2300      	movs	r3, #0
 8041030:	617b      	str	r3, [r7, #20]
 8041032:	683b      	ldr	r3, [r7, #0]
 8041034:	3b01      	subs	r3, #1
 8041036:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8041038:	e018      	b.n	804106c <reverse+0x48>
        temp = str[i];
 804103a:	697b      	ldr	r3, [r7, #20]
 804103c:	687a      	ldr	r2, [r7, #4]
 804103e:	4413      	add	r3, r2
 8041040:	781b      	ldrb	r3, [r3, #0]
 8041042:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8041044:	693b      	ldr	r3, [r7, #16]
 8041046:	687a      	ldr	r2, [r7, #4]
 8041048:	441a      	add	r2, r3
 804104a:	697b      	ldr	r3, [r7, #20]
 804104c:	6879      	ldr	r1, [r7, #4]
 804104e:	440b      	add	r3, r1
 8041050:	7812      	ldrb	r2, [r2, #0]
 8041052:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8041054:	693b      	ldr	r3, [r7, #16]
 8041056:	687a      	ldr	r2, [r7, #4]
 8041058:	4413      	add	r3, r2
 804105a:	68fa      	ldr	r2, [r7, #12]
 804105c:	b2d2      	uxtb	r2, r2
 804105e:	701a      	strb	r2, [r3, #0]
        i++;
 8041060:	697b      	ldr	r3, [r7, #20]
 8041062:	3301      	adds	r3, #1
 8041064:	617b      	str	r3, [r7, #20]
        j--;
 8041066:	693b      	ldr	r3, [r7, #16]
 8041068:	3b01      	subs	r3, #1
 804106a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 804106c:	697a      	ldr	r2, [r7, #20]
 804106e:	693b      	ldr	r3, [r7, #16]
 8041070:	429a      	cmp	r2, r3
 8041072:	dbe2      	blt.n	804103a <reverse+0x16>
    }
}
 8041074:	bf00      	nop
 8041076:	bf00      	nop
 8041078:	371c      	adds	r7, #28
 804107a:	46bd      	mov	sp, r7
 804107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041080:	4770      	bx	lr
	...

08041084 <intToStr>:


int intToStr(int x, unsigned char str[], int d)
{
 8041084:	b580      	push	{r7, lr}
 8041086:	b086      	sub	sp, #24
 8041088:	af00      	add	r7, sp, #0
 804108a:	60f8      	str	r0, [r7, #12]
 804108c:	60b9      	str	r1, [r7, #8]
 804108e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8041090:	2300      	movs	r3, #0
 8041092:	617b      	str	r3, [r7, #20]
    while (x) {
 8041094:	e01d      	b.n	80410d2 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8041096:	68fa      	ldr	r2, [r7, #12]
 8041098:	4b1d      	ldr	r3, [pc, #116]	; (8041110 <intToStr+0x8c>)
 804109a:	fb83 1302 	smull	r1, r3, r3, r2
 804109e:	1099      	asrs	r1, r3, #2
 80410a0:	17d3      	asrs	r3, r2, #31
 80410a2:	1ac9      	subs	r1, r1, r3
 80410a4:	460b      	mov	r3, r1
 80410a6:	009b      	lsls	r3, r3, #2
 80410a8:	440b      	add	r3, r1
 80410aa:	005b      	lsls	r3, r3, #1
 80410ac:	1ad1      	subs	r1, r2, r3
 80410ae:	b2ca      	uxtb	r2, r1
 80410b0:	697b      	ldr	r3, [r7, #20]
 80410b2:	1c59      	adds	r1, r3, #1
 80410b4:	6179      	str	r1, [r7, #20]
 80410b6:	4619      	mov	r1, r3
 80410b8:	68bb      	ldr	r3, [r7, #8]
 80410ba:	440b      	add	r3, r1
 80410bc:	3230      	adds	r2, #48	; 0x30
 80410be:	b2d2      	uxtb	r2, r2
 80410c0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80410c2:	68fb      	ldr	r3, [r7, #12]
 80410c4:	4a12      	ldr	r2, [pc, #72]	; (8041110 <intToStr+0x8c>)
 80410c6:	fb82 1203 	smull	r1, r2, r2, r3
 80410ca:	1092      	asrs	r2, r2, #2
 80410cc:	17db      	asrs	r3, r3, #31
 80410ce:	1ad3      	subs	r3, r2, r3
 80410d0:	60fb      	str	r3, [r7, #12]
    while (x) {
 80410d2:	68fb      	ldr	r3, [r7, #12]
 80410d4:	2b00      	cmp	r3, #0
 80410d6:	d1de      	bne.n	8041096 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80410d8:	e007      	b.n	80410ea <intToStr+0x66>
        str[i++] = '0';
 80410da:	697b      	ldr	r3, [r7, #20]
 80410dc:	1c5a      	adds	r2, r3, #1
 80410de:	617a      	str	r2, [r7, #20]
 80410e0:	461a      	mov	r2, r3
 80410e2:	68bb      	ldr	r3, [r7, #8]
 80410e4:	4413      	add	r3, r2
 80410e6:	2230      	movs	r2, #48	; 0x30
 80410e8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80410ea:	697a      	ldr	r2, [r7, #20]
 80410ec:	687b      	ldr	r3, [r7, #4]
 80410ee:	429a      	cmp	r2, r3
 80410f0:	dbf3      	blt.n	80410da <intToStr+0x56>

    reverse(str, i);
 80410f2:	6979      	ldr	r1, [r7, #20]
 80410f4:	68b8      	ldr	r0, [r7, #8]
 80410f6:	f7ff ff95 	bl	8041024 <reverse>
    str[i] = '\0';
 80410fa:	697b      	ldr	r3, [r7, #20]
 80410fc:	68ba      	ldr	r2, [r7, #8]
 80410fe:	4413      	add	r3, r2
 8041100:	2200      	movs	r2, #0
 8041102:	701a      	strb	r2, [r3, #0]
    return i;
 8041104:	697b      	ldr	r3, [r7, #20]
}
 8041106:	4618      	mov	r0, r3
 8041108:	3718      	adds	r7, #24
 804110a:	46bd      	mov	sp, r7
 804110c:	bd80      	pop	{r7, pc}
 804110e:	bf00      	nop
 8041110:	66666667 	.word	0x66666667
 8041114:	00000000 	.word	0x00000000

08041118 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, unsigned char* res, int afterpoint)
{
 8041118:	b5b0      	push	{r4, r5, r7, lr}
 804111a:	b088      	sub	sp, #32
 804111c:	af00      	add	r7, sp, #0
 804111e:	ed87 0a03 	vstr	s0, [r7, #12]
 8041122:	60b8      	str	r0, [r7, #8]
 8041124:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8041126:	edd7 7a03 	vldr	s15, [r7, #12]
 804112a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 804112e:	ee17 3a90 	vmov	r3, s15
 8041132:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8041134:	69fb      	ldr	r3, [r7, #28]
 8041136:	ee07 3a90 	vmov	s15, r3
 804113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 804113e:	ed97 7a03 	vldr	s14, [r7, #12]
 8041142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041146:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 804114a:	2200      	movs	r2, #0
 804114c:	68b9      	ldr	r1, [r7, #8]
 804114e:	69f8      	ldr	r0, [r7, #28]
 8041150:	f7ff ff98 	bl	8041084 <intToStr>
 8041154:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8041156:	687b      	ldr	r3, [r7, #4]
 8041158:	2b00      	cmp	r3, #0
 804115a:	d030      	beq.n	80411be <ftoa+0xa6>
        res[i] = '.';
 804115c:	697b      	ldr	r3, [r7, #20]
 804115e:	68ba      	ldr	r2, [r7, #8]
 8041160:	4413      	add	r3, r2
 8041162:	222e      	movs	r2, #46	; 0x2e
 8041164:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8041166:	69b8      	ldr	r0, [r7, #24]
 8041168:	f7ff f9ee 	bl	8040548 <__aeabi_f2d>
 804116c:	4604      	mov	r4, r0
 804116e:	460d      	mov	r5, r1
 8041170:	6878      	ldr	r0, [r7, #4]
 8041172:	f7ff f9d7 	bl	8040524 <__aeabi_i2d>
 8041176:	4602      	mov	r2, r0
 8041178:	460b      	mov	r3, r1
 804117a:	ec43 2b11 	vmov	d1, r2, r3
 804117e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80411c8 <ftoa+0xb0>
 8041182:	f00c f9c9 	bl	804d518 <pow>
 8041186:	ec53 2b10 	vmov	r2, r3, d0
 804118a:	4620      	mov	r0, r4
 804118c:	4629      	mov	r1, r5
 804118e:	f7ff fa33 	bl	80405f8 <__aeabi_dmul>
 8041192:	4602      	mov	r2, r0
 8041194:	460b      	mov	r3, r1
 8041196:	4610      	mov	r0, r2
 8041198:	4619      	mov	r1, r3
 804119a:	f7ff fd25 	bl	8040be8 <__aeabi_d2f>
 804119e:	4603      	mov	r3, r0
 80411a0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80411a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80411a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80411aa:	697b      	ldr	r3, [r7, #20]
 80411ac:	3301      	adds	r3, #1
 80411ae:	68ba      	ldr	r2, [r7, #8]
 80411b0:	4413      	add	r3, r2
 80411b2:	687a      	ldr	r2, [r7, #4]
 80411b4:	4619      	mov	r1, r3
 80411b6:	ee17 0a90 	vmov	r0, s15
 80411ba:	f7ff ff63 	bl	8041084 <intToStr>
    }
}
 80411be:	bf00      	nop
 80411c0:	3720      	adds	r7, #32
 80411c2:	46bd      	mov	sp, r7
 80411c4:	bdb0      	pop	{r4, r5, r7, pc}
 80411c6:	bf00      	nop
 80411c8:	00000000 	.word	0x00000000
 80411cc:	40240000 	.word	0x40240000

080411d0 <calculateReflowCurve>:




void calculateReflowCurve(ReflowTemplate *p_ReflowParameters, uint16_t *p_ReflowCurve, uint16_t *p_PhaseIndex){
 80411d0:	b5b0      	push	{r4, r5, r7, lr}
 80411d2:	f5ad 4dea 	sub.w	sp, sp, #29952	; 0x7500
 80411d6:	b09c      	sub	sp, #112	; 0x70
 80411d8:	af00      	add	r7, sp, #0
 80411da:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411de:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80411e2:	6018      	str	r0, [r3, #0]
 80411e4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411e8:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80411ec:	6019      	str	r1, [r3, #0]
 80411ee:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80411f2:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 80411f6:	601a      	str	r2, [r3, #0]
	uint16_t ReflowCurve[REFLOW_CURVE_SIZE];
	size_t s_ReflowCurve;
	size_t s_PhaseIndex;
	int index;

	index = 0;
 80411f8:	2300      	movs	r3, #0
 80411fa:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80411fe:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041202:	6013      	str	r3, [r2, #0]
	s_ReflowCurve = 0;
 8041204:	2300      	movs	r3, #0
 8041206:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804120a:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 804120e:	6013      	str	r3, [r2, #0]
	s_PhaseIndex = 0;
 8041210:	2300      	movs	r3, #0
 8041212:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041216:	f102 0258 	add.w	r2, r2, #88	; 0x58
 804121a:	6013      	str	r3, [r2, #0]
	float timestep = 0.5;
 804121c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8041220:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041224:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8041228:	6013      	str	r3, [r2, #0]

	/*Init Arrays with Zeros*/
	memset(ReflowCurve,0, REFLOW_CURVE_SIZE * sizeof(uint16_t));
 804122a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 804122e:	3b5c      	subs	r3, #92	; 0x5c
 8041230:	f247 5230 	movw	r2, #30000	; 0x7530
 8041234:	2100      	movs	r1, #0
 8041236:	4618      	mov	r0, r3
 8041238:	f007 fcc2 	bl	8048bc0 <memset>
	memset(PhaseIndex,0, 6 * sizeof(uint16_t));
 804123c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041240:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8041244:	220c      	movs	r2, #12
 8041246:	2100      	movs	r1, #0
 8041248:	4618      	mov	r0, r3
 804124a:	f007 fcb9 	bl	8048bc0 <memset>

	//First Heat Up:
	while (24 + (timestep * p_ReflowParameters->firstHeatUpRate) <= p_ReflowParameters->SoakTempeture)
 804124e:	e03d      	b.n	80412cc <calculateReflowCurve+0xfc>
	{
	ReflowCurve[index] = 24 + (timestep * p_ReflowParameters->firstHeatUpRate);
 8041250:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041254:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041258:	681b      	ldr	r3, [r3, #0]
 804125a:	ed93 7a03 	vldr	s14, [r3, #12]
 804125e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041262:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8041266:	edd3 7a00 	vldr	s15, [r3]
 804126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804126e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8041272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804127a:	ee17 3a90 	vmov	r3, s15
 804127e:	b299      	uxth	r1, r3
 8041280:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041284:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8041288:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804128c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041290:	6812      	ldr	r2, [r2, #0]
 8041292:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 8041296:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804129a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 804129e:	681b      	ldr	r3, [r3, #0]
 80412a0:	3301      	adds	r3, #1
 80412a2:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80412a6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80412aa:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 80412ac:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412b0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412b4:	edd3 7a00 	vldr	s15, [r3]
 80412b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80412bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80412c0:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412c4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412c8:	edc3 7a00 	vstr	s15, [r3]
	while (24 + (timestep * p_ReflowParameters->firstHeatUpRate) <= p_ReflowParameters->SoakTempeture)
 80412cc:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80412d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80412d4:	681b      	ldr	r3, [r3, #0]
 80412d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80412da:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80412de:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80412e2:	edd3 7a00 	vldr	s15, [r3]
 80412e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80412ea:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80412ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80412f2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80412f6:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80412fa:	681b      	ldr	r3, [r3, #0]
 80412fc:	691b      	ldr	r3, [r3, #16]
 80412fe:	ee07 3a90 	vmov	s15, r3
 8041302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 804130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804130e:	d99f      	bls.n	8041250 <calculateReflowCurve+0x80>
	}
	PhaseIndex[1] = index;
 8041310:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041314:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041318:	681b      	ldr	r3, [r3, #0]
 804131a:	b29b      	uxth	r3, r3
 804131c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041320:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8041324:	8013      	strh	r3, [r2, #0]

	//Soak
	int Soakduration = 2*p_ReflowParameters->SoakTime;
 8041326:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804132a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 804132e:	681b      	ldr	r3, [r3, #0]
 8041330:	695b      	ldr	r3, [r3, #20]
 8041332:	005b      	lsls	r3, r3, #1
 8041334:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041338:	f102 0254 	add.w	r2, r2, #84	; 0x54
 804133c:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < Soakduration;i++)
 804133e:	2300      	movs	r3, #0
 8041340:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041344:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8041348:	6013      	str	r3, [r2, #0]
 804134a:	e022      	b.n	8041392 <calculateReflowCurve+0x1c2>
	{
		ReflowCurve[index+i] = p_ReflowParameters->SoakTempeture;
 804134c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041350:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041354:	681b      	ldr	r3, [r3, #0]
 8041356:	6919      	ldr	r1, [r3, #16]
 8041358:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804135c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041360:	681a      	ldr	r2, [r3, #0]
 8041362:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041366:	f103 0364 	add.w	r3, r3, #100	; 0x64
 804136a:	681b      	ldr	r3, [r3, #0]
 804136c:	441a      	add	r2, r3
 804136e:	b289      	uxth	r1, r1
 8041370:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041374:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8041378:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < Soakduration;i++)
 804137c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041380:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8041384:	681b      	ldr	r3, [r3, #0]
 8041386:	3301      	adds	r3, #1
 8041388:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804138c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8041390:	6013      	str	r3, [r2, #0]
 8041392:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041396:	f103 0364 	add.w	r3, r3, #100	; 0x64
 804139a:	681a      	ldr	r2, [r3, #0]
 804139c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413a0:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80413a4:	681b      	ldr	r3, [r3, #0]
 80413a6:	429a      	cmp	r2, r3
 80413a8:	dbd0      	blt.n	804134c <calculateReflowCurve+0x17c>
	}

	//Second Heat Up:
	index = index + Soakduration;
 80413aa:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80413b2:	681a      	ldr	r2, [r3, #0]
 80413b4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413b8:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80413bc:	681b      	ldr	r3, [r3, #0]
 80413be:	4413      	add	r3, r2
 80413c0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413c4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80413c8:	6013      	str	r3, [r2, #0]
	PhaseIndex[2] = index;
 80413ca:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80413ce:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80413d2:	681b      	ldr	r3, [r3, #0]
 80413d4:	b29b      	uxth	r3, r3
 80413d6:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413da:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80413de:	8013      	strh	r3, [r2, #0]
	timestep = 0.5;
 80413e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80413e4:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80413e8:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80413ec:	6013      	str	r3, [r2, #0]
	while (p_ReflowParameters->SoakTempeture + (timestep * p_ReflowParameters->secondHeatUpRate) <= p_ReflowParameters->ReflowTempeture)
 80413ee:	e04f      	b.n	8041490 <calculateReflowCurve+0x2c0>
	{
	ReflowCurve[index] = p_ReflowParameters->SoakTempeture + (uint8_t)timestep * p_ReflowParameters->secondHeatUpRate;
 80413f0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80413f4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80413f8:	681b      	ldr	r3, [r3, #0]
 80413fa:	691b      	ldr	r3, [r3, #16]
 80413fc:	ee07 3a90 	vmov	s15, r3
 8041400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8041404:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041408:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804140c:	edd3 7a00 	vldr	s15, [r3]
 8041410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041414:	edc7 7a00 	vstr	s15, [r7]
 8041418:	783b      	ldrb	r3, [r7, #0]
 804141a:	b2db      	uxtb	r3, r3
 804141c:	ee07 3a90 	vmov	s15, r3
 8041420:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8041424:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041428:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 804142c:	681b      	ldr	r3, [r3, #0]
 804142e:	edd3 7a06 	vldr	s15, [r3, #24]
 8041432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041436:	ee77 7a27 	vadd.f32	s15, s14, s15
 804143a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804143e:	ee17 3a90 	vmov	r3, s15
 8041442:	b299      	uxth	r1, r3
 8041444:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041448:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804144c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041450:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041454:	6812      	ldr	r2, [r2, #0]
 8041456:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 804145a:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804145e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041462:	681b      	ldr	r3, [r3, #0]
 8041464:	3301      	adds	r3, #1
 8041466:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804146a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 804146e:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 8041470:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041474:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8041478:	edd3 7a00 	vldr	s15, [r3]
 804147c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041484:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041488:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804148c:	edc3 7a00 	vstr	s15, [r3]
	while (p_ReflowParameters->SoakTempeture + (timestep * p_ReflowParameters->secondHeatUpRate) <= p_ReflowParameters->ReflowTempeture)
 8041490:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041494:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041498:	681b      	ldr	r3, [r3, #0]
 804149a:	691b      	ldr	r3, [r3, #16]
 804149c:	ee07 3a90 	vmov	s15, r3
 80414a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80414a4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414a8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80414ac:	681b      	ldr	r3, [r3, #0]
 80414ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80414b2:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80414b6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80414ba:	edd3 7a00 	vldr	s15, [r3]
 80414be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80414c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80414c6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414ca:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80414ce:	681b      	ldr	r3, [r3, #0]
 80414d0:	69db      	ldr	r3, [r3, #28]
 80414d2:	ee07 3a90 	vmov	s15, r3
 80414d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80414da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80414de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80414e2:	d985      	bls.n	80413f0 <calculateReflowCurve+0x220>
	}
	PhaseIndex[3] = index;
 80414e4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80414e8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80414ec:	681b      	ldr	r3, [r3, #0]
 80414ee:	b29b      	uxth	r3, r3
 80414f0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80414f4:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 80414f8:	8013      	strh	r3, [r2, #0]

	//Reflow
	int Reflowduration = 2*p_ReflowParameters->ReflowTime;
 80414fa:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80414fe:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041502:	681b      	ldr	r3, [r3, #0]
 8041504:	6a1b      	ldr	r3, [r3, #32]
 8041506:	005b      	lsls	r3, r3, #1
 8041508:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804150c:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8041510:	6013      	str	r3, [r2, #0]

	for(int i = 0;i < Reflowduration;i++)
 8041512:	2300      	movs	r3, #0
 8041514:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041518:	f102 0260 	add.w	r2, r2, #96	; 0x60
 804151c:	6013      	str	r3, [r2, #0]
 804151e:	e022      	b.n	8041566 <calculateReflowCurve+0x396>
	{
		ReflowCurve[index+i] = p_ReflowParameters->ReflowTempeture;
 8041520:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041524:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041528:	681b      	ldr	r3, [r3, #0]
 804152a:	69d9      	ldr	r1, [r3, #28]
 804152c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041530:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041534:	681a      	ldr	r2, [r3, #0]
 8041536:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804153a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	441a      	add	r2, r3
 8041542:	b289      	uxth	r1, r1
 8041544:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8041548:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804154c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0;i < Reflowduration;i++)
 8041550:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041554:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8041558:	681b      	ldr	r3, [r3, #0]
 804155a:	3301      	adds	r3, #1
 804155c:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041560:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8041564:	6013      	str	r3, [r2, #0]
 8041566:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804156a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 804156e:	681a      	ldr	r2, [r3, #0]
 8041570:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041574:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8041578:	681b      	ldr	r3, [r3, #0]
 804157a:	429a      	cmp	r2, r3
 804157c:	dbd0      	blt.n	8041520 <calculateReflowCurve+0x350>
	}

	index = index + Reflowduration;
 804157e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041582:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041586:	681a      	ldr	r2, [r3, #0]
 8041588:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804158c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8041590:	681b      	ldr	r3, [r3, #0]
 8041592:	4413      	add	r3, r2
 8041594:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041598:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 804159c:	6013      	str	r3, [r2, #0]
	ReflowCurve[index] = 0;
 804159e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80415a2:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80415a6:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415aa:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80415ae:	6812      	ldr	r2, [r2, #0]
 80415b0:	2100      	movs	r1, #0
 80415b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	PhaseIndex[4] = index;
 80415b6:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80415ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	b29b      	uxth	r3, r3
 80415c2:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415c6:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80415ca:	8013      	strh	r3, [r2, #0]

	//Cooldown
	timestep = 0.5;
 80415cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80415d0:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80415d4:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80415d8:	6013      	str	r3, [r2, #0]
	while (p_ReflowParameters->ReflowTempeture - (timestep * 1.8) >= 24)
 80415da:	e055      	b.n	8041688 <calculateReflowCurve+0x4b8>
	{
	ReflowCurve[index] = p_ReflowParameters->ReflowTempeture - (timestep * 1.8);
 80415dc:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80415e0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80415e4:	681b      	ldr	r3, [r3, #0]
 80415e6:	69db      	ldr	r3, [r3, #28]
 80415e8:	4618      	mov	r0, r3
 80415ea:	f7fe ff8b 	bl	8040504 <__aeabi_ui2d>
 80415ee:	4604      	mov	r4, r0
 80415f0:	460d      	mov	r5, r1
 80415f2:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80415f6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80415fa:	6818      	ldr	r0, [r3, #0]
 80415fc:	f7fe ffa4 	bl	8040548 <__aeabi_f2d>
 8041600:	a35a      	add	r3, pc, #360	; (adr r3, 804176c <calculateReflowCurve+0x59c>)
 8041602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041606:	f7fe fff7 	bl	80405f8 <__aeabi_dmul>
 804160a:	4602      	mov	r2, r0
 804160c:	460b      	mov	r3, r1
 804160e:	4620      	mov	r0, r4
 8041610:	4629      	mov	r1, r5
 8041612:	f7fe fe39 	bl	8040288 <__aeabi_dsub>
 8041616:	4602      	mov	r2, r0
 8041618:	460b      	mov	r3, r1
 804161a:	4610      	mov	r0, r2
 804161c:	4619      	mov	r1, r3
 804161e:	f7ff fac3 	bl	8040ba8 <__aeabi_d2uiz>
 8041622:	4603      	mov	r3, r0
 8041624:	b299      	uxth	r1, r3
 8041626:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804162a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 804162e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041632:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041636:	6812      	ldr	r2, [r2, #0]
 8041638:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	index++;
 804163c:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041640:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8041644:	681b      	ldr	r3, [r3, #0]
 8041646:	3301      	adds	r3, #1
 8041648:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 804164c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8041650:	6013      	str	r3, [r2, #0]
	timestep = timestep + 0.5;
 8041652:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041656:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804165a:	edd3 7a00 	vldr	s15, [r3]
 804165e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041666:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 804166a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 804166e:	edc3 7a00 	vstr	s15, [r3]
	PhaseIndex[5] = index;
 8041672:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041676:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 804167a:	681b      	ldr	r3, [r3, #0]
 804167c:	b29b      	uxth	r3, r3
 804167e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041682:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 8041686:	8013      	strh	r3, [r2, #0]
	while (p_ReflowParameters->ReflowTempeture - (timestep * 1.8) >= 24)
 8041688:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804168c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8041690:	681b      	ldr	r3, [r3, #0]
 8041692:	69db      	ldr	r3, [r3, #28]
 8041694:	4618      	mov	r0, r3
 8041696:	f7fe ff35 	bl	8040504 <__aeabi_ui2d>
 804169a:	4604      	mov	r4, r0
 804169c:	460d      	mov	r5, r1
 804169e:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80416a2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80416a6:	6818      	ldr	r0, [r3, #0]
 80416a8:	f7fe ff4e 	bl	8040548 <__aeabi_f2d>
 80416ac:	a32f      	add	r3, pc, #188	; (adr r3, 804176c <calculateReflowCurve+0x59c>)
 80416ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80416b2:	f7fe ffa1 	bl	80405f8 <__aeabi_dmul>
 80416b6:	4602      	mov	r2, r0
 80416b8:	460b      	mov	r3, r1
 80416ba:	4620      	mov	r0, r4
 80416bc:	4629      	mov	r1, r5
 80416be:	f7fe fde3 	bl	8040288 <__aeabi_dsub>
 80416c2:	4602      	mov	r2, r0
 80416c4:	460b      	mov	r3, r1
 80416c6:	4610      	mov	r0, r2
 80416c8:	4619      	mov	r1, r3
 80416ca:	f04f 0200 	mov.w	r2, #0
 80416ce:	4b26      	ldr	r3, [pc, #152]	; (8041768 <calculateReflowCurve+0x598>)
 80416d0:	f7ff fa18 	bl	8040b04 <__aeabi_dcmpge>
 80416d4:	4603      	mov	r3, r0
 80416d6:	2b00      	cmp	r3, #0
 80416d8:	d180      	bne.n	80415dc <calculateReflowCurve+0x40c>
	}
	s_ReflowCurve = sizeof(ReflowCurve);
 80416da:	f247 5330 	movw	r3, #30000	; 0x7530
 80416de:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80416e2:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80416e6:	6013      	str	r3, [r2, #0]
	s_PhaseIndex  = sizeof(PhaseIndex);
 80416e8:	230c      	movs	r3, #12
 80416ea:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 80416ee:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80416f2:	6013      	str	r3, [r2, #0]

	if(0 < s_ReflowCurve || 0 < s_PhaseIndex)
 80416f4:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80416f8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80416fc:	681b      	ldr	r3, [r3, #0]
 80416fe:	2b00      	cmp	r3, #0
 8041700:	d106      	bne.n	8041710 <calculateReflowCurve+0x540>
 8041702:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8041706:	f103 0358 	add.w	r3, r3, #88	; 0x58
 804170a:	681b      	ldr	r3, [r3, #0]
 804170c:	2b00      	cmp	r3, #0
 804170e:	d020      	beq.n	8041752 <calculateReflowCurve+0x582>
	{
		memcpy((uint8_t*)p_PhaseIndex, (uint8_t*)PhaseIndex, s_PhaseIndex);
 8041710:	f507 41ea 	add.w	r1, r7, #29952	; 0x7500
 8041714:	f101 0144 	add.w	r1, r1, #68	; 0x44
 8041718:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 804171c:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8041720:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041724:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8041728:	6812      	ldr	r2, [r2, #0]
 804172a:	6818      	ldr	r0, [r3, #0]
 804172c:	f007 fa3a 	bl	8048ba4 <memcpy>
		memcpy((uint8_t*)p_ReflowCurve, (uint8_t*)ReflowCurve, s_ReflowCurve);
 8041730:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8041734:	3b5c      	subs	r3, #92	; 0x5c
 8041736:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 804173a:	f5a2 60ad 	sub.w	r0, r2, #1384	; 0x568
 804173e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8041742:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8041746:	6812      	ldr	r2, [r2, #0]
 8041748:	4619      	mov	r1, r3
 804174a:	6800      	ldr	r0, [r0, #0]
 804174c:	f007 fa2a 	bl	8048ba4 <memcpy>
 8041750:	e002      	b.n	8041758 <calculateReflowCurve+0x588>

	}
	else
	{
		Error_Handler();
 8041752:	f002 ff37 	bl	80445c4 <Error_Handler>
	}
}
 8041756:	bf00      	nop
 8041758:	bf00      	nop
 804175a:	f507 47ea 	add.w	r7, r7, #29952	; 0x7500
 804175e:	3770      	adds	r7, #112	; 0x70
 8041760:	46bd      	mov	sp, r7
 8041762:	bdb0      	pop	{r4, r5, r7, pc}
 8041764:	f3af 8000 	nop.w
 8041768:	40380000 	.word	0x40380000
 804176c:	cccccccd 	.word	0xcccccccd
 8041770:	3ffccccc 	.word	0x3ffccccc

08041774 <HandleGui>:

void HandleGui()
{
 8041774:	b580      	push	{r7, lr}
 8041776:	af00      	add	r7, sp, #0
	lcd_clear_cmd();
 8041778:	f002 fa5f 	bl	8043c3a <lcd_clear_cmd>
	f_GuiErrorCheck(temperature);
 804177c:	4b28      	ldr	r3, [pc, #160]	; (8041820 <HandleGui+0xac>)
 804177e:	edd3 7a00 	vldr	s15, [r3]
 8041782:	eeb0 0a67 	vmov.f32	s0, s15
 8041786:	f000 fbf7 	bl	8041f78 <f_GuiErrorCheck>
	f_GuiSensorInitOKmsg();
 804178a:	f000 fc41 	bl	8042010 <f_GuiSensorInitOKmsg>
	f_GuiFEEUpdateRead(p_CtrlParams, p_ReflowParameters);
 804178e:	4b25      	ldr	r3, [pc, #148]	; (8041824 <HandleGui+0xb0>)
 8041790:	681b      	ldr	r3, [r3, #0]
 8041792:	4a25      	ldr	r2, [pc, #148]	; (8041828 <HandleGui+0xb4>)
 8041794:	6812      	ldr	r2, [r2, #0]
 8041796:	4611      	mov	r1, r2
 8041798:	4618      	mov	r0, r3
 804179a:	f000 fcb7 	bl	804210c <f_GuiFEEUpdateRead>
	f_GuiMenuSoakTemp(p_ReflowParameters);
 804179e:	4b22      	ldr	r3, [pc, #136]	; (8041828 <HandleGui+0xb4>)
 80417a0:	681b      	ldr	r3, [r3, #0]
 80417a2:	4618      	mov	r0, r3
 80417a4:	f000 fc4c 	bl	8042040 <f_GuiMenuSoakTemp>
	f_GuiMenuSoakTime(p_ReflowParameters);
 80417a8:	4b1f      	ldr	r3, [pc, #124]	; (8041828 <HandleGui+0xb4>)
 80417aa:	681b      	ldr	r3, [r3, #0]
 80417ac:	4618      	mov	r0, r3
 80417ae:	f000 fcf7 	bl	80421a0 <f_GuiMenuSoakTime>
	f_GuiMenuReflowTemp(p_ReflowParameters);
 80417b2:	4b1d      	ldr	r3, [pc, #116]	; (8041828 <HandleGui+0xb4>)
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	4618      	mov	r0, r3
 80417b8:	f000 fd5c 	bl	8042274 <f_GuiMenuReflowTemp>
	f_GuiMenuReflowTime(p_ReflowParameters);
 80417bc:	4b1a      	ldr	r3, [pc, #104]	; (8041828 <HandleGui+0xb4>)
 80417be:	681b      	ldr	r3, [r3, #0]
 80417c0:	4618      	mov	r0, r3
 80417c2:	f000 fdc1 	bl	8042348 <f_GuiMenuReflowTime>
	f_GuiMenuSoakTempGrad(p_ReflowParameters);
 80417c6:	4b18      	ldr	r3, [pc, #96]	; (8041828 <HandleGui+0xb4>)
 80417c8:	681b      	ldr	r3, [r3, #0]
 80417ca:	4618      	mov	r0, r3
 80417cc:	f000 fe26 	bl	804241c <f_GuiMenuSoakTempGrad>
	f_GuiMenuKPUpdate(p_ReflowParameters);
 80417d0:	4b15      	ldr	r3, [pc, #84]	; (8041828 <HandleGui+0xb4>)
 80417d2:	681b      	ldr	r3, [r3, #0]
 80417d4:	4618      	mov	r0, r3
 80417d6:	f000 fead 	bl	8042534 <f_GuiMenuKPUpdate>
	f_GuiMenuKIUpdate(p_ReflowParameters);
 80417da:	4b13      	ldr	r3, [pc, #76]	; (8041828 <HandleGui+0xb4>)
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	4618      	mov	r0, r3
 80417e0:	f000 ff1c 	bl	804261c <f_GuiMenuKIUpdate>
	f_GuiMenuKDUpdate(p_ReflowParameters);
 80417e4:	4b10      	ldr	r3, [pc, #64]	; (8041828 <HandleGui+0xb4>)
 80417e6:	681b      	ldr	r3, [r3, #0]
 80417e8:	4618      	mov	r0, r3
 80417ea:	f000 ff8b 	bl	8042704 <f_GuiMenuKDUpdate>
	f_GuiMenuReflowTempGrad(p_ReflowParameters);
 80417ee:	4b0e      	ldr	r3, [pc, #56]	; (8041828 <HandleGui+0xb4>)
 80417f0:	681b      	ldr	r3, [r3, #0]
 80417f2:	4618      	mov	r0, r3
 80417f4:	f000 fffa 	bl	80427ec <f_GuiMenuReflowTempGrad>
	f_GuiMenuBank1Update(p_CtrlParams);
 80417f8:	4b0a      	ldr	r3, [pc, #40]	; (8041824 <HandleGui+0xb0>)
 80417fa:	681b      	ldr	r3, [r3, #0]
 80417fc:	4618      	mov	r0, r3
 80417fe:	f001 f87f 	bl	8042900 <f_GuiMenuBank1Update>
	f_GuiMenuBank2Update(p_CtrlParams);
 8041802:	4b08      	ldr	r3, [pc, #32]	; (8041824 <HandleGui+0xb0>)
 8041804:	681b      	ldr	r3, [r3, #0]
 8041806:	4618      	mov	r0, r3
 8041808:	f001 f8e6 	bl	80429d8 <f_GuiMenuBank2Update>
	f_GuiFEEUpdateWrite(p_CtrlParams, p_ReflowParameters);
 804180c:	4b05      	ldr	r3, [pc, #20]	; (8041824 <HandleGui+0xb0>)
 804180e:	681b      	ldr	r3, [r3, #0]
 8041810:	4a05      	ldr	r2, [pc, #20]	; (8041828 <HandleGui+0xb4>)
 8041812:	6812      	ldr	r2, [r2, #0]
 8041814:	4611      	mov	r1, r2
 8041816:	4618      	mov	r0, r3
 8041818:	f001 f94a 	bl	8042ab0 <f_GuiFEEUpdateWrite>
}
 804181c:	bf00      	nop
 804181e:	bd80      	pop	{r7, pc}
 8041820:	20000228 	.word	0x20000228
 8041824:	20000004 	.word	0x20000004
 8041828:	200003fc 	.word	0x200003fc

0804182c <readTemperatureData>:

static void readTemperatureData(volatile float32_t* p_temperature_val)
{
 804182c:	b580      	push	{r7, lr}
 804182e:	b084      	sub	sp, #16
 8041830:	af00      	add	r7, sp, #0
 8041832:	6078      	str	r0, [r7, #4]
	uint8_t data8[2] = {0};
 8041834:	2300      	movs	r3, #0
 8041836:	81bb      	strh	r3, [r7, #12]
	uint16_t sum = {0};
 8041838:	2300      	movs	r3, #0
 804183a:	81fb      	strh	r3, [r7, #14]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 804183c:	2201      	movs	r2, #1
 804183e:	2110      	movs	r1, #16
 8041840:	481e      	ldr	r0, [pc, #120]	; (80418bc <readTemperatureData+0x90>)
 8041842:	f004 f9b1 	bl	8045ba8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 8041846:	2200      	movs	r2, #0
 8041848:	2110      	movs	r1, #16
 804184a:	481c      	ldr	r0, [pc, #112]	; (80418bc <readTemperatureData+0x90>)
 804184c:	f004 f9ac 	bl	8045ba8 <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 8041850:	f107 010c 	add.w	r1, r7, #12
 8041854:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8041858:	2202      	movs	r2, #2
 804185a:	4819      	ldr	r0, [pc, #100]	; (80418c0 <readTemperatureData+0x94>)
 804185c:	f005 fb85 	bl	8046f6a <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 8041860:	2201      	movs	r2, #1
 8041862:	2110      	movs	r1, #16
 8041864:	4815      	ldr	r0, [pc, #84]	; (80418bc <readTemperatureData+0x90>)
 8041866:	f004 f99f 	bl	8045ba8 <HAL_GPIO_WritePin>

			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 804186a:	7b7b      	ldrb	r3, [r7, #13]
 804186c:	b21a      	sxth	r2, r3
 804186e:	7b3b      	ldrb	r3, [r7, #12]
 8041870:	021b      	lsls	r3, r3, #8
 8041872:	b21b      	sxth	r3, r3
 8041874:	4313      	orrs	r3, r2
 8041876:	b21b      	sxth	r3, r3
 8041878:	81fb      	strh	r3, [r7, #14]
			if(sum & 0x0004)//No TC connected, error -1
 804187a:	89fb      	ldrh	r3, [r7, #14]
 804187c:	f003 0304 	and.w	r3, r3, #4
 8041880:	2b00      	cmp	r3, #0
 8041882:	d003      	beq.n	804188c <readTemperatureData+0x60>
			{
				(*p_temperature_val) = -1;
 8041884:	687b      	ldr	r3, [r7, #4]
 8041886:	4a0f      	ldr	r2, [pc, #60]	; (80418c4 <readTemperatureData+0x98>)
 8041888:	601a      	str	r2, [r3, #0]
			{
				(*p_temperature_val) = ((sum >> 3) / 4.0);
			}


}
 804188a:	e013      	b.n	80418b4 <readTemperatureData+0x88>
				(*p_temperature_val) = ((sum >> 3) / 4.0);
 804188c:	89fb      	ldrh	r3, [r7, #14]
 804188e:	08db      	lsrs	r3, r3, #3
 8041890:	b29b      	uxth	r3, r3
 8041892:	4618      	mov	r0, r3
 8041894:	f7fe fe46 	bl	8040524 <__aeabi_i2d>
 8041898:	f04f 0200 	mov.w	r2, #0
 804189c:	4b0a      	ldr	r3, [pc, #40]	; (80418c8 <readTemperatureData+0x9c>)
 804189e:	f7fe ffd5 	bl	804084c <__aeabi_ddiv>
 80418a2:	4602      	mov	r2, r0
 80418a4:	460b      	mov	r3, r1
 80418a6:	4610      	mov	r0, r2
 80418a8:	4619      	mov	r1, r3
 80418aa:	f7ff f99d 	bl	8040be8 <__aeabi_d2f>
 80418ae:	4602      	mov	r2, r0
 80418b0:	687b      	ldr	r3, [r7, #4]
 80418b2:	601a      	str	r2, [r3, #0]
}
 80418b4:	bf00      	nop
 80418b6:	3710      	adds	r7, #16
 80418b8:	46bd      	mov	sp, r7
 80418ba:	bd80      	pop	{r7, pc}
 80418bc:	40020000 	.word	0x40020000
 80418c0:	20000354 	.word	0x20000354
 80418c4:	bf800000 	.word	0xbf800000
 80418c8:	40100000 	.word	0x40100000

080418cc <getTemperatureData>:

}


 getTemperatureData(volatile float32_t* p_temperature_val)
 {
 80418cc:	b580      	push	{r7, lr}
 80418ce:	b082      	sub	sp, #8
 80418d0:	af00      	add	r7, sp, #0
 80418d2:	6078      	str	r0, [r7, #4]

	 readTemperatureData(p_temperature_val);
 80418d4:	6878      	ldr	r0, [r7, #4]
 80418d6:	f7ff ffa9 	bl	804182c <readTemperatureData>

 }
 80418da:	bf00      	nop
 80418dc:	3708      	adds	r7, #8
 80418de:	46bd      	mov	sp, r7
 80418e0:	bd80      	pop	{r7, pc}
	...

080418e4 <msTempControlHandler>:


void msTempControlHandler(msTempControlParams* CtrlParams, uint16_t* p_ReflowCurve, ReflowTemplate *p_ReflowParameters )
{
 80418e4:	b580      	push	{r7, lr}
 80418e6:	b092      	sub	sp, #72	; 0x48
 80418e8:	af00      	add	r7, sp, #0
 80418ea:	60f8      	str	r0, [r7, #12]
 80418ec:	60b9      	str	r1, [r7, #8]
 80418ee:	607a      	str	r2, [r7, #4]


  uint8_t	*p_bank1Percentage	= &CtrlParams->ui8_bank1Percentage;
 80418f0:	68fb      	ldr	r3, [r7, #12]
 80418f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t	*p_bank2Percentage	= &CtrlParams->ui8_bank2Percentage;
 80418f4:	68fb      	ldr	r3, [r7, #12]
 80418f6:	3301      	adds	r3, #1
 80418f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  FLAGS		*p_Statusflags		= CtrlParams->p_StatusFlags;
 80418fa:	68fb      	ldr	r3, [r7, #12]
 80418fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80418fe:	63bb      	str	r3, [r7, #56]	; 0x38
  volatile float32_t *p_temperature = CtrlParams->p_temperature;
 8041900:	68fb      	ldr	r3, [r7, #12]
 8041902:	69db      	ldr	r3, [r3, #28]
 8041904:	637b      	str	r3, [r7, #52]	; 0x34
  volatile float32_t *p_PIDError 	= CtrlParams->p_PIDError;
 8041906:	68fb      	ldr	r3, [r7, #12]
 8041908:	6a1b      	ldr	r3, [r3, #32]
 804190a:	633b      	str	r3, [r7, #48]	; 0x30
  uint16_t ReflowIndex = CtrlParams->u16_ReflowIndexCurrent;
 804190c:	68fb      	ldr	r3, [r7, #12]
 804190e:	885b      	ldrh	r3, [r3, #2]
 8041910:	85fb      	strh	r3, [r7, #46]	; 0x2e
  static	uint32_t	u32_PidCorr;
  volatile 	uint16_t	u16_PIDBank1;
  volatile 	uint16_t 	u16_PIDBank2;


  PID.Kp = p_ReflowParameters->KP;
 8041912:	687b      	ldr	r3, [r7, #4]
 8041914:	681b      	ldr	r3, [r3, #0]
 8041916:	4a90      	ldr	r2, [pc, #576]	; (8041b58 <msTempControlHandler+0x274>)
 8041918:	6193      	str	r3, [r2, #24]
  PID.Ki = p_ReflowParameters->KI;
 804191a:	687b      	ldr	r3, [r7, #4]
 804191c:	685b      	ldr	r3, [r3, #4]
 804191e:	4a8e      	ldr	r2, [pc, #568]	; (8041b58 <msTempControlHandler+0x274>)
 8041920:	61d3      	str	r3, [r2, #28]
  PID.Kd = p_ReflowParameters->KD;
 8041922:	687b      	ldr	r3, [r7, #4]
 8041924:	689b      	ldr	r3, [r3, #8]
 8041926:	4a8c      	ldr	r2, [pc, #560]	; (8041b58 <msTempControlHandler+0x274>)
 8041928:	6213      	str	r3, [r2, #32]
  f32_Temperature = 0;
 804192a:	f04f 0300 	mov.w	r3, #0
 804192e:	61bb      	str	r3, [r7, #24]
  u16_PIDBank1 = 0;
 8041930:	2300      	movs	r3, #0
 8041932:	82fb      	strh	r3, [r7, #22]
  u16_PIDBank2 = 0;
 8041934:	2300      	movs	r3, #0
 8041936:	82bb      	strh	r3, [r7, #20]
  //f32_PidCorr = 0;
  if( ((*p_bank1Percentage) != 0) &&  ((*p_bank2Percentage) != 0) )
 8041938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804193a:	781b      	ldrb	r3, [r3, #0]
 804193c:	2b00      	cmp	r3, #0
 804193e:	d021      	beq.n	8041984 <msTempControlHandler+0xa0>
 8041940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8041942:	781b      	ldrb	r3, [r3, #0]
 8041944:	2b00      	cmp	r3, #0
 8041946:	d01d      	beq.n	8041984 <msTempControlHandler+0xa0>
  {
	  ui16_Bank1Limit = 999 * (*p_bank1Percentage) / 100;
 8041948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804194a:	781b      	ldrb	r3, [r3, #0]
 804194c:	461a      	mov	r2, r3
 804194e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041952:	fb02 f303 	mul.w	r3, r2, r3
 8041956:	4a81      	ldr	r2, [pc, #516]	; (8041b5c <msTempControlHandler+0x278>)
 8041958:	fb82 1203 	smull	r1, r2, r2, r3
 804195c:	1152      	asrs	r2, r2, #5
 804195e:	17db      	asrs	r3, r3, #31
 8041960:	1ad3      	subs	r3, r2, r3
 8041962:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  ui16_Bank2Limit = 999 * (*p_bank2Percentage) / 100;
 8041966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8041968:	781b      	ldrb	r3, [r3, #0]
 804196a:	461a      	mov	r2, r3
 804196c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041970:	fb02 f303 	mul.w	r3, r2, r3
 8041974:	4a79      	ldr	r2, [pc, #484]	; (8041b5c <msTempControlHandler+0x278>)
 8041976:	fb82 1203 	smull	r1, r2, r2, r3
 804197a:	1152      	asrs	r2, r2, #5
 804197c:	17db      	asrs	r3, r3, #31
 804197e:	1ad3      	subs	r3, r2, r3
 8041980:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

  }

  /*Temperature Readout*/
  //readTemperatureData(p_temperature);
  if(avg_temp == -100)
 8041984:	4b76      	ldr	r3, [pc, #472]	; (8041b60 <msTempControlHandler+0x27c>)
 8041986:	edd3 7a00 	vldr	s15, [r3]
 804198a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8041b64 <msTempControlHandler+0x280>
 804198e:	eef4 7a47 	vcmp.f32	s15, s14
 8041992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041996:	d103      	bne.n	80419a0 <msTempControlHandler+0xbc>
  {
	  avg_temp = (*p_temperature);
 8041998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804199a:	681b      	ldr	r3, [r3, #0]
 804199c:	4a70      	ldr	r2, [pc, #448]	; (8041b60 <msTempControlHandler+0x27c>)
 804199e:	6013      	str	r3, [r2, #0]
  else
  {

  }

  avg_temp = alpha * (*p_temperature) + (1 - alpha) * avg_temp;
 80419a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419a2:	edd3 7a00 	vldr	s15, [r3]
 80419a6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8041b68 <msTempControlHandler+0x284>
 80419aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80419ae:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8041b68 <msTempControlHandler+0x284>
 80419b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80419b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80419ba:	4b69      	ldr	r3, [pc, #420]	; (8041b60 <msTempControlHandler+0x27c>)
 80419bc:	edd3 7a00 	vldr	s15, [r3]
 80419c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80419c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80419c8:	4b65      	ldr	r3, [pc, #404]	; (8041b60 <msTempControlHandler+0x27c>)
 80419ca:	edc3 7a00 	vstr	s15, [r3]
  (*p_temperature) = avg_temp;
 80419ce:	4b64      	ldr	r3, [pc, #400]	; (8041b60 <msTempControlHandler+0x27c>)
 80419d0:	681a      	ldr	r2, [r3, #0]
 80419d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419d4:	601a      	str	r2, [r3, #0]
  f32_Temperature = (*p_temperature);
 80419d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419d8:	681b      	ldr	r3, [r3, #0]
 80419da:	61bb      	str	r3, [r7, #24]

  if(TRUE == StateFlag.StartFlag)
 80419dc:	4b63      	ldr	r3, [pc, #396]	; (8041b6c <msTempControlHandler+0x288>)
 80419de:	781b      	ldrb	r3, [r3, #0]
 80419e0:	2b00      	cmp	r3, #0
 80419e2:	f000 8156 	beq.w	8041c92 <msTempControlHandler+0x3ae>
  {
	  f32_pid_error =  (float32_t) *(p_ReflowCurve+ReflowIndex) - f32_Temperature;
 80419e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80419e8:	005b      	lsls	r3, r3, #1
 80419ea:	68ba      	ldr	r2, [r7, #8]
 80419ec:	4413      	add	r3, r2
 80419ee:	881b      	ldrh	r3, [r3, #0]
 80419f0:	ee07 3a90 	vmov	s15, r3
 80419f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80419f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80419fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041a00:	edc7 7a07 	vstr	s15, [r7, #28]
	  *p_PIDError = f32_pid_error;
 8041a04:	69fa      	ldr	r2, [r7, #28]
 8041a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041a08:	601a      	str	r2, [r3, #0]
	  *(CtrlParams->p_PIDError) = *(p_PIDError);
 8041a0a:	68fb      	ldr	r3, [r7, #12]
 8041a0c:	6a1b      	ldr	r3, [r3, #32]
 8041a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8041a10:	6812      	ldr	r2, [r2, #0]
 8041a12:	601a      	str	r2, [r3, #0]

	  //Correction
	  f32_PidCorr =  arm_pid_f32(&PID, (f32_pid_error ));
 8041a14:	69fb      	ldr	r3, [r7, #28]
 8041a16:	4a50      	ldr	r2, [pc, #320]	; (8041b58 <msTempControlHandler+0x274>)
 8041a18:	62ba      	str	r2, [r7, #40]	; 0x28
 8041a1a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8041a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a1e:	ed93 7a00 	vldr	s14, [r3]
 8041a22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8041a26:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8041a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a32:	edd3 7a03 	vldr	s15, [r3, #12]
 8041a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8041a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a40:	edd3 6a02 	vldr	s13, [r3, #8]
 8041a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a46:	edd3 7a04 	vldr	s15, [r3, #16]
 8041a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8041a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a54:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8041a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041a5c:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Update state */
    S->state[1] = S->state[0];
 8041a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a62:	68da      	ldr	r2, [r3, #12]
 8041a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a66:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8041a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041a6c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8041a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a70:	6a3a      	ldr	r2, [r7, #32]
 8041a72:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8041a74:	6a3b      	ldr	r3, [r7, #32]
 8041a76:	4a3e      	ldr	r2, [pc, #248]	; (8041b70 <msTempControlHandler+0x28c>)
 8041a78:	6013      	str	r3, [r2, #0]
	  u32_PidCorr = (uint32_t)f32_PidCorr;
 8041a7a:	4b3d      	ldr	r3, [pc, #244]	; (8041b70 <msTempControlHandler+0x28c>)
 8041a7c:	edd3 7a00 	vldr	s15, [r3]
 8041a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041a84:	ee17 2a90 	vmov	r2, s15
 8041a88:	4b3a      	ldr	r3, [pc, #232]	; (8041b74 <msTempControlHandler+0x290>)
 8041a8a:	601a      	str	r2, [r3, #0]
	  i32_pid_error = (int32_t)((f32_pid_error * 100.00));
 8041a8c:	69fb      	ldr	r3, [r7, #28]
 8041a8e:	4618      	mov	r0, r3
 8041a90:	f7fe fd5a 	bl	8040548 <__aeabi_f2d>
 8041a94:	f04f 0200 	mov.w	r2, #0
 8041a98:	4b37      	ldr	r3, [pc, #220]	; (8041b78 <msTempControlHandler+0x294>)
 8041a9a:	f7fe fdad 	bl	80405f8 <__aeabi_dmul>
 8041a9e:	4602      	mov	r2, r0
 8041aa0:	460b      	mov	r3, r1
 8041aa2:	4610      	mov	r0, r2
 8041aa4:	4619      	mov	r1, r3
 8041aa6:	f7ff f857 	bl	8040b58 <__aeabi_d2iz>
 8041aaa:	4603      	mov	r3, r0
 8041aac:	4a33      	ldr	r2, [pc, #204]	; (8041b7c <msTempControlHandler+0x298>)
 8041aae:	6013      	str	r3, [r2, #0]

	  if( 0 > i32_pid_error )
 8041ab0:	4b32      	ldr	r3, [pc, #200]	; (8041b7c <msTempControlHandler+0x298>)
 8041ab2:	681b      	ldr	r3, [r3, #0]
 8041ab4:	2b00      	cmp	r3, #0
 8041ab6:	da0b      	bge.n	8041ad0 <msTempControlHandler+0x1ec>
	  {
		  PID.Ki = 0 ; /*Stop integrating when the setpoint is reached*/
 8041ab8:	4b27      	ldr	r3, [pc, #156]	; (8041b58 <msTempControlHandler+0x274>)
 8041aba:	f04f 0200 	mov.w	r2, #0
 8041abe:	61da      	str	r2, [r3, #28]
		  PID.state[2] = 0;
 8041ac0:	4b25      	ldr	r3, [pc, #148]	; (8041b58 <msTempControlHandler+0x274>)
 8041ac2:	f04f 0200 	mov.w	r2, #0
 8041ac6:	615a      	str	r2, [r3, #20]
		  u32_PidCorr = 0;
 8041ac8:	4b2a      	ldr	r3, [pc, #168]	; (8041b74 <msTempControlHandler+0x290>)
 8041aca:	2200      	movs	r2, #0
 8041acc:	601a      	str	r2, [r3, #0]
 8041ace:	e003      	b.n	8041ad8 <msTempControlHandler+0x1f4>
	  }
	  else
	  {
		  PID.Ki = p_ReflowParameters->KI;
 8041ad0:	687b      	ldr	r3, [r7, #4]
 8041ad2:	685b      	ldr	r3, [r3, #4]
 8041ad4:	4a20      	ldr	r2, [pc, #128]	; (8041b58 <msTempControlHandler+0x274>)
 8041ad6:	61d3      	str	r3, [r2, #28]
	  }
	  if( 999 < u32_PidCorr )
 8041ad8:	4b26      	ldr	r3, [pc, #152]	; (8041b74 <msTempControlHandler+0x290>)
 8041ada:	681b      	ldr	r3, [r3, #0]
 8041adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041ae0:	d306      	bcc.n	8041af0 <msTempControlHandler+0x20c>
	  {
		  PID.Ki = 0 ; /*Stop integrating when the max value is reached*/
 8041ae2:	4b1d      	ldr	r3, [pc, #116]	; (8041b58 <msTempControlHandler+0x274>)
 8041ae4:	f04f 0200 	mov.w	r2, #0
 8041ae8:	61da      	str	r2, [r3, #28]
		  PID.state[2] = 999;
 8041aea:	4b1b      	ldr	r3, [pc, #108]	; (8041b58 <msTempControlHandler+0x274>)
 8041aec:	4a24      	ldr	r2, [pc, #144]	; (8041b80 <msTempControlHandler+0x29c>)
 8041aee:	615a      	str	r2, [r3, #20]
	  else{}



	  //Correction limits bank1-set value
	  if (u32_PidCorr > (ui16_Bank1Limit))
 8041af0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8041af4:	4b1f      	ldr	r3, [pc, #124]	; (8041b74 <msTempControlHandler+0x290>)
 8041af6:	681b      	ldr	r3, [r3, #0]
 8041af8:	429a      	cmp	r2, r3
 8041afa:	d203      	bcs.n	8041b04 <msTempControlHandler+0x220>
	  {
		  u16_PIDBank1 = ui16_Bank1Limit;
 8041afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8041b00:	82fb      	strh	r3, [r7, #22]
 8041b02:	e003      	b.n	8041b0c <msTempControlHandler+0x228>
	  }
	  else
	  {
		  u16_PIDBank1 = u32_PidCorr;
 8041b04:	4b1b      	ldr	r3, [pc, #108]	; (8041b74 <msTempControlHandler+0x290>)
 8041b06:	681b      	ldr	r3, [r3, #0]
 8041b08:	b29b      	uxth	r3, r3
 8041b0a:	82fb      	strh	r3, [r7, #22]
	  }
	  //Correction limits bank2-set value
	  if(u32_PidCorr > ui16_Bank2Limit)
 8041b0c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8041b10:	4b18      	ldr	r3, [pc, #96]	; (8041b74 <msTempControlHandler+0x290>)
 8041b12:	681b      	ldr	r3, [r3, #0]
 8041b14:	429a      	cmp	r2, r3
 8041b16:	d203      	bcs.n	8041b20 <msTempControlHandler+0x23c>
	  {

		  u16_PIDBank2 = ui16_Bank2Limit;
 8041b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8041b1c:	82bb      	strh	r3, [r7, #20]
 8041b1e:	e003      	b.n	8041b28 <msTempControlHandler+0x244>
	  }
	  else
	  {
		  u16_PIDBank2 = u32_PidCorr;
 8041b20:	4b14      	ldr	r3, [pc, #80]	; (8041b74 <msTempControlHandler+0x290>)
 8041b22:	681b      	ldr	r3, [r3, #0]
 8041b24:	b29b      	uxth	r3, r3
 8041b26:	82bb      	strh	r3, [r7, #20]
	  else
	  {

	  }

	  TIM3->CCR2 = u16_PIDBank1;
 8041b28:	8afb      	ldrh	r3, [r7, #22]
 8041b2a:	b29a      	uxth	r2, r3
 8041b2c:	4b15      	ldr	r3, [pc, #84]	; (8041b84 <msTempControlHandler+0x2a0>)
 8041b2e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = u16_PIDBank2;
 8041b30:	8abb      	ldrh	r3, [r7, #20]
 8041b32:	b29a      	uxth	r2, r3
 8041b34:	4b13      	ldr	r3, [pc, #76]	; (8041b84 <msTempControlHandler+0x2a0>)
 8041b36:	63da      	str	r2, [r3, #60]	; 0x3c

	  if((0 < TIM3->CCR2 ) || (0 < TIM3->CCR3 ))
 8041b38:	4b12      	ldr	r3, [pc, #72]	; (8041b84 <msTempControlHandler+0x2a0>)
 8041b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041b3c:	2b00      	cmp	r3, #0
 8041b3e:	d103      	bne.n	8041b48 <msTempControlHandler+0x264>
 8041b40:	4b10      	ldr	r3, [pc, #64]	; (8041b84 <msTempControlHandler+0x2a0>)
 8041b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b44:	2b00      	cmp	r3, #0
 8041b46:	d021      	beq.n	8041b8c <msTempControlHandler+0x2a8>
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8041b48:	2201      	movs	r2, #1
 8041b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041b4e:	480e      	ldr	r0, [pc, #56]	; (8041b88 <msTempControlHandler+0x2a4>)
 8041b50:	f004 f82a 	bl	8045ba8 <HAL_GPIO_WritePin>
 8041b54:	e020      	b.n	8041b98 <msTempControlHandler+0x2b4>
 8041b56:	bf00      	nop
 8041b58:	2000024c 	.word	0x2000024c
 8041b5c:	51eb851f 	.word	0x51eb851f
 8041b60:	20000000 	.word	0x20000000
 8041b64:	c2c80000 	.word	0xc2c80000
 8041b68:	3dcccccd 	.word	0x3dcccccd
 8041b6c:	20000244 	.word	0x20000244
 8041b70:	20000204 	.word	0x20000204
 8041b74:	20000208 	.word	0x20000208
 8041b78:	40590000 	.word	0x40590000
 8041b7c:	2000020c 	.word	0x2000020c
 8041b80:	4479c000 	.word	0x4479c000
 8041b84:	40000400 	.word	0x40000400
 8041b88:	40020c00 	.word	0x40020c00
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041b8c:	2200      	movs	r2, #0
 8041b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041b92:	4843      	ldr	r0, [pc, #268]	; (8041ca0 <msTempControlHandler+0x3bc>)
 8041b94:	f004 f808 	bl	8045ba8 <HAL_GPIO_WritePin>
	  }

	  if(	(ReflowIndex >= (PhaseIndex_main[0]+10)	)	&&	(ReflowIndex < PhaseIndex_main[1])	 )
 8041b98:	4b42      	ldr	r3, [pc, #264]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041b9a:	881b      	ldrh	r3, [r3, #0]
 8041b9c:	f103 0209 	add.w	r2, r3, #9
 8041ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041ba2:	429a      	cmp	r2, r3
 8041ba4:	da0e      	bge.n	8041bc4 <msTempControlHandler+0x2e0>
 8041ba6:	4b3f      	ldr	r3, [pc, #252]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041ba8:	885b      	ldrh	r3, [r3, #2]
 8041baa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041bac:	429a      	cmp	r2, r3
 8041bae:	d209      	bcs.n	8041bc4 <msTempControlHandler+0x2e0>
	  {
		  StateFlag.initComplete = TRUE;
 8041bb0:	4b3d      	ldr	r3, [pc, #244]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bb2:	2201      	movs	r2, #1
 8041bb4:	705a      	strb	r2, [r3, #1]
		  p_Statusflags->initComplete = StateFlag.initComplete;
 8041bb6:	4b3c      	ldr	r3, [pc, #240]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bb8:	785a      	ldrb	r2, [r3, #1]
 8041bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041bbc:	705a      	strb	r2, [r3, #1]
		  State = Preheat;
 8041bbe:	4b3b      	ldr	r3, [pc, #236]	; (8041cac <msTempControlHandler+0x3c8>)
 8041bc0:	2201      	movs	r2, #1
 8041bc2:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[1])
 8041bc4:	4b37      	ldr	r3, [pc, #220]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041bc6:	885b      	ldrh	r3, [r3, #2]
 8041bc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041bca:	429a      	cmp	r2, r3
 8041bcc:	d109      	bne.n	8041be2 <msTempControlHandler+0x2fe>
	  {
		  StateFlag.preheatComplete_1 = TRUE;
 8041bce:	4b36      	ldr	r3, [pc, #216]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bd0:	2201      	movs	r2, #1
 8041bd2:	709a      	strb	r2, [r3, #2]
		  p_Statusflags->preheatComplete_1 = StateFlag.preheatComplete_1;
 8041bd4:	4b34      	ldr	r3, [pc, #208]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bd6:	789a      	ldrb	r2, [r3, #2]
 8041bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041bda:	709a      	strb	r2, [r3, #2]
		  State = Soak;
 8041bdc:	4b33      	ldr	r3, [pc, #204]	; (8041cac <msTempControlHandler+0x3c8>)
 8041bde:	2202      	movs	r2, #2
 8041be0:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[2])
 8041be2:	4b30      	ldr	r3, [pc, #192]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041be4:	889b      	ldrh	r3, [r3, #4]
 8041be6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041be8:	429a      	cmp	r2, r3
 8041bea:	d109      	bne.n	8041c00 <msTempControlHandler+0x31c>
	  {
		  StateFlag.soakComplete = TRUE;
 8041bec:	4b2e      	ldr	r3, [pc, #184]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bee:	2201      	movs	r2, #1
 8041bf0:	70da      	strb	r2, [r3, #3]
		  p_Statusflags->soakComplete = StateFlag.soakComplete;
 8041bf2:	4b2d      	ldr	r3, [pc, #180]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041bf4:	78da      	ldrb	r2, [r3, #3]
 8041bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041bf8:	70da      	strb	r2, [r3, #3]
		  State = Preheat;
 8041bfa:	4b2c      	ldr	r3, [pc, #176]	; (8041cac <msTempControlHandler+0x3c8>)
 8041bfc:	2201      	movs	r2, #1
 8041bfe:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[3])
 8041c00:	4b28      	ldr	r3, [pc, #160]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041c02:	88db      	ldrh	r3, [r3, #6]
 8041c04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041c06:	429a      	cmp	r2, r3
 8041c08:	d109      	bne.n	8041c1e <msTempControlHandler+0x33a>
	  {
		  StateFlag.preheatComplete_2 = TRUE;
 8041c0a:	4b27      	ldr	r3, [pc, #156]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c0c:	2201      	movs	r2, #1
 8041c0e:	711a      	strb	r2, [r3, #4]
		  p_Statusflags->preheatComplete_2 = StateFlag.preheatComplete_2;
 8041c10:	4b25      	ldr	r3, [pc, #148]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c12:	791a      	ldrb	r2, [r3, #4]
 8041c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c16:	711a      	strb	r2, [r3, #4]
		  State = Reflow;
 8041c18:	4b24      	ldr	r3, [pc, #144]	; (8041cac <msTempControlHandler+0x3c8>)
 8041c1a:	2203      	movs	r2, #3
 8041c1c:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[4])
 8041c1e:	4b21      	ldr	r3, [pc, #132]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041c20:	891b      	ldrh	r3, [r3, #8]
 8041c22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041c24:	429a      	cmp	r2, r3
 8041c26:	d11a      	bne.n	8041c5e <msTempControlHandler+0x37a>
	  {
		  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8041c28:	2017      	movs	r0, #23
 8041c2a:	f003 fa32 	bl	8045092 <HAL_NVIC_DisableIRQ>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8041c2e:	2108      	movs	r1, #8
 8041c30:	481f      	ldr	r0, [pc, #124]	; (8041cb0 <msTempControlHandler+0x3cc>)
 8041c32:	f005 ff5f 	bl	8047af4 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8041c36:	2104      	movs	r1, #4
 8041c38:	481d      	ldr	r0, [pc, #116]	; (8041cb0 <msTempControlHandler+0x3cc>)
 8041c3a:	f005 ff5b 	bl	8047af4 <HAL_TIM_PWM_Stop>
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041c3e:	2200      	movs	r2, #0
 8041c40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041c44:	4816      	ldr	r0, [pc, #88]	; (8041ca0 <msTempControlHandler+0x3bc>)
 8041c46:	f003 ffaf 	bl	8045ba8 <HAL_GPIO_WritePin>
		  StateFlag.reflowComplete = TRUE;
 8041c4a:	4b17      	ldr	r3, [pc, #92]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c4c:	2201      	movs	r2, #1
 8041c4e:	715a      	strb	r2, [r3, #5]
		  p_Statusflags->reflowComplete = StateFlag.reflowComplete;
 8041c50:	4b15      	ldr	r3, [pc, #84]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c52:	795a      	ldrb	r2, [r3, #5]
 8041c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c56:	715a      	strb	r2, [r3, #5]
		  State = Cooldown;
 8041c58:	4b14      	ldr	r3, [pc, #80]	; (8041cac <msTempControlHandler+0x3c8>)
 8041c5a:	2204      	movs	r2, #4
 8041c5c:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if (PhaseIndex_main[5] == ReflowIndex)
 8041c5e:	4b11      	ldr	r3, [pc, #68]	; (8041ca4 <msTempControlHandler+0x3c0>)
 8041c60:	895b      	ldrh	r3, [r3, #10]
 8041c62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041c64:	429a      	cmp	r2, r3
 8041c66:	d116      	bne.n	8041c96 <msTempControlHandler+0x3b2>
	  {
		  StateFlag.cooldownComplete = TRUE;
 8041c68:	4b0f      	ldr	r3, [pc, #60]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c6a:	2201      	movs	r2, #1
 8041c6c:	719a      	strb	r2, [r3, #6]
		  p_Statusflags->cooldownComplete = StateFlag.cooldownComplete;
 8041c6e:	4b0e      	ldr	r3, [pc, #56]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c70:	799a      	ldrb	r2, [r3, #6]
 8041c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c74:	719a      	strb	r2, [r3, #6]
		  State = Finish;
 8041c76:	4b0d      	ldr	r3, [pc, #52]	; (8041cac <msTempControlHandler+0x3c8>)
 8041c78:	2205      	movs	r2, #5
 8041c7a:	701a      	strb	r2, [r3, #0]
		  StateFlag.StartFlag = FALSE;
 8041c7c:	4b0a      	ldr	r3, [pc, #40]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c7e:	2200      	movs	r2, #0
 8041c80:	701a      	strb	r2, [r3, #0]
		  p_Statusflags->StartFlag = StateFlag.StartFlag;
 8041c82:	4b09      	ldr	r3, [pc, #36]	; (8041ca8 <msTempControlHandler+0x3c4>)
 8041c84:	781a      	ldrb	r2, [r3, #0]
 8041c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041c88:	701a      	strb	r2, [r3, #0]
		  PIDFlag = 0;
 8041c8a:	4b0a      	ldr	r3, [pc, #40]	; (8041cb4 <msTempControlHandler+0x3d0>)
 8041c8c:	2200      	movs	r2, #0
 8041c8e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
	  ReflowIndex = 0;
  }
}
 8041c90:	e001      	b.n	8041c96 <msTempControlHandler+0x3b2>
	  ReflowIndex = 0;
 8041c92:	2300      	movs	r3, #0
 8041c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
}
 8041c96:	bf00      	nop
 8041c98:	3748      	adds	r7, #72	; 0x48
 8041c9a:	46bd      	mov	sp, r7
 8041c9c:	bd80      	pop	{r7, pc}
 8041c9e:	bf00      	nop
 8041ca0:	40020c00 	.word	0x40020c00
 8041ca4:	20000218 	.word	0x20000218
 8041ca8:	20000244 	.word	0x20000244
 8041cac:	20000302 	.word	0x20000302
 8041cb0:	200002b8 	.word	0x200002b8
 8041cb4:	200003f4 	.word	0x200003f4

08041cb8 <updateGuiVal>:

void updateGuiVal(msTempControlParams* CtrlParams, ReflowTemplate *p_ReflowParameters, uint16_t *p_PhaseIndex)
{
 8041cb8:	b590      	push	{r4, r7, lr}
 8041cba:	b093      	sub	sp, #76	; 0x4c
 8041cbc:	af04      	add	r7, sp, #16
 8041cbe:	60f8      	str	r0, [r7, #12]
 8041cc0:	60b9      	str	r1, [r7, #8]
 8041cc2:	607a      	str	r2, [r7, #4]
	volatile float32_t *p_temperature	= CtrlParams->p_temperature;
 8041cc4:	68fb      	ldr	r3, [r7, #12]
 8041cc6:	69db      	ldr	r3, [r3, #28]
 8041cc8:	637b      	str	r3, [r7, #52]	; 0x34
	volatile float32_t *p_PIDError   	= CtrlParams->p_PIDError;
 8041cca:	68fb      	ldr	r3, [r7, #12]
 8041ccc:	6a1b      	ldr	r3, [r3, #32]
 8041cce:	633b      	str	r3, [r7, #48]	; 0x30
	volatile float32_t f_PIDError    	= 0;
 8041cd0:	f04f 0300 	mov.w	r3, #0
 8041cd4:	613b      	str	r3, [r7, #16]
	uint32_t u32_SoakTemperature     	= p_ReflowParameters->SoakTempeture;
 8041cd6:	68bb      	ldr	r3, [r7, #8]
 8041cd8:	691b      	ldr	r3, [r3, #16]
 8041cda:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t u16_ReflowIndexCurrent  	= CtrlParams->u16_ReflowIndexCurrent;
 8041cdc:	68fb      	ldr	r3, [r7, #12]
 8041cde:	885b      	ldrh	r3, [r3, #2]
 8041ce0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t u16_FirstHeatupTime     	=    p_PhaseIndex[1];
 8041ce2:	687b      	ldr	r3, [r7, #4]
 8041ce4:	885b      	ldrh	r3, [r3, #2]
 8041ce6:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t u16_SoakTime   	    	=  ( p_PhaseIndex[2] - p_PhaseIndex[1] );
 8041ce8:	687b      	ldr	r3, [r7, #4]
 8041cea:	3304      	adds	r3, #4
 8041cec:	881a      	ldrh	r2, [r3, #0]
 8041cee:	687b      	ldr	r3, [r7, #4]
 8041cf0:	3302      	adds	r3, #2
 8041cf2:	881b      	ldrh	r3, [r3, #0]
 8041cf4:	1ad3      	subs	r3, r2, r3
 8041cf6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t u16_SecondHeatupTime    	=  ( p_PhaseIndex[3] - p_PhaseIndex[2] );
 8041cf8:	687b      	ldr	r3, [r7, #4]
 8041cfa:	3306      	adds	r3, #6
 8041cfc:	881a      	ldrh	r2, [r3, #0]
 8041cfe:	687b      	ldr	r3, [r7, #4]
 8041d00:	3304      	adds	r3, #4
 8041d02:	881b      	ldrh	r3, [r3, #0]
 8041d04:	1ad3      	subs	r3, r2, r3
 8041d06:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t u16_ReflowTime 	     	=  ( p_PhaseIndex[4] - p_PhaseIndex[3] );
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	3308      	adds	r3, #8
 8041d0c:	881a      	ldrh	r2, [r3, #0]
 8041d0e:	687b      	ldr	r3, [r7, #4]
 8041d10:	3306      	adds	r3, #6
 8041d12:	881b      	ldrh	r3, [r3, #0]
 8041d14:	1ad3      	subs	r3, r2, r3
 8041d16:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t u16_CooldownTime        	=  ( p_PhaseIndex[5] - p_PhaseIndex[4] );
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	330a      	adds	r3, #10
 8041d1c:	881a      	ldrh	r2, [r3, #0]
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	3308      	adds	r3, #8
 8041d22:	881b      	ldrh	r3, [r3, #0]
 8041d24:	1ad3      	subs	r3, r2, r3
 8041d26:	843b      	strh	r3, [r7, #32]
	uint32_t u32_ReflowTemperature   	= p_ReflowParameters->ReflowTempeture;
 8041d28:	68bb      	ldr	r3, [r7, #8]
 8041d2a:	69db      	ldr	r3, [r3, #28]
 8041d2c:	61fb      	str	r3, [r7, #28]
	uint16_t u16_CooldownTemperature 	= 24;
 8041d2e:	2318      	movs	r3, #24
 8041d30:	837b      	strh	r3, [r7, #26]
	bool b_SoakComplete              	= CtrlParams->p_StatusFlags->soakComplete;
 8041d32:	68fb      	ldr	r3, [r7, #12]
 8041d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d36:	78db      	ldrb	r3, [r3, #3]
 8041d38:	767b      	strb	r3, [r7, #25]
	bool b_ReflowComplete            	= CtrlParams->p_StatusFlags->reflowComplete;
 8041d3a:	68fb      	ldr	r3, [r7, #12]
 8041d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d3e:	795b      	ldrb	r3, [r3, #5]
 8041d40:	763b      	strb	r3, [r7, #24]
	bool b_PreheatComplete_1         	= CtrlParams->p_StatusFlags->preheatComplete_1;
 8041d42:	68fb      	ldr	r3, [r7, #12]
 8041d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d46:	789b      	ldrb	r3, [r3, #2]
 8041d48:	75fb      	strb	r3, [r7, #23]
	bool b_PreheatComplete_2         	= CtrlParams->p_StatusFlags->preheatComplete_2;
 8041d4a:	68fb      	ldr	r3, [r7, #12]
 8041d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d4e:	791b      	ldrb	r3, [r3, #4]
 8041d50:	75bb      	strb	r3, [r7, #22]
	bool b_InitComplete              	= CtrlParams->p_StatusFlags->initComplete;
 8041d52:	68fb      	ldr	r3, [r7, #12]
 8041d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d56:	785b      	ldrb	r3, [r3, #1]
 8041d58:	757b      	strb	r3, [r7, #21]
	bool b_CooldownComplete          	= CtrlParams->p_StatusFlags->cooldownComplete;
 8041d5a:	68fb      	ldr	r3, [r7, #12]
 8041d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041d5e:	799b      	ldrb	r3, [r3, #6]
 8041d60:	753b      	strb	r3, [r7, #20]


	lcd_clear_cmd();
 8041d62:	f001 ff6a 	bl	8043c3a <lcd_clear_cmd>
	f_PIDError = *p_PIDError;
 8041d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041d68:	681b      	ldr	r3, [r3, #0]
 8041d6a:	613b      	str	r3, [r7, #16]
	f_PIDError = fabsf(f_PIDError);
 8041d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8041d70:	eef0 7ae7 	vabs.f32	s15, s15
 8041d74:	edc7 7a04 	vstr	s15, [r7, #16]

	/*Show Temperature and Error*/
	f_updateGuiValTempError(p_temperature, f_PIDError);
 8041d78:	edd7 7a04 	vldr	s15, [r7, #16]
 8041d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8041d80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8041d82:	f000 feb1 	bl	8042ae8 <f_updateGuiValTempError>
	/*First Heatup Phase*/
	if( (TRUE == b_InitComplete) && (TRUE != b_PreheatComplete_1) )
 8041d86:	7d7b      	ldrb	r3, [r7, #21]
 8041d88:	2b00      	cmp	r3, #0
 8041d8a:	d00b      	beq.n	8041da4 <updateGuiVal+0xec>
 8041d8c:	7dfb      	ldrb	r3, [r7, #23]
 8041d8e:	f083 0301 	eor.w	r3, r3, #1
 8041d92:	b2db      	uxtb	r3, r3
 8041d94:	2b00      	cmp	r3, #0
 8041d96:	d005      	beq.n	8041da4 <updateGuiVal+0xec>
	{
		f_updateGuiValGradientSoakParam( u32_SoakTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent);
 8041d98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041d9a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041d9c:	4619      	mov	r1, r3
 8041d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8041da0:	f000 feee 	bl	8042b80 <f_updateGuiValGradientSoakParam>
	}
	else{}
	/*SOAK time and Temperature*/
	if( (TRUE == b_PreheatComplete_1) && (TRUE != b_SoakComplete) )
 8041da4:	7dfb      	ldrb	r3, [r7, #23]
 8041da6:	2b00      	cmp	r3, #0
 8041da8:	d00b      	beq.n	8041dc2 <updateGuiVal+0x10a>
 8041daa:	7e7b      	ldrb	r3, [r7, #25]
 8041dac:	f083 0301 	eor.w	r3, r3, #1
 8041db0:	b2db      	uxtb	r3, r3
 8041db2:	2b00      	cmp	r3, #0
 8041db4:	d005      	beq.n	8041dc2 <updateGuiVal+0x10a>
	{
		f_updateGuiValSoakParam(u32_SoakTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime);
 8041db6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041db8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041dba:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8041dbe:	f000 ff25 	bl	8042c0c <f_updateGuiValSoakParam>
	}
	else{}
	/*Second Heatup */
	if( (TRUE == b_SoakComplete) && (TRUE != b_PreheatComplete_2) )
 8041dc2:	7e7b      	ldrb	r3, [r7, #25]
 8041dc4:	2b00      	cmp	r3, #0
 8041dc6:	d00e      	beq.n	8041de6 <updateGuiVal+0x12e>
 8041dc8:	7dbb      	ldrb	r3, [r7, #22]
 8041dca:	f083 0301 	eor.w	r3, r3, #1
 8041dce:	b2db      	uxtb	r3, r3
 8041dd0:	2b00      	cmp	r3, #0
 8041dd2:	d008      	beq.n	8041de6 <updateGuiVal+0x12e>
	{
		f_updateGuiValGradientReflowParam(u32_ReflowTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime);
 8041dd4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041dd6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8041dd8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041ddc:	9300      	str	r3, [sp, #0]
 8041dde:	4603      	mov	r3, r0
 8041de0:	69f8      	ldr	r0, [r7, #28]
 8041de2:	f000 ff5f 	bl	8042ca4 <f_updateGuiValGradientReflowParam>
	}
	else{}
	/*Reflow  */
	if( (TRUE == b_PreheatComplete_2) && (TRUE != b_ReflowComplete) && (TRUE == b_SoakComplete) )
 8041de6:	7dbb      	ldrb	r3, [r7, #22]
 8041de8:	2b00      	cmp	r3, #0
 8041dea:	d013      	beq.n	8041e14 <updateGuiVal+0x15c>
 8041dec:	7e3b      	ldrb	r3, [r7, #24]
 8041dee:	f083 0301 	eor.w	r3, r3, #1
 8041df2:	b2db      	uxtb	r3, r3
 8041df4:	2b00      	cmp	r3, #0
 8041df6:	d00d      	beq.n	8041e14 <updateGuiVal+0x15c>
 8041df8:	7e7b      	ldrb	r3, [r7, #25]
 8041dfa:	2b00      	cmp	r3, #0
 8041dfc:	d00a      	beq.n	8041e14 <updateGuiVal+0x15c>
	{
		f_updateGuiValReflowParam(u32_ReflowTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime, u16_ReflowTime);
 8041dfe:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041e00:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8041e02:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8041e06:	9301      	str	r3, [sp, #4]
 8041e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041e0a:	9300      	str	r3, [sp, #0]
 8041e0c:	4603      	mov	r3, r0
 8041e0e:	69f8      	ldr	r0, [r7, #28]
 8041e10:	f000 ff96 	bl	8042d40 <f_updateGuiValReflowParam>
	}
	else{}
	/*Cooldown  */
	if( (TRUE == b_ReflowComplete) && (TRUE != b_CooldownComplete) )
 8041e14:	7e3b      	ldrb	r3, [r7, #24]
 8041e16:	2b00      	cmp	r3, #0
 8041e18:	d012      	beq.n	8041e40 <updateGuiVal+0x188>
 8041e1a:	7d3b      	ldrb	r3, [r7, #20]
 8041e1c:	f083 0301 	eor.w	r3, r3, #1
 8041e20:	b2db      	uxtb	r3, r3
 8041e22:	2b00      	cmp	r3, #0
 8041e24:	d00c      	beq.n	8041e40 <updateGuiVal+0x188>
	{
		f_updateGuiValCoolDownParam(u16_CooldownTemperature, u16_FirstHeatupTime, u16_ReflowIndexCurrent, u16_SoakTime, u16_SecondHeatupTime, u16_ReflowTime, u16_CooldownTime);
 8041e26:	8b78      	ldrh	r0, [r7, #26]
 8041e28:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8041e2a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8041e2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8041e2e:	8c3b      	ldrh	r3, [r7, #32]
 8041e30:	9302      	str	r3, [sp, #8]
 8041e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8041e34:	9301      	str	r3, [sp, #4]
 8041e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041e38:	9300      	str	r3, [sp, #0]
 8041e3a:	4623      	mov	r3, r4
 8041e3c:	f000 ffd0 	bl	8042de0 <f_updateGuiValCoolDownParam>
	}
	else{}
	/*Cooldown Complete  */
	if( (TRUE == b_CooldownComplete) )
 8041e40:	7d3b      	ldrb	r3, [r7, #20]
 8041e42:	2b00      	cmp	r3, #0
 8041e44:	d001      	beq.n	8041e4a <updateGuiVal+0x192>
	{
		f_updateGuiReflowFinished();
 8041e46:	f001 f81d 	bl	8042e84 <f_updateGuiReflowFinished>
	}
	else{}
}
 8041e4a:	bf00      	nop
 8041e4c:	373c      	adds	r7, #60	; 0x3c
 8041e4e:	46bd      	mov	sp, r7
 8041e50:	bd90      	pop	{r4, r7, pc}
	...

08041e54 <ResetFlags>:
void ResetFlags(void)
{
 8041e54:	b480      	push	{r7}
 8041e56:	af00      	add	r7, sp, #0


	  StateFlag.StartFlag = FALSE;
 8041e58:	4b0c      	ldr	r3, [pc, #48]	; (8041e8c <ResetFlags+0x38>)
 8041e5a:	2200      	movs	r2, #0
 8041e5c:	701a      	strb	r2, [r3, #0]
	  StateFlag.cooldownComplete = FALSE;
 8041e5e:	4b0b      	ldr	r3, [pc, #44]	; (8041e8c <ResetFlags+0x38>)
 8041e60:	2200      	movs	r2, #0
 8041e62:	719a      	strb	r2, [r3, #6]
	  StateFlag.initComplete = FALSE;
 8041e64:	4b09      	ldr	r3, [pc, #36]	; (8041e8c <ResetFlags+0x38>)
 8041e66:	2200      	movs	r2, #0
 8041e68:	705a      	strb	r2, [r3, #1]
	  StateFlag.preheatComplete_1 = FALSE;
 8041e6a:	4b08      	ldr	r3, [pc, #32]	; (8041e8c <ResetFlags+0x38>)
 8041e6c:	2200      	movs	r2, #0
 8041e6e:	709a      	strb	r2, [r3, #2]
	  StateFlag.preheatComplete_2 = FALSE;
 8041e70:	4b06      	ldr	r3, [pc, #24]	; (8041e8c <ResetFlags+0x38>)
 8041e72:	2200      	movs	r2, #0
 8041e74:	711a      	strb	r2, [r3, #4]
	  StateFlag.reflowComplete = FALSE;
 8041e76:	4b05      	ldr	r3, [pc, #20]	; (8041e8c <ResetFlags+0x38>)
 8041e78:	2200      	movs	r2, #0
 8041e7a:	715a      	strb	r2, [r3, #5]
	  StateFlag.soakComplete = FALSE;
 8041e7c:	4b03      	ldr	r3, [pc, #12]	; (8041e8c <ResetFlags+0x38>)
 8041e7e:	2200      	movs	r2, #0
 8041e80:	70da      	strb	r2, [r3, #3]



}
 8041e82:	bf00      	nop
 8041e84:	46bd      	mov	sp, r7
 8041e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e8a:	4770      	bx	lr
 8041e8c:	20000244 	.word	0x20000244

08041e90 <ReflowAgain>:


void ReflowAgain(void)
{
 8041e90:	b580      	push	{r7, lr}
 8041e92:	b082      	sub	sp, #8
 8041e94:	af00      	add	r7, sp, #0
	uint16_t u16_Counter = 0;
 8041e96:	2300      	movs	r3, #0
 8041e98:	80fb      	strh	r3, [r7, #6]

	lcd_clear_cmd();
 8041e9a:	f001 fece 	bl	8043c3a <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8041e9e:	2100      	movs	r1, #0
 8041ea0:	2000      	movs	r0, #0
 8041ea2:	f001 feda 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Reflow Again ?");
 8041ea6:	482e      	ldr	r0, [pc, #184]	; (8041f60 <ReflowAgain+0xd0>)
 8041ea8:	f001 ff44 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 0);
 8041eac:	2100      	movs	r1, #0
 8041eae:	2001      	movs	r0, #1
 8041eb0:	f001 fed3 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Yes/No");
 8041eb4:	482b      	ldr	r0, [pc, #172]	; (8041f64 <ReflowAgain+0xd4>)
 8041eb6:	f001 ff3d 	bl	8043d34 <lcd_send_string>
	TIM1->CNT = 10;
 8041eba:	4b2b      	ldr	r3, [pc, #172]	; (8041f68 <ReflowAgain+0xd8>)
 8041ebc:	220a      	movs	r2, #10
 8041ebe:	625a      	str	r2, [r3, #36]	; 0x24
	ui8_encButtonPressed = FALSE;
 8041ec0:	4b2a      	ldr	r3, [pc, #168]	; (8041f6c <ReflowAgain+0xdc>)
 8041ec2:	2200      	movs	r2, #0
 8041ec4:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		u16_Counter = TIM1->CNT;
 8041ec6:	4b28      	ldr	r3, [pc, #160]	; (8041f68 <ReflowAgain+0xd8>)
 8041ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041eca:	80fb      	strh	r3, [r7, #6]

		if((10 < u16_Counter)  )
 8041ecc:	88fb      	ldrh	r3, [r7, #6]
 8041ece:	2b0a      	cmp	r3, #10
 8041ed0:	d929      	bls.n	8041f26 <ReflowAgain+0x96>
		{
			TIM1->CNT = 11;
 8041ed2:	4b25      	ldr	r3, [pc, #148]	; (8041f68 <ReflowAgain+0xd8>)
 8041ed4:	220b      	movs	r2, #11
 8041ed6:	625a      	str	r2, [r3, #36]	; 0x24
			lcd_put_cur(1, 5);
 8041ed8:	2105      	movs	r1, #5
 8041eda:	2001      	movs	r0, #1
 8041edc:	f001 febd 	bl	8043c5a <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 8041ee0:	200f      	movs	r0, #15
 8041ee2:	f001 fe33 	bl	8043b4c <lcd_send_cmd>

			if(TRUE == ui8_encButtonPressed)
 8041ee6:	4b21      	ldr	r3, [pc, #132]	; (8041f6c <ReflowAgain+0xdc>)
 8041ee8:	781b      	ldrb	r3, [r3, #0]
 8041eea:	b2db      	uxtb	r3, r3
 8041eec:	2b01      	cmp	r3, #1
 8041eee:	d1ea      	bne.n	8041ec6 <ReflowAgain+0x36>
			{
				lcd_clear_cmd();
 8041ef0:	f001 fea3 	bl	8043c3a <lcd_clear_cmd>
				lcd_put_cur(0, 0);
 8041ef4:	2100      	movs	r1, #0
 8041ef6:	2000      	movs	r0, #0
 8041ef8:	f001 feaf 	bl	8043c5a <lcd_put_cur>
				lcd_send_string("Turn OFF or");
 8041efc:	481c      	ldr	r0, [pc, #112]	; (8041f70 <ReflowAgain+0xe0>)
 8041efe:	f001 ff19 	bl	8043d34 <lcd_send_string>
				lcd_put_cur(1, 0);
 8041f02:	2100      	movs	r1, #0
 8041f04:	2001      	movs	r0, #1
 8041f06:	f001 fea8 	bl	8043c5a <lcd_put_cur>
				lcd_send_string("Restart!");
 8041f0a:	481a      	ldr	r0, [pc, #104]	; (8041f74 <ReflowAgain+0xe4>)
 8041f0c:	f001 ff12 	bl	8043d34 <lcd_send_string>
				lcd_send_cmd(LCD_CURSOR_OFF);
 8041f10:	200c      	movs	r0, #12
 8041f12:	f001 fe1b 	bl	8043b4c <lcd_send_cmd>
				ui8_encButtonPressed = FALSE;
 8041f16:	4b15      	ldr	r3, [pc, #84]	; (8041f6c <ReflowAgain+0xdc>)
 8041f18:	2200      	movs	r2, #0
 8041f1a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(5000);
 8041f1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8041f20:	f002 ff6a 	bl	8044df8 <HAL_Delay>
				break;
 8041f24:	e018      	b.n	8041f58 <ReflowAgain+0xc8>
			}

		}
		else if ( (10 > u16_Counter))
 8041f26:	88fb      	ldrh	r3, [r7, #6]
 8041f28:	2b09      	cmp	r3, #9
 8041f2a:	d8cc      	bhi.n	8041ec6 <ReflowAgain+0x36>
		{
			TIM1->CNT = 9;
 8041f2c:	4b0e      	ldr	r3, [pc, #56]	; (8041f68 <ReflowAgain+0xd8>)
 8041f2e:	2209      	movs	r2, #9
 8041f30:	625a      	str	r2, [r3, #36]	; 0x24
			lcd_put_cur(1, 0);
 8041f32:	2100      	movs	r1, #0
 8041f34:	2001      	movs	r0, #1
 8041f36:	f001 fe90 	bl	8043c5a <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 8041f3a:	200f      	movs	r0, #15
 8041f3c:	f001 fe06 	bl	8043b4c <lcd_send_cmd>

			if(TRUE == ui8_encButtonPressed)
 8041f40:	4b0a      	ldr	r3, [pc, #40]	; (8041f6c <ReflowAgain+0xdc>)
 8041f42:	781b      	ldrb	r3, [r3, #0]
 8041f44:	b2db      	uxtb	r3, r3
 8041f46:	2b01      	cmp	r3, #1
 8041f48:	d1bd      	bne.n	8041ec6 <ReflowAgain+0x36>
			{
				ResetFlags();
 8041f4a:	f7ff ff83 	bl	8041e54 <ResetFlags>
				ui8_encButtonPressed = FALSE;
 8041f4e:	4b07      	ldr	r3, [pc, #28]	; (8041f6c <ReflowAgain+0xdc>)
 8041f50:	2200      	movs	r2, #0
 8041f52:	701a      	strb	r2, [r3, #0]
				NVIC_SystemReset(); /*Init a system reset*/
 8041f54:	f7ff f850 	bl	8040ff8 <__NVIC_SystemReset>
			}
		}

	}

}
 8041f58:	bf00      	nop
 8041f5a:	3708      	adds	r7, #8
 8041f5c:	46bd      	mov	sp, r7
 8041f5e:	bd80      	pop	{r7, pc}
 8041f60:	0804e368 	.word	0x0804e368
 8041f64:	0804e378 	.word	0x0804e378
 8041f68:	40010000 	.word	0x40010000
 8041f6c:	2000034d 	.word	0x2000034d
 8041f70:	0804e380 	.word	0x0804e380
 8041f74:	0804e38c 	.word	0x0804e38c

08041f78 <f_GuiErrorCheck>:

void f_GuiErrorCheck(volatile float temperature)
{
 8041f78:	b580      	push	{r7, lr}
 8041f7a:	b084      	sub	sp, #16
 8041f7c:	af00      	add	r7, sp, #0
 8041f7e:	ed87 0a01 	vstr	s0, [r7, #4]

	//###################ErrorCheck##########################
	if (-1 == temperature)
 8041f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8041f86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8041f8a:	eef4 7a47 	vcmp.f32	s15, s14
 8041f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041f92:	d130      	bne.n	8041ff6 <f_GuiErrorCheck+0x7e>
	{
		int errorCnt = 0;
 8041f94:	2300      	movs	r3, #0
 8041f96:	60fb      	str	r3, [r7, #12]
		State = Error;
 8041f98:	4b19      	ldr	r3, [pc, #100]	; (8042000 <f_GuiErrorCheck+0x88>)
 8041f9a:	2206      	movs	r2, #6
 8041f9c:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(1, 0);
 8041f9e:	2100      	movs	r1, #0
 8041fa0:	2001      	movs	r0, #1
 8041fa2:	f001 fe5a 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Sensor Error");
 8041fa6:	4817      	ldr	r0, [pc, #92]	; (8042004 <f_GuiErrorCheck+0x8c>)
 8041fa8:	f001 fec4 	bl	8043d34 <lcd_send_string>
		HAL_Delay(2000);
 8041fac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8041fb0:	f002 ff22 	bl	8044df8 <HAL_Delay>
		lcd_clear_cmd();
 8041fb4:	f001 fe41 	bl	8043c3a <lcd_clear_cmd>
		while(1)
		{
			if(0 == errorCnt)
 8041fb8:	68fb      	ldr	r3, [r7, #12]
 8041fba:	2b00      	cmp	r3, #0
 8041fbc:	d110      	bne.n	8041fe0 <f_GuiErrorCheck+0x68>
			{
				lcd_put_cur(0, 0);
 8041fbe:	2100      	movs	r1, #0
 8041fc0:	2000      	movs	r0, #0
 8041fc2:	f001 fe4a 	bl	8043c5a <lcd_put_cur>
				lcd_send_string("Reconnect");
 8041fc6:	4810      	ldr	r0, [pc, #64]	; (8042008 <f_GuiErrorCheck+0x90>)
 8041fc8:	f001 feb4 	bl	8043d34 <lcd_send_string>
				lcd_put_cur(1, 0);
 8041fcc:	2100      	movs	r1, #0
 8041fce:	2001      	movs	r0, #1
 8041fd0:	f001 fe43 	bl	8043c5a <lcd_put_cur>
				lcd_send_string("Sensor");
 8041fd4:	480d      	ldr	r0, [pc, #52]	; (804200c <f_GuiErrorCheck+0x94>)
 8041fd6:	f001 fead 	bl	8043d34 <lcd_send_string>
				errorCnt++;
 8041fda:	68fb      	ldr	r3, [r7, #12]
 8041fdc:	3301      	adds	r3, #1
 8041fde:	60fb      	str	r3, [r7, #12]
			}
			else
			{

			}
			if (-1 != temperature)
 8041fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8041fe4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8041fe8:	eef4 7a47 	vcmp.f32	s15, s14
 8041fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041ff0:	d100      	bne.n	8041ff4 <f_GuiErrorCheck+0x7c>
			if(0 == errorCnt)
 8041ff2:	e7e1      	b.n	8041fb8 <f_GuiErrorCheck+0x40>
			{
				break;
 8041ff4:	bf00      	nop
			{
				//do nothing
			}
		}
	}
}
 8041ff6:	bf00      	nop
 8041ff8:	3710      	adds	r7, #16
 8041ffa:	46bd      	mov	sp, r7
 8041ffc:	bd80      	pop	{r7, pc}
 8041ffe:	bf00      	nop
 8042000:	20000302 	.word	0x20000302
 8042004:	0804e398 	.word	0x0804e398
 8042008:	0804e3a8 	.word	0x0804e3a8
 804200c:	0804e3b4 	.word	0x0804e3b4

08042010 <f_GuiSensorInitOKmsg>:

void f_GuiSensorInitOKmsg(void)
{
 8042010:	b580      	push	{r7, lr}
 8042012:	af00      	add	r7, sp, #0

	lcd_clear_cmd();
 8042014:	f001 fe11 	bl	8043c3a <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8042018:	2100      	movs	r1, #0
 804201a:	2000      	movs	r0, #0
 804201c:	f001 fe1d 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Initializing...");
 8042020:	4805      	ldr	r0, [pc, #20]	; (8042038 <f_GuiSensorInitOKmsg+0x28>)
 8042022:	f001 fe87 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 0);
 8042026:	2100      	movs	r1, #0
 8042028:	2001      	movs	r0, #1
 804202a:	f001 fe16 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Sensor OK");
 804202e:	4803      	ldr	r0, [pc, #12]	; (804203c <f_GuiSensorInitOKmsg+0x2c>)
 8042030:	f001 fe80 	bl	8043d34 <lcd_send_string>

}
 8042034:	bf00      	nop
 8042036:	bd80      	pop	{r7, pc}
 8042038:	0804e3bc 	.word	0x0804e3bc
 804203c:	0804e3cc 	.word	0x0804e3cc

08042040 <f_GuiMenuSoakTemp>:
void f_GuiMenuSoakTemp(ReflowTemplate *p_ReflowParameters)
{
 8042040:	b580      	push	{r7, lr}
 8042042:	b086      	sub	sp, #24
 8042044:	af00      	add	r7, sp, #0
 8042046:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042048:	4a2a      	ldr	r2, [pc, #168]	; (80420f4 <f_GuiMenuSoakTemp+0xb4>)
 804204a:	f107 030c 	add.w	r3, r7, #12
 804204e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042052:	6018      	str	r0, [r3, #0]
 8042054:	3304      	adds	r3, #4
 8042056:	7019      	strb	r1, [r3, #0]
 8042058:	f107 0311 	add.w	r3, r7, #17
 804205c:	2200      	movs	r2, #0
 804205e:	601a      	str	r2, [r3, #0]
 8042060:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042062:	2300      	movs	r3, #0
 8042064:	82fb      	strh	r3, [r7, #22]
	//###################Menu1##########################
	lcd_clear_cmd();
 8042066:	f001 fde8 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->SoakTempeture) * 4;
 804206a:	687b      	ldr	r3, [r7, #4]
 804206c:	691b      	ldr	r3, [r3, #16]
 804206e:	4a22      	ldr	r2, [pc, #136]	; (80420f8 <f_GuiMenuSoakTemp+0xb8>)
 8042070:	009b      	lsls	r3, r3, #2
 8042072:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(1800 < TIM1->CNT)
 8042074:	4b20      	ldr	r3, [pc, #128]	; (80420f8 <f_GuiMenuSoakTemp+0xb8>)
 8042076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042078:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 804207c:	d903      	bls.n	8042086 <f_GuiMenuSoakTemp+0x46>
		{
			TIM1->CNT = 1800;
 804207e:	4b1e      	ldr	r3, [pc, #120]	; (80420f8 <f_GuiMenuSoakTemp+0xb8>)
 8042080:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8042084:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT/4;
 8042086:	4b1c      	ldr	r3, [pc, #112]	; (80420f8 <f_GuiMenuSoakTemp+0xb8>)
 8042088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804208a:	089b      	lsrs	r3, r3, #2
 804208c:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 804208e:	8afa      	ldrh	r2, [r7, #22]
 8042090:	f107 030c 	add.w	r3, r7, #12
 8042094:	4919      	ldr	r1, [pc, #100]	; (80420fc <f_GuiMenuSoakTemp+0xbc>)
 8042096:	4618      	mov	r0, r3
 8042098:	f007 fc1a 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 804209c:	f001 fdcd 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80420a0:	2100      	movs	r1, #0
 80420a2:	2000      	movs	r0, #0
 80420a4:	f001 fdd9 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter T1[degC]");
 80420a8:	4815      	ldr	r0, [pc, #84]	; (8042100 <f_GuiMenuSoakTemp+0xc0>)
 80420aa:	f001 fe43 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 80420ae:	2100      	movs	r1, #0
 80420b0:	2001      	movs	r0, #1
 80420b2:	f001 fdd2 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("T1=");
 80420b6:	4813      	ldr	r0, [pc, #76]	; (8042104 <f_GuiMenuSoakTemp+0xc4>)
 80420b8:	f001 fe3c 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 3);
 80420bc:	2103      	movs	r1, #3
 80420be:	2001      	movs	r0, #1
 80420c0:	f001 fdcb 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80420c4:	f107 030c 	add.w	r3, r7, #12
 80420c8:	4618      	mov	r0, r3
 80420ca:	f001 fe33 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80420ce:	20c8      	movs	r0, #200	; 0xc8
 80420d0:	f002 fe92 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80420d4:	4b0c      	ldr	r3, [pc, #48]	; (8042108 <f_GuiMenuSoakTemp+0xc8>)
 80420d6:	781b      	ldrb	r3, [r3, #0]
 80420d8:	b2db      	uxtb	r3, r3
 80420da:	2b01      	cmp	r3, #1
 80420dc:	d1ca      	bne.n	8042074 <f_GuiMenuSoakTemp+0x34>
		{
			p_ReflowParameters->SoakTempeture = u16_encoder_cnt_loc;
 80420de:	8afa      	ldrh	r2, [r7, #22]
 80420e0:	687b      	ldr	r3, [r7, #4]
 80420e2:	611a      	str	r2, [r3, #16]
			ui8_encButtonPressed = FALSE;
 80420e4:	4b08      	ldr	r3, [pc, #32]	; (8042108 <f_GuiMenuSoakTemp+0xc8>)
 80420e6:	2200      	movs	r2, #0
 80420e8:	701a      	strb	r2, [r3, #0]
			break;
 80420ea:	bf00      	nop
		else
		{

		}
	}
}
 80420ec:	bf00      	nop
 80420ee:	3718      	adds	r7, #24
 80420f0:	46bd      	mov	sp, r7
 80420f2:	bd80      	pop	{r7, pc}
 80420f4:	0804e3f0 	.word	0x0804e3f0
 80420f8:	40010000 	.word	0x40010000
 80420fc:	0804e3d8 	.word	0x0804e3d8
 8042100:	0804e3dc 	.word	0x0804e3dc
 8042104:	0804e3ec 	.word	0x0804e3ec
 8042108:	2000034d 	.word	0x2000034d

0804210c <f_GuiFEEUpdateRead>:
void f_GuiFEEUpdateRead(msTempControlParams *p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 804210c:	b580      	push	{r7, lr}
 804210e:	b082      	sub	sp, #8
 8042110:	af00      	add	r7, sp, #0
 8042112:	6078      	str	r0, [r7, #4]
 8042114:	6039      	str	r1, [r7, #0]
	//###################FEE Read##########################

	HAL_FLASH_Unlock();
 8042116:	f003 f82b 	bl	8045170 <HAL_FLASH_Unlock>
	/* Unlock the Flash Program Erase controller */
	/* EEPROM Init */
	if( EE_Init() != EE_OK)
 804211a:	f000 fed7 	bl	8042ecc <EE_Init>
 804211e:	4603      	mov	r3, r0
 8042120:	2b00      	cmp	r3, #0
 8042122:	d004      	beq.n	804212e <f_GuiFEEUpdateRead+0x22>
	{
		u32_EEPromErrCnt++;
 8042124:	4b1b      	ldr	r3, [pc, #108]	; (8042194 <f_GuiFEEUpdateRead+0x88>)
 8042126:	681b      	ldr	r3, [r3, #0]
 8042128:	3301      	adds	r3, #1
 804212a:	4a1a      	ldr	r2, [pc, #104]	; (8042194 <f_GuiFEEUpdateRead+0x88>)
 804212c:	6013      	str	r3, [r2, #0]
	{

	}


	if( HAL_ERROR == FEE_ReadCtrlParams( p_CtrlParams, p_ReflowParameters ) )
 804212e:	6839      	ldr	r1, [r7, #0]
 8042130:	6878      	ldr	r0, [r7, #4]
 8042132:	f001 fbe1 	bl	80438f8 <FEE_ReadCtrlParams>
 8042136:	4603      	mov	r3, r0
 8042138:	2b01      	cmp	r3, #1
 804213a:	d123      	bne.n	8042184 <f_GuiFEEUpdateRead+0x78>
	{
		p_CtrlParams->ui8_bank1Percentage = 100;
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	2264      	movs	r2, #100	; 0x64
 8042140:	701a      	strb	r2, [r3, #0]
		p_CtrlParams->ui8_bank2Percentage = 100;
 8042142:	687b      	ldr	r3, [r7, #4]
 8042144:	2264      	movs	r2, #100	; 0x64
 8042146:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP = 200;
 8042148:	683b      	ldr	r3, [r7, #0]
 804214a:	4a13      	ldr	r2, [pc, #76]	; (8042198 <f_GuiFEEUpdateRead+0x8c>)
 804214c:	601a      	str	r2, [r3, #0]
		p_ReflowParameters->ReflowTempeture = 250;
 804214e:	683b      	ldr	r3, [r7, #0]
 8042150:	22fa      	movs	r2, #250	; 0xfa
 8042152:	61da      	str	r2, [r3, #28]
		p_ReflowParameters->ReflowTime = 100;
 8042154:	683b      	ldr	r3, [r7, #0]
 8042156:	2264      	movs	r2, #100	; 0x64
 8042158:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->SoakTempeture = 110;
 804215a:	683b      	ldr	r3, [r7, #0]
 804215c:	226e      	movs	r2, #110	; 0x6e
 804215e:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->SoakTime = 150;
 8042160:	683b      	ldr	r3, [r7, #0]
 8042162:	2296      	movs	r2, #150	; 0x96
 8042164:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->firstHeatUpRate = 2.0;
 8042166:	683b      	ldr	r3, [r7, #0]
 8042168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 804216c:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate = 2.0;
 804216e:	683b      	ldr	r3, [r7, #0]
 8042170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8042174:	619a      	str	r2, [r3, #24]
		/*FlashWrite*/
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8042176:	4b09      	ldr	r3, [pc, #36]	; (804219c <f_GuiFEEUpdateRead+0x90>)
 8042178:	22f3      	movs	r2, #243	; 0xf3
 804217a:	60da      	str	r2, [r3, #12]
		FEE_WriteCtrlParams(p_CtrlParams, p_ReflowParameters);
 804217c:	6839      	ldr	r1, [r7, #0]
 804217e:	6878      	ldr	r0, [r7, #4]
 8042180:	f001 facc 	bl	804371c <FEE_WriteCtrlParams>
	else
	{

	}

	FLASH_FlushCaches();
 8042184:	f003 fa32 	bl	80455ec <FLASH_FlushCaches>
	HAL_FLASH_Lock();
 8042188:	f003 f814 	bl	80451b4 <HAL_FLASH_Lock>
}
 804218c:	bf00      	nop
 804218e:	3708      	adds	r7, #8
 8042190:	46bd      	mov	sp, r7
 8042192:	bd80      	pop	{r7, pc}
 8042194:	20000214 	.word	0x20000214
 8042198:	43480000 	.word	0x43480000
 804219c:	40023c00 	.word	0x40023c00

080421a0 <f_GuiMenuSoakTime>:
void f_GuiMenuSoakTime(ReflowTemplate *p_ReflowParameters)
{
 80421a0:	b580      	push	{r7, lr}
 80421a2:	b086      	sub	sp, #24
 80421a4:	af00      	add	r7, sp, #0
 80421a6:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80421a8:	4a2c      	ldr	r2, [pc, #176]	; (804225c <f_GuiMenuSoakTime+0xbc>)
 80421aa:	f107 030c 	add.w	r3, r7, #12
 80421ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80421b2:	6018      	str	r0, [r3, #0]
 80421b4:	3304      	adds	r3, #4
 80421b6:	7019      	strb	r1, [r3, #0]
 80421b8:	f107 0311 	add.w	r3, r7, #17
 80421bc:	2200      	movs	r2, #0
 80421be:	601a      	str	r2, [r3, #0]
 80421c0:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80421c2:	2300      	movs	r3, #0
 80421c4:	82fb      	strh	r3, [r7, #22]
	//###################Menu2##########################
	HAL_Delay(100);
 80421c6:	2064      	movs	r0, #100	; 0x64
 80421c8:	f002 fe16 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 80421cc:	f001 fd35 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->SoakTime) * 4;
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	695b      	ldr	r3, [r3, #20]
 80421d4:	4a22      	ldr	r2, [pc, #136]	; (8042260 <f_GuiMenuSoakTime+0xc0>)
 80421d6:	009b      	lsls	r3, r3, #2
 80421d8:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(10000 < TIM1->CNT)
 80421da:	4b21      	ldr	r3, [pc, #132]	; (8042260 <f_GuiMenuSoakTime+0xc0>)
 80421dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80421de:	f242 7210 	movw	r2, #10000	; 0x2710
 80421e2:	4293      	cmp	r3, r2
 80421e4:	d903      	bls.n	80421ee <f_GuiMenuSoakTime+0x4e>
		{
			TIM1->CNT = 10000;
 80421e6:	4b1e      	ldr	r3, [pc, #120]	; (8042260 <f_GuiMenuSoakTime+0xc0>)
 80421e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80421ec:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 80421ee:	4b1c      	ldr	r3, [pc, #112]	; (8042260 <f_GuiMenuSoakTime+0xc0>)
 80421f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80421f2:	089b      	lsrs	r3, r3, #2
 80421f4:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 80421f6:	8afa      	ldrh	r2, [r7, #22]
 80421f8:	f107 030c 	add.w	r3, r7, #12
 80421fc:	4919      	ldr	r1, [pc, #100]	; (8042264 <f_GuiMenuSoakTime+0xc4>)
 80421fe:	4618      	mov	r0, r3
 8042200:	f007 fb66 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 8042204:	f001 fd19 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042208:	2100      	movs	r1, #0
 804220a:	2000      	movs	r0, #0
 804220c:	f001 fd25 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter t1 [s]");
 8042210:	4815      	ldr	r0, [pc, #84]	; (8042268 <f_GuiMenuSoakTime+0xc8>)
 8042212:	f001 fd8f 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042216:	2100      	movs	r1, #0
 8042218:	2001      	movs	r0, #1
 804221a:	f001 fd1e 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("t1=");
 804221e:	4813      	ldr	r0, [pc, #76]	; (804226c <f_GuiMenuSoakTime+0xcc>)
 8042220:	f001 fd88 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 3);
 8042224:	2103      	movs	r1, #3
 8042226:	2001      	movs	r0, #1
 8042228:	f001 fd17 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 804222c:	f107 030c 	add.w	r3, r7, #12
 8042230:	4618      	mov	r0, r3
 8042232:	f001 fd7f 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 8042236:	20c8      	movs	r0, #200	; 0xc8
 8042238:	f002 fdde 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 804223c:	4b0c      	ldr	r3, [pc, #48]	; (8042270 <f_GuiMenuSoakTime+0xd0>)
 804223e:	781b      	ldrb	r3, [r3, #0]
 8042240:	b2db      	uxtb	r3, r3
 8042242:	2b01      	cmp	r3, #1
 8042244:	d1c9      	bne.n	80421da <f_GuiMenuSoakTime+0x3a>
		{
			p_ReflowParameters->SoakTime = u16_encoder_cnt_loc;
 8042246:	8afa      	ldrh	r2, [r7, #22]
 8042248:	687b      	ldr	r3, [r7, #4]
 804224a:	615a      	str	r2, [r3, #20]
			ui8_encButtonPressed = FALSE;
 804224c:	4b08      	ldr	r3, [pc, #32]	; (8042270 <f_GuiMenuSoakTime+0xd0>)
 804224e:	2200      	movs	r2, #0
 8042250:	701a      	strb	r2, [r3, #0]
			break;
 8042252:	bf00      	nop
		}
	}
}
 8042254:	bf00      	nop
 8042256:	3718      	adds	r7, #24
 8042258:	46bd      	mov	sp, r7
 804225a:	bd80      	pop	{r7, pc}
 804225c:	0804e3f0 	.word	0x0804e3f0
 8042260:	40010000 	.word	0x40010000
 8042264:	0804e3d8 	.word	0x0804e3d8
 8042268:	0804e3fc 	.word	0x0804e3fc
 804226c:	0804e40c 	.word	0x0804e40c
 8042270:	2000034d 	.word	0x2000034d

08042274 <f_GuiMenuReflowTemp>:
void f_GuiMenuReflowTemp(ReflowTemplate *p_ReflowParameters)
{
 8042274:	b580      	push	{r7, lr}
 8042276:	b086      	sub	sp, #24
 8042278:	af00      	add	r7, sp, #0
 804227a:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 804227c:	4a2c      	ldr	r2, [pc, #176]	; (8042330 <f_GuiMenuReflowTemp+0xbc>)
 804227e:	f107 030c 	add.w	r3, r7, #12
 8042282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042286:	6018      	str	r0, [r3, #0]
 8042288:	3304      	adds	r3, #4
 804228a:	7019      	strb	r1, [r3, #0]
 804228c:	f107 0311 	add.w	r3, r7, #17
 8042290:	2200      	movs	r2, #0
 8042292:	601a      	str	r2, [r3, #0]
 8042294:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042296:	2300      	movs	r3, #0
 8042298:	82fb      	strh	r3, [r7, #22]
	//###################Menu3##########################
	HAL_Delay(100);
 804229a:	2064      	movs	r0, #100	; 0x64
 804229c:	f002 fdac 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 80422a0:	f001 fccb 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->ReflowTempeture) * 4;
 80422a4:	687b      	ldr	r3, [r7, #4]
 80422a6:	69db      	ldr	r3, [r3, #28]
 80422a8:	4a22      	ldr	r2, [pc, #136]	; (8042334 <f_GuiMenuReflowTemp+0xc0>)
 80422aa:	009b      	lsls	r3, r3, #2
 80422ac:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(1800 < TIM1->CNT)
 80422ae:	4b21      	ldr	r3, [pc, #132]	; (8042334 <f_GuiMenuReflowTemp+0xc0>)
 80422b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80422b2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80422b6:	d903      	bls.n	80422c0 <f_GuiMenuReflowTemp+0x4c>
		{
			TIM1->CNT = 1800;
 80422b8:	4b1e      	ldr	r3, [pc, #120]	; (8042334 <f_GuiMenuReflowTemp+0xc0>)
 80422ba:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80422be:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 80422c0:	4b1c      	ldr	r3, [pc, #112]	; (8042334 <f_GuiMenuReflowTemp+0xc0>)
 80422c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80422c4:	089b      	lsrs	r3, r3, #2
 80422c6:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 80422c8:	8afa      	ldrh	r2, [r7, #22]
 80422ca:	f107 030c 	add.w	r3, r7, #12
 80422ce:	491a      	ldr	r1, [pc, #104]	; (8042338 <f_GuiMenuReflowTemp+0xc4>)
 80422d0:	4618      	mov	r0, r3
 80422d2:	f007 fafd 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 80422d6:	f001 fcb0 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80422da:	2100      	movs	r1, #0
 80422dc:	2000      	movs	r0, #0
 80422de:	f001 fcbc 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter T2[degC]");
 80422e2:	4816      	ldr	r0, [pc, #88]	; (804233c <f_GuiMenuReflowTemp+0xc8>)
 80422e4:	f001 fd26 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 80422e8:	2100      	movs	r1, #0
 80422ea:	2001      	movs	r0, #1
 80422ec:	f001 fcb5 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("T2=");
 80422f0:	4813      	ldr	r0, [pc, #76]	; (8042340 <f_GuiMenuReflowTemp+0xcc>)
 80422f2:	f001 fd1f 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 3);
 80422f6:	2103      	movs	r1, #3
 80422f8:	2001      	movs	r0, #1
 80422fa:	f001 fcae 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80422fe:	f107 030c 	add.w	r3, r7, #12
 8042302:	4618      	mov	r0, r3
 8042304:	f001 fd16 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 8042308:	20c8      	movs	r0, #200	; 0xc8
 804230a:	f002 fd75 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 804230e:	4b0d      	ldr	r3, [pc, #52]	; (8042344 <f_GuiMenuReflowTemp+0xd0>)
 8042310:	781b      	ldrb	r3, [r3, #0]
 8042312:	b2db      	uxtb	r3, r3
 8042314:	2b01      	cmp	r3, #1
 8042316:	d1ca      	bne.n	80422ae <f_GuiMenuReflowTemp+0x3a>
		{
			p_ReflowParameters->ReflowTempeture = u16_encoder_cnt_loc;
 8042318:	8afa      	ldrh	r2, [r7, #22]
 804231a:	687b      	ldr	r3, [r7, #4]
 804231c:	61da      	str	r2, [r3, #28]
			ui8_encButtonPressed = FALSE;
 804231e:	4b09      	ldr	r3, [pc, #36]	; (8042344 <f_GuiMenuReflowTemp+0xd0>)
 8042320:	2200      	movs	r2, #0
 8042322:	701a      	strb	r2, [r3, #0]
			break;
 8042324:	bf00      	nop
		else
		{

		}
	}
}
 8042326:	bf00      	nop
 8042328:	3718      	adds	r7, #24
 804232a:	46bd      	mov	sp, r7
 804232c:	bd80      	pop	{r7, pc}
 804232e:	bf00      	nop
 8042330:	0804e3f0 	.word	0x0804e3f0
 8042334:	40010000 	.word	0x40010000
 8042338:	0804e3d8 	.word	0x0804e3d8
 804233c:	0804e410 	.word	0x0804e410
 8042340:	0804e420 	.word	0x0804e420
 8042344:	2000034d 	.word	0x2000034d

08042348 <f_GuiMenuReflowTime>:
void f_GuiMenuReflowTime(ReflowTemplate *p_ReflowParameters)
{
 8042348:	b580      	push	{r7, lr}
 804234a:	b086      	sub	sp, #24
 804234c:	af00      	add	r7, sp, #0
 804234e:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042350:	4a2c      	ldr	r2, [pc, #176]	; (8042404 <f_GuiMenuReflowTime+0xbc>)
 8042352:	f107 030c 	add.w	r3, r7, #12
 8042356:	e892 0003 	ldmia.w	r2, {r0, r1}
 804235a:	6018      	str	r0, [r3, #0]
 804235c:	3304      	adds	r3, #4
 804235e:	7019      	strb	r1, [r3, #0]
 8042360:	f107 0311 	add.w	r3, r7, #17
 8042364:	2200      	movs	r2, #0
 8042366:	601a      	str	r2, [r3, #0]
 8042368:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 804236a:	2300      	movs	r3, #0
 804236c:	82fb      	strh	r3, [r7, #22]
	//###################Menu4##########################
	HAL_Delay(100);
 804236e:	2064      	movs	r0, #100	; 0x64
 8042370:	f002 fd42 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 8042374:	f001 fc61 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (p_ReflowParameters->ReflowTime) * 4;
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	6a1b      	ldr	r3, [r3, #32]
 804237c:	4a22      	ldr	r2, [pc, #136]	; (8042408 <f_GuiMenuReflowTime+0xc0>)
 804237e:	009b      	lsls	r3, r3, #2
 8042380:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(10000 < TIM1->CNT)
 8042382:	4b21      	ldr	r3, [pc, #132]	; (8042408 <f_GuiMenuReflowTime+0xc0>)
 8042384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042386:	f242 7210 	movw	r2, #10000	; 0x2710
 804238a:	4293      	cmp	r3, r2
 804238c:	d903      	bls.n	8042396 <f_GuiMenuReflowTime+0x4e>
		{
			TIM1->CNT = 10000;
 804238e:	4b1e      	ldr	r3, [pc, #120]	; (8042408 <f_GuiMenuReflowTime+0xc0>)
 8042390:	f242 7210 	movw	r2, #10000	; 0x2710
 8042394:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042396:	4b1c      	ldr	r3, [pc, #112]	; (8042408 <f_GuiMenuReflowTime+0xc0>)
 8042398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804239a:	089b      	lsrs	r3, r3, #2
 804239c:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 804239e:	8afa      	ldrh	r2, [r7, #22]
 80423a0:	f107 030c 	add.w	r3, r7, #12
 80423a4:	4919      	ldr	r1, [pc, #100]	; (804240c <f_GuiMenuReflowTime+0xc4>)
 80423a6:	4618      	mov	r0, r3
 80423a8:	f007 fa92 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 80423ac:	f001 fc45 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80423b0:	2100      	movs	r1, #0
 80423b2:	2000      	movs	r0, #0
 80423b4:	f001 fc51 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter t2 [s]");
 80423b8:	4815      	ldr	r0, [pc, #84]	; (8042410 <f_GuiMenuReflowTime+0xc8>)
 80423ba:	f001 fcbb 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 80423be:	2100      	movs	r1, #0
 80423c0:	2001      	movs	r0, #1
 80423c2:	f001 fc4a 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("t2=");
 80423c6:	4813      	ldr	r0, [pc, #76]	; (8042414 <f_GuiMenuReflowTime+0xcc>)
 80423c8:	f001 fcb4 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 3);
 80423cc:	2103      	movs	r1, #3
 80423ce:	2001      	movs	r0, #1
 80423d0:	f001 fc43 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80423d4:	f107 030c 	add.w	r3, r7, #12
 80423d8:	4618      	mov	r0, r3
 80423da:	f001 fcab 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80423de:	20c8      	movs	r0, #200	; 0xc8
 80423e0:	f002 fd0a 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80423e4:	4b0c      	ldr	r3, [pc, #48]	; (8042418 <f_GuiMenuReflowTime+0xd0>)
 80423e6:	781b      	ldrb	r3, [r3, #0]
 80423e8:	b2db      	uxtb	r3, r3
 80423ea:	2b01      	cmp	r3, #1
 80423ec:	d1c9      	bne.n	8042382 <f_GuiMenuReflowTime+0x3a>
		{
			p_ReflowParameters->ReflowTime = u16_encoder_cnt_loc;
 80423ee:	8afa      	ldrh	r2, [r7, #22]
 80423f0:	687b      	ldr	r3, [r7, #4]
 80423f2:	621a      	str	r2, [r3, #32]
			ui8_encButtonPressed = FALSE;
 80423f4:	4b08      	ldr	r3, [pc, #32]	; (8042418 <f_GuiMenuReflowTime+0xd0>)
 80423f6:	2200      	movs	r2, #0
 80423f8:	701a      	strb	r2, [r3, #0]
			break;
 80423fa:	bf00      	nop
		else
		{

		}
	}
}
 80423fc:	bf00      	nop
 80423fe:	3718      	adds	r7, #24
 8042400:	46bd      	mov	sp, r7
 8042402:	bd80      	pop	{r7, pc}
 8042404:	0804e3f0 	.word	0x0804e3f0
 8042408:	40010000 	.word	0x40010000
 804240c:	0804e3d8 	.word	0x0804e3d8
 8042410:	0804e424 	.word	0x0804e424
 8042414:	0804e434 	.word	0x0804e434
 8042418:	2000034d 	.word	0x2000034d

0804241c <f_GuiMenuSoakTempGrad>:
void f_GuiMenuSoakTempGrad(ReflowTemplate *p_ReflowParameters)
{
 804241c:	b580      	push	{r7, lr}
 804241e:	b086      	sub	sp, #24
 8042420:	af00      	add	r7, sp, #0
 8042422:	6078      	str	r0, [r7, #4]
	unsigned char 	enc_string[10] = {"    "};
 8042424:	4a3c      	ldr	r2, [pc, #240]	; (8042518 <f_GuiMenuSoakTempGrad+0xfc>)
 8042426:	f107 0308 	add.w	r3, r7, #8
 804242a:	e892 0003 	ldmia.w	r2, {r0, r1}
 804242e:	6018      	str	r0, [r3, #0]
 8042430:	3304      	adds	r3, #4
 8042432:	7019      	strb	r1, [r3, #0]
 8042434:	f107 030d 	add.w	r3, r7, #13
 8042438:	2200      	movs	r2, #0
 804243a:	601a      	str	r2, [r3, #0]
 804243c:	711a      	strb	r2, [r3, #4]
	float			f_hx;

	f_hx = 0.0;
 804243e:	f04f 0300 	mov.w	r3, #0
 8042442:	617b      	str	r3, [r7, #20]
	//###################Menu5##########################
	HAL_Delay(100);
 8042444:	2064      	movs	r0, #100	; 0x64
 8042446:	f002 fcd7 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 804244a:	f001 fbf6 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)(p_ReflowParameters->firstHeatUpRate * 400.00);
 804244e:	687b      	ldr	r3, [r7, #4]
 8042450:	68db      	ldr	r3, [r3, #12]
 8042452:	4618      	mov	r0, r3
 8042454:	f7fe f878 	bl	8040548 <__aeabi_f2d>
 8042458:	f04f 0200 	mov.w	r2, #0
 804245c:	4b2f      	ldr	r3, [pc, #188]	; (804251c <f_GuiMenuSoakTempGrad+0x100>)
 804245e:	f7fe f8cb 	bl	80405f8 <__aeabi_dmul>
 8042462:	4602      	mov	r2, r0
 8042464:	460b      	mov	r3, r1
 8042466:	4610      	mov	r0, r2
 8042468:	4619      	mov	r1, r3
 804246a:	f7fe fb9d 	bl	8040ba8 <__aeabi_d2uiz>
 804246e:	4603      	mov	r3, r0
 8042470:	b29a      	uxth	r2, r3
 8042472:	4b2b      	ldr	r3, [pc, #172]	; (8042520 <f_GuiMenuSoakTempGrad+0x104>)
 8042474:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(1600 < TIM1->CNT)
 8042476:	4b2a      	ldr	r3, [pc, #168]	; (8042520 <f_GuiMenuSoakTempGrad+0x104>)
 8042478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804247a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804247e:	d903      	bls.n	8042488 <f_GuiMenuSoakTempGrad+0x6c>
		{
			TIM1->CNT = 1600;
 8042480:	4b27      	ldr	r3, [pc, #156]	; (8042520 <f_GuiMenuSoakTempGrad+0x104>)
 8042482:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8042486:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		f_hx = TIM1->CNT / 400.00;
 8042488:	4b25      	ldr	r3, [pc, #148]	; (8042520 <f_GuiMenuSoakTempGrad+0x104>)
 804248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804248c:	4618      	mov	r0, r3
 804248e:	f7fe f839 	bl	8040504 <__aeabi_ui2d>
 8042492:	f04f 0200 	mov.w	r2, #0
 8042496:	4b21      	ldr	r3, [pc, #132]	; (804251c <f_GuiMenuSoakTempGrad+0x100>)
 8042498:	f7fe f9d8 	bl	804084c <__aeabi_ddiv>
 804249c:	4602      	mov	r2, r0
 804249e:	460b      	mov	r3, r1
 80424a0:	4610      	mov	r0, r2
 80424a2:	4619      	mov	r1, r3
 80424a4:	f7fe fba0 	bl	8040be8 <__aeabi_d2f>
 80424a8:	4603      	mov	r3, r0
 80424aa:	617b      	str	r3, [r7, #20]
		sprintf((char*)&enc_string,"%3.2f",f_hx);
 80424ac:	6978      	ldr	r0, [r7, #20]
 80424ae:	f7fe f84b 	bl	8040548 <__aeabi_f2d>
 80424b2:	4602      	mov	r2, r0
 80424b4:	460b      	mov	r3, r1
 80424b6:	f107 0008 	add.w	r0, r7, #8
 80424ba:	491a      	ldr	r1, [pc, #104]	; (8042524 <f_GuiMenuSoakTempGrad+0x108>)
 80424bc:	f007 fa08 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 80424c0:	f001 fbbb 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80424c4:	2100      	movs	r1, #0
 80424c6:	2000      	movs	r0, #0
 80424c8:	f001 fbc7 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter h1[degC/s]");
 80424cc:	4816      	ldr	r0, [pc, #88]	; (8042528 <f_GuiMenuSoakTempGrad+0x10c>)
 80424ce:	f001 fc31 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 80424d2:	2100      	movs	r1, #0
 80424d4:	2001      	movs	r0, #1
 80424d6:	f001 fbc0 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("h1=");
 80424da:	4814      	ldr	r0, [pc, #80]	; (804252c <f_GuiMenuSoakTempGrad+0x110>)
 80424dc:	f001 fc2a 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 4);
 80424e0:	2104      	movs	r1, #4
 80424e2:	2001      	movs	r0, #1
 80424e4:	f001 fbb9 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80424e8:	f107 0308 	add.w	r3, r7, #8
 80424ec:	4618      	mov	r0, r3
 80424ee:	f001 fc21 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80424f2:	20c8      	movs	r0, #200	; 0xc8
 80424f4:	f002 fc80 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80424f8:	4b0d      	ldr	r3, [pc, #52]	; (8042530 <f_GuiMenuSoakTempGrad+0x114>)
 80424fa:	781b      	ldrb	r3, [r3, #0]
 80424fc:	b2db      	uxtb	r3, r3
 80424fe:	2b01      	cmp	r3, #1
 8042500:	d1b9      	bne.n	8042476 <f_GuiMenuSoakTempGrad+0x5a>
		{
			p_ReflowParameters->firstHeatUpRate = f_hx;
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	697a      	ldr	r2, [r7, #20]
 8042506:	60da      	str	r2, [r3, #12]
			ui8_encButtonPressed = FALSE;
 8042508:	4b09      	ldr	r3, [pc, #36]	; (8042530 <f_GuiMenuSoakTempGrad+0x114>)
 804250a:	2200      	movs	r2, #0
 804250c:	701a      	strb	r2, [r3, #0]
			break;
 804250e:	bf00      	nop
		else
		{

		}
	}
}
 8042510:	bf00      	nop
 8042512:	3718      	adds	r7, #24
 8042514:	46bd      	mov	sp, r7
 8042516:	bd80      	pop	{r7, pc}
 8042518:	0804e3f0 	.word	0x0804e3f0
 804251c:	40790000 	.word	0x40790000
 8042520:	40010000 	.word	0x40010000
 8042524:	0804e438 	.word	0x0804e438
 8042528:	0804e440 	.word	0x0804e440
 804252c:	0804e454 	.word	0x0804e454
 8042530:	2000034d 	.word	0x2000034d

08042534 <f_GuiMenuKPUpdate>:
void f_GuiMenuKPUpdate(ReflowTemplate *p_ReflowParameters)
{
 8042534:	b580      	push	{r7, lr}
 8042536:	b086      	sub	sp, #24
 8042538:	af00      	add	r7, sp, #0
 804253a:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 804253c:	4a31      	ldr	r2, [pc, #196]	; (8042604 <f_GuiMenuKPUpdate+0xd0>)
 804253e:	f107 030c 	add.w	r3, r7, #12
 8042542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042546:	6018      	str	r0, [r3, #0]
 8042548:	3304      	adds	r3, #4
 804254a:	7019      	strb	r1, [r3, #0]
 804254c:	f107 0311 	add.w	r3, r7, #17
 8042550:	2200      	movs	r2, #0
 8042552:	601a      	str	r2, [r3, #0]
 8042554:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042556:	2300      	movs	r3, #0
 8042558:	82fb      	strh	r3, [r7, #22]
	//###################Menu6##########################
	HAL_Delay(100);
 804255a:	2064      	movs	r0, #100	; 0x64
 804255c:	f002 fc4c 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 8042560:	f001 fb6b 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KP * 4;
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	edd3 7a00 	vldr	s15, [r3]
 804256a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804256e:	ee17 3a90 	vmov	r3, s15
 8042572:	b29b      	uxth	r3, r3
 8042574:	009a      	lsls	r2, r3, #2
 8042576:	4b24      	ldr	r3, [pc, #144]	; (8042608 <f_GuiMenuKPUpdate+0xd4>)
 8042578:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 804257a:	4b23      	ldr	r3, [pc, #140]	; (8042608 <f_GuiMenuKPUpdate+0xd4>)
 804257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804257e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8042582:	d903      	bls.n	804258c <f_GuiMenuKPUpdate+0x58>
		{
			TIM1->CNT = 8000;
 8042584:	4b20      	ldr	r3, [pc, #128]	; (8042608 <f_GuiMenuKPUpdate+0xd4>)
 8042586:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804258a:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 804258c:	4b1e      	ldr	r3, [pc, #120]	; (8042608 <f_GuiMenuKPUpdate+0xd4>)
 804258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042590:	089b      	lsrs	r3, r3, #2
 8042592:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042594:	8afa      	ldrh	r2, [r7, #22]
 8042596:	f107 030c 	add.w	r3, r7, #12
 804259a:	491c      	ldr	r1, [pc, #112]	; (804260c <f_GuiMenuKPUpdate+0xd8>)
 804259c:	4618      	mov	r0, r3
 804259e:	f007 f997 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 80425a2:	f001 fb4a 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80425a6:	2100      	movs	r1, #0
 80425a8:	2000      	movs	r0, #0
 80425aa:	f001 fb56 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter KP");
 80425ae:	4818      	ldr	r0, [pc, #96]	; (8042610 <f_GuiMenuKPUpdate+0xdc>)
 80425b0:	f001 fbc0 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 80425b4:	2100      	movs	r1, #0
 80425b6:	2001      	movs	r0, #1
 80425b8:	f001 fb4f 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("KP=");
 80425bc:	4815      	ldr	r0, [pc, #84]	; (8042614 <f_GuiMenuKPUpdate+0xe0>)
 80425be:	f001 fbb9 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 4);
 80425c2:	2104      	movs	r1, #4
 80425c4:	2001      	movs	r0, #1
 80425c6:	f001 fb48 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80425ca:	f107 030c 	add.w	r3, r7, #12
 80425ce:	4618      	mov	r0, r3
 80425d0:	f001 fbb0 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80425d4:	20c8      	movs	r0, #200	; 0xc8
 80425d6:	f002 fc0f 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80425da:	4b0f      	ldr	r3, [pc, #60]	; (8042618 <f_GuiMenuKPUpdate+0xe4>)
 80425dc:	781b      	ldrb	r3, [r3, #0]
 80425de:	b2db      	uxtb	r3, r3
 80425e0:	2b01      	cmp	r3, #1
 80425e2:	d1ca      	bne.n	804257a <f_GuiMenuKPUpdate+0x46>
		{
			p_ReflowParameters->KP = (float32_t)u16_encoder_cnt_loc;
 80425e4:	8afb      	ldrh	r3, [r7, #22]
 80425e6:	ee07 3a90 	vmov	s15, r3
 80425ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80425ee:	687b      	ldr	r3, [r7, #4]
 80425f0:	edc3 7a00 	vstr	s15, [r3]
			ui8_encButtonPressed = FALSE;
 80425f4:	4b08      	ldr	r3, [pc, #32]	; (8042618 <f_GuiMenuKPUpdate+0xe4>)
 80425f6:	2200      	movs	r2, #0
 80425f8:	701a      	strb	r2, [r3, #0]
			break;
 80425fa:	bf00      	nop
		}
	}
}
 80425fc:	bf00      	nop
 80425fe:	3718      	adds	r7, #24
 8042600:	46bd      	mov	sp, r7
 8042602:	bd80      	pop	{r7, pc}
 8042604:	0804e3f0 	.word	0x0804e3f0
 8042608:	40010000 	.word	0x40010000
 804260c:	0804e3d8 	.word	0x0804e3d8
 8042610:	0804e458 	.word	0x0804e458
 8042614:	0804e464 	.word	0x0804e464
 8042618:	2000034d 	.word	0x2000034d

0804261c <f_GuiMenuKIUpdate>:
void f_GuiMenuKIUpdate(ReflowTemplate *p_ReflowParameters)
{
 804261c:	b580      	push	{r7, lr}
 804261e:	b086      	sub	sp, #24
 8042620:	af00      	add	r7, sp, #0
 8042622:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042624:	4a31      	ldr	r2, [pc, #196]	; (80426ec <f_GuiMenuKIUpdate+0xd0>)
 8042626:	f107 030c 	add.w	r3, r7, #12
 804262a:	e892 0003 	ldmia.w	r2, {r0, r1}
 804262e:	6018      	str	r0, [r3, #0]
 8042630:	3304      	adds	r3, #4
 8042632:	7019      	strb	r1, [r3, #0]
 8042634:	f107 0311 	add.w	r3, r7, #17
 8042638:	2200      	movs	r2, #0
 804263a:	601a      	str	r2, [r3, #0]
 804263c:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 804263e:	2300      	movs	r3, #0
 8042640:	82fb      	strh	r3, [r7, #22]
	//###################Menu7##########################
	HAL_Delay(100);
 8042642:	2064      	movs	r0, #100	; 0x64
 8042644:	f002 fbd8 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 8042648:	f001 faf7 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KI * 4;
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	edd3 7a01 	vldr	s15, [r3, #4]
 8042652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8042656:	ee17 3a90 	vmov	r3, s15
 804265a:	b29b      	uxth	r3, r3
 804265c:	009a      	lsls	r2, r3, #2
 804265e:	4b24      	ldr	r3, [pc, #144]	; (80426f0 <f_GuiMenuKIUpdate+0xd4>)
 8042660:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 8042662:	4b23      	ldr	r3, [pc, #140]	; (80426f0 <f_GuiMenuKIUpdate+0xd4>)
 8042664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042666:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 804266a:	d903      	bls.n	8042674 <f_GuiMenuKIUpdate+0x58>
		{
			TIM1->CNT = 8000;
 804266c:	4b20      	ldr	r3, [pc, #128]	; (80426f0 <f_GuiMenuKIUpdate+0xd4>)
 804266e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8042672:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042674:	4b1e      	ldr	r3, [pc, #120]	; (80426f0 <f_GuiMenuKIUpdate+0xd4>)
 8042676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042678:	089b      	lsrs	r3, r3, #2
 804267a:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 804267c:	8afa      	ldrh	r2, [r7, #22]
 804267e:	f107 030c 	add.w	r3, r7, #12
 8042682:	491c      	ldr	r1, [pc, #112]	; (80426f4 <f_GuiMenuKIUpdate+0xd8>)
 8042684:	4618      	mov	r0, r3
 8042686:	f007 f923 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 804268a:	f001 fad6 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 804268e:	2100      	movs	r1, #0
 8042690:	2000      	movs	r0, #0
 8042692:	f001 fae2 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter KI");
 8042696:	4818      	ldr	r0, [pc, #96]	; (80426f8 <f_GuiMenuKIUpdate+0xdc>)
 8042698:	f001 fb4c 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 804269c:	2100      	movs	r1, #0
 804269e:	2001      	movs	r0, #1
 80426a0:	f001 fadb 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("KI=");
 80426a4:	4815      	ldr	r0, [pc, #84]	; (80426fc <f_GuiMenuKIUpdate+0xe0>)
 80426a6:	f001 fb45 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 4);
 80426aa:	2104      	movs	r1, #4
 80426ac:	2001      	movs	r0, #1
 80426ae:	f001 fad4 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80426b2:	f107 030c 	add.w	r3, r7, #12
 80426b6:	4618      	mov	r0, r3
 80426b8:	f001 fb3c 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80426bc:	20c8      	movs	r0, #200	; 0xc8
 80426be:	f002 fb9b 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80426c2:	4b0f      	ldr	r3, [pc, #60]	; (8042700 <f_GuiMenuKIUpdate+0xe4>)
 80426c4:	781b      	ldrb	r3, [r3, #0]
 80426c6:	b2db      	uxtb	r3, r3
 80426c8:	2b01      	cmp	r3, #1
 80426ca:	d1ca      	bne.n	8042662 <f_GuiMenuKIUpdate+0x46>
		{
			p_ReflowParameters->KI = (float32_t)u16_encoder_cnt_loc;
 80426cc:	8afb      	ldrh	r3, [r7, #22]
 80426ce:	ee07 3a90 	vmov	s15, r3
 80426d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80426d6:	687b      	ldr	r3, [r7, #4]
 80426d8:	edc3 7a01 	vstr	s15, [r3, #4]
			ui8_encButtonPressed = FALSE;
 80426dc:	4b08      	ldr	r3, [pc, #32]	; (8042700 <f_GuiMenuKIUpdate+0xe4>)
 80426de:	2200      	movs	r2, #0
 80426e0:	701a      	strb	r2, [r3, #0]
			break;
 80426e2:	bf00      	nop
		}
	}
}
 80426e4:	bf00      	nop
 80426e6:	3718      	adds	r7, #24
 80426e8:	46bd      	mov	sp, r7
 80426ea:	bd80      	pop	{r7, pc}
 80426ec:	0804e3f0 	.word	0x0804e3f0
 80426f0:	40010000 	.word	0x40010000
 80426f4:	0804e3d8 	.word	0x0804e3d8
 80426f8:	0804e468 	.word	0x0804e468
 80426fc:	0804e474 	.word	0x0804e474
 8042700:	2000034d 	.word	0x2000034d

08042704 <f_GuiMenuKDUpdate>:

void f_GuiMenuKDUpdate(ReflowTemplate *p_ReflowParameters)
{
 8042704:	b580      	push	{r7, lr}
 8042706:	b086      	sub	sp, #24
 8042708:	af00      	add	r7, sp, #0
 804270a:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 804270c:	4a31      	ldr	r2, [pc, #196]	; (80427d4 <f_GuiMenuKDUpdate+0xd0>)
 804270e:	f107 030c 	add.w	r3, r7, #12
 8042712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042716:	6018      	str	r0, [r3, #0]
 8042718:	3304      	adds	r3, #4
 804271a:	7019      	strb	r1, [r3, #0]
 804271c:	f107 0311 	add.w	r3, r7, #17
 8042720:	2200      	movs	r2, #0
 8042722:	601a      	str	r2, [r3, #0]
 8042724:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042726:	2300      	movs	r3, #0
 8042728:	82fb      	strh	r3, [r7, #22]
	//###################Menu8##########################
	HAL_Delay(100);
 804272a:	2064      	movs	r0, #100	; 0x64
 804272c:	f002 fb64 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 8042730:	f001 fa83 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)p_ReflowParameters->KD * 4;
 8042734:	687b      	ldr	r3, [r7, #4]
 8042736:	edd3 7a02 	vldr	s15, [r3, #8]
 804273a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804273e:	ee17 3a90 	vmov	r3, s15
 8042742:	b29b      	uxth	r3, r3
 8042744:	009a      	lsls	r2, r3, #2
 8042746:	4b24      	ldr	r3, [pc, #144]	; (80427d8 <f_GuiMenuKDUpdate+0xd4>)
 8042748:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(8000 < TIM1->CNT)
 804274a:	4b23      	ldr	r3, [pc, #140]	; (80427d8 <f_GuiMenuKDUpdate+0xd4>)
 804274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804274e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8042752:	d903      	bls.n	804275c <f_GuiMenuKDUpdate+0x58>
		{
			TIM1->CNT = 8000;
 8042754:	4b20      	ldr	r3, [pc, #128]	; (80427d8 <f_GuiMenuKDUpdate+0xd4>)
 8042756:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804275a:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		u16_encoder_cnt_loc = TIM1->CNT / 4;
 804275c:	4b1e      	ldr	r3, [pc, #120]	; (80427d8 <f_GuiMenuKDUpdate+0xd4>)
 804275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042760:	089b      	lsrs	r3, r3, #2
 8042762:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042764:	8afa      	ldrh	r2, [r7, #22]
 8042766:	f107 030c 	add.w	r3, r7, #12
 804276a:	491c      	ldr	r1, [pc, #112]	; (80427dc <f_GuiMenuKDUpdate+0xd8>)
 804276c:	4618      	mov	r0, r3
 804276e:	f007 f8af 	bl	80498d0 <siprintf>
		lcd_clear_cmd();
 8042772:	f001 fa62 	bl	8043c3a <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 8042776:	2100      	movs	r1, #0
 8042778:	2000      	movs	r0, #0
 804277a:	f001 fa6e 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter KD");
 804277e:	4818      	ldr	r0, [pc, #96]	; (80427e0 <f_GuiMenuKDUpdate+0xdc>)
 8042780:	f001 fad8 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 8042784:	2100      	movs	r1, #0
 8042786:	2001      	movs	r0, #1
 8042788:	f001 fa67 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("KD=");
 804278c:	4815      	ldr	r0, [pc, #84]	; (80427e4 <f_GuiMenuKDUpdate+0xe0>)
 804278e:	f001 fad1 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 4);
 8042792:	2104      	movs	r1, #4
 8042794:	2001      	movs	r0, #1
 8042796:	f001 fa60 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 804279a:	f107 030c 	add.w	r3, r7, #12
 804279e:	4618      	mov	r0, r3
 80427a0:	f001 fac8 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80427a4:	20c8      	movs	r0, #200	; 0xc8
 80427a6:	f002 fb27 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80427aa:	4b0f      	ldr	r3, [pc, #60]	; (80427e8 <f_GuiMenuKDUpdate+0xe4>)
 80427ac:	781b      	ldrb	r3, [r3, #0]
 80427ae:	b2db      	uxtb	r3, r3
 80427b0:	2b01      	cmp	r3, #1
 80427b2:	d1ca      	bne.n	804274a <f_GuiMenuKDUpdate+0x46>
		{
			p_ReflowParameters->KD = (float32_t)u16_encoder_cnt_loc;
 80427b4:	8afb      	ldrh	r3, [r7, #22]
 80427b6:	ee07 3a90 	vmov	s15, r3
 80427ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80427be:	687b      	ldr	r3, [r7, #4]
 80427c0:	edc3 7a02 	vstr	s15, [r3, #8]
			ui8_encButtonPressed = FALSE;
 80427c4:	4b08      	ldr	r3, [pc, #32]	; (80427e8 <f_GuiMenuKDUpdate+0xe4>)
 80427c6:	2200      	movs	r2, #0
 80427c8:	701a      	strb	r2, [r3, #0]
			break;
 80427ca:	bf00      	nop
		}
	}
}
 80427cc:	bf00      	nop
 80427ce:	3718      	adds	r7, #24
 80427d0:	46bd      	mov	sp, r7
 80427d2:	bd80      	pop	{r7, pc}
 80427d4:	0804e3f0 	.word	0x0804e3f0
 80427d8:	40010000 	.word	0x40010000
 80427dc:	0804e3d8 	.word	0x0804e3d8
 80427e0:	0804e478 	.word	0x0804e478
 80427e4:	0804e484 	.word	0x0804e484
 80427e8:	2000034d 	.word	0x2000034d

080427ec <f_GuiMenuReflowTempGrad>:


void f_GuiMenuReflowTempGrad(ReflowTemplate *p_ReflowParameters)
{
 80427ec:	b580      	push	{r7, lr}
 80427ee:	b086      	sub	sp, #24
 80427f0:	af00      	add	r7, sp, #0
 80427f2:	6078      	str	r0, [r7, #4]
	unsigned char 	enc_string[10] = {"    "};
 80427f4:	4a3b      	ldr	r2, [pc, #236]	; (80428e4 <f_GuiMenuReflowTempGrad+0xf8>)
 80427f6:	f107 0308 	add.w	r3, r7, #8
 80427fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80427fe:	6018      	str	r0, [r3, #0]
 8042800:	3304      	adds	r3, #4
 8042802:	7019      	strb	r1, [r3, #0]
 8042804:	f107 030d 	add.w	r3, r7, #13
 8042808:	2200      	movs	r2, #0
 804280a:	601a      	str	r2, [r3, #0]
 804280c:	711a      	strb	r2, [r3, #4]
	float			f_hx;

	f_hx = 0.0;
 804280e:	f04f 0300 	mov.w	r3, #0
 8042812:	617b      	str	r3, [r7, #20]
	//###################Menu9##########################
	HAL_Delay(100);
 8042814:	2064      	movs	r0, #100	; 0x64
 8042816:	f002 faef 	bl	8044df8 <HAL_Delay>
	lcd_clear_cmd();
 804281a:	f001 fa0e 	bl	8043c3a <lcd_clear_cmd>
	TIM1->CNT = (uint16_t)(p_ReflowParameters->secondHeatUpRate * 400.00);
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	699b      	ldr	r3, [r3, #24]
 8042822:	4618      	mov	r0, r3
 8042824:	f7fd fe90 	bl	8040548 <__aeabi_f2d>
 8042828:	f04f 0200 	mov.w	r2, #0
 804282c:	4b2e      	ldr	r3, [pc, #184]	; (80428e8 <f_GuiMenuReflowTempGrad+0xfc>)
 804282e:	f7fd fee3 	bl	80405f8 <__aeabi_dmul>
 8042832:	4602      	mov	r2, r0
 8042834:	460b      	mov	r3, r1
 8042836:	4610      	mov	r0, r2
 8042838:	4619      	mov	r1, r3
 804283a:	f7fe f9b5 	bl	8040ba8 <__aeabi_d2uiz>
 804283e:	4603      	mov	r3, r0
 8042840:	b29a      	uxth	r2, r3
 8042842:	4b2a      	ldr	r3, [pc, #168]	; (80428ec <f_GuiMenuReflowTempGrad+0x100>)
 8042844:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
	{
		if(1600 < TIM1->CNT)
 8042846:	4b29      	ldr	r3, [pc, #164]	; (80428ec <f_GuiMenuReflowTempGrad+0x100>)
 8042848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804284a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804284e:	d903      	bls.n	8042858 <f_GuiMenuReflowTempGrad+0x6c>
		{
			TIM1->CNT = 1600;
 8042850:	4b26      	ldr	r3, [pc, #152]	; (80428ec <f_GuiMenuReflowTempGrad+0x100>)
 8042852:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8042856:	625a      	str	r2, [r3, #36]	; 0x24
		else
		{

		}

		f_hx = TIM1->CNT / 400.00;
 8042858:	4b24      	ldr	r3, [pc, #144]	; (80428ec <f_GuiMenuReflowTempGrad+0x100>)
 804285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804285c:	4618      	mov	r0, r3
 804285e:	f7fd fe51 	bl	8040504 <__aeabi_ui2d>
 8042862:	f04f 0200 	mov.w	r2, #0
 8042866:	4b20      	ldr	r3, [pc, #128]	; (80428e8 <f_GuiMenuReflowTempGrad+0xfc>)
 8042868:	f7fd fff0 	bl	804084c <__aeabi_ddiv>
 804286c:	4602      	mov	r2, r0
 804286e:	460b      	mov	r3, r1
 8042870:	4610      	mov	r0, r2
 8042872:	4619      	mov	r1, r3
 8042874:	f7fe f9b8 	bl	8040be8 <__aeabi_d2f>
 8042878:	4603      	mov	r3, r0
 804287a:	617b      	str	r3, [r7, #20]
		sprintf((char*)&enc_string,"%3.2f",f_hx);
 804287c:	6978      	ldr	r0, [r7, #20]
 804287e:	f7fd fe63 	bl	8040548 <__aeabi_f2d>
 8042882:	4602      	mov	r2, r0
 8042884:	460b      	mov	r3, r1
 8042886:	f107 0008 	add.w	r0, r7, #8
 804288a:	4919      	ldr	r1, [pc, #100]	; (80428f0 <f_GuiMenuReflowTempGrad+0x104>)
 804288c:	f007 f820 	bl	80498d0 <siprintf>
		lcd_put_cur(0, 0);
 8042890:	2100      	movs	r1, #0
 8042892:	2000      	movs	r0, #0
 8042894:	f001 f9e1 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("Enter h2[degC/s]");
 8042898:	4816      	ldr	r0, [pc, #88]	; (80428f4 <f_GuiMenuReflowTempGrad+0x108>)
 804289a:	f001 fa4b 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 0);
 804289e:	2100      	movs	r1, #0
 80428a0:	2001      	movs	r0, #1
 80428a2:	f001 f9da 	bl	8043c5a <lcd_put_cur>
		lcd_send_string("h2=");
 80428a6:	4814      	ldr	r0, [pc, #80]	; (80428f8 <f_GuiMenuReflowTempGrad+0x10c>)
 80428a8:	f001 fa44 	bl	8043d34 <lcd_send_string>
		lcd_put_cur(1, 4);
 80428ac:	2104      	movs	r1, #4
 80428ae:	2001      	movs	r0, #1
 80428b0:	f001 f9d3 	bl	8043c5a <lcd_put_cur>
		lcd_send_string((char*)&enc_string);
 80428b4:	f107 0308 	add.w	r3, r7, #8
 80428b8:	4618      	mov	r0, r3
 80428ba:	f001 fa3b 	bl	8043d34 <lcd_send_string>
		HAL_Delay(200);
 80428be:	20c8      	movs	r0, #200	; 0xc8
 80428c0:	f002 fa9a 	bl	8044df8 <HAL_Delay>

		if(TRUE == ui8_encButtonPressed)
 80428c4:	4b0d      	ldr	r3, [pc, #52]	; (80428fc <f_GuiMenuReflowTempGrad+0x110>)
 80428c6:	781b      	ldrb	r3, [r3, #0]
 80428c8:	b2db      	uxtb	r3, r3
 80428ca:	2b01      	cmp	r3, #1
 80428cc:	d1bb      	bne.n	8042846 <f_GuiMenuReflowTempGrad+0x5a>
		{
			p_ReflowParameters->secondHeatUpRate = f_hx;
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	697a      	ldr	r2, [r7, #20]
 80428d2:	619a      	str	r2, [r3, #24]
			ui8_encButtonPressed = FALSE;
 80428d4:	4b09      	ldr	r3, [pc, #36]	; (80428fc <f_GuiMenuReflowTempGrad+0x110>)
 80428d6:	2200      	movs	r2, #0
 80428d8:	701a      	strb	r2, [r3, #0]
			break;
 80428da:	bf00      	nop
		else
		{

		}
	}
}
 80428dc:	bf00      	nop
 80428de:	3718      	adds	r7, #24
 80428e0:	46bd      	mov	sp, r7
 80428e2:	bd80      	pop	{r7, pc}
 80428e4:	0804e3f0 	.word	0x0804e3f0
 80428e8:	40790000 	.word	0x40790000
 80428ec:	40010000 	.word	0x40010000
 80428f0:	0804e438 	.word	0x0804e438
 80428f4:	0804e488 	.word	0x0804e488
 80428f8:	0804e49c 	.word	0x0804e49c
 80428fc:	2000034d 	.word	0x2000034d

08042900 <f_GuiMenuBank1Update>:
void f_GuiMenuBank1Update(msTempControlParams *p_CtrlParams)
{
 8042900:	b580      	push	{r7, lr}
 8042902:	b086      	sub	sp, #24
 8042904:	af00      	add	r7, sp, #0
 8042906:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 8042908:	4a2c      	ldr	r2, [pc, #176]	; (80429bc <f_GuiMenuBank1Update+0xbc>)
 804290a:	f107 030c 	add.w	r3, r7, #12
 804290e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8042912:	6018      	str	r0, [r3, #0]
 8042914:	3304      	adds	r3, #4
 8042916:	7019      	strb	r1, [r3, #0]
 8042918:	f107 0311 	add.w	r3, r7, #17
 804291c:	2200      	movs	r2, #0
 804291e:	601a      	str	r2, [r3, #0]
 8042920:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 8042922:	2300      	movs	r3, #0
 8042924:	82fb      	strh	r3, [r7, #22]
	//###################Menu10##########################
		HAL_Delay(100);
 8042926:	2064      	movs	r0, #100	; 0x64
 8042928:	f002 fa66 	bl	8044df8 <HAL_Delay>
		lcd_clear_cmd();
 804292c:	f001 f985 	bl	8043c3a <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank1Percentage * 4;
 8042930:	4b23      	ldr	r3, [pc, #140]	; (80429c0 <f_GuiMenuBank1Update+0xc0>)
 8042932:	781b      	ldrb	r3, [r3, #0]
 8042934:	009a      	lsls	r2, r3, #2
 8042936:	4b23      	ldr	r3, [pc, #140]	; (80429c4 <f_GuiMenuBank1Update+0xc4>)
 8042938:	625a      	str	r2, [r3, #36]	; 0x24

		while(1)
		{
			if(400 < TIM1->CNT)
 804293a:	4b22      	ldr	r3, [pc, #136]	; (80429c4 <f_GuiMenuBank1Update+0xc4>)
 804293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804293e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8042942:	d903      	bls.n	804294c <f_GuiMenuBank1Update+0x4c>
			{
				TIM1->CNT = 400;
 8042944:	4b1f      	ldr	r3, [pc, #124]	; (80429c4 <f_GuiMenuBank1Update+0xc4>)
 8042946:	f44f 72c8 	mov.w	r2, #400	; 0x190
 804294a:	625a      	str	r2, [r3, #36]	; 0x24
			else
			{

			}

			u16_encoder_cnt_loc = TIM1->CNT/4;
 804294c:	4b1d      	ldr	r3, [pc, #116]	; (80429c4 <f_GuiMenuBank1Update+0xc4>)
 804294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042950:	089b      	lsrs	r3, r3, #2
 8042952:	82fb      	strh	r3, [r7, #22]
			sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042954:	8afa      	ldrh	r2, [r7, #22]
 8042956:	f107 030c 	add.w	r3, r7, #12
 804295a:	491b      	ldr	r1, [pc, #108]	; (80429c8 <f_GuiMenuBank1Update+0xc8>)
 804295c:	4618      	mov	r0, r3
 804295e:	f006 ffb7 	bl	80498d0 <siprintf>
			lcd_clear_cmd();
 8042962:	f001 f96a 	bl	8043c3a <lcd_clear_cmd>
			lcd_put_cur(0, 0);
 8042966:	2100      	movs	r1, #0
 8042968:	2000      	movs	r0, #0
 804296a:	f001 f976 	bl	8043c5a <lcd_put_cur>
			lcd_send_string("Enter b1[%]");
 804296e:	4817      	ldr	r0, [pc, #92]	; (80429cc <f_GuiMenuBank1Update+0xcc>)
 8042970:	f001 f9e0 	bl	8043d34 <lcd_send_string>
			lcd_put_cur(1, 0);
 8042974:	2100      	movs	r1, #0
 8042976:	2001      	movs	r0, #1
 8042978:	f001 f96f 	bl	8043c5a <lcd_put_cur>
			lcd_send_string("b1=");
 804297c:	4814      	ldr	r0, [pc, #80]	; (80429d0 <f_GuiMenuBank1Update+0xd0>)
 804297e:	f001 f9d9 	bl	8043d34 <lcd_send_string>
			lcd_put_cur(1, 4);
 8042982:	2104      	movs	r1, #4
 8042984:	2001      	movs	r0, #1
 8042986:	f001 f968 	bl	8043c5a <lcd_put_cur>
			lcd_send_string((char*)&enc_string);
 804298a:	f107 030c 	add.w	r3, r7, #12
 804298e:	4618      	mov	r0, r3
 8042990:	f001 f9d0 	bl	8043d34 <lcd_send_string>
			HAL_Delay(200);
 8042994:	20c8      	movs	r0, #200	; 0xc8
 8042996:	f002 fa2f 	bl	8044df8 <HAL_Delay>

			if(TRUE == ui8_encButtonPressed)
 804299a:	4b0e      	ldr	r3, [pc, #56]	; (80429d4 <f_GuiMenuBank1Update+0xd4>)
 804299c:	781b      	ldrb	r3, [r3, #0]
 804299e:	b2db      	uxtb	r3, r3
 80429a0:	2b01      	cmp	r3, #1
 80429a2:	d1ca      	bne.n	804293a <f_GuiMenuBank1Update+0x3a>
			{
				CtrlParams.ui8_bank1Percentage = u16_encoder_cnt_loc;
 80429a4:	8afb      	ldrh	r3, [r7, #22]
 80429a6:	b2da      	uxtb	r2, r3
 80429a8:	4b05      	ldr	r3, [pc, #20]	; (80429c0 <f_GuiMenuBank1Update+0xc0>)
 80429aa:	701a      	strb	r2, [r3, #0]
				ui8_encButtonPressed = FALSE;
 80429ac:	4b09      	ldr	r3, [pc, #36]	; (80429d4 <f_GuiMenuBank1Update+0xd4>)
 80429ae:	2200      	movs	r2, #0
 80429b0:	701a      	strb	r2, [r3, #0]
				break;
 80429b2:	bf00      	nop
			else
			{

			}
		}
}
 80429b4:	bf00      	nop
 80429b6:	3718      	adds	r7, #24
 80429b8:	46bd      	mov	sp, r7
 80429ba:	bd80      	pop	{r7, pc}
 80429bc:	0804e3f0 	.word	0x0804e3f0
 80429c0:	200004c4 	.word	0x200004c4
 80429c4:	40010000 	.word	0x40010000
 80429c8:	0804e3d8 	.word	0x0804e3d8
 80429cc:	0804e4a0 	.word	0x0804e4a0
 80429d0:	0804e4ac 	.word	0x0804e4ac
 80429d4:	2000034d 	.word	0x2000034d

080429d8 <f_GuiMenuBank2Update>:
void f_GuiMenuBank2Update(msTempControlParams *p_CtrlParams)
{
 80429d8:	b580      	push	{r7, lr}
 80429da:	b086      	sub	sp, #24
 80429dc:	af00      	add	r7, sp, #0
 80429de:	6078      	str	r0, [r7, #4]
	uint16_t		u16_encoder_cnt_loc;
	unsigned char 	enc_string[10] = {"    "};
 80429e0:	4a2c      	ldr	r2, [pc, #176]	; (8042a94 <f_GuiMenuBank2Update+0xbc>)
 80429e2:	f107 030c 	add.w	r3, r7, #12
 80429e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80429ea:	6018      	str	r0, [r3, #0]
 80429ec:	3304      	adds	r3, #4
 80429ee:	7019      	strb	r1, [r3, #0]
 80429f0:	f107 0311 	add.w	r3, r7, #17
 80429f4:	2200      	movs	r2, #0
 80429f6:	601a      	str	r2, [r3, #0]
 80429f8:	711a      	strb	r2, [r3, #4]
	u16_encoder_cnt_loc = 0;
 80429fa:	2300      	movs	r3, #0
 80429fc:	82fb      	strh	r3, [r7, #22]
	//###################Menu11##########################
		HAL_Delay(100);
 80429fe:	2064      	movs	r0, #100	; 0x64
 8042a00:	f002 f9fa 	bl	8044df8 <HAL_Delay>
		lcd_clear_cmd();
 8042a04:	f001 f919 	bl	8043c3a <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank2Percentage * 4;
 8042a08:	4b23      	ldr	r3, [pc, #140]	; (8042a98 <f_GuiMenuBank2Update+0xc0>)
 8042a0a:	785b      	ldrb	r3, [r3, #1]
 8042a0c:	009a      	lsls	r2, r3, #2
 8042a0e:	4b23      	ldr	r3, [pc, #140]	; (8042a9c <f_GuiMenuBank2Update+0xc4>)
 8042a10:	625a      	str	r2, [r3, #36]	; 0x24

		while(1)
		{
			if(400 < TIM1->CNT)
 8042a12:	4b22      	ldr	r3, [pc, #136]	; (8042a9c <f_GuiMenuBank2Update+0xc4>)
 8042a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8042a1a:	d903      	bls.n	8042a24 <f_GuiMenuBank2Update+0x4c>
			{
				TIM1->CNT = 400;
 8042a1c:	4b1f      	ldr	r3, [pc, #124]	; (8042a9c <f_GuiMenuBank2Update+0xc4>)
 8042a1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8042a22:	625a      	str	r2, [r3, #36]	; 0x24
			else
			{

			}

			u16_encoder_cnt_loc = TIM1->CNT / 4;
 8042a24:	4b1d      	ldr	r3, [pc, #116]	; (8042a9c <f_GuiMenuBank2Update+0xc4>)
 8042a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a28:	089b      	lsrs	r3, r3, #2
 8042a2a:	82fb      	strh	r3, [r7, #22]
			sprintf((char*)&enc_string,"%u",u16_encoder_cnt_loc);
 8042a2c:	8afa      	ldrh	r2, [r7, #22]
 8042a2e:	f107 030c 	add.w	r3, r7, #12
 8042a32:	491b      	ldr	r1, [pc, #108]	; (8042aa0 <f_GuiMenuBank2Update+0xc8>)
 8042a34:	4618      	mov	r0, r3
 8042a36:	f006 ff4b 	bl	80498d0 <siprintf>
			lcd_clear_cmd();
 8042a3a:	f001 f8fe 	bl	8043c3a <lcd_clear_cmd>
			lcd_put_cur(0, 0);
 8042a3e:	2100      	movs	r1, #0
 8042a40:	2000      	movs	r0, #0
 8042a42:	f001 f90a 	bl	8043c5a <lcd_put_cur>
			lcd_send_string("Enter b2[%]");
 8042a46:	4817      	ldr	r0, [pc, #92]	; (8042aa4 <f_GuiMenuBank2Update+0xcc>)
 8042a48:	f001 f974 	bl	8043d34 <lcd_send_string>
			lcd_put_cur(1, 0);
 8042a4c:	2100      	movs	r1, #0
 8042a4e:	2001      	movs	r0, #1
 8042a50:	f001 f903 	bl	8043c5a <lcd_put_cur>
			lcd_send_string("b2=");
 8042a54:	4814      	ldr	r0, [pc, #80]	; (8042aa8 <f_GuiMenuBank2Update+0xd0>)
 8042a56:	f001 f96d 	bl	8043d34 <lcd_send_string>
			lcd_put_cur(1, 4);
 8042a5a:	2104      	movs	r1, #4
 8042a5c:	2001      	movs	r0, #1
 8042a5e:	f001 f8fc 	bl	8043c5a <lcd_put_cur>
			lcd_send_string((char*)&enc_string);
 8042a62:	f107 030c 	add.w	r3, r7, #12
 8042a66:	4618      	mov	r0, r3
 8042a68:	f001 f964 	bl	8043d34 <lcd_send_string>
			HAL_Delay(200);
 8042a6c:	20c8      	movs	r0, #200	; 0xc8
 8042a6e:	f002 f9c3 	bl	8044df8 <HAL_Delay>

			if(TRUE == ui8_encButtonPressed)
 8042a72:	4b0e      	ldr	r3, [pc, #56]	; (8042aac <f_GuiMenuBank2Update+0xd4>)
 8042a74:	781b      	ldrb	r3, [r3, #0]
 8042a76:	b2db      	uxtb	r3, r3
 8042a78:	2b01      	cmp	r3, #1
 8042a7a:	d1ca      	bne.n	8042a12 <f_GuiMenuBank2Update+0x3a>
			{
				CtrlParams.ui8_bank2Percentage = u16_encoder_cnt_loc;
 8042a7c:	8afb      	ldrh	r3, [r7, #22]
 8042a7e:	b2da      	uxtb	r2, r3
 8042a80:	4b05      	ldr	r3, [pc, #20]	; (8042a98 <f_GuiMenuBank2Update+0xc0>)
 8042a82:	705a      	strb	r2, [r3, #1]
				ui8_encButtonPressed = FALSE;
 8042a84:	4b09      	ldr	r3, [pc, #36]	; (8042aac <f_GuiMenuBank2Update+0xd4>)
 8042a86:	2200      	movs	r2, #0
 8042a88:	701a      	strb	r2, [r3, #0]
				break;
 8042a8a:	bf00      	nop
			else
			{

			}
		}
}
 8042a8c:	bf00      	nop
 8042a8e:	3718      	adds	r7, #24
 8042a90:	46bd      	mov	sp, r7
 8042a92:	bd80      	pop	{r7, pc}
 8042a94:	0804e3f0 	.word	0x0804e3f0
 8042a98:	200004c4 	.word	0x200004c4
 8042a9c:	40010000 	.word	0x40010000
 8042aa0:	0804e3d8 	.word	0x0804e3d8
 8042aa4:	0804e4b0 	.word	0x0804e4b0
 8042aa8:	0804e4bc 	.word	0x0804e4bc
 8042aac:	2000034d 	.word	0x2000034d

08042ab0 <f_GuiFEEUpdateWrite>:
void f_GuiFEEUpdateWrite(msTempControlParams *p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 8042ab0:	b580      	push	{r7, lr}
 8042ab2:	b082      	sub	sp, #8
 8042ab4:	af00      	add	r7, sp, #0
 8042ab6:	6078      	str	r0, [r7, #4]
 8042ab8:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8042aba:	f002 fb59 	bl	8045170 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8042abe:	4b08      	ldr	r3, [pc, #32]	; (8042ae0 <f_GuiFEEUpdateWrite+0x30>)
 8042ac0:	22f3      	movs	r2, #243	; 0xf3
 8042ac2:	60da      	str	r2, [r3, #12]
	FEE_WriteCtrlParams(p_CtrlParams, p_ReflowParameters);
 8042ac4:	6839      	ldr	r1, [r7, #0]
 8042ac6:	6878      	ldr	r0, [r7, #4]
 8042ac8:	f000 fe28 	bl	804371c <FEE_WriteCtrlParams>
	HAL_FLASH_Lock();
 8042acc:	f002 fb72 	bl	80451b4 <HAL_FLASH_Lock>
	StateFlag.StartFlag = FALSE;
 8042ad0:	4b04      	ldr	r3, [pc, #16]	; (8042ae4 <f_GuiFEEUpdateWrite+0x34>)
 8042ad2:	2200      	movs	r2, #0
 8042ad4:	701a      	strb	r2, [r3, #0]
}
 8042ad6:	bf00      	nop
 8042ad8:	3708      	adds	r7, #8
 8042ada:	46bd      	mov	sp, r7
 8042adc:	bd80      	pop	{r7, pc}
 8042ade:	bf00      	nop
 8042ae0:	40023c00 	.word	0x40023c00
 8042ae4:	20000244 	.word	0x20000244

08042ae8 <f_updateGuiValTempError>:

void f_updateGuiValTempError(volatile float32_t *p_temperature, volatile float32_t f_PIDError)
{
 8042ae8:	b580      	push	{r7, lr}
 8042aea:	b084      	sub	sp, #16
 8042aec:	af00      	add	r7, sp, #0
 8042aee:	6078      	str	r0, [r7, #4]
 8042af0:	ed87 0a00 	vstr	s0, [r7]
	unsigned char gui_stringFloat[7] = {"\0"};
 8042af4:	2300      	movs	r3, #0
 8042af6:	60bb      	str	r3, [r7, #8]
 8042af8:	f107 030c 	add.w	r3, r7, #12
 8042afc:	2100      	movs	r1, #0
 8042afe:	460a      	mov	r2, r1
 8042b00:	801a      	strh	r2, [r3, #0]
 8042b02:	460a      	mov	r2, r1
 8042b04:	709a      	strb	r2, [r3, #2]

	ftoa( (*p_temperature), gui_stringFloat, 2);
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	edd3 7a00 	vldr	s15, [r3]
 8042b0c:	f107 0308 	add.w	r3, r7, #8
 8042b10:	2102      	movs	r1, #2
 8042b12:	4618      	mov	r0, r3
 8042b14:	eeb0 0a67 	vmov.f32	s0, s15
 8042b18:	f7fe fafe 	bl	8041118 <ftoa>
	lcd_put_cur(0, 0);
 8042b1c:	2100      	movs	r1, #0
 8042b1e:	2000      	movs	r0, #0
 8042b20:	f001 f89b 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042b24:	4814      	ldr	r0, [pc, #80]	; (8042b78 <f_updateGuiValTempError+0x90>)
 8042b26:	f001 f905 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 2);
 8042b2a:	2102      	movs	r1, #2
 8042b2c:	2000      	movs	r0, #0
 8042b2e:	f001 f894 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringFloat);
 8042b32:	f107 0308 	add.w	r3, r7, #8
 8042b36:	4618      	mov	r0, r3
 8042b38:	f001 f8fc 	bl	8043d34 <lcd_send_string>
	ftoa( f_PIDError, gui_stringFloat, 2);
 8042b3c:	edd7 7a00 	vldr	s15, [r7]
 8042b40:	f107 0308 	add.w	r3, r7, #8
 8042b44:	2102      	movs	r1, #2
 8042b46:	4618      	mov	r0, r3
 8042b48:	eeb0 0a67 	vmov.f32	s0, s15
 8042b4c:	f7fe fae4 	bl	8041118 <ftoa>
	lcd_put_cur(1, 0);
 8042b50:	2100      	movs	r1, #0
 8042b52:	2001      	movs	r0, #1
 8042b54:	f001 f881 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Td=");
 8042b58:	4808      	ldr	r0, [pc, #32]	; (8042b7c <f_updateGuiValTempError+0x94>)
 8042b5a:	f001 f8eb 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1,3);
 8042b5e:	2103      	movs	r1, #3
 8042b60:	2001      	movs	r0, #1
 8042b62:	f001 f87a 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringFloat);
 8042b66:	f107 0308 	add.w	r3, r7, #8
 8042b6a:	4618      	mov	r0, r3
 8042b6c:	f001 f8e2 	bl	8043d34 <lcd_send_string>
}
 8042b70:	bf00      	nop
 8042b72:	3710      	adds	r7, #16
 8042b74:	46bd      	mov	sp, r7
 8042b76:	bd80      	pop	{r7, pc}
 8042b78:	0804e4c0 	.word	0x0804e4c0
 8042b7c:	0804e4c4 	.word	0x0804e4c4

08042b80 <f_updateGuiValGradientSoakParam>:
void f_updateGuiValGradientSoakParam(uint32_t u32_SoakTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent)
{
 8042b80:	b580      	push	{r7, lr}
 8042b82:	b086      	sub	sp, #24
 8042b84:	af00      	add	r7, sp, #0
 8042b86:	60f8      	str	r0, [r7, #12]
 8042b88:	60b9      	str	r1, [r7, #8]
 8042b8a:	4613      	mov	r3, r2
 8042b8c:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_timeRemaining = 0;
 8042b8e:	2300      	movs	r3, #0
 8042b90:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042b92:	2300      	movs	r3, #0
 8042b94:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_FirstHeatupTime - (u16_ReflowIndexCurrent)) / 2;
 8042b96:	88fb      	ldrh	r3, [r7, #6]
 8042b98:	68ba      	ldr	r2, [r7, #8]
 8042b9a:	1ad3      	subs	r3, r2, r3
 8042b9c:	085b      	lsrs	r3, r3, #1
 8042b9e:	82fb      	strh	r3, [r7, #22]

	utoa(u32_SoakTemperature, (char*)gui_stringInt, 10);
 8042ba0:	f107 0310 	add.w	r3, r7, #16
 8042ba4:	220a      	movs	r2, #10
 8042ba6:	4619      	mov	r1, r3
 8042ba8:	68f8      	ldr	r0, [r7, #12]
 8042baa:	f007 fd9f 	bl	804a6ec <utoa>
	lcd_put_cur(0, 9);
 8042bae:	2109      	movs	r1, #9
 8042bb0:	2000      	movs	r0, #0
 8042bb2:	f001 f852 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042bb6:	4813      	ldr	r0, [pc, #76]	; (8042c04 <f_updateGuiValGradientSoakParam+0x84>)
 8042bb8:	f001 f8bc 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042bbc:	210b      	movs	r1, #11
 8042bbe:	2000      	movs	r0, #0
 8042bc0:	f001 f84b 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042bc4:	f107 0310 	add.w	r3, r7, #16
 8042bc8:	4618      	mov	r0, r3
 8042bca:	f001 f8b3 	bl	8043d34 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt, 10);
 8042bce:	8afb      	ldrh	r3, [r7, #22]
 8042bd0:	f107 0110 	add.w	r1, r7, #16
 8042bd4:	220a      	movs	r2, #10
 8042bd6:	4618      	mov	r0, r3
 8042bd8:	f007 fd88 	bl	804a6ec <utoa>
	lcd_put_cur(1,9);
 8042bdc:	2109      	movs	r1, #9
 8042bde:	2001      	movs	r0, #1
 8042be0:	f001 f83b 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("t=");
 8042be4:	4808      	ldr	r0, [pc, #32]	; (8042c08 <f_updateGuiValGradientSoakParam+0x88>)
 8042be6:	f001 f8a5 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042bea:	210b      	movs	r1, #11
 8042bec:	2001      	movs	r0, #1
 8042bee:	f001 f834 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042bf2:	f107 0310 	add.w	r3, r7, #16
 8042bf6:	4618      	mov	r0, r3
 8042bf8:	f001 f89c 	bl	8043d34 <lcd_send_string>
}
 8042bfc:	bf00      	nop
 8042bfe:	3718      	adds	r7, #24
 8042c00:	46bd      	mov	sp, r7
 8042c02:	bd80      	pop	{r7, pc}
 8042c04:	0804e4c0 	.word	0x0804e4c0
 8042c08:	0804e4c8 	.word	0x0804e4c8

08042c0c <f_updateGuiValSoakParam>:
void f_updateGuiValSoakParam(uint32_t u32_SoakTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,uint16_t u16_SoakTime)
{
 8042c0c:	b580      	push	{r7, lr}
 8042c0e:	b086      	sub	sp, #24
 8042c10:	af00      	add	r7, sp, #0
 8042c12:	60f8      	str	r0, [r7, #12]
 8042c14:	60b9      	str	r1, [r7, #8]
 8042c16:	4611      	mov	r1, r2
 8042c18:	461a      	mov	r2, r3
 8042c1a:	460b      	mov	r3, r1
 8042c1c:	80fb      	strh	r3, [r7, #6]
 8042c1e:	4613      	mov	r3, r2
 8042c20:	80bb      	strh	r3, [r7, #4]
	uint16_t u16_timeRemaining = 0;
 8042c22:	2300      	movs	r3, #0
 8042c24:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042c26:	2300      	movs	r3, #0
 8042c28:	613b      	str	r3, [r7, #16]

	u16_timeRemaining =( u16_SoakTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime )) / 2;
 8042c2a:	88ba      	ldrh	r2, [r7, #4]
 8042c2c:	88fb      	ldrh	r3, [r7, #6]
 8042c2e:	68b9      	ldr	r1, [r7, #8]
 8042c30:	1acb      	subs	r3, r1, r3
 8042c32:	4413      	add	r3, r2
 8042c34:	085b      	lsrs	r3, r3, #1
 8042c36:	82fb      	strh	r3, [r7, #22]

	utoa(u32_SoakTemperature,(char*)gui_stringInt,10);
 8042c38:	f107 0310 	add.w	r3, r7, #16
 8042c3c:	220a      	movs	r2, #10
 8042c3e:	4619      	mov	r1, r3
 8042c40:	68f8      	ldr	r0, [r7, #12]
 8042c42:	f007 fd53 	bl	804a6ec <utoa>
	lcd_put_cur(0, 9);
 8042c46:	2109      	movs	r1, #9
 8042c48:	2000      	movs	r0, #0
 8042c4a:	f001 f806 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042c4e:	4813      	ldr	r0, [pc, #76]	; (8042c9c <f_updateGuiValSoakParam+0x90>)
 8042c50:	f001 f870 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042c54:	210b      	movs	r1, #11
 8042c56:	2000      	movs	r0, #0
 8042c58:	f000 ffff 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042c5c:	f107 0310 	add.w	r3, r7, #16
 8042c60:	4618      	mov	r0, r3
 8042c62:	f001 f867 	bl	8043d34 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042c66:	8afb      	ldrh	r3, [r7, #22]
 8042c68:	f107 0110 	add.w	r1, r7, #16
 8042c6c:	220a      	movs	r2, #10
 8042c6e:	4618      	mov	r0, r3
 8042c70:	f007 fd3c 	bl	804a6ec <utoa>
	lcd_put_cur(1, 9);
 8042c74:	2109      	movs	r1, #9
 8042c76:	2001      	movs	r0, #1
 8042c78:	f000 ffef 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("t=");
 8042c7c:	4808      	ldr	r0, [pc, #32]	; (8042ca0 <f_updateGuiValSoakParam+0x94>)
 8042c7e:	f001 f859 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042c82:	210b      	movs	r1, #11
 8042c84:	2001      	movs	r0, #1
 8042c86:	f000 ffe8 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042c8a:	f107 0310 	add.w	r3, r7, #16
 8042c8e:	4618      	mov	r0, r3
 8042c90:	f001 f850 	bl	8043d34 <lcd_send_string>
}
 8042c94:	bf00      	nop
 8042c96:	3718      	adds	r7, #24
 8042c98:	46bd      	mov	sp, r7
 8042c9a:	bd80      	pop	{r7, pc}
 8042c9c:	0804e4c0 	.word	0x0804e4c0
 8042ca0:	0804e4c8 	.word	0x0804e4c8

08042ca4 <f_updateGuiValGradientReflowParam>:
void f_updateGuiValGradientReflowParam(uint32_t u32_ReflowTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
							 uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime){
 8042ca4:	b580      	push	{r7, lr}
 8042ca6:	b086      	sub	sp, #24
 8042ca8:	af00      	add	r7, sp, #0
 8042caa:	60f8      	str	r0, [r7, #12]
 8042cac:	60b9      	str	r1, [r7, #8]
 8042cae:	4611      	mov	r1, r2
 8042cb0:	461a      	mov	r2, r3
 8042cb2:	460b      	mov	r3, r1
 8042cb4:	80fb      	strh	r3, [r7, #6]
 8042cb6:	4613      	mov	r3, r2
 8042cb8:	80bb      	strh	r3, [r7, #4]

	uint16_t u16_timeRemaining = 0;
 8042cba:	2300      	movs	r3, #0
 8042cbc:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042cbe:	2300      	movs	r3, #0
 8042cc0:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_SecondHeatupTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime - u16_SoakTime )) / 2;
 8042cc2:	8c3a      	ldrh	r2, [r7, #32]
 8042cc4:	88b9      	ldrh	r1, [r7, #4]
 8042cc6:	88fb      	ldrh	r3, [r7, #6]
 8042cc8:	68b8      	ldr	r0, [r7, #8]
 8042cca:	1ac3      	subs	r3, r0, r3
 8042ccc:	440b      	add	r3, r1
 8042cce:	4413      	add	r3, r2
 8042cd0:	085b      	lsrs	r3, r3, #1
 8042cd2:	82fb      	strh	r3, [r7, #22]

	utoa(u32_ReflowTemperature, (char*)gui_stringInt,10);
 8042cd4:	f107 0310 	add.w	r3, r7, #16
 8042cd8:	220a      	movs	r2, #10
 8042cda:	4619      	mov	r1, r3
 8042cdc:	68f8      	ldr	r0, [r7, #12]
 8042cde:	f007 fd05 	bl	804a6ec <utoa>
	lcd_put_cur(0, 9);
 8042ce2:	2109      	movs	r1, #9
 8042ce4:	2000      	movs	r0, #0
 8042ce6:	f000 ffb8 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042cea:	4813      	ldr	r0, [pc, #76]	; (8042d38 <f_updateGuiValGradientReflowParam+0x94>)
 8042cec:	f001 f822 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042cf0:	210b      	movs	r1, #11
 8042cf2:	2000      	movs	r0, #0
 8042cf4:	f000 ffb1 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042cf8:	f107 0310 	add.w	r3, r7, #16
 8042cfc:	4618      	mov	r0, r3
 8042cfe:	f001 f819 	bl	8043d34 <lcd_send_string>

	utoa(u16_timeRemaining,(char*)gui_stringInt,10);
 8042d02:	8afb      	ldrh	r3, [r7, #22]
 8042d04:	f107 0110 	add.w	r1, r7, #16
 8042d08:	220a      	movs	r2, #10
 8042d0a:	4618      	mov	r0, r3
 8042d0c:	f007 fcee 	bl	804a6ec <utoa>
	lcd_put_cur(1, 9);
 8042d10:	2109      	movs	r1, #9
 8042d12:	2001      	movs	r0, #1
 8042d14:	f000 ffa1 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("t=");
 8042d18:	4808      	ldr	r0, [pc, #32]	; (8042d3c <f_updateGuiValGradientReflowParam+0x98>)
 8042d1a:	f001 f80b 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042d1e:	210b      	movs	r1, #11
 8042d20:	2001      	movs	r0, #1
 8042d22:	f000 ff9a 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042d26:	f107 0310 	add.w	r3, r7, #16
 8042d2a:	4618      	mov	r0, r3
 8042d2c:	f001 f802 	bl	8043d34 <lcd_send_string>
}
 8042d30:	bf00      	nop
 8042d32:	3718      	adds	r7, #24
 8042d34:	46bd      	mov	sp, r7
 8042d36:	bd80      	pop	{r7, pc}
 8042d38:	0804e4c0 	.word	0x0804e4c0
 8042d3c:	0804e4c8 	.word	0x0804e4c8

08042d40 <f_updateGuiValReflowParam>:
void f_updateGuiValReflowParam(uint32_t u32_ReflowTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
								uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime, uint16_t u16_ReflowTime){
 8042d40:	b590      	push	{r4, r7, lr}
 8042d42:	b087      	sub	sp, #28
 8042d44:	af00      	add	r7, sp, #0
 8042d46:	60f8      	str	r0, [r7, #12]
 8042d48:	60b9      	str	r1, [r7, #8]
 8042d4a:	4611      	mov	r1, r2
 8042d4c:	461a      	mov	r2, r3
 8042d4e:	460b      	mov	r3, r1
 8042d50:	80fb      	strh	r3, [r7, #6]
 8042d52:	4613      	mov	r3, r2
 8042d54:	80bb      	strh	r3, [r7, #4]

	uint16_t u16_timeRemaining = 0;
 8042d56:	2300      	movs	r3, #0
 8042d58:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042d5a:	2300      	movs	r3, #0
 8042d5c:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_ReflowTime - ( (u16_ReflowIndexCurrent) - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime )) / 2;
 8042d5e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8042d60:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8042d62:	88b8      	ldrh	r0, [r7, #4]
 8042d64:	88fb      	ldrh	r3, [r7, #6]
 8042d66:	68bc      	ldr	r4, [r7, #8]
 8042d68:	1ae3      	subs	r3, r4, r3
 8042d6a:	4403      	add	r3, r0
 8042d6c:	440b      	add	r3, r1
 8042d6e:	4413      	add	r3, r2
 8042d70:	085b      	lsrs	r3, r3, #1
 8042d72:	82fb      	strh	r3, [r7, #22]

	utoa(u32_ReflowTemperature, (char*)gui_stringInt,10);
 8042d74:	f107 0310 	add.w	r3, r7, #16
 8042d78:	220a      	movs	r2, #10
 8042d7a:	4619      	mov	r1, r3
 8042d7c:	68f8      	ldr	r0, [r7, #12]
 8042d7e:	f007 fcb5 	bl	804a6ec <utoa>
	lcd_put_cur(0, 9);
 8042d82:	2109      	movs	r1, #9
 8042d84:	2000      	movs	r0, #0
 8042d86:	f000 ff68 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042d8a:	4813      	ldr	r0, [pc, #76]	; (8042dd8 <f_updateGuiValReflowParam+0x98>)
 8042d8c:	f000 ffd2 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042d90:	210b      	movs	r1, #11
 8042d92:	2000      	movs	r0, #0
 8042d94:	f000 ff61 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042d98:	f107 0310 	add.w	r3, r7, #16
 8042d9c:	4618      	mov	r0, r3
 8042d9e:	f000 ffc9 	bl	8043d34 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042da2:	8afb      	ldrh	r3, [r7, #22]
 8042da4:	f107 0110 	add.w	r1, r7, #16
 8042da8:	220a      	movs	r2, #10
 8042daa:	4618      	mov	r0, r3
 8042dac:	f007 fc9e 	bl	804a6ec <utoa>
	lcd_put_cur(1, 9);
 8042db0:	2109      	movs	r1, #9
 8042db2:	2001      	movs	r0, #1
 8042db4:	f000 ff51 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("t=");
 8042db8:	4808      	ldr	r0, [pc, #32]	; (8042ddc <f_updateGuiValReflowParam+0x9c>)
 8042dba:	f000 ffbb 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042dbe:	210b      	movs	r1, #11
 8042dc0:	2001      	movs	r0, #1
 8042dc2:	f000 ff4a 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042dc6:	f107 0310 	add.w	r3, r7, #16
 8042dca:	4618      	mov	r0, r3
 8042dcc:	f000 ffb2 	bl	8043d34 <lcd_send_string>
}
 8042dd0:	bf00      	nop
 8042dd2:	371c      	adds	r7, #28
 8042dd4:	46bd      	mov	sp, r7
 8042dd6:	bd90      	pop	{r4, r7, pc}
 8042dd8:	0804e4c0 	.word	0x0804e4c0
 8042ddc:	0804e4c8 	.word	0x0804e4c8

08042de0 <f_updateGuiValCoolDownParam>:
void f_updateGuiValCoolDownParam(uint32_t u16_CooldownTemperature, uint32_t u16_FirstHeatupTime, uint16_t u16_ReflowIndexCurrent,
								uint16_t u16_SoakTime, uint16_t u16_SecondHeatupTime, uint16_t u16_ReflowTime, uint16_t u16_CooldownTime){
 8042de0:	b5b0      	push	{r4, r5, r7, lr}
 8042de2:	b086      	sub	sp, #24
 8042de4:	af00      	add	r7, sp, #0
 8042de6:	60f8      	str	r0, [r7, #12]
 8042de8:	60b9      	str	r1, [r7, #8]
 8042dea:	4611      	mov	r1, r2
 8042dec:	461a      	mov	r2, r3
 8042dee:	460b      	mov	r3, r1
 8042df0:	80fb      	strh	r3, [r7, #6]
 8042df2:	4613      	mov	r3, r2
 8042df4:	80bb      	strh	r3, [r7, #4]
	uint16_t u16_timeRemaining = 0;
 8042df6:	2300      	movs	r3, #0
 8042df8:	82fb      	strh	r3, [r7, #22]
	unsigned char gui_stringInt  [4] = {"\0"};
 8042dfa:	2300      	movs	r3, #0
 8042dfc:	613b      	str	r3, [r7, #16]

	u16_timeRemaining = (u16_CooldownTime - ( (u16_ReflowIndexCurrent)  - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime - u16_ReflowTime )) / 2;
 8042dfe:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8042e00:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8042e02:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8042e04:	88bc      	ldrh	r4, [r7, #4]
 8042e06:	88fb      	ldrh	r3, [r7, #6]
 8042e08:	68bd      	ldr	r5, [r7, #8]
 8042e0a:	1aeb      	subs	r3, r5, r3
 8042e0c:	4423      	add	r3, r4
 8042e0e:	4403      	add	r3, r0
 8042e10:	440b      	add	r3, r1
 8042e12:	4413      	add	r3, r2
 8042e14:	085b      	lsrs	r3, r3, #1
 8042e16:	82fb      	strh	r3, [r7, #22]

	utoa(u16_CooldownTemperature, (char*)gui_stringInt,10);
 8042e18:	f107 0310 	add.w	r3, r7, #16
 8042e1c:	220a      	movs	r2, #10
 8042e1e:	4619      	mov	r1, r3
 8042e20:	68f8      	ldr	r0, [r7, #12]
 8042e22:	f007 fc63 	bl	804a6ec <utoa>
	lcd_put_cur(0, 9);
 8042e26:	2109      	movs	r1, #9
 8042e28:	2000      	movs	r0, #0
 8042e2a:	f000 ff16 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("T=");
 8042e2e:	4813      	ldr	r0, [pc, #76]	; (8042e7c <f_updateGuiValCoolDownParam+0x9c>)
 8042e30:	f000 ff80 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(0, 11);
 8042e34:	210b      	movs	r1, #11
 8042e36:	2000      	movs	r0, #0
 8042e38:	f000 ff0f 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042e3c:	f107 0310 	add.w	r3, r7, #16
 8042e40:	4618      	mov	r0, r3
 8042e42:	f000 ff77 	bl	8043d34 <lcd_send_string>

	utoa(u16_timeRemaining, (char*)gui_stringInt,10);
 8042e46:	8afb      	ldrh	r3, [r7, #22]
 8042e48:	f107 0110 	add.w	r1, r7, #16
 8042e4c:	220a      	movs	r2, #10
 8042e4e:	4618      	mov	r0, r3
 8042e50:	f007 fc4c 	bl	804a6ec <utoa>
	lcd_put_cur(1, 9);
 8042e54:	2109      	movs	r1, #9
 8042e56:	2001      	movs	r0, #1
 8042e58:	f000 feff 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("t=");
 8042e5c:	4808      	ldr	r0, [pc, #32]	; (8042e80 <f_updateGuiValCoolDownParam+0xa0>)
 8042e5e:	f000 ff69 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 11);
 8042e62:	210b      	movs	r1, #11
 8042e64:	2001      	movs	r0, #1
 8042e66:	f000 fef8 	bl	8043c5a <lcd_put_cur>
	lcd_send_string((char*)&gui_stringInt);
 8042e6a:	f107 0310 	add.w	r3, r7, #16
 8042e6e:	4618      	mov	r0, r3
 8042e70:	f000 ff60 	bl	8043d34 <lcd_send_string>
}
 8042e74:	bf00      	nop
 8042e76:	3718      	adds	r7, #24
 8042e78:	46bd      	mov	sp, r7
 8042e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8042e7c:	0804e4c0 	.word	0x0804e4c0
 8042e80:	0804e4c8 	.word	0x0804e4c8

08042e84 <f_updateGuiReflowFinished>:
void f_updateGuiReflowFinished(void)
{
 8042e84:	b580      	push	{r7, lr}
 8042e86:	af00      	add	r7, sp, #0
	lcd_clear_cmd();
 8042e88:	f000 fed7 	bl	8043c3a <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8042e8c:	2100      	movs	r1, #0
 8042e8e:	2000      	movs	r0, #0
 8042e90:	f000 fee3 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Reflow");
 8042e94:	480a      	ldr	r0, [pc, #40]	; (8042ec0 <f_updateGuiReflowFinished+0x3c>)
 8042e96:	f000 ff4d 	bl	8043d34 <lcd_send_string>
	lcd_put_cur(1, 0);
 8042e9a:	2100      	movs	r1, #0
 8042e9c:	2001      	movs	r0, #1
 8042e9e:	f000 fedc 	bl	8043c5a <lcd_put_cur>
	lcd_send_string("Finished!");
 8042ea2:	4808      	ldr	r0, [pc, #32]	; (8042ec4 <f_updateGuiReflowFinished+0x40>)
 8042ea4:	f000 ff46 	bl	8043d34 <lcd_send_string>
	while(1)
	{
		if(TRUE == ui8_encButtonPressed)
 8042ea8:	4b07      	ldr	r3, [pc, #28]	; (8042ec8 <f_updateGuiReflowFinished+0x44>)
 8042eaa:	781b      	ldrb	r3, [r3, #0]
 8042eac:	b2db      	uxtb	r3, r3
 8042eae:	2b01      	cmp	r3, #1
 8042eb0:	d1fa      	bne.n	8042ea8 <f_updateGuiReflowFinished+0x24>
		{

			ui8_encButtonPressed = FALSE;
 8042eb2:	4b05      	ldr	r3, [pc, #20]	; (8042ec8 <f_updateGuiReflowFinished+0x44>)
 8042eb4:	2200      	movs	r2, #0
 8042eb6:	701a      	strb	r2, [r3, #0]
			break;
 8042eb8:	bf00      	nop
		}
	}
}
 8042eba:	bf00      	nop
 8042ebc:	bd80      	pop	{r7, pc}
 8042ebe:	bf00      	nop
 8042ec0:	0804e4cc 	.word	0x0804e4cc
 8042ec4:	0804e4d4 	.word	0x0804e4d4
 8042ec8:	2000034d 	.word	0x2000034d

08042ecc <EE_Init>:
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
static uint16_t EE_VerifyPageFullyErased(uint32_t Address);


uint16_t EE_Init(void)
{
 8042ecc:	b580      	push	{r7, lr}
 8042ece:	b08a      	sub	sp, #40	; 0x28
 8042ed0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8042ed2:	2306      	movs	r3, #6
 8042ed4:	847b      	strh	r3, [r7, #34]	; 0x22
 8042ed6:	2306      	movs	r3, #6
 8042ed8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8042eda:	2300      	movs	r3, #0
 8042edc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8042ede:	2300      	movs	r3, #0
 8042ee0:	83fb      	strh	r3, [r7, #30]
 8042ee2:	2300      	movs	r3, #0
 8042ee4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8042ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8042eea:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8042eec:	2300      	movs	r3, #0
 8042eee:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8042ef0:	4ba3      	ldr	r3, [pc, #652]	; (8043180 <EE_Init+0x2b4>)
 8042ef2:	881b      	ldrh	r3, [r3, #0]
 8042ef4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8042ef6:	4ba3      	ldr	r3, [pc, #652]	; (8043184 <EE_Init+0x2b8>)
 8042ef8:	881b      	ldrh	r3, [r3, #0]
 8042efa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8042efc:	2300      	movs	r3, #0
 8042efe:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8042f00:	2309      	movs	r3, #9
 8042f02:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8042f04:	2301      	movs	r3, #1
 8042f06:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042f08:	2301      	movs	r3, #1
 8042f0a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8042f0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042f12:	4293      	cmp	r3, r2
 8042f14:	d00b      	beq.n	8042f2e <EE_Init+0x62>
 8042f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042f1a:	f280 819b 	bge.w	8043254 <EE_Init+0x388>
 8042f1e:	2b00      	cmp	r3, #0
 8042f20:	f000 80fb 	beq.w	804311a <EE_Init+0x24e>
 8042f24:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042f28:	4293      	cmp	r3, r2
 8042f2a:	d050      	beq.n	8042fce <EE_Init+0x102>
 8042f2c:	e192      	b.n	8043254 <EE_Init+0x388>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8042f2e:	8c3b      	ldrh	r3, [r7, #32]
 8042f30:	2b00      	cmp	r3, #0
 8042f32:	d116      	bne.n	8042f62 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042f34:	4892      	ldr	r0, [pc, #584]	; (8043180 <EE_Init+0x2b4>)
 8042f36:	f000 f9ab 	bl	8043290 <EE_VerifyPageFullyErased>
 8042f3a:	4603      	mov	r3, r0
 8042f3c:	2b00      	cmp	r3, #0
 8042f3e:	f040 8193 	bne.w	8043268 <EE_Init+0x39c>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8042f42:	f107 0214 	add.w	r2, r7, #20
 8042f46:	463b      	mov	r3, r7
 8042f48:	4611      	mov	r1, r2
 8042f4a:	4618      	mov	r0, r3
 8042f4c:	f002 fa72 	bl	8045434 <HAL_FLASHEx_Erase>
 8042f50:	4603      	mov	r3, r0
 8042f52:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042f54:	7efb      	ldrb	r3, [r7, #27]
 8042f56:	2b00      	cmp	r3, #0
 8042f58:	f000 8186 	beq.w	8043268 <EE_Init+0x39c>
          {
            return FlashStatus;
 8042f5c:	7efb      	ldrb	r3, [r7, #27]
 8042f5e:	b29b      	uxth	r3, r3
 8042f60:	e18a      	b.n	8043278 <EE_Init+0x3ac>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8042f62:	8c3b      	ldrh	r3, [r7, #32]
 8042f64:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042f68:	4293      	cmp	r3, r2
 8042f6a:	d125      	bne.n	8042fb8 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042f6c:	4884      	ldr	r0, [pc, #528]	; (8043180 <EE_Init+0x2b4>)
 8042f6e:	f000 f98f 	bl	8043290 <EE_VerifyPageFullyErased>
 8042f72:	4603      	mov	r3, r0
 8042f74:	2b00      	cmp	r3, #0
 8042f76:	d10e      	bne.n	8042f96 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8042f78:	f107 0214 	add.w	r2, r7, #20
 8042f7c:	463b      	mov	r3, r7
 8042f7e:	4611      	mov	r1, r2
 8042f80:	4618      	mov	r0, r3
 8042f82:	f002 fa57 	bl	8045434 <HAL_FLASHEx_Erase>
 8042f86:	4603      	mov	r3, r0
 8042f88:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042f8a:	7efb      	ldrb	r3, [r7, #27]
 8042f8c:	2b00      	cmp	r3, #0
 8042f8e:	d002      	beq.n	8042f96 <EE_Init+0xca>
          {
            return FlashStatus;
 8042f90:	7efb      	ldrb	r3, [r7, #27]
 8042f92:	b29b      	uxth	r3, r3
 8042f94:	e170      	b.n	8043278 <EE_Init+0x3ac>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8042f96:	f04f 0200 	mov.w	r2, #0
 8042f9a:	f04f 0300 	mov.w	r3, #0
 8042f9e:	4979      	ldr	r1, [pc, #484]	; (8043184 <EE_Init+0x2b8>)
 8042fa0:	2001      	movs	r0, #1
 8042fa2:	f002 f891 	bl	80450c8 <HAL_FLASH_Program>
 8042fa6:	4603      	mov	r3, r0
 8042fa8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042faa:	7efb      	ldrb	r3, [r7, #27]
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	f000 815b 	beq.w	8043268 <EE_Init+0x39c>
        {
          return FlashStatus;
 8042fb2:	7efb      	ldrb	r3, [r7, #27]
 8042fb4:	b29b      	uxth	r3, r3
 8042fb6:	e15f      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8042fb8:	f000 f9fa 	bl	80433b0 <EE_Format>
 8042fbc:	4603      	mov	r3, r0
 8042fbe:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042fc0:	7efb      	ldrb	r3, [r7, #27]
 8042fc2:	2b00      	cmp	r3, #0
 8042fc4:	f000 8150 	beq.w	8043268 <EE_Init+0x39c>
        {
          return FlashStatus;
 8042fc8:	7efb      	ldrb	r3, [r7, #27]
 8042fca:	b29b      	uxth	r3, r3
 8042fcc:	e154      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8042fce:	8c3b      	ldrh	r3, [r7, #32]
 8042fd0:	2b00      	cmp	r3, #0
 8042fd2:	d166      	bne.n	80430a2 <EE_Init+0x1d6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042fd4:	2300      	movs	r3, #0
 8042fd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8042fd8:	e033      	b.n	8043042 <EE_Init+0x176>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == (KP_VirtAddr+VarIdx) )
 8042fda:	4b6b      	ldr	r3, [pc, #428]	; (8043188 <EE_Init+0x2bc>)
 8042fdc:	881b      	ldrh	r3, [r3, #0]
 8042fde:	b29b      	uxth	r3, r3
 8042fe0:	461a      	mov	r2, r3
 8042fe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042fe4:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8042fe8:	33a0      	adds	r3, #160	; 0xa0
 8042fea:	429a      	cmp	r2, r3
 8042fec:	d101      	bne.n	8042ff2 <EE_Init+0x126>
          {
            x = VarIdx;
 8042fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8042ff2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8042ff4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8042ff8:	429a      	cmp	r2, r3
 8042ffa:	d01f      	beq.n	804303c <EE_Init+0x170>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 8042ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042ffe:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8043002:	3b60      	subs	r3, #96	; 0x60
 8043004:	b29b      	uxth	r3, r3
 8043006:	4961      	ldr	r1, [pc, #388]	; (804318c <EE_Init+0x2c0>)
 8043008:	4618      	mov	r0, r3
 804300a:	f000 f967 	bl	80432dc <EE_ReadVariable>
 804300e:	4603      	mov	r3, r0
 8043010:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8043012:	8bbb      	ldrh	r3, [r7, #28]
 8043014:	2b01      	cmp	r3, #1
 8043016:	d011      	beq.n	804303c <EE_Init+0x170>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8043018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804301a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 804301e:	3b60      	subs	r3, #96	; 0x60
 8043020:	b29b      	uxth	r3, r3
 8043022:	4a5a      	ldr	r2, [pc, #360]	; (804318c <EE_Init+0x2c0>)
 8043024:	8812      	ldrh	r2, [r2, #0]
 8043026:	4611      	mov	r1, r2
 8043028:	4618      	mov	r0, r3
 804302a:	f000 fa59 	bl	80434e0 <EE_VerifyPageFullWriteVariable>
 804302e:	4603      	mov	r3, r0
 8043030:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8043032:	8bfb      	ldrh	r3, [r7, #30]
 8043034:	2b00      	cmp	r3, #0
 8043036:	d001      	beq.n	804303c <EE_Init+0x170>
              {
                return EepromStatus;
 8043038:	8bfb      	ldrh	r3, [r7, #30]
 804303a:	e11d      	b.n	8043278 <EE_Init+0x3ac>
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 804303c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804303e:	3301      	adds	r3, #1
 8043040:	84fb      	strh	r3, [r7, #38]	; 0x26
 8043042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8043044:	2b0b      	cmp	r3, #11
 8043046:	d9c8      	bls.n	8042fda <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8043048:	f04f 0200 	mov.w	r2, #0
 804304c:	f04f 0300 	mov.w	r3, #0
 8043050:	494b      	ldr	r1, [pc, #300]	; (8043180 <EE_Init+0x2b4>)
 8043052:	2001      	movs	r0, #1
 8043054:	f002 f838 	bl	80450c8 <HAL_FLASH_Program>
 8043058:	4603      	mov	r3, r0
 804305a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 804305c:	7efb      	ldrb	r3, [r7, #27]
 804305e:	2b00      	cmp	r3, #0
 8043060:	d002      	beq.n	8043068 <EE_Init+0x19c>
        {
          return FlashStatus;
 8043062:	7efb      	ldrb	r3, [r7, #27]
 8043064:	b29b      	uxth	r3, r3
 8043066:	e107      	b.n	8043278 <EE_Init+0x3ac>
        }
        pEraseInit.Sector = PAGE1_ID;
 8043068:	230a      	movs	r3, #10
 804306a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 804306c:	2301      	movs	r3, #1
 804306e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8043070:	2301      	movs	r3, #1
 8043072:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8043074:	4843      	ldr	r0, [pc, #268]	; (8043184 <EE_Init+0x2b8>)
 8043076:	f000 f90b 	bl	8043290 <EE_VerifyPageFullyErased>
 804307a:	4603      	mov	r3, r0
 804307c:	2b00      	cmp	r3, #0
 804307e:	f040 80f5 	bne.w	804326c <EE_Init+0x3a0>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8043082:	f107 0214 	add.w	r2, r7, #20
 8043086:	463b      	mov	r3, r7
 8043088:	4611      	mov	r1, r2
 804308a:	4618      	mov	r0, r3
 804308c:	f002 f9d2 	bl	8045434 <HAL_FLASHEx_Erase>
 8043090:	4603      	mov	r3, r0
 8043092:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8043094:	7efb      	ldrb	r3, [r7, #27]
 8043096:	2b00      	cmp	r3, #0
 8043098:	f000 80e8 	beq.w	804326c <EE_Init+0x3a0>
          {
            return FlashStatus;
 804309c:	7efb      	ldrb	r3, [r7, #27]
 804309e:	b29b      	uxth	r3, r3
 80430a0:	e0ea      	b.n	8043278 <EE_Init+0x3ac>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80430a2:	8c3b      	ldrh	r3, [r7, #32]
 80430a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80430a8:	4293      	cmp	r3, r2
 80430aa:	d12b      	bne.n	8043104 <EE_Init+0x238>
      {
        pEraseInit.Sector = PAGE1_ID;
 80430ac:	230a      	movs	r3, #10
 80430ae:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80430b0:	2301      	movs	r3, #1
 80430b2:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80430b4:	2301      	movs	r3, #1
 80430b6:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80430b8:	4832      	ldr	r0, [pc, #200]	; (8043184 <EE_Init+0x2b8>)
 80430ba:	f000 f8e9 	bl	8043290 <EE_VerifyPageFullyErased>
 80430be:	4603      	mov	r3, r0
 80430c0:	2b00      	cmp	r3, #0
 80430c2:	d10e      	bne.n	80430e2 <EE_Init+0x216>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80430c4:	f107 0214 	add.w	r2, r7, #20
 80430c8:	463b      	mov	r3, r7
 80430ca:	4611      	mov	r1, r2
 80430cc:	4618      	mov	r0, r3
 80430ce:	f002 f9b1 	bl	8045434 <HAL_FLASHEx_Erase>
 80430d2:	4603      	mov	r3, r0
 80430d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80430d6:	7efb      	ldrb	r3, [r7, #27]
 80430d8:	2b00      	cmp	r3, #0
 80430da:	d002      	beq.n	80430e2 <EE_Init+0x216>
          {
            return FlashStatus;
 80430dc:	7efb      	ldrb	r3, [r7, #27]
 80430de:	b29b      	uxth	r3, r3
 80430e0:	e0ca      	b.n	8043278 <EE_Init+0x3ac>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80430e2:	f04f 0200 	mov.w	r2, #0
 80430e6:	f04f 0300 	mov.w	r3, #0
 80430ea:	4925      	ldr	r1, [pc, #148]	; (8043180 <EE_Init+0x2b4>)
 80430ec:	2001      	movs	r0, #1
 80430ee:	f001 ffeb 	bl	80450c8 <HAL_FLASH_Program>
 80430f2:	4603      	mov	r3, r0
 80430f4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80430f6:	7efb      	ldrb	r3, [r7, #27]
 80430f8:	2b00      	cmp	r3, #0
 80430fa:	f000 80b7 	beq.w	804326c <EE_Init+0x3a0>
        {
          return FlashStatus;
 80430fe:	7efb      	ldrb	r3, [r7, #27]
 8043100:	b29b      	uxth	r3, r3
 8043102:	e0b9      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8043104:	f000 f954 	bl	80433b0 <EE_Format>
 8043108:	4603      	mov	r3, r0
 804310a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 804310c:	7efb      	ldrb	r3, [r7, #27]
 804310e:	2b00      	cmp	r3, #0
 8043110:	f000 80ac 	beq.w	804326c <EE_Init+0x3a0>
        {
          return FlashStatus;
 8043114:	7efb      	ldrb	r3, [r7, #27]
 8043116:	b29b      	uxth	r3, r3
 8043118:	e0ae      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 804311a:	8c3b      	ldrh	r3, [r7, #32]
 804311c:	2b00      	cmp	r3, #0
 804311e:	d10a      	bne.n	8043136 <EE_Init+0x26a>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8043120:	f000 f946 	bl	80433b0 <EE_Format>
 8043124:	4603      	mov	r3, r0
 8043126:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8043128:	7efb      	ldrb	r3, [r7, #27]
 804312a:	2b00      	cmp	r3, #0
 804312c:	f000 80a0 	beq.w	8043270 <EE_Init+0x3a4>
        {
          return FlashStatus;
 8043130:	7efb      	ldrb	r3, [r7, #27]
 8043132:	b29b      	uxth	r3, r3
 8043134:	e0a0      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8043136:	8c3b      	ldrh	r3, [r7, #32]
 8043138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804313c:	4293      	cmp	r3, r2
 804313e:	d11b      	bne.n	8043178 <EE_Init+0x2ac>
      {
        pEraseInit.Sector = PAGE1_ID;
 8043140:	230a      	movs	r3, #10
 8043142:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8043144:	2301      	movs	r3, #1
 8043146:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8043148:	2301      	movs	r3, #1
 804314a:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 804314c:	480d      	ldr	r0, [pc, #52]	; (8043184 <EE_Init+0x2b8>)
 804314e:	f000 f89f 	bl	8043290 <EE_VerifyPageFullyErased>
 8043152:	4603      	mov	r3, r0
 8043154:	2b00      	cmp	r3, #0
 8043156:	f040 808b 	bne.w	8043270 <EE_Init+0x3a4>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 804315a:	f107 0214 	add.w	r2, r7, #20
 804315e:	463b      	mov	r3, r7
 8043160:	4611      	mov	r1, r2
 8043162:	4618      	mov	r0, r3
 8043164:	f002 f966 	bl	8045434 <HAL_FLASHEx_Erase>
 8043168:	4603      	mov	r3, r0
 804316a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 804316c:	7efb      	ldrb	r3, [r7, #27]
 804316e:	2b00      	cmp	r3, #0
 8043170:	d07e      	beq.n	8043270 <EE_Init+0x3a4>
          {
            return FlashStatus;
 8043172:	7efb      	ldrb	r3, [r7, #27]
 8043174:	b29b      	uxth	r3, r3
 8043176:	e07f      	b.n	8043278 <EE_Init+0x3ac>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8043178:	2300      	movs	r3, #0
 804317a:	84fb      	strh	r3, [r7, #38]	; 0x26
 804317c:	e03c      	b.n	80431f8 <EE_Init+0x32c>
 804317e:	bf00      	nop
 8043180:	080a0000 	.word	0x080a0000
 8043184:	080c0000 	.word	0x080c0000
 8043188:	080a0006 	.word	0x080a0006
 804318c:	20000210 	.word	0x20000210
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == (KP_VirtAddr+VarIdx) )
 8043190:	4b3b      	ldr	r3, [pc, #236]	; (8043280 <EE_Init+0x3b4>)
 8043192:	881b      	ldrh	r3, [r3, #0]
 8043194:	b29b      	uxth	r3, r3
 8043196:	461a      	mov	r2, r3
 8043198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804319a:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 804319e:	33a0      	adds	r3, #160	; 0xa0
 80431a0:	429a      	cmp	r2, r3
 80431a2:	d101      	bne.n	80431a8 <EE_Init+0x2dc>
          {
            x = VarIdx;
 80431a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80431a6:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80431a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80431aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80431ae:	429a      	cmp	r2, r3
 80431b0:	d01f      	beq.n	80431f2 <EE_Init+0x326>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 80431b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80431b4:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80431b8:	3b60      	subs	r3, #96	; 0x60
 80431ba:	b29b      	uxth	r3, r3
 80431bc:	4931      	ldr	r1, [pc, #196]	; (8043284 <EE_Init+0x3b8>)
 80431be:	4618      	mov	r0, r3
 80431c0:	f000 f88c 	bl	80432dc <EE_ReadVariable>
 80431c4:	4603      	mov	r3, r0
 80431c6:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80431c8:	8bbb      	ldrh	r3, [r7, #28]
 80431ca:	2b01      	cmp	r3, #1
 80431cc:	d011      	beq.n	80431f2 <EE_Init+0x326>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 80431ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80431d0:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80431d4:	3b60      	subs	r3, #96	; 0x60
 80431d6:	b29b      	uxth	r3, r3
 80431d8:	4a2a      	ldr	r2, [pc, #168]	; (8043284 <EE_Init+0x3b8>)
 80431da:	8812      	ldrh	r2, [r2, #0]
 80431dc:	4611      	mov	r1, r2
 80431de:	4618      	mov	r0, r3
 80431e0:	f000 f97e 	bl	80434e0 <EE_VerifyPageFullWriteVariable>
 80431e4:	4603      	mov	r3, r0
 80431e6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80431e8:	8bfb      	ldrh	r3, [r7, #30]
 80431ea:	2b00      	cmp	r3, #0
 80431ec:	d001      	beq.n	80431f2 <EE_Init+0x326>
              {
                return EepromStatus;
 80431ee:	8bfb      	ldrh	r3, [r7, #30]
 80431f0:	e042      	b.n	8043278 <EE_Init+0x3ac>
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 80431f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80431f4:	3301      	adds	r3, #1
 80431f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80431f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80431fa:	2b0b      	cmp	r3, #11
 80431fc:	d9c8      	bls.n	8043190 <EE_Init+0x2c4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80431fe:	f04f 0200 	mov.w	r2, #0
 8043202:	f04f 0300 	mov.w	r3, #0
 8043206:	4920      	ldr	r1, [pc, #128]	; (8043288 <EE_Init+0x3bc>)
 8043208:	2001      	movs	r0, #1
 804320a:	f001 ff5d 	bl	80450c8 <HAL_FLASH_Program>
 804320e:	4603      	mov	r3, r0
 8043210:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8043212:	7efb      	ldrb	r3, [r7, #27]
 8043214:	2b00      	cmp	r3, #0
 8043216:	d002      	beq.n	804321e <EE_Init+0x352>
        {
          return FlashStatus;
 8043218:	7efb      	ldrb	r3, [r7, #27]
 804321a:	b29b      	uxth	r3, r3
 804321c:	e02c      	b.n	8043278 <EE_Init+0x3ac>
        }
        pEraseInit.Sector = PAGE0_ID;
 804321e:	2309      	movs	r3, #9
 8043220:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8043222:	2301      	movs	r3, #1
 8043224:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8043226:	2301      	movs	r3, #1
 8043228:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 804322a:	4818      	ldr	r0, [pc, #96]	; (804328c <EE_Init+0x3c0>)
 804322c:	f000 f830 	bl	8043290 <EE_VerifyPageFullyErased>
 8043230:	4603      	mov	r3, r0
 8043232:	2b00      	cmp	r3, #0
 8043234:	d11c      	bne.n	8043270 <EE_Init+0x3a4>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8043236:	f107 0214 	add.w	r2, r7, #20
 804323a:	463b      	mov	r3, r7
 804323c:	4611      	mov	r1, r2
 804323e:	4618      	mov	r0, r3
 8043240:	f002 f8f8 	bl	8045434 <HAL_FLASHEx_Erase>
 8043244:	4603      	mov	r3, r0
 8043246:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8043248:	7efb      	ldrb	r3, [r7, #27]
 804324a:	2b00      	cmp	r3, #0
 804324c:	d010      	beq.n	8043270 <EE_Init+0x3a4>
          {
            return FlashStatus;
 804324e:	7efb      	ldrb	r3, [r7, #27]
 8043250:	b29b      	uxth	r3, r3
 8043252:	e011      	b.n	8043278 <EE_Init+0x3ac>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8043254:	f000 f8ac 	bl	80433b0 <EE_Format>
 8043258:	4603      	mov	r3, r0
 804325a:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 804325c:	7efb      	ldrb	r3, [r7, #27]
 804325e:	2b00      	cmp	r3, #0
 8043260:	d008      	beq.n	8043274 <EE_Init+0x3a8>
      {
        return FlashStatus;
 8043262:	7efb      	ldrb	r3, [r7, #27]
 8043264:	b29b      	uxth	r3, r3
 8043266:	e007      	b.n	8043278 <EE_Init+0x3ac>
      break;
 8043268:	bf00      	nop
 804326a:	e004      	b.n	8043276 <EE_Init+0x3aa>
      break;
 804326c:	bf00      	nop
 804326e:	e002      	b.n	8043276 <EE_Init+0x3aa>
      break;
 8043270:	bf00      	nop
 8043272:	e000      	b.n	8043276 <EE_Init+0x3aa>
      }
      break;
 8043274:	bf00      	nop
  }

  return HAL_OK;
 8043276:	2300      	movs	r3, #0
}
 8043278:	4618      	mov	r0, r3
 804327a:	3728      	adds	r7, #40	; 0x28
 804327c:	46bd      	mov	sp, r7
 804327e:	bd80      	pop	{r7, pc}
 8043280:	080c0006 	.word	0x080c0006
 8043284:	20000210 	.word	0x20000210
 8043288:	080c0000 	.word	0x080c0000
 804328c:	080a0000 	.word	0x080a0000

08043290 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8043290:	b480      	push	{r7}
 8043292:	b085      	sub	sp, #20
 8043294:	af00      	add	r7, sp, #0
 8043296:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8043298:	2301      	movs	r3, #1
 804329a:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 804329c:	f245 5355 	movw	r3, #21845	; 0x5555
 80432a0:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80432a2:	e00d      	b.n	80432c0 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80432a4:	687b      	ldr	r3, [r7, #4]
 80432a6:	881b      	ldrh	r3, [r3, #0]
 80432a8:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80432aa:	897b      	ldrh	r3, [r7, #10]
 80432ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80432b0:	4293      	cmp	r3, r2
 80432b2:	d002      	beq.n	80432ba <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80432b4:	2300      	movs	r3, #0
 80432b6:	60fb      	str	r3, [r7, #12]

      break;
 80432b8:	e006      	b.n	80432c8 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80432ba:	687b      	ldr	r3, [r7, #4]
 80432bc:	3304      	adds	r3, #4
 80432be:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80432c0:	687b      	ldr	r3, [r7, #4]
 80432c2:	4a05      	ldr	r2, [pc, #20]	; (80432d8 <EE_VerifyPageFullyErased+0x48>)
 80432c4:	4293      	cmp	r3, r2
 80432c6:	d9ed      	bls.n	80432a4 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80432c8:	68fb      	ldr	r3, [r7, #12]
 80432ca:	b29b      	uxth	r3, r3
}
 80432cc:	4618      	mov	r0, r3
 80432ce:	3714      	adds	r7, #20
 80432d0:	46bd      	mov	sp, r7
 80432d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432d6:	4770      	bx	lr
 80432d8:	080bffff 	.word	0x080bffff

080432dc <EE_ReadVariable>:


uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80432dc:	b580      	push	{r7, lr}
 80432de:	b086      	sub	sp, #24
 80432e0:	af00      	add	r7, sp, #0
 80432e2:	4603      	mov	r3, r0
 80432e4:	6039      	str	r1, [r7, #0]
 80432e6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80432e8:	2300      	movs	r3, #0
 80432ea:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80432ec:	f245 5355 	movw	r3, #21845	; 0x5555
 80432f0:	81bb      	strh	r3, [r7, #12]
 80432f2:	2301      	movs	r3, #1
 80432f4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80432f6:	4b1b      	ldr	r3, [pc, #108]	; (8043364 <EE_ReadVariable+0x88>)
 80432f8:	613b      	str	r3, [r7, #16]
 80432fa:	4b1a      	ldr	r3, [pc, #104]	; (8043364 <EE_ReadVariable+0x88>)
 80432fc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80432fe:	2000      	movs	r0, #0
 8043300:	f000 f8a8 	bl	8043454 <EE_FindValidPage>
 8043304:	4603      	mov	r3, r0
 8043306:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8043308:	89fb      	ldrh	r3, [r7, #14]
 804330a:	2bab      	cmp	r3, #171	; 0xab
 804330c:	d101      	bne.n	8043312 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 804330e:	23ab      	movs	r3, #171	; 0xab
 8043310:	e024      	b.n	804335c <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8043312:	89fb      	ldrh	r3, [r7, #14]
 8043314:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8043318:	045b      	lsls	r3, r3, #17
 804331a:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 804331c:	89fb      	ldrh	r3, [r7, #14]
 804331e:	3301      	adds	r3, #1
 8043320:	045a      	lsls	r2, r3, #17
 8043322:	4b11      	ldr	r3, [pc, #68]	; (8043368 <EE_ReadVariable+0x8c>)
 8043324:	4413      	add	r3, r2
 8043326:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8043328:	e012      	b.n	8043350 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 804332a:	693b      	ldr	r3, [r7, #16]
 804332c:	881b      	ldrh	r3, [r3, #0]
 804332e:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8043330:	89ba      	ldrh	r2, [r7, #12]
 8043332:	88fb      	ldrh	r3, [r7, #6]
 8043334:	429a      	cmp	r2, r3
 8043336:	d108      	bne.n	804334a <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8043338:	693b      	ldr	r3, [r7, #16]
 804333a:	3b02      	subs	r3, #2
 804333c:	881b      	ldrh	r3, [r3, #0]
 804333e:	b29a      	uxth	r2, r3
 8043340:	683b      	ldr	r3, [r7, #0]
 8043342:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8043344:	2300      	movs	r3, #0
 8043346:	82fb      	strh	r3, [r7, #22]

      break;
 8043348:	e007      	b.n	804335a <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 804334a:	693b      	ldr	r3, [r7, #16]
 804334c:	3b04      	subs	r3, #4
 804334e:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8043350:	68bb      	ldr	r3, [r7, #8]
 8043352:	3302      	adds	r3, #2
 8043354:	693a      	ldr	r2, [r7, #16]
 8043356:	429a      	cmp	r2, r3
 8043358:	d8e7      	bhi.n	804332a <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 804335a:	8afb      	ldrh	r3, [r7, #22]
}
 804335c:	4618      	mov	r0, r3
 804335e:	3718      	adds	r7, #24
 8043360:	46bd      	mov	sp, r7
 8043362:	bd80      	pop	{r7, pc}
 8043364:	080a0000 	.word	0x080a0000
 8043368:	0809fffe 	.word	0x0809fffe

0804336c <EE_WriteVariable>:


uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 804336c:	b580      	push	{r7, lr}
 804336e:	b084      	sub	sp, #16
 8043370:	af00      	add	r7, sp, #0
 8043372:	4603      	mov	r3, r0
 8043374:	460a      	mov	r2, r1
 8043376:	80fb      	strh	r3, [r7, #6]
 8043378:	4613      	mov	r3, r2
 804337a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 804337c:	2300      	movs	r3, #0
 804337e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8043380:	88ba      	ldrh	r2, [r7, #4]
 8043382:	88fb      	ldrh	r3, [r7, #6]
 8043384:	4611      	mov	r1, r2
 8043386:	4618      	mov	r0, r3
 8043388:	f000 f8aa 	bl	80434e0 <EE_VerifyPageFullWriteVariable>
 804338c:	4603      	mov	r3, r0
 804338e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8043390:	89fb      	ldrh	r3, [r7, #14]
 8043392:	2b80      	cmp	r3, #128	; 0x80
 8043394:	d107      	bne.n	80433a6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8043396:	88ba      	ldrh	r2, [r7, #4]
 8043398:	88fb      	ldrh	r3, [r7, #6]
 804339a:	4611      	mov	r1, r2
 804339c:	4618      	mov	r0, r3
 804339e:	f000 f901 	bl	80435a4 <EE_PageTransfer>
 80433a2:	4603      	mov	r3, r0
 80433a4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80433a6:	89fb      	ldrh	r3, [r7, #14]
}
 80433a8:	4618      	mov	r0, r3
 80433aa:	3710      	adds	r7, #16
 80433ac:	46bd      	mov	sp, r7
 80433ae:	bd80      	pop	{r7, pc}

080433b0 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80433b0:	b580      	push	{r7, lr}
 80433b2:	b088      	sub	sp, #32
 80433b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80433b6:	2300      	movs	r3, #0
 80433b8:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80433ba:	2300      	movs	r3, #0
 80433bc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80433be:	2300      	movs	r3, #0
 80433c0:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80433c2:	2309      	movs	r3, #9
 80433c4:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80433c6:	2301      	movs	r3, #1
 80433c8:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80433ca:	2301      	movs	r3, #1
 80433cc:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80433ce:	481f      	ldr	r0, [pc, #124]	; (804344c <EE_Format+0x9c>)
 80433d0:	f7ff ff5e 	bl	8043290 <EE_VerifyPageFullyErased>
 80433d4:	4603      	mov	r3, r0
 80433d6:	2b00      	cmp	r3, #0
 80433d8:	d10d      	bne.n	80433f6 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80433da:	f107 0218 	add.w	r2, r7, #24
 80433de:	1d3b      	adds	r3, r7, #4
 80433e0:	4611      	mov	r1, r2
 80433e2:	4618      	mov	r0, r3
 80433e4:	f002 f826 	bl	8045434 <HAL_FLASHEx_Erase>
 80433e8:	4603      	mov	r3, r0
 80433ea:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80433ec:	7ffb      	ldrb	r3, [r7, #31]
 80433ee:	2b00      	cmp	r3, #0
 80433f0:	d001      	beq.n	80433f6 <EE_Format+0x46>
    {
      return FlashStatus;
 80433f2:	7ffb      	ldrb	r3, [r7, #31]
 80433f4:	e025      	b.n	8043442 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80433f6:	f04f 0200 	mov.w	r2, #0
 80433fa:	f04f 0300 	mov.w	r3, #0
 80433fe:	4913      	ldr	r1, [pc, #76]	; (804344c <EE_Format+0x9c>)
 8043400:	2001      	movs	r0, #1
 8043402:	f001 fe61 	bl	80450c8 <HAL_FLASH_Program>
 8043406:	4603      	mov	r3, r0
 8043408:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 804340a:	7ffb      	ldrb	r3, [r7, #31]
 804340c:	2b00      	cmp	r3, #0
 804340e:	d001      	beq.n	8043414 <EE_Format+0x64>
  {
    return FlashStatus;
 8043410:	7ffb      	ldrb	r3, [r7, #31]
 8043412:	e016      	b.n	8043442 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8043414:	230a      	movs	r3, #10
 8043416:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8043418:	480d      	ldr	r0, [pc, #52]	; (8043450 <EE_Format+0xa0>)
 804341a:	f7ff ff39 	bl	8043290 <EE_VerifyPageFullyErased>
 804341e:	4603      	mov	r3, r0
 8043420:	2b00      	cmp	r3, #0
 8043422:	d10d      	bne.n	8043440 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8043424:	f107 0218 	add.w	r2, r7, #24
 8043428:	1d3b      	adds	r3, r7, #4
 804342a:	4611      	mov	r1, r2
 804342c:	4618      	mov	r0, r3
 804342e:	f002 f801 	bl	8045434 <HAL_FLASHEx_Erase>
 8043432:	4603      	mov	r3, r0
 8043434:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8043436:	7ffb      	ldrb	r3, [r7, #31]
 8043438:	2b00      	cmp	r3, #0
 804343a:	d001      	beq.n	8043440 <EE_Format+0x90>
    {
      return FlashStatus;
 804343c:	7ffb      	ldrb	r3, [r7, #31]
 804343e:	e000      	b.n	8043442 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8043440:	2300      	movs	r3, #0
}
 8043442:	4618      	mov	r0, r3
 8043444:	3720      	adds	r7, #32
 8043446:	46bd      	mov	sp, r7
 8043448:	bd80      	pop	{r7, pc}
 804344a:	bf00      	nop
 804344c:	080a0000 	.word	0x080a0000
 8043450:	080c0000 	.word	0x080c0000

08043454 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8043454:	b480      	push	{r7}
 8043456:	b085      	sub	sp, #20
 8043458:	af00      	add	r7, sp, #0
 804345a:	4603      	mov	r3, r0
 804345c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 804345e:	2306      	movs	r3, #6
 8043460:	81fb      	strh	r3, [r7, #14]
 8043462:	2306      	movs	r3, #6
 8043464:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8043466:	4b1c      	ldr	r3, [pc, #112]	; (80434d8 <EE_FindValidPage+0x84>)
 8043468:	881b      	ldrh	r3, [r3, #0]
 804346a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 804346c:	4b1b      	ldr	r3, [pc, #108]	; (80434dc <EE_FindValidPage+0x88>)
 804346e:	881b      	ldrh	r3, [r3, #0]
 8043470:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8043472:	79fb      	ldrb	r3, [r7, #7]
 8043474:	2b00      	cmp	r3, #0
 8043476:	d01b      	beq.n	80434b0 <EE_FindValidPage+0x5c>
 8043478:	2b01      	cmp	r3, #1
 804347a:	d125      	bne.n	80434c8 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 804347c:	89bb      	ldrh	r3, [r7, #12]
 804347e:	2b00      	cmp	r3, #0
 8043480:	d108      	bne.n	8043494 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8043482:	89fb      	ldrh	r3, [r7, #14]
 8043484:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8043488:	4293      	cmp	r3, r2
 804348a:	d101      	bne.n	8043490 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 804348c:	2300      	movs	r3, #0
 804348e:	e01c      	b.n	80434ca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8043490:	2301      	movs	r3, #1
 8043492:	e01a      	b.n	80434ca <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8043494:	89fb      	ldrh	r3, [r7, #14]
 8043496:	2b00      	cmp	r3, #0
 8043498:	d108      	bne.n	80434ac <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 804349a:	89bb      	ldrh	r3, [r7, #12]
 804349c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80434a0:	4293      	cmp	r3, r2
 80434a2:	d101      	bne.n	80434a8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80434a4:	2301      	movs	r3, #1
 80434a6:	e010      	b.n	80434ca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80434a8:	2300      	movs	r3, #0
 80434aa:	e00e      	b.n	80434ca <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80434ac:	23ab      	movs	r3, #171	; 0xab
 80434ae:	e00c      	b.n	80434ca <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80434b0:	89fb      	ldrh	r3, [r7, #14]
 80434b2:	2b00      	cmp	r3, #0
 80434b4:	d101      	bne.n	80434ba <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80434b6:	2300      	movs	r3, #0
 80434b8:	e007      	b.n	80434ca <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80434ba:	89bb      	ldrh	r3, [r7, #12]
 80434bc:	2b00      	cmp	r3, #0
 80434be:	d101      	bne.n	80434c4 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80434c0:	2301      	movs	r3, #1
 80434c2:	e002      	b.n	80434ca <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80434c4:	23ab      	movs	r3, #171	; 0xab
 80434c6:	e000      	b.n	80434ca <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80434c8:	2300      	movs	r3, #0
  }
}
 80434ca:	4618      	mov	r0, r3
 80434cc:	3714      	adds	r7, #20
 80434ce:	46bd      	mov	sp, r7
 80434d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434d4:	4770      	bx	lr
 80434d6:	bf00      	nop
 80434d8:	080a0000 	.word	0x080a0000
 80434dc:	080c0000 	.word	0x080c0000

080434e0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80434e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80434e4:	b086      	sub	sp, #24
 80434e6:	af00      	add	r7, sp, #0
 80434e8:	4603      	mov	r3, r0
 80434ea:	460a      	mov	r2, r1
 80434ec:	80fb      	strh	r3, [r7, #6]
 80434ee:	4613      	mov	r3, r2
 80434f0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80434f2:	2300      	movs	r3, #0
 80434f4:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80434f6:	2300      	movs	r3, #0
 80434f8:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80434fa:	4b27      	ldr	r3, [pc, #156]	; (8043598 <EE_VerifyPageFullWriteVariable+0xb8>)
 80434fc:	617b      	str	r3, [r7, #20]
 80434fe:	4b27      	ldr	r3, [pc, #156]	; (804359c <EE_VerifyPageFullWriteVariable+0xbc>)
 8043500:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8043502:	2001      	movs	r0, #1
 8043504:	f7ff ffa6 	bl	8043454 <EE_FindValidPage>
 8043508:	4603      	mov	r3, r0
 804350a:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 804350c:	8a3b      	ldrh	r3, [r7, #16]
 804350e:	2bab      	cmp	r3, #171	; 0xab
 8043510:	d101      	bne.n	8043516 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8043512:	23ab      	movs	r3, #171	; 0xab
 8043514:	e03a      	b.n	804358c <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8043516:	8a3b      	ldrh	r3, [r7, #16]
 8043518:	f203 4305 	addw	r3, r3, #1029	; 0x405
 804351c:	045b      	lsls	r3, r3, #17
 804351e:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8043520:	8a3b      	ldrh	r3, [r7, #16]
 8043522:	3301      	adds	r3, #1
 8043524:	045a      	lsls	r2, r3, #17
 8043526:	4b1e      	ldr	r3, [pc, #120]	; (80435a0 <EE_VerifyPageFullWriteVariable+0xc0>)
 8043528:	4413      	add	r3, r2
 804352a:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 804352c:	e029      	b.n	8043582 <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 804352e:	697b      	ldr	r3, [r7, #20]
 8043530:	681b      	ldr	r3, [r3, #0]
 8043532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043536:	d121      	bne.n	804357c <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8043538:	88bb      	ldrh	r3, [r7, #4]
 804353a:	2200      	movs	r2, #0
 804353c:	461c      	mov	r4, r3
 804353e:	4615      	mov	r5, r2
 8043540:	4622      	mov	r2, r4
 8043542:	462b      	mov	r3, r5
 8043544:	6979      	ldr	r1, [r7, #20]
 8043546:	2001      	movs	r0, #1
 8043548:	f001 fdbe 	bl	80450c8 <HAL_FLASH_Program>
 804354c:	4603      	mov	r3, r0
 804354e:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8043550:	7cfb      	ldrb	r3, [r7, #19]
 8043552:	2b00      	cmp	r3, #0
 8043554:	d002      	beq.n	804355c <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 8043556:	7cfb      	ldrb	r3, [r7, #19]
 8043558:	b29b      	uxth	r3, r3
 804355a:	e017      	b.n	804358c <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 804355c:	697b      	ldr	r3, [r7, #20]
 804355e:	1c99      	adds	r1, r3, #2
 8043560:	88fb      	ldrh	r3, [r7, #6]
 8043562:	2200      	movs	r2, #0
 8043564:	4698      	mov	r8, r3
 8043566:	4691      	mov	r9, r2
 8043568:	4642      	mov	r2, r8
 804356a:	464b      	mov	r3, r9
 804356c:	2001      	movs	r0, #1
 804356e:	f001 fdab 	bl	80450c8 <HAL_FLASH_Program>
 8043572:	4603      	mov	r3, r0
 8043574:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8043576:	7cfb      	ldrb	r3, [r7, #19]
 8043578:	b29b      	uxth	r3, r3
 804357a:	e007      	b.n	804358c <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 804357c:	697b      	ldr	r3, [r7, #20]
 804357e:	3304      	adds	r3, #4
 8043580:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8043582:	697a      	ldr	r2, [r7, #20]
 8043584:	68fb      	ldr	r3, [r7, #12]
 8043586:	429a      	cmp	r2, r3
 8043588:	d3d1      	bcc.n	804352e <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 804358a:	2380      	movs	r3, #128	; 0x80
}
 804358c:	4618      	mov	r0, r3
 804358e:	3718      	adds	r7, #24
 8043590:	46bd      	mov	sp, r7
 8043592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8043596:	bf00      	nop
 8043598:	080a0000 	.word	0x080a0000
 804359c:	080c0000 	.word	0x080c0000
 80435a0:	0809ffff 	.word	0x0809ffff

080435a4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80435a4:	b580      	push	{r7, lr}
 80435a6:	b08c      	sub	sp, #48	; 0x30
 80435a8:	af00      	add	r7, sp, #0
 80435aa:	4603      	mov	r3, r0
 80435ac:	460a      	mov	r2, r1
 80435ae:	80fb      	strh	r3, [r7, #6]
 80435b0:	4613      	mov	r3, r2
 80435b2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80435b4:	2300      	movs	r3, #0
 80435b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80435ba:	4b55      	ldr	r3, [pc, #340]	; (8043710 <EE_PageTransfer+0x16c>)
 80435bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 80435be:	2300      	movs	r3, #0
 80435c0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80435c2:	2300      	movs	r3, #0
 80435c4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80435c6:	2300      	movs	r3, #0
 80435c8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80435ca:	2300      	movs	r3, #0
 80435cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80435ce:	2300      	movs	r3, #0
 80435d0:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 80435d2:	2300      	movs	r3, #0
 80435d4:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80435d6:	2000      	movs	r0, #0
 80435d8:	f7ff ff3c 	bl	8043454 <EE_FindValidPage>
 80435dc:	4603      	mov	r3, r0
 80435de:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80435e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80435e2:	2b01      	cmp	r3, #1
 80435e4:	d104      	bne.n	80435f0 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80435e6:	4b4a      	ldr	r3, [pc, #296]	; (8043710 <EE_PageTransfer+0x16c>)
 80435e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80435ea:	230a      	movs	r3, #10
 80435ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80435ee:	e009      	b.n	8043604 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80435f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80435f2:	2b00      	cmp	r3, #0
 80435f4:	d104      	bne.n	8043600 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80435f6:	4b47      	ldr	r3, [pc, #284]	; (8043714 <EE_PageTransfer+0x170>)
 80435f8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80435fa:	2309      	movs	r3, #9
 80435fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80435fe:	e001      	b.n	8043604 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8043600:	23ab      	movs	r3, #171	; 0xab
 8043602:	e080      	b.n	8043706 <EE_PageTransfer+0x162>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8043604:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8043608:	f04f 0300 	mov.w	r3, #0
 804360c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804360e:	2001      	movs	r0, #1
 8043610:	f001 fd5a 	bl	80450c8 <HAL_FLASH_Program>
 8043614:	4603      	mov	r3, r0
 8043616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 804361a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804361e:	2b00      	cmp	r3, #0
 8043620:	d003      	beq.n	804362a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8043622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043626:	b29b      	uxth	r3, r3
 8043628:	e06d      	b.n	8043706 <EE_PageTransfer+0x162>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 804362a:	88ba      	ldrh	r2, [r7, #4]
 804362c:	88fb      	ldrh	r3, [r7, #6]
 804362e:	4611      	mov	r1, r2
 8043630:	4618      	mov	r0, r3
 8043632:	f7ff ff55 	bl	80434e0 <EE_VerifyPageFullWriteVariable>
 8043636:	4603      	mov	r3, r0
 8043638:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 804363a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804363c:	2b00      	cmp	r3, #0
 804363e:	d001      	beq.n	8043644 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8043640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8043642:	e060      	b.n	8043706 <EE_PageTransfer+0x162>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8043644:	2300      	movs	r3, #0
 8043646:	853b      	strh	r3, [r7, #40]	; 0x28
 8043648:	e029      	b.n	804369e <EE_PageTransfer+0xfa>
  {
    if ( (KP_VirtAddr+VarIdx) != VirtAddress)  /* Check each variable except the one passed as parameter */
 804364a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804364c:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8043650:	33a0      	adds	r3, #160	; 0xa0
 8043652:	88fa      	ldrh	r2, [r7, #6]
 8043654:	4293      	cmp	r3, r2
 8043656:	d01f      	beq.n	8043698 <EE_PageTransfer+0xf4>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 8043658:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804365a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 804365e:	3b60      	subs	r3, #96	; 0x60
 8043660:	b29b      	uxth	r3, r3
 8043662:	492d      	ldr	r1, [pc, #180]	; (8043718 <EE_PageTransfer+0x174>)
 8043664:	4618      	mov	r0, r3
 8043666:	f7ff fe39 	bl	80432dc <EE_ReadVariable>
 804366a:	4603      	mov	r3, r0
 804366c:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 804366e:	8c3b      	ldrh	r3, [r7, #32]
 8043670:	2b01      	cmp	r3, #1
 8043672:	d011      	beq.n	8043698 <EE_PageTransfer+0xf4>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8043674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8043676:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 804367a:	3b60      	subs	r3, #96	; 0x60
 804367c:	b29b      	uxth	r3, r3
 804367e:	4a26      	ldr	r2, [pc, #152]	; (8043718 <EE_PageTransfer+0x174>)
 8043680:	8812      	ldrh	r2, [r2, #0]
 8043682:	4611      	mov	r1, r2
 8043684:	4618      	mov	r0, r3
 8043686:	f7ff ff2b 	bl	80434e0 <EE_VerifyPageFullWriteVariable>
 804368a:	4603      	mov	r3, r0
 804368c:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 804368e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8043690:	2b00      	cmp	r3, #0
 8043692:	d001      	beq.n	8043698 <EE_PageTransfer+0xf4>
        {
          return EepromStatus;
 8043694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8043696:	e036      	b.n	8043706 <EE_PageTransfer+0x162>
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8043698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804369a:	3301      	adds	r3, #1
 804369c:	853b      	strh	r3, [r7, #40]	; 0x28
 804369e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80436a0:	2b0b      	cmp	r3, #11
 80436a2:	d9d2      	bls.n	804364a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80436a4:	2300      	movs	r3, #0
 80436a6:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80436a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80436aa:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80436ac:	2301      	movs	r3, #1
 80436ae:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80436b0:	2301      	movs	r3, #1
 80436b2:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80436b4:	f107 021c 	add.w	r2, r7, #28
 80436b8:	f107 0308 	add.w	r3, r7, #8
 80436bc:	4611      	mov	r1, r2
 80436be:	4618      	mov	r0, r3
 80436c0:	f001 feb8 	bl	8045434 <HAL_FLASHEx_Erase>
 80436c4:	4603      	mov	r3, r0
 80436c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80436ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80436ce:	2b00      	cmp	r3, #0
 80436d0:	d003      	beq.n	80436da <EE_PageTransfer+0x136>
  {
    return FlashStatus;
 80436d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80436d6:	b29b      	uxth	r3, r3
 80436d8:	e015      	b.n	8043706 <EE_PageTransfer+0x162>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 80436da:	f04f 0200 	mov.w	r2, #0
 80436de:	f04f 0300 	mov.w	r3, #0
 80436e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80436e4:	2001      	movs	r0, #1
 80436e6:	f001 fcef 	bl	80450c8 <HAL_FLASH_Program>
 80436ea:	4603      	mov	r3, r0
 80436ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80436f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80436f4:	2b00      	cmp	r3, #0
 80436f6:	d003      	beq.n	8043700 <EE_PageTransfer+0x15c>
  {
    return FlashStatus;
 80436f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80436fc:	b29b      	uxth	r3, r3
 80436fe:	e002      	b.n	8043706 <EE_PageTransfer+0x162>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8043700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043704:	b29b      	uxth	r3, r3
}
 8043706:	4618      	mov	r0, r3
 8043708:	3730      	adds	r7, #48	; 0x30
 804370a:	46bd      	mov	sp, r7
 804370c:	bd80      	pop	{r7, pc}
 804370e:	bf00      	nop
 8043710:	080a0000 	.word	0x080a0000
 8043714:	080c0000 	.word	0x080c0000
 8043718:	20000210 	.word	0x20000210

0804371c <FEE_WriteCtrlParams>:
 HAL_FLASH_Lock();
}


HAL_StatusTypeDef FEE_WriteCtrlParams(msTempControlParams* p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 804371c:	b580      	push	{r7, lr}
 804371e:	b088      	sub	sp, #32
 8043720:	af00      	add	r7, sp, #0
 8043722:	6078      	str	r0, [r7, #4]
 8043724:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result = HAL_OK;
 8043726:	2300      	movs	r3, #0
 8043728:	77fb      	strb	r3, [r7, #31]
	uint8_t ui8_bank1Percentage = p_CtrlParams->ui8_bank1Percentage;
 804372a:	687b      	ldr	r3, [r7, #4]
 804372c:	781b      	ldrb	r3, [r3, #0]
 804372e:	77bb      	strb	r3, [r7, #30]
	uint8_t ui8_bank2Percentage = p_CtrlParams->ui8_bank2Percentage;
 8043730:	687b      	ldr	r3, [r7, #4]
 8043732:	785b      	ldrb	r3, [r3, #1]
 8043734:	777b      	strb	r3, [r7, #29]
	uint16_t u16_KP = (uint16_t)p_ReflowParameters->KP;
 8043736:	683b      	ldr	r3, [r7, #0]
 8043738:	edd3 7a00 	vldr	s15, [r3]
 804373c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043740:	ee17 3a90 	vmov	r3, s15
 8043744:	837b      	strh	r3, [r7, #26]
	uint16_t u16_KI = (uint16_t)p_ReflowParameters->KI;
 8043746:	683b      	ldr	r3, [r7, #0]
 8043748:	edd3 7a01 	vldr	s15, [r3, #4]
 804374c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043750:	ee17 3a90 	vmov	r3, s15
 8043754:	833b      	strh	r3, [r7, #24]
	uint16_t u16_KD = (uint16_t)p_ReflowParameters->KD;
 8043756:	683b      	ldr	r3, [r7, #0]
 8043758:	edd3 7a02 	vldr	s15, [r3, #8]
 804375c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043760:	ee17 3a90 	vmov	r3, s15
 8043764:	82fb      	strh	r3, [r7, #22]
	uint16_t u16_firstHeatUpRate = (uint16_t)(p_ReflowParameters->firstHeatUpRate * 100.0);
 8043766:	683b      	ldr	r3, [r7, #0]
 8043768:	68db      	ldr	r3, [r3, #12]
 804376a:	4618      	mov	r0, r3
 804376c:	f7fc feec 	bl	8040548 <__aeabi_f2d>
 8043770:	f04f 0200 	mov.w	r2, #0
 8043774:	4b5f      	ldr	r3, [pc, #380]	; (80438f4 <FEE_WriteCtrlParams+0x1d8>)
 8043776:	f7fc ff3f 	bl	80405f8 <__aeabi_dmul>
 804377a:	4602      	mov	r2, r0
 804377c:	460b      	mov	r3, r1
 804377e:	4610      	mov	r0, r2
 8043780:	4619      	mov	r1, r3
 8043782:	f7fd fa11 	bl	8040ba8 <__aeabi_d2uiz>
 8043786:	4603      	mov	r3, r0
 8043788:	82bb      	strh	r3, [r7, #20]
	uint16_t u16_secondHeatUpRate = (uint16_t)(p_ReflowParameters->secondHeatUpRate * 100.0);
 804378a:	683b      	ldr	r3, [r7, #0]
 804378c:	699b      	ldr	r3, [r3, #24]
 804378e:	4618      	mov	r0, r3
 8043790:	f7fc feda 	bl	8040548 <__aeabi_f2d>
 8043794:	f04f 0200 	mov.w	r2, #0
 8043798:	4b56      	ldr	r3, [pc, #344]	; (80438f4 <FEE_WriteCtrlParams+0x1d8>)
 804379a:	f7fc ff2d 	bl	80405f8 <__aeabi_dmul>
 804379e:	4602      	mov	r2, r0
 80437a0:	460b      	mov	r3, r1
 80437a2:	4610      	mov	r0, r2
 80437a4:	4619      	mov	r1, r3
 80437a6:	f7fd f9ff 	bl	8040ba8 <__aeabi_d2uiz>
 80437aa:	4603      	mov	r3, r0
 80437ac:	827b      	strh	r3, [r7, #18]
	uint16_t u16_SoakTime = (uint16_t)p_ReflowParameters->SoakTime;
 80437ae:	683b      	ldr	r3, [r7, #0]
 80437b0:	695b      	ldr	r3, [r3, #20]
 80437b2:	823b      	strh	r3, [r7, #16]
	uint16_t u16_SoakTemperature = (uint16_t)p_ReflowParameters->SoakTempeture;
 80437b4:	683b      	ldr	r3, [r7, #0]
 80437b6:	691b      	ldr	r3, [r3, #16]
 80437b8:	81fb      	strh	r3, [r7, #14]
	uint16_t u16_ReflowTime = (uint16_t)p_ReflowParameters->ReflowTime;
 80437ba:	683b      	ldr	r3, [r7, #0]
 80437bc:	6a1b      	ldr	r3, [r3, #32]
 80437be:	81bb      	strh	r3, [r7, #12]
	uint16_t u16_ReflowTemperature = (uint16_t)p_ReflowParameters->ReflowTempeture;
 80437c0:	683b      	ldr	r3, [r7, #0]
 80437c2:	69db      	ldr	r3, [r3, #28]
 80437c4:	817b      	strh	r3, [r7, #10]


	if((EE_WriteVariable(ui8_bank1Percentage_VirtAddr,(uint16_t)ui8_bank1Percentage)) != HAL_OK)
 80437c6:	7fbb      	ldrb	r3, [r7, #30]
 80437c8:	b29b      	uxth	r3, r3
 80437ca:	4619      	mov	r1, r3
 80437cc:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 80437d0:	f7ff fdcc 	bl	804336c <EE_WriteVariable>
 80437d4:	4603      	mov	r3, r0
 80437d6:	2b00      	cmp	r3, #0
 80437d8:	d003      	beq.n	80437e2 <FEE_WriteCtrlParams+0xc6>
	{
		result = HAL_ERROR;
 80437da:	2301      	movs	r3, #1
 80437dc:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437de:	f000 fef1 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(ui8_bank2Percentage_VirtAddr,  (uint16_t)ui8_bank2Percentage)) != HAL_OK)
 80437e2:	7f7b      	ldrb	r3, [r7, #29]
 80437e4:	b29b      	uxth	r3, r3
 80437e6:	4619      	mov	r1, r3
 80437e8:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 80437ec:	f7ff fdbe 	bl	804336c <EE_WriteVariable>
 80437f0:	4603      	mov	r3, r0
 80437f2:	2b00      	cmp	r3, #0
 80437f4:	d003      	beq.n	80437fe <FEE_WriteCtrlParams+0xe2>
	{
		result = HAL_ERROR;
 80437f6:	2301      	movs	r3, #1
 80437f8:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80437fa:	f000 fee3 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(KP_VirtAddr,  u16_KP)) != HAL_OK)
 80437fe:	8b7b      	ldrh	r3, [r7, #26]
 8043800:	4619      	mov	r1, r3
 8043802:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 8043806:	f7ff fdb1 	bl	804336c <EE_WriteVariable>
 804380a:	4603      	mov	r3, r0
 804380c:	2b00      	cmp	r3, #0
 804380e:	d003      	beq.n	8043818 <FEE_WriteCtrlParams+0xfc>
	{
		result = HAL_ERROR;
 8043810:	2301      	movs	r3, #1
 8043812:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043814:	f000 fed6 	bl	80445c4 <Error_Handler>
	}
	if((EE_WriteVariable(KI_VirtAddr,  u16_KI)) != HAL_OK)
 8043818:	8b3b      	ldrh	r3, [r7, #24]
 804381a:	4619      	mov	r1, r3
 804381c:	f64a 20a9 	movw	r0, #43689	; 0xaaa9
 8043820:	f7ff fda4 	bl	804336c <EE_WriteVariable>
 8043824:	4603      	mov	r3, r0
 8043826:	2b00      	cmp	r3, #0
 8043828:	d003      	beq.n	8043832 <FEE_WriteCtrlParams+0x116>
	{
		result = HAL_ERROR;
 804382a:	2301      	movs	r3, #1
 804382c:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 804382e:	f000 fec9 	bl	80445c4 <Error_Handler>
	}
	if((EE_WriteVariable(KD_VirtAddr,  u16_KD)) != HAL_OK)
 8043832:	8afb      	ldrh	r3, [r7, #22]
 8043834:	4619      	mov	r1, r3
 8043836:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 804383a:	f7ff fd97 	bl	804336c <EE_WriteVariable>
 804383e:	4603      	mov	r3, r0
 8043840:	2b00      	cmp	r3, #0
 8043842:	d003      	beq.n	804384c <FEE_WriteCtrlParams+0x130>
	{
		result = HAL_ERROR;
 8043844:	2301      	movs	r3, #1
 8043846:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043848:	f000 febc 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(firstHeatUpRate_VirtAddr,  (uint16_t)u16_firstHeatUpRate)) != HAL_OK)
 804384c:	8abb      	ldrh	r3, [r7, #20]
 804384e:	4619      	mov	r1, r3
 8043850:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 8043854:	f7ff fd8a 	bl	804336c <EE_WriteVariable>
 8043858:	4603      	mov	r3, r0
 804385a:	2b00      	cmp	r3, #0
 804385c:	d003      	beq.n	8043866 <FEE_WriteCtrlParams+0x14a>
	{
		result = HAL_ERROR;
 804385e:	2301      	movs	r3, #1
 8043860:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043862:	f000 feaf 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(secondHeatUpRate_VirtAddr, (uint16_t) u16_secondHeatUpRate)) != HAL_OK)
 8043866:	8a7b      	ldrh	r3, [r7, #18]
 8043868:	4619      	mov	r1, r3
 804386a:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 804386e:	f7ff fd7d 	bl	804336c <EE_WriteVariable>
 8043872:	4603      	mov	r3, r0
 8043874:	2b00      	cmp	r3, #0
 8043876:	d003      	beq.n	8043880 <FEE_WriteCtrlParams+0x164>
	{
		result = HAL_ERROR;
 8043878:	2301      	movs	r3, #1
 804387a:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 804387c:	f000 fea2 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(SoakTime_VirtAddr, (uint16_t) u16_SoakTime)) != HAL_OK)
 8043880:	8a3b      	ldrh	r3, [r7, #16]
 8043882:	4619      	mov	r1, r3
 8043884:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 8043888:	f7ff fd70 	bl	804336c <EE_WriteVariable>
 804388c:	4603      	mov	r3, r0
 804388e:	2b00      	cmp	r3, #0
 8043890:	d003      	beq.n	804389a <FEE_WriteCtrlParams+0x17e>
	{
		result = HAL_ERROR;
 8043892:	2301      	movs	r3, #1
 8043894:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8043896:	f000 fe95 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(SoakTempeture_VirtAddr, (uint16_t) u16_SoakTemperature)) != HAL_OK)
 804389a:	89fb      	ldrh	r3, [r7, #14]
 804389c:	4619      	mov	r1, r3
 804389e:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 80438a2:	f7ff fd63 	bl	804336c <EE_WriteVariable>
 80438a6:	4603      	mov	r3, r0
 80438a8:	2b00      	cmp	r3, #0
 80438aa:	d003      	beq.n	80438b4 <FEE_WriteCtrlParams+0x198>
	{
		result = HAL_ERROR;
 80438ac:	2301      	movs	r3, #1
 80438ae:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80438b0:	f000 fe88 	bl	80445c4 <Error_Handler>
	}
	if((EE_WriteVariable(ReflowTime_VirtAddr, (uint16_t) u16_ReflowTime)) != HAL_OK)
 80438b4:	89bb      	ldrh	r3, [r7, #12]
 80438b6:	4619      	mov	r1, r3
 80438b8:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 80438bc:	f7ff fd56 	bl	804336c <EE_WriteVariable>
 80438c0:	4603      	mov	r3, r0
 80438c2:	2b00      	cmp	r3, #0
 80438c4:	d003      	beq.n	80438ce <FEE_WriteCtrlParams+0x1b2>
	{
		result = HAL_ERROR;
 80438c6:	2301      	movs	r3, #1
 80438c8:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80438ca:	f000 fe7b 	bl	80445c4 <Error_Handler>
	}

	if((EE_WriteVariable(ReflowTempeture_VirtAddr, (uint16_t) u16_ReflowTemperature)) != HAL_OK)
 80438ce:	897b      	ldrh	r3, [r7, #10]
 80438d0:	4619      	mov	r1, r3
 80438d2:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 80438d6:	f7ff fd49 	bl	804336c <EE_WriteVariable>
 80438da:	4603      	mov	r3, r0
 80438dc:	2b00      	cmp	r3, #0
 80438de:	d003      	beq.n	80438e8 <FEE_WriteCtrlParams+0x1cc>
	{
		result = HAL_ERROR;
 80438e0:	2301      	movs	r3, #1
 80438e2:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 80438e4:	f000 fe6e 	bl	80445c4 <Error_Handler>
	}

	return result;
 80438e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80438ea:	4618      	mov	r0, r3
 80438ec:	3720      	adds	r7, #32
 80438ee:	46bd      	mov	sp, r7
 80438f0:	bd80      	pop	{r7, pc}
 80438f2:	bf00      	nop
 80438f4:	40590000 	.word	0x40590000

080438f8 <FEE_ReadCtrlParams>:

HAL_StatusTypeDef FEE_ReadCtrlParams(msTempControlParams* p_CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 80438f8:	b580      	push	{r7, lr}
 80438fa:	b08e      	sub	sp, #56	; 0x38
 80438fc:	af00      	add	r7, sp, #0
 80438fe:	6078      	str	r0, [r7, #4]
 8043900:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result = HAL_OK;
 8043902:	2300      	movs	r3, #0
 8043904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t *p_bank1Percentage =	(uint16_t*)&p_CtrlParams->ui8_bank1Percentage;
 8043908:	687b      	ldr	r3, [r7, #4]
 804390a:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t *p_bank2Percentage =	(uint16_t*)&p_CtrlParams->ui8_bank2Percentage;
 804390c:	687b      	ldr	r3, [r7, #4]
 804390e:	3301      	adds	r3, #1
 8043910:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t *p_KP = 				(uint16_t*)&p_ReflowParameters->KP;
 8043912:	683b      	ldr	r3, [r7, #0]
 8043914:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t *p_KI = 				(uint16_t*)&p_ReflowParameters->KI;
 8043916:	683b      	ldr	r3, [r7, #0]
 8043918:	3304      	adds	r3, #4
 804391a:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t *p_KD = 				(uint16_t*)&p_ReflowParameters->KD;
 804391c:	683b      	ldr	r3, [r7, #0]
 804391e:	3308      	adds	r3, #8
 8043920:	623b      	str	r3, [r7, #32]
	uint16_t *p_firstHeatUpRate =	(uint16_t*)&p_ReflowParameters->firstHeatUpRate;
 8043922:	683b      	ldr	r3, [r7, #0]
 8043924:	330c      	adds	r3, #12
 8043926:	61fb      	str	r3, [r7, #28]
	uint16_t *p_secondHeatUpRate =	(uint16_t*)&p_ReflowParameters->secondHeatUpRate;
 8043928:	683b      	ldr	r3, [r7, #0]
 804392a:	3318      	adds	r3, #24
 804392c:	61bb      	str	r3, [r7, #24]
	uint16_t *p_SoakTime = 			(uint16_t*)&p_ReflowParameters->SoakTime;
 804392e:	683b      	ldr	r3, [r7, #0]
 8043930:	3314      	adds	r3, #20
 8043932:	617b      	str	r3, [r7, #20]
	uint16_t *p_SoakTemperature = 	(uint16_t*)&p_ReflowParameters->SoakTempeture ;
 8043934:	683b      	ldr	r3, [r7, #0]
 8043936:	3310      	adds	r3, #16
 8043938:	613b      	str	r3, [r7, #16]
	uint16_t *p_ReflowTime = 		(uint16_t*)&p_ReflowParameters->ReflowTime;
 804393a:	683b      	ldr	r3, [r7, #0]
 804393c:	3320      	adds	r3, #32
 804393e:	60fb      	str	r3, [r7, #12]
	uint16_t *p_ReflowTemperature = (uint16_t*)&p_ReflowParameters->ReflowTempeture ;
 8043940:	683b      	ldr	r3, [r7, #0]
 8043942:	331c      	adds	r3, #28
 8043944:	60bb      	str	r3, [r7, #8]


	/*NULL PTR Check*/
	if( (NULL == p_bank1Percentage) || (NULL == p_bank2Percentage) || (NULL == p_KP) || (NULL == p_firstHeatUpRate) || (NULL == p_secondHeatUpRate) ||
 8043946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043948:	2b00      	cmp	r3, #0
 804394a:	d017      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 804394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804394e:	2b00      	cmp	r3, #0
 8043950:	d014      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 8043952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043954:	2b00      	cmp	r3, #0
 8043956:	d011      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 8043958:	69fb      	ldr	r3, [r7, #28]
 804395a:	2b00      	cmp	r3, #0
 804395c:	d00e      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 804395e:	69bb      	ldr	r3, [r7, #24]
 8043960:	2b00      	cmp	r3, #0
 8043962:	d00b      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 8043964:	697b      	ldr	r3, [r7, #20]
 8043966:	2b00      	cmp	r3, #0
 8043968:	d008      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
			 (NULL == p_SoakTime) ||  (NULL == p_SoakTemperature) || (NULL == p_ReflowTime) || (NULL == p_ReflowTemperature) )
 804396a:	693b      	ldr	r3, [r7, #16]
 804396c:	2b00      	cmp	r3, #0
 804396e:	d005      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 8043970:	68fb      	ldr	r3, [r7, #12]
 8043972:	2b00      	cmp	r3, #0
 8043974:	d002      	beq.n	804397c <FEE_ReadCtrlParams+0x84>
 8043976:	68bb      	ldr	r3, [r7, #8]
 8043978:	2b00      	cmp	r3, #0
 804397a:	d102      	bne.n	8043982 <FEE_ReadCtrlParams+0x8a>
	{
		result = HAL_ERROR;
 804397c:	2301      	movs	r3, #1
 804397e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{

	}


	 if((EE_ReadVariable(ui8_bank1Percentage_VirtAddr, p_bank1Percentage)) != HAL_OK)
 8043982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8043984:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 8043988:	f7ff fca8 	bl	80432dc <EE_ReadVariable>
 804398c:	4603      	mov	r3, r0
 804398e:	2b00      	cmp	r3, #0
 8043990:	d002      	beq.n	8043998 <FEE_ReadCtrlParams+0xa0>
	{
		result = HAL_ERROR;
 8043992:	2301      	movs	r3, #1
 8043994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();

	}

	if((EE_ReadVariable(ui8_bank2Percentage_VirtAddr, p_bank2Percentage)) != HAL_OK)
 8043998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804399a:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 804399e:	f7ff fc9d 	bl	80432dc <EE_ReadVariable>
 80439a2:	4603      	mov	r3, r0
 80439a4:	2b00      	cmp	r3, #0
 80439a6:	d002      	beq.n	80439ae <FEE_ReadCtrlParams+0xb6>
	{
		result = HAL_ERROR;
 80439a8:	2301      	movs	r3, #1
 80439aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(KP_VirtAddr,  p_KP)) != HAL_OK)
 80439ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80439b0:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 80439b4:	f7ff fc92 	bl	80432dc <EE_ReadVariable>
 80439b8:	4603      	mov	r3, r0
 80439ba:	2b00      	cmp	r3, #0
 80439bc:	d002      	beq.n	80439c4 <FEE_ReadCtrlParams+0xcc>
	{
		result = HAL_ERROR;
 80439be:	2301      	movs	r3, #1
 80439c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(KI_VirtAddr,  p_KI)) != HAL_OK)
 80439c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80439c6:	f64a 20a9 	movw	r0, #43689	; 0xaaa9
 80439ca:	f7ff fc87 	bl	80432dc <EE_ReadVariable>
 80439ce:	4603      	mov	r3, r0
 80439d0:	2b00      	cmp	r3, #0
 80439d2:	d002      	beq.n	80439da <FEE_ReadCtrlParams+0xe2>
	{
		result = HAL_ERROR;
 80439d4:	2301      	movs	r3, #1
 80439d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(KD_VirtAddr,  p_KD)) != HAL_OK)
 80439da:	6a39      	ldr	r1, [r7, #32]
 80439dc:	f64a 20aa 	movw	r0, #43690	; 0xaaaa
 80439e0:	f7ff fc7c 	bl	80432dc <EE_ReadVariable>
 80439e4:	4603      	mov	r3, r0
 80439e6:	2b00      	cmp	r3, #0
 80439e8:	d002      	beq.n	80439f0 <FEE_ReadCtrlParams+0xf8>
	{
		result = HAL_ERROR;
 80439ea:	2301      	movs	r3, #1
 80439ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(firstHeatUpRate_VirtAddr,  p_firstHeatUpRate)) != HAL_OK)
 80439f0:	69f9      	ldr	r1, [r7, #28]
 80439f2:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 80439f6:	f7ff fc71 	bl	80432dc <EE_ReadVariable>
 80439fa:	4603      	mov	r3, r0
 80439fc:	2b00      	cmp	r3, #0
 80439fe:	d002      	beq.n	8043a06 <FEE_ReadCtrlParams+0x10e>
	{
		result = HAL_ERROR;
 8043a00:	2301      	movs	r3, #1
 8043a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(secondHeatUpRate_VirtAddr,  p_secondHeatUpRate)) != HAL_OK)
 8043a06:	69b9      	ldr	r1, [r7, #24]
 8043a08:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 8043a0c:	f7ff fc66 	bl	80432dc <EE_ReadVariable>
 8043a10:	4603      	mov	r3, r0
 8043a12:	2b00      	cmp	r3, #0
 8043a14:	d002      	beq.n	8043a1c <FEE_ReadCtrlParams+0x124>
	{
		result = HAL_ERROR;
 8043a16:	2301      	movs	r3, #1
 8043a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(SoakTime_VirtAddr,  p_SoakTime)) != HAL_OK)
 8043a1c:	6979      	ldr	r1, [r7, #20]
 8043a1e:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 8043a22:	f7ff fc5b 	bl	80432dc <EE_ReadVariable>
 8043a26:	4603      	mov	r3, r0
 8043a28:	2b00      	cmp	r3, #0
 8043a2a:	d002      	beq.n	8043a32 <FEE_ReadCtrlParams+0x13a>
	{
		result = HAL_ERROR;
 8043a2c:	2301      	movs	r3, #1
 8043a2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(SoakTempeture_VirtAddr,  p_SoakTemperature)) != HAL_OK)
 8043a32:	6939      	ldr	r1, [r7, #16]
 8043a34:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 8043a38:	f7ff fc50 	bl	80432dc <EE_ReadVariable>
 8043a3c:	4603      	mov	r3, r0
 8043a3e:	2b00      	cmp	r3, #0
 8043a40:	d002      	beq.n	8043a48 <FEE_ReadCtrlParams+0x150>
	{
		result = HAL_ERROR;
 8043a42:	2301      	movs	r3, #1
 8043a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}
	if((EE_ReadVariable(ReflowTime_VirtAddr, p_ReflowTime )) != HAL_OK)
 8043a48:	68f9      	ldr	r1, [r7, #12]
 8043a4a:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 8043a4e:	f7ff fc45 	bl	80432dc <EE_ReadVariable>
 8043a52:	4603      	mov	r3, r0
 8043a54:	2b00      	cmp	r3, #0
 8043a56:	d002      	beq.n	8043a5e <FEE_ReadCtrlParams+0x166>
	{
		result = HAL_ERROR;
 8043a58:	2301      	movs	r3, #1
 8043a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if((EE_ReadVariable(ReflowTempeture_VirtAddr, p_ReflowTemperature)) != HAL_OK)
 8043a5e:	68b9      	ldr	r1, [r7, #8]
 8043a60:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 8043a64:	f7ff fc3a 	bl	80432dc <EE_ReadVariable>
 8043a68:	4603      	mov	r3, r0
 8043a6a:	2b00      	cmp	r3, #0
 8043a6c:	d002      	beq.n	8043a74 <FEE_ReadCtrlParams+0x17c>
	{
		result = HAL_ERROR;
 8043a6e:	2301      	movs	r3, #1
 8043a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//Error_Handler();
	}

	if(HAL_OK == result)
 8043a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8043a78:	2b00      	cmp	r3, #0
 8043a7a:	d15e      	bne.n	8043b3a <FEE_ReadCtrlParams+0x242>
	{
		p_CtrlParams->ui8_bank1Percentage = 		(uint8_t)*p_bank1Percentage;
 8043a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043a7e:	881b      	ldrh	r3, [r3, #0]
 8043a80:	b2da      	uxtb	r2, r3
 8043a82:	687b      	ldr	r3, [r7, #4]
 8043a84:	701a      	strb	r2, [r3, #0]
		p_CtrlParams->ui8_bank2Percentage = 		(uint8_t)*p_bank2Percentage;
 8043a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043a88:	881b      	ldrh	r3, [r3, #0]
 8043a8a:	b2da      	uxtb	r2, r3
 8043a8c:	687b      	ldr	r3, [r7, #4]
 8043a8e:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP = 				(float32_t)*p_KP;
 8043a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043a92:	881b      	ldrh	r3, [r3, #0]
 8043a94:	ee07 3a90 	vmov	s15, r3
 8043a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043a9c:	683b      	ldr	r3, [r7, #0]
 8043a9e:	edc3 7a00 	vstr	s15, [r3]
		p_ReflowParameters->KI = 				(float32_t)*p_KI;
 8043aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043aa4:	881b      	ldrh	r3, [r3, #0]
 8043aa6:	ee07 3a90 	vmov	s15, r3
 8043aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043aae:	683b      	ldr	r3, [r7, #0]
 8043ab0:	edc3 7a01 	vstr	s15, [r3, #4]
		p_ReflowParameters->KD = 				(float32_t)*p_KD;
 8043ab4:	6a3b      	ldr	r3, [r7, #32]
 8043ab6:	881b      	ldrh	r3, [r3, #0]
 8043ab8:	ee07 3a90 	vmov	s15, r3
 8043abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043ac0:	683b      	ldr	r3, [r7, #0]
 8043ac2:	edc3 7a02 	vstr	s15, [r3, #8]
		p_ReflowParameters->firstHeatUpRate = 	(float32_t) ( (*p_firstHeatUpRate) / 100.0);
 8043ac6:	69fb      	ldr	r3, [r7, #28]
 8043ac8:	881b      	ldrh	r3, [r3, #0]
 8043aca:	4618      	mov	r0, r3
 8043acc:	f7fc fd2a 	bl	8040524 <__aeabi_i2d>
 8043ad0:	f04f 0200 	mov.w	r2, #0
 8043ad4:	4b1c      	ldr	r3, [pc, #112]	; (8043b48 <FEE_ReadCtrlParams+0x250>)
 8043ad6:	f7fc feb9 	bl	804084c <__aeabi_ddiv>
 8043ada:	4602      	mov	r2, r0
 8043adc:	460b      	mov	r3, r1
 8043ade:	4610      	mov	r0, r2
 8043ae0:	4619      	mov	r1, r3
 8043ae2:	f7fd f881 	bl	8040be8 <__aeabi_d2f>
 8043ae6:	4602      	mov	r2, r0
 8043ae8:	683b      	ldr	r3, [r7, #0]
 8043aea:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate =	(float32_t) ( (*p_secondHeatUpRate) / 100.0);
 8043aec:	69bb      	ldr	r3, [r7, #24]
 8043aee:	881b      	ldrh	r3, [r3, #0]
 8043af0:	4618      	mov	r0, r3
 8043af2:	f7fc fd17 	bl	8040524 <__aeabi_i2d>
 8043af6:	f04f 0200 	mov.w	r2, #0
 8043afa:	4b13      	ldr	r3, [pc, #76]	; (8043b48 <FEE_ReadCtrlParams+0x250>)
 8043afc:	f7fc fea6 	bl	804084c <__aeabi_ddiv>
 8043b00:	4602      	mov	r2, r0
 8043b02:	460b      	mov	r3, r1
 8043b04:	4610      	mov	r0, r2
 8043b06:	4619      	mov	r1, r3
 8043b08:	f7fd f86e 	bl	8040be8 <__aeabi_d2f>
 8043b0c:	4602      	mov	r2, r0
 8043b0e:	683b      	ldr	r3, [r7, #0]
 8043b10:	619a      	str	r2, [r3, #24]
		p_ReflowParameters->SoakTime = 			(uint32_t)*p_SoakTime;
 8043b12:	697b      	ldr	r3, [r7, #20]
 8043b14:	881b      	ldrh	r3, [r3, #0]
 8043b16:	461a      	mov	r2, r3
 8043b18:	683b      	ldr	r3, [r7, #0]
 8043b1a:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->SoakTempeture = 	(uint32_t)*p_SoakTemperature;
 8043b1c:	693b      	ldr	r3, [r7, #16]
 8043b1e:	881b      	ldrh	r3, [r3, #0]
 8043b20:	461a      	mov	r2, r3
 8043b22:	683b      	ldr	r3, [r7, #0]
 8043b24:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->ReflowTime = 		(uint32_t)*p_ReflowTime;
 8043b26:	68fb      	ldr	r3, [r7, #12]
 8043b28:	881b      	ldrh	r3, [r3, #0]
 8043b2a:	461a      	mov	r2, r3
 8043b2c:	683b      	ldr	r3, [r7, #0]
 8043b2e:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->ReflowTempeture = 	(uint32_t)*p_ReflowTemperature;
 8043b30:	68bb      	ldr	r3, [r7, #8]
 8043b32:	881b      	ldrh	r3, [r3, #0]
 8043b34:	461a      	mov	r2, r3
 8043b36:	683b      	ldr	r3, [r7, #0]
 8043b38:	61da      	str	r2, [r3, #28]
	}

	return result;
 8043b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8043b3e:	4618      	mov	r0, r3
 8043b40:	3738      	adds	r7, #56	; 0x38
 8043b42:	46bd      	mov	sp, r7
 8043b44:	bd80      	pop	{r7, pc}
 8043b46:	bf00      	nop
 8043b48:	40590000 	.word	0x40590000

08043b4c <lcd_send_cmd>:
/* Defines ------------------------------------------------------------------*/
#define  SLAVE_ADDRESS_LCD 0x4EU 	///< I2C LCD address-change according to your I2C address

/* Functions ------------------------------------------------------------------*/
void lcd_send_cmd (char cmd)
{
 8043b4c:	b580      	push	{r7, lr}
 8043b4e:	b086      	sub	sp, #24
 8043b50:	af02      	add	r7, sp, #8
 8043b52:	4603      	mov	r3, r0
 8043b54:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8043b56:	79fb      	ldrb	r3, [r7, #7]
 8043b58:	f023 030f 	bic.w	r3, r3, #15
 8043b5c:	73fb      	strb	r3, [r7, #15]
	data_l = ( (cmd << 4) & 0xf0);
 8043b5e:	79fb      	ldrb	r3, [r7, #7]
 8043b60:	011b      	lsls	r3, r3, #4
 8043b62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8043b64:	7bfb      	ldrb	r3, [r7, #15]
 8043b66:	f043 030c 	orr.w	r3, r3, #12
 8043b6a:	b2db      	uxtb	r3, r3
 8043b6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8043b6e:	7bfb      	ldrb	r3, [r7, #15]
 8043b70:	f043 0308 	orr.w	r3, r3, #8
 8043b74:	b2db      	uxtb	r3, r3
 8043b76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8043b78:	7bbb      	ldrb	r3, [r7, #14]
 8043b7a:	f043 030c 	orr.w	r3, r3, #12
 8043b7e:	b2db      	uxtb	r3, r3
 8043b80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8043b82:	7bbb      	ldrb	r3, [r7, #14]
 8043b84:	f043 0308 	orr.w	r3, r3, #8
 8043b88:	b2db      	uxtb	r3, r3
 8043b8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043b8c:	f107 0208 	add.w	r2, r7, #8
 8043b90:	2364      	movs	r3, #100	; 0x64
 8043b92:	9300      	str	r3, [sp, #0]
 8043b94:	2304      	movs	r3, #4
 8043b96:	214e      	movs	r1, #78	; 0x4e
 8043b98:	4803      	ldr	r0, [pc, #12]	; (8043ba8 <lcd_send_cmd+0x5c>)
 8043b9a:	f002 f9d1 	bl	8045f40 <HAL_I2C_Master_Transmit>
}
 8043b9e:	bf00      	nop
 8043ba0:	3710      	adds	r7, #16
 8043ba2:	46bd      	mov	sp, r7
 8043ba4:	bd80      	pop	{r7, pc}
 8043ba6:	bf00      	nop
 8043ba8:	20000400 	.word	0x20000400

08043bac <lcd_send_data>:

void lcd_send_data (char data)
{
 8043bac:	b580      	push	{r7, lr}
 8043bae:	b086      	sub	sp, #24
 8043bb0:	af02      	add	r7, sp, #8
 8043bb2:	4603      	mov	r3, r0
 8043bb4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8043bb6:	79fb      	ldrb	r3, [r7, #7]
 8043bb8:	f023 030f 	bic.w	r3, r3, #15
 8043bbc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8043bbe:	79fb      	ldrb	r3, [r7, #7]
 8043bc0:	011b      	lsls	r3, r3, #4
 8043bc2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8043bc4:	7bfb      	ldrb	r3, [r7, #15]
 8043bc6:	f043 030d 	orr.w	r3, r3, #13
 8043bca:	b2db      	uxtb	r3, r3
 8043bcc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8043bce:	7bfb      	ldrb	r3, [r7, #15]
 8043bd0:	f043 0309 	orr.w	r3, r3, #9
 8043bd4:	b2db      	uxtb	r3, r3
 8043bd6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8043bd8:	7bbb      	ldrb	r3, [r7, #14]
 8043bda:	f043 030d 	orr.w	r3, r3, #13
 8043bde:	b2db      	uxtb	r3, r3
 8043be0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8043be2:	7bbb      	ldrb	r3, [r7, #14]
 8043be4:	f043 0309 	orr.w	r3, r3, #9
 8043be8:	b2db      	uxtb	r3, r3
 8043bea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043bec:	f107 0208 	add.w	r2, r7, #8
 8043bf0:	2364      	movs	r3, #100	; 0x64
 8043bf2:	9300      	str	r3, [sp, #0]
 8043bf4:	2304      	movs	r3, #4
 8043bf6:	214e      	movs	r1, #78	; 0x4e
 8043bf8:	4803      	ldr	r0, [pc, #12]	; (8043c08 <lcd_send_data+0x5c>)
 8043bfa:	f002 f9a1 	bl	8045f40 <HAL_I2C_Master_Transmit>
}
 8043bfe:	bf00      	nop
 8043c00:	3710      	adds	r7, #16
 8043c02:	46bd      	mov	sp, r7
 8043c04:	bd80      	pop	{r7, pc}
 8043c06:	bf00      	nop
 8043c08:	20000400 	.word	0x20000400

08043c0c <lcd_clear>:

void lcd_clear (void)
{
 8043c0c:	b580      	push	{r7, lr}
 8043c0e:	b082      	sub	sp, #8
 8043c10:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8043c12:	2080      	movs	r0, #128	; 0x80
 8043c14:	f7ff ff9a 	bl	8043b4c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8043c18:	2300      	movs	r3, #0
 8043c1a:	607b      	str	r3, [r7, #4]
 8043c1c:	e005      	b.n	8043c2a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8043c1e:	2020      	movs	r0, #32
 8043c20:	f7ff ffc4 	bl	8043bac <lcd_send_data>
	for (int i=0; i<70; i++)
 8043c24:	687b      	ldr	r3, [r7, #4]
 8043c26:	3301      	adds	r3, #1
 8043c28:	607b      	str	r3, [r7, #4]
 8043c2a:	687b      	ldr	r3, [r7, #4]
 8043c2c:	2b45      	cmp	r3, #69	; 0x45
 8043c2e:	ddf6      	ble.n	8043c1e <lcd_clear+0x12>
	}
}
 8043c30:	bf00      	nop
 8043c32:	bf00      	nop
 8043c34:	3708      	adds	r7, #8
 8043c36:	46bd      	mov	sp, r7
 8043c38:	bd80      	pop	{r7, pc}

08043c3a <lcd_clear_cmd>:

void lcd_clear_cmd(void)
{
 8043c3a:	b580      	push	{r7, lr}
 8043c3c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x0);
 8043c3e:	2000      	movs	r0, #0
 8043c40:	f7ff ff84 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(1);
 8043c44:	2001      	movs	r0, #1
 8043c46:	f001 f8d7 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x1);
 8043c4a:	2001      	movs	r0, #1
 8043c4c:	f7ff ff7e 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(1);
 8043c50:	2001      	movs	r0, #1
 8043c52:	f001 f8d1 	bl	8044df8 <HAL_Delay>
}
 8043c56:	bf00      	nop
 8043c58:	bd80      	pop	{r7, pc}

08043c5a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8043c5a:	b580      	push	{r7, lr}
 8043c5c:	b082      	sub	sp, #8
 8043c5e:	af00      	add	r7, sp, #0
 8043c60:	6078      	str	r0, [r7, #4]
 8043c62:	6039      	str	r1, [r7, #0]
    switch (row)
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	2b00      	cmp	r3, #0
 8043c68:	d003      	beq.n	8043c72 <lcd_put_cur+0x18>
 8043c6a:	687b      	ldr	r3, [r7, #4]
 8043c6c:	2b01      	cmp	r3, #1
 8043c6e:	d005      	beq.n	8043c7c <lcd_put_cur+0x22>
 8043c70:	e009      	b.n	8043c86 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8043c72:	683b      	ldr	r3, [r7, #0]
 8043c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043c78:	603b      	str	r3, [r7, #0]
            break;
 8043c7a:	e004      	b.n	8043c86 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8043c7c:	683b      	ldr	r3, [r7, #0]
 8043c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8043c82:	603b      	str	r3, [r7, #0]
            break;
 8043c84:	bf00      	nop
    }

    lcd_send_cmd (col);
 8043c86:	683b      	ldr	r3, [r7, #0]
 8043c88:	b2db      	uxtb	r3, r3
 8043c8a:	4618      	mov	r0, r3
 8043c8c:	f7ff ff5e 	bl	8043b4c <lcd_send_cmd>
}
 8043c90:	bf00      	nop
 8043c92:	3708      	adds	r7, #8
 8043c94:	46bd      	mov	sp, r7
 8043c96:	bd80      	pop	{r7, pc}

08043c98 <lcd_init>:
}



void lcd_init (void)
{
 8043c98:	b580      	push	{r7, lr}
 8043c9a:	b082      	sub	sp, #8
 8043c9c:	af02      	add	r7, sp, #8
	lcd_send_cmd(LCD_TURN_OFF);
 8043c9e:	2008      	movs	r0, #8
 8043ca0:	f7ff ff54 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(50);  // wait for >40ms
 8043ca4:	2032      	movs	r0, #50	; 0x32
 8043ca6:	f001 f8a7 	bl	8044df8 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, 0x00,1, 500);
 8043caa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8043cae:	9300      	str	r3, [sp, #0]
 8043cb0:	2301      	movs	r3, #1
 8043cb2:	2200      	movs	r2, #0
 8043cb4:	214e      	movs	r1, #78	; 0x4e
 8043cb6:	481e      	ldr	r0, [pc, #120]	; (8043d30 <lcd_init+0x98>)
 8043cb8:	f002 f942 	bl	8045f40 <HAL_I2C_Master_Transmit>

	// 4 bit initialisation again x2
	HAL_Delay(50);  // wait for >40ms
 8043cbc:	2032      	movs	r0, #50	; 0x32
 8043cbe:	f001 f89b 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043cc2:	2030      	movs	r0, #48	; 0x30
 8043cc4:	f7ff ff42 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(50);  // wait for >4.1ms
 8043cc8:	2032      	movs	r0, #50	; 0x32
 8043cca:	f001 f895 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043cce:	2030      	movs	r0, #48	; 0x30
 8043cd0:	f7ff ff3c 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(10);  // wait for >100us
 8043cd4:	200a      	movs	r0, #10
 8043cd6:	f001 f88f 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043cda:	2030      	movs	r0, #48	; 0x30
 8043cdc:	f7ff ff36 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(50);
 8043ce0:	2032      	movs	r0, #50	; 0x32
 8043ce2:	f001 f889 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8043ce6:	2020      	movs	r0, #32
 8043ce8:	f7ff ff30 	bl	8043b4c <lcd_send_cmd>
	// dislay initialisation
	HAL_Delay(500);
 8043cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8043cf0:	f001 f882 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8043cf4:	2028      	movs	r0, #40	; 0x28
 8043cf6:	f7ff ff29 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(50);
 8043cfa:	2032      	movs	r0, #50	; 0x32
 8043cfc:	f001 f87c 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8043d00:	2008      	movs	r0, #8
 8043d02:	f7ff ff23 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(50);
 8043d06:	2032      	movs	r0, #50	; 0x32
 8043d08:	f001 f876 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8043d0c:	2001      	movs	r0, #1
 8043d0e:	f7ff ff1d 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(2);
 8043d12:	2002      	movs	r0, #2
 8043d14:	f001 f870 	bl	8044df8 <HAL_Delay>
	//HAL_Delay(50);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8043d18:	2006      	movs	r0, #6
 8043d1a:	f7ff ff17 	bl	8043b4c <lcd_send_cmd>
	HAL_Delay(2);
 8043d1e:	2002      	movs	r0, #2
 8043d20:	f001 f86a 	bl	8044df8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8043d24:	200c      	movs	r0, #12
 8043d26:	f7ff ff11 	bl	8043b4c <lcd_send_cmd>
}
 8043d2a:	bf00      	nop
 8043d2c:	46bd      	mov	sp, r7
 8043d2e:	bd80      	pop	{r7, pc}
 8043d30:	20000400 	.word	0x20000400

08043d34 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8043d34:	b580      	push	{r7, lr}
 8043d36:	b082      	sub	sp, #8
 8043d38:	af00      	add	r7, sp, #0
 8043d3a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8043d3c:	e006      	b.n	8043d4c <lcd_send_string+0x18>
 8043d3e:	687b      	ldr	r3, [r7, #4]
 8043d40:	1c5a      	adds	r2, r3, #1
 8043d42:	607a      	str	r2, [r7, #4]
 8043d44:	781b      	ldrb	r3, [r3, #0]
 8043d46:	4618      	mov	r0, r3
 8043d48:	f7ff ff30 	bl	8043bac <lcd_send_data>
 8043d4c:	687b      	ldr	r3, [r7, #4]
 8043d4e:	781b      	ldrb	r3, [r3, #0]
 8043d50:	2b00      	cmp	r3, #0
 8043d52:	d1f4      	bne.n	8043d3e <lcd_send_string+0xa>
}
 8043d54:	bf00      	nop
 8043d56:	bf00      	nop
 8043d58:	3708      	adds	r7, #8
 8043d5a:	46bd      	mov	sp, r7
 8043d5c:	bd80      	pop	{r7, pc}
	...

08043d60 <__NVIC_SystemReset>:
{
 8043d60:	b480      	push	{r7}
 8043d62:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8043d64:	f3bf 8f4f 	dsb	sy
}
 8043d68:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8043d6a:	4b06      	ldr	r3, [pc, #24]	; (8043d84 <__NVIC_SystemReset+0x24>)
 8043d6c:	68db      	ldr	r3, [r3, #12]
 8043d6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8043d72:	4904      	ldr	r1, [pc, #16]	; (8043d84 <__NVIC_SystemReset+0x24>)
 8043d74:	4b04      	ldr	r3, [pc, #16]	; (8043d88 <__NVIC_SystemReset+0x28>)
 8043d76:	4313      	orrs	r3, r2
 8043d78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8043d7a:	f3bf 8f4f 	dsb	sy
}
 8043d7e:	bf00      	nop
    __NOP();
 8043d80:	bf00      	nop
 8043d82:	e7fd      	b.n	8043d80 <__NVIC_SystemReset+0x20>
 8043d84:	e000ed00 	.word	0xe000ed00
 8043d88:	05fa0004 	.word	0x05fa0004

08043d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8043d8c:	b580      	push	{r7, lr}
 8043d8e:	f5ad 4dea 	sub.w	sp, sp, #29952	; 0x7500
 8043d92:	b08e      	sub	sp, #56	; 0x38
 8043d94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8043d96:	f000 ff89 	bl	8044cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8043d9a:	f000 f91b 	bl	8043fd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_I2C_DeInit(&hi2c1);
 8043d9e:	487d      	ldr	r0, [pc, #500]	; (8043f94 <main+0x208>)
 8043da0:	f002 f89e 	bl	8045ee0 <HAL_I2C_DeInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8043da4:	f000 fb40 	bl	8044428 <MX_GPIO_Init>
  MX_I2C1_Init();
 8043da8:	f000 f97e 	bl	80440a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8043dac:	f000 f9e0 	bl	8044170 <MX_TIM1_Init>
  MX_SPI1_Init();
 8043db0:	f000 f9a8 	bl	8044104 <MX_SPI1_Init>
  MX_TIM2_Init();
 8043db4:	f000 fa34 	bl	8044220 <MX_TIM2_Init>
  MX_TIM3_Init();
 8043db8:	f000 fa7e 	bl	80442b8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8043dbc:	f000 fafe 	bl	80443bc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //TODO add Ki and KD as parameters for entering, and add them in FEE.
  ReflowParameters.KD = 0.3;
 8043dc0:	4b75      	ldr	r3, [pc, #468]	; (8043f98 <main+0x20c>)
 8043dc2:	4a76      	ldr	r2, [pc, #472]	; (8043f9c <main+0x210>)
 8043dc4:	609a      	str	r2, [r3, #8]
  ReflowParameters.KP = 200; //125
 8043dc6:	4b74      	ldr	r3, [pc, #464]	; (8043f98 <main+0x20c>)
 8043dc8:	4a75      	ldr	r2, [pc, #468]	; (8043fa0 <main+0x214>)
 8043dca:	601a      	str	r2, [r3, #0]
  ReflowParameters.KI = 1.1;
 8043dcc:	4b72      	ldr	r3, [pc, #456]	; (8043f98 <main+0x20c>)
 8043dce:	4a75      	ldr	r2, [pc, #468]	; (8043fa4 <main+0x218>)
 8043dd0:	605a      	str	r2, [r3, #4]
  ReflowParameters.ReflowTempeture = 250;
 8043dd2:	4b71      	ldr	r3, [pc, #452]	; (8043f98 <main+0x20c>)
 8043dd4:	22fa      	movs	r2, #250	; 0xfa
 8043dd6:	61da      	str	r2, [r3, #28]
  ReflowParameters.ReflowTime = 100;
 8043dd8:	4b6f      	ldr	r3, [pc, #444]	; (8043f98 <main+0x20c>)
 8043dda:	2264      	movs	r2, #100	; 0x64
 8043ddc:	621a      	str	r2, [r3, #32]
  ReflowParameters.SoakTempeture = 100;
 8043dde:	4b6e      	ldr	r3, [pc, #440]	; (8043f98 <main+0x20c>)
 8043de0:	2264      	movs	r2, #100	; 0x64
 8043de2:	611a      	str	r2, [r3, #16]
  ReflowParameters.SoakTime = 100;
 8043de4:	4b6c      	ldr	r3, [pc, #432]	; (8043f98 <main+0x20c>)
 8043de6:	2264      	movs	r2, #100	; 0x64
 8043de8:	615a      	str	r2, [r3, #20]
  ReflowParameters.firstHeatUpRate = 2;
 8043dea:	4b6b      	ldr	r3, [pc, #428]	; (8043f98 <main+0x20c>)
 8043dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043df0:	60da      	str	r2, [r3, #12]
  ReflowParameters.secondHeatUpRate = 2;
 8043df2:	4b69      	ldr	r3, [pc, #420]	; (8043f98 <main+0x20c>)
 8043df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043df8:	619a      	str	r2, [r3, #24]
  PID.Kp = ReflowParameters.KP;
 8043dfa:	4b67      	ldr	r3, [pc, #412]	; (8043f98 <main+0x20c>)
 8043dfc:	681b      	ldr	r3, [r3, #0]
 8043dfe:	4a6a      	ldr	r2, [pc, #424]	; (8043fa8 <main+0x21c>)
 8043e00:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.KI;
 8043e02:	4b65      	ldr	r3, [pc, #404]	; (8043f98 <main+0x20c>)
 8043e04:	685b      	ldr	r3, [r3, #4]
 8043e06:	4a68      	ldr	r2, [pc, #416]	; (8043fa8 <main+0x21c>)
 8043e08:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 8043e0a:	4b63      	ldr	r3, [pc, #396]	; (8043f98 <main+0x20c>)
 8043e0c:	689b      	ldr	r3, [r3, #8]
 8043e0e:	4a66      	ldr	r2, [pc, #408]	; (8043fa8 <main+0x21c>)
 8043e10:	6213      	str	r3, [r2, #32]
  for(int i = 0;i < 5; i++)
 8043e12:	2300      	movs	r3, #0
 8043e14:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8043e18:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8043e1c:	6013      	str	r3, [r2, #0]
 8043e1e:	e013      	b.n	8043e48 <main+0xbc>
{
	PhaseIndex_main[i] = 0;
 8043e20:	4a62      	ldr	r2, [pc, #392]	; (8043fac <main+0x220>)
 8043e22:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043e26:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043e2a:	681b      	ldr	r3, [r3, #0]
 8043e2c:	2100      	movs	r1, #0
 8043e2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0;i < 5; i++)
 8043e32:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043e36:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043e3a:	681b      	ldr	r3, [r3, #0]
 8043e3c:	3301      	adds	r3, #1
 8043e3e:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8043e42:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8043e46:	6013      	str	r3, [r2, #0]
 8043e48:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8043e4c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8043e50:	681b      	ldr	r3, [r3, #0]
 8043e52:	2b04      	cmp	r3, #4
 8043e54:	dde4      	ble.n	8043e20 <main+0x94>
}

  uint16_t u_ReflowCurve_main[REFLOW_CURVE_SIZE] = {0};
 8043e56:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8043e5a:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8043e5e:	4618      	mov	r0, r3
 8043e60:	f247 5330 	movw	r3, #30000	; 0x7530
 8043e64:	461a      	mov	r2, r3
 8043e66:	2100      	movs	r1, #0
 8043e68:	f004 feaa 	bl	8048bc0 <memset>
  p_ReflowParameters = &ReflowParameters;
 8043e6c:	4b50      	ldr	r3, [pc, #320]	; (8043fb0 <main+0x224>)
 8043e6e:	4a4a      	ldr	r2, [pc, #296]	; (8043f98 <main+0x20c>)
 8043e70:	601a      	str	r2, [r3, #0]
  p_ReflowCurve = u_ReflowCurve_main;
 8043e72:	4a50      	ldr	r2, [pc, #320]	; (8043fb4 <main+0x228>)
 8043e74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8043e78:	3b34      	subs	r3, #52	; 0x34
 8043e7a:	6013      	str	r3, [r2, #0]
  p_PhaseIndex = PhaseIndex_main;
 8043e7c:	4b4e      	ldr	r3, [pc, #312]	; (8043fb8 <main+0x22c>)
 8043e7e:	4a4b      	ldr	r2, [pc, #300]	; (8043fac <main+0x220>)
 8043e80:	601a      	str	r2, [r3, #0]



 // address=find_I2C_deviceAddress();
 // HAL_Delay(2000);
  ResetFlags();
 8043e82:	f7fd ffe7 	bl	8041e54 <ResetFlags>
  //init_I2C_expander();
  //HAL_Delay(500);
  //lcd_clear_cmd();
  HAL_I2C_DeInit(&hi2c1);
 8043e86:	4843      	ldr	r0, [pc, #268]	; (8043f94 <main+0x208>)
 8043e88:	f002 f82a 	bl	8045ee0 <HAL_I2C_DeInit>
  HAL_Delay(1000);
 8043e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8043e90:	f000 ffb2 	bl	8044df8 <HAL_Delay>
  HAL_I2C_Init(&hi2c1);
 8043e94:	483f      	ldr	r0, [pc, #252]	; (8043f94 <main+0x208>)
 8043e96:	f001 fedf 	bl	8045c58 <HAL_I2C_Init>
  HAL_Delay(1000);
 8043e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8043e9e:	f000 ffab 	bl	8044df8 <HAL_Delay>
 // lcd_init_2();
   lcd_init();
 8043ea2:	f7ff fef9 	bl	8043c98 <lcd_init>
  HAL_Delay(20);
 8043ea6:	2014      	movs	r0, #20
 8043ea8:	f000 ffa6 	bl	8044df8 <HAL_Delay>
  lcd_clear();
 8043eac:	f7ff feae 	bl	8043c0c <lcd_clear>
  HAL_Delay(100);
 8043eb0:	2064      	movs	r0, #100	; 0x64
 8043eb2:	f000 ffa1 	bl	8044df8 <HAL_Delay>
  lcd_put_cur(0, 0);
 8043eb6:	2100      	movs	r1, #0
 8043eb8:	2000      	movs	r0, #0
 8043eba:	f7ff fece 	bl	8043c5a <lcd_put_cur>
  lcd_send_string("Yakamooda");
 8043ebe:	483f      	ldr	r0, [pc, #252]	; (8043fbc <main+0x230>)
 8043ec0:	f7ff ff38 	bl	8043d34 <lcd_send_string>
  lcd_put_cur(1, 0);
 8043ec4:	2100      	movs	r1, #0
 8043ec6:	2001      	movs	r0, #1
 8043ec8:	f7ff fec7 	bl	8043c5a <lcd_put_cur>
  lcd_send_string("Electronics GmBH");
 8043ecc:	483c      	ldr	r0, [pc, #240]	; (8043fc0 <main+0x234>)
 8043ece:	f7ff ff31 	bl	8043d34 <lcd_send_string>
  HAL_Delay(5000);
 8043ed2:	f241 3088 	movw	r0, #5000	; 0x1388
 8043ed6:	f000 ff8f 	bl	8044df8 <HAL_Delay>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8043eda:	213c      	movs	r1, #60	; 0x3c
 8043edc:	4839      	ldr	r0, [pc, #228]	; (8043fc4 <main+0x238>)
 8043ede:	f003 ff1f 	bl	8047d20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8043ee2:	4839      	ldr	r0, [pc, #228]	; (8043fc8 <main+0x23c>)
 8043ee4:	f003 fc74 	bl	80477d0 <HAL_TIM_Base_Start_IT>

  HAL_Delay(500);
 8043ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8043eec:	f000 ff84 	bl	8044df8 <HAL_Delay>

  /*GUI for data entry*/
  HandleGui();
 8043ef0:	f7fd fc40 	bl	8041774 <HandleGui>

  if(FALSE ==  StateFlag.StartFlag)
 8043ef4:	4b35      	ldr	r3, [pc, #212]	; (8043fcc <main+0x240>)
 8043ef6:	781b      	ldrb	r3, [r3, #0]
 8043ef8:	f083 0301 	eor.w	r3, r3, #1
 8043efc:	b2db      	uxtb	r3, r3
 8043efe:	2b00      	cmp	r3, #0
 8043f00:	d00f      	beq.n	8043f22 <main+0x196>
  {
	  calculateReflowCurve(p_ReflowParameters, p_ReflowCurve, p_PhaseIndex);
 8043f02:	4b2b      	ldr	r3, [pc, #172]	; (8043fb0 <main+0x224>)
 8043f04:	681b      	ldr	r3, [r3, #0]
 8043f06:	4a2b      	ldr	r2, [pc, #172]	; (8043fb4 <main+0x228>)
 8043f08:	6811      	ldr	r1, [r2, #0]
 8043f0a:	4a2b      	ldr	r2, [pc, #172]	; (8043fb8 <main+0x22c>)
 8043f0c:	6812      	ldr	r2, [r2, #0]
 8043f0e:	4618      	mov	r0, r3
 8043f10:	f7fd f95e 	bl	80411d0 <calculateReflowCurve>
	  arm_pid_init_f32(&PID, 1);
 8043f14:	2101      	movs	r1, #1
 8043f16:	4824      	ldr	r0, [pc, #144]	; (8043fa8 <main+0x21c>)
 8043f18:	f004 fdf4 	bl	8048b04 <arm_pid_init_f32>
	  /*set Reflow Start Flag */

	  StateFlag.StartFlag = TRUE;
 8043f1c:	4b2b      	ldr	r3, [pc, #172]	; (8043fcc <main+0x240>)
 8043f1e:	2201      	movs	r2, #1
 8043f20:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (10 <= CtrlParams.counter_10ms)
 8043f22:	4b2b      	ldr	r3, [pc, #172]	; (8043fd0 <main+0x244>)
 8043f24:	689b      	ldr	r3, [r3, #8]
 8043f26:	2b09      	cmp	r3, #9
 8043f28:	d902      	bls.n	8043f30 <main+0x1a4>
	  {
		  CtrlParams.counter_10ms = 0;
 8043f2a:	4b29      	ldr	r3, [pc, #164]	; (8043fd0 <main+0x244>)
 8043f2c:	2200      	movs	r2, #0
 8043f2e:	609a      	str	r2, [r3, #8]
		 // msTempControlHandler(&CtrlParams, p_ReflowCurve, p_ReflowParameters);

	  }
	  if(250 <= CtrlParams.counter_250ms)
 8043f30:	4b27      	ldr	r3, [pc, #156]	; (8043fd0 <main+0x244>)
 8043f32:	691b      	ldr	r3, [r3, #16]
 8043f34:	2bf9      	cmp	r3, #249	; 0xf9
 8043f36:	d90f      	bls.n	8043f58 <main+0x1cc>
	  {
		  CtrlParams.counter_250ms = 0;
 8043f38:	4b25      	ldr	r3, [pc, #148]	; (8043fd0 <main+0x244>)
 8043f3a:	2200      	movs	r2, #0
 8043f3c:	611a      	str	r2, [r3, #16]
		  getTemperatureData(CtrlParams.p_temperature);
 8043f3e:	4b24      	ldr	r3, [pc, #144]	; (8043fd0 <main+0x244>)
 8043f40:	69db      	ldr	r3, [r3, #28]
 8043f42:	4618      	mov	r0, r3
 8043f44:	f7fd fcc2 	bl	80418cc <getTemperatureData>
		  msTempControlHandler(&CtrlParams, p_ReflowCurve, p_ReflowParameters);
 8043f48:	4b1a      	ldr	r3, [pc, #104]	; (8043fb4 <main+0x228>)
 8043f4a:	681b      	ldr	r3, [r3, #0]
 8043f4c:	4a18      	ldr	r2, [pc, #96]	; (8043fb0 <main+0x224>)
 8043f4e:	6812      	ldr	r2, [r2, #0]
 8043f50:	4619      	mov	r1, r3
 8043f52:	481f      	ldr	r0, [pc, #124]	; (8043fd0 <main+0x244>)
 8043f54:	f7fd fcc6 	bl	80418e4 <msTempControlHandler>
	  }
	  if(500 <= CtrlParams.counter_500ms)
 8043f58:	4b1d      	ldr	r3, [pc, #116]	; (8043fd0 <main+0x244>)
 8043f5a:	699b      	ldr	r3, [r3, #24]
 8043f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8043f60:	d3df      	bcc.n	8043f22 <main+0x196>
	  {
		  CtrlParams.counter_500ms = 0;
 8043f62:	4b1b      	ldr	r3, [pc, #108]	; (8043fd0 <main+0x244>)
 8043f64:	2200      	movs	r2, #0
 8043f66:	619a      	str	r2, [r3, #24]
		  CtrlParams.u16_ReflowIndexCurrent++;
 8043f68:	4b19      	ldr	r3, [pc, #100]	; (8043fd0 <main+0x244>)
 8043f6a:	885b      	ldrh	r3, [r3, #2]
 8043f6c:	3301      	adds	r3, #1
 8043f6e:	b29a      	uxth	r2, r3
 8043f70:	4b17      	ldr	r3, [pc, #92]	; (8043fd0 <main+0x244>)
 8043f72:	805a      	strh	r2, [r3, #2]
		  // HAL_Delay(1);

		  updateGuiVal(&CtrlParams, p_ReflowParameters, p_PhaseIndex);
 8043f74:	4b0e      	ldr	r3, [pc, #56]	; (8043fb0 <main+0x224>)
 8043f76:	681b      	ldr	r3, [r3, #0]
 8043f78:	4a0f      	ldr	r2, [pc, #60]	; (8043fb8 <main+0x22c>)
 8043f7a:	6812      	ldr	r2, [r2, #0]
 8043f7c:	4619      	mov	r1, r3
 8043f7e:	4814      	ldr	r0, [pc, #80]	; (8043fd0 <main+0x244>)
 8043f80:	f7fd fe9a 	bl	8041cb8 <updateGuiVal>

		  if( TRUE == (CtrlParams.p_StatusFlags->cooldownComplete) )
 8043f84:	4b12      	ldr	r3, [pc, #72]	; (8043fd0 <main+0x244>)
 8043f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043f88:	799b      	ldrb	r3, [r3, #6]
 8043f8a:	2b00      	cmp	r3, #0
 8043f8c:	d0c9      	beq.n	8043f22 <main+0x196>
		  {
			  ReflowAgain();
 8043f8e:	f7fd ff7f 	bl	8041e90 <ReflowAgain>
	  if (10 <= CtrlParams.counter_10ms)
 8043f92:	e7c6      	b.n	8043f22 <main+0x196>
 8043f94:	20000400 	.word	0x20000400
 8043f98:	20000458 	.word	0x20000458
 8043f9c:	3e99999a 	.word	0x3e99999a
 8043fa0:	43480000 	.word	0x43480000
 8043fa4:	3f8ccccd 	.word	0x3f8ccccd
 8043fa8:	2000024c 	.word	0x2000024c
 8043fac:	20000218 	.word	0x20000218
 8043fb0:	200003fc 	.word	0x200003fc
 8043fb4:	200003f8 	.word	0x200003f8
 8043fb8:	20000454 	.word	0x20000454
 8043fbc:	0804e4e0 	.word	0x0804e4e0
 8043fc0:	0804e4ec 	.word	0x0804e4ec
 8043fc4:	20000304 	.word	0x20000304
 8043fc8:	200003ac 	.word	0x200003ac
 8043fcc:	20000244 	.word	0x20000244
 8043fd0:	200004c4 	.word	0x200004c4

08043fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8043fd4:	b580      	push	{r7, lr}
 8043fd6:	b094      	sub	sp, #80	; 0x50
 8043fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8043fda:	f107 0320 	add.w	r3, r7, #32
 8043fde:	2230      	movs	r2, #48	; 0x30
 8043fe0:	2100      	movs	r1, #0
 8043fe2:	4618      	mov	r0, r3
 8043fe4:	f004 fdec 	bl	8048bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8043fe8:	f107 030c 	add.w	r3, r7, #12
 8043fec:	2200      	movs	r2, #0
 8043fee:	601a      	str	r2, [r3, #0]
 8043ff0:	605a      	str	r2, [r3, #4]
 8043ff2:	609a      	str	r2, [r3, #8]
 8043ff4:	60da      	str	r2, [r3, #12]
 8043ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8043ff8:	2300      	movs	r3, #0
 8043ffa:	60bb      	str	r3, [r7, #8]
 8043ffc:	4b28      	ldr	r3, [pc, #160]	; (80440a0 <SystemClock_Config+0xcc>)
 8043ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044000:	4a27      	ldr	r2, [pc, #156]	; (80440a0 <SystemClock_Config+0xcc>)
 8044002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044006:	6413      	str	r3, [r2, #64]	; 0x40
 8044008:	4b25      	ldr	r3, [pc, #148]	; (80440a0 <SystemClock_Config+0xcc>)
 804400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804400c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044010:	60bb      	str	r3, [r7, #8]
 8044012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8044014:	2300      	movs	r3, #0
 8044016:	607b      	str	r3, [r7, #4]
 8044018:	4b22      	ldr	r3, [pc, #136]	; (80440a4 <SystemClock_Config+0xd0>)
 804401a:	681b      	ldr	r3, [r3, #0]
 804401c:	4a21      	ldr	r2, [pc, #132]	; (80440a4 <SystemClock_Config+0xd0>)
 804401e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8044022:	6013      	str	r3, [r2, #0]
 8044024:	4b1f      	ldr	r3, [pc, #124]	; (80440a4 <SystemClock_Config+0xd0>)
 8044026:	681b      	ldr	r3, [r3, #0]
 8044028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804402c:	607b      	str	r3, [r7, #4]
 804402e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8044030:	2301      	movs	r3, #1
 8044032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8044034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8044038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804403a:	2302      	movs	r3, #2
 804403c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804403e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8044042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8044044:	2304      	movs	r3, #4
 8044046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8044048:	233c      	movs	r3, #60	; 0x3c
 804404a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804404c:	2302      	movs	r3, #2
 804404e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8044050:	2307      	movs	r3, #7
 8044052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8044054:	f107 0320 	add.w	r3, r7, #32
 8044058:	4618      	mov	r0, r3
 804405a:	f002 fa79 	bl	8046550 <HAL_RCC_OscConfig>
 804405e:	4603      	mov	r3, r0
 8044060:	2b00      	cmp	r3, #0
 8044062:	d001      	beq.n	8044068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8044064:	f000 faae 	bl	80445c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8044068:	230f      	movs	r3, #15
 804406a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804406c:	2302      	movs	r3, #2
 804406e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8044070:	2300      	movs	r3, #0
 8044072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8044074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8044078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 804407a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804407e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8044080:	f107 030c 	add.w	r3, r7, #12
 8044084:	2101      	movs	r1, #1
 8044086:	4618      	mov	r0, r3
 8044088:	f002 fcda 	bl	8046a40 <HAL_RCC_ClockConfig>
 804408c:	4603      	mov	r3, r0
 804408e:	2b00      	cmp	r3, #0
 8044090:	d001      	beq.n	8044096 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8044092:	f000 fa97 	bl	80445c4 <Error_Handler>
  }
}
 8044096:	bf00      	nop
 8044098:	3750      	adds	r7, #80	; 0x50
 804409a:	46bd      	mov	sp, r7
 804409c:	bd80      	pop	{r7, pc}
 804409e:	bf00      	nop
 80440a0:	40023800 	.word	0x40023800
 80440a4:	40007000 	.word	0x40007000

080440a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80440a8:	b580      	push	{r7, lr}
 80440aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80440ac:	4b12      	ldr	r3, [pc, #72]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440ae:	4a13      	ldr	r2, [pc, #76]	; (80440fc <MX_I2C1_Init+0x54>)
 80440b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80440b2:	4b11      	ldr	r3, [pc, #68]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440b4:	4a12      	ldr	r2, [pc, #72]	; (8044100 <MX_I2C1_Init+0x58>)
 80440b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80440b8:	4b0f      	ldr	r3, [pc, #60]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440ba:	2200      	movs	r2, #0
 80440bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80440be:	4b0e      	ldr	r3, [pc, #56]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440c0:	2200      	movs	r2, #0
 80440c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80440c4:	4b0c      	ldr	r3, [pc, #48]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80440ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80440cc:	4b0a      	ldr	r3, [pc, #40]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440ce:	2200      	movs	r2, #0
 80440d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80440d2:	4b09      	ldr	r3, [pc, #36]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440d4:	2200      	movs	r2, #0
 80440d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80440d8:	4b07      	ldr	r3, [pc, #28]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440da:	2200      	movs	r2, #0
 80440dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80440de:	4b06      	ldr	r3, [pc, #24]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440e0:	2200      	movs	r2, #0
 80440e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80440e4:	4804      	ldr	r0, [pc, #16]	; (80440f8 <MX_I2C1_Init+0x50>)
 80440e6:	f001 fdb7 	bl	8045c58 <HAL_I2C_Init>
 80440ea:	4603      	mov	r3, r0
 80440ec:	2b00      	cmp	r3, #0
 80440ee:	d001      	beq.n	80440f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80440f0:	f000 fa68 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80440f4:	bf00      	nop
 80440f6:	bd80      	pop	{r7, pc}
 80440f8:	20000400 	.word	0x20000400
 80440fc:	40005400 	.word	0x40005400
 8044100:	000186a0 	.word	0x000186a0

08044104 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8044104:	b580      	push	{r7, lr}
 8044106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8044108:	4b17      	ldr	r3, [pc, #92]	; (8044168 <MX_SPI1_Init+0x64>)
 804410a:	4a18      	ldr	r2, [pc, #96]	; (804416c <MX_SPI1_Init+0x68>)
 804410c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 804410e:	4b16      	ldr	r3, [pc, #88]	; (8044168 <MX_SPI1_Init+0x64>)
 8044110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8044114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8044116:	4b14      	ldr	r3, [pc, #80]	; (8044168 <MX_SPI1_Init+0x64>)
 8044118:	2200      	movs	r2, #0
 804411a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 804411c:	4b12      	ldr	r3, [pc, #72]	; (8044168 <MX_SPI1_Init+0x64>)
 804411e:	2200      	movs	r2, #0
 8044120:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8044122:	4b11      	ldr	r3, [pc, #68]	; (8044168 <MX_SPI1_Init+0x64>)
 8044124:	2200      	movs	r2, #0
 8044126:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8044128:	4b0f      	ldr	r3, [pc, #60]	; (8044168 <MX_SPI1_Init+0x64>)
 804412a:	2200      	movs	r2, #0
 804412c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 804412e:	4b0e      	ldr	r3, [pc, #56]	; (8044168 <MX_SPI1_Init+0x64>)
 8044130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8044134:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8044136:	4b0c      	ldr	r3, [pc, #48]	; (8044168 <MX_SPI1_Init+0x64>)
 8044138:	2238      	movs	r2, #56	; 0x38
 804413a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 804413c:	4b0a      	ldr	r3, [pc, #40]	; (8044168 <MX_SPI1_Init+0x64>)
 804413e:	2200      	movs	r2, #0
 8044140:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8044142:	4b09      	ldr	r3, [pc, #36]	; (8044168 <MX_SPI1_Init+0x64>)
 8044144:	2200      	movs	r2, #0
 8044146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8044148:	4b07      	ldr	r3, [pc, #28]	; (8044168 <MX_SPI1_Init+0x64>)
 804414a:	2200      	movs	r2, #0
 804414c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 804414e:	4b06      	ldr	r3, [pc, #24]	; (8044168 <MX_SPI1_Init+0x64>)
 8044150:	220a      	movs	r2, #10
 8044152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8044154:	4804      	ldr	r0, [pc, #16]	; (8044168 <MX_SPI1_Init+0x64>)
 8044156:	f002 fe7f 	bl	8046e58 <HAL_SPI_Init>
 804415a:	4603      	mov	r3, r0
 804415c:	2b00      	cmp	r3, #0
 804415e:	d001      	beq.n	8044164 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8044160:	f000 fa30 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8044164:	bf00      	nop
 8044166:	bd80      	pop	{r7, pc}
 8044168:	20000354 	.word	0x20000354
 804416c:	40013000 	.word	0x40013000

08044170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8044170:	b580      	push	{r7, lr}
 8044172:	b08c      	sub	sp, #48	; 0x30
 8044174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8044176:	f107 030c 	add.w	r3, r7, #12
 804417a:	2224      	movs	r2, #36	; 0x24
 804417c:	2100      	movs	r1, #0
 804417e:	4618      	mov	r0, r3
 8044180:	f004 fd1e 	bl	8048bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8044184:	1d3b      	adds	r3, r7, #4
 8044186:	2200      	movs	r2, #0
 8044188:	601a      	str	r2, [r3, #0]
 804418a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 804418c:	4b22      	ldr	r3, [pc, #136]	; (8044218 <MX_TIM1_Init+0xa8>)
 804418e:	4a23      	ldr	r2, [pc, #140]	; (804421c <MX_TIM1_Init+0xac>)
 8044190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8044192:	4b21      	ldr	r3, [pc, #132]	; (8044218 <MX_TIM1_Init+0xa8>)
 8044194:	2200      	movs	r2, #0
 8044196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8044198:	4b1f      	ldr	r3, [pc, #124]	; (8044218 <MX_TIM1_Init+0xa8>)
 804419a:	2200      	movs	r2, #0
 804419c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 804419e:	4b1e      	ldr	r3, [pc, #120]	; (8044218 <MX_TIM1_Init+0xa8>)
 80441a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80441a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80441a6:	4b1c      	ldr	r3, [pc, #112]	; (8044218 <MX_TIM1_Init+0xa8>)
 80441a8:	2200      	movs	r2, #0
 80441aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80441ac:	4b1a      	ldr	r3, [pc, #104]	; (8044218 <MX_TIM1_Init+0xa8>)
 80441ae:	2200      	movs	r2, #0
 80441b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80441b2:	4b19      	ldr	r3, [pc, #100]	; (8044218 <MX_TIM1_Init+0xa8>)
 80441b4:	2280      	movs	r2, #128	; 0x80
 80441b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80441b8:	2303      	movs	r3, #3
 80441ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80441bc:	2300      	movs	r3, #0
 80441be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80441c0:	2301      	movs	r3, #1
 80441c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80441c4:	2300      	movs	r3, #0
 80441c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80441c8:	230a      	movs	r3, #10
 80441ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80441cc:	2302      	movs	r3, #2
 80441ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80441d0:	2301      	movs	r3, #1
 80441d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80441d4:	2300      	movs	r3, #0
 80441d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80441d8:	230a      	movs	r3, #10
 80441da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80441dc:	f107 030c 	add.w	r3, r7, #12
 80441e0:	4619      	mov	r1, r3
 80441e2:	480d      	ldr	r0, [pc, #52]	; (8044218 <MX_TIM1_Init+0xa8>)
 80441e4:	f003 fcf6 	bl	8047bd4 <HAL_TIM_Encoder_Init>
 80441e8:	4603      	mov	r3, r0
 80441ea:	2b00      	cmp	r3, #0
 80441ec:	d001      	beq.n	80441f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80441ee:	f000 f9e9 	bl	80445c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80441f2:	2300      	movs	r3, #0
 80441f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80441f6:	2300      	movs	r3, #0
 80441f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80441fa:	1d3b      	adds	r3, r7, #4
 80441fc:	4619      	mov	r1, r3
 80441fe:	4806      	ldr	r0, [pc, #24]	; (8044218 <MX_TIM1_Init+0xa8>)
 8044200:	f004 fbf0 	bl	80489e4 <HAL_TIMEx_MasterConfigSynchronization>
 8044204:	4603      	mov	r3, r0
 8044206:	2b00      	cmp	r3, #0
 8044208:	d001      	beq.n	804420e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 804420a:	f000 f9db 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 804420e:	bf00      	nop
 8044210:	3730      	adds	r7, #48	; 0x30
 8044212:	46bd      	mov	sp, r7
 8044214:	bd80      	pop	{r7, pc}
 8044216:	bf00      	nop
 8044218:	20000304 	.word	0x20000304
 804421c:	40010000 	.word	0x40010000

08044220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8044220:	b580      	push	{r7, lr}
 8044222:	b086      	sub	sp, #24
 8044224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8044226:	f107 0308 	add.w	r3, r7, #8
 804422a:	2200      	movs	r2, #0
 804422c:	601a      	str	r2, [r3, #0]
 804422e:	605a      	str	r2, [r3, #4]
 8044230:	609a      	str	r2, [r3, #8]
 8044232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8044234:	463b      	mov	r3, r7
 8044236:	2200      	movs	r2, #0
 8044238:	601a      	str	r2, [r3, #0]
 804423a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 804423c:	4b1d      	ldr	r3, [pc, #116]	; (80442b4 <MX_TIM2_Init+0x94>)
 804423e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8044242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 29999;
 8044244:	4b1b      	ldr	r3, [pc, #108]	; (80442b4 <MX_TIM2_Init+0x94>)
 8044246:	f247 522f 	movw	r2, #29999	; 0x752f
 804424a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 804424c:	4b19      	ldr	r3, [pc, #100]	; (80442b4 <MX_TIM2_Init+0x94>)
 804424e:	2200      	movs	r2, #0
 8044250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8044252:	4b18      	ldr	r3, [pc, #96]	; (80442b4 <MX_TIM2_Init+0x94>)
 8044254:	2201      	movs	r2, #1
 8044256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8044258:	4b16      	ldr	r3, [pc, #88]	; (80442b4 <MX_TIM2_Init+0x94>)
 804425a:	2200      	movs	r2, #0
 804425c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804425e:	4b15      	ldr	r3, [pc, #84]	; (80442b4 <MX_TIM2_Init+0x94>)
 8044260:	2200      	movs	r2, #0
 8044262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8044264:	4813      	ldr	r0, [pc, #76]	; (80442b4 <MX_TIM2_Init+0x94>)
 8044266:	f003 fa63 	bl	8047730 <HAL_TIM_Base_Init>
 804426a:	4603      	mov	r3, r0
 804426c:	2b00      	cmp	r3, #0
 804426e:	d001      	beq.n	8044274 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8044270:	f000 f9a8 	bl	80445c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8044274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8044278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 804427a:	f107 0308 	add.w	r3, r7, #8
 804427e:	4619      	mov	r1, r3
 8044280:	480c      	ldr	r0, [pc, #48]	; (80442b4 <MX_TIM2_Init+0x94>)
 8044282:	f003 ffa5 	bl	80481d0 <HAL_TIM_ConfigClockSource>
 8044286:	4603      	mov	r3, r0
 8044288:	2b00      	cmp	r3, #0
 804428a:	d001      	beq.n	8044290 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 804428c:	f000 f99a 	bl	80445c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8044290:	2320      	movs	r3, #32
 8044292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8044294:	2300      	movs	r3, #0
 8044296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8044298:	463b      	mov	r3, r7
 804429a:	4619      	mov	r1, r3
 804429c:	4805      	ldr	r0, [pc, #20]	; (80442b4 <MX_TIM2_Init+0x94>)
 804429e:	f004 fba1 	bl	80489e4 <HAL_TIMEx_MasterConfigSynchronization>
 80442a2:	4603      	mov	r3, r0
 80442a4:	2b00      	cmp	r3, #0
 80442a6:	d001      	beq.n	80442ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80442a8:	f000 f98c 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80442ac:	bf00      	nop
 80442ae:	3718      	adds	r7, #24
 80442b0:	46bd      	mov	sp, r7
 80442b2:	bd80      	pop	{r7, pc}
 80442b4:	200003ac 	.word	0x200003ac

080442b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80442b8:	b580      	push	{r7, lr}
 80442ba:	b08e      	sub	sp, #56	; 0x38
 80442bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80442be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80442c2:	2200      	movs	r2, #0
 80442c4:	601a      	str	r2, [r3, #0]
 80442c6:	605a      	str	r2, [r3, #4]
 80442c8:	609a      	str	r2, [r3, #8]
 80442ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80442cc:	f107 0320 	add.w	r3, r7, #32
 80442d0:	2200      	movs	r2, #0
 80442d2:	601a      	str	r2, [r3, #0]
 80442d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80442d6:	1d3b      	adds	r3, r7, #4
 80442d8:	2200      	movs	r2, #0
 80442da:	601a      	str	r2, [r3, #0]
 80442dc:	605a      	str	r2, [r3, #4]
 80442de:	609a      	str	r2, [r3, #8]
 80442e0:	60da      	str	r2, [r3, #12]
 80442e2:	611a      	str	r2, [r3, #16]
 80442e4:	615a      	str	r2, [r3, #20]
 80442e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80442e8:	4b32      	ldr	r3, [pc, #200]	; (80443b4 <MX_TIM3_Init+0xfc>)
 80442ea:	4a33      	ldr	r2, [pc, #204]	; (80443b8 <MX_TIM3_Init+0x100>)
 80442ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 80442ee:	4b31      	ldr	r3, [pc, #196]	; (80443b4 <MX_TIM3_Init+0xfc>)
 80442f0:	f240 2257 	movw	r2, #599	; 0x257
 80442f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80442f6:	4b2f      	ldr	r3, [pc, #188]	; (80443b4 <MX_TIM3_Init+0xfc>)
 80442f8:	2200      	movs	r2, #0
 80442fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80442fc:	4b2d      	ldr	r3, [pc, #180]	; (80443b4 <MX_TIM3_Init+0xfc>)
 80442fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8044302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8044304:	4b2b      	ldr	r3, [pc, #172]	; (80443b4 <MX_TIM3_Init+0xfc>)
 8044306:	2200      	movs	r2, #0
 8044308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804430a:	4b2a      	ldr	r3, [pc, #168]	; (80443b4 <MX_TIM3_Init+0xfc>)
 804430c:	2200      	movs	r2, #0
 804430e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8044310:	4828      	ldr	r0, [pc, #160]	; (80443b4 <MX_TIM3_Init+0xfc>)
 8044312:	f003 fa0d 	bl	8047730 <HAL_TIM_Base_Init>
 8044316:	4603      	mov	r3, r0
 8044318:	2b00      	cmp	r3, #0
 804431a:	d001      	beq.n	8044320 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 804431c:	f000 f952 	bl	80445c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8044320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8044324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8044326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 804432a:	4619      	mov	r1, r3
 804432c:	4821      	ldr	r0, [pc, #132]	; (80443b4 <MX_TIM3_Init+0xfc>)
 804432e:	f003 ff4f 	bl	80481d0 <HAL_TIM_ConfigClockSource>
 8044332:	4603      	mov	r3, r0
 8044334:	2b00      	cmp	r3, #0
 8044336:	d001      	beq.n	804433c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8044338:	f000 f944 	bl	80445c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 804433c:	481d      	ldr	r0, [pc, #116]	; (80443b4 <MX_TIM3_Init+0xfc>)
 804433e:	f003 fab7 	bl	80478b0 <HAL_TIM_PWM_Init>
 8044342:	4603      	mov	r3, r0
 8044344:	2b00      	cmp	r3, #0
 8044346:	d001      	beq.n	804434c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8044348:	f000 f93c 	bl	80445c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 804434c:	2320      	movs	r3, #32
 804434e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8044350:	2300      	movs	r3, #0
 8044352:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8044354:	f107 0320 	add.w	r3, r7, #32
 8044358:	4619      	mov	r1, r3
 804435a:	4816      	ldr	r0, [pc, #88]	; (80443b4 <MX_TIM3_Init+0xfc>)
 804435c:	f004 fb42 	bl	80489e4 <HAL_TIMEx_MasterConfigSynchronization>
 8044360:	4603      	mov	r3, r0
 8044362:	2b00      	cmp	r3, #0
 8044364:	d001      	beq.n	804436a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8044366:	f000 f92d 	bl	80445c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 804436a:	2360      	movs	r3, #96	; 0x60
 804436c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 804436e:	2300      	movs	r3, #0
 8044370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8044372:	2300      	movs	r3, #0
 8044374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8044376:	2300      	movs	r3, #0
 8044378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 804437a:	1d3b      	adds	r3, r7, #4
 804437c:	2204      	movs	r2, #4
 804437e:	4619      	mov	r1, r3
 8044380:	480c      	ldr	r0, [pc, #48]	; (80443b4 <MX_TIM3_Init+0xfc>)
 8044382:	f003 fe63 	bl	804804c <HAL_TIM_PWM_ConfigChannel>
 8044386:	4603      	mov	r3, r0
 8044388:	2b00      	cmp	r3, #0
 804438a:	d001      	beq.n	8044390 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 804438c:	f000 f91a 	bl	80445c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8044390:	1d3b      	adds	r3, r7, #4
 8044392:	2208      	movs	r2, #8
 8044394:	4619      	mov	r1, r3
 8044396:	4807      	ldr	r0, [pc, #28]	; (80443b4 <MX_TIM3_Init+0xfc>)
 8044398:	f003 fe58 	bl	804804c <HAL_TIM_PWM_ConfigChannel>
 804439c:	4603      	mov	r3, r0
 804439e:	2b00      	cmp	r3, #0
 80443a0:	d001      	beq.n	80443a6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80443a2:	f000 f90f 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80443a6:	4803      	ldr	r0, [pc, #12]	; (80443b4 <MX_TIM3_Init+0xfc>)
 80443a8:	f000 fa88 	bl	80448bc <HAL_TIM_MspPostInit>

}
 80443ac:	bf00      	nop
 80443ae:	3738      	adds	r7, #56	; 0x38
 80443b0:	46bd      	mov	sp, r7
 80443b2:	bd80      	pop	{r7, pc}
 80443b4:	200002b8 	.word	0x200002b8
 80443b8:	40000400 	.word	0x40000400

080443bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80443bc:	b580      	push	{r7, lr}
 80443be:	b082      	sub	sp, #8
 80443c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80443c2:	463b      	mov	r3, r7
 80443c4:	2200      	movs	r2, #0
 80443c6:	601a      	str	r2, [r3, #0]
 80443c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80443ca:	4b15      	ldr	r3, [pc, #84]	; (8044420 <MX_TIM6_Init+0x64>)
 80443cc:	4a15      	ldr	r2, [pc, #84]	; (8044424 <MX_TIM6_Init+0x68>)
 80443ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80443d0:	4b13      	ldr	r3, [pc, #76]	; (8044420 <MX_TIM6_Init+0x64>)
 80443d2:	2201      	movs	r2, #1
 80443d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80443d6:	4b12      	ldr	r3, [pc, #72]	; (8044420 <MX_TIM6_Init+0x64>)
 80443d8:	2200      	movs	r2, #0
 80443da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80443dc:	4b10      	ldr	r3, [pc, #64]	; (8044420 <MX_TIM6_Init+0x64>)
 80443de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80443e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80443e4:	4b0e      	ldr	r3, [pc, #56]	; (8044420 <MX_TIM6_Init+0x64>)
 80443e6:	2280      	movs	r2, #128	; 0x80
 80443e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80443ea:	480d      	ldr	r0, [pc, #52]	; (8044420 <MX_TIM6_Init+0x64>)
 80443ec:	f003 f9a0 	bl	8047730 <HAL_TIM_Base_Init>
 80443f0:	4603      	mov	r3, r0
 80443f2:	2b00      	cmp	r3, #0
 80443f4:	d001      	beq.n	80443fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80443f6:	f000 f8e5 	bl	80445c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80443fa:	2320      	movs	r3, #32
 80443fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80443fe:	2300      	movs	r3, #0
 8044400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8044402:	463b      	mov	r3, r7
 8044404:	4619      	mov	r1, r3
 8044406:	4806      	ldr	r0, [pc, #24]	; (8044420 <MX_TIM6_Init+0x64>)
 8044408:	f004 faec 	bl	80489e4 <HAL_TIMEx_MasterConfigSynchronization>
 804440c:	4603      	mov	r3, r0
 804440e:	2b00      	cmp	r3, #0
 8044410:	d001      	beq.n	8044416 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8044412:	f000 f8d7 	bl	80445c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8044416:	bf00      	nop
 8044418:	3708      	adds	r7, #8
 804441a:	46bd      	mov	sp, r7
 804441c:	bd80      	pop	{r7, pc}
 804441e:	bf00      	nop
 8044420:	2000047c 	.word	0x2000047c
 8044424:	40001000 	.word	0x40001000

08044428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8044428:	b580      	push	{r7, lr}
 804442a:	b08c      	sub	sp, #48	; 0x30
 804442c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804442e:	f107 031c 	add.w	r3, r7, #28
 8044432:	2200      	movs	r2, #0
 8044434:	601a      	str	r2, [r3, #0]
 8044436:	605a      	str	r2, [r3, #4]
 8044438:	609a      	str	r2, [r3, #8]
 804443a:	60da      	str	r2, [r3, #12]
 804443c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804443e:	2300      	movs	r3, #0
 8044440:	61bb      	str	r3, [r7, #24]
 8044442:	4b5b      	ldr	r3, [pc, #364]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044446:	4a5a      	ldr	r2, [pc, #360]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044448:	f043 0304 	orr.w	r3, r3, #4
 804444c:	6313      	str	r3, [r2, #48]	; 0x30
 804444e:	4b58      	ldr	r3, [pc, #352]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044452:	f003 0304 	and.w	r3, r3, #4
 8044456:	61bb      	str	r3, [r7, #24]
 8044458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804445a:	2300      	movs	r3, #0
 804445c:	617b      	str	r3, [r7, #20]
 804445e:	4b54      	ldr	r3, [pc, #336]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044462:	4a53      	ldr	r2, [pc, #332]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8044468:	6313      	str	r3, [r2, #48]	; 0x30
 804446a:	4b51      	ldr	r3, [pc, #324]	; (80445b0 <MX_GPIO_Init+0x188>)
 804446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044472:	617b      	str	r3, [r7, #20]
 8044474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8044476:	2300      	movs	r3, #0
 8044478:	613b      	str	r3, [r7, #16]
 804447a:	4b4d      	ldr	r3, [pc, #308]	; (80445b0 <MX_GPIO_Init+0x188>)
 804447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804447e:	4a4c      	ldr	r2, [pc, #304]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044480:	f043 0301 	orr.w	r3, r3, #1
 8044484:	6313      	str	r3, [r2, #48]	; 0x30
 8044486:	4b4a      	ldr	r3, [pc, #296]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804448a:	f003 0301 	and.w	r3, r3, #1
 804448e:	613b      	str	r3, [r7, #16]
 8044490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8044492:	2300      	movs	r3, #0
 8044494:	60fb      	str	r3, [r7, #12]
 8044496:	4b46      	ldr	r3, [pc, #280]	; (80445b0 <MX_GPIO_Init+0x188>)
 8044498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804449a:	4a45      	ldr	r2, [pc, #276]	; (80445b0 <MX_GPIO_Init+0x188>)
 804449c:	f043 0310 	orr.w	r3, r3, #16
 80444a0:	6313      	str	r3, [r2, #48]	; 0x30
 80444a2:	4b43      	ldr	r3, [pc, #268]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80444a6:	f003 0310 	and.w	r3, r3, #16
 80444aa:	60fb      	str	r3, [r7, #12]
 80444ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80444ae:	2300      	movs	r3, #0
 80444b0:	60bb      	str	r3, [r7, #8]
 80444b2:	4b3f      	ldr	r3, [pc, #252]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80444b6:	4a3e      	ldr	r2, [pc, #248]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444b8:	f043 0308 	orr.w	r3, r3, #8
 80444bc:	6313      	str	r3, [r2, #48]	; 0x30
 80444be:	4b3c      	ldr	r3, [pc, #240]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80444c2:	f003 0308 	and.w	r3, r3, #8
 80444c6:	60bb      	str	r3, [r7, #8]
 80444c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80444ca:	2300      	movs	r3, #0
 80444cc:	607b      	str	r3, [r7, #4]
 80444ce:	4b38      	ldr	r3, [pc, #224]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80444d2:	4a37      	ldr	r2, [pc, #220]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444d4:	f043 0302 	orr.w	r3, r3, #2
 80444d8:	6313      	str	r3, [r2, #48]	; 0x30
 80444da:	4b35      	ldr	r3, [pc, #212]	; (80445b0 <MX_GPIO_Init+0x188>)
 80444dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80444de:	f003 0302 	and.w	r3, r3, #2
 80444e2:	607b      	str	r3, [r7, #4]
 80444e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80444e6:	2200      	movs	r2, #0
 80444e8:	2110      	movs	r1, #16
 80444ea:	4832      	ldr	r0, [pc, #200]	; (80445b4 <MX_GPIO_Init+0x18c>)
 80444ec:	f001 fb5c 	bl	8045ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80444f0:	2200      	movs	r2, #0
 80444f2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80444f6:	4830      	ldr	r0, [pc, #192]	; (80445b8 <MX_GPIO_Init+0x190>)
 80444f8:	f001 fb56 	bl	8045ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80444fc:	2301      	movs	r3, #1
 80444fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8044500:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8044504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044506:	2300      	movs	r3, #0
 8044508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 804450a:	f107 031c 	add.w	r3, r7, #28
 804450e:	4619      	mov	r1, r3
 8044510:	4828      	ldr	r0, [pc, #160]	; (80445b4 <MX_GPIO_Init+0x18c>)
 8044512:	f001 f8b1 	bl	8045678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8044516:	2310      	movs	r3, #16
 8044518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804451a:	2301      	movs	r3, #1
 804451c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804451e:	2300      	movs	r3, #0
 8044520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8044522:	2300      	movs	r3, #0
 8044524:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8044526:	f107 031c 	add.w	r3, r7, #28
 804452a:	4619      	mov	r1, r3
 804452c:	4821      	ldr	r0, [pc, #132]	; (80445b4 <MX_GPIO_Init+0x18c>)
 804452e:	f001 f8a3 	bl	8045678 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8044532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8044536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8044538:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 804453c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804453e:	2301      	movs	r3, #1
 8044540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8044542:	f107 031c 	add.w	r3, r7, #28
 8044546:	4619      	mov	r1, r3
 8044548:	481c      	ldr	r0, [pc, #112]	; (80445bc <MX_GPIO_Init+0x194>)
 804454a:	f001 f895 	bl	8045678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 804454e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8044552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8044554:	2301      	movs	r3, #1
 8044556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044558:	2300      	movs	r3, #0
 804455a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804455c:	2300      	movs	r3, #0
 804455e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8044560:	f107 031c 	add.w	r3, r7, #28
 8044564:	4619      	mov	r1, r3
 8044566:	4814      	ldr	r0, [pc, #80]	; (80445b8 <MX_GPIO_Init+0x190>)
 8044568:	f001 f886 	bl	8045678 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 804456c:	2340      	movs	r3, #64	; 0x40
 804456e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8044570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8044574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044576:	2300      	movs	r3, #0
 8044578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 804457a:	f107 031c 	add.w	r3, r7, #28
 804457e:	4619      	mov	r1, r3
 8044580:	480f      	ldr	r0, [pc, #60]	; (80445c0 <MX_GPIO_Init+0x198>)
 8044582:	f001 f879 	bl	8045678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8044586:	2201      	movs	r2, #1
 8044588:	2100      	movs	r1, #0
 804458a:	2017      	movs	r0, #23
 804458c:	f000 fd57 	bl	804503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8044590:	2017      	movs	r0, #23
 8044592:	f000 fd70 	bl	8045076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8044596:	2201      	movs	r2, #1
 8044598:	2100      	movs	r1, #0
 804459a:	2028      	movs	r0, #40	; 0x28
 804459c:	f000 fd4f 	bl	804503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80445a0:	2028      	movs	r0, #40	; 0x28
 80445a2:	f000 fd68 	bl	8045076 <HAL_NVIC_EnableIRQ>

}
 80445a6:	bf00      	nop
 80445a8:	3730      	adds	r7, #48	; 0x30
 80445aa:	46bd      	mov	sp, r7
 80445ac:	bd80      	pop	{r7, pc}
 80445ae:	bf00      	nop
 80445b0:	40023800 	.word	0x40023800
 80445b4:	40020000 	.word	0x40020000
 80445b8:	40020c00 	.word	0x40020c00
 80445bc:	40021000 	.word	0x40021000
 80445c0:	40020800 	.word	0x40020800

080445c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80445c4:	b580      	push	{r7, lr}
 80445c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80445c8:	b672      	cpsid	i
}
 80445ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_DeInit();
 80445cc:	f000 fb90 	bl	8044cf0 <HAL_DeInit>
  NVIC_SystemReset(); /*Init a system reset*/
 80445d0:	f7ff fbc6 	bl	8043d60 <__NVIC_SystemReset>

080445d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80445d4:	b580      	push	{r7, lr}
 80445d6:	b082      	sub	sp, #8
 80445d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80445da:	2300      	movs	r3, #0
 80445dc:	607b      	str	r3, [r7, #4]
 80445de:	4b10      	ldr	r3, [pc, #64]	; (8044620 <HAL_MspInit+0x4c>)
 80445e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80445e2:	4a0f      	ldr	r2, [pc, #60]	; (8044620 <HAL_MspInit+0x4c>)
 80445e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80445e8:	6453      	str	r3, [r2, #68]	; 0x44
 80445ea:	4b0d      	ldr	r3, [pc, #52]	; (8044620 <HAL_MspInit+0x4c>)
 80445ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80445ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80445f2:	607b      	str	r3, [r7, #4]
 80445f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80445f6:	2300      	movs	r3, #0
 80445f8:	603b      	str	r3, [r7, #0]
 80445fa:	4b09      	ldr	r3, [pc, #36]	; (8044620 <HAL_MspInit+0x4c>)
 80445fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80445fe:	4a08      	ldr	r2, [pc, #32]	; (8044620 <HAL_MspInit+0x4c>)
 8044600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044604:	6413      	str	r3, [r2, #64]	; 0x40
 8044606:	4b06      	ldr	r3, [pc, #24]	; (8044620 <HAL_MspInit+0x4c>)
 8044608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804460e:	603b      	str	r3, [r7, #0]
 8044610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8044612:	2007      	movs	r0, #7
 8044614:	f000 fd08 	bl	8045028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8044618:	bf00      	nop
 804461a:	3708      	adds	r7, #8
 804461c:	46bd      	mov	sp, r7
 804461e:	bd80      	pop	{r7, pc}
 8044620:	40023800 	.word	0x40023800

08044624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8044624:	b580      	push	{r7, lr}
 8044626:	b08a      	sub	sp, #40	; 0x28
 8044628:	af00      	add	r7, sp, #0
 804462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804462c:	f107 0314 	add.w	r3, r7, #20
 8044630:	2200      	movs	r2, #0
 8044632:	601a      	str	r2, [r3, #0]
 8044634:	605a      	str	r2, [r3, #4]
 8044636:	609a      	str	r2, [r3, #8]
 8044638:	60da      	str	r2, [r3, #12]
 804463a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 804463c:	687b      	ldr	r3, [r7, #4]
 804463e:	681b      	ldr	r3, [r3, #0]
 8044640:	4a19      	ldr	r2, [pc, #100]	; (80446a8 <HAL_I2C_MspInit+0x84>)
 8044642:	4293      	cmp	r3, r2
 8044644:	d12b      	bne.n	804469e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8044646:	2300      	movs	r3, #0
 8044648:	613b      	str	r3, [r7, #16]
 804464a:	4b18      	ldr	r3, [pc, #96]	; (80446ac <HAL_I2C_MspInit+0x88>)
 804464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804464e:	4a17      	ldr	r2, [pc, #92]	; (80446ac <HAL_I2C_MspInit+0x88>)
 8044650:	f043 0302 	orr.w	r3, r3, #2
 8044654:	6313      	str	r3, [r2, #48]	; 0x30
 8044656:	4b15      	ldr	r3, [pc, #84]	; (80446ac <HAL_I2C_MspInit+0x88>)
 8044658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804465a:	f003 0302 	and.w	r3, r3, #2
 804465e:	613b      	str	r3, [r7, #16]
 8044660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8044662:	23c0      	movs	r3, #192	; 0xc0
 8044664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8044666:	2312      	movs	r3, #18
 8044668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804466a:	2300      	movs	r3, #0
 804466c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804466e:	2303      	movs	r3, #3
 8044670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8044672:	2304      	movs	r3, #4
 8044674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8044676:	f107 0314 	add.w	r3, r7, #20
 804467a:	4619      	mov	r1, r3
 804467c:	480c      	ldr	r0, [pc, #48]	; (80446b0 <HAL_I2C_MspInit+0x8c>)
 804467e:	f000 fffb 	bl	8045678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8044682:	2300      	movs	r3, #0
 8044684:	60fb      	str	r3, [r7, #12]
 8044686:	4b09      	ldr	r3, [pc, #36]	; (80446ac <HAL_I2C_MspInit+0x88>)
 8044688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804468a:	4a08      	ldr	r2, [pc, #32]	; (80446ac <HAL_I2C_MspInit+0x88>)
 804468c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8044690:	6413      	str	r3, [r2, #64]	; 0x40
 8044692:	4b06      	ldr	r3, [pc, #24]	; (80446ac <HAL_I2C_MspInit+0x88>)
 8044694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804469a:	60fb      	str	r3, [r7, #12]
 804469c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 804469e:	bf00      	nop
 80446a0:	3728      	adds	r7, #40	; 0x28
 80446a2:	46bd      	mov	sp, r7
 80446a4:	bd80      	pop	{r7, pc}
 80446a6:	bf00      	nop
 80446a8:	40005400 	.word	0x40005400
 80446ac:	40023800 	.word	0x40023800
 80446b0:	40020400 	.word	0x40020400

080446b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80446b4:	b580      	push	{r7, lr}
 80446b6:	b082      	sub	sp, #8
 80446b8:	af00      	add	r7, sp, #0
 80446ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80446bc:	687b      	ldr	r3, [r7, #4]
 80446be:	681b      	ldr	r3, [r3, #0]
 80446c0:	4a0a      	ldr	r2, [pc, #40]	; (80446ec <HAL_I2C_MspDeInit+0x38>)
 80446c2:	4293      	cmp	r3, r2
 80446c4:	d10d      	bne.n	80446e2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80446c6:	4b0a      	ldr	r3, [pc, #40]	; (80446f0 <HAL_I2C_MspDeInit+0x3c>)
 80446c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80446ca:	4a09      	ldr	r2, [pc, #36]	; (80446f0 <HAL_I2C_MspDeInit+0x3c>)
 80446cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80446d0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80446d2:	2140      	movs	r1, #64	; 0x40
 80446d4:	4807      	ldr	r0, [pc, #28]	; (80446f4 <HAL_I2C_MspDeInit+0x40>)
 80446d6:	f001 f96b 	bl	80459b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80446da:	2180      	movs	r1, #128	; 0x80
 80446dc:	4805      	ldr	r0, [pc, #20]	; (80446f4 <HAL_I2C_MspDeInit+0x40>)
 80446de:	f001 f967 	bl	80459b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80446e2:	bf00      	nop
 80446e4:	3708      	adds	r7, #8
 80446e6:	46bd      	mov	sp, r7
 80446e8:	bd80      	pop	{r7, pc}
 80446ea:	bf00      	nop
 80446ec:	40005400 	.word	0x40005400
 80446f0:	40023800 	.word	0x40023800
 80446f4:	40020400 	.word	0x40020400

080446f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80446f8:	b580      	push	{r7, lr}
 80446fa:	b08a      	sub	sp, #40	; 0x28
 80446fc:	af00      	add	r7, sp, #0
 80446fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044700:	f107 0314 	add.w	r3, r7, #20
 8044704:	2200      	movs	r2, #0
 8044706:	601a      	str	r2, [r3, #0]
 8044708:	605a      	str	r2, [r3, #4]
 804470a:	609a      	str	r2, [r3, #8]
 804470c:	60da      	str	r2, [r3, #12]
 804470e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8044710:	687b      	ldr	r3, [r7, #4]
 8044712:	681b      	ldr	r3, [r3, #0]
 8044714:	4a19      	ldr	r2, [pc, #100]	; (804477c <HAL_SPI_MspInit+0x84>)
 8044716:	4293      	cmp	r3, r2
 8044718:	d12b      	bne.n	8044772 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804471a:	2300      	movs	r3, #0
 804471c:	613b      	str	r3, [r7, #16]
 804471e:	4b18      	ldr	r3, [pc, #96]	; (8044780 <HAL_SPI_MspInit+0x88>)
 8044720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044722:	4a17      	ldr	r2, [pc, #92]	; (8044780 <HAL_SPI_MspInit+0x88>)
 8044724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8044728:	6453      	str	r3, [r2, #68]	; 0x44
 804472a:	4b15      	ldr	r3, [pc, #84]	; (8044780 <HAL_SPI_MspInit+0x88>)
 804472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804472e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8044732:	613b      	str	r3, [r7, #16]
 8044734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8044736:	2300      	movs	r3, #0
 8044738:	60fb      	str	r3, [r7, #12]
 804473a:	4b11      	ldr	r3, [pc, #68]	; (8044780 <HAL_SPI_MspInit+0x88>)
 804473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804473e:	4a10      	ldr	r2, [pc, #64]	; (8044780 <HAL_SPI_MspInit+0x88>)
 8044740:	f043 0301 	orr.w	r3, r3, #1
 8044744:	6313      	str	r3, [r2, #48]	; 0x30
 8044746:	4b0e      	ldr	r3, [pc, #56]	; (8044780 <HAL_SPI_MspInit+0x88>)
 8044748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804474a:	f003 0301 	and.w	r3, r3, #1
 804474e:	60fb      	str	r3, [r7, #12]
 8044750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8044752:	23e0      	movs	r3, #224	; 0xe0
 8044754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8044756:	2302      	movs	r3, #2
 8044758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804475a:	2300      	movs	r3, #0
 804475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804475e:	2303      	movs	r3, #3
 8044760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8044762:	2305      	movs	r3, #5
 8044764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8044766:	f107 0314 	add.w	r3, r7, #20
 804476a:	4619      	mov	r1, r3
 804476c:	4805      	ldr	r0, [pc, #20]	; (8044784 <HAL_SPI_MspInit+0x8c>)
 804476e:	f000 ff83 	bl	8045678 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8044772:	bf00      	nop
 8044774:	3728      	adds	r7, #40	; 0x28
 8044776:	46bd      	mov	sp, r7
 8044778:	bd80      	pop	{r7, pc}
 804477a:	bf00      	nop
 804477c:	40013000 	.word	0x40013000
 8044780:	40023800 	.word	0x40023800
 8044784:	40020000 	.word	0x40020000

08044788 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8044788:	b580      	push	{r7, lr}
 804478a:	b08a      	sub	sp, #40	; 0x28
 804478c:	af00      	add	r7, sp, #0
 804478e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8044790:	f107 0314 	add.w	r3, r7, #20
 8044794:	2200      	movs	r2, #0
 8044796:	601a      	str	r2, [r3, #0]
 8044798:	605a      	str	r2, [r3, #4]
 804479a:	609a      	str	r2, [r3, #8]
 804479c:	60da      	str	r2, [r3, #12]
 804479e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80447a0:	687b      	ldr	r3, [r7, #4]
 80447a2:	681b      	ldr	r3, [r3, #0]
 80447a4:	4a19      	ldr	r2, [pc, #100]	; (804480c <HAL_TIM_Encoder_MspInit+0x84>)
 80447a6:	4293      	cmp	r3, r2
 80447a8:	d12c      	bne.n	8044804 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80447aa:	2300      	movs	r3, #0
 80447ac:	613b      	str	r3, [r7, #16]
 80447ae:	4b18      	ldr	r3, [pc, #96]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80447b2:	4a17      	ldr	r2, [pc, #92]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447b4:	f043 0301 	orr.w	r3, r3, #1
 80447b8:	6453      	str	r3, [r2, #68]	; 0x44
 80447ba:	4b15      	ldr	r3, [pc, #84]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80447be:	f003 0301 	and.w	r3, r3, #1
 80447c2:	613b      	str	r3, [r7, #16]
 80447c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80447c6:	2300      	movs	r3, #0
 80447c8:	60fb      	str	r3, [r7, #12]
 80447ca:	4b11      	ldr	r3, [pc, #68]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447ce:	4a10      	ldr	r2, [pc, #64]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447d0:	f043 0310 	orr.w	r3, r3, #16
 80447d4:	6313      	str	r3, [r2, #48]	; 0x30
 80447d6:	4b0e      	ldr	r3, [pc, #56]	; (8044810 <HAL_TIM_Encoder_MspInit+0x88>)
 80447d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447da:	f003 0310 	and.w	r3, r3, #16
 80447de:	60fb      	str	r3, [r7, #12]
 80447e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderLeftPin_Pin|EncoderRightPin_Pin;
 80447e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80447e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80447e8:	2302      	movs	r3, #2
 80447ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80447ec:	2301      	movs	r3, #1
 80447ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80447f0:	2300      	movs	r3, #0
 80447f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80447f4:	2301      	movs	r3, #1
 80447f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80447f8:	f107 0314 	add.w	r3, r7, #20
 80447fc:	4619      	mov	r1, r3
 80447fe:	4805      	ldr	r0, [pc, #20]	; (8044814 <HAL_TIM_Encoder_MspInit+0x8c>)
 8044800:	f000 ff3a 	bl	8045678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8044804:	bf00      	nop
 8044806:	3728      	adds	r7, #40	; 0x28
 8044808:	46bd      	mov	sp, r7
 804480a:	bd80      	pop	{r7, pc}
 804480c:	40010000 	.word	0x40010000
 8044810:	40023800 	.word	0x40023800
 8044814:	40021000 	.word	0x40021000

08044818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8044818:	b580      	push	{r7, lr}
 804481a:	b086      	sub	sp, #24
 804481c:	af00      	add	r7, sp, #0
 804481e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8044820:	687b      	ldr	r3, [r7, #4]
 8044822:	681b      	ldr	r3, [r3, #0]
 8044824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8044828:	d116      	bne.n	8044858 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 804482a:	2300      	movs	r3, #0
 804482c:	617b      	str	r3, [r7, #20]
 804482e:	4b20      	ldr	r3, [pc, #128]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044832:	4a1f      	ldr	r2, [pc, #124]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044834:	f043 0301 	orr.w	r3, r3, #1
 8044838:	6413      	str	r3, [r2, #64]	; 0x40
 804483a:	4b1d      	ldr	r3, [pc, #116]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 804483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804483e:	f003 0301 	and.w	r3, r3, #1
 8044842:	617b      	str	r3, [r7, #20]
 8044844:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8044846:	2200      	movs	r2, #0
 8044848:	2100      	movs	r1, #0
 804484a:	201c      	movs	r0, #28
 804484c:	f000 fbf7 	bl	804503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8044850:	201c      	movs	r0, #28
 8044852:	f000 fc10 	bl	8045076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8044856:	e026      	b.n	80448a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8044858:	687b      	ldr	r3, [r7, #4]
 804485a:	681b      	ldr	r3, [r3, #0]
 804485c:	4a15      	ldr	r2, [pc, #84]	; (80448b4 <HAL_TIM_Base_MspInit+0x9c>)
 804485e:	4293      	cmp	r3, r2
 8044860:	d10e      	bne.n	8044880 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8044862:	2300      	movs	r3, #0
 8044864:	613b      	str	r3, [r7, #16]
 8044866:	4b12      	ldr	r3, [pc, #72]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804486a:	4a11      	ldr	r2, [pc, #68]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 804486c:	f043 0302 	orr.w	r3, r3, #2
 8044870:	6413      	str	r3, [r2, #64]	; 0x40
 8044872:	4b0f      	ldr	r3, [pc, #60]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044876:	f003 0302 	and.w	r3, r3, #2
 804487a:	613b      	str	r3, [r7, #16]
 804487c:	693b      	ldr	r3, [r7, #16]
}
 804487e:	e012      	b.n	80448a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8044880:	687b      	ldr	r3, [r7, #4]
 8044882:	681b      	ldr	r3, [r3, #0]
 8044884:	4a0c      	ldr	r2, [pc, #48]	; (80448b8 <HAL_TIM_Base_MspInit+0xa0>)
 8044886:	4293      	cmp	r3, r2
 8044888:	d10d      	bne.n	80448a6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 804488a:	2300      	movs	r3, #0
 804488c:	60fb      	str	r3, [r7, #12]
 804488e:	4b08      	ldr	r3, [pc, #32]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044892:	4a07      	ldr	r2, [pc, #28]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 8044894:	f043 0310 	orr.w	r3, r3, #16
 8044898:	6413      	str	r3, [r2, #64]	; 0x40
 804489a:	4b05      	ldr	r3, [pc, #20]	; (80448b0 <HAL_TIM_Base_MspInit+0x98>)
 804489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804489e:	f003 0310 	and.w	r3, r3, #16
 80448a2:	60fb      	str	r3, [r7, #12]
 80448a4:	68fb      	ldr	r3, [r7, #12]
}
 80448a6:	bf00      	nop
 80448a8:	3718      	adds	r7, #24
 80448aa:	46bd      	mov	sp, r7
 80448ac:	bd80      	pop	{r7, pc}
 80448ae:	bf00      	nop
 80448b0:	40023800 	.word	0x40023800
 80448b4:	40000400 	.word	0x40000400
 80448b8:	40001000 	.word	0x40001000

080448bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80448bc:	b580      	push	{r7, lr}
 80448be:	b088      	sub	sp, #32
 80448c0:	af00      	add	r7, sp, #0
 80448c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80448c4:	f107 030c 	add.w	r3, r7, #12
 80448c8:	2200      	movs	r2, #0
 80448ca:	601a      	str	r2, [r3, #0]
 80448cc:	605a      	str	r2, [r3, #4]
 80448ce:	609a      	str	r2, [r3, #8]
 80448d0:	60da      	str	r2, [r3, #12]
 80448d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80448d4:	687b      	ldr	r3, [r7, #4]
 80448d6:	681b      	ldr	r3, [r3, #0]
 80448d8:	4a12      	ldr	r2, [pc, #72]	; (8044924 <HAL_TIM_MspPostInit+0x68>)
 80448da:	4293      	cmp	r3, r2
 80448dc:	d11e      	bne.n	804491c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80448de:	2300      	movs	r3, #0
 80448e0:	60bb      	str	r3, [r7, #8]
 80448e2:	4b11      	ldr	r3, [pc, #68]	; (8044928 <HAL_TIM_MspPostInit+0x6c>)
 80448e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80448e6:	4a10      	ldr	r2, [pc, #64]	; (8044928 <HAL_TIM_MspPostInit+0x6c>)
 80448e8:	f043 0304 	orr.w	r3, r3, #4
 80448ec:	6313      	str	r3, [r2, #48]	; 0x30
 80448ee:	4b0e      	ldr	r3, [pc, #56]	; (8044928 <HAL_TIM_MspPostInit+0x6c>)
 80448f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80448f2:	f003 0304 	and.w	r3, r3, #4
 80448f6:	60bb      	str	r3, [r7, #8]
 80448f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringBankPin1_Pin|FiringBankPin2_Pin;
 80448fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80448fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8044900:	2302      	movs	r3, #2
 8044902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8044904:	2300      	movs	r3, #0
 8044906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8044908:	2300      	movs	r3, #0
 804490a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 804490c:	2302      	movs	r3, #2
 804490e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8044910:	f107 030c 	add.w	r3, r7, #12
 8044914:	4619      	mov	r1, r3
 8044916:	4805      	ldr	r0, [pc, #20]	; (804492c <HAL_TIM_MspPostInit+0x70>)
 8044918:	f000 feae 	bl	8045678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 804491c:	bf00      	nop
 804491e:	3720      	adds	r7, #32
 8044920:	46bd      	mov	sp, r7
 8044922:	bd80      	pop	{r7, pc}
 8044924:	40000400 	.word	0x40000400
 8044928:	40023800 	.word	0x40023800
 804492c:	40020800 	.word	0x40020800

08044930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8044930:	b480      	push	{r7}
 8044932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8044934:	e7fe      	b.n	8044934 <NMI_Handler+0x4>

08044936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8044936:	b480      	push	{r7}
 8044938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804493a:	e7fe      	b.n	804493a <HardFault_Handler+0x4>

0804493c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804493c:	b480      	push	{r7}
 804493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8044940:	e7fe      	b.n	8044940 <MemManage_Handler+0x4>

08044942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8044942:	b480      	push	{r7}
 8044944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8044946:	e7fe      	b.n	8044946 <BusFault_Handler+0x4>

08044948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8044948:	b480      	push	{r7}
 804494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804494c:	e7fe      	b.n	804494c <UsageFault_Handler+0x4>

0804494e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804494e:	b480      	push	{r7}
 8044950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8044952:	bf00      	nop
 8044954:	46bd      	mov	sp, r7
 8044956:	f85d 7b04 	ldr.w	r7, [sp], #4
 804495a:	4770      	bx	lr

0804495c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804495c:	b480      	push	{r7}
 804495e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8044960:	bf00      	nop
 8044962:	46bd      	mov	sp, r7
 8044964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044968:	4770      	bx	lr

0804496a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804496a:	b480      	push	{r7}
 804496c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804496e:	bf00      	nop
 8044970:	46bd      	mov	sp, r7
 8044972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044976:	4770      	bx	lr

08044978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8044978:	b580      	push	{r7, lr}
 804497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804497c:	f000 fa1c 	bl	8044db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8044980:	bf00      	nop
 8044982:	bd80      	pop	{r7, pc}

08044984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8044984:	b580      	push	{r7, lr}
 8044986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 8044988:	4b0f      	ldr	r3, [pc, #60]	; (80449c8 <EXTI9_5_IRQHandler+0x44>)
 804498a:	695b      	ldr	r3, [r3, #20]
 804498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044990:	2b00      	cmp	r3, #0
 8044992:	d00b      	beq.n	80449ac <EXTI9_5_IRQHandler+0x28>
	{
		//Test output pin for zero crossing
		//HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8044994:	2104      	movs	r1, #4
 8044996:	480d      	ldr	r0, [pc, #52]	; (80449cc <EXTI9_5_IRQHandler+0x48>)
 8044998:	f002 ffe4 	bl	8047964 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 804499c:	2108      	movs	r1, #8
 804499e:	480b      	ldr	r0, [pc, #44]	; (80449cc <EXTI9_5_IRQHandler+0x48>)
 80449a0:	f002 ffe0 	bl	8047964 <HAL_TIM_PWM_Start>
		PIDFlag = 1;
 80449a4:	4b0a      	ldr	r3, [pc, #40]	; (80449d0 <EXTI9_5_IRQHandler+0x4c>)
 80449a6:	2201      	movs	r2, #1
 80449a8:	701a      	strb	r2, [r3, #0]
 80449aa:	e007      	b.n	80449bc <EXTI9_5_IRQHandler+0x38>
	}
	else
	{
		//Do nothing
			//FlagBank1=0;
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80449ac:	2104      	movs	r1, #4
 80449ae:	4807      	ldr	r0, [pc, #28]	; (80449cc <EXTI9_5_IRQHandler+0x48>)
 80449b0:	f003 f8a0 	bl	8047af4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80449b4:	2108      	movs	r1, #8
 80449b6:	4805      	ldr	r0, [pc, #20]	; (80449cc <EXTI9_5_IRQHandler+0x48>)
 80449b8:	f003 f89c 	bl	8047af4 <HAL_TIM_PWM_Stop>
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZeroCrossingPin_Pin);
 80449bc:	2040      	movs	r0, #64	; 0x40
 80449be:	f001 f927 	bl	8045c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80449c2:	bf00      	nop
 80449c4:	bd80      	pop	{r7, pc}
 80449c6:	bf00      	nop
 80449c8:	40013c00 	.word	0x40013c00
 80449cc:	200002b8 	.word	0x200002b8
 80449d0:	200003f4 	.word	0x200003f4

080449d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80449d4:	b580      	push	{r7, lr}
 80449d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ms_counterEncButton++;
 80449d8:	4b1b      	ldr	r3, [pc, #108]	; (8044a48 <TIM2_IRQHandler+0x74>)
 80449da:	881b      	ldrh	r3, [r3, #0]
 80449dc:	b29b      	uxth	r3, r3
 80449de:	3301      	adds	r3, #1
 80449e0:	b29a      	uxth	r2, r3
 80449e2:	4b19      	ldr	r3, [pc, #100]	; (8044a48 <TIM2_IRQHandler+0x74>)
 80449e4:	801a      	strh	r2, [r3, #0]
	ms_counter++;
 80449e6:	4b19      	ldr	r3, [pc, #100]	; (8044a4c <TIM2_IRQHandler+0x78>)
 80449e8:	681b      	ldr	r3, [r3, #0]
 80449ea:	3301      	adds	r3, #1
 80449ec:	4a17      	ldr	r2, [pc, #92]	; (8044a4c <TIM2_IRQHandler+0x78>)
 80449ee:	6013      	str	r3, [r2, #0]
	CtrlParams.counter_1ms++;
 80449f0:	4b17      	ldr	r3, [pc, #92]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 80449f2:	685b      	ldr	r3, [r3, #4]
 80449f4:	3301      	adds	r3, #1
 80449f6:	4a16      	ldr	r2, [pc, #88]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 80449f8:	6053      	str	r3, [r2, #4]
	CtrlParams.counter_10ms++;
 80449fa:	4b15      	ldr	r3, [pc, #84]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 80449fc:	689b      	ldr	r3, [r3, #8]
 80449fe:	3301      	adds	r3, #1
 8044a00:	4a13      	ldr	r2, [pc, #76]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a02:	6093      	str	r3, [r2, #8]
	CtrlParams.counter_250ms++;
 8044a04:	4b12      	ldr	r3, [pc, #72]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a06:	691b      	ldr	r3, [r3, #16]
 8044a08:	3301      	adds	r3, #1
 8044a0a:	4a11      	ldr	r2, [pc, #68]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a0c:	6113      	str	r3, [r2, #16]
	CtrlParams.counter_1000ms++;
 8044a0e:	4b10      	ldr	r3, [pc, #64]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a10:	695b      	ldr	r3, [r3, #20]
 8044a12:	3301      	adds	r3, #1
 8044a14:	4a0e      	ldr	r2, [pc, #56]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a16:	6153      	str	r3, [r2, #20]
	CtrlParams.counter_500ms++;
 8044a18:	4b0d      	ldr	r3, [pc, #52]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a1a:	699b      	ldr	r3, [r3, #24]
 8044a1c:	3301      	adds	r3, #1
 8044a1e:	4a0c      	ldr	r2, [pc, #48]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a20:	6193      	str	r3, [r2, #24]

	if(1 == ms_counter)
 8044a22:	4b0a      	ldr	r3, [pc, #40]	; (8044a4c <TIM2_IRQHandler+0x78>)
 8044a24:	681b      	ldr	r3, [r3, #0]
 8044a26:	2b01      	cmp	r3, #1
 8044a28:	d108      	bne.n	8044a3c <TIM2_IRQHandler+0x68>
	{
		CtrlParams.p_temperature = &temperature;
 8044a2a:	4b09      	ldr	r3, [pc, #36]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a2c:	4a09      	ldr	r2, [pc, #36]	; (8044a54 <TIM2_IRQHandler+0x80>)
 8044a2e:	61da      	str	r2, [r3, #28]
		CtrlParams.p_StatusFlags = &Flags;
 8044a30:	4b07      	ldr	r3, [pc, #28]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a32:	4a09      	ldr	r2, [pc, #36]	; (8044a58 <TIM2_IRQHandler+0x84>)
 8044a34:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlParams.p_PIDError    = &PIDerror;
 8044a36:	4b06      	ldr	r3, [pc, #24]	; (8044a50 <TIM2_IRQHandler+0x7c>)
 8044a38:	4a08      	ldr	r2, [pc, #32]	; (8044a5c <TIM2_IRQHandler+0x88>)
 8044a3a:	621a      	str	r2, [r3, #32]
	{
		//HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8044a3c:	4808      	ldr	r0, [pc, #32]	; (8044a60 <TIM2_IRQHandler+0x8c>)
 8044a3e:	f003 f9fd 	bl	8047e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8044a42:	bf00      	nop
 8044a44:	bd80      	pop	{r7, pc}
 8044a46:	bf00      	nop
 8044a48:	200004f6 	.word	0x200004f6
 8044a4c:	20000224 	.word	0x20000224
 8044a50:	200004c4 	.word	0x200004c4
 8044a54:	20000228 	.word	0x20000228
 8044a58:	200004f8 	.word	0x200004f8
 8044a5c:	2000022c 	.word	0x2000022c
 8044a60:	200003ac 	.word	0x200003ac

08044a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8044a64:	b580      	push	{r7, lr}
 8044a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderButtonPin_Pin);
 8044a68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8044a6c:	f001 f8d0 	bl	8045c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  if(ms_counterEncButton > 80)
 8044a70:	4b08      	ldr	r3, [pc, #32]	; (8044a94 <EXTI15_10_IRQHandler+0x30>)
 8044a72:	881b      	ldrh	r3, [r3, #0]
 8044a74:	b29b      	uxth	r3, r3
 8044a76:	2b50      	cmp	r3, #80	; 0x50
 8044a78:	d90a      	bls.n	8044a90 <EXTI15_10_IRQHandler+0x2c>
  {


		  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8044a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8044a7e:	4806      	ldr	r0, [pc, #24]	; (8044a98 <EXTI15_10_IRQHandler+0x34>)
 8044a80:	f001 f8ab 	bl	8045bda <HAL_GPIO_TogglePin>
		  ui8_encButtonPressed = TRUE;
 8044a84:	4b05      	ldr	r3, [pc, #20]	; (8044a9c <EXTI15_10_IRQHandler+0x38>)
 8044a86:	2201      	movs	r2, #1
 8044a88:	701a      	strb	r2, [r3, #0]

		  ms_counterEncButton = 0;
 8044a8a:	4b02      	ldr	r3, [pc, #8]	; (8044a94 <EXTI15_10_IRQHandler+0x30>)
 8044a8c:	2200      	movs	r2, #0
 8044a8e:	801a      	strh	r2, [r3, #0]
  }



  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8044a90:	bf00      	nop
 8044a92:	bd80      	pop	{r7, pc}
 8044a94:	200004f6 	.word	0x200004f6
 8044a98:	40020c00 	.word	0x40020c00
 8044a9c:	2000034d 	.word	0x2000034d

08044aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8044aa0:	b480      	push	{r7}
 8044aa2:	af00      	add	r7, sp, #0
	return 1;
 8044aa4:	2301      	movs	r3, #1
}
 8044aa6:	4618      	mov	r0, r3
 8044aa8:	46bd      	mov	sp, r7
 8044aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044aae:	4770      	bx	lr

08044ab0 <_kill>:

int _kill(int pid, int sig)
{
 8044ab0:	b580      	push	{r7, lr}
 8044ab2:	b082      	sub	sp, #8
 8044ab4:	af00      	add	r7, sp, #0
 8044ab6:	6078      	str	r0, [r7, #4]
 8044ab8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8044aba:	f004 f849 	bl	8048b50 <__errno>
 8044abe:	4603      	mov	r3, r0
 8044ac0:	2216      	movs	r2, #22
 8044ac2:	601a      	str	r2, [r3, #0]
	return -1;
 8044ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8044ac8:	4618      	mov	r0, r3
 8044aca:	3708      	adds	r7, #8
 8044acc:	46bd      	mov	sp, r7
 8044ace:	bd80      	pop	{r7, pc}

08044ad0 <_exit>:

void _exit (int status)
{
 8044ad0:	b580      	push	{r7, lr}
 8044ad2:	b082      	sub	sp, #8
 8044ad4:	af00      	add	r7, sp, #0
 8044ad6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8044ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8044adc:	6878      	ldr	r0, [r7, #4]
 8044ade:	f7ff ffe7 	bl	8044ab0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8044ae2:	e7fe      	b.n	8044ae2 <_exit+0x12>

08044ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8044ae4:	b580      	push	{r7, lr}
 8044ae6:	b086      	sub	sp, #24
 8044ae8:	af00      	add	r7, sp, #0
 8044aea:	60f8      	str	r0, [r7, #12]
 8044aec:	60b9      	str	r1, [r7, #8]
 8044aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044af0:	2300      	movs	r3, #0
 8044af2:	617b      	str	r3, [r7, #20]
 8044af4:	e00a      	b.n	8044b0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8044af6:	f3af 8000 	nop.w
 8044afa:	4601      	mov	r1, r0
 8044afc:	68bb      	ldr	r3, [r7, #8]
 8044afe:	1c5a      	adds	r2, r3, #1
 8044b00:	60ba      	str	r2, [r7, #8]
 8044b02:	b2ca      	uxtb	r2, r1
 8044b04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044b06:	697b      	ldr	r3, [r7, #20]
 8044b08:	3301      	adds	r3, #1
 8044b0a:	617b      	str	r3, [r7, #20]
 8044b0c:	697a      	ldr	r2, [r7, #20]
 8044b0e:	687b      	ldr	r3, [r7, #4]
 8044b10:	429a      	cmp	r2, r3
 8044b12:	dbf0      	blt.n	8044af6 <_read+0x12>
	}

return len;
 8044b14:	687b      	ldr	r3, [r7, #4]
}
 8044b16:	4618      	mov	r0, r3
 8044b18:	3718      	adds	r7, #24
 8044b1a:	46bd      	mov	sp, r7
 8044b1c:	bd80      	pop	{r7, pc}

08044b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8044b1e:	b580      	push	{r7, lr}
 8044b20:	b086      	sub	sp, #24
 8044b22:	af00      	add	r7, sp, #0
 8044b24:	60f8      	str	r0, [r7, #12]
 8044b26:	60b9      	str	r1, [r7, #8]
 8044b28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044b2a:	2300      	movs	r3, #0
 8044b2c:	617b      	str	r3, [r7, #20]
 8044b2e:	e009      	b.n	8044b44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8044b30:	68bb      	ldr	r3, [r7, #8]
 8044b32:	1c5a      	adds	r2, r3, #1
 8044b34:	60ba      	str	r2, [r7, #8]
 8044b36:	781b      	ldrb	r3, [r3, #0]
 8044b38:	4618      	mov	r0, r3
 8044b3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8044b3e:	697b      	ldr	r3, [r7, #20]
 8044b40:	3301      	adds	r3, #1
 8044b42:	617b      	str	r3, [r7, #20]
 8044b44:	697a      	ldr	r2, [r7, #20]
 8044b46:	687b      	ldr	r3, [r7, #4]
 8044b48:	429a      	cmp	r2, r3
 8044b4a:	dbf1      	blt.n	8044b30 <_write+0x12>
	}
	return len;
 8044b4c:	687b      	ldr	r3, [r7, #4]
}
 8044b4e:	4618      	mov	r0, r3
 8044b50:	3718      	adds	r7, #24
 8044b52:	46bd      	mov	sp, r7
 8044b54:	bd80      	pop	{r7, pc}

08044b56 <_close>:

int _close(int file)
{
 8044b56:	b480      	push	{r7}
 8044b58:	b083      	sub	sp, #12
 8044b5a:	af00      	add	r7, sp, #0
 8044b5c:	6078      	str	r0, [r7, #4]
	return -1;
 8044b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8044b62:	4618      	mov	r0, r3
 8044b64:	370c      	adds	r7, #12
 8044b66:	46bd      	mov	sp, r7
 8044b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b6c:	4770      	bx	lr

08044b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8044b6e:	b480      	push	{r7}
 8044b70:	b083      	sub	sp, #12
 8044b72:	af00      	add	r7, sp, #0
 8044b74:	6078      	str	r0, [r7, #4]
 8044b76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8044b78:	683b      	ldr	r3, [r7, #0]
 8044b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8044b7e:	605a      	str	r2, [r3, #4]
	return 0;
 8044b80:	2300      	movs	r3, #0
}
 8044b82:	4618      	mov	r0, r3
 8044b84:	370c      	adds	r7, #12
 8044b86:	46bd      	mov	sp, r7
 8044b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b8c:	4770      	bx	lr

08044b8e <_isatty>:

int _isatty(int file)
{
 8044b8e:	b480      	push	{r7}
 8044b90:	b083      	sub	sp, #12
 8044b92:	af00      	add	r7, sp, #0
 8044b94:	6078      	str	r0, [r7, #4]
	return 1;
 8044b96:	2301      	movs	r3, #1
}
 8044b98:	4618      	mov	r0, r3
 8044b9a:	370c      	adds	r7, #12
 8044b9c:	46bd      	mov	sp, r7
 8044b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ba2:	4770      	bx	lr

08044ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8044ba4:	b480      	push	{r7}
 8044ba6:	b085      	sub	sp, #20
 8044ba8:	af00      	add	r7, sp, #0
 8044baa:	60f8      	str	r0, [r7, #12]
 8044bac:	60b9      	str	r1, [r7, #8]
 8044bae:	607a      	str	r2, [r7, #4]
	return 0;
 8044bb0:	2300      	movs	r3, #0
}
 8044bb2:	4618      	mov	r0, r3
 8044bb4:	3714      	adds	r7, #20
 8044bb6:	46bd      	mov	sp, r7
 8044bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044bbc:	4770      	bx	lr
	...

08044bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8044bc0:	b580      	push	{r7, lr}
 8044bc2:	b086      	sub	sp, #24
 8044bc4:	af00      	add	r7, sp, #0
 8044bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8044bc8:	4a14      	ldr	r2, [pc, #80]	; (8044c1c <_sbrk+0x5c>)
 8044bca:	4b15      	ldr	r3, [pc, #84]	; (8044c20 <_sbrk+0x60>)
 8044bcc:	1ad3      	subs	r3, r2, r3
 8044bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8044bd0:	697b      	ldr	r3, [r7, #20]
 8044bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8044bd4:	4b13      	ldr	r3, [pc, #76]	; (8044c24 <_sbrk+0x64>)
 8044bd6:	681b      	ldr	r3, [r3, #0]
 8044bd8:	2b00      	cmp	r3, #0
 8044bda:	d102      	bne.n	8044be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8044bdc:	4b11      	ldr	r3, [pc, #68]	; (8044c24 <_sbrk+0x64>)
 8044bde:	4a12      	ldr	r2, [pc, #72]	; (8044c28 <_sbrk+0x68>)
 8044be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8044be2:	4b10      	ldr	r3, [pc, #64]	; (8044c24 <_sbrk+0x64>)
 8044be4:	681a      	ldr	r2, [r3, #0]
 8044be6:	687b      	ldr	r3, [r7, #4]
 8044be8:	4413      	add	r3, r2
 8044bea:	693a      	ldr	r2, [r7, #16]
 8044bec:	429a      	cmp	r2, r3
 8044bee:	d207      	bcs.n	8044c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8044bf0:	f003 ffae 	bl	8048b50 <__errno>
 8044bf4:	4603      	mov	r3, r0
 8044bf6:	220c      	movs	r2, #12
 8044bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8044bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8044bfe:	e009      	b.n	8044c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8044c00:	4b08      	ldr	r3, [pc, #32]	; (8044c24 <_sbrk+0x64>)
 8044c02:	681b      	ldr	r3, [r3, #0]
 8044c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8044c06:	4b07      	ldr	r3, [pc, #28]	; (8044c24 <_sbrk+0x64>)
 8044c08:	681a      	ldr	r2, [r3, #0]
 8044c0a:	687b      	ldr	r3, [r7, #4]
 8044c0c:	4413      	add	r3, r2
 8044c0e:	4a05      	ldr	r2, [pc, #20]	; (8044c24 <_sbrk+0x64>)
 8044c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8044c12:	68fb      	ldr	r3, [r7, #12]
}
 8044c14:	4618      	mov	r0, r3
 8044c16:	3718      	adds	r7, #24
 8044c18:	46bd      	mov	sp, r7
 8044c1a:	bd80      	pop	{r7, pc}
 8044c1c:	20020000 	.word	0x20020000
 8044c20:	00000400 	.word	0x00000400
 8044c24:	20000230 	.word	0x20000230
 8044c28:	20000528 	.word	0x20000528

08044c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8044c2c:	b480      	push	{r7}
 8044c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8044c30:	4b07      	ldr	r3, [pc, #28]	; (8044c50 <SystemInit+0x24>)
 8044c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044c36:	4a06      	ldr	r2, [pc, #24]	; (8044c50 <SystemInit+0x24>)
 8044c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8044c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8044c40:	4b03      	ldr	r3, [pc, #12]	; (8044c50 <SystemInit+0x24>)
 8044c42:	4a04      	ldr	r2, [pc, #16]	; (8044c54 <SystemInit+0x28>)
 8044c44:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8044c46:	bf00      	nop
 8044c48:	46bd      	mov	sp, r7
 8044c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c4e:	4770      	bx	lr
 8044c50:	e000ed00 	.word	0xe000ed00
 8044c54:	08040000 	.word	0x08040000

08044c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8044c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8044c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8044c5c:	480d      	ldr	r0, [pc, #52]	; (8044c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8044c5e:	490e      	ldr	r1, [pc, #56]	; (8044c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8044c60:	4a0e      	ldr	r2, [pc, #56]	; (8044c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8044c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8044c64:	e002      	b.n	8044c6c <LoopCopyDataInit>

08044c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8044c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8044c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8044c6a:	3304      	adds	r3, #4

08044c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8044c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8044c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8044c70:	d3f9      	bcc.n	8044c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8044c72:	4a0b      	ldr	r2, [pc, #44]	; (8044ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8044c74:	4c0b      	ldr	r4, [pc, #44]	; (8044ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8044c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8044c78:	e001      	b.n	8044c7e <LoopFillZerobss>

08044c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8044c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8044c7c:	3204      	adds	r2, #4

08044c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8044c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8044c80:	d3fb      	bcc.n	8044c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8044c82:	f7ff ffd3 	bl	8044c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8044c86:	f003 ff69 	bl	8048b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8044c8a:	f7ff f87f 	bl	8043d8c <main>
  bx  lr    
 8044c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8044c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8044c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8044c98:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8044c9c:	0804ea28 	.word	0x0804ea28
  ldr r2, =_sbss
 8044ca0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8044ca4:	20000524 	.word	0x20000524

08044ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8044ca8:	e7fe      	b.n	8044ca8 <ADC_IRQHandler>
	...

08044cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8044cac:	b580      	push	{r7, lr}
 8044cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044cb0:	4b0e      	ldr	r3, [pc, #56]	; (8044cec <HAL_Init+0x40>)
 8044cb2:	681b      	ldr	r3, [r3, #0]
 8044cb4:	4a0d      	ldr	r2, [pc, #52]	; (8044cec <HAL_Init+0x40>)
 8044cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8044cbc:	4b0b      	ldr	r3, [pc, #44]	; (8044cec <HAL_Init+0x40>)
 8044cbe:	681b      	ldr	r3, [r3, #0]
 8044cc0:	4a0a      	ldr	r2, [pc, #40]	; (8044cec <HAL_Init+0x40>)
 8044cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8044cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8044cc8:	4b08      	ldr	r3, [pc, #32]	; (8044cec <HAL_Init+0x40>)
 8044cca:	681b      	ldr	r3, [r3, #0]
 8044ccc:	4a07      	ldr	r2, [pc, #28]	; (8044cec <HAL_Init+0x40>)
 8044cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8044cd4:	2003      	movs	r0, #3
 8044cd6:	f000 f9a7 	bl	8045028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8044cda:	2000      	movs	r0, #0
 8044cdc:	f000 f83c 	bl	8044d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8044ce0:	f7ff fc78 	bl	80445d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8044ce4:	2300      	movs	r3, #0
}
 8044ce6:	4618      	mov	r0, r3
 8044ce8:	bd80      	pop	{r7, pc}
 8044cea:	bf00      	nop
 8044cec:	40023c00 	.word	0x40023c00

08044cf0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8044cf0:	b580      	push	{r7, lr}
 8044cf2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8044cf4:	4b13      	ldr	r3, [pc, #76]	; (8044d44 <HAL_DeInit+0x54>)
 8044cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8044cfa:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8044cfc:	4b11      	ldr	r3, [pc, #68]	; (8044d44 <HAL_DeInit+0x54>)
 8044cfe:	2200      	movs	r2, #0
 8044d00:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8044d02:	4b10      	ldr	r3, [pc, #64]	; (8044d44 <HAL_DeInit+0x54>)
 8044d04:	f04f 32ff 	mov.w	r2, #4294967295
 8044d08:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8044d0a:	4b0e      	ldr	r3, [pc, #56]	; (8044d44 <HAL_DeInit+0x54>)
 8044d0c:	2200      	movs	r2, #0
 8044d0e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8044d10:	4b0c      	ldr	r3, [pc, #48]	; (8044d44 <HAL_DeInit+0x54>)
 8044d12:	f04f 32ff 	mov.w	r2, #4294967295
 8044d16:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8044d18:	4b0a      	ldr	r3, [pc, #40]	; (8044d44 <HAL_DeInit+0x54>)
 8044d1a:	2200      	movs	r2, #0
 8044d1c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8044d1e:	4b09      	ldr	r3, [pc, #36]	; (8044d44 <HAL_DeInit+0x54>)
 8044d20:	f04f 32ff 	mov.w	r2, #4294967295
 8044d24:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8044d26:	4b07      	ldr	r3, [pc, #28]	; (8044d44 <HAL_DeInit+0x54>)
 8044d28:	2200      	movs	r2, #0
 8044d2a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8044d2c:	4b05      	ldr	r3, [pc, #20]	; (8044d44 <HAL_DeInit+0x54>)
 8044d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8044d32:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8044d34:	4b03      	ldr	r3, [pc, #12]	; (8044d44 <HAL_DeInit+0x54>)
 8044d36:	2200      	movs	r2, #0
 8044d38:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8044d3a:	f000 f805 	bl	8044d48 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8044d3e:	2300      	movs	r3, #0
}
 8044d40:	4618      	mov	r0, r3
 8044d42:	bd80      	pop	{r7, pc}
 8044d44:	40023800 	.word	0x40023800

08044d48 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8044d48:	b480      	push	{r7}
 8044d4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8044d4c:	bf00      	nop
 8044d4e:	46bd      	mov	sp, r7
 8044d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d54:	4770      	bx	lr
	...

08044d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8044d58:	b580      	push	{r7, lr}
 8044d5a:	b082      	sub	sp, #8
 8044d5c:	af00      	add	r7, sp, #0
 8044d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8044d60:	4b12      	ldr	r3, [pc, #72]	; (8044dac <HAL_InitTick+0x54>)
 8044d62:	681a      	ldr	r2, [r3, #0]
 8044d64:	4b12      	ldr	r3, [pc, #72]	; (8044db0 <HAL_InitTick+0x58>)
 8044d66:	781b      	ldrb	r3, [r3, #0]
 8044d68:	4619      	mov	r1, r3
 8044d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8044d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8044d76:	4618      	mov	r0, r3
 8044d78:	f000 f999 	bl	80450ae <HAL_SYSTICK_Config>
 8044d7c:	4603      	mov	r3, r0
 8044d7e:	2b00      	cmp	r3, #0
 8044d80:	d001      	beq.n	8044d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8044d82:	2301      	movs	r3, #1
 8044d84:	e00e      	b.n	8044da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8044d86:	687b      	ldr	r3, [r7, #4]
 8044d88:	2b0f      	cmp	r3, #15
 8044d8a:	d80a      	bhi.n	8044da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8044d8c:	2200      	movs	r2, #0
 8044d8e:	6879      	ldr	r1, [r7, #4]
 8044d90:	f04f 30ff 	mov.w	r0, #4294967295
 8044d94:	f000 f953 	bl	804503e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8044d98:	4a06      	ldr	r2, [pc, #24]	; (8044db4 <HAL_InitTick+0x5c>)
 8044d9a:	687b      	ldr	r3, [r7, #4]
 8044d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8044d9e:	2300      	movs	r3, #0
 8044da0:	e000      	b.n	8044da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8044da2:	2301      	movs	r3, #1
}
 8044da4:	4618      	mov	r0, r3
 8044da6:	3708      	adds	r7, #8
 8044da8:	46bd      	mov	sp, r7
 8044daa:	bd80      	pop	{r7, pc}
 8044dac:	20000008 	.word	0x20000008
 8044db0:	20000010 	.word	0x20000010
 8044db4:	2000000c 	.word	0x2000000c

08044db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8044db8:	b480      	push	{r7}
 8044dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8044dbc:	4b06      	ldr	r3, [pc, #24]	; (8044dd8 <HAL_IncTick+0x20>)
 8044dbe:	781b      	ldrb	r3, [r3, #0]
 8044dc0:	461a      	mov	r2, r3
 8044dc2:	4b06      	ldr	r3, [pc, #24]	; (8044ddc <HAL_IncTick+0x24>)
 8044dc4:	681b      	ldr	r3, [r3, #0]
 8044dc6:	4413      	add	r3, r2
 8044dc8:	4a04      	ldr	r2, [pc, #16]	; (8044ddc <HAL_IncTick+0x24>)
 8044dca:	6013      	str	r3, [r2, #0]
}
 8044dcc:	bf00      	nop
 8044dce:	46bd      	mov	sp, r7
 8044dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044dd4:	4770      	bx	lr
 8044dd6:	bf00      	nop
 8044dd8:	20000010 	.word	0x20000010
 8044ddc:	20000500 	.word	0x20000500

08044de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8044de0:	b480      	push	{r7}
 8044de2:	af00      	add	r7, sp, #0
  return uwTick;
 8044de4:	4b03      	ldr	r3, [pc, #12]	; (8044df4 <HAL_GetTick+0x14>)
 8044de6:	681b      	ldr	r3, [r3, #0]
}
 8044de8:	4618      	mov	r0, r3
 8044dea:	46bd      	mov	sp, r7
 8044dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044df0:	4770      	bx	lr
 8044df2:	bf00      	nop
 8044df4:	20000500 	.word	0x20000500

08044df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8044df8:	b580      	push	{r7, lr}
 8044dfa:	b084      	sub	sp, #16
 8044dfc:	af00      	add	r7, sp, #0
 8044dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8044e00:	f7ff ffee 	bl	8044de0 <HAL_GetTick>
 8044e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8044e06:	687b      	ldr	r3, [r7, #4]
 8044e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8044e0a:	68fb      	ldr	r3, [r7, #12]
 8044e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044e10:	d005      	beq.n	8044e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8044e12:	4b0a      	ldr	r3, [pc, #40]	; (8044e3c <HAL_Delay+0x44>)
 8044e14:	781b      	ldrb	r3, [r3, #0]
 8044e16:	461a      	mov	r2, r3
 8044e18:	68fb      	ldr	r3, [r7, #12]
 8044e1a:	4413      	add	r3, r2
 8044e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8044e1e:	bf00      	nop
 8044e20:	f7ff ffde 	bl	8044de0 <HAL_GetTick>
 8044e24:	4602      	mov	r2, r0
 8044e26:	68bb      	ldr	r3, [r7, #8]
 8044e28:	1ad3      	subs	r3, r2, r3
 8044e2a:	68fa      	ldr	r2, [r7, #12]
 8044e2c:	429a      	cmp	r2, r3
 8044e2e:	d8f7      	bhi.n	8044e20 <HAL_Delay+0x28>
  {
  }
}
 8044e30:	bf00      	nop
 8044e32:	bf00      	nop
 8044e34:	3710      	adds	r7, #16
 8044e36:	46bd      	mov	sp, r7
 8044e38:	bd80      	pop	{r7, pc}
 8044e3a:	bf00      	nop
 8044e3c:	20000010 	.word	0x20000010

08044e40 <__NVIC_SetPriorityGrouping>:
{
 8044e40:	b480      	push	{r7}
 8044e42:	b085      	sub	sp, #20
 8044e44:	af00      	add	r7, sp, #0
 8044e46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8044e48:	687b      	ldr	r3, [r7, #4]
 8044e4a:	f003 0307 	and.w	r3, r3, #7
 8044e4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8044e50:	4b0c      	ldr	r3, [pc, #48]	; (8044e84 <__NVIC_SetPriorityGrouping+0x44>)
 8044e52:	68db      	ldr	r3, [r3, #12]
 8044e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8044e56:	68ba      	ldr	r2, [r7, #8]
 8044e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8044e5c:	4013      	ands	r3, r2
 8044e5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8044e60:	68fb      	ldr	r3, [r7, #12]
 8044e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8044e64:	68bb      	ldr	r3, [r7, #8]
 8044e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8044e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8044e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8044e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8044e72:	4a04      	ldr	r2, [pc, #16]	; (8044e84 <__NVIC_SetPriorityGrouping+0x44>)
 8044e74:	68bb      	ldr	r3, [r7, #8]
 8044e76:	60d3      	str	r3, [r2, #12]
}
 8044e78:	bf00      	nop
 8044e7a:	3714      	adds	r7, #20
 8044e7c:	46bd      	mov	sp, r7
 8044e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e82:	4770      	bx	lr
 8044e84:	e000ed00 	.word	0xe000ed00

08044e88 <__NVIC_GetPriorityGrouping>:
{
 8044e88:	b480      	push	{r7}
 8044e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8044e8c:	4b04      	ldr	r3, [pc, #16]	; (8044ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8044e8e:	68db      	ldr	r3, [r3, #12]
 8044e90:	0a1b      	lsrs	r3, r3, #8
 8044e92:	f003 0307 	and.w	r3, r3, #7
}
 8044e96:	4618      	mov	r0, r3
 8044e98:	46bd      	mov	sp, r7
 8044e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e9e:	4770      	bx	lr
 8044ea0:	e000ed00 	.word	0xe000ed00

08044ea4 <__NVIC_EnableIRQ>:
{
 8044ea4:	b480      	push	{r7}
 8044ea6:	b083      	sub	sp, #12
 8044ea8:	af00      	add	r7, sp, #0
 8044eaa:	4603      	mov	r3, r0
 8044eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044eb2:	2b00      	cmp	r3, #0
 8044eb4:	db0b      	blt.n	8044ece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044eb6:	79fb      	ldrb	r3, [r7, #7]
 8044eb8:	f003 021f 	and.w	r2, r3, #31
 8044ebc:	4907      	ldr	r1, [pc, #28]	; (8044edc <__NVIC_EnableIRQ+0x38>)
 8044ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044ec2:	095b      	lsrs	r3, r3, #5
 8044ec4:	2001      	movs	r0, #1
 8044ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8044eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8044ece:	bf00      	nop
 8044ed0:	370c      	adds	r7, #12
 8044ed2:	46bd      	mov	sp, r7
 8044ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ed8:	4770      	bx	lr
 8044eda:	bf00      	nop
 8044edc:	e000e100 	.word	0xe000e100

08044ee0 <__NVIC_DisableIRQ>:
{
 8044ee0:	b480      	push	{r7}
 8044ee2:	b083      	sub	sp, #12
 8044ee4:	af00      	add	r7, sp, #0
 8044ee6:	4603      	mov	r3, r0
 8044ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044eee:	2b00      	cmp	r3, #0
 8044ef0:	db12      	blt.n	8044f18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044ef2:	79fb      	ldrb	r3, [r7, #7]
 8044ef4:	f003 021f 	and.w	r2, r3, #31
 8044ef8:	490a      	ldr	r1, [pc, #40]	; (8044f24 <__NVIC_DisableIRQ+0x44>)
 8044efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044efe:	095b      	lsrs	r3, r3, #5
 8044f00:	2001      	movs	r0, #1
 8044f02:	fa00 f202 	lsl.w	r2, r0, r2
 8044f06:	3320      	adds	r3, #32
 8044f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8044f0c:	f3bf 8f4f 	dsb	sy
}
 8044f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8044f12:	f3bf 8f6f 	isb	sy
}
 8044f16:	bf00      	nop
}
 8044f18:	bf00      	nop
 8044f1a:	370c      	adds	r7, #12
 8044f1c:	46bd      	mov	sp, r7
 8044f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f22:	4770      	bx	lr
 8044f24:	e000e100 	.word	0xe000e100

08044f28 <__NVIC_SetPriority>:
{
 8044f28:	b480      	push	{r7}
 8044f2a:	b083      	sub	sp, #12
 8044f2c:	af00      	add	r7, sp, #0
 8044f2e:	4603      	mov	r3, r0
 8044f30:	6039      	str	r1, [r7, #0]
 8044f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044f38:	2b00      	cmp	r3, #0
 8044f3a:	db0a      	blt.n	8044f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044f3c:	683b      	ldr	r3, [r7, #0]
 8044f3e:	b2da      	uxtb	r2, r3
 8044f40:	490c      	ldr	r1, [pc, #48]	; (8044f74 <__NVIC_SetPriority+0x4c>)
 8044f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044f46:	0112      	lsls	r2, r2, #4
 8044f48:	b2d2      	uxtb	r2, r2
 8044f4a:	440b      	add	r3, r1
 8044f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8044f50:	e00a      	b.n	8044f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044f52:	683b      	ldr	r3, [r7, #0]
 8044f54:	b2da      	uxtb	r2, r3
 8044f56:	4908      	ldr	r1, [pc, #32]	; (8044f78 <__NVIC_SetPriority+0x50>)
 8044f58:	79fb      	ldrb	r3, [r7, #7]
 8044f5a:	f003 030f 	and.w	r3, r3, #15
 8044f5e:	3b04      	subs	r3, #4
 8044f60:	0112      	lsls	r2, r2, #4
 8044f62:	b2d2      	uxtb	r2, r2
 8044f64:	440b      	add	r3, r1
 8044f66:	761a      	strb	r2, [r3, #24]
}
 8044f68:	bf00      	nop
 8044f6a:	370c      	adds	r7, #12
 8044f6c:	46bd      	mov	sp, r7
 8044f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f72:	4770      	bx	lr
 8044f74:	e000e100 	.word	0xe000e100
 8044f78:	e000ed00 	.word	0xe000ed00

08044f7c <NVIC_EncodePriority>:
{
 8044f7c:	b480      	push	{r7}
 8044f7e:	b089      	sub	sp, #36	; 0x24
 8044f80:	af00      	add	r7, sp, #0
 8044f82:	60f8      	str	r0, [r7, #12]
 8044f84:	60b9      	str	r1, [r7, #8]
 8044f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8044f88:	68fb      	ldr	r3, [r7, #12]
 8044f8a:	f003 0307 	and.w	r3, r3, #7
 8044f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8044f90:	69fb      	ldr	r3, [r7, #28]
 8044f92:	f1c3 0307 	rsb	r3, r3, #7
 8044f96:	2b04      	cmp	r3, #4
 8044f98:	bf28      	it	cs
 8044f9a:	2304      	movcs	r3, #4
 8044f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8044f9e:	69fb      	ldr	r3, [r7, #28]
 8044fa0:	3304      	adds	r3, #4
 8044fa2:	2b06      	cmp	r3, #6
 8044fa4:	d902      	bls.n	8044fac <NVIC_EncodePriority+0x30>
 8044fa6:	69fb      	ldr	r3, [r7, #28]
 8044fa8:	3b03      	subs	r3, #3
 8044faa:	e000      	b.n	8044fae <NVIC_EncodePriority+0x32>
 8044fac:	2300      	movs	r3, #0
 8044fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8044fb4:	69bb      	ldr	r3, [r7, #24]
 8044fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8044fba:	43da      	mvns	r2, r3
 8044fbc:	68bb      	ldr	r3, [r7, #8]
 8044fbe:	401a      	ands	r2, r3
 8044fc0:	697b      	ldr	r3, [r7, #20]
 8044fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8044fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8044fc8:	697b      	ldr	r3, [r7, #20]
 8044fca:	fa01 f303 	lsl.w	r3, r1, r3
 8044fce:	43d9      	mvns	r1, r3
 8044fd0:	687b      	ldr	r3, [r7, #4]
 8044fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044fd4:	4313      	orrs	r3, r2
}
 8044fd6:	4618      	mov	r0, r3
 8044fd8:	3724      	adds	r7, #36	; 0x24
 8044fda:	46bd      	mov	sp, r7
 8044fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044fe0:	4770      	bx	lr
	...

08044fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8044fe4:	b580      	push	{r7, lr}
 8044fe6:	b082      	sub	sp, #8
 8044fe8:	af00      	add	r7, sp, #0
 8044fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8044fec:	687b      	ldr	r3, [r7, #4]
 8044fee:	3b01      	subs	r3, #1
 8044ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8044ff4:	d301      	bcc.n	8044ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8044ff6:	2301      	movs	r3, #1
 8044ff8:	e00f      	b.n	804501a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8044ffa:	4a0a      	ldr	r2, [pc, #40]	; (8045024 <SysTick_Config+0x40>)
 8044ffc:	687b      	ldr	r3, [r7, #4]
 8044ffe:	3b01      	subs	r3, #1
 8045000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8045002:	210f      	movs	r1, #15
 8045004:	f04f 30ff 	mov.w	r0, #4294967295
 8045008:	f7ff ff8e 	bl	8044f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804500c:	4b05      	ldr	r3, [pc, #20]	; (8045024 <SysTick_Config+0x40>)
 804500e:	2200      	movs	r2, #0
 8045010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8045012:	4b04      	ldr	r3, [pc, #16]	; (8045024 <SysTick_Config+0x40>)
 8045014:	2207      	movs	r2, #7
 8045016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8045018:	2300      	movs	r3, #0
}
 804501a:	4618      	mov	r0, r3
 804501c:	3708      	adds	r7, #8
 804501e:	46bd      	mov	sp, r7
 8045020:	bd80      	pop	{r7, pc}
 8045022:	bf00      	nop
 8045024:	e000e010 	.word	0xe000e010

08045028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8045028:	b580      	push	{r7, lr}
 804502a:	b082      	sub	sp, #8
 804502c:	af00      	add	r7, sp, #0
 804502e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8045030:	6878      	ldr	r0, [r7, #4]
 8045032:	f7ff ff05 	bl	8044e40 <__NVIC_SetPriorityGrouping>
}
 8045036:	bf00      	nop
 8045038:	3708      	adds	r7, #8
 804503a:	46bd      	mov	sp, r7
 804503c:	bd80      	pop	{r7, pc}

0804503e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 804503e:	b580      	push	{r7, lr}
 8045040:	b086      	sub	sp, #24
 8045042:	af00      	add	r7, sp, #0
 8045044:	4603      	mov	r3, r0
 8045046:	60b9      	str	r1, [r7, #8]
 8045048:	607a      	str	r2, [r7, #4]
 804504a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 804504c:	2300      	movs	r3, #0
 804504e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8045050:	f7ff ff1a 	bl	8044e88 <__NVIC_GetPriorityGrouping>
 8045054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8045056:	687a      	ldr	r2, [r7, #4]
 8045058:	68b9      	ldr	r1, [r7, #8]
 804505a:	6978      	ldr	r0, [r7, #20]
 804505c:	f7ff ff8e 	bl	8044f7c <NVIC_EncodePriority>
 8045060:	4602      	mov	r2, r0
 8045062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8045066:	4611      	mov	r1, r2
 8045068:	4618      	mov	r0, r3
 804506a:	f7ff ff5d 	bl	8044f28 <__NVIC_SetPriority>
}
 804506e:	bf00      	nop
 8045070:	3718      	adds	r7, #24
 8045072:	46bd      	mov	sp, r7
 8045074:	bd80      	pop	{r7, pc}

08045076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8045076:	b580      	push	{r7, lr}
 8045078:	b082      	sub	sp, #8
 804507a:	af00      	add	r7, sp, #0
 804507c:	4603      	mov	r3, r0
 804507e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8045080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8045084:	4618      	mov	r0, r3
 8045086:	f7ff ff0d 	bl	8044ea4 <__NVIC_EnableIRQ>
}
 804508a:	bf00      	nop
 804508c:	3708      	adds	r7, #8
 804508e:	46bd      	mov	sp, r7
 8045090:	bd80      	pop	{r7, pc}

08045092 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8045092:	b580      	push	{r7, lr}
 8045094:	b082      	sub	sp, #8
 8045096:	af00      	add	r7, sp, #0
 8045098:	4603      	mov	r3, r0
 804509a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 804509c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80450a0:	4618      	mov	r0, r3
 80450a2:	f7ff ff1d 	bl	8044ee0 <__NVIC_DisableIRQ>
}
 80450a6:	bf00      	nop
 80450a8:	3708      	adds	r7, #8
 80450aa:	46bd      	mov	sp, r7
 80450ac:	bd80      	pop	{r7, pc}

080450ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80450ae:	b580      	push	{r7, lr}
 80450b0:	b082      	sub	sp, #8
 80450b2:	af00      	add	r7, sp, #0
 80450b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80450b6:	6878      	ldr	r0, [r7, #4]
 80450b8:	f7ff ff94 	bl	8044fe4 <SysTick_Config>
 80450bc:	4603      	mov	r3, r0
}
 80450be:	4618      	mov	r0, r3
 80450c0:	3708      	adds	r7, #8
 80450c2:	46bd      	mov	sp, r7
 80450c4:	bd80      	pop	{r7, pc}
	...

080450c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80450c8:	b580      	push	{r7, lr}
 80450ca:	b086      	sub	sp, #24
 80450cc:	af00      	add	r7, sp, #0
 80450ce:	60f8      	str	r0, [r7, #12]
 80450d0:	60b9      	str	r1, [r7, #8]
 80450d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80450d6:	2301      	movs	r3, #1
 80450d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80450da:	4b23      	ldr	r3, [pc, #140]	; (8045168 <HAL_FLASH_Program+0xa0>)
 80450dc:	7e1b      	ldrb	r3, [r3, #24]
 80450de:	2b01      	cmp	r3, #1
 80450e0:	d101      	bne.n	80450e6 <HAL_FLASH_Program+0x1e>
 80450e2:	2302      	movs	r3, #2
 80450e4:	e03b      	b.n	804515e <HAL_FLASH_Program+0x96>
 80450e6:	4b20      	ldr	r3, [pc, #128]	; (8045168 <HAL_FLASH_Program+0xa0>)
 80450e8:	2201      	movs	r2, #1
 80450ea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80450ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80450f0:	f000 f870 	bl	80451d4 <FLASH_WaitForLastOperation>
 80450f4:	4603      	mov	r3, r0
 80450f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80450f8:	7dfb      	ldrb	r3, [r7, #23]
 80450fa:	2b00      	cmp	r3, #0
 80450fc:	d12b      	bne.n	8045156 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80450fe:	68fb      	ldr	r3, [r7, #12]
 8045100:	2b00      	cmp	r3, #0
 8045102:	d105      	bne.n	8045110 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8045104:	783b      	ldrb	r3, [r7, #0]
 8045106:	4619      	mov	r1, r3
 8045108:	68b8      	ldr	r0, [r7, #8]
 804510a:	f000 f91b 	bl	8045344 <FLASH_Program_Byte>
 804510e:	e016      	b.n	804513e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8045110:	68fb      	ldr	r3, [r7, #12]
 8045112:	2b01      	cmp	r3, #1
 8045114:	d105      	bne.n	8045122 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8045116:	883b      	ldrh	r3, [r7, #0]
 8045118:	4619      	mov	r1, r3
 804511a:	68b8      	ldr	r0, [r7, #8]
 804511c:	f000 f8ee 	bl	80452fc <FLASH_Program_HalfWord>
 8045120:	e00d      	b.n	804513e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8045122:	68fb      	ldr	r3, [r7, #12]
 8045124:	2b02      	cmp	r3, #2
 8045126:	d105      	bne.n	8045134 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8045128:	683b      	ldr	r3, [r7, #0]
 804512a:	4619      	mov	r1, r3
 804512c:	68b8      	ldr	r0, [r7, #8]
 804512e:	f000 f8c3 	bl	80452b8 <FLASH_Program_Word>
 8045132:	e004      	b.n	804513e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8045134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8045138:	68b8      	ldr	r0, [r7, #8]
 804513a:	f000 f88b 	bl	8045254 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804513e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8045142:	f000 f847 	bl	80451d4 <FLASH_WaitForLastOperation>
 8045146:	4603      	mov	r3, r0
 8045148:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 804514a:	4b08      	ldr	r3, [pc, #32]	; (804516c <HAL_FLASH_Program+0xa4>)
 804514c:	691b      	ldr	r3, [r3, #16]
 804514e:	4a07      	ldr	r2, [pc, #28]	; (804516c <HAL_FLASH_Program+0xa4>)
 8045150:	f023 0301 	bic.w	r3, r3, #1
 8045154:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8045156:	4b04      	ldr	r3, [pc, #16]	; (8045168 <HAL_FLASH_Program+0xa0>)
 8045158:	2200      	movs	r2, #0
 804515a:	761a      	strb	r2, [r3, #24]
  
  return status;
 804515c:	7dfb      	ldrb	r3, [r7, #23]
}
 804515e:	4618      	mov	r0, r3
 8045160:	3718      	adds	r7, #24
 8045162:	46bd      	mov	sp, r7
 8045164:	bd80      	pop	{r7, pc}
 8045166:	bf00      	nop
 8045168:	20000504 	.word	0x20000504
 804516c:	40023c00 	.word	0x40023c00

08045170 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8045170:	b480      	push	{r7}
 8045172:	b083      	sub	sp, #12
 8045174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8045176:	2300      	movs	r3, #0
 8045178:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 804517a:	4b0b      	ldr	r3, [pc, #44]	; (80451a8 <HAL_FLASH_Unlock+0x38>)
 804517c:	691b      	ldr	r3, [r3, #16]
 804517e:	2b00      	cmp	r3, #0
 8045180:	da0b      	bge.n	804519a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8045182:	4b09      	ldr	r3, [pc, #36]	; (80451a8 <HAL_FLASH_Unlock+0x38>)
 8045184:	4a09      	ldr	r2, [pc, #36]	; (80451ac <HAL_FLASH_Unlock+0x3c>)
 8045186:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8045188:	4b07      	ldr	r3, [pc, #28]	; (80451a8 <HAL_FLASH_Unlock+0x38>)
 804518a:	4a09      	ldr	r2, [pc, #36]	; (80451b0 <HAL_FLASH_Unlock+0x40>)
 804518c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 804518e:	4b06      	ldr	r3, [pc, #24]	; (80451a8 <HAL_FLASH_Unlock+0x38>)
 8045190:	691b      	ldr	r3, [r3, #16]
 8045192:	2b00      	cmp	r3, #0
 8045194:	da01      	bge.n	804519a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8045196:	2301      	movs	r3, #1
 8045198:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 804519a:	79fb      	ldrb	r3, [r7, #7]
}
 804519c:	4618      	mov	r0, r3
 804519e:	370c      	adds	r7, #12
 80451a0:	46bd      	mov	sp, r7
 80451a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451a6:	4770      	bx	lr
 80451a8:	40023c00 	.word	0x40023c00
 80451ac:	45670123 	.word	0x45670123
 80451b0:	cdef89ab 	.word	0xcdef89ab

080451b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80451b4:	b480      	push	{r7}
 80451b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80451b8:	4b05      	ldr	r3, [pc, #20]	; (80451d0 <HAL_FLASH_Lock+0x1c>)
 80451ba:	691b      	ldr	r3, [r3, #16]
 80451bc:	4a04      	ldr	r2, [pc, #16]	; (80451d0 <HAL_FLASH_Lock+0x1c>)
 80451be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80451c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80451c4:	2300      	movs	r3, #0
}
 80451c6:	4618      	mov	r0, r3
 80451c8:	46bd      	mov	sp, r7
 80451ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451ce:	4770      	bx	lr
 80451d0:	40023c00 	.word	0x40023c00

080451d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80451d4:	b580      	push	{r7, lr}
 80451d6:	b084      	sub	sp, #16
 80451d8:	af00      	add	r7, sp, #0
 80451da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80451dc:	2300      	movs	r3, #0
 80451de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80451e0:	4b1a      	ldr	r3, [pc, #104]	; (804524c <FLASH_WaitForLastOperation+0x78>)
 80451e2:	2200      	movs	r2, #0
 80451e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80451e6:	f7ff fdfb 	bl	8044de0 <HAL_GetTick>
 80451ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80451ec:	e010      	b.n	8045210 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80451ee:	687b      	ldr	r3, [r7, #4]
 80451f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80451f4:	d00c      	beq.n	8045210 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80451f6:	687b      	ldr	r3, [r7, #4]
 80451f8:	2b00      	cmp	r3, #0
 80451fa:	d007      	beq.n	804520c <FLASH_WaitForLastOperation+0x38>
 80451fc:	f7ff fdf0 	bl	8044de0 <HAL_GetTick>
 8045200:	4602      	mov	r2, r0
 8045202:	68fb      	ldr	r3, [r7, #12]
 8045204:	1ad3      	subs	r3, r2, r3
 8045206:	687a      	ldr	r2, [r7, #4]
 8045208:	429a      	cmp	r2, r3
 804520a:	d201      	bcs.n	8045210 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 804520c:	2303      	movs	r3, #3
 804520e:	e019      	b.n	8045244 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8045210:	4b0f      	ldr	r3, [pc, #60]	; (8045250 <FLASH_WaitForLastOperation+0x7c>)
 8045212:	68db      	ldr	r3, [r3, #12]
 8045214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045218:	2b00      	cmp	r3, #0
 804521a:	d1e8      	bne.n	80451ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 804521c:	4b0c      	ldr	r3, [pc, #48]	; (8045250 <FLASH_WaitForLastOperation+0x7c>)
 804521e:	68db      	ldr	r3, [r3, #12]
 8045220:	f003 0301 	and.w	r3, r3, #1
 8045224:	2b00      	cmp	r3, #0
 8045226:	d002      	beq.n	804522e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8045228:	4b09      	ldr	r3, [pc, #36]	; (8045250 <FLASH_WaitForLastOperation+0x7c>)
 804522a:	2201      	movs	r2, #1
 804522c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 804522e:	4b08      	ldr	r3, [pc, #32]	; (8045250 <FLASH_WaitForLastOperation+0x7c>)
 8045230:	68db      	ldr	r3, [r3, #12]
 8045232:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8045236:	2b00      	cmp	r3, #0
 8045238:	d003      	beq.n	8045242 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 804523a:	f000 f8a5 	bl	8045388 <FLASH_SetErrorCode>
    return HAL_ERROR;
 804523e:	2301      	movs	r3, #1
 8045240:	e000      	b.n	8045244 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8045242:	2300      	movs	r3, #0
  
}  
 8045244:	4618      	mov	r0, r3
 8045246:	3710      	adds	r7, #16
 8045248:	46bd      	mov	sp, r7
 804524a:	bd80      	pop	{r7, pc}
 804524c:	20000504 	.word	0x20000504
 8045250:	40023c00 	.word	0x40023c00

08045254 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8045254:	b480      	push	{r7}
 8045256:	b085      	sub	sp, #20
 8045258:	af00      	add	r7, sp, #0
 804525a:	60f8      	str	r0, [r7, #12]
 804525c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045260:	4b14      	ldr	r3, [pc, #80]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 8045262:	691b      	ldr	r3, [r3, #16]
 8045264:	4a13      	ldr	r2, [pc, #76]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 8045266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804526a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 804526c:	4b11      	ldr	r3, [pc, #68]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 804526e:	691b      	ldr	r3, [r3, #16]
 8045270:	4a10      	ldr	r2, [pc, #64]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 8045272:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8045276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045278:	4b0e      	ldr	r3, [pc, #56]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 804527a:	691b      	ldr	r3, [r3, #16]
 804527c:	4a0d      	ldr	r2, [pc, #52]	; (80452b4 <FLASH_Program_DoubleWord+0x60>)
 804527e:	f043 0301 	orr.w	r3, r3, #1
 8045282:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8045284:	68fb      	ldr	r3, [r7, #12]
 8045286:	683a      	ldr	r2, [r7, #0]
 8045288:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 804528a:	f3bf 8f6f 	isb	sy
}
 804528e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8045290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8045294:	f04f 0200 	mov.w	r2, #0
 8045298:	f04f 0300 	mov.w	r3, #0
 804529c:	000a      	movs	r2, r1
 804529e:	2300      	movs	r3, #0
 80452a0:	68f9      	ldr	r1, [r7, #12]
 80452a2:	3104      	adds	r1, #4
 80452a4:	4613      	mov	r3, r2
 80452a6:	600b      	str	r3, [r1, #0]
}
 80452a8:	bf00      	nop
 80452aa:	3714      	adds	r7, #20
 80452ac:	46bd      	mov	sp, r7
 80452ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452b2:	4770      	bx	lr
 80452b4:	40023c00 	.word	0x40023c00

080452b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80452b8:	b480      	push	{r7}
 80452ba:	b083      	sub	sp, #12
 80452bc:	af00      	add	r7, sp, #0
 80452be:	6078      	str	r0, [r7, #4]
 80452c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80452c2:	4b0d      	ldr	r3, [pc, #52]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452c4:	691b      	ldr	r3, [r3, #16]
 80452c6:	4a0c      	ldr	r2, [pc, #48]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80452cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80452ce:	4b0a      	ldr	r3, [pc, #40]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452d0:	691b      	ldr	r3, [r3, #16]
 80452d2:	4a09      	ldr	r2, [pc, #36]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80452d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80452da:	4b07      	ldr	r3, [pc, #28]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452dc:	691b      	ldr	r3, [r3, #16]
 80452de:	4a06      	ldr	r2, [pc, #24]	; (80452f8 <FLASH_Program_Word+0x40>)
 80452e0:	f043 0301 	orr.w	r3, r3, #1
 80452e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80452e6:	687b      	ldr	r3, [r7, #4]
 80452e8:	683a      	ldr	r2, [r7, #0]
 80452ea:	601a      	str	r2, [r3, #0]
}
 80452ec:	bf00      	nop
 80452ee:	370c      	adds	r7, #12
 80452f0:	46bd      	mov	sp, r7
 80452f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452f6:	4770      	bx	lr
 80452f8:	40023c00 	.word	0x40023c00

080452fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80452fc:	b480      	push	{r7}
 80452fe:	b083      	sub	sp, #12
 8045300:	af00      	add	r7, sp, #0
 8045302:	6078      	str	r0, [r7, #4]
 8045304:	460b      	mov	r3, r1
 8045306:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045308:	4b0d      	ldr	r3, [pc, #52]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 804530a:	691b      	ldr	r3, [r3, #16]
 804530c:	4a0c      	ldr	r2, [pc, #48]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 804530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045312:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8045314:	4b0a      	ldr	r3, [pc, #40]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 8045316:	691b      	ldr	r3, [r3, #16]
 8045318:	4a09      	ldr	r2, [pc, #36]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 804531a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804531e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045320:	4b07      	ldr	r3, [pc, #28]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 8045322:	691b      	ldr	r3, [r3, #16]
 8045324:	4a06      	ldr	r2, [pc, #24]	; (8045340 <FLASH_Program_HalfWord+0x44>)
 8045326:	f043 0301 	orr.w	r3, r3, #1
 804532a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 804532c:	687b      	ldr	r3, [r7, #4]
 804532e:	887a      	ldrh	r2, [r7, #2]
 8045330:	801a      	strh	r2, [r3, #0]
}
 8045332:	bf00      	nop
 8045334:	370c      	adds	r7, #12
 8045336:	46bd      	mov	sp, r7
 8045338:	f85d 7b04 	ldr.w	r7, [sp], #4
 804533c:	4770      	bx	lr
 804533e:	bf00      	nop
 8045340:	40023c00 	.word	0x40023c00

08045344 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8045344:	b480      	push	{r7}
 8045346:	b083      	sub	sp, #12
 8045348:	af00      	add	r7, sp, #0
 804534a:	6078      	str	r0, [r7, #4]
 804534c:	460b      	mov	r3, r1
 804534e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045350:	4b0c      	ldr	r3, [pc, #48]	; (8045384 <FLASH_Program_Byte+0x40>)
 8045352:	691b      	ldr	r3, [r3, #16]
 8045354:	4a0b      	ldr	r2, [pc, #44]	; (8045384 <FLASH_Program_Byte+0x40>)
 8045356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804535a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 804535c:	4b09      	ldr	r3, [pc, #36]	; (8045384 <FLASH_Program_Byte+0x40>)
 804535e:	4a09      	ldr	r2, [pc, #36]	; (8045384 <FLASH_Program_Byte+0x40>)
 8045360:	691b      	ldr	r3, [r3, #16]
 8045362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8045364:	4b07      	ldr	r3, [pc, #28]	; (8045384 <FLASH_Program_Byte+0x40>)
 8045366:	691b      	ldr	r3, [r3, #16]
 8045368:	4a06      	ldr	r2, [pc, #24]	; (8045384 <FLASH_Program_Byte+0x40>)
 804536a:	f043 0301 	orr.w	r3, r3, #1
 804536e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8045370:	687b      	ldr	r3, [r7, #4]
 8045372:	78fa      	ldrb	r2, [r7, #3]
 8045374:	701a      	strb	r2, [r3, #0]
}
 8045376:	bf00      	nop
 8045378:	370c      	adds	r7, #12
 804537a:	46bd      	mov	sp, r7
 804537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045380:	4770      	bx	lr
 8045382:	bf00      	nop
 8045384:	40023c00 	.word	0x40023c00

08045388 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8045388:	b480      	push	{r7}
 804538a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 804538c:	4b27      	ldr	r3, [pc, #156]	; (804542c <FLASH_SetErrorCode+0xa4>)
 804538e:	68db      	ldr	r3, [r3, #12]
 8045390:	f003 0310 	and.w	r3, r3, #16
 8045394:	2b00      	cmp	r3, #0
 8045396:	d008      	beq.n	80453aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8045398:	4b25      	ldr	r3, [pc, #148]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 804539a:	69db      	ldr	r3, [r3, #28]
 804539c:	f043 0310 	orr.w	r3, r3, #16
 80453a0:	4a23      	ldr	r2, [pc, #140]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80453a4:	4b21      	ldr	r3, [pc, #132]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453a6:	2210      	movs	r2, #16
 80453a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80453aa:	4b20      	ldr	r3, [pc, #128]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453ac:	68db      	ldr	r3, [r3, #12]
 80453ae:	f003 0320 	and.w	r3, r3, #32
 80453b2:	2b00      	cmp	r3, #0
 80453b4:	d008      	beq.n	80453c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80453b6:	4b1e      	ldr	r3, [pc, #120]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453b8:	69db      	ldr	r3, [r3, #28]
 80453ba:	f043 0308 	orr.w	r3, r3, #8
 80453be:	4a1c      	ldr	r2, [pc, #112]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80453c2:	4b1a      	ldr	r3, [pc, #104]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453c4:	2220      	movs	r2, #32
 80453c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80453c8:	4b18      	ldr	r3, [pc, #96]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453ca:	68db      	ldr	r3, [r3, #12]
 80453cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80453d0:	2b00      	cmp	r3, #0
 80453d2:	d008      	beq.n	80453e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80453d4:	4b16      	ldr	r3, [pc, #88]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453d6:	69db      	ldr	r3, [r3, #28]
 80453d8:	f043 0304 	orr.w	r3, r3, #4
 80453dc:	4a14      	ldr	r2, [pc, #80]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80453e0:	4b12      	ldr	r3, [pc, #72]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453e2:	2240      	movs	r2, #64	; 0x40
 80453e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80453e6:	4b11      	ldr	r3, [pc, #68]	; (804542c <FLASH_SetErrorCode+0xa4>)
 80453e8:	68db      	ldr	r3, [r3, #12]
 80453ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80453ee:	2b00      	cmp	r3, #0
 80453f0:	d008      	beq.n	8045404 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80453f2:	4b0f      	ldr	r3, [pc, #60]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453f4:	69db      	ldr	r3, [r3, #28]
 80453f6:	f043 0302 	orr.w	r3, r3, #2
 80453fa:	4a0d      	ldr	r2, [pc, #52]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 80453fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80453fe:	4b0b      	ldr	r3, [pc, #44]	; (804542c <FLASH_SetErrorCode+0xa4>)
 8045400:	2280      	movs	r2, #128	; 0x80
 8045402:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8045404:	4b09      	ldr	r3, [pc, #36]	; (804542c <FLASH_SetErrorCode+0xa4>)
 8045406:	68db      	ldr	r3, [r3, #12]
 8045408:	f003 0302 	and.w	r3, r3, #2
 804540c:	2b00      	cmp	r3, #0
 804540e:	d008      	beq.n	8045422 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8045410:	4b07      	ldr	r3, [pc, #28]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 8045412:	69db      	ldr	r3, [r3, #28]
 8045414:	f043 0320 	orr.w	r3, r3, #32
 8045418:	4a05      	ldr	r2, [pc, #20]	; (8045430 <FLASH_SetErrorCode+0xa8>)
 804541a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 804541c:	4b03      	ldr	r3, [pc, #12]	; (804542c <FLASH_SetErrorCode+0xa4>)
 804541e:	2202      	movs	r2, #2
 8045420:	60da      	str	r2, [r3, #12]
  }
}
 8045422:	bf00      	nop
 8045424:	46bd      	mov	sp, r7
 8045426:	f85d 7b04 	ldr.w	r7, [sp], #4
 804542a:	4770      	bx	lr
 804542c:	40023c00 	.word	0x40023c00
 8045430:	20000504 	.word	0x20000504

08045434 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8045434:	b580      	push	{r7, lr}
 8045436:	b084      	sub	sp, #16
 8045438:	af00      	add	r7, sp, #0
 804543a:	6078      	str	r0, [r7, #4]
 804543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 804543e:	2301      	movs	r3, #1
 8045440:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8045442:	2300      	movs	r3, #0
 8045444:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8045446:	4b31      	ldr	r3, [pc, #196]	; (804550c <HAL_FLASHEx_Erase+0xd8>)
 8045448:	7e1b      	ldrb	r3, [r3, #24]
 804544a:	2b01      	cmp	r3, #1
 804544c:	d101      	bne.n	8045452 <HAL_FLASHEx_Erase+0x1e>
 804544e:	2302      	movs	r3, #2
 8045450:	e058      	b.n	8045504 <HAL_FLASHEx_Erase+0xd0>
 8045452:	4b2e      	ldr	r3, [pc, #184]	; (804550c <HAL_FLASHEx_Erase+0xd8>)
 8045454:	2201      	movs	r2, #1
 8045456:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8045458:	f24c 3050 	movw	r0, #50000	; 0xc350
 804545c:	f7ff feba 	bl	80451d4 <FLASH_WaitForLastOperation>
 8045460:	4603      	mov	r3, r0
 8045462:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8045464:	7bfb      	ldrb	r3, [r7, #15]
 8045466:	2b00      	cmp	r3, #0
 8045468:	d148      	bne.n	80454fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 804546a:	683b      	ldr	r3, [r7, #0]
 804546c:	f04f 32ff 	mov.w	r2, #4294967295
 8045470:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8045472:	687b      	ldr	r3, [r7, #4]
 8045474:	681b      	ldr	r3, [r3, #0]
 8045476:	2b01      	cmp	r3, #1
 8045478:	d115      	bne.n	80454a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 804547a:	687b      	ldr	r3, [r7, #4]
 804547c:	691b      	ldr	r3, [r3, #16]
 804547e:	b2da      	uxtb	r2, r3
 8045480:	687b      	ldr	r3, [r7, #4]
 8045482:	685b      	ldr	r3, [r3, #4]
 8045484:	4619      	mov	r1, r3
 8045486:	4610      	mov	r0, r2
 8045488:	f000 f844 	bl	8045514 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804548c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8045490:	f7ff fea0 	bl	80451d4 <FLASH_WaitForLastOperation>
 8045494:	4603      	mov	r3, r0
 8045496:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8045498:	4b1d      	ldr	r3, [pc, #116]	; (8045510 <HAL_FLASHEx_Erase+0xdc>)
 804549a:	691b      	ldr	r3, [r3, #16]
 804549c:	4a1c      	ldr	r2, [pc, #112]	; (8045510 <HAL_FLASHEx_Erase+0xdc>)
 804549e:	f023 0304 	bic.w	r3, r3, #4
 80454a2:	6113      	str	r3, [r2, #16]
 80454a4:	e028      	b.n	80454f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80454a6:	687b      	ldr	r3, [r7, #4]
 80454a8:	689b      	ldr	r3, [r3, #8]
 80454aa:	60bb      	str	r3, [r7, #8]
 80454ac:	e01c      	b.n	80454e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80454ae:	687b      	ldr	r3, [r7, #4]
 80454b0:	691b      	ldr	r3, [r3, #16]
 80454b2:	b2db      	uxtb	r3, r3
 80454b4:	4619      	mov	r1, r3
 80454b6:	68b8      	ldr	r0, [r7, #8]
 80454b8:	f000 f850 	bl	804555c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80454bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80454c0:	f7ff fe88 	bl	80451d4 <FLASH_WaitForLastOperation>
 80454c4:	4603      	mov	r3, r0
 80454c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80454c8:	4b11      	ldr	r3, [pc, #68]	; (8045510 <HAL_FLASHEx_Erase+0xdc>)
 80454ca:	691b      	ldr	r3, [r3, #16]
 80454cc:	4a10      	ldr	r2, [pc, #64]	; (8045510 <HAL_FLASHEx_Erase+0xdc>)
 80454ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80454d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80454d4:	7bfb      	ldrb	r3, [r7, #15]
 80454d6:	2b00      	cmp	r3, #0
 80454d8:	d003      	beq.n	80454e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80454da:	683b      	ldr	r3, [r7, #0]
 80454dc:	68ba      	ldr	r2, [r7, #8]
 80454de:	601a      	str	r2, [r3, #0]
          break;
 80454e0:	e00a      	b.n	80454f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80454e2:	68bb      	ldr	r3, [r7, #8]
 80454e4:	3301      	adds	r3, #1
 80454e6:	60bb      	str	r3, [r7, #8]
 80454e8:	687b      	ldr	r3, [r7, #4]
 80454ea:	68da      	ldr	r2, [r3, #12]
 80454ec:	687b      	ldr	r3, [r7, #4]
 80454ee:	689b      	ldr	r3, [r3, #8]
 80454f0:	4413      	add	r3, r2
 80454f2:	68ba      	ldr	r2, [r7, #8]
 80454f4:	429a      	cmp	r2, r3
 80454f6:	d3da      	bcc.n	80454ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80454f8:	f000 f878 	bl	80455ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80454fc:	4b03      	ldr	r3, [pc, #12]	; (804550c <HAL_FLASHEx_Erase+0xd8>)
 80454fe:	2200      	movs	r2, #0
 8045500:	761a      	strb	r2, [r3, #24]

  return status;
 8045502:	7bfb      	ldrb	r3, [r7, #15]
}
 8045504:	4618      	mov	r0, r3
 8045506:	3710      	adds	r7, #16
 8045508:	46bd      	mov	sp, r7
 804550a:	bd80      	pop	{r7, pc}
 804550c:	20000504 	.word	0x20000504
 8045510:	40023c00 	.word	0x40023c00

08045514 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8045514:	b480      	push	{r7}
 8045516:	b083      	sub	sp, #12
 8045518:	af00      	add	r7, sp, #0
 804551a:	4603      	mov	r3, r0
 804551c:	6039      	str	r1, [r7, #0]
 804551e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8045520:	4b0d      	ldr	r3, [pc, #52]	; (8045558 <FLASH_MassErase+0x44>)
 8045522:	691b      	ldr	r3, [r3, #16]
 8045524:	4a0c      	ldr	r2, [pc, #48]	; (8045558 <FLASH_MassErase+0x44>)
 8045526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804552a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 804552c:	4b0a      	ldr	r3, [pc, #40]	; (8045558 <FLASH_MassErase+0x44>)
 804552e:	691b      	ldr	r3, [r3, #16]
 8045530:	4a09      	ldr	r2, [pc, #36]	; (8045558 <FLASH_MassErase+0x44>)
 8045532:	f043 0304 	orr.w	r3, r3, #4
 8045536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8045538:	4b07      	ldr	r3, [pc, #28]	; (8045558 <FLASH_MassErase+0x44>)
 804553a:	691a      	ldr	r2, [r3, #16]
 804553c:	79fb      	ldrb	r3, [r7, #7]
 804553e:	021b      	lsls	r3, r3, #8
 8045540:	4313      	orrs	r3, r2
 8045542:	4a05      	ldr	r2, [pc, #20]	; (8045558 <FLASH_MassErase+0x44>)
 8045544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8045548:	6113      	str	r3, [r2, #16]
}
 804554a:	bf00      	nop
 804554c:	370c      	adds	r7, #12
 804554e:	46bd      	mov	sp, r7
 8045550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045554:	4770      	bx	lr
 8045556:	bf00      	nop
 8045558:	40023c00 	.word	0x40023c00

0804555c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 804555c:	b480      	push	{r7}
 804555e:	b085      	sub	sp, #20
 8045560:	af00      	add	r7, sp, #0
 8045562:	6078      	str	r0, [r7, #4]
 8045564:	460b      	mov	r3, r1
 8045566:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8045568:	2300      	movs	r3, #0
 804556a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 804556c:	78fb      	ldrb	r3, [r7, #3]
 804556e:	2b00      	cmp	r3, #0
 8045570:	d102      	bne.n	8045578 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8045572:	2300      	movs	r3, #0
 8045574:	60fb      	str	r3, [r7, #12]
 8045576:	e010      	b.n	804559a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8045578:	78fb      	ldrb	r3, [r7, #3]
 804557a:	2b01      	cmp	r3, #1
 804557c:	d103      	bne.n	8045586 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 804557e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045582:	60fb      	str	r3, [r7, #12]
 8045584:	e009      	b.n	804559a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8045586:	78fb      	ldrb	r3, [r7, #3]
 8045588:	2b02      	cmp	r3, #2
 804558a:	d103      	bne.n	8045594 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 804558c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045590:	60fb      	str	r3, [r7, #12]
 8045592:	e002      	b.n	804559a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8045594:	f44f 7340 	mov.w	r3, #768	; 0x300
 8045598:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804559a:	4b13      	ldr	r3, [pc, #76]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 804559c:	691b      	ldr	r3, [r3, #16]
 804559e:	4a12      	ldr	r2, [pc, #72]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80455a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80455a6:	4b10      	ldr	r3, [pc, #64]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455a8:	691a      	ldr	r2, [r3, #16]
 80455aa:	490f      	ldr	r1, [pc, #60]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455ac:	68fb      	ldr	r3, [r7, #12]
 80455ae:	4313      	orrs	r3, r2
 80455b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80455b2:	4b0d      	ldr	r3, [pc, #52]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455b4:	691b      	ldr	r3, [r3, #16]
 80455b6:	4a0c      	ldr	r2, [pc, #48]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80455bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80455be:	4b0a      	ldr	r3, [pc, #40]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455c0:	691a      	ldr	r2, [r3, #16]
 80455c2:	687b      	ldr	r3, [r7, #4]
 80455c4:	00db      	lsls	r3, r3, #3
 80455c6:	4313      	orrs	r3, r2
 80455c8:	4a07      	ldr	r2, [pc, #28]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455ca:	f043 0302 	orr.w	r3, r3, #2
 80455ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80455d0:	4b05      	ldr	r3, [pc, #20]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455d2:	691b      	ldr	r3, [r3, #16]
 80455d4:	4a04      	ldr	r2, [pc, #16]	; (80455e8 <FLASH_Erase_Sector+0x8c>)
 80455d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80455da:	6113      	str	r3, [r2, #16]
}
 80455dc:	bf00      	nop
 80455de:	3714      	adds	r7, #20
 80455e0:	46bd      	mov	sp, r7
 80455e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80455e6:	4770      	bx	lr
 80455e8:	40023c00 	.word	0x40023c00

080455ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80455ec:	b480      	push	{r7}
 80455ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80455f0:	4b20      	ldr	r3, [pc, #128]	; (8045674 <FLASH_FlushCaches+0x88>)
 80455f2:	681b      	ldr	r3, [r3, #0]
 80455f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80455f8:	2b00      	cmp	r3, #0
 80455fa:	d017      	beq.n	804562c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80455fc:	4b1d      	ldr	r3, [pc, #116]	; (8045674 <FLASH_FlushCaches+0x88>)
 80455fe:	681b      	ldr	r3, [r3, #0]
 8045600:	4a1c      	ldr	r2, [pc, #112]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045602:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8045606:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8045608:	4b1a      	ldr	r3, [pc, #104]	; (8045674 <FLASH_FlushCaches+0x88>)
 804560a:	681b      	ldr	r3, [r3, #0]
 804560c:	4a19      	ldr	r2, [pc, #100]	; (8045674 <FLASH_FlushCaches+0x88>)
 804560e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8045612:	6013      	str	r3, [r2, #0]
 8045614:	4b17      	ldr	r3, [pc, #92]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045616:	681b      	ldr	r3, [r3, #0]
 8045618:	4a16      	ldr	r2, [pc, #88]	; (8045674 <FLASH_FlushCaches+0x88>)
 804561a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804561e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8045620:	4b14      	ldr	r3, [pc, #80]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045622:	681b      	ldr	r3, [r3, #0]
 8045624:	4a13      	ldr	r2, [pc, #76]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804562a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804562c:	4b11      	ldr	r3, [pc, #68]	; (8045674 <FLASH_FlushCaches+0x88>)
 804562e:	681b      	ldr	r3, [r3, #0]
 8045630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045634:	2b00      	cmp	r3, #0
 8045636:	d017      	beq.n	8045668 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8045638:	4b0e      	ldr	r3, [pc, #56]	; (8045674 <FLASH_FlushCaches+0x88>)
 804563a:	681b      	ldr	r3, [r3, #0]
 804563c:	4a0d      	ldr	r2, [pc, #52]	; (8045674 <FLASH_FlushCaches+0x88>)
 804563e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8045642:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8045644:	4b0b      	ldr	r3, [pc, #44]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045646:	681b      	ldr	r3, [r3, #0]
 8045648:	4a0a      	ldr	r2, [pc, #40]	; (8045674 <FLASH_FlushCaches+0x88>)
 804564a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804564e:	6013      	str	r3, [r2, #0]
 8045650:	4b08      	ldr	r3, [pc, #32]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045652:	681b      	ldr	r3, [r3, #0]
 8045654:	4a07      	ldr	r2, [pc, #28]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804565a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 804565c:	4b05      	ldr	r3, [pc, #20]	; (8045674 <FLASH_FlushCaches+0x88>)
 804565e:	681b      	ldr	r3, [r3, #0]
 8045660:	4a04      	ldr	r2, [pc, #16]	; (8045674 <FLASH_FlushCaches+0x88>)
 8045662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8045666:	6013      	str	r3, [r2, #0]
  }
}
 8045668:	bf00      	nop
 804566a:	46bd      	mov	sp, r7
 804566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045670:	4770      	bx	lr
 8045672:	bf00      	nop
 8045674:	40023c00 	.word	0x40023c00

08045678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8045678:	b480      	push	{r7}
 804567a:	b089      	sub	sp, #36	; 0x24
 804567c:	af00      	add	r7, sp, #0
 804567e:	6078      	str	r0, [r7, #4]
 8045680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8045682:	2300      	movs	r3, #0
 8045684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8045686:	2300      	movs	r3, #0
 8045688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 804568a:	2300      	movs	r3, #0
 804568c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 804568e:	2300      	movs	r3, #0
 8045690:	61fb      	str	r3, [r7, #28]
 8045692:	e16b      	b.n	804596c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8045694:	2201      	movs	r2, #1
 8045696:	69fb      	ldr	r3, [r7, #28]
 8045698:	fa02 f303 	lsl.w	r3, r2, r3
 804569c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804569e:	683b      	ldr	r3, [r7, #0]
 80456a0:	681b      	ldr	r3, [r3, #0]
 80456a2:	697a      	ldr	r2, [r7, #20]
 80456a4:	4013      	ands	r3, r2
 80456a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80456a8:	693a      	ldr	r2, [r7, #16]
 80456aa:	697b      	ldr	r3, [r7, #20]
 80456ac:	429a      	cmp	r2, r3
 80456ae:	f040 815a 	bne.w	8045966 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80456b2:	683b      	ldr	r3, [r7, #0]
 80456b4:	685b      	ldr	r3, [r3, #4]
 80456b6:	f003 0303 	and.w	r3, r3, #3
 80456ba:	2b01      	cmp	r3, #1
 80456bc:	d005      	beq.n	80456ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80456be:	683b      	ldr	r3, [r7, #0]
 80456c0:	685b      	ldr	r3, [r3, #4]
 80456c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80456c6:	2b02      	cmp	r3, #2
 80456c8:	d130      	bne.n	804572c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80456ca:	687b      	ldr	r3, [r7, #4]
 80456cc:	689b      	ldr	r3, [r3, #8]
 80456ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80456d0:	69fb      	ldr	r3, [r7, #28]
 80456d2:	005b      	lsls	r3, r3, #1
 80456d4:	2203      	movs	r2, #3
 80456d6:	fa02 f303 	lsl.w	r3, r2, r3
 80456da:	43db      	mvns	r3, r3
 80456dc:	69ba      	ldr	r2, [r7, #24]
 80456de:	4013      	ands	r3, r2
 80456e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80456e2:	683b      	ldr	r3, [r7, #0]
 80456e4:	68da      	ldr	r2, [r3, #12]
 80456e6:	69fb      	ldr	r3, [r7, #28]
 80456e8:	005b      	lsls	r3, r3, #1
 80456ea:	fa02 f303 	lsl.w	r3, r2, r3
 80456ee:	69ba      	ldr	r2, [r7, #24]
 80456f0:	4313      	orrs	r3, r2
 80456f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80456f4:	687b      	ldr	r3, [r7, #4]
 80456f6:	69ba      	ldr	r2, [r7, #24]
 80456f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80456fa:	687b      	ldr	r3, [r7, #4]
 80456fc:	685b      	ldr	r3, [r3, #4]
 80456fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8045700:	2201      	movs	r2, #1
 8045702:	69fb      	ldr	r3, [r7, #28]
 8045704:	fa02 f303 	lsl.w	r3, r2, r3
 8045708:	43db      	mvns	r3, r3
 804570a:	69ba      	ldr	r2, [r7, #24]
 804570c:	4013      	ands	r3, r2
 804570e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8045710:	683b      	ldr	r3, [r7, #0]
 8045712:	685b      	ldr	r3, [r3, #4]
 8045714:	091b      	lsrs	r3, r3, #4
 8045716:	f003 0201 	and.w	r2, r3, #1
 804571a:	69fb      	ldr	r3, [r7, #28]
 804571c:	fa02 f303 	lsl.w	r3, r2, r3
 8045720:	69ba      	ldr	r2, [r7, #24]
 8045722:	4313      	orrs	r3, r2
 8045724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8045726:	687b      	ldr	r3, [r7, #4]
 8045728:	69ba      	ldr	r2, [r7, #24]
 804572a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804572c:	683b      	ldr	r3, [r7, #0]
 804572e:	685b      	ldr	r3, [r3, #4]
 8045730:	f003 0303 	and.w	r3, r3, #3
 8045734:	2b03      	cmp	r3, #3
 8045736:	d017      	beq.n	8045768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8045738:	687b      	ldr	r3, [r7, #4]
 804573a:	68db      	ldr	r3, [r3, #12]
 804573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 804573e:	69fb      	ldr	r3, [r7, #28]
 8045740:	005b      	lsls	r3, r3, #1
 8045742:	2203      	movs	r2, #3
 8045744:	fa02 f303 	lsl.w	r3, r2, r3
 8045748:	43db      	mvns	r3, r3
 804574a:	69ba      	ldr	r2, [r7, #24]
 804574c:	4013      	ands	r3, r2
 804574e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8045750:	683b      	ldr	r3, [r7, #0]
 8045752:	689a      	ldr	r2, [r3, #8]
 8045754:	69fb      	ldr	r3, [r7, #28]
 8045756:	005b      	lsls	r3, r3, #1
 8045758:	fa02 f303 	lsl.w	r3, r2, r3
 804575c:	69ba      	ldr	r2, [r7, #24]
 804575e:	4313      	orrs	r3, r2
 8045760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8045762:	687b      	ldr	r3, [r7, #4]
 8045764:	69ba      	ldr	r2, [r7, #24]
 8045766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8045768:	683b      	ldr	r3, [r7, #0]
 804576a:	685b      	ldr	r3, [r3, #4]
 804576c:	f003 0303 	and.w	r3, r3, #3
 8045770:	2b02      	cmp	r3, #2
 8045772:	d123      	bne.n	80457bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8045774:	69fb      	ldr	r3, [r7, #28]
 8045776:	08da      	lsrs	r2, r3, #3
 8045778:	687b      	ldr	r3, [r7, #4]
 804577a:	3208      	adds	r2, #8
 804577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8045782:	69fb      	ldr	r3, [r7, #28]
 8045784:	f003 0307 	and.w	r3, r3, #7
 8045788:	009b      	lsls	r3, r3, #2
 804578a:	220f      	movs	r2, #15
 804578c:	fa02 f303 	lsl.w	r3, r2, r3
 8045790:	43db      	mvns	r3, r3
 8045792:	69ba      	ldr	r2, [r7, #24]
 8045794:	4013      	ands	r3, r2
 8045796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8045798:	683b      	ldr	r3, [r7, #0]
 804579a:	691a      	ldr	r2, [r3, #16]
 804579c:	69fb      	ldr	r3, [r7, #28]
 804579e:	f003 0307 	and.w	r3, r3, #7
 80457a2:	009b      	lsls	r3, r3, #2
 80457a4:	fa02 f303 	lsl.w	r3, r2, r3
 80457a8:	69ba      	ldr	r2, [r7, #24]
 80457aa:	4313      	orrs	r3, r2
 80457ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80457ae:	69fb      	ldr	r3, [r7, #28]
 80457b0:	08da      	lsrs	r2, r3, #3
 80457b2:	687b      	ldr	r3, [r7, #4]
 80457b4:	3208      	adds	r2, #8
 80457b6:	69b9      	ldr	r1, [r7, #24]
 80457b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80457bc:	687b      	ldr	r3, [r7, #4]
 80457be:	681b      	ldr	r3, [r3, #0]
 80457c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80457c2:	69fb      	ldr	r3, [r7, #28]
 80457c4:	005b      	lsls	r3, r3, #1
 80457c6:	2203      	movs	r2, #3
 80457c8:	fa02 f303 	lsl.w	r3, r2, r3
 80457cc:	43db      	mvns	r3, r3
 80457ce:	69ba      	ldr	r2, [r7, #24]
 80457d0:	4013      	ands	r3, r2
 80457d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80457d4:	683b      	ldr	r3, [r7, #0]
 80457d6:	685b      	ldr	r3, [r3, #4]
 80457d8:	f003 0203 	and.w	r2, r3, #3
 80457dc:	69fb      	ldr	r3, [r7, #28]
 80457de:	005b      	lsls	r3, r3, #1
 80457e0:	fa02 f303 	lsl.w	r3, r2, r3
 80457e4:	69ba      	ldr	r2, [r7, #24]
 80457e6:	4313      	orrs	r3, r2
 80457e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80457ea:	687b      	ldr	r3, [r7, #4]
 80457ec:	69ba      	ldr	r2, [r7, #24]
 80457ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80457f0:	683b      	ldr	r3, [r7, #0]
 80457f2:	685b      	ldr	r3, [r3, #4]
 80457f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80457f8:	2b00      	cmp	r3, #0
 80457fa:	f000 80b4 	beq.w	8045966 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80457fe:	2300      	movs	r3, #0
 8045800:	60fb      	str	r3, [r7, #12]
 8045802:	4b60      	ldr	r3, [pc, #384]	; (8045984 <HAL_GPIO_Init+0x30c>)
 8045804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045806:	4a5f      	ldr	r2, [pc, #380]	; (8045984 <HAL_GPIO_Init+0x30c>)
 8045808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804580c:	6453      	str	r3, [r2, #68]	; 0x44
 804580e:	4b5d      	ldr	r3, [pc, #372]	; (8045984 <HAL_GPIO_Init+0x30c>)
 8045810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8045816:	60fb      	str	r3, [r7, #12]
 8045818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804581a:	4a5b      	ldr	r2, [pc, #364]	; (8045988 <HAL_GPIO_Init+0x310>)
 804581c:	69fb      	ldr	r3, [r7, #28]
 804581e:	089b      	lsrs	r3, r3, #2
 8045820:	3302      	adds	r3, #2
 8045822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8045828:	69fb      	ldr	r3, [r7, #28]
 804582a:	f003 0303 	and.w	r3, r3, #3
 804582e:	009b      	lsls	r3, r3, #2
 8045830:	220f      	movs	r2, #15
 8045832:	fa02 f303 	lsl.w	r3, r2, r3
 8045836:	43db      	mvns	r3, r3
 8045838:	69ba      	ldr	r2, [r7, #24]
 804583a:	4013      	ands	r3, r2
 804583c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804583e:	687b      	ldr	r3, [r7, #4]
 8045840:	4a52      	ldr	r2, [pc, #328]	; (804598c <HAL_GPIO_Init+0x314>)
 8045842:	4293      	cmp	r3, r2
 8045844:	d02b      	beq.n	804589e <HAL_GPIO_Init+0x226>
 8045846:	687b      	ldr	r3, [r7, #4]
 8045848:	4a51      	ldr	r2, [pc, #324]	; (8045990 <HAL_GPIO_Init+0x318>)
 804584a:	4293      	cmp	r3, r2
 804584c:	d025      	beq.n	804589a <HAL_GPIO_Init+0x222>
 804584e:	687b      	ldr	r3, [r7, #4]
 8045850:	4a50      	ldr	r2, [pc, #320]	; (8045994 <HAL_GPIO_Init+0x31c>)
 8045852:	4293      	cmp	r3, r2
 8045854:	d01f      	beq.n	8045896 <HAL_GPIO_Init+0x21e>
 8045856:	687b      	ldr	r3, [r7, #4]
 8045858:	4a4f      	ldr	r2, [pc, #316]	; (8045998 <HAL_GPIO_Init+0x320>)
 804585a:	4293      	cmp	r3, r2
 804585c:	d019      	beq.n	8045892 <HAL_GPIO_Init+0x21a>
 804585e:	687b      	ldr	r3, [r7, #4]
 8045860:	4a4e      	ldr	r2, [pc, #312]	; (804599c <HAL_GPIO_Init+0x324>)
 8045862:	4293      	cmp	r3, r2
 8045864:	d013      	beq.n	804588e <HAL_GPIO_Init+0x216>
 8045866:	687b      	ldr	r3, [r7, #4]
 8045868:	4a4d      	ldr	r2, [pc, #308]	; (80459a0 <HAL_GPIO_Init+0x328>)
 804586a:	4293      	cmp	r3, r2
 804586c:	d00d      	beq.n	804588a <HAL_GPIO_Init+0x212>
 804586e:	687b      	ldr	r3, [r7, #4]
 8045870:	4a4c      	ldr	r2, [pc, #304]	; (80459a4 <HAL_GPIO_Init+0x32c>)
 8045872:	4293      	cmp	r3, r2
 8045874:	d007      	beq.n	8045886 <HAL_GPIO_Init+0x20e>
 8045876:	687b      	ldr	r3, [r7, #4]
 8045878:	4a4b      	ldr	r2, [pc, #300]	; (80459a8 <HAL_GPIO_Init+0x330>)
 804587a:	4293      	cmp	r3, r2
 804587c:	d101      	bne.n	8045882 <HAL_GPIO_Init+0x20a>
 804587e:	2307      	movs	r3, #7
 8045880:	e00e      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 8045882:	2308      	movs	r3, #8
 8045884:	e00c      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 8045886:	2306      	movs	r3, #6
 8045888:	e00a      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 804588a:	2305      	movs	r3, #5
 804588c:	e008      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 804588e:	2304      	movs	r3, #4
 8045890:	e006      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 8045892:	2303      	movs	r3, #3
 8045894:	e004      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 8045896:	2302      	movs	r3, #2
 8045898:	e002      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 804589a:	2301      	movs	r3, #1
 804589c:	e000      	b.n	80458a0 <HAL_GPIO_Init+0x228>
 804589e:	2300      	movs	r3, #0
 80458a0:	69fa      	ldr	r2, [r7, #28]
 80458a2:	f002 0203 	and.w	r2, r2, #3
 80458a6:	0092      	lsls	r2, r2, #2
 80458a8:	4093      	lsls	r3, r2
 80458aa:	69ba      	ldr	r2, [r7, #24]
 80458ac:	4313      	orrs	r3, r2
 80458ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80458b0:	4935      	ldr	r1, [pc, #212]	; (8045988 <HAL_GPIO_Init+0x310>)
 80458b2:	69fb      	ldr	r3, [r7, #28]
 80458b4:	089b      	lsrs	r3, r3, #2
 80458b6:	3302      	adds	r3, #2
 80458b8:	69ba      	ldr	r2, [r7, #24]
 80458ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80458be:	4b3b      	ldr	r3, [pc, #236]	; (80459ac <HAL_GPIO_Init+0x334>)
 80458c0:	689b      	ldr	r3, [r3, #8]
 80458c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80458c4:	693b      	ldr	r3, [r7, #16]
 80458c6:	43db      	mvns	r3, r3
 80458c8:	69ba      	ldr	r2, [r7, #24]
 80458ca:	4013      	ands	r3, r2
 80458cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80458ce:	683b      	ldr	r3, [r7, #0]
 80458d0:	685b      	ldr	r3, [r3, #4]
 80458d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80458d6:	2b00      	cmp	r3, #0
 80458d8:	d003      	beq.n	80458e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80458da:	69ba      	ldr	r2, [r7, #24]
 80458dc:	693b      	ldr	r3, [r7, #16]
 80458de:	4313      	orrs	r3, r2
 80458e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80458e2:	4a32      	ldr	r2, [pc, #200]	; (80459ac <HAL_GPIO_Init+0x334>)
 80458e4:	69bb      	ldr	r3, [r7, #24]
 80458e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80458e8:	4b30      	ldr	r3, [pc, #192]	; (80459ac <HAL_GPIO_Init+0x334>)
 80458ea:	68db      	ldr	r3, [r3, #12]
 80458ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80458ee:	693b      	ldr	r3, [r7, #16]
 80458f0:	43db      	mvns	r3, r3
 80458f2:	69ba      	ldr	r2, [r7, #24]
 80458f4:	4013      	ands	r3, r2
 80458f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80458f8:	683b      	ldr	r3, [r7, #0]
 80458fa:	685b      	ldr	r3, [r3, #4]
 80458fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045900:	2b00      	cmp	r3, #0
 8045902:	d003      	beq.n	804590c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8045904:	69ba      	ldr	r2, [r7, #24]
 8045906:	693b      	ldr	r3, [r7, #16]
 8045908:	4313      	orrs	r3, r2
 804590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 804590c:	4a27      	ldr	r2, [pc, #156]	; (80459ac <HAL_GPIO_Init+0x334>)
 804590e:	69bb      	ldr	r3, [r7, #24]
 8045910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8045912:	4b26      	ldr	r3, [pc, #152]	; (80459ac <HAL_GPIO_Init+0x334>)
 8045914:	685b      	ldr	r3, [r3, #4]
 8045916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8045918:	693b      	ldr	r3, [r7, #16]
 804591a:	43db      	mvns	r3, r3
 804591c:	69ba      	ldr	r2, [r7, #24]
 804591e:	4013      	ands	r3, r2
 8045920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8045922:	683b      	ldr	r3, [r7, #0]
 8045924:	685b      	ldr	r3, [r3, #4]
 8045926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804592a:	2b00      	cmp	r3, #0
 804592c:	d003      	beq.n	8045936 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 804592e:	69ba      	ldr	r2, [r7, #24]
 8045930:	693b      	ldr	r3, [r7, #16]
 8045932:	4313      	orrs	r3, r2
 8045934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8045936:	4a1d      	ldr	r2, [pc, #116]	; (80459ac <HAL_GPIO_Init+0x334>)
 8045938:	69bb      	ldr	r3, [r7, #24]
 804593a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804593c:	4b1b      	ldr	r3, [pc, #108]	; (80459ac <HAL_GPIO_Init+0x334>)
 804593e:	681b      	ldr	r3, [r3, #0]
 8045940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8045942:	693b      	ldr	r3, [r7, #16]
 8045944:	43db      	mvns	r3, r3
 8045946:	69ba      	ldr	r2, [r7, #24]
 8045948:	4013      	ands	r3, r2
 804594a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804594c:	683b      	ldr	r3, [r7, #0]
 804594e:	685b      	ldr	r3, [r3, #4]
 8045950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045954:	2b00      	cmp	r3, #0
 8045956:	d003      	beq.n	8045960 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8045958:	69ba      	ldr	r2, [r7, #24]
 804595a:	693b      	ldr	r3, [r7, #16]
 804595c:	4313      	orrs	r3, r2
 804595e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8045960:	4a12      	ldr	r2, [pc, #72]	; (80459ac <HAL_GPIO_Init+0x334>)
 8045962:	69bb      	ldr	r3, [r7, #24]
 8045964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8045966:	69fb      	ldr	r3, [r7, #28]
 8045968:	3301      	adds	r3, #1
 804596a:	61fb      	str	r3, [r7, #28]
 804596c:	69fb      	ldr	r3, [r7, #28]
 804596e:	2b0f      	cmp	r3, #15
 8045970:	f67f ae90 	bls.w	8045694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8045974:	bf00      	nop
 8045976:	bf00      	nop
 8045978:	3724      	adds	r7, #36	; 0x24
 804597a:	46bd      	mov	sp, r7
 804597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045980:	4770      	bx	lr
 8045982:	bf00      	nop
 8045984:	40023800 	.word	0x40023800
 8045988:	40013800 	.word	0x40013800
 804598c:	40020000 	.word	0x40020000
 8045990:	40020400 	.word	0x40020400
 8045994:	40020800 	.word	0x40020800
 8045998:	40020c00 	.word	0x40020c00
 804599c:	40021000 	.word	0x40021000
 80459a0:	40021400 	.word	0x40021400
 80459a4:	40021800 	.word	0x40021800
 80459a8:	40021c00 	.word	0x40021c00
 80459ac:	40013c00 	.word	0x40013c00

080459b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80459b0:	b480      	push	{r7}
 80459b2:	b087      	sub	sp, #28
 80459b4:	af00      	add	r7, sp, #0
 80459b6:	6078      	str	r0, [r7, #4]
 80459b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80459ba:	2300      	movs	r3, #0
 80459bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80459be:	2300      	movs	r3, #0
 80459c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80459c2:	2300      	movs	r3, #0
 80459c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80459c6:	2300      	movs	r3, #0
 80459c8:	617b      	str	r3, [r7, #20]
 80459ca:	e0cd      	b.n	8045b68 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80459cc:	2201      	movs	r2, #1
 80459ce:	697b      	ldr	r3, [r7, #20]
 80459d0:	fa02 f303 	lsl.w	r3, r2, r3
 80459d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80459d6:	683a      	ldr	r2, [r7, #0]
 80459d8:	693b      	ldr	r3, [r7, #16]
 80459da:	4013      	ands	r3, r2
 80459dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80459de:	68fa      	ldr	r2, [r7, #12]
 80459e0:	693b      	ldr	r3, [r7, #16]
 80459e2:	429a      	cmp	r2, r3
 80459e4:	f040 80bd 	bne.w	8045b62 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80459e8:	4a65      	ldr	r2, [pc, #404]	; (8045b80 <HAL_GPIO_DeInit+0x1d0>)
 80459ea:	697b      	ldr	r3, [r7, #20]
 80459ec:	089b      	lsrs	r3, r3, #2
 80459ee:	3302      	adds	r3, #2
 80459f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80459f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80459f6:	697b      	ldr	r3, [r7, #20]
 80459f8:	f003 0303 	and.w	r3, r3, #3
 80459fc:	009b      	lsls	r3, r3, #2
 80459fe:	220f      	movs	r2, #15
 8045a00:	fa02 f303 	lsl.w	r3, r2, r3
 8045a04:	68ba      	ldr	r2, [r7, #8]
 8045a06:	4013      	ands	r3, r2
 8045a08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8045a0a:	687b      	ldr	r3, [r7, #4]
 8045a0c:	4a5d      	ldr	r2, [pc, #372]	; (8045b84 <HAL_GPIO_DeInit+0x1d4>)
 8045a0e:	4293      	cmp	r3, r2
 8045a10:	d02b      	beq.n	8045a6a <HAL_GPIO_DeInit+0xba>
 8045a12:	687b      	ldr	r3, [r7, #4]
 8045a14:	4a5c      	ldr	r2, [pc, #368]	; (8045b88 <HAL_GPIO_DeInit+0x1d8>)
 8045a16:	4293      	cmp	r3, r2
 8045a18:	d025      	beq.n	8045a66 <HAL_GPIO_DeInit+0xb6>
 8045a1a:	687b      	ldr	r3, [r7, #4]
 8045a1c:	4a5b      	ldr	r2, [pc, #364]	; (8045b8c <HAL_GPIO_DeInit+0x1dc>)
 8045a1e:	4293      	cmp	r3, r2
 8045a20:	d01f      	beq.n	8045a62 <HAL_GPIO_DeInit+0xb2>
 8045a22:	687b      	ldr	r3, [r7, #4]
 8045a24:	4a5a      	ldr	r2, [pc, #360]	; (8045b90 <HAL_GPIO_DeInit+0x1e0>)
 8045a26:	4293      	cmp	r3, r2
 8045a28:	d019      	beq.n	8045a5e <HAL_GPIO_DeInit+0xae>
 8045a2a:	687b      	ldr	r3, [r7, #4]
 8045a2c:	4a59      	ldr	r2, [pc, #356]	; (8045b94 <HAL_GPIO_DeInit+0x1e4>)
 8045a2e:	4293      	cmp	r3, r2
 8045a30:	d013      	beq.n	8045a5a <HAL_GPIO_DeInit+0xaa>
 8045a32:	687b      	ldr	r3, [r7, #4]
 8045a34:	4a58      	ldr	r2, [pc, #352]	; (8045b98 <HAL_GPIO_DeInit+0x1e8>)
 8045a36:	4293      	cmp	r3, r2
 8045a38:	d00d      	beq.n	8045a56 <HAL_GPIO_DeInit+0xa6>
 8045a3a:	687b      	ldr	r3, [r7, #4]
 8045a3c:	4a57      	ldr	r2, [pc, #348]	; (8045b9c <HAL_GPIO_DeInit+0x1ec>)
 8045a3e:	4293      	cmp	r3, r2
 8045a40:	d007      	beq.n	8045a52 <HAL_GPIO_DeInit+0xa2>
 8045a42:	687b      	ldr	r3, [r7, #4]
 8045a44:	4a56      	ldr	r2, [pc, #344]	; (8045ba0 <HAL_GPIO_DeInit+0x1f0>)
 8045a46:	4293      	cmp	r3, r2
 8045a48:	d101      	bne.n	8045a4e <HAL_GPIO_DeInit+0x9e>
 8045a4a:	2307      	movs	r3, #7
 8045a4c:	e00e      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a4e:	2308      	movs	r3, #8
 8045a50:	e00c      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a52:	2306      	movs	r3, #6
 8045a54:	e00a      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a56:	2305      	movs	r3, #5
 8045a58:	e008      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a5a:	2304      	movs	r3, #4
 8045a5c:	e006      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a5e:	2303      	movs	r3, #3
 8045a60:	e004      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a62:	2302      	movs	r3, #2
 8045a64:	e002      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a66:	2301      	movs	r3, #1
 8045a68:	e000      	b.n	8045a6c <HAL_GPIO_DeInit+0xbc>
 8045a6a:	2300      	movs	r3, #0
 8045a6c:	697a      	ldr	r2, [r7, #20]
 8045a6e:	f002 0203 	and.w	r2, r2, #3
 8045a72:	0092      	lsls	r2, r2, #2
 8045a74:	4093      	lsls	r3, r2
 8045a76:	68ba      	ldr	r2, [r7, #8]
 8045a78:	429a      	cmp	r2, r3
 8045a7a:	d132      	bne.n	8045ae2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8045a7c:	4b49      	ldr	r3, [pc, #292]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045a7e:	681a      	ldr	r2, [r3, #0]
 8045a80:	68fb      	ldr	r3, [r7, #12]
 8045a82:	43db      	mvns	r3, r3
 8045a84:	4947      	ldr	r1, [pc, #284]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045a86:	4013      	ands	r3, r2
 8045a88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8045a8a:	4b46      	ldr	r3, [pc, #280]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045a8c:	685a      	ldr	r2, [r3, #4]
 8045a8e:	68fb      	ldr	r3, [r7, #12]
 8045a90:	43db      	mvns	r3, r3
 8045a92:	4944      	ldr	r1, [pc, #272]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045a94:	4013      	ands	r3, r2
 8045a96:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8045a98:	4b42      	ldr	r3, [pc, #264]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045a9a:	68da      	ldr	r2, [r3, #12]
 8045a9c:	68fb      	ldr	r3, [r7, #12]
 8045a9e:	43db      	mvns	r3, r3
 8045aa0:	4940      	ldr	r1, [pc, #256]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045aa2:	4013      	ands	r3, r2
 8045aa4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8045aa6:	4b3f      	ldr	r3, [pc, #252]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045aa8:	689a      	ldr	r2, [r3, #8]
 8045aaa:	68fb      	ldr	r3, [r7, #12]
 8045aac:	43db      	mvns	r3, r3
 8045aae:	493d      	ldr	r1, [pc, #244]	; (8045ba4 <HAL_GPIO_DeInit+0x1f4>)
 8045ab0:	4013      	ands	r3, r2
 8045ab2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8045ab4:	697b      	ldr	r3, [r7, #20]
 8045ab6:	f003 0303 	and.w	r3, r3, #3
 8045aba:	009b      	lsls	r3, r3, #2
 8045abc:	220f      	movs	r2, #15
 8045abe:	fa02 f303 	lsl.w	r3, r2, r3
 8045ac2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8045ac4:	4a2e      	ldr	r2, [pc, #184]	; (8045b80 <HAL_GPIO_DeInit+0x1d0>)
 8045ac6:	697b      	ldr	r3, [r7, #20]
 8045ac8:	089b      	lsrs	r3, r3, #2
 8045aca:	3302      	adds	r3, #2
 8045acc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8045ad0:	68bb      	ldr	r3, [r7, #8]
 8045ad2:	43da      	mvns	r2, r3
 8045ad4:	482a      	ldr	r0, [pc, #168]	; (8045b80 <HAL_GPIO_DeInit+0x1d0>)
 8045ad6:	697b      	ldr	r3, [r7, #20]
 8045ad8:	089b      	lsrs	r3, r3, #2
 8045ada:	400a      	ands	r2, r1
 8045adc:	3302      	adds	r3, #2
 8045ade:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8045ae2:	687b      	ldr	r3, [r7, #4]
 8045ae4:	681a      	ldr	r2, [r3, #0]
 8045ae6:	697b      	ldr	r3, [r7, #20]
 8045ae8:	005b      	lsls	r3, r3, #1
 8045aea:	2103      	movs	r1, #3
 8045aec:	fa01 f303 	lsl.w	r3, r1, r3
 8045af0:	43db      	mvns	r3, r3
 8045af2:	401a      	ands	r2, r3
 8045af4:	687b      	ldr	r3, [r7, #4]
 8045af6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8045af8:	697b      	ldr	r3, [r7, #20]
 8045afa:	08da      	lsrs	r2, r3, #3
 8045afc:	687b      	ldr	r3, [r7, #4]
 8045afe:	3208      	adds	r2, #8
 8045b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8045b04:	697b      	ldr	r3, [r7, #20]
 8045b06:	f003 0307 	and.w	r3, r3, #7
 8045b0a:	009b      	lsls	r3, r3, #2
 8045b0c:	220f      	movs	r2, #15
 8045b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8045b12:	43db      	mvns	r3, r3
 8045b14:	697a      	ldr	r2, [r7, #20]
 8045b16:	08d2      	lsrs	r2, r2, #3
 8045b18:	4019      	ands	r1, r3
 8045b1a:	687b      	ldr	r3, [r7, #4]
 8045b1c:	3208      	adds	r2, #8
 8045b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8045b22:	687b      	ldr	r3, [r7, #4]
 8045b24:	68da      	ldr	r2, [r3, #12]
 8045b26:	697b      	ldr	r3, [r7, #20]
 8045b28:	005b      	lsls	r3, r3, #1
 8045b2a:	2103      	movs	r1, #3
 8045b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8045b30:	43db      	mvns	r3, r3
 8045b32:	401a      	ands	r2, r3
 8045b34:	687b      	ldr	r3, [r7, #4]
 8045b36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8045b38:	687b      	ldr	r3, [r7, #4]
 8045b3a:	685a      	ldr	r2, [r3, #4]
 8045b3c:	2101      	movs	r1, #1
 8045b3e:	697b      	ldr	r3, [r7, #20]
 8045b40:	fa01 f303 	lsl.w	r3, r1, r3
 8045b44:	43db      	mvns	r3, r3
 8045b46:	401a      	ands	r2, r3
 8045b48:	687b      	ldr	r3, [r7, #4]
 8045b4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8045b4c:	687b      	ldr	r3, [r7, #4]
 8045b4e:	689a      	ldr	r2, [r3, #8]
 8045b50:	697b      	ldr	r3, [r7, #20]
 8045b52:	005b      	lsls	r3, r3, #1
 8045b54:	2103      	movs	r1, #3
 8045b56:	fa01 f303 	lsl.w	r3, r1, r3
 8045b5a:	43db      	mvns	r3, r3
 8045b5c:	401a      	ands	r2, r3
 8045b5e:	687b      	ldr	r3, [r7, #4]
 8045b60:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8045b62:	697b      	ldr	r3, [r7, #20]
 8045b64:	3301      	adds	r3, #1
 8045b66:	617b      	str	r3, [r7, #20]
 8045b68:	697b      	ldr	r3, [r7, #20]
 8045b6a:	2b0f      	cmp	r3, #15
 8045b6c:	f67f af2e 	bls.w	80459cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8045b70:	bf00      	nop
 8045b72:	bf00      	nop
 8045b74:	371c      	adds	r7, #28
 8045b76:	46bd      	mov	sp, r7
 8045b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045b7c:	4770      	bx	lr
 8045b7e:	bf00      	nop
 8045b80:	40013800 	.word	0x40013800
 8045b84:	40020000 	.word	0x40020000
 8045b88:	40020400 	.word	0x40020400
 8045b8c:	40020800 	.word	0x40020800
 8045b90:	40020c00 	.word	0x40020c00
 8045b94:	40021000 	.word	0x40021000
 8045b98:	40021400 	.word	0x40021400
 8045b9c:	40021800 	.word	0x40021800
 8045ba0:	40021c00 	.word	0x40021c00
 8045ba4:	40013c00 	.word	0x40013c00

08045ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8045ba8:	b480      	push	{r7}
 8045baa:	b083      	sub	sp, #12
 8045bac:	af00      	add	r7, sp, #0
 8045bae:	6078      	str	r0, [r7, #4]
 8045bb0:	460b      	mov	r3, r1
 8045bb2:	807b      	strh	r3, [r7, #2]
 8045bb4:	4613      	mov	r3, r2
 8045bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8045bb8:	787b      	ldrb	r3, [r7, #1]
 8045bba:	2b00      	cmp	r3, #0
 8045bbc:	d003      	beq.n	8045bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8045bbe:	887a      	ldrh	r2, [r7, #2]
 8045bc0:	687b      	ldr	r3, [r7, #4]
 8045bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8045bc4:	e003      	b.n	8045bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8045bc6:	887b      	ldrh	r3, [r7, #2]
 8045bc8:	041a      	lsls	r2, r3, #16
 8045bca:	687b      	ldr	r3, [r7, #4]
 8045bcc:	619a      	str	r2, [r3, #24]
}
 8045bce:	bf00      	nop
 8045bd0:	370c      	adds	r7, #12
 8045bd2:	46bd      	mov	sp, r7
 8045bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045bd8:	4770      	bx	lr

08045bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8045bda:	b480      	push	{r7}
 8045bdc:	b085      	sub	sp, #20
 8045bde:	af00      	add	r7, sp, #0
 8045be0:	6078      	str	r0, [r7, #4]
 8045be2:	460b      	mov	r3, r1
 8045be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8045be6:	687b      	ldr	r3, [r7, #4]
 8045be8:	695b      	ldr	r3, [r3, #20]
 8045bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8045bec:	887a      	ldrh	r2, [r7, #2]
 8045bee:	68fb      	ldr	r3, [r7, #12]
 8045bf0:	4013      	ands	r3, r2
 8045bf2:	041a      	lsls	r2, r3, #16
 8045bf4:	68fb      	ldr	r3, [r7, #12]
 8045bf6:	43d9      	mvns	r1, r3
 8045bf8:	887b      	ldrh	r3, [r7, #2]
 8045bfa:	400b      	ands	r3, r1
 8045bfc:	431a      	orrs	r2, r3
 8045bfe:	687b      	ldr	r3, [r7, #4]
 8045c00:	619a      	str	r2, [r3, #24]
}
 8045c02:	bf00      	nop
 8045c04:	3714      	adds	r7, #20
 8045c06:	46bd      	mov	sp, r7
 8045c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c0c:	4770      	bx	lr
	...

08045c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8045c10:	b580      	push	{r7, lr}
 8045c12:	b082      	sub	sp, #8
 8045c14:	af00      	add	r7, sp, #0
 8045c16:	4603      	mov	r3, r0
 8045c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8045c1a:	4b08      	ldr	r3, [pc, #32]	; (8045c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8045c1c:	695a      	ldr	r2, [r3, #20]
 8045c1e:	88fb      	ldrh	r3, [r7, #6]
 8045c20:	4013      	ands	r3, r2
 8045c22:	2b00      	cmp	r3, #0
 8045c24:	d006      	beq.n	8045c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8045c26:	4a05      	ldr	r2, [pc, #20]	; (8045c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8045c28:	88fb      	ldrh	r3, [r7, #6]
 8045c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8045c2c:	88fb      	ldrh	r3, [r7, #6]
 8045c2e:	4618      	mov	r0, r3
 8045c30:	f000 f806 	bl	8045c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8045c34:	bf00      	nop
 8045c36:	3708      	adds	r7, #8
 8045c38:	46bd      	mov	sp, r7
 8045c3a:	bd80      	pop	{r7, pc}
 8045c3c:	40013c00 	.word	0x40013c00

08045c40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8045c40:	b480      	push	{r7}
 8045c42:	b083      	sub	sp, #12
 8045c44:	af00      	add	r7, sp, #0
 8045c46:	4603      	mov	r3, r0
 8045c48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8045c4a:	bf00      	nop
 8045c4c:	370c      	adds	r7, #12
 8045c4e:	46bd      	mov	sp, r7
 8045c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c54:	4770      	bx	lr
	...

08045c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045c58:	b580      	push	{r7, lr}
 8045c5a:	b084      	sub	sp, #16
 8045c5c:	af00      	add	r7, sp, #0
 8045c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045c60:	687b      	ldr	r3, [r7, #4]
 8045c62:	2b00      	cmp	r3, #0
 8045c64:	d101      	bne.n	8045c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8045c66:	2301      	movs	r3, #1
 8045c68:	e12b      	b.n	8045ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045c6a:	687b      	ldr	r3, [r7, #4]
 8045c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045c70:	b2db      	uxtb	r3, r3
 8045c72:	2b00      	cmp	r3, #0
 8045c74:	d106      	bne.n	8045c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8045c76:	687b      	ldr	r3, [r7, #4]
 8045c78:	2200      	movs	r2, #0
 8045c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8045c7e:	6878      	ldr	r0, [r7, #4]
 8045c80:	f7fe fcd0 	bl	8044624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8045c84:	687b      	ldr	r3, [r7, #4]
 8045c86:	2224      	movs	r2, #36	; 0x24
 8045c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045c8c:	687b      	ldr	r3, [r7, #4]
 8045c8e:	681b      	ldr	r3, [r3, #0]
 8045c90:	681a      	ldr	r2, [r3, #0]
 8045c92:	687b      	ldr	r3, [r7, #4]
 8045c94:	681b      	ldr	r3, [r3, #0]
 8045c96:	f022 0201 	bic.w	r2, r2, #1
 8045c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8045c9c:	687b      	ldr	r3, [r7, #4]
 8045c9e:	681b      	ldr	r3, [r3, #0]
 8045ca0:	681a      	ldr	r2, [r3, #0]
 8045ca2:	687b      	ldr	r3, [r7, #4]
 8045ca4:	681b      	ldr	r3, [r3, #0]
 8045ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8045caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8045cac:	687b      	ldr	r3, [r7, #4]
 8045cae:	681b      	ldr	r3, [r3, #0]
 8045cb0:	681a      	ldr	r2, [r3, #0]
 8045cb2:	687b      	ldr	r3, [r7, #4]
 8045cb4:	681b      	ldr	r3, [r3, #0]
 8045cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8045cbc:	f001 f8b8 	bl	8046e30 <HAL_RCC_GetPCLK1Freq>
 8045cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8045cc2:	687b      	ldr	r3, [r7, #4]
 8045cc4:	685b      	ldr	r3, [r3, #4]
 8045cc6:	4a81      	ldr	r2, [pc, #516]	; (8045ecc <HAL_I2C_Init+0x274>)
 8045cc8:	4293      	cmp	r3, r2
 8045cca:	d807      	bhi.n	8045cdc <HAL_I2C_Init+0x84>
 8045ccc:	68fb      	ldr	r3, [r7, #12]
 8045cce:	4a80      	ldr	r2, [pc, #512]	; (8045ed0 <HAL_I2C_Init+0x278>)
 8045cd0:	4293      	cmp	r3, r2
 8045cd2:	bf94      	ite	ls
 8045cd4:	2301      	movls	r3, #1
 8045cd6:	2300      	movhi	r3, #0
 8045cd8:	b2db      	uxtb	r3, r3
 8045cda:	e006      	b.n	8045cea <HAL_I2C_Init+0x92>
 8045cdc:	68fb      	ldr	r3, [r7, #12]
 8045cde:	4a7d      	ldr	r2, [pc, #500]	; (8045ed4 <HAL_I2C_Init+0x27c>)
 8045ce0:	4293      	cmp	r3, r2
 8045ce2:	bf94      	ite	ls
 8045ce4:	2301      	movls	r3, #1
 8045ce6:	2300      	movhi	r3, #0
 8045ce8:	b2db      	uxtb	r3, r3
 8045cea:	2b00      	cmp	r3, #0
 8045cec:	d001      	beq.n	8045cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8045cee:	2301      	movs	r3, #1
 8045cf0:	e0e7      	b.n	8045ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8045cf2:	68fb      	ldr	r3, [r7, #12]
 8045cf4:	4a78      	ldr	r2, [pc, #480]	; (8045ed8 <HAL_I2C_Init+0x280>)
 8045cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8045cfa:	0c9b      	lsrs	r3, r3, #18
 8045cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8045cfe:	687b      	ldr	r3, [r7, #4]
 8045d00:	681b      	ldr	r3, [r3, #0]
 8045d02:	685b      	ldr	r3, [r3, #4]
 8045d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045d08:	687b      	ldr	r3, [r7, #4]
 8045d0a:	681b      	ldr	r3, [r3, #0]
 8045d0c:	68ba      	ldr	r2, [r7, #8]
 8045d0e:	430a      	orrs	r2, r1
 8045d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8045d12:	687b      	ldr	r3, [r7, #4]
 8045d14:	681b      	ldr	r3, [r3, #0]
 8045d16:	6a1b      	ldr	r3, [r3, #32]
 8045d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045d1c:	687b      	ldr	r3, [r7, #4]
 8045d1e:	685b      	ldr	r3, [r3, #4]
 8045d20:	4a6a      	ldr	r2, [pc, #424]	; (8045ecc <HAL_I2C_Init+0x274>)
 8045d22:	4293      	cmp	r3, r2
 8045d24:	d802      	bhi.n	8045d2c <HAL_I2C_Init+0xd4>
 8045d26:	68bb      	ldr	r3, [r7, #8]
 8045d28:	3301      	adds	r3, #1
 8045d2a:	e009      	b.n	8045d40 <HAL_I2C_Init+0xe8>
 8045d2c:	68bb      	ldr	r3, [r7, #8]
 8045d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8045d32:	fb02 f303 	mul.w	r3, r2, r3
 8045d36:	4a69      	ldr	r2, [pc, #420]	; (8045edc <HAL_I2C_Init+0x284>)
 8045d38:	fba2 2303 	umull	r2, r3, r2, r3
 8045d3c:	099b      	lsrs	r3, r3, #6
 8045d3e:	3301      	adds	r3, #1
 8045d40:	687a      	ldr	r2, [r7, #4]
 8045d42:	6812      	ldr	r2, [r2, #0]
 8045d44:	430b      	orrs	r3, r1
 8045d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045d48:	687b      	ldr	r3, [r7, #4]
 8045d4a:	681b      	ldr	r3, [r3, #0]
 8045d4c:	69db      	ldr	r3, [r3, #28]
 8045d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045d56:	687b      	ldr	r3, [r7, #4]
 8045d58:	685b      	ldr	r3, [r3, #4]
 8045d5a:	495c      	ldr	r1, [pc, #368]	; (8045ecc <HAL_I2C_Init+0x274>)
 8045d5c:	428b      	cmp	r3, r1
 8045d5e:	d819      	bhi.n	8045d94 <HAL_I2C_Init+0x13c>
 8045d60:	68fb      	ldr	r3, [r7, #12]
 8045d62:	1e59      	subs	r1, r3, #1
 8045d64:	687b      	ldr	r3, [r7, #4]
 8045d66:	685b      	ldr	r3, [r3, #4]
 8045d68:	005b      	lsls	r3, r3, #1
 8045d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8045d6e:	1c59      	adds	r1, r3, #1
 8045d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8045d74:	400b      	ands	r3, r1
 8045d76:	2b00      	cmp	r3, #0
 8045d78:	d00a      	beq.n	8045d90 <HAL_I2C_Init+0x138>
 8045d7a:	68fb      	ldr	r3, [r7, #12]
 8045d7c:	1e59      	subs	r1, r3, #1
 8045d7e:	687b      	ldr	r3, [r7, #4]
 8045d80:	685b      	ldr	r3, [r3, #4]
 8045d82:	005b      	lsls	r3, r3, #1
 8045d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8045d88:	3301      	adds	r3, #1
 8045d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045d8e:	e051      	b.n	8045e34 <HAL_I2C_Init+0x1dc>
 8045d90:	2304      	movs	r3, #4
 8045d92:	e04f      	b.n	8045e34 <HAL_I2C_Init+0x1dc>
 8045d94:	687b      	ldr	r3, [r7, #4]
 8045d96:	689b      	ldr	r3, [r3, #8]
 8045d98:	2b00      	cmp	r3, #0
 8045d9a:	d111      	bne.n	8045dc0 <HAL_I2C_Init+0x168>
 8045d9c:	68fb      	ldr	r3, [r7, #12]
 8045d9e:	1e58      	subs	r0, r3, #1
 8045da0:	687b      	ldr	r3, [r7, #4]
 8045da2:	6859      	ldr	r1, [r3, #4]
 8045da4:	460b      	mov	r3, r1
 8045da6:	005b      	lsls	r3, r3, #1
 8045da8:	440b      	add	r3, r1
 8045daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8045dae:	3301      	adds	r3, #1
 8045db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045db4:	2b00      	cmp	r3, #0
 8045db6:	bf0c      	ite	eq
 8045db8:	2301      	moveq	r3, #1
 8045dba:	2300      	movne	r3, #0
 8045dbc:	b2db      	uxtb	r3, r3
 8045dbe:	e012      	b.n	8045de6 <HAL_I2C_Init+0x18e>
 8045dc0:	68fb      	ldr	r3, [r7, #12]
 8045dc2:	1e58      	subs	r0, r3, #1
 8045dc4:	687b      	ldr	r3, [r7, #4]
 8045dc6:	6859      	ldr	r1, [r3, #4]
 8045dc8:	460b      	mov	r3, r1
 8045dca:	009b      	lsls	r3, r3, #2
 8045dcc:	440b      	add	r3, r1
 8045dce:	0099      	lsls	r1, r3, #2
 8045dd0:	440b      	add	r3, r1
 8045dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8045dd6:	3301      	adds	r3, #1
 8045dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045ddc:	2b00      	cmp	r3, #0
 8045dde:	bf0c      	ite	eq
 8045de0:	2301      	moveq	r3, #1
 8045de2:	2300      	movne	r3, #0
 8045de4:	b2db      	uxtb	r3, r3
 8045de6:	2b00      	cmp	r3, #0
 8045de8:	d001      	beq.n	8045dee <HAL_I2C_Init+0x196>
 8045dea:	2301      	movs	r3, #1
 8045dec:	e022      	b.n	8045e34 <HAL_I2C_Init+0x1dc>
 8045dee:	687b      	ldr	r3, [r7, #4]
 8045df0:	689b      	ldr	r3, [r3, #8]
 8045df2:	2b00      	cmp	r3, #0
 8045df4:	d10e      	bne.n	8045e14 <HAL_I2C_Init+0x1bc>
 8045df6:	68fb      	ldr	r3, [r7, #12]
 8045df8:	1e58      	subs	r0, r3, #1
 8045dfa:	687b      	ldr	r3, [r7, #4]
 8045dfc:	6859      	ldr	r1, [r3, #4]
 8045dfe:	460b      	mov	r3, r1
 8045e00:	005b      	lsls	r3, r3, #1
 8045e02:	440b      	add	r3, r1
 8045e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8045e08:	3301      	adds	r3, #1
 8045e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8045e12:	e00f      	b.n	8045e34 <HAL_I2C_Init+0x1dc>
 8045e14:	68fb      	ldr	r3, [r7, #12]
 8045e16:	1e58      	subs	r0, r3, #1
 8045e18:	687b      	ldr	r3, [r7, #4]
 8045e1a:	6859      	ldr	r1, [r3, #4]
 8045e1c:	460b      	mov	r3, r1
 8045e1e:	009b      	lsls	r3, r3, #2
 8045e20:	440b      	add	r3, r1
 8045e22:	0099      	lsls	r1, r3, #2
 8045e24:	440b      	add	r3, r1
 8045e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8045e2a:	3301      	adds	r3, #1
 8045e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045e34:	6879      	ldr	r1, [r7, #4]
 8045e36:	6809      	ldr	r1, [r1, #0]
 8045e38:	4313      	orrs	r3, r2
 8045e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045e3c:	687b      	ldr	r3, [r7, #4]
 8045e3e:	681b      	ldr	r3, [r3, #0]
 8045e40:	681b      	ldr	r3, [r3, #0]
 8045e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045e46:	687b      	ldr	r3, [r7, #4]
 8045e48:	69da      	ldr	r2, [r3, #28]
 8045e4a:	687b      	ldr	r3, [r7, #4]
 8045e4c:	6a1b      	ldr	r3, [r3, #32]
 8045e4e:	431a      	orrs	r2, r3
 8045e50:	687b      	ldr	r3, [r7, #4]
 8045e52:	681b      	ldr	r3, [r3, #0]
 8045e54:	430a      	orrs	r2, r1
 8045e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045e58:	687b      	ldr	r3, [r7, #4]
 8045e5a:	681b      	ldr	r3, [r3, #0]
 8045e5c:	689b      	ldr	r3, [r3, #8]
 8045e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8045e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045e66:	687a      	ldr	r2, [r7, #4]
 8045e68:	6911      	ldr	r1, [r2, #16]
 8045e6a:	687a      	ldr	r2, [r7, #4]
 8045e6c:	68d2      	ldr	r2, [r2, #12]
 8045e6e:	4311      	orrs	r1, r2
 8045e70:	687a      	ldr	r2, [r7, #4]
 8045e72:	6812      	ldr	r2, [r2, #0]
 8045e74:	430b      	orrs	r3, r1
 8045e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045e78:	687b      	ldr	r3, [r7, #4]
 8045e7a:	681b      	ldr	r3, [r3, #0]
 8045e7c:	68db      	ldr	r3, [r3, #12]
 8045e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045e82:	687b      	ldr	r3, [r7, #4]
 8045e84:	695a      	ldr	r2, [r3, #20]
 8045e86:	687b      	ldr	r3, [r7, #4]
 8045e88:	699b      	ldr	r3, [r3, #24]
 8045e8a:	431a      	orrs	r2, r3
 8045e8c:	687b      	ldr	r3, [r7, #4]
 8045e8e:	681b      	ldr	r3, [r3, #0]
 8045e90:	430a      	orrs	r2, r1
 8045e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045e94:	687b      	ldr	r3, [r7, #4]
 8045e96:	681b      	ldr	r3, [r3, #0]
 8045e98:	681a      	ldr	r2, [r3, #0]
 8045e9a:	687b      	ldr	r3, [r7, #4]
 8045e9c:	681b      	ldr	r3, [r3, #0]
 8045e9e:	f042 0201 	orr.w	r2, r2, #1
 8045ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045ea4:	687b      	ldr	r3, [r7, #4]
 8045ea6:	2200      	movs	r2, #0
 8045ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8045eaa:	687b      	ldr	r3, [r7, #4]
 8045eac:	2220      	movs	r2, #32
 8045eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045eb2:	687b      	ldr	r3, [r7, #4]
 8045eb4:	2200      	movs	r2, #0
 8045eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045eb8:	687b      	ldr	r3, [r7, #4]
 8045eba:	2200      	movs	r2, #0
 8045ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045ec0:	2300      	movs	r3, #0
}
 8045ec2:	4618      	mov	r0, r3
 8045ec4:	3710      	adds	r7, #16
 8045ec6:	46bd      	mov	sp, r7
 8045ec8:	bd80      	pop	{r7, pc}
 8045eca:	bf00      	nop
 8045ecc:	000186a0 	.word	0x000186a0
 8045ed0:	001e847f 	.word	0x001e847f
 8045ed4:	003d08ff 	.word	0x003d08ff
 8045ed8:	431bde83 	.word	0x431bde83
 8045edc:	10624dd3 	.word	0x10624dd3

08045ee0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8045ee0:	b580      	push	{r7, lr}
 8045ee2:	b082      	sub	sp, #8
 8045ee4:	af00      	add	r7, sp, #0
 8045ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045ee8:	687b      	ldr	r3, [r7, #4]
 8045eea:	2b00      	cmp	r3, #0
 8045eec:	d101      	bne.n	8045ef2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8045eee:	2301      	movs	r3, #1
 8045ef0:	e021      	b.n	8045f36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8045ef2:	687b      	ldr	r3, [r7, #4]
 8045ef4:	2224      	movs	r2, #36	; 0x24
 8045ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8045efa:	687b      	ldr	r3, [r7, #4]
 8045efc:	681b      	ldr	r3, [r3, #0]
 8045efe:	681a      	ldr	r2, [r3, #0]
 8045f00:	687b      	ldr	r3, [r7, #4]
 8045f02:	681b      	ldr	r3, [r3, #0]
 8045f04:	f022 0201 	bic.w	r2, r2, #1
 8045f08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8045f0a:	6878      	ldr	r0, [r7, #4]
 8045f0c:	f7fe fbd2 	bl	80446b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8045f10:	687b      	ldr	r3, [r7, #4]
 8045f12:	2200      	movs	r2, #0
 8045f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8045f16:	687b      	ldr	r3, [r7, #4]
 8045f18:	2200      	movs	r2, #0
 8045f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045f1e:	687b      	ldr	r3, [r7, #4]
 8045f20:	2200      	movs	r2, #0
 8045f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8045f24:	687b      	ldr	r3, [r7, #4]
 8045f26:	2200      	movs	r2, #0
 8045f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8045f2c:	687b      	ldr	r3, [r7, #4]
 8045f2e:	2200      	movs	r2, #0
 8045f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8045f34:	2300      	movs	r3, #0
}
 8045f36:	4618      	mov	r0, r3
 8045f38:	3708      	adds	r7, #8
 8045f3a:	46bd      	mov	sp, r7
 8045f3c:	bd80      	pop	{r7, pc}
	...

08045f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8045f40:	b580      	push	{r7, lr}
 8045f42:	b088      	sub	sp, #32
 8045f44:	af02      	add	r7, sp, #8
 8045f46:	60f8      	str	r0, [r7, #12]
 8045f48:	607a      	str	r2, [r7, #4]
 8045f4a:	461a      	mov	r2, r3
 8045f4c:	460b      	mov	r3, r1
 8045f4e:	817b      	strh	r3, [r7, #10]
 8045f50:	4613      	mov	r3, r2
 8045f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8045f54:	f7fe ff44 	bl	8044de0 <HAL_GetTick>
 8045f58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045f5a:	68fb      	ldr	r3, [r7, #12]
 8045f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045f60:	b2db      	uxtb	r3, r3
 8045f62:	2b20      	cmp	r3, #32
 8045f64:	f040 80e0 	bne.w	8046128 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8045f68:	697b      	ldr	r3, [r7, #20]
 8045f6a:	9300      	str	r3, [sp, #0]
 8045f6c:	2319      	movs	r3, #25
 8045f6e:	2201      	movs	r2, #1
 8045f70:	4970      	ldr	r1, [pc, #448]	; (8046134 <HAL_I2C_Master_Transmit+0x1f4>)
 8045f72:	68f8      	ldr	r0, [r7, #12]
 8045f74:	f000 f964 	bl	8046240 <I2C_WaitOnFlagUntilTimeout>
 8045f78:	4603      	mov	r3, r0
 8045f7a:	2b00      	cmp	r3, #0
 8045f7c:	d001      	beq.n	8045f82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8045f7e:	2302      	movs	r3, #2
 8045f80:	e0d3      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8045f82:	68fb      	ldr	r3, [r7, #12]
 8045f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8045f88:	2b01      	cmp	r3, #1
 8045f8a:	d101      	bne.n	8045f90 <HAL_I2C_Master_Transmit+0x50>
 8045f8c:	2302      	movs	r3, #2
 8045f8e:	e0cc      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
 8045f90:	68fb      	ldr	r3, [r7, #12]
 8045f92:	2201      	movs	r2, #1
 8045f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8045f98:	68fb      	ldr	r3, [r7, #12]
 8045f9a:	681b      	ldr	r3, [r3, #0]
 8045f9c:	681b      	ldr	r3, [r3, #0]
 8045f9e:	f003 0301 	and.w	r3, r3, #1
 8045fa2:	2b01      	cmp	r3, #1
 8045fa4:	d007      	beq.n	8045fb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8045fa6:	68fb      	ldr	r3, [r7, #12]
 8045fa8:	681b      	ldr	r3, [r3, #0]
 8045faa:	681a      	ldr	r2, [r3, #0]
 8045fac:	68fb      	ldr	r3, [r7, #12]
 8045fae:	681b      	ldr	r3, [r3, #0]
 8045fb0:	f042 0201 	orr.w	r2, r2, #1
 8045fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8045fb6:	68fb      	ldr	r3, [r7, #12]
 8045fb8:	681b      	ldr	r3, [r3, #0]
 8045fba:	681a      	ldr	r2, [r3, #0]
 8045fbc:	68fb      	ldr	r3, [r7, #12]
 8045fbe:	681b      	ldr	r3, [r3, #0]
 8045fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8045fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8045fc6:	68fb      	ldr	r3, [r7, #12]
 8045fc8:	2221      	movs	r2, #33	; 0x21
 8045fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8045fce:	68fb      	ldr	r3, [r7, #12]
 8045fd0:	2210      	movs	r2, #16
 8045fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8045fd6:	68fb      	ldr	r3, [r7, #12]
 8045fd8:	2200      	movs	r2, #0
 8045fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8045fdc:	68fb      	ldr	r3, [r7, #12]
 8045fde:	687a      	ldr	r2, [r7, #4]
 8045fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8045fe2:	68fb      	ldr	r3, [r7, #12]
 8045fe4:	893a      	ldrh	r2, [r7, #8]
 8045fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8045fe8:	68fb      	ldr	r3, [r7, #12]
 8045fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045fec:	b29a      	uxth	r2, r3
 8045fee:	68fb      	ldr	r3, [r7, #12]
 8045ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8045ff2:	68fb      	ldr	r3, [r7, #12]
 8045ff4:	4a50      	ldr	r2, [pc, #320]	; (8046138 <HAL_I2C_Master_Transmit+0x1f8>)
 8045ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8045ff8:	8979      	ldrh	r1, [r7, #10]
 8045ffa:	697b      	ldr	r3, [r7, #20]
 8045ffc:	6a3a      	ldr	r2, [r7, #32]
 8045ffe:	68f8      	ldr	r0, [r7, #12]
 8046000:	f000 f89c 	bl	804613c <I2C_MasterRequestWrite>
 8046004:	4603      	mov	r3, r0
 8046006:	2b00      	cmp	r3, #0
 8046008:	d001      	beq.n	804600e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 804600a:	2301      	movs	r3, #1
 804600c:	e08d      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804600e:	2300      	movs	r3, #0
 8046010:	613b      	str	r3, [r7, #16]
 8046012:	68fb      	ldr	r3, [r7, #12]
 8046014:	681b      	ldr	r3, [r3, #0]
 8046016:	695b      	ldr	r3, [r3, #20]
 8046018:	613b      	str	r3, [r7, #16]
 804601a:	68fb      	ldr	r3, [r7, #12]
 804601c:	681b      	ldr	r3, [r3, #0]
 804601e:	699b      	ldr	r3, [r3, #24]
 8046020:	613b      	str	r3, [r7, #16]
 8046022:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8046024:	e066      	b.n	80460f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8046026:	697a      	ldr	r2, [r7, #20]
 8046028:	6a39      	ldr	r1, [r7, #32]
 804602a:	68f8      	ldr	r0, [r7, #12]
 804602c:	f000 f9de 	bl	80463ec <I2C_WaitOnTXEFlagUntilTimeout>
 8046030:	4603      	mov	r3, r0
 8046032:	2b00      	cmp	r3, #0
 8046034:	d00d      	beq.n	8046052 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8046036:	68fb      	ldr	r3, [r7, #12]
 8046038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804603a:	2b04      	cmp	r3, #4
 804603c:	d107      	bne.n	804604e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804603e:	68fb      	ldr	r3, [r7, #12]
 8046040:	681b      	ldr	r3, [r3, #0]
 8046042:	681a      	ldr	r2, [r3, #0]
 8046044:	68fb      	ldr	r3, [r7, #12]
 8046046:	681b      	ldr	r3, [r3, #0]
 8046048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804604c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 804604e:	2301      	movs	r3, #1
 8046050:	e06b      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8046052:	68fb      	ldr	r3, [r7, #12]
 8046054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046056:	781a      	ldrb	r2, [r3, #0]
 8046058:	68fb      	ldr	r3, [r7, #12]
 804605a:	681b      	ldr	r3, [r3, #0]
 804605c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 804605e:	68fb      	ldr	r3, [r7, #12]
 8046060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046062:	1c5a      	adds	r2, r3, #1
 8046064:	68fb      	ldr	r3, [r7, #12]
 8046066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8046068:	68fb      	ldr	r3, [r7, #12]
 804606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804606c:	b29b      	uxth	r3, r3
 804606e:	3b01      	subs	r3, #1
 8046070:	b29a      	uxth	r2, r3
 8046072:	68fb      	ldr	r3, [r7, #12]
 8046074:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8046076:	68fb      	ldr	r3, [r7, #12]
 8046078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804607a:	3b01      	subs	r3, #1
 804607c:	b29a      	uxth	r2, r3
 804607e:	68fb      	ldr	r3, [r7, #12]
 8046080:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8046082:	68fb      	ldr	r3, [r7, #12]
 8046084:	681b      	ldr	r3, [r3, #0]
 8046086:	695b      	ldr	r3, [r3, #20]
 8046088:	f003 0304 	and.w	r3, r3, #4
 804608c:	2b04      	cmp	r3, #4
 804608e:	d11b      	bne.n	80460c8 <HAL_I2C_Master_Transmit+0x188>
 8046090:	68fb      	ldr	r3, [r7, #12]
 8046092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8046094:	2b00      	cmp	r3, #0
 8046096:	d017      	beq.n	80460c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8046098:	68fb      	ldr	r3, [r7, #12]
 804609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804609c:	781a      	ldrb	r2, [r3, #0]
 804609e:	68fb      	ldr	r3, [r7, #12]
 80460a0:	681b      	ldr	r3, [r3, #0]
 80460a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80460a4:	68fb      	ldr	r3, [r7, #12]
 80460a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80460a8:	1c5a      	adds	r2, r3, #1
 80460aa:	68fb      	ldr	r3, [r7, #12]
 80460ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80460ae:	68fb      	ldr	r3, [r7, #12]
 80460b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80460b2:	b29b      	uxth	r3, r3
 80460b4:	3b01      	subs	r3, #1
 80460b6:	b29a      	uxth	r2, r3
 80460b8:	68fb      	ldr	r3, [r7, #12]
 80460ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80460bc:	68fb      	ldr	r3, [r7, #12]
 80460be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80460c0:	3b01      	subs	r3, #1
 80460c2:	b29a      	uxth	r2, r3
 80460c4:	68fb      	ldr	r3, [r7, #12]
 80460c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80460c8:	697a      	ldr	r2, [r7, #20]
 80460ca:	6a39      	ldr	r1, [r7, #32]
 80460cc:	68f8      	ldr	r0, [r7, #12]
 80460ce:	f000 f9ce 	bl	804646e <I2C_WaitOnBTFFlagUntilTimeout>
 80460d2:	4603      	mov	r3, r0
 80460d4:	2b00      	cmp	r3, #0
 80460d6:	d00d      	beq.n	80460f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80460d8:	68fb      	ldr	r3, [r7, #12]
 80460da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80460dc:	2b04      	cmp	r3, #4
 80460de:	d107      	bne.n	80460f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80460e0:	68fb      	ldr	r3, [r7, #12]
 80460e2:	681b      	ldr	r3, [r3, #0]
 80460e4:	681a      	ldr	r2, [r3, #0]
 80460e6:	68fb      	ldr	r3, [r7, #12]
 80460e8:	681b      	ldr	r3, [r3, #0]
 80460ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80460ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80460f0:	2301      	movs	r3, #1
 80460f2:	e01a      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80460f4:	68fb      	ldr	r3, [r7, #12]
 80460f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80460f8:	2b00      	cmp	r3, #0
 80460fa:	d194      	bne.n	8046026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80460fc:	68fb      	ldr	r3, [r7, #12]
 80460fe:	681b      	ldr	r3, [r3, #0]
 8046100:	681a      	ldr	r2, [r3, #0]
 8046102:	68fb      	ldr	r3, [r7, #12]
 8046104:	681b      	ldr	r3, [r3, #0]
 8046106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804610a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804610c:	68fb      	ldr	r3, [r7, #12]
 804610e:	2220      	movs	r2, #32
 8046110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8046114:	68fb      	ldr	r3, [r7, #12]
 8046116:	2200      	movs	r2, #0
 8046118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804611c:	68fb      	ldr	r3, [r7, #12]
 804611e:	2200      	movs	r2, #0
 8046120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8046124:	2300      	movs	r3, #0
 8046126:	e000      	b.n	804612a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8046128:	2302      	movs	r3, #2
  }
}
 804612a:	4618      	mov	r0, r3
 804612c:	3718      	adds	r7, #24
 804612e:	46bd      	mov	sp, r7
 8046130:	bd80      	pop	{r7, pc}
 8046132:	bf00      	nop
 8046134:	00100002 	.word	0x00100002
 8046138:	ffff0000 	.word	0xffff0000

0804613c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 804613c:	b580      	push	{r7, lr}
 804613e:	b088      	sub	sp, #32
 8046140:	af02      	add	r7, sp, #8
 8046142:	60f8      	str	r0, [r7, #12]
 8046144:	607a      	str	r2, [r7, #4]
 8046146:	603b      	str	r3, [r7, #0]
 8046148:	460b      	mov	r3, r1
 804614a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 804614c:	68fb      	ldr	r3, [r7, #12]
 804614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8046152:	697b      	ldr	r3, [r7, #20]
 8046154:	2b08      	cmp	r3, #8
 8046156:	d006      	beq.n	8046166 <I2C_MasterRequestWrite+0x2a>
 8046158:	697b      	ldr	r3, [r7, #20]
 804615a:	2b01      	cmp	r3, #1
 804615c:	d003      	beq.n	8046166 <I2C_MasterRequestWrite+0x2a>
 804615e:	697b      	ldr	r3, [r7, #20]
 8046160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8046164:	d108      	bne.n	8046178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8046166:	68fb      	ldr	r3, [r7, #12]
 8046168:	681b      	ldr	r3, [r3, #0]
 804616a:	681a      	ldr	r2, [r3, #0]
 804616c:	68fb      	ldr	r3, [r7, #12]
 804616e:	681b      	ldr	r3, [r3, #0]
 8046170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8046174:	601a      	str	r2, [r3, #0]
 8046176:	e00b      	b.n	8046190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8046178:	68fb      	ldr	r3, [r7, #12]
 804617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804617c:	2b12      	cmp	r3, #18
 804617e:	d107      	bne.n	8046190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8046180:	68fb      	ldr	r3, [r7, #12]
 8046182:	681b      	ldr	r3, [r3, #0]
 8046184:	681a      	ldr	r2, [r3, #0]
 8046186:	68fb      	ldr	r3, [r7, #12]
 8046188:	681b      	ldr	r3, [r3, #0]
 804618a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804618e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8046190:	683b      	ldr	r3, [r7, #0]
 8046192:	9300      	str	r3, [sp, #0]
 8046194:	687b      	ldr	r3, [r7, #4]
 8046196:	2200      	movs	r2, #0
 8046198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 804619c:	68f8      	ldr	r0, [r7, #12]
 804619e:	f000 f84f 	bl	8046240 <I2C_WaitOnFlagUntilTimeout>
 80461a2:	4603      	mov	r3, r0
 80461a4:	2b00      	cmp	r3, #0
 80461a6:	d00d      	beq.n	80461c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80461a8:	68fb      	ldr	r3, [r7, #12]
 80461aa:	681b      	ldr	r3, [r3, #0]
 80461ac:	681b      	ldr	r3, [r3, #0]
 80461ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80461b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80461b6:	d103      	bne.n	80461c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80461b8:	68fb      	ldr	r3, [r7, #12]
 80461ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80461be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80461c0:	2303      	movs	r3, #3
 80461c2:	e035      	b.n	8046230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80461c4:	68fb      	ldr	r3, [r7, #12]
 80461c6:	691b      	ldr	r3, [r3, #16]
 80461c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80461cc:	d108      	bne.n	80461e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80461ce:	897b      	ldrh	r3, [r7, #10]
 80461d0:	b2db      	uxtb	r3, r3
 80461d2:	461a      	mov	r2, r3
 80461d4:	68fb      	ldr	r3, [r7, #12]
 80461d6:	681b      	ldr	r3, [r3, #0]
 80461d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80461dc:	611a      	str	r2, [r3, #16]
 80461de:	e01b      	b.n	8046218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80461e0:	897b      	ldrh	r3, [r7, #10]
 80461e2:	11db      	asrs	r3, r3, #7
 80461e4:	b2db      	uxtb	r3, r3
 80461e6:	f003 0306 	and.w	r3, r3, #6
 80461ea:	b2db      	uxtb	r3, r3
 80461ec:	f063 030f 	orn	r3, r3, #15
 80461f0:	b2da      	uxtb	r2, r3
 80461f2:	68fb      	ldr	r3, [r7, #12]
 80461f4:	681b      	ldr	r3, [r3, #0]
 80461f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80461f8:	683b      	ldr	r3, [r7, #0]
 80461fa:	687a      	ldr	r2, [r7, #4]
 80461fc:	490e      	ldr	r1, [pc, #56]	; (8046238 <I2C_MasterRequestWrite+0xfc>)
 80461fe:	68f8      	ldr	r0, [r7, #12]
 8046200:	f000 f875 	bl	80462ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8046204:	4603      	mov	r3, r0
 8046206:	2b00      	cmp	r3, #0
 8046208:	d001      	beq.n	804620e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 804620a:	2301      	movs	r3, #1
 804620c:	e010      	b.n	8046230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 804620e:	897b      	ldrh	r3, [r7, #10]
 8046210:	b2da      	uxtb	r2, r3
 8046212:	68fb      	ldr	r3, [r7, #12]
 8046214:	681b      	ldr	r3, [r3, #0]
 8046216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8046218:	683b      	ldr	r3, [r7, #0]
 804621a:	687a      	ldr	r2, [r7, #4]
 804621c:	4907      	ldr	r1, [pc, #28]	; (804623c <I2C_MasterRequestWrite+0x100>)
 804621e:	68f8      	ldr	r0, [r7, #12]
 8046220:	f000 f865 	bl	80462ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8046224:	4603      	mov	r3, r0
 8046226:	2b00      	cmp	r3, #0
 8046228:	d001      	beq.n	804622e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 804622a:	2301      	movs	r3, #1
 804622c:	e000      	b.n	8046230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 804622e:	2300      	movs	r3, #0
}
 8046230:	4618      	mov	r0, r3
 8046232:	3718      	adds	r7, #24
 8046234:	46bd      	mov	sp, r7
 8046236:	bd80      	pop	{r7, pc}
 8046238:	00010008 	.word	0x00010008
 804623c:	00010002 	.word	0x00010002

08046240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8046240:	b580      	push	{r7, lr}
 8046242:	b084      	sub	sp, #16
 8046244:	af00      	add	r7, sp, #0
 8046246:	60f8      	str	r0, [r7, #12]
 8046248:	60b9      	str	r1, [r7, #8]
 804624a:	603b      	str	r3, [r7, #0]
 804624c:	4613      	mov	r3, r2
 804624e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8046250:	e025      	b.n	804629e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046252:	683b      	ldr	r3, [r7, #0]
 8046254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046258:	d021      	beq.n	804629e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804625a:	f7fe fdc1 	bl	8044de0 <HAL_GetTick>
 804625e:	4602      	mov	r2, r0
 8046260:	69bb      	ldr	r3, [r7, #24]
 8046262:	1ad3      	subs	r3, r2, r3
 8046264:	683a      	ldr	r2, [r7, #0]
 8046266:	429a      	cmp	r2, r3
 8046268:	d302      	bcc.n	8046270 <I2C_WaitOnFlagUntilTimeout+0x30>
 804626a:	683b      	ldr	r3, [r7, #0]
 804626c:	2b00      	cmp	r3, #0
 804626e:	d116      	bne.n	804629e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8046270:	68fb      	ldr	r3, [r7, #12]
 8046272:	2200      	movs	r2, #0
 8046274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8046276:	68fb      	ldr	r3, [r7, #12]
 8046278:	2220      	movs	r2, #32
 804627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 804627e:	68fb      	ldr	r3, [r7, #12]
 8046280:	2200      	movs	r2, #0
 8046282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8046286:	68fb      	ldr	r3, [r7, #12]
 8046288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804628a:	f043 0220 	orr.w	r2, r3, #32
 804628e:	68fb      	ldr	r3, [r7, #12]
 8046290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8046292:	68fb      	ldr	r3, [r7, #12]
 8046294:	2200      	movs	r2, #0
 8046296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 804629a:	2301      	movs	r3, #1
 804629c:	e023      	b.n	80462e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 804629e:	68bb      	ldr	r3, [r7, #8]
 80462a0:	0c1b      	lsrs	r3, r3, #16
 80462a2:	b2db      	uxtb	r3, r3
 80462a4:	2b01      	cmp	r3, #1
 80462a6:	d10d      	bne.n	80462c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80462a8:	68fb      	ldr	r3, [r7, #12]
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	695b      	ldr	r3, [r3, #20]
 80462ae:	43da      	mvns	r2, r3
 80462b0:	68bb      	ldr	r3, [r7, #8]
 80462b2:	4013      	ands	r3, r2
 80462b4:	b29b      	uxth	r3, r3
 80462b6:	2b00      	cmp	r3, #0
 80462b8:	bf0c      	ite	eq
 80462ba:	2301      	moveq	r3, #1
 80462bc:	2300      	movne	r3, #0
 80462be:	b2db      	uxtb	r3, r3
 80462c0:	461a      	mov	r2, r3
 80462c2:	e00c      	b.n	80462de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80462c4:	68fb      	ldr	r3, [r7, #12]
 80462c6:	681b      	ldr	r3, [r3, #0]
 80462c8:	699b      	ldr	r3, [r3, #24]
 80462ca:	43da      	mvns	r2, r3
 80462cc:	68bb      	ldr	r3, [r7, #8]
 80462ce:	4013      	ands	r3, r2
 80462d0:	b29b      	uxth	r3, r3
 80462d2:	2b00      	cmp	r3, #0
 80462d4:	bf0c      	ite	eq
 80462d6:	2301      	moveq	r3, #1
 80462d8:	2300      	movne	r3, #0
 80462da:	b2db      	uxtb	r3, r3
 80462dc:	461a      	mov	r2, r3
 80462de:	79fb      	ldrb	r3, [r7, #7]
 80462e0:	429a      	cmp	r2, r3
 80462e2:	d0b6      	beq.n	8046252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80462e4:	2300      	movs	r3, #0
}
 80462e6:	4618      	mov	r0, r3
 80462e8:	3710      	adds	r7, #16
 80462ea:	46bd      	mov	sp, r7
 80462ec:	bd80      	pop	{r7, pc}

080462ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80462ee:	b580      	push	{r7, lr}
 80462f0:	b084      	sub	sp, #16
 80462f2:	af00      	add	r7, sp, #0
 80462f4:	60f8      	str	r0, [r7, #12]
 80462f6:	60b9      	str	r1, [r7, #8]
 80462f8:	607a      	str	r2, [r7, #4]
 80462fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80462fc:	e051      	b.n	80463a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80462fe:	68fb      	ldr	r3, [r7, #12]
 8046300:	681b      	ldr	r3, [r3, #0]
 8046302:	695b      	ldr	r3, [r3, #20]
 8046304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8046308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804630c:	d123      	bne.n	8046356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804630e:	68fb      	ldr	r3, [r7, #12]
 8046310:	681b      	ldr	r3, [r3, #0]
 8046312:	681a      	ldr	r2, [r3, #0]
 8046314:	68fb      	ldr	r3, [r7, #12]
 8046316:	681b      	ldr	r3, [r3, #0]
 8046318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804631c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804631e:	68fb      	ldr	r3, [r7, #12]
 8046320:	681b      	ldr	r3, [r3, #0]
 8046322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8046326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8046328:	68fb      	ldr	r3, [r7, #12]
 804632a:	2200      	movs	r2, #0
 804632c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 804632e:	68fb      	ldr	r3, [r7, #12]
 8046330:	2220      	movs	r2, #32
 8046332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8046336:	68fb      	ldr	r3, [r7, #12]
 8046338:	2200      	movs	r2, #0
 804633a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 804633e:	68fb      	ldr	r3, [r7, #12]
 8046340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046342:	f043 0204 	orr.w	r2, r3, #4
 8046346:	68fb      	ldr	r3, [r7, #12]
 8046348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804634a:	68fb      	ldr	r3, [r7, #12]
 804634c:	2200      	movs	r2, #0
 804634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8046352:	2301      	movs	r3, #1
 8046354:	e046      	b.n	80463e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046356:	687b      	ldr	r3, [r7, #4]
 8046358:	f1b3 3fff 	cmp.w	r3, #4294967295
 804635c:	d021      	beq.n	80463a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804635e:	f7fe fd3f 	bl	8044de0 <HAL_GetTick>
 8046362:	4602      	mov	r2, r0
 8046364:	683b      	ldr	r3, [r7, #0]
 8046366:	1ad3      	subs	r3, r2, r3
 8046368:	687a      	ldr	r2, [r7, #4]
 804636a:	429a      	cmp	r2, r3
 804636c:	d302      	bcc.n	8046374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 804636e:	687b      	ldr	r3, [r7, #4]
 8046370:	2b00      	cmp	r3, #0
 8046372:	d116      	bne.n	80463a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8046374:	68fb      	ldr	r3, [r7, #12]
 8046376:	2200      	movs	r2, #0
 8046378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 804637a:	68fb      	ldr	r3, [r7, #12]
 804637c:	2220      	movs	r2, #32
 804637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8046382:	68fb      	ldr	r3, [r7, #12]
 8046384:	2200      	movs	r2, #0
 8046386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804638a:	68fb      	ldr	r3, [r7, #12]
 804638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804638e:	f043 0220 	orr.w	r2, r3, #32
 8046392:	68fb      	ldr	r3, [r7, #12]
 8046394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8046396:	68fb      	ldr	r3, [r7, #12]
 8046398:	2200      	movs	r2, #0
 804639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 804639e:	2301      	movs	r3, #1
 80463a0:	e020      	b.n	80463e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80463a2:	68bb      	ldr	r3, [r7, #8]
 80463a4:	0c1b      	lsrs	r3, r3, #16
 80463a6:	b2db      	uxtb	r3, r3
 80463a8:	2b01      	cmp	r3, #1
 80463aa:	d10c      	bne.n	80463c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80463ac:	68fb      	ldr	r3, [r7, #12]
 80463ae:	681b      	ldr	r3, [r3, #0]
 80463b0:	695b      	ldr	r3, [r3, #20]
 80463b2:	43da      	mvns	r2, r3
 80463b4:	68bb      	ldr	r3, [r7, #8]
 80463b6:	4013      	ands	r3, r2
 80463b8:	b29b      	uxth	r3, r3
 80463ba:	2b00      	cmp	r3, #0
 80463bc:	bf14      	ite	ne
 80463be:	2301      	movne	r3, #1
 80463c0:	2300      	moveq	r3, #0
 80463c2:	b2db      	uxtb	r3, r3
 80463c4:	e00b      	b.n	80463de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80463c6:	68fb      	ldr	r3, [r7, #12]
 80463c8:	681b      	ldr	r3, [r3, #0]
 80463ca:	699b      	ldr	r3, [r3, #24]
 80463cc:	43da      	mvns	r2, r3
 80463ce:	68bb      	ldr	r3, [r7, #8]
 80463d0:	4013      	ands	r3, r2
 80463d2:	b29b      	uxth	r3, r3
 80463d4:	2b00      	cmp	r3, #0
 80463d6:	bf14      	ite	ne
 80463d8:	2301      	movne	r3, #1
 80463da:	2300      	moveq	r3, #0
 80463dc:	b2db      	uxtb	r3, r3
 80463de:	2b00      	cmp	r3, #0
 80463e0:	d18d      	bne.n	80462fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80463e2:	2300      	movs	r3, #0
}
 80463e4:	4618      	mov	r0, r3
 80463e6:	3710      	adds	r7, #16
 80463e8:	46bd      	mov	sp, r7
 80463ea:	bd80      	pop	{r7, pc}

080463ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80463ec:	b580      	push	{r7, lr}
 80463ee:	b084      	sub	sp, #16
 80463f0:	af00      	add	r7, sp, #0
 80463f2:	60f8      	str	r0, [r7, #12]
 80463f4:	60b9      	str	r1, [r7, #8]
 80463f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80463f8:	e02d      	b.n	8046456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80463fa:	68f8      	ldr	r0, [r7, #12]
 80463fc:	f000 f878 	bl	80464f0 <I2C_IsAcknowledgeFailed>
 8046400:	4603      	mov	r3, r0
 8046402:	2b00      	cmp	r3, #0
 8046404:	d001      	beq.n	804640a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8046406:	2301      	movs	r3, #1
 8046408:	e02d      	b.n	8046466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804640a:	68bb      	ldr	r3, [r7, #8]
 804640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046410:	d021      	beq.n	8046456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046412:	f7fe fce5 	bl	8044de0 <HAL_GetTick>
 8046416:	4602      	mov	r2, r0
 8046418:	687b      	ldr	r3, [r7, #4]
 804641a:	1ad3      	subs	r3, r2, r3
 804641c:	68ba      	ldr	r2, [r7, #8]
 804641e:	429a      	cmp	r2, r3
 8046420:	d302      	bcc.n	8046428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8046422:	68bb      	ldr	r3, [r7, #8]
 8046424:	2b00      	cmp	r3, #0
 8046426:	d116      	bne.n	8046456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8046428:	68fb      	ldr	r3, [r7, #12]
 804642a:	2200      	movs	r2, #0
 804642c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 804642e:	68fb      	ldr	r3, [r7, #12]
 8046430:	2220      	movs	r2, #32
 8046432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8046436:	68fb      	ldr	r3, [r7, #12]
 8046438:	2200      	movs	r2, #0
 804643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804643e:	68fb      	ldr	r3, [r7, #12]
 8046440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046442:	f043 0220 	orr.w	r2, r3, #32
 8046446:	68fb      	ldr	r3, [r7, #12]
 8046448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804644a:	68fb      	ldr	r3, [r7, #12]
 804644c:	2200      	movs	r2, #0
 804644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8046452:	2301      	movs	r3, #1
 8046454:	e007      	b.n	8046466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8046456:	68fb      	ldr	r3, [r7, #12]
 8046458:	681b      	ldr	r3, [r3, #0]
 804645a:	695b      	ldr	r3, [r3, #20]
 804645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046460:	2b80      	cmp	r3, #128	; 0x80
 8046462:	d1ca      	bne.n	80463fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8046464:	2300      	movs	r3, #0
}
 8046466:	4618      	mov	r0, r3
 8046468:	3710      	adds	r7, #16
 804646a:	46bd      	mov	sp, r7
 804646c:	bd80      	pop	{r7, pc}

0804646e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804646e:	b580      	push	{r7, lr}
 8046470:	b084      	sub	sp, #16
 8046472:	af00      	add	r7, sp, #0
 8046474:	60f8      	str	r0, [r7, #12]
 8046476:	60b9      	str	r1, [r7, #8]
 8046478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 804647a:	e02d      	b.n	80464d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 804647c:	68f8      	ldr	r0, [r7, #12]
 804647e:	f000 f837 	bl	80464f0 <I2C_IsAcknowledgeFailed>
 8046482:	4603      	mov	r3, r0
 8046484:	2b00      	cmp	r3, #0
 8046486:	d001      	beq.n	804648c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8046488:	2301      	movs	r3, #1
 804648a:	e02d      	b.n	80464e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804648c:	68bb      	ldr	r3, [r7, #8]
 804648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046492:	d021      	beq.n	80464d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046494:	f7fe fca4 	bl	8044de0 <HAL_GetTick>
 8046498:	4602      	mov	r2, r0
 804649a:	687b      	ldr	r3, [r7, #4]
 804649c:	1ad3      	subs	r3, r2, r3
 804649e:	68ba      	ldr	r2, [r7, #8]
 80464a0:	429a      	cmp	r2, r3
 80464a2:	d302      	bcc.n	80464aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80464a4:	68bb      	ldr	r3, [r7, #8]
 80464a6:	2b00      	cmp	r3, #0
 80464a8:	d116      	bne.n	80464d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80464aa:	68fb      	ldr	r3, [r7, #12]
 80464ac:	2200      	movs	r2, #0
 80464ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80464b0:	68fb      	ldr	r3, [r7, #12]
 80464b2:	2220      	movs	r2, #32
 80464b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80464b8:	68fb      	ldr	r3, [r7, #12]
 80464ba:	2200      	movs	r2, #0
 80464bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80464c0:	68fb      	ldr	r3, [r7, #12]
 80464c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80464c4:	f043 0220 	orr.w	r2, r3, #32
 80464c8:	68fb      	ldr	r3, [r7, #12]
 80464ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80464cc:	68fb      	ldr	r3, [r7, #12]
 80464ce:	2200      	movs	r2, #0
 80464d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80464d4:	2301      	movs	r3, #1
 80464d6:	e007      	b.n	80464e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80464d8:	68fb      	ldr	r3, [r7, #12]
 80464da:	681b      	ldr	r3, [r3, #0]
 80464dc:	695b      	ldr	r3, [r3, #20]
 80464de:	f003 0304 	and.w	r3, r3, #4
 80464e2:	2b04      	cmp	r3, #4
 80464e4:	d1ca      	bne.n	804647c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80464e6:	2300      	movs	r3, #0
}
 80464e8:	4618      	mov	r0, r3
 80464ea:	3710      	adds	r7, #16
 80464ec:	46bd      	mov	sp, r7
 80464ee:	bd80      	pop	{r7, pc}

080464f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80464f0:	b480      	push	{r7}
 80464f2:	b083      	sub	sp, #12
 80464f4:	af00      	add	r7, sp, #0
 80464f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80464f8:	687b      	ldr	r3, [r7, #4]
 80464fa:	681b      	ldr	r3, [r3, #0]
 80464fc:	695b      	ldr	r3, [r3, #20]
 80464fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8046502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046506:	d11b      	bne.n	8046540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8046508:	687b      	ldr	r3, [r7, #4]
 804650a:	681b      	ldr	r3, [r3, #0]
 804650c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8046510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8046512:	687b      	ldr	r3, [r7, #4]
 8046514:	2200      	movs	r2, #0
 8046516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8046518:	687b      	ldr	r3, [r7, #4]
 804651a:	2220      	movs	r2, #32
 804651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8046520:	687b      	ldr	r3, [r7, #4]
 8046522:	2200      	movs	r2, #0
 8046524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8046528:	687b      	ldr	r3, [r7, #4]
 804652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804652c:	f043 0204 	orr.w	r2, r3, #4
 8046530:	687b      	ldr	r3, [r7, #4]
 8046532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8046534:	687b      	ldr	r3, [r7, #4]
 8046536:	2200      	movs	r2, #0
 8046538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 804653c:	2301      	movs	r3, #1
 804653e:	e000      	b.n	8046542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8046540:	2300      	movs	r3, #0
}
 8046542:	4618      	mov	r0, r3
 8046544:	370c      	adds	r7, #12
 8046546:	46bd      	mov	sp, r7
 8046548:	f85d 7b04 	ldr.w	r7, [sp], #4
 804654c:	4770      	bx	lr
	...

08046550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8046550:	b580      	push	{r7, lr}
 8046552:	b086      	sub	sp, #24
 8046554:	af00      	add	r7, sp, #0
 8046556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046558:	687b      	ldr	r3, [r7, #4]
 804655a:	2b00      	cmp	r3, #0
 804655c:	d101      	bne.n	8046562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804655e:	2301      	movs	r3, #1
 8046560:	e267      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8046562:	687b      	ldr	r3, [r7, #4]
 8046564:	681b      	ldr	r3, [r3, #0]
 8046566:	f003 0301 	and.w	r3, r3, #1
 804656a:	2b00      	cmp	r3, #0
 804656c:	d075      	beq.n	804665a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804656e:	4b88      	ldr	r3, [pc, #544]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046570:	689b      	ldr	r3, [r3, #8]
 8046572:	f003 030c 	and.w	r3, r3, #12
 8046576:	2b04      	cmp	r3, #4
 8046578:	d00c      	beq.n	8046594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804657a:	4b85      	ldr	r3, [pc, #532]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 804657c:	689b      	ldr	r3, [r3, #8]
 804657e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046582:	2b08      	cmp	r3, #8
 8046584:	d112      	bne.n	80465ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046586:	4b82      	ldr	r3, [pc, #520]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046588:	685b      	ldr	r3, [r3, #4]
 804658a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804658e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8046592:	d10b      	bne.n	80465ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046594:	4b7e      	ldr	r3, [pc, #504]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046596:	681b      	ldr	r3, [r3, #0]
 8046598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804659c:	2b00      	cmp	r3, #0
 804659e:	d05b      	beq.n	8046658 <HAL_RCC_OscConfig+0x108>
 80465a0:	687b      	ldr	r3, [r7, #4]
 80465a2:	685b      	ldr	r3, [r3, #4]
 80465a4:	2b00      	cmp	r3, #0
 80465a6:	d157      	bne.n	8046658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80465a8:	2301      	movs	r3, #1
 80465aa:	e242      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80465ac:	687b      	ldr	r3, [r7, #4]
 80465ae:	685b      	ldr	r3, [r3, #4]
 80465b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80465b4:	d106      	bne.n	80465c4 <HAL_RCC_OscConfig+0x74>
 80465b6:	4b76      	ldr	r3, [pc, #472]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465b8:	681b      	ldr	r3, [r3, #0]
 80465ba:	4a75      	ldr	r2, [pc, #468]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80465c0:	6013      	str	r3, [r2, #0]
 80465c2:	e01d      	b.n	8046600 <HAL_RCC_OscConfig+0xb0>
 80465c4:	687b      	ldr	r3, [r7, #4]
 80465c6:	685b      	ldr	r3, [r3, #4]
 80465c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80465cc:	d10c      	bne.n	80465e8 <HAL_RCC_OscConfig+0x98>
 80465ce:	4b70      	ldr	r3, [pc, #448]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465d0:	681b      	ldr	r3, [r3, #0]
 80465d2:	4a6f      	ldr	r2, [pc, #444]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80465d8:	6013      	str	r3, [r2, #0]
 80465da:	4b6d      	ldr	r3, [pc, #436]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465dc:	681b      	ldr	r3, [r3, #0]
 80465de:	4a6c      	ldr	r2, [pc, #432]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80465e4:	6013      	str	r3, [r2, #0]
 80465e6:	e00b      	b.n	8046600 <HAL_RCC_OscConfig+0xb0>
 80465e8:	4b69      	ldr	r3, [pc, #420]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465ea:	681b      	ldr	r3, [r3, #0]
 80465ec:	4a68      	ldr	r2, [pc, #416]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80465f2:	6013      	str	r3, [r2, #0]
 80465f4:	4b66      	ldr	r3, [pc, #408]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465f6:	681b      	ldr	r3, [r3, #0]
 80465f8:	4a65      	ldr	r2, [pc, #404]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80465fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80465fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8046600:	687b      	ldr	r3, [r7, #4]
 8046602:	685b      	ldr	r3, [r3, #4]
 8046604:	2b00      	cmp	r3, #0
 8046606:	d013      	beq.n	8046630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046608:	f7fe fbea 	bl	8044de0 <HAL_GetTick>
 804660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804660e:	e008      	b.n	8046622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046610:	f7fe fbe6 	bl	8044de0 <HAL_GetTick>
 8046614:	4602      	mov	r2, r0
 8046616:	693b      	ldr	r3, [r7, #16]
 8046618:	1ad3      	subs	r3, r2, r3
 804661a:	2b64      	cmp	r3, #100	; 0x64
 804661c:	d901      	bls.n	8046622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804661e:	2303      	movs	r3, #3
 8046620:	e207      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046622:	4b5b      	ldr	r3, [pc, #364]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046624:	681b      	ldr	r3, [r3, #0]
 8046626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804662a:	2b00      	cmp	r3, #0
 804662c:	d0f0      	beq.n	8046610 <HAL_RCC_OscConfig+0xc0>
 804662e:	e014      	b.n	804665a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046630:	f7fe fbd6 	bl	8044de0 <HAL_GetTick>
 8046634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046636:	e008      	b.n	804664a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046638:	f7fe fbd2 	bl	8044de0 <HAL_GetTick>
 804663c:	4602      	mov	r2, r0
 804663e:	693b      	ldr	r3, [r7, #16]
 8046640:	1ad3      	subs	r3, r2, r3
 8046642:	2b64      	cmp	r3, #100	; 0x64
 8046644:	d901      	bls.n	804664a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8046646:	2303      	movs	r3, #3
 8046648:	e1f3      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804664a:	4b51      	ldr	r3, [pc, #324]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 804664c:	681b      	ldr	r3, [r3, #0]
 804664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046652:	2b00      	cmp	r3, #0
 8046654:	d1f0      	bne.n	8046638 <HAL_RCC_OscConfig+0xe8>
 8046656:	e000      	b.n	804665a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804665a:	687b      	ldr	r3, [r7, #4]
 804665c:	681b      	ldr	r3, [r3, #0]
 804665e:	f003 0302 	and.w	r3, r3, #2
 8046662:	2b00      	cmp	r3, #0
 8046664:	d063      	beq.n	804672e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046666:	4b4a      	ldr	r3, [pc, #296]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046668:	689b      	ldr	r3, [r3, #8]
 804666a:	f003 030c 	and.w	r3, r3, #12
 804666e:	2b00      	cmp	r3, #0
 8046670:	d00b      	beq.n	804668a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046672:	4b47      	ldr	r3, [pc, #284]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046674:	689b      	ldr	r3, [r3, #8]
 8046676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804667a:	2b08      	cmp	r3, #8
 804667c:	d11c      	bne.n	80466b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804667e:	4b44      	ldr	r3, [pc, #272]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046680:	685b      	ldr	r3, [r3, #4]
 8046682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046686:	2b00      	cmp	r3, #0
 8046688:	d116      	bne.n	80466b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804668a:	4b41      	ldr	r3, [pc, #260]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 804668c:	681b      	ldr	r3, [r3, #0]
 804668e:	f003 0302 	and.w	r3, r3, #2
 8046692:	2b00      	cmp	r3, #0
 8046694:	d005      	beq.n	80466a2 <HAL_RCC_OscConfig+0x152>
 8046696:	687b      	ldr	r3, [r7, #4]
 8046698:	68db      	ldr	r3, [r3, #12]
 804669a:	2b01      	cmp	r3, #1
 804669c:	d001      	beq.n	80466a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 804669e:	2301      	movs	r3, #1
 80466a0:	e1c7      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80466a2:	4b3b      	ldr	r3, [pc, #236]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80466a4:	681b      	ldr	r3, [r3, #0]
 80466a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80466aa:	687b      	ldr	r3, [r7, #4]
 80466ac:	691b      	ldr	r3, [r3, #16]
 80466ae:	00db      	lsls	r3, r3, #3
 80466b0:	4937      	ldr	r1, [pc, #220]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80466b2:	4313      	orrs	r3, r2
 80466b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80466b6:	e03a      	b.n	804672e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80466b8:	687b      	ldr	r3, [r7, #4]
 80466ba:	68db      	ldr	r3, [r3, #12]
 80466bc:	2b00      	cmp	r3, #0
 80466be:	d020      	beq.n	8046702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80466c0:	4b34      	ldr	r3, [pc, #208]	; (8046794 <HAL_RCC_OscConfig+0x244>)
 80466c2:	2201      	movs	r2, #1
 80466c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80466c6:	f7fe fb8b 	bl	8044de0 <HAL_GetTick>
 80466ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80466cc:	e008      	b.n	80466e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80466ce:	f7fe fb87 	bl	8044de0 <HAL_GetTick>
 80466d2:	4602      	mov	r2, r0
 80466d4:	693b      	ldr	r3, [r7, #16]
 80466d6:	1ad3      	subs	r3, r2, r3
 80466d8:	2b02      	cmp	r3, #2
 80466da:	d901      	bls.n	80466e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80466dc:	2303      	movs	r3, #3
 80466de:	e1a8      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80466e0:	4b2b      	ldr	r3, [pc, #172]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80466e2:	681b      	ldr	r3, [r3, #0]
 80466e4:	f003 0302 	and.w	r3, r3, #2
 80466e8:	2b00      	cmp	r3, #0
 80466ea:	d0f0      	beq.n	80466ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80466ec:	4b28      	ldr	r3, [pc, #160]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80466ee:	681b      	ldr	r3, [r3, #0]
 80466f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80466f4:	687b      	ldr	r3, [r7, #4]
 80466f6:	691b      	ldr	r3, [r3, #16]
 80466f8:	00db      	lsls	r3, r3, #3
 80466fa:	4925      	ldr	r1, [pc, #148]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 80466fc:	4313      	orrs	r3, r2
 80466fe:	600b      	str	r3, [r1, #0]
 8046700:	e015      	b.n	804672e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8046702:	4b24      	ldr	r3, [pc, #144]	; (8046794 <HAL_RCC_OscConfig+0x244>)
 8046704:	2200      	movs	r2, #0
 8046706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046708:	f7fe fb6a 	bl	8044de0 <HAL_GetTick>
 804670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804670e:	e008      	b.n	8046722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046710:	f7fe fb66 	bl	8044de0 <HAL_GetTick>
 8046714:	4602      	mov	r2, r0
 8046716:	693b      	ldr	r3, [r7, #16]
 8046718:	1ad3      	subs	r3, r2, r3
 804671a:	2b02      	cmp	r3, #2
 804671c:	d901      	bls.n	8046722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804671e:	2303      	movs	r3, #3
 8046720:	e187      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046722:	4b1b      	ldr	r3, [pc, #108]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046724:	681b      	ldr	r3, [r3, #0]
 8046726:	f003 0302 	and.w	r3, r3, #2
 804672a:	2b00      	cmp	r3, #0
 804672c:	d1f0      	bne.n	8046710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804672e:	687b      	ldr	r3, [r7, #4]
 8046730:	681b      	ldr	r3, [r3, #0]
 8046732:	f003 0308 	and.w	r3, r3, #8
 8046736:	2b00      	cmp	r3, #0
 8046738:	d036      	beq.n	80467a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 804673a:	687b      	ldr	r3, [r7, #4]
 804673c:	695b      	ldr	r3, [r3, #20]
 804673e:	2b00      	cmp	r3, #0
 8046740:	d016      	beq.n	8046770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8046742:	4b15      	ldr	r3, [pc, #84]	; (8046798 <HAL_RCC_OscConfig+0x248>)
 8046744:	2201      	movs	r2, #1
 8046746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046748:	f7fe fb4a 	bl	8044de0 <HAL_GetTick>
 804674c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804674e:	e008      	b.n	8046762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046750:	f7fe fb46 	bl	8044de0 <HAL_GetTick>
 8046754:	4602      	mov	r2, r0
 8046756:	693b      	ldr	r3, [r7, #16]
 8046758:	1ad3      	subs	r3, r2, r3
 804675a:	2b02      	cmp	r3, #2
 804675c:	d901      	bls.n	8046762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804675e:	2303      	movs	r3, #3
 8046760:	e167      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046762:	4b0b      	ldr	r3, [pc, #44]	; (8046790 <HAL_RCC_OscConfig+0x240>)
 8046764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046766:	f003 0302 	and.w	r3, r3, #2
 804676a:	2b00      	cmp	r3, #0
 804676c:	d0f0      	beq.n	8046750 <HAL_RCC_OscConfig+0x200>
 804676e:	e01b      	b.n	80467a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046770:	4b09      	ldr	r3, [pc, #36]	; (8046798 <HAL_RCC_OscConfig+0x248>)
 8046772:	2200      	movs	r2, #0
 8046774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046776:	f7fe fb33 	bl	8044de0 <HAL_GetTick>
 804677a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 804677c:	e00e      	b.n	804679c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804677e:	f7fe fb2f 	bl	8044de0 <HAL_GetTick>
 8046782:	4602      	mov	r2, r0
 8046784:	693b      	ldr	r3, [r7, #16]
 8046786:	1ad3      	subs	r3, r2, r3
 8046788:	2b02      	cmp	r3, #2
 804678a:	d907      	bls.n	804679c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 804678c:	2303      	movs	r3, #3
 804678e:	e150      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
 8046790:	40023800 	.word	0x40023800
 8046794:	42470000 	.word	0x42470000
 8046798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 804679c:	4b88      	ldr	r3, [pc, #544]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804679e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80467a0:	f003 0302 	and.w	r3, r3, #2
 80467a4:	2b00      	cmp	r3, #0
 80467a6:	d1ea      	bne.n	804677e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80467a8:	687b      	ldr	r3, [r7, #4]
 80467aa:	681b      	ldr	r3, [r3, #0]
 80467ac:	f003 0304 	and.w	r3, r3, #4
 80467b0:	2b00      	cmp	r3, #0
 80467b2:	f000 8097 	beq.w	80468e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80467b6:	2300      	movs	r3, #0
 80467b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80467ba:	4b81      	ldr	r3, [pc, #516]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80467bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80467be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80467c2:	2b00      	cmp	r3, #0
 80467c4:	d10f      	bne.n	80467e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80467c6:	2300      	movs	r3, #0
 80467c8:	60bb      	str	r3, [r7, #8]
 80467ca:	4b7d      	ldr	r3, [pc, #500]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80467cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80467ce:	4a7c      	ldr	r2, [pc, #496]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80467d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80467d4:	6413      	str	r3, [r2, #64]	; 0x40
 80467d6:	4b7a      	ldr	r3, [pc, #488]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80467d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80467da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80467de:	60bb      	str	r3, [r7, #8]
 80467e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80467e2:	2301      	movs	r3, #1
 80467e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80467e6:	4b77      	ldr	r3, [pc, #476]	; (80469c4 <HAL_RCC_OscConfig+0x474>)
 80467e8:	681b      	ldr	r3, [r3, #0]
 80467ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80467ee:	2b00      	cmp	r3, #0
 80467f0:	d118      	bne.n	8046824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80467f2:	4b74      	ldr	r3, [pc, #464]	; (80469c4 <HAL_RCC_OscConfig+0x474>)
 80467f4:	681b      	ldr	r3, [r3, #0]
 80467f6:	4a73      	ldr	r2, [pc, #460]	; (80469c4 <HAL_RCC_OscConfig+0x474>)
 80467f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80467fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80467fe:	f7fe faef 	bl	8044de0 <HAL_GetTick>
 8046802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046804:	e008      	b.n	8046818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8046806:	f7fe faeb 	bl	8044de0 <HAL_GetTick>
 804680a:	4602      	mov	r2, r0
 804680c:	693b      	ldr	r3, [r7, #16]
 804680e:	1ad3      	subs	r3, r2, r3
 8046810:	2b02      	cmp	r3, #2
 8046812:	d901      	bls.n	8046818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8046814:	2303      	movs	r3, #3
 8046816:	e10c      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046818:	4b6a      	ldr	r3, [pc, #424]	; (80469c4 <HAL_RCC_OscConfig+0x474>)
 804681a:	681b      	ldr	r3, [r3, #0]
 804681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046820:	2b00      	cmp	r3, #0
 8046822:	d0f0      	beq.n	8046806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8046824:	687b      	ldr	r3, [r7, #4]
 8046826:	689b      	ldr	r3, [r3, #8]
 8046828:	2b01      	cmp	r3, #1
 804682a:	d106      	bne.n	804683a <HAL_RCC_OscConfig+0x2ea>
 804682c:	4b64      	ldr	r3, [pc, #400]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046830:	4a63      	ldr	r2, [pc, #396]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046832:	f043 0301 	orr.w	r3, r3, #1
 8046836:	6713      	str	r3, [r2, #112]	; 0x70
 8046838:	e01c      	b.n	8046874 <HAL_RCC_OscConfig+0x324>
 804683a:	687b      	ldr	r3, [r7, #4]
 804683c:	689b      	ldr	r3, [r3, #8]
 804683e:	2b05      	cmp	r3, #5
 8046840:	d10c      	bne.n	804685c <HAL_RCC_OscConfig+0x30c>
 8046842:	4b5f      	ldr	r3, [pc, #380]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046846:	4a5e      	ldr	r2, [pc, #376]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046848:	f043 0304 	orr.w	r3, r3, #4
 804684c:	6713      	str	r3, [r2, #112]	; 0x70
 804684e:	4b5c      	ldr	r3, [pc, #368]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046852:	4a5b      	ldr	r2, [pc, #364]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046854:	f043 0301 	orr.w	r3, r3, #1
 8046858:	6713      	str	r3, [r2, #112]	; 0x70
 804685a:	e00b      	b.n	8046874 <HAL_RCC_OscConfig+0x324>
 804685c:	4b58      	ldr	r3, [pc, #352]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046860:	4a57      	ldr	r2, [pc, #348]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046862:	f023 0301 	bic.w	r3, r3, #1
 8046866:	6713      	str	r3, [r2, #112]	; 0x70
 8046868:	4b55      	ldr	r3, [pc, #340]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804686c:	4a54      	ldr	r2, [pc, #336]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804686e:	f023 0304 	bic.w	r3, r3, #4
 8046872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8046874:	687b      	ldr	r3, [r7, #4]
 8046876:	689b      	ldr	r3, [r3, #8]
 8046878:	2b00      	cmp	r3, #0
 804687a:	d015      	beq.n	80468a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804687c:	f7fe fab0 	bl	8044de0 <HAL_GetTick>
 8046880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046882:	e00a      	b.n	804689a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046884:	f7fe faac 	bl	8044de0 <HAL_GetTick>
 8046888:	4602      	mov	r2, r0
 804688a:	693b      	ldr	r3, [r7, #16]
 804688c:	1ad3      	subs	r3, r2, r3
 804688e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046892:	4293      	cmp	r3, r2
 8046894:	d901      	bls.n	804689a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8046896:	2303      	movs	r3, #3
 8046898:	e0cb      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804689a:	4b49      	ldr	r3, [pc, #292]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804689e:	f003 0302 	and.w	r3, r3, #2
 80468a2:	2b00      	cmp	r3, #0
 80468a4:	d0ee      	beq.n	8046884 <HAL_RCC_OscConfig+0x334>
 80468a6:	e014      	b.n	80468d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80468a8:	f7fe fa9a 	bl	8044de0 <HAL_GetTick>
 80468ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80468ae:	e00a      	b.n	80468c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80468b0:	f7fe fa96 	bl	8044de0 <HAL_GetTick>
 80468b4:	4602      	mov	r2, r0
 80468b6:	693b      	ldr	r3, [r7, #16]
 80468b8:	1ad3      	subs	r3, r2, r3
 80468ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80468be:	4293      	cmp	r3, r2
 80468c0:	d901      	bls.n	80468c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80468c2:	2303      	movs	r3, #3
 80468c4:	e0b5      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80468c6:	4b3e      	ldr	r3, [pc, #248]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80468c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80468ca:	f003 0302 	and.w	r3, r3, #2
 80468ce:	2b00      	cmp	r3, #0
 80468d0:	d1ee      	bne.n	80468b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80468d2:	7dfb      	ldrb	r3, [r7, #23]
 80468d4:	2b01      	cmp	r3, #1
 80468d6:	d105      	bne.n	80468e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80468d8:	4b39      	ldr	r3, [pc, #228]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80468da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80468dc:	4a38      	ldr	r2, [pc, #224]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80468de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80468e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80468e4:	687b      	ldr	r3, [r7, #4]
 80468e6:	699b      	ldr	r3, [r3, #24]
 80468e8:	2b00      	cmp	r3, #0
 80468ea:	f000 80a1 	beq.w	8046a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80468ee:	4b34      	ldr	r3, [pc, #208]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80468f0:	689b      	ldr	r3, [r3, #8]
 80468f2:	f003 030c 	and.w	r3, r3, #12
 80468f6:	2b08      	cmp	r3, #8
 80468f8:	d05c      	beq.n	80469b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80468fa:	687b      	ldr	r3, [r7, #4]
 80468fc:	699b      	ldr	r3, [r3, #24]
 80468fe:	2b02      	cmp	r3, #2
 8046900:	d141      	bne.n	8046986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046902:	4b31      	ldr	r3, [pc, #196]	; (80469c8 <HAL_RCC_OscConfig+0x478>)
 8046904:	2200      	movs	r2, #0
 8046906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046908:	f7fe fa6a 	bl	8044de0 <HAL_GetTick>
 804690c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804690e:	e008      	b.n	8046922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046910:	f7fe fa66 	bl	8044de0 <HAL_GetTick>
 8046914:	4602      	mov	r2, r0
 8046916:	693b      	ldr	r3, [r7, #16]
 8046918:	1ad3      	subs	r3, r2, r3
 804691a:	2b02      	cmp	r3, #2
 804691c:	d901      	bls.n	8046922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 804691e:	2303      	movs	r3, #3
 8046920:	e087      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046922:	4b27      	ldr	r3, [pc, #156]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046924:	681b      	ldr	r3, [r3, #0]
 8046926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804692a:	2b00      	cmp	r3, #0
 804692c:	d1f0      	bne.n	8046910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804692e:	687b      	ldr	r3, [r7, #4]
 8046930:	69da      	ldr	r2, [r3, #28]
 8046932:	687b      	ldr	r3, [r7, #4]
 8046934:	6a1b      	ldr	r3, [r3, #32]
 8046936:	431a      	orrs	r2, r3
 8046938:	687b      	ldr	r3, [r7, #4]
 804693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804693c:	019b      	lsls	r3, r3, #6
 804693e:	431a      	orrs	r2, r3
 8046940:	687b      	ldr	r3, [r7, #4]
 8046942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046944:	085b      	lsrs	r3, r3, #1
 8046946:	3b01      	subs	r3, #1
 8046948:	041b      	lsls	r3, r3, #16
 804694a:	431a      	orrs	r2, r3
 804694c:	687b      	ldr	r3, [r7, #4]
 804694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046950:	061b      	lsls	r3, r3, #24
 8046952:	491b      	ldr	r1, [pc, #108]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 8046954:	4313      	orrs	r3, r2
 8046956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8046958:	4b1b      	ldr	r3, [pc, #108]	; (80469c8 <HAL_RCC_OscConfig+0x478>)
 804695a:	2201      	movs	r2, #1
 804695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804695e:	f7fe fa3f 	bl	8044de0 <HAL_GetTick>
 8046962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046964:	e008      	b.n	8046978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046966:	f7fe fa3b 	bl	8044de0 <HAL_GetTick>
 804696a:	4602      	mov	r2, r0
 804696c:	693b      	ldr	r3, [r7, #16]
 804696e:	1ad3      	subs	r3, r2, r3
 8046970:	2b02      	cmp	r3, #2
 8046972:	d901      	bls.n	8046978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8046974:	2303      	movs	r3, #3
 8046976:	e05c      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046978:	4b11      	ldr	r3, [pc, #68]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 804697a:	681b      	ldr	r3, [r3, #0]
 804697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046980:	2b00      	cmp	r3, #0
 8046982:	d0f0      	beq.n	8046966 <HAL_RCC_OscConfig+0x416>
 8046984:	e054      	b.n	8046a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046986:	4b10      	ldr	r3, [pc, #64]	; (80469c8 <HAL_RCC_OscConfig+0x478>)
 8046988:	2200      	movs	r2, #0
 804698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804698c:	f7fe fa28 	bl	8044de0 <HAL_GetTick>
 8046990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046992:	e008      	b.n	80469a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046994:	f7fe fa24 	bl	8044de0 <HAL_GetTick>
 8046998:	4602      	mov	r2, r0
 804699a:	693b      	ldr	r3, [r7, #16]
 804699c:	1ad3      	subs	r3, r2, r3
 804699e:	2b02      	cmp	r3, #2
 80469a0:	d901      	bls.n	80469a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80469a2:	2303      	movs	r3, #3
 80469a4:	e045      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80469a6:	4b06      	ldr	r3, [pc, #24]	; (80469c0 <HAL_RCC_OscConfig+0x470>)
 80469a8:	681b      	ldr	r3, [r3, #0]
 80469aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80469ae:	2b00      	cmp	r3, #0
 80469b0:	d1f0      	bne.n	8046994 <HAL_RCC_OscConfig+0x444>
 80469b2:	e03d      	b.n	8046a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80469b4:	687b      	ldr	r3, [r7, #4]
 80469b6:	699b      	ldr	r3, [r3, #24]
 80469b8:	2b01      	cmp	r3, #1
 80469ba:	d107      	bne.n	80469cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80469bc:	2301      	movs	r3, #1
 80469be:	e038      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
 80469c0:	40023800 	.word	0x40023800
 80469c4:	40007000 	.word	0x40007000
 80469c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80469cc:	4b1b      	ldr	r3, [pc, #108]	; (8046a3c <HAL_RCC_OscConfig+0x4ec>)
 80469ce:	685b      	ldr	r3, [r3, #4]
 80469d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80469d2:	687b      	ldr	r3, [r7, #4]
 80469d4:	699b      	ldr	r3, [r3, #24]
 80469d6:	2b01      	cmp	r3, #1
 80469d8:	d028      	beq.n	8046a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80469da:	68fb      	ldr	r3, [r7, #12]
 80469dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80469e0:	687b      	ldr	r3, [r7, #4]
 80469e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80469e4:	429a      	cmp	r2, r3
 80469e6:	d121      	bne.n	8046a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80469e8:	68fb      	ldr	r3, [r7, #12]
 80469ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80469ee:	687b      	ldr	r3, [r7, #4]
 80469f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80469f2:	429a      	cmp	r2, r3
 80469f4:	d11a      	bne.n	8046a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80469f6:	68fa      	ldr	r2, [r7, #12]
 80469f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80469fc:	4013      	ands	r3, r2
 80469fe:	687a      	ldr	r2, [r7, #4]
 8046a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8046a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046a04:	4293      	cmp	r3, r2
 8046a06:	d111      	bne.n	8046a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046a08:	68fb      	ldr	r3, [r7, #12]
 8046a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8046a0e:	687b      	ldr	r3, [r7, #4]
 8046a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046a12:	085b      	lsrs	r3, r3, #1
 8046a14:	3b01      	subs	r3, #1
 8046a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046a18:	429a      	cmp	r2, r3
 8046a1a:	d107      	bne.n	8046a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8046a1c:	68fb      	ldr	r3, [r7, #12]
 8046a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8046a22:	687b      	ldr	r3, [r7, #4]
 8046a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046a28:	429a      	cmp	r2, r3
 8046a2a:	d001      	beq.n	8046a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8046a2c:	2301      	movs	r3, #1
 8046a2e:	e000      	b.n	8046a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8046a30:	2300      	movs	r3, #0
}
 8046a32:	4618      	mov	r0, r3
 8046a34:	3718      	adds	r7, #24
 8046a36:	46bd      	mov	sp, r7
 8046a38:	bd80      	pop	{r7, pc}
 8046a3a:	bf00      	nop
 8046a3c:	40023800 	.word	0x40023800

08046a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8046a40:	b580      	push	{r7, lr}
 8046a42:	b084      	sub	sp, #16
 8046a44:	af00      	add	r7, sp, #0
 8046a46:	6078      	str	r0, [r7, #4]
 8046a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	2b00      	cmp	r3, #0
 8046a4e:	d101      	bne.n	8046a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8046a50:	2301      	movs	r3, #1
 8046a52:	e0cc      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8046a54:	4b68      	ldr	r3, [pc, #416]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046a56:	681b      	ldr	r3, [r3, #0]
 8046a58:	f003 0307 	and.w	r3, r3, #7
 8046a5c:	683a      	ldr	r2, [r7, #0]
 8046a5e:	429a      	cmp	r2, r3
 8046a60:	d90c      	bls.n	8046a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046a62:	4b65      	ldr	r3, [pc, #404]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046a64:	683a      	ldr	r2, [r7, #0]
 8046a66:	b2d2      	uxtb	r2, r2
 8046a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046a6a:	4b63      	ldr	r3, [pc, #396]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046a6c:	681b      	ldr	r3, [r3, #0]
 8046a6e:	f003 0307 	and.w	r3, r3, #7
 8046a72:	683a      	ldr	r2, [r7, #0]
 8046a74:	429a      	cmp	r2, r3
 8046a76:	d001      	beq.n	8046a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8046a78:	2301      	movs	r3, #1
 8046a7a:	e0b8      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046a7c:	687b      	ldr	r3, [r7, #4]
 8046a7e:	681b      	ldr	r3, [r3, #0]
 8046a80:	f003 0302 	and.w	r3, r3, #2
 8046a84:	2b00      	cmp	r3, #0
 8046a86:	d020      	beq.n	8046aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046a88:	687b      	ldr	r3, [r7, #4]
 8046a8a:	681b      	ldr	r3, [r3, #0]
 8046a8c:	f003 0304 	and.w	r3, r3, #4
 8046a90:	2b00      	cmp	r3, #0
 8046a92:	d005      	beq.n	8046aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046a94:	4b59      	ldr	r3, [pc, #356]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046a96:	689b      	ldr	r3, [r3, #8]
 8046a98:	4a58      	ldr	r2, [pc, #352]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046aa0:	687b      	ldr	r3, [r7, #4]
 8046aa2:	681b      	ldr	r3, [r3, #0]
 8046aa4:	f003 0308 	and.w	r3, r3, #8
 8046aa8:	2b00      	cmp	r3, #0
 8046aaa:	d005      	beq.n	8046ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046aac:	4b53      	ldr	r3, [pc, #332]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046aae:	689b      	ldr	r3, [r3, #8]
 8046ab0:	4a52      	ldr	r2, [pc, #328]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8046ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046ab8:	4b50      	ldr	r3, [pc, #320]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046aba:	689b      	ldr	r3, [r3, #8]
 8046abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046ac0:	687b      	ldr	r3, [r7, #4]
 8046ac2:	689b      	ldr	r3, [r3, #8]
 8046ac4:	494d      	ldr	r1, [pc, #308]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046ac6:	4313      	orrs	r3, r2
 8046ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8046aca:	687b      	ldr	r3, [r7, #4]
 8046acc:	681b      	ldr	r3, [r3, #0]
 8046ace:	f003 0301 	and.w	r3, r3, #1
 8046ad2:	2b00      	cmp	r3, #0
 8046ad4:	d044      	beq.n	8046b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8046ad6:	687b      	ldr	r3, [r7, #4]
 8046ad8:	685b      	ldr	r3, [r3, #4]
 8046ada:	2b01      	cmp	r3, #1
 8046adc:	d107      	bne.n	8046aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046ade:	4b47      	ldr	r3, [pc, #284]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046ae0:	681b      	ldr	r3, [r3, #0]
 8046ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046ae6:	2b00      	cmp	r3, #0
 8046ae8:	d119      	bne.n	8046b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046aea:	2301      	movs	r3, #1
 8046aec:	e07f      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046aee:	687b      	ldr	r3, [r7, #4]
 8046af0:	685b      	ldr	r3, [r3, #4]
 8046af2:	2b02      	cmp	r3, #2
 8046af4:	d003      	beq.n	8046afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8046af6:	687b      	ldr	r3, [r7, #4]
 8046af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046afa:	2b03      	cmp	r3, #3
 8046afc:	d107      	bne.n	8046b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046afe:	4b3f      	ldr	r3, [pc, #252]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b00:	681b      	ldr	r3, [r3, #0]
 8046b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046b06:	2b00      	cmp	r3, #0
 8046b08:	d109      	bne.n	8046b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046b0a:	2301      	movs	r3, #1
 8046b0c:	e06f      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046b0e:	4b3b      	ldr	r3, [pc, #236]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b10:	681b      	ldr	r3, [r3, #0]
 8046b12:	f003 0302 	and.w	r3, r3, #2
 8046b16:	2b00      	cmp	r3, #0
 8046b18:	d101      	bne.n	8046b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046b1a:	2301      	movs	r3, #1
 8046b1c:	e067      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8046b1e:	4b37      	ldr	r3, [pc, #220]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b20:	689b      	ldr	r3, [r3, #8]
 8046b22:	f023 0203 	bic.w	r2, r3, #3
 8046b26:	687b      	ldr	r3, [r7, #4]
 8046b28:	685b      	ldr	r3, [r3, #4]
 8046b2a:	4934      	ldr	r1, [pc, #208]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b2c:	4313      	orrs	r3, r2
 8046b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8046b30:	f7fe f956 	bl	8044de0 <HAL_GetTick>
 8046b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046b36:	e00a      	b.n	8046b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8046b38:	f7fe f952 	bl	8044de0 <HAL_GetTick>
 8046b3c:	4602      	mov	r2, r0
 8046b3e:	68fb      	ldr	r3, [r7, #12]
 8046b40:	1ad3      	subs	r3, r2, r3
 8046b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8046b46:	4293      	cmp	r3, r2
 8046b48:	d901      	bls.n	8046b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8046b4a:	2303      	movs	r3, #3
 8046b4c:	e04f      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046b4e:	4b2b      	ldr	r3, [pc, #172]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b50:	689b      	ldr	r3, [r3, #8]
 8046b52:	f003 020c 	and.w	r2, r3, #12
 8046b56:	687b      	ldr	r3, [r7, #4]
 8046b58:	685b      	ldr	r3, [r3, #4]
 8046b5a:	009b      	lsls	r3, r3, #2
 8046b5c:	429a      	cmp	r2, r3
 8046b5e:	d1eb      	bne.n	8046b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046b60:	4b25      	ldr	r3, [pc, #148]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046b62:	681b      	ldr	r3, [r3, #0]
 8046b64:	f003 0307 	and.w	r3, r3, #7
 8046b68:	683a      	ldr	r2, [r7, #0]
 8046b6a:	429a      	cmp	r2, r3
 8046b6c:	d20c      	bcs.n	8046b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046b6e:	4b22      	ldr	r3, [pc, #136]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046b70:	683a      	ldr	r2, [r7, #0]
 8046b72:	b2d2      	uxtb	r2, r2
 8046b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046b76:	4b20      	ldr	r3, [pc, #128]	; (8046bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8046b78:	681b      	ldr	r3, [r3, #0]
 8046b7a:	f003 0307 	and.w	r3, r3, #7
 8046b7e:	683a      	ldr	r2, [r7, #0]
 8046b80:	429a      	cmp	r2, r3
 8046b82:	d001      	beq.n	8046b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8046b84:	2301      	movs	r3, #1
 8046b86:	e032      	b.n	8046bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046b88:	687b      	ldr	r3, [r7, #4]
 8046b8a:	681b      	ldr	r3, [r3, #0]
 8046b8c:	f003 0304 	and.w	r3, r3, #4
 8046b90:	2b00      	cmp	r3, #0
 8046b92:	d008      	beq.n	8046ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8046b94:	4b19      	ldr	r3, [pc, #100]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046b96:	689b      	ldr	r3, [r3, #8]
 8046b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046b9c:	687b      	ldr	r3, [r7, #4]
 8046b9e:	68db      	ldr	r3, [r3, #12]
 8046ba0:	4916      	ldr	r1, [pc, #88]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046ba2:	4313      	orrs	r3, r2
 8046ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046ba6:	687b      	ldr	r3, [r7, #4]
 8046ba8:	681b      	ldr	r3, [r3, #0]
 8046baa:	f003 0308 	and.w	r3, r3, #8
 8046bae:	2b00      	cmp	r3, #0
 8046bb0:	d009      	beq.n	8046bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8046bb2:	4b12      	ldr	r3, [pc, #72]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046bb4:	689b      	ldr	r3, [r3, #8]
 8046bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8046bba:	687b      	ldr	r3, [r7, #4]
 8046bbc:	691b      	ldr	r3, [r3, #16]
 8046bbe:	00db      	lsls	r3, r3, #3
 8046bc0:	490e      	ldr	r1, [pc, #56]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046bc2:	4313      	orrs	r3, r2
 8046bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8046bc6:	f000 f821 	bl	8046c0c <HAL_RCC_GetSysClockFreq>
 8046bca:	4602      	mov	r2, r0
 8046bcc:	4b0b      	ldr	r3, [pc, #44]	; (8046bfc <HAL_RCC_ClockConfig+0x1bc>)
 8046bce:	689b      	ldr	r3, [r3, #8]
 8046bd0:	091b      	lsrs	r3, r3, #4
 8046bd2:	f003 030f 	and.w	r3, r3, #15
 8046bd6:	490a      	ldr	r1, [pc, #40]	; (8046c00 <HAL_RCC_ClockConfig+0x1c0>)
 8046bd8:	5ccb      	ldrb	r3, [r1, r3]
 8046bda:	fa22 f303 	lsr.w	r3, r2, r3
 8046bde:	4a09      	ldr	r2, [pc, #36]	; (8046c04 <HAL_RCC_ClockConfig+0x1c4>)
 8046be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8046be2:	4b09      	ldr	r3, [pc, #36]	; (8046c08 <HAL_RCC_ClockConfig+0x1c8>)
 8046be4:	681b      	ldr	r3, [r3, #0]
 8046be6:	4618      	mov	r0, r3
 8046be8:	f7fe f8b6 	bl	8044d58 <HAL_InitTick>

  return HAL_OK;
 8046bec:	2300      	movs	r3, #0
}
 8046bee:	4618      	mov	r0, r3
 8046bf0:	3710      	adds	r7, #16
 8046bf2:	46bd      	mov	sp, r7
 8046bf4:	bd80      	pop	{r7, pc}
 8046bf6:	bf00      	nop
 8046bf8:	40023c00 	.word	0x40023c00
 8046bfc:	40023800 	.word	0x40023800
 8046c00:	0804e500 	.word	0x0804e500
 8046c04:	20000008 	.word	0x20000008
 8046c08:	2000000c 	.word	0x2000000c

08046c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8046c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8046c10:	b094      	sub	sp, #80	; 0x50
 8046c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8046c14:	2300      	movs	r3, #0
 8046c16:	647b      	str	r3, [r7, #68]	; 0x44
 8046c18:	2300      	movs	r3, #0
 8046c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046c1c:	2300      	movs	r3, #0
 8046c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8046c20:	2300      	movs	r3, #0
 8046c22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8046c24:	4b79      	ldr	r3, [pc, #484]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046c26:	689b      	ldr	r3, [r3, #8]
 8046c28:	f003 030c 	and.w	r3, r3, #12
 8046c2c:	2b08      	cmp	r3, #8
 8046c2e:	d00d      	beq.n	8046c4c <HAL_RCC_GetSysClockFreq+0x40>
 8046c30:	2b08      	cmp	r3, #8
 8046c32:	f200 80e1 	bhi.w	8046df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8046c36:	2b00      	cmp	r3, #0
 8046c38:	d002      	beq.n	8046c40 <HAL_RCC_GetSysClockFreq+0x34>
 8046c3a:	2b04      	cmp	r3, #4
 8046c3c:	d003      	beq.n	8046c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8046c3e:	e0db      	b.n	8046df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8046c40:	4b73      	ldr	r3, [pc, #460]	; (8046e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8046c42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8046c44:	e0db      	b.n	8046dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8046c46:	4b73      	ldr	r3, [pc, #460]	; (8046e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8046c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046c4a:	e0d8      	b.n	8046dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8046c4c:	4b6f      	ldr	r3, [pc, #444]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046c4e:	685b      	ldr	r3, [r3, #4]
 8046c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8046c54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8046c56:	4b6d      	ldr	r3, [pc, #436]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046c58:	685b      	ldr	r3, [r3, #4]
 8046c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046c5e:	2b00      	cmp	r3, #0
 8046c60:	d063      	beq.n	8046d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046c62:	4b6a      	ldr	r3, [pc, #424]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046c64:	685b      	ldr	r3, [r3, #4]
 8046c66:	099b      	lsrs	r3, r3, #6
 8046c68:	2200      	movs	r2, #0
 8046c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8046c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8046c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8046c74:	633b      	str	r3, [r7, #48]	; 0x30
 8046c76:	2300      	movs	r3, #0
 8046c78:	637b      	str	r3, [r7, #52]	; 0x34
 8046c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8046c7e:	4622      	mov	r2, r4
 8046c80:	462b      	mov	r3, r5
 8046c82:	f04f 0000 	mov.w	r0, #0
 8046c86:	f04f 0100 	mov.w	r1, #0
 8046c8a:	0159      	lsls	r1, r3, #5
 8046c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046c90:	0150      	lsls	r0, r2, #5
 8046c92:	4602      	mov	r2, r0
 8046c94:	460b      	mov	r3, r1
 8046c96:	4621      	mov	r1, r4
 8046c98:	1a51      	subs	r1, r2, r1
 8046c9a:	6139      	str	r1, [r7, #16]
 8046c9c:	4629      	mov	r1, r5
 8046c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8046ca2:	617b      	str	r3, [r7, #20]
 8046ca4:	f04f 0200 	mov.w	r2, #0
 8046ca8:	f04f 0300 	mov.w	r3, #0
 8046cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8046cb0:	4659      	mov	r1, fp
 8046cb2:	018b      	lsls	r3, r1, #6
 8046cb4:	4651      	mov	r1, sl
 8046cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8046cba:	4651      	mov	r1, sl
 8046cbc:	018a      	lsls	r2, r1, #6
 8046cbe:	4651      	mov	r1, sl
 8046cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8046cc4:	4659      	mov	r1, fp
 8046cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8046cca:	f04f 0200 	mov.w	r2, #0
 8046cce:	f04f 0300 	mov.w	r3, #0
 8046cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8046cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8046cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8046cde:	4690      	mov	r8, r2
 8046ce0:	4699      	mov	r9, r3
 8046ce2:	4623      	mov	r3, r4
 8046ce4:	eb18 0303 	adds.w	r3, r8, r3
 8046ce8:	60bb      	str	r3, [r7, #8]
 8046cea:	462b      	mov	r3, r5
 8046cec:	eb49 0303 	adc.w	r3, r9, r3
 8046cf0:	60fb      	str	r3, [r7, #12]
 8046cf2:	f04f 0200 	mov.w	r2, #0
 8046cf6:	f04f 0300 	mov.w	r3, #0
 8046cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8046cfe:	4629      	mov	r1, r5
 8046d00:	024b      	lsls	r3, r1, #9
 8046d02:	4621      	mov	r1, r4
 8046d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8046d08:	4621      	mov	r1, r4
 8046d0a:	024a      	lsls	r2, r1, #9
 8046d0c:	4610      	mov	r0, r2
 8046d0e:	4619      	mov	r1, r3
 8046d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046d12:	2200      	movs	r2, #0
 8046d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8046d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8046d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8046d1c:	f7f9 ffb4 	bl	8040c88 <__aeabi_uldivmod>
 8046d20:	4602      	mov	r2, r0
 8046d22:	460b      	mov	r3, r1
 8046d24:	4613      	mov	r3, r2
 8046d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046d28:	e058      	b.n	8046ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046d2a:	4b38      	ldr	r3, [pc, #224]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046d2c:	685b      	ldr	r3, [r3, #4]
 8046d2e:	099b      	lsrs	r3, r3, #6
 8046d30:	2200      	movs	r2, #0
 8046d32:	4618      	mov	r0, r3
 8046d34:	4611      	mov	r1, r2
 8046d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8046d3a:	623b      	str	r3, [r7, #32]
 8046d3c:	2300      	movs	r3, #0
 8046d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8046d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8046d44:	4642      	mov	r2, r8
 8046d46:	464b      	mov	r3, r9
 8046d48:	f04f 0000 	mov.w	r0, #0
 8046d4c:	f04f 0100 	mov.w	r1, #0
 8046d50:	0159      	lsls	r1, r3, #5
 8046d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046d56:	0150      	lsls	r0, r2, #5
 8046d58:	4602      	mov	r2, r0
 8046d5a:	460b      	mov	r3, r1
 8046d5c:	4641      	mov	r1, r8
 8046d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8046d62:	4649      	mov	r1, r9
 8046d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8046d68:	f04f 0200 	mov.w	r2, #0
 8046d6c:	f04f 0300 	mov.w	r3, #0
 8046d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8046d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8046d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8046d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8046d80:	eb63 050b 	sbc.w	r5, r3, fp
 8046d84:	f04f 0200 	mov.w	r2, #0
 8046d88:	f04f 0300 	mov.w	r3, #0
 8046d8c:	00eb      	lsls	r3, r5, #3
 8046d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8046d92:	00e2      	lsls	r2, r4, #3
 8046d94:	4614      	mov	r4, r2
 8046d96:	461d      	mov	r5, r3
 8046d98:	4643      	mov	r3, r8
 8046d9a:	18e3      	adds	r3, r4, r3
 8046d9c:	603b      	str	r3, [r7, #0]
 8046d9e:	464b      	mov	r3, r9
 8046da0:	eb45 0303 	adc.w	r3, r5, r3
 8046da4:	607b      	str	r3, [r7, #4]
 8046da6:	f04f 0200 	mov.w	r2, #0
 8046daa:	f04f 0300 	mov.w	r3, #0
 8046dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8046db2:	4629      	mov	r1, r5
 8046db4:	028b      	lsls	r3, r1, #10
 8046db6:	4621      	mov	r1, r4
 8046db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8046dbc:	4621      	mov	r1, r4
 8046dbe:	028a      	lsls	r2, r1, #10
 8046dc0:	4610      	mov	r0, r2
 8046dc2:	4619      	mov	r1, r3
 8046dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046dc6:	2200      	movs	r2, #0
 8046dc8:	61bb      	str	r3, [r7, #24]
 8046dca:	61fa      	str	r2, [r7, #28]
 8046dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046dd0:	f7f9 ff5a 	bl	8040c88 <__aeabi_uldivmod>
 8046dd4:	4602      	mov	r2, r0
 8046dd6:	460b      	mov	r3, r1
 8046dd8:	4613      	mov	r3, r2
 8046dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8046ddc:	4b0b      	ldr	r3, [pc, #44]	; (8046e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8046dde:	685b      	ldr	r3, [r3, #4]
 8046de0:	0c1b      	lsrs	r3, r3, #16
 8046de2:	f003 0303 	and.w	r3, r3, #3
 8046de6:	3301      	adds	r3, #1
 8046de8:	005b      	lsls	r3, r3, #1
 8046dea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8046dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8046dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8046df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046df6:	e002      	b.n	8046dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8046df8:	4b05      	ldr	r3, [pc, #20]	; (8046e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8046dfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8046dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8046e00:	4618      	mov	r0, r3
 8046e02:	3750      	adds	r7, #80	; 0x50
 8046e04:	46bd      	mov	sp, r7
 8046e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046e0a:	bf00      	nop
 8046e0c:	40023800 	.word	0x40023800
 8046e10:	00f42400 	.word	0x00f42400
 8046e14:	007a1200 	.word	0x007a1200

08046e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046e18:	b480      	push	{r7}
 8046e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046e1c:	4b03      	ldr	r3, [pc, #12]	; (8046e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8046e1e:	681b      	ldr	r3, [r3, #0]
}
 8046e20:	4618      	mov	r0, r3
 8046e22:	46bd      	mov	sp, r7
 8046e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e28:	4770      	bx	lr
 8046e2a:	bf00      	nop
 8046e2c:	20000008 	.word	0x20000008

08046e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046e30:	b580      	push	{r7, lr}
 8046e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8046e34:	f7ff fff0 	bl	8046e18 <HAL_RCC_GetHCLKFreq>
 8046e38:	4602      	mov	r2, r0
 8046e3a:	4b05      	ldr	r3, [pc, #20]	; (8046e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8046e3c:	689b      	ldr	r3, [r3, #8]
 8046e3e:	0a9b      	lsrs	r3, r3, #10
 8046e40:	f003 0307 	and.w	r3, r3, #7
 8046e44:	4903      	ldr	r1, [pc, #12]	; (8046e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8046e46:	5ccb      	ldrb	r3, [r1, r3]
 8046e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046e4c:	4618      	mov	r0, r3
 8046e4e:	bd80      	pop	{r7, pc}
 8046e50:	40023800 	.word	0x40023800
 8046e54:	0804e510 	.word	0x0804e510

08046e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8046e58:	b580      	push	{r7, lr}
 8046e5a:	b082      	sub	sp, #8
 8046e5c:	af00      	add	r7, sp, #0
 8046e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8046e60:	687b      	ldr	r3, [r7, #4]
 8046e62:	2b00      	cmp	r3, #0
 8046e64:	d101      	bne.n	8046e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8046e66:	2301      	movs	r3, #1
 8046e68:	e07b      	b.n	8046f62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8046e6a:	687b      	ldr	r3, [r7, #4]
 8046e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e6e:	2b00      	cmp	r3, #0
 8046e70:	d108      	bne.n	8046e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046e72:	687b      	ldr	r3, [r7, #4]
 8046e74:	685b      	ldr	r3, [r3, #4]
 8046e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046e7a:	d009      	beq.n	8046e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8046e7c:	687b      	ldr	r3, [r7, #4]
 8046e7e:	2200      	movs	r2, #0
 8046e80:	61da      	str	r2, [r3, #28]
 8046e82:	e005      	b.n	8046e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8046e84:	687b      	ldr	r3, [r7, #4]
 8046e86:	2200      	movs	r2, #0
 8046e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8046e8a:	687b      	ldr	r3, [r7, #4]
 8046e8c:	2200      	movs	r2, #0
 8046e8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8046e90:	687b      	ldr	r3, [r7, #4]
 8046e92:	2200      	movs	r2, #0
 8046e94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8046e96:	687b      	ldr	r3, [r7, #4]
 8046e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046e9c:	b2db      	uxtb	r3, r3
 8046e9e:	2b00      	cmp	r3, #0
 8046ea0:	d106      	bne.n	8046eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8046ea2:	687b      	ldr	r3, [r7, #4]
 8046ea4:	2200      	movs	r2, #0
 8046ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8046eaa:	6878      	ldr	r0, [r7, #4]
 8046eac:	f7fd fc24 	bl	80446f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8046eb0:	687b      	ldr	r3, [r7, #4]
 8046eb2:	2202      	movs	r2, #2
 8046eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8046eb8:	687b      	ldr	r3, [r7, #4]
 8046eba:	681b      	ldr	r3, [r3, #0]
 8046ebc:	681a      	ldr	r2, [r3, #0]
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	681b      	ldr	r3, [r3, #0]
 8046ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8046ec8:	687b      	ldr	r3, [r7, #4]
 8046eca:	685b      	ldr	r3, [r3, #4]
 8046ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8046ed0:	687b      	ldr	r3, [r7, #4]
 8046ed2:	689b      	ldr	r3, [r3, #8]
 8046ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8046ed8:	431a      	orrs	r2, r3
 8046eda:	687b      	ldr	r3, [r7, #4]
 8046edc:	68db      	ldr	r3, [r3, #12]
 8046ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8046ee2:	431a      	orrs	r2, r3
 8046ee4:	687b      	ldr	r3, [r7, #4]
 8046ee6:	691b      	ldr	r3, [r3, #16]
 8046ee8:	f003 0302 	and.w	r3, r3, #2
 8046eec:	431a      	orrs	r2, r3
 8046eee:	687b      	ldr	r3, [r7, #4]
 8046ef0:	695b      	ldr	r3, [r3, #20]
 8046ef2:	f003 0301 	and.w	r3, r3, #1
 8046ef6:	431a      	orrs	r2, r3
 8046ef8:	687b      	ldr	r3, [r7, #4]
 8046efa:	699b      	ldr	r3, [r3, #24]
 8046efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8046f00:	431a      	orrs	r2, r3
 8046f02:	687b      	ldr	r3, [r7, #4]
 8046f04:	69db      	ldr	r3, [r3, #28]
 8046f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8046f0a:	431a      	orrs	r2, r3
 8046f0c:	687b      	ldr	r3, [r7, #4]
 8046f0e:	6a1b      	ldr	r3, [r3, #32]
 8046f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046f14:	ea42 0103 	orr.w	r1, r2, r3
 8046f18:	687b      	ldr	r3, [r7, #4]
 8046f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046f1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8046f20:	687b      	ldr	r3, [r7, #4]
 8046f22:	681b      	ldr	r3, [r3, #0]
 8046f24:	430a      	orrs	r2, r1
 8046f26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8046f28:	687b      	ldr	r3, [r7, #4]
 8046f2a:	699b      	ldr	r3, [r3, #24]
 8046f2c:	0c1b      	lsrs	r3, r3, #16
 8046f2e:	f003 0104 	and.w	r1, r3, #4
 8046f32:	687b      	ldr	r3, [r7, #4]
 8046f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046f36:	f003 0210 	and.w	r2, r3, #16
 8046f3a:	687b      	ldr	r3, [r7, #4]
 8046f3c:	681b      	ldr	r3, [r3, #0]
 8046f3e:	430a      	orrs	r2, r1
 8046f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8046f42:	687b      	ldr	r3, [r7, #4]
 8046f44:	681b      	ldr	r3, [r3, #0]
 8046f46:	69da      	ldr	r2, [r3, #28]
 8046f48:	687b      	ldr	r3, [r7, #4]
 8046f4a:	681b      	ldr	r3, [r3, #0]
 8046f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8046f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	2200      	movs	r2, #0
 8046f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8046f58:	687b      	ldr	r3, [r7, #4]
 8046f5a:	2201      	movs	r2, #1
 8046f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8046f60:	2300      	movs	r3, #0
}
 8046f62:	4618      	mov	r0, r3
 8046f64:	3708      	adds	r7, #8
 8046f66:	46bd      	mov	sp, r7
 8046f68:	bd80      	pop	{r7, pc}

08046f6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8046f6a:	b580      	push	{r7, lr}
 8046f6c:	b088      	sub	sp, #32
 8046f6e:	af02      	add	r7, sp, #8
 8046f70:	60f8      	str	r0, [r7, #12]
 8046f72:	60b9      	str	r1, [r7, #8]
 8046f74:	603b      	str	r3, [r7, #0]
 8046f76:	4613      	mov	r3, r2
 8046f78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8046f7a:	2300      	movs	r3, #0
 8046f7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8046f7e:	68fb      	ldr	r3, [r7, #12]
 8046f80:	685b      	ldr	r3, [r3, #4]
 8046f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046f86:	d112      	bne.n	8046fae <HAL_SPI_Receive+0x44>
 8046f88:	68fb      	ldr	r3, [r7, #12]
 8046f8a:	689b      	ldr	r3, [r3, #8]
 8046f8c:	2b00      	cmp	r3, #0
 8046f8e:	d10e      	bne.n	8046fae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8046f90:	68fb      	ldr	r3, [r7, #12]
 8046f92:	2204      	movs	r2, #4
 8046f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8046f98:	88fa      	ldrh	r2, [r7, #6]
 8046f9a:	683b      	ldr	r3, [r7, #0]
 8046f9c:	9300      	str	r3, [sp, #0]
 8046f9e:	4613      	mov	r3, r2
 8046fa0:	68ba      	ldr	r2, [r7, #8]
 8046fa2:	68b9      	ldr	r1, [r7, #8]
 8046fa4:	68f8      	ldr	r0, [r7, #12]
 8046fa6:	f000 f8f1 	bl	804718c <HAL_SPI_TransmitReceive>
 8046faa:	4603      	mov	r3, r0
 8046fac:	e0ea      	b.n	8047184 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8046fae:	68fb      	ldr	r3, [r7, #12]
 8046fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8046fb4:	2b01      	cmp	r3, #1
 8046fb6:	d101      	bne.n	8046fbc <HAL_SPI_Receive+0x52>
 8046fb8:	2302      	movs	r3, #2
 8046fba:	e0e3      	b.n	8047184 <HAL_SPI_Receive+0x21a>
 8046fbc:	68fb      	ldr	r3, [r7, #12]
 8046fbe:	2201      	movs	r2, #1
 8046fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8046fc4:	f7fd ff0c 	bl	8044de0 <HAL_GetTick>
 8046fc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8046fca:	68fb      	ldr	r3, [r7, #12]
 8046fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046fd0:	b2db      	uxtb	r3, r3
 8046fd2:	2b01      	cmp	r3, #1
 8046fd4:	d002      	beq.n	8046fdc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8046fd6:	2302      	movs	r3, #2
 8046fd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8046fda:	e0ca      	b.n	8047172 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8046fdc:	68bb      	ldr	r3, [r7, #8]
 8046fde:	2b00      	cmp	r3, #0
 8046fe0:	d002      	beq.n	8046fe8 <HAL_SPI_Receive+0x7e>
 8046fe2:	88fb      	ldrh	r3, [r7, #6]
 8046fe4:	2b00      	cmp	r3, #0
 8046fe6:	d102      	bne.n	8046fee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8046fe8:	2301      	movs	r3, #1
 8046fea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8046fec:	e0c1      	b.n	8047172 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8046fee:	68fb      	ldr	r3, [r7, #12]
 8046ff0:	2204      	movs	r2, #4
 8046ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8046ff6:	68fb      	ldr	r3, [r7, #12]
 8046ff8:	2200      	movs	r2, #0
 8046ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8046ffc:	68fb      	ldr	r3, [r7, #12]
 8046ffe:	68ba      	ldr	r2, [r7, #8]
 8047000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8047002:	68fb      	ldr	r3, [r7, #12]
 8047004:	88fa      	ldrh	r2, [r7, #6]
 8047006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8047008:	68fb      	ldr	r3, [r7, #12]
 804700a:	88fa      	ldrh	r2, [r7, #6]
 804700c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 804700e:	68fb      	ldr	r3, [r7, #12]
 8047010:	2200      	movs	r2, #0
 8047012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8047014:	68fb      	ldr	r3, [r7, #12]
 8047016:	2200      	movs	r2, #0
 8047018:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 804701a:	68fb      	ldr	r3, [r7, #12]
 804701c:	2200      	movs	r2, #0
 804701e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8047020:	68fb      	ldr	r3, [r7, #12]
 8047022:	2200      	movs	r2, #0
 8047024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047026:	68fb      	ldr	r3, [r7, #12]
 8047028:	2200      	movs	r2, #0
 804702a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804702c:	68fb      	ldr	r3, [r7, #12]
 804702e:	689b      	ldr	r3, [r3, #8]
 8047030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047034:	d10f      	bne.n	8047056 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047036:	68fb      	ldr	r3, [r7, #12]
 8047038:	681b      	ldr	r3, [r3, #0]
 804703a:	681a      	ldr	r2, [r3, #0]
 804703c:	68fb      	ldr	r3, [r7, #12]
 804703e:	681b      	ldr	r3, [r3, #0]
 8047040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047044:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8047046:	68fb      	ldr	r3, [r7, #12]
 8047048:	681b      	ldr	r3, [r3, #0]
 804704a:	681a      	ldr	r2, [r3, #0]
 804704c:	68fb      	ldr	r3, [r7, #12]
 804704e:	681b      	ldr	r3, [r3, #0]
 8047050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047054:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047056:	68fb      	ldr	r3, [r7, #12]
 8047058:	681b      	ldr	r3, [r3, #0]
 804705a:	681b      	ldr	r3, [r3, #0]
 804705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047060:	2b40      	cmp	r3, #64	; 0x40
 8047062:	d007      	beq.n	8047074 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047064:	68fb      	ldr	r3, [r7, #12]
 8047066:	681b      	ldr	r3, [r3, #0]
 8047068:	681a      	ldr	r2, [r3, #0]
 804706a:	68fb      	ldr	r3, [r7, #12]
 804706c:	681b      	ldr	r3, [r3, #0]
 804706e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047072:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8047074:	68fb      	ldr	r3, [r7, #12]
 8047076:	68db      	ldr	r3, [r3, #12]
 8047078:	2b00      	cmp	r3, #0
 804707a:	d162      	bne.n	8047142 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 804707c:	e02e      	b.n	80470dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804707e:	68fb      	ldr	r3, [r7, #12]
 8047080:	681b      	ldr	r3, [r3, #0]
 8047082:	689b      	ldr	r3, [r3, #8]
 8047084:	f003 0301 	and.w	r3, r3, #1
 8047088:	2b01      	cmp	r3, #1
 804708a:	d115      	bne.n	80470b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804708c:	68fb      	ldr	r3, [r7, #12]
 804708e:	681b      	ldr	r3, [r3, #0]
 8047090:	f103 020c 	add.w	r2, r3, #12
 8047094:	68fb      	ldr	r3, [r7, #12]
 8047096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047098:	7812      	ldrb	r2, [r2, #0]
 804709a:	b2d2      	uxtb	r2, r2
 804709c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 804709e:	68fb      	ldr	r3, [r7, #12]
 80470a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80470a2:	1c5a      	adds	r2, r3, #1
 80470a4:	68fb      	ldr	r3, [r7, #12]
 80470a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80470a8:	68fb      	ldr	r3, [r7, #12]
 80470aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80470ac:	b29b      	uxth	r3, r3
 80470ae:	3b01      	subs	r3, #1
 80470b0:	b29a      	uxth	r2, r3
 80470b2:	68fb      	ldr	r3, [r7, #12]
 80470b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80470b6:	e011      	b.n	80470dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80470b8:	f7fd fe92 	bl	8044de0 <HAL_GetTick>
 80470bc:	4602      	mov	r2, r0
 80470be:	693b      	ldr	r3, [r7, #16]
 80470c0:	1ad3      	subs	r3, r2, r3
 80470c2:	683a      	ldr	r2, [r7, #0]
 80470c4:	429a      	cmp	r2, r3
 80470c6:	d803      	bhi.n	80470d0 <HAL_SPI_Receive+0x166>
 80470c8:	683b      	ldr	r3, [r7, #0]
 80470ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80470ce:	d102      	bne.n	80470d6 <HAL_SPI_Receive+0x16c>
 80470d0:	683b      	ldr	r3, [r7, #0]
 80470d2:	2b00      	cmp	r3, #0
 80470d4:	d102      	bne.n	80470dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80470d6:	2303      	movs	r3, #3
 80470d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80470da:	e04a      	b.n	8047172 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80470dc:	68fb      	ldr	r3, [r7, #12]
 80470de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80470e0:	b29b      	uxth	r3, r3
 80470e2:	2b00      	cmp	r3, #0
 80470e4:	d1cb      	bne.n	804707e <HAL_SPI_Receive+0x114>
 80470e6:	e031      	b.n	804714c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80470e8:	68fb      	ldr	r3, [r7, #12]
 80470ea:	681b      	ldr	r3, [r3, #0]
 80470ec:	689b      	ldr	r3, [r3, #8]
 80470ee:	f003 0301 	and.w	r3, r3, #1
 80470f2:	2b01      	cmp	r3, #1
 80470f4:	d113      	bne.n	804711e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80470f6:	68fb      	ldr	r3, [r7, #12]
 80470f8:	681b      	ldr	r3, [r3, #0]
 80470fa:	68da      	ldr	r2, [r3, #12]
 80470fc:	68fb      	ldr	r3, [r7, #12]
 80470fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047100:	b292      	uxth	r2, r2
 8047102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047104:	68fb      	ldr	r3, [r7, #12]
 8047106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047108:	1c9a      	adds	r2, r3, #2
 804710a:	68fb      	ldr	r3, [r7, #12]
 804710c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804710e:	68fb      	ldr	r3, [r7, #12]
 8047110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047112:	b29b      	uxth	r3, r3
 8047114:	3b01      	subs	r3, #1
 8047116:	b29a      	uxth	r2, r3
 8047118:	68fb      	ldr	r3, [r7, #12]
 804711a:	87da      	strh	r2, [r3, #62]	; 0x3e
 804711c:	e011      	b.n	8047142 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804711e:	f7fd fe5f 	bl	8044de0 <HAL_GetTick>
 8047122:	4602      	mov	r2, r0
 8047124:	693b      	ldr	r3, [r7, #16]
 8047126:	1ad3      	subs	r3, r2, r3
 8047128:	683a      	ldr	r2, [r7, #0]
 804712a:	429a      	cmp	r2, r3
 804712c:	d803      	bhi.n	8047136 <HAL_SPI_Receive+0x1cc>
 804712e:	683b      	ldr	r3, [r7, #0]
 8047130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047134:	d102      	bne.n	804713c <HAL_SPI_Receive+0x1d2>
 8047136:	683b      	ldr	r3, [r7, #0]
 8047138:	2b00      	cmp	r3, #0
 804713a:	d102      	bne.n	8047142 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 804713c:	2303      	movs	r3, #3
 804713e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047140:	e017      	b.n	8047172 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047142:	68fb      	ldr	r3, [r7, #12]
 8047144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047146:	b29b      	uxth	r3, r3
 8047148:	2b00      	cmp	r3, #0
 804714a:	d1cd      	bne.n	80470e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804714c:	693a      	ldr	r2, [r7, #16]
 804714e:	6839      	ldr	r1, [r7, #0]
 8047150:	68f8      	ldr	r0, [r7, #12]
 8047152:	f000 fa45 	bl	80475e0 <SPI_EndRxTransaction>
 8047156:	4603      	mov	r3, r0
 8047158:	2b00      	cmp	r3, #0
 804715a:	d002      	beq.n	8047162 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804715c:	68fb      	ldr	r3, [r7, #12]
 804715e:	2220      	movs	r2, #32
 8047160:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047162:	68fb      	ldr	r3, [r7, #12]
 8047164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047166:	2b00      	cmp	r3, #0
 8047168:	d002      	beq.n	8047170 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 804716a:	2301      	movs	r3, #1
 804716c:	75fb      	strb	r3, [r7, #23]
 804716e:	e000      	b.n	8047172 <HAL_SPI_Receive+0x208>
  }

error :
 8047170:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047172:	68fb      	ldr	r3, [r7, #12]
 8047174:	2201      	movs	r2, #1
 8047176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804717a:	68fb      	ldr	r3, [r7, #12]
 804717c:	2200      	movs	r2, #0
 804717e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047182:	7dfb      	ldrb	r3, [r7, #23]
}
 8047184:	4618      	mov	r0, r3
 8047186:	3718      	adds	r7, #24
 8047188:	46bd      	mov	sp, r7
 804718a:	bd80      	pop	{r7, pc}

0804718c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 804718c:	b580      	push	{r7, lr}
 804718e:	b08c      	sub	sp, #48	; 0x30
 8047190:	af00      	add	r7, sp, #0
 8047192:	60f8      	str	r0, [r7, #12]
 8047194:	60b9      	str	r1, [r7, #8]
 8047196:	607a      	str	r2, [r7, #4]
 8047198:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 804719a:	2301      	movs	r3, #1
 804719c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 804719e:	2300      	movs	r3, #0
 80471a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80471a4:	68fb      	ldr	r3, [r7, #12]
 80471a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80471aa:	2b01      	cmp	r3, #1
 80471ac:	d101      	bne.n	80471b2 <HAL_SPI_TransmitReceive+0x26>
 80471ae:	2302      	movs	r3, #2
 80471b0:	e18a      	b.n	80474c8 <HAL_SPI_TransmitReceive+0x33c>
 80471b2:	68fb      	ldr	r3, [r7, #12]
 80471b4:	2201      	movs	r2, #1
 80471b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80471ba:	f7fd fe11 	bl	8044de0 <HAL_GetTick>
 80471be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80471c0:	68fb      	ldr	r3, [r7, #12]
 80471c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80471c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80471ca:	68fb      	ldr	r3, [r7, #12]
 80471cc:	685b      	ldr	r3, [r3, #4]
 80471ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80471d0:	887b      	ldrh	r3, [r7, #2]
 80471d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80471d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80471d8:	2b01      	cmp	r3, #1
 80471da:	d00f      	beq.n	80471fc <HAL_SPI_TransmitReceive+0x70>
 80471dc:	69fb      	ldr	r3, [r7, #28]
 80471de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80471e2:	d107      	bne.n	80471f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80471e4:	68fb      	ldr	r3, [r7, #12]
 80471e6:	689b      	ldr	r3, [r3, #8]
 80471e8:	2b00      	cmp	r3, #0
 80471ea:	d103      	bne.n	80471f4 <HAL_SPI_TransmitReceive+0x68>
 80471ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80471f0:	2b04      	cmp	r3, #4
 80471f2:	d003      	beq.n	80471fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80471f4:	2302      	movs	r3, #2
 80471f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80471fa:	e15b      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80471fc:	68bb      	ldr	r3, [r7, #8]
 80471fe:	2b00      	cmp	r3, #0
 8047200:	d005      	beq.n	804720e <HAL_SPI_TransmitReceive+0x82>
 8047202:	687b      	ldr	r3, [r7, #4]
 8047204:	2b00      	cmp	r3, #0
 8047206:	d002      	beq.n	804720e <HAL_SPI_TransmitReceive+0x82>
 8047208:	887b      	ldrh	r3, [r7, #2]
 804720a:	2b00      	cmp	r3, #0
 804720c:	d103      	bne.n	8047216 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 804720e:	2301      	movs	r3, #1
 8047210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047214:	e14e      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8047216:	68fb      	ldr	r3, [r7, #12]
 8047218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804721c:	b2db      	uxtb	r3, r3
 804721e:	2b04      	cmp	r3, #4
 8047220:	d003      	beq.n	804722a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8047222:	68fb      	ldr	r3, [r7, #12]
 8047224:	2205      	movs	r2, #5
 8047226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804722a:	68fb      	ldr	r3, [r7, #12]
 804722c:	2200      	movs	r2, #0
 804722e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8047230:	68fb      	ldr	r3, [r7, #12]
 8047232:	687a      	ldr	r2, [r7, #4]
 8047234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8047236:	68fb      	ldr	r3, [r7, #12]
 8047238:	887a      	ldrh	r2, [r7, #2]
 804723a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 804723c:	68fb      	ldr	r3, [r7, #12]
 804723e:	887a      	ldrh	r2, [r7, #2]
 8047240:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8047242:	68fb      	ldr	r3, [r7, #12]
 8047244:	68ba      	ldr	r2, [r7, #8]
 8047246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8047248:	68fb      	ldr	r3, [r7, #12]
 804724a:	887a      	ldrh	r2, [r7, #2]
 804724c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 804724e:	68fb      	ldr	r3, [r7, #12]
 8047250:	887a      	ldrh	r2, [r7, #2]
 8047252:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8047254:	68fb      	ldr	r3, [r7, #12]
 8047256:	2200      	movs	r2, #0
 8047258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 804725a:	68fb      	ldr	r3, [r7, #12]
 804725c:	2200      	movs	r2, #0
 804725e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047260:	68fb      	ldr	r3, [r7, #12]
 8047262:	681b      	ldr	r3, [r3, #0]
 8047264:	681b      	ldr	r3, [r3, #0]
 8047266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804726a:	2b40      	cmp	r3, #64	; 0x40
 804726c:	d007      	beq.n	804727e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804726e:	68fb      	ldr	r3, [r7, #12]
 8047270:	681b      	ldr	r3, [r3, #0]
 8047272:	681a      	ldr	r2, [r3, #0]
 8047274:	68fb      	ldr	r3, [r7, #12]
 8047276:	681b      	ldr	r3, [r3, #0]
 8047278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804727c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 804727e:	68fb      	ldr	r3, [r7, #12]
 8047280:	68db      	ldr	r3, [r3, #12]
 8047282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047286:	d178      	bne.n	804737a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047288:	68fb      	ldr	r3, [r7, #12]
 804728a:	685b      	ldr	r3, [r3, #4]
 804728c:	2b00      	cmp	r3, #0
 804728e:	d002      	beq.n	8047296 <HAL_SPI_TransmitReceive+0x10a>
 8047290:	8b7b      	ldrh	r3, [r7, #26]
 8047292:	2b01      	cmp	r3, #1
 8047294:	d166      	bne.n	8047364 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047296:	68fb      	ldr	r3, [r7, #12]
 8047298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804729a:	881a      	ldrh	r2, [r3, #0]
 804729c:	68fb      	ldr	r3, [r7, #12]
 804729e:	681b      	ldr	r3, [r3, #0]
 80472a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80472a2:	68fb      	ldr	r3, [r7, #12]
 80472a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472a6:	1c9a      	adds	r2, r3, #2
 80472a8:	68fb      	ldr	r3, [r7, #12]
 80472aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80472ac:	68fb      	ldr	r3, [r7, #12]
 80472ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80472b0:	b29b      	uxth	r3, r3
 80472b2:	3b01      	subs	r3, #1
 80472b4:	b29a      	uxth	r2, r3
 80472b6:	68fb      	ldr	r3, [r7, #12]
 80472b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80472ba:	e053      	b.n	8047364 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80472bc:	68fb      	ldr	r3, [r7, #12]
 80472be:	681b      	ldr	r3, [r3, #0]
 80472c0:	689b      	ldr	r3, [r3, #8]
 80472c2:	f003 0302 	and.w	r3, r3, #2
 80472c6:	2b02      	cmp	r3, #2
 80472c8:	d11b      	bne.n	8047302 <HAL_SPI_TransmitReceive+0x176>
 80472ca:	68fb      	ldr	r3, [r7, #12]
 80472cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80472ce:	b29b      	uxth	r3, r3
 80472d0:	2b00      	cmp	r3, #0
 80472d2:	d016      	beq.n	8047302 <HAL_SPI_TransmitReceive+0x176>
 80472d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80472d6:	2b01      	cmp	r3, #1
 80472d8:	d113      	bne.n	8047302 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80472da:	68fb      	ldr	r3, [r7, #12]
 80472dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472de:	881a      	ldrh	r2, [r3, #0]
 80472e0:	68fb      	ldr	r3, [r7, #12]
 80472e2:	681b      	ldr	r3, [r3, #0]
 80472e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80472e6:	68fb      	ldr	r3, [r7, #12]
 80472e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472ea:	1c9a      	adds	r2, r3, #2
 80472ec:	68fb      	ldr	r3, [r7, #12]
 80472ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80472f0:	68fb      	ldr	r3, [r7, #12]
 80472f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80472f4:	b29b      	uxth	r3, r3
 80472f6:	3b01      	subs	r3, #1
 80472f8:	b29a      	uxth	r2, r3
 80472fa:	68fb      	ldr	r3, [r7, #12]
 80472fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80472fe:	2300      	movs	r3, #0
 8047300:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8047302:	68fb      	ldr	r3, [r7, #12]
 8047304:	681b      	ldr	r3, [r3, #0]
 8047306:	689b      	ldr	r3, [r3, #8]
 8047308:	f003 0301 	and.w	r3, r3, #1
 804730c:	2b01      	cmp	r3, #1
 804730e:	d119      	bne.n	8047344 <HAL_SPI_TransmitReceive+0x1b8>
 8047310:	68fb      	ldr	r3, [r7, #12]
 8047312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047314:	b29b      	uxth	r3, r3
 8047316:	2b00      	cmp	r3, #0
 8047318:	d014      	beq.n	8047344 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804731a:	68fb      	ldr	r3, [r7, #12]
 804731c:	681b      	ldr	r3, [r3, #0]
 804731e:	68da      	ldr	r2, [r3, #12]
 8047320:	68fb      	ldr	r3, [r7, #12]
 8047322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047324:	b292      	uxth	r2, r2
 8047326:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047328:	68fb      	ldr	r3, [r7, #12]
 804732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804732c:	1c9a      	adds	r2, r3, #2
 804732e:	68fb      	ldr	r3, [r7, #12]
 8047330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047332:	68fb      	ldr	r3, [r7, #12]
 8047334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047336:	b29b      	uxth	r3, r3
 8047338:	3b01      	subs	r3, #1
 804733a:	b29a      	uxth	r2, r3
 804733c:	68fb      	ldr	r3, [r7, #12]
 804733e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047340:	2301      	movs	r3, #1
 8047342:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8047344:	f7fd fd4c 	bl	8044de0 <HAL_GetTick>
 8047348:	4602      	mov	r2, r0
 804734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804734c:	1ad3      	subs	r3, r2, r3
 804734e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047350:	429a      	cmp	r2, r3
 8047352:	d807      	bhi.n	8047364 <HAL_SPI_TransmitReceive+0x1d8>
 8047354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047356:	f1b3 3fff 	cmp.w	r3, #4294967295
 804735a:	d003      	beq.n	8047364 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 804735c:	2303      	movs	r3, #3
 804735e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047362:	e0a7      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047364:	68fb      	ldr	r3, [r7, #12]
 8047366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047368:	b29b      	uxth	r3, r3
 804736a:	2b00      	cmp	r3, #0
 804736c:	d1a6      	bne.n	80472bc <HAL_SPI_TransmitReceive+0x130>
 804736e:	68fb      	ldr	r3, [r7, #12]
 8047370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047372:	b29b      	uxth	r3, r3
 8047374:	2b00      	cmp	r3, #0
 8047376:	d1a1      	bne.n	80472bc <HAL_SPI_TransmitReceive+0x130>
 8047378:	e07c      	b.n	8047474 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804737a:	68fb      	ldr	r3, [r7, #12]
 804737c:	685b      	ldr	r3, [r3, #4]
 804737e:	2b00      	cmp	r3, #0
 8047380:	d002      	beq.n	8047388 <HAL_SPI_TransmitReceive+0x1fc>
 8047382:	8b7b      	ldrh	r3, [r7, #26]
 8047384:	2b01      	cmp	r3, #1
 8047386:	d16b      	bne.n	8047460 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047388:	68fb      	ldr	r3, [r7, #12]
 804738a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804738c:	68fb      	ldr	r3, [r7, #12]
 804738e:	681b      	ldr	r3, [r3, #0]
 8047390:	330c      	adds	r3, #12
 8047392:	7812      	ldrb	r2, [r2, #0]
 8047394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047396:	68fb      	ldr	r3, [r7, #12]
 8047398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804739a:	1c5a      	adds	r2, r3, #1
 804739c:	68fb      	ldr	r3, [r7, #12]
 804739e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80473a0:	68fb      	ldr	r3, [r7, #12]
 80473a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80473a4:	b29b      	uxth	r3, r3
 80473a6:	3b01      	subs	r3, #1
 80473a8:	b29a      	uxth	r2, r3
 80473aa:	68fb      	ldr	r3, [r7, #12]
 80473ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80473ae:	e057      	b.n	8047460 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80473b0:	68fb      	ldr	r3, [r7, #12]
 80473b2:	681b      	ldr	r3, [r3, #0]
 80473b4:	689b      	ldr	r3, [r3, #8]
 80473b6:	f003 0302 	and.w	r3, r3, #2
 80473ba:	2b02      	cmp	r3, #2
 80473bc:	d11c      	bne.n	80473f8 <HAL_SPI_TransmitReceive+0x26c>
 80473be:	68fb      	ldr	r3, [r7, #12]
 80473c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80473c2:	b29b      	uxth	r3, r3
 80473c4:	2b00      	cmp	r3, #0
 80473c6:	d017      	beq.n	80473f8 <HAL_SPI_TransmitReceive+0x26c>
 80473c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80473ca:	2b01      	cmp	r3, #1
 80473cc:	d114      	bne.n	80473f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80473ce:	68fb      	ldr	r3, [r7, #12]
 80473d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80473d2:	68fb      	ldr	r3, [r7, #12]
 80473d4:	681b      	ldr	r3, [r3, #0]
 80473d6:	330c      	adds	r3, #12
 80473d8:	7812      	ldrb	r2, [r2, #0]
 80473da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80473dc:	68fb      	ldr	r3, [r7, #12]
 80473de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80473e0:	1c5a      	adds	r2, r3, #1
 80473e2:	68fb      	ldr	r3, [r7, #12]
 80473e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80473e6:	68fb      	ldr	r3, [r7, #12]
 80473e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80473ea:	b29b      	uxth	r3, r3
 80473ec:	3b01      	subs	r3, #1
 80473ee:	b29a      	uxth	r2, r3
 80473f0:	68fb      	ldr	r3, [r7, #12]
 80473f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80473f4:	2300      	movs	r3, #0
 80473f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80473f8:	68fb      	ldr	r3, [r7, #12]
 80473fa:	681b      	ldr	r3, [r3, #0]
 80473fc:	689b      	ldr	r3, [r3, #8]
 80473fe:	f003 0301 	and.w	r3, r3, #1
 8047402:	2b01      	cmp	r3, #1
 8047404:	d119      	bne.n	804743a <HAL_SPI_TransmitReceive+0x2ae>
 8047406:	68fb      	ldr	r3, [r7, #12]
 8047408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804740a:	b29b      	uxth	r3, r3
 804740c:	2b00      	cmp	r3, #0
 804740e:	d014      	beq.n	804743a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8047410:	68fb      	ldr	r3, [r7, #12]
 8047412:	681b      	ldr	r3, [r3, #0]
 8047414:	68da      	ldr	r2, [r3, #12]
 8047416:	68fb      	ldr	r3, [r7, #12]
 8047418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804741a:	b2d2      	uxtb	r2, r2
 804741c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 804741e:	68fb      	ldr	r3, [r7, #12]
 8047420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047422:	1c5a      	adds	r2, r3, #1
 8047424:	68fb      	ldr	r3, [r7, #12]
 8047426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047428:	68fb      	ldr	r3, [r7, #12]
 804742a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804742c:	b29b      	uxth	r3, r3
 804742e:	3b01      	subs	r3, #1
 8047430:	b29a      	uxth	r2, r3
 8047432:	68fb      	ldr	r3, [r7, #12]
 8047434:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047436:	2301      	movs	r3, #1
 8047438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804743a:	f7fd fcd1 	bl	8044de0 <HAL_GetTick>
 804743e:	4602      	mov	r2, r0
 8047440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047442:	1ad3      	subs	r3, r2, r3
 8047444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047446:	429a      	cmp	r2, r3
 8047448:	d803      	bhi.n	8047452 <HAL_SPI_TransmitReceive+0x2c6>
 804744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047450:	d102      	bne.n	8047458 <HAL_SPI_TransmitReceive+0x2cc>
 8047452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047454:	2b00      	cmp	r3, #0
 8047456:	d103      	bne.n	8047460 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8047458:	2303      	movs	r3, #3
 804745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 804745e:	e029      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047460:	68fb      	ldr	r3, [r7, #12]
 8047462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047464:	b29b      	uxth	r3, r3
 8047466:	2b00      	cmp	r3, #0
 8047468:	d1a2      	bne.n	80473b0 <HAL_SPI_TransmitReceive+0x224>
 804746a:	68fb      	ldr	r3, [r7, #12]
 804746c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804746e:	b29b      	uxth	r3, r3
 8047470:	2b00      	cmp	r3, #0
 8047472:	d19d      	bne.n	80473b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8047476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8047478:	68f8      	ldr	r0, [r7, #12]
 804747a:	f000 f917 	bl	80476ac <SPI_EndRxTxTransaction>
 804747e:	4603      	mov	r3, r0
 8047480:	2b00      	cmp	r3, #0
 8047482:	d006      	beq.n	8047492 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8047484:	2301      	movs	r3, #1
 8047486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804748a:	68fb      	ldr	r3, [r7, #12]
 804748c:	2220      	movs	r2, #32
 804748e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8047490:	e010      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047492:	68fb      	ldr	r3, [r7, #12]
 8047494:	689b      	ldr	r3, [r3, #8]
 8047496:	2b00      	cmp	r3, #0
 8047498:	d10b      	bne.n	80474b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804749a:	2300      	movs	r3, #0
 804749c:	617b      	str	r3, [r7, #20]
 804749e:	68fb      	ldr	r3, [r7, #12]
 80474a0:	681b      	ldr	r3, [r3, #0]
 80474a2:	68db      	ldr	r3, [r3, #12]
 80474a4:	617b      	str	r3, [r7, #20]
 80474a6:	68fb      	ldr	r3, [r7, #12]
 80474a8:	681b      	ldr	r3, [r3, #0]
 80474aa:	689b      	ldr	r3, [r3, #8]
 80474ac:	617b      	str	r3, [r7, #20]
 80474ae:	697b      	ldr	r3, [r7, #20]
 80474b0:	e000      	b.n	80474b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80474b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80474b4:	68fb      	ldr	r3, [r7, #12]
 80474b6:	2201      	movs	r2, #1
 80474b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80474bc:	68fb      	ldr	r3, [r7, #12]
 80474be:	2200      	movs	r2, #0
 80474c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80474c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80474c8:	4618      	mov	r0, r3
 80474ca:	3730      	adds	r7, #48	; 0x30
 80474cc:	46bd      	mov	sp, r7
 80474ce:	bd80      	pop	{r7, pc}

080474d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80474d0:	b580      	push	{r7, lr}
 80474d2:	b088      	sub	sp, #32
 80474d4:	af00      	add	r7, sp, #0
 80474d6:	60f8      	str	r0, [r7, #12]
 80474d8:	60b9      	str	r1, [r7, #8]
 80474da:	603b      	str	r3, [r7, #0]
 80474dc:	4613      	mov	r3, r2
 80474de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80474e0:	f7fd fc7e 	bl	8044de0 <HAL_GetTick>
 80474e4:	4602      	mov	r2, r0
 80474e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80474e8:	1a9b      	subs	r3, r3, r2
 80474ea:	683a      	ldr	r2, [r7, #0]
 80474ec:	4413      	add	r3, r2
 80474ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80474f0:	f7fd fc76 	bl	8044de0 <HAL_GetTick>
 80474f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80474f6:	4b39      	ldr	r3, [pc, #228]	; (80475dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80474f8:	681b      	ldr	r3, [r3, #0]
 80474fa:	015b      	lsls	r3, r3, #5
 80474fc:	0d1b      	lsrs	r3, r3, #20
 80474fe:	69fa      	ldr	r2, [r7, #28]
 8047500:	fb02 f303 	mul.w	r3, r2, r3
 8047504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047506:	e054      	b.n	80475b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8047508:	683b      	ldr	r3, [r7, #0]
 804750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804750e:	d050      	beq.n	80475b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8047510:	f7fd fc66 	bl	8044de0 <HAL_GetTick>
 8047514:	4602      	mov	r2, r0
 8047516:	69bb      	ldr	r3, [r7, #24]
 8047518:	1ad3      	subs	r3, r2, r3
 804751a:	69fa      	ldr	r2, [r7, #28]
 804751c:	429a      	cmp	r2, r3
 804751e:	d902      	bls.n	8047526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8047520:	69fb      	ldr	r3, [r7, #28]
 8047522:	2b00      	cmp	r3, #0
 8047524:	d13d      	bne.n	80475a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8047526:	68fb      	ldr	r3, [r7, #12]
 8047528:	681b      	ldr	r3, [r3, #0]
 804752a:	685a      	ldr	r2, [r3, #4]
 804752c:	68fb      	ldr	r3, [r7, #12]
 804752e:	681b      	ldr	r3, [r3, #0]
 8047530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8047534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047536:	68fb      	ldr	r3, [r7, #12]
 8047538:	685b      	ldr	r3, [r3, #4]
 804753a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804753e:	d111      	bne.n	8047564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8047540:	68fb      	ldr	r3, [r7, #12]
 8047542:	689b      	ldr	r3, [r3, #8]
 8047544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047548:	d004      	beq.n	8047554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804754a:	68fb      	ldr	r3, [r7, #12]
 804754c:	689b      	ldr	r3, [r3, #8]
 804754e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047552:	d107      	bne.n	8047564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8047554:	68fb      	ldr	r3, [r7, #12]
 8047556:	681b      	ldr	r3, [r3, #0]
 8047558:	681a      	ldr	r2, [r3, #0]
 804755a:	68fb      	ldr	r3, [r7, #12]
 804755c:	681b      	ldr	r3, [r3, #0]
 804755e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8047564:	68fb      	ldr	r3, [r7, #12]
 8047566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804756c:	d10f      	bne.n	804758e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 804756e:	68fb      	ldr	r3, [r7, #12]
 8047570:	681b      	ldr	r3, [r3, #0]
 8047572:	681a      	ldr	r2, [r3, #0]
 8047574:	68fb      	ldr	r3, [r7, #12]
 8047576:	681b      	ldr	r3, [r3, #0]
 8047578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804757c:	601a      	str	r2, [r3, #0]
 804757e:	68fb      	ldr	r3, [r7, #12]
 8047580:	681b      	ldr	r3, [r3, #0]
 8047582:	681a      	ldr	r2, [r3, #0]
 8047584:	68fb      	ldr	r3, [r7, #12]
 8047586:	681b      	ldr	r3, [r3, #0]
 8047588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804758c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 804758e:	68fb      	ldr	r3, [r7, #12]
 8047590:	2201      	movs	r2, #1
 8047592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8047596:	68fb      	ldr	r3, [r7, #12]
 8047598:	2200      	movs	r2, #0
 804759a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 804759e:	2303      	movs	r3, #3
 80475a0:	e017      	b.n	80475d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80475a2:	697b      	ldr	r3, [r7, #20]
 80475a4:	2b00      	cmp	r3, #0
 80475a6:	d101      	bne.n	80475ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80475a8:	2300      	movs	r3, #0
 80475aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80475ac:	697b      	ldr	r3, [r7, #20]
 80475ae:	3b01      	subs	r3, #1
 80475b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80475b2:	68fb      	ldr	r3, [r7, #12]
 80475b4:	681b      	ldr	r3, [r3, #0]
 80475b6:	689a      	ldr	r2, [r3, #8]
 80475b8:	68bb      	ldr	r3, [r7, #8]
 80475ba:	4013      	ands	r3, r2
 80475bc:	68ba      	ldr	r2, [r7, #8]
 80475be:	429a      	cmp	r2, r3
 80475c0:	bf0c      	ite	eq
 80475c2:	2301      	moveq	r3, #1
 80475c4:	2300      	movne	r3, #0
 80475c6:	b2db      	uxtb	r3, r3
 80475c8:	461a      	mov	r2, r3
 80475ca:	79fb      	ldrb	r3, [r7, #7]
 80475cc:	429a      	cmp	r2, r3
 80475ce:	d19b      	bne.n	8047508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80475d0:	2300      	movs	r3, #0
}
 80475d2:	4618      	mov	r0, r3
 80475d4:	3720      	adds	r7, #32
 80475d6:	46bd      	mov	sp, r7
 80475d8:	bd80      	pop	{r7, pc}
 80475da:	bf00      	nop
 80475dc:	20000008 	.word	0x20000008

080475e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80475e0:	b580      	push	{r7, lr}
 80475e2:	b086      	sub	sp, #24
 80475e4:	af02      	add	r7, sp, #8
 80475e6:	60f8      	str	r0, [r7, #12]
 80475e8:	60b9      	str	r1, [r7, #8]
 80475ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80475ec:	68fb      	ldr	r3, [r7, #12]
 80475ee:	685b      	ldr	r3, [r3, #4]
 80475f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80475f4:	d111      	bne.n	804761a <SPI_EndRxTransaction+0x3a>
 80475f6:	68fb      	ldr	r3, [r7, #12]
 80475f8:	689b      	ldr	r3, [r3, #8]
 80475fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80475fe:	d004      	beq.n	804760a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047600:	68fb      	ldr	r3, [r7, #12]
 8047602:	689b      	ldr	r3, [r3, #8]
 8047604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047608:	d107      	bne.n	804761a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 804760a:	68fb      	ldr	r3, [r7, #12]
 804760c:	681b      	ldr	r3, [r3, #0]
 804760e:	681a      	ldr	r2, [r3, #0]
 8047610:	68fb      	ldr	r3, [r7, #12]
 8047612:	681b      	ldr	r3, [r3, #0]
 8047614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047618:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804761a:	68fb      	ldr	r3, [r7, #12]
 804761c:	685b      	ldr	r3, [r3, #4]
 804761e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047622:	d12a      	bne.n	804767a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8047624:	68fb      	ldr	r3, [r7, #12]
 8047626:	689b      	ldr	r3, [r3, #8]
 8047628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804762c:	d012      	beq.n	8047654 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804762e:	687b      	ldr	r3, [r7, #4]
 8047630:	9300      	str	r3, [sp, #0]
 8047632:	68bb      	ldr	r3, [r7, #8]
 8047634:	2200      	movs	r2, #0
 8047636:	2180      	movs	r1, #128	; 0x80
 8047638:	68f8      	ldr	r0, [r7, #12]
 804763a:	f7ff ff49 	bl	80474d0 <SPI_WaitFlagStateUntilTimeout>
 804763e:	4603      	mov	r3, r0
 8047640:	2b00      	cmp	r3, #0
 8047642:	d02d      	beq.n	80476a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047644:	68fb      	ldr	r3, [r7, #12]
 8047646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047648:	f043 0220 	orr.w	r2, r3, #32
 804764c:	68fb      	ldr	r3, [r7, #12]
 804764e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047650:	2303      	movs	r3, #3
 8047652:	e026      	b.n	80476a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047654:	687b      	ldr	r3, [r7, #4]
 8047656:	9300      	str	r3, [sp, #0]
 8047658:	68bb      	ldr	r3, [r7, #8]
 804765a:	2200      	movs	r2, #0
 804765c:	2101      	movs	r1, #1
 804765e:	68f8      	ldr	r0, [r7, #12]
 8047660:	f7ff ff36 	bl	80474d0 <SPI_WaitFlagStateUntilTimeout>
 8047664:	4603      	mov	r3, r0
 8047666:	2b00      	cmp	r3, #0
 8047668:	d01a      	beq.n	80476a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804766a:	68fb      	ldr	r3, [r7, #12]
 804766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804766e:	f043 0220 	orr.w	r2, r3, #32
 8047672:	68fb      	ldr	r3, [r7, #12]
 8047674:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047676:	2303      	movs	r3, #3
 8047678:	e013      	b.n	80476a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 804767a:	687b      	ldr	r3, [r7, #4]
 804767c:	9300      	str	r3, [sp, #0]
 804767e:	68bb      	ldr	r3, [r7, #8]
 8047680:	2200      	movs	r2, #0
 8047682:	2101      	movs	r1, #1
 8047684:	68f8      	ldr	r0, [r7, #12]
 8047686:	f7ff ff23 	bl	80474d0 <SPI_WaitFlagStateUntilTimeout>
 804768a:	4603      	mov	r3, r0
 804768c:	2b00      	cmp	r3, #0
 804768e:	d007      	beq.n	80476a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047690:	68fb      	ldr	r3, [r7, #12]
 8047692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047694:	f043 0220 	orr.w	r2, r3, #32
 8047698:	68fb      	ldr	r3, [r7, #12]
 804769a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 804769c:	2303      	movs	r3, #3
 804769e:	e000      	b.n	80476a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80476a0:	2300      	movs	r3, #0
}
 80476a2:	4618      	mov	r0, r3
 80476a4:	3710      	adds	r7, #16
 80476a6:	46bd      	mov	sp, r7
 80476a8:	bd80      	pop	{r7, pc}
	...

080476ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80476ac:	b580      	push	{r7, lr}
 80476ae:	b088      	sub	sp, #32
 80476b0:	af02      	add	r7, sp, #8
 80476b2:	60f8      	str	r0, [r7, #12]
 80476b4:	60b9      	str	r1, [r7, #8]
 80476b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80476b8:	4b1b      	ldr	r3, [pc, #108]	; (8047728 <SPI_EndRxTxTransaction+0x7c>)
 80476ba:	681b      	ldr	r3, [r3, #0]
 80476bc:	4a1b      	ldr	r2, [pc, #108]	; (804772c <SPI_EndRxTxTransaction+0x80>)
 80476be:	fba2 2303 	umull	r2, r3, r2, r3
 80476c2:	0d5b      	lsrs	r3, r3, #21
 80476c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80476c8:	fb02 f303 	mul.w	r3, r2, r3
 80476cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80476ce:	68fb      	ldr	r3, [r7, #12]
 80476d0:	685b      	ldr	r3, [r3, #4]
 80476d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80476d6:	d112      	bne.n	80476fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80476d8:	687b      	ldr	r3, [r7, #4]
 80476da:	9300      	str	r3, [sp, #0]
 80476dc:	68bb      	ldr	r3, [r7, #8]
 80476de:	2200      	movs	r2, #0
 80476e0:	2180      	movs	r1, #128	; 0x80
 80476e2:	68f8      	ldr	r0, [r7, #12]
 80476e4:	f7ff fef4 	bl	80474d0 <SPI_WaitFlagStateUntilTimeout>
 80476e8:	4603      	mov	r3, r0
 80476ea:	2b00      	cmp	r3, #0
 80476ec:	d016      	beq.n	804771c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80476ee:	68fb      	ldr	r3, [r7, #12]
 80476f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80476f2:	f043 0220 	orr.w	r2, r3, #32
 80476f6:	68fb      	ldr	r3, [r7, #12]
 80476f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80476fa:	2303      	movs	r3, #3
 80476fc:	e00f      	b.n	804771e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80476fe:	697b      	ldr	r3, [r7, #20]
 8047700:	2b00      	cmp	r3, #0
 8047702:	d00a      	beq.n	804771a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8047704:	697b      	ldr	r3, [r7, #20]
 8047706:	3b01      	subs	r3, #1
 8047708:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804770a:	68fb      	ldr	r3, [r7, #12]
 804770c:	681b      	ldr	r3, [r3, #0]
 804770e:	689b      	ldr	r3, [r3, #8]
 8047710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047714:	2b80      	cmp	r3, #128	; 0x80
 8047716:	d0f2      	beq.n	80476fe <SPI_EndRxTxTransaction+0x52>
 8047718:	e000      	b.n	804771c <SPI_EndRxTxTransaction+0x70>
        break;
 804771a:	bf00      	nop
  }

  return HAL_OK;
 804771c:	2300      	movs	r3, #0
}
 804771e:	4618      	mov	r0, r3
 8047720:	3718      	adds	r7, #24
 8047722:	46bd      	mov	sp, r7
 8047724:	bd80      	pop	{r7, pc}
 8047726:	bf00      	nop
 8047728:	20000008 	.word	0x20000008
 804772c:	165e9f81 	.word	0x165e9f81

08047730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8047730:	b580      	push	{r7, lr}
 8047732:	b082      	sub	sp, #8
 8047734:	af00      	add	r7, sp, #0
 8047736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047738:	687b      	ldr	r3, [r7, #4]
 804773a:	2b00      	cmp	r3, #0
 804773c:	d101      	bne.n	8047742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804773e:	2301      	movs	r3, #1
 8047740:	e041      	b.n	80477c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047742:	687b      	ldr	r3, [r7, #4]
 8047744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047748:	b2db      	uxtb	r3, r3
 804774a:	2b00      	cmp	r3, #0
 804774c:	d106      	bne.n	804775c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804774e:	687b      	ldr	r3, [r7, #4]
 8047750:	2200      	movs	r2, #0
 8047752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8047756:	6878      	ldr	r0, [r7, #4]
 8047758:	f7fd f85e 	bl	8044818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804775c:	687b      	ldr	r3, [r7, #4]
 804775e:	2202      	movs	r2, #2
 8047760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047764:	687b      	ldr	r3, [r7, #4]
 8047766:	681a      	ldr	r2, [r3, #0]
 8047768:	687b      	ldr	r3, [r7, #4]
 804776a:	3304      	adds	r3, #4
 804776c:	4619      	mov	r1, r3
 804776e:	4610      	mov	r0, r2
 8047770:	f000 fe28 	bl	80483c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047774:	687b      	ldr	r3, [r7, #4]
 8047776:	2201      	movs	r2, #1
 8047778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804777c:	687b      	ldr	r3, [r7, #4]
 804777e:	2201      	movs	r2, #1
 8047780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047784:	687b      	ldr	r3, [r7, #4]
 8047786:	2201      	movs	r2, #1
 8047788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804778c:	687b      	ldr	r3, [r7, #4]
 804778e:	2201      	movs	r2, #1
 8047790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047794:	687b      	ldr	r3, [r7, #4]
 8047796:	2201      	movs	r2, #1
 8047798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804779c:	687b      	ldr	r3, [r7, #4]
 804779e:	2201      	movs	r2, #1
 80477a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80477a4:	687b      	ldr	r3, [r7, #4]
 80477a6:	2201      	movs	r2, #1
 80477a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80477ac:	687b      	ldr	r3, [r7, #4]
 80477ae:	2201      	movs	r2, #1
 80477b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80477b4:	687b      	ldr	r3, [r7, #4]
 80477b6:	2201      	movs	r2, #1
 80477b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80477bc:	687b      	ldr	r3, [r7, #4]
 80477be:	2201      	movs	r2, #1
 80477c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80477c4:	2300      	movs	r3, #0
}
 80477c6:	4618      	mov	r0, r3
 80477c8:	3708      	adds	r7, #8
 80477ca:	46bd      	mov	sp, r7
 80477cc:	bd80      	pop	{r7, pc}
	...

080477d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80477d0:	b480      	push	{r7}
 80477d2:	b085      	sub	sp, #20
 80477d4:	af00      	add	r7, sp, #0
 80477d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80477d8:	687b      	ldr	r3, [r7, #4]
 80477da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80477de:	b2db      	uxtb	r3, r3
 80477e0:	2b01      	cmp	r3, #1
 80477e2:	d001      	beq.n	80477e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80477e4:	2301      	movs	r3, #1
 80477e6:	e04e      	b.n	8047886 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80477e8:	687b      	ldr	r3, [r7, #4]
 80477ea:	2202      	movs	r2, #2
 80477ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80477f0:	687b      	ldr	r3, [r7, #4]
 80477f2:	681b      	ldr	r3, [r3, #0]
 80477f4:	68da      	ldr	r2, [r3, #12]
 80477f6:	687b      	ldr	r3, [r7, #4]
 80477f8:	681b      	ldr	r3, [r3, #0]
 80477fa:	f042 0201 	orr.w	r2, r2, #1
 80477fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047800:	687b      	ldr	r3, [r7, #4]
 8047802:	681b      	ldr	r3, [r3, #0]
 8047804:	4a23      	ldr	r2, [pc, #140]	; (8047894 <HAL_TIM_Base_Start_IT+0xc4>)
 8047806:	4293      	cmp	r3, r2
 8047808:	d022      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 804780a:	687b      	ldr	r3, [r7, #4]
 804780c:	681b      	ldr	r3, [r3, #0]
 804780e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047812:	d01d      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 8047814:	687b      	ldr	r3, [r7, #4]
 8047816:	681b      	ldr	r3, [r3, #0]
 8047818:	4a1f      	ldr	r2, [pc, #124]	; (8047898 <HAL_TIM_Base_Start_IT+0xc8>)
 804781a:	4293      	cmp	r3, r2
 804781c:	d018      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 804781e:	687b      	ldr	r3, [r7, #4]
 8047820:	681b      	ldr	r3, [r3, #0]
 8047822:	4a1e      	ldr	r2, [pc, #120]	; (804789c <HAL_TIM_Base_Start_IT+0xcc>)
 8047824:	4293      	cmp	r3, r2
 8047826:	d013      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 8047828:	687b      	ldr	r3, [r7, #4]
 804782a:	681b      	ldr	r3, [r3, #0]
 804782c:	4a1c      	ldr	r2, [pc, #112]	; (80478a0 <HAL_TIM_Base_Start_IT+0xd0>)
 804782e:	4293      	cmp	r3, r2
 8047830:	d00e      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 8047832:	687b      	ldr	r3, [r7, #4]
 8047834:	681b      	ldr	r3, [r3, #0]
 8047836:	4a1b      	ldr	r2, [pc, #108]	; (80478a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8047838:	4293      	cmp	r3, r2
 804783a:	d009      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 804783c:	687b      	ldr	r3, [r7, #4]
 804783e:	681b      	ldr	r3, [r3, #0]
 8047840:	4a19      	ldr	r2, [pc, #100]	; (80478a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8047842:	4293      	cmp	r3, r2
 8047844:	d004      	beq.n	8047850 <HAL_TIM_Base_Start_IT+0x80>
 8047846:	687b      	ldr	r3, [r7, #4]
 8047848:	681b      	ldr	r3, [r3, #0]
 804784a:	4a18      	ldr	r2, [pc, #96]	; (80478ac <HAL_TIM_Base_Start_IT+0xdc>)
 804784c:	4293      	cmp	r3, r2
 804784e:	d111      	bne.n	8047874 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047850:	687b      	ldr	r3, [r7, #4]
 8047852:	681b      	ldr	r3, [r3, #0]
 8047854:	689b      	ldr	r3, [r3, #8]
 8047856:	f003 0307 	and.w	r3, r3, #7
 804785a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804785c:	68fb      	ldr	r3, [r7, #12]
 804785e:	2b06      	cmp	r3, #6
 8047860:	d010      	beq.n	8047884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8047862:	687b      	ldr	r3, [r7, #4]
 8047864:	681b      	ldr	r3, [r3, #0]
 8047866:	681a      	ldr	r2, [r3, #0]
 8047868:	687b      	ldr	r3, [r7, #4]
 804786a:	681b      	ldr	r3, [r3, #0]
 804786c:	f042 0201 	orr.w	r2, r2, #1
 8047870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047872:	e007      	b.n	8047884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047874:	687b      	ldr	r3, [r7, #4]
 8047876:	681b      	ldr	r3, [r3, #0]
 8047878:	681a      	ldr	r2, [r3, #0]
 804787a:	687b      	ldr	r3, [r7, #4]
 804787c:	681b      	ldr	r3, [r3, #0]
 804787e:	f042 0201 	orr.w	r2, r2, #1
 8047882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8047884:	2300      	movs	r3, #0
}
 8047886:	4618      	mov	r0, r3
 8047888:	3714      	adds	r7, #20
 804788a:	46bd      	mov	sp, r7
 804788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047890:	4770      	bx	lr
 8047892:	bf00      	nop
 8047894:	40010000 	.word	0x40010000
 8047898:	40000400 	.word	0x40000400
 804789c:	40000800 	.word	0x40000800
 80478a0:	40000c00 	.word	0x40000c00
 80478a4:	40010400 	.word	0x40010400
 80478a8:	40014000 	.word	0x40014000
 80478ac:	40001800 	.word	0x40001800

080478b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80478b0:	b580      	push	{r7, lr}
 80478b2:	b082      	sub	sp, #8
 80478b4:	af00      	add	r7, sp, #0
 80478b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80478b8:	687b      	ldr	r3, [r7, #4]
 80478ba:	2b00      	cmp	r3, #0
 80478bc:	d101      	bne.n	80478c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80478be:	2301      	movs	r3, #1
 80478c0:	e041      	b.n	8047946 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80478c2:	687b      	ldr	r3, [r7, #4]
 80478c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80478c8:	b2db      	uxtb	r3, r3
 80478ca:	2b00      	cmp	r3, #0
 80478cc:	d106      	bne.n	80478dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80478ce:	687b      	ldr	r3, [r7, #4]
 80478d0:	2200      	movs	r2, #0
 80478d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80478d6:	6878      	ldr	r0, [r7, #4]
 80478d8:	f000 f839 	bl	804794e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80478dc:	687b      	ldr	r3, [r7, #4]
 80478de:	2202      	movs	r2, #2
 80478e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80478e4:	687b      	ldr	r3, [r7, #4]
 80478e6:	681a      	ldr	r2, [r3, #0]
 80478e8:	687b      	ldr	r3, [r7, #4]
 80478ea:	3304      	adds	r3, #4
 80478ec:	4619      	mov	r1, r3
 80478ee:	4610      	mov	r0, r2
 80478f0:	f000 fd68 	bl	80483c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80478f4:	687b      	ldr	r3, [r7, #4]
 80478f6:	2201      	movs	r2, #1
 80478f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80478fc:	687b      	ldr	r3, [r7, #4]
 80478fe:	2201      	movs	r2, #1
 8047900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047904:	687b      	ldr	r3, [r7, #4]
 8047906:	2201      	movs	r2, #1
 8047908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804790c:	687b      	ldr	r3, [r7, #4]
 804790e:	2201      	movs	r2, #1
 8047910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047914:	687b      	ldr	r3, [r7, #4]
 8047916:	2201      	movs	r2, #1
 8047918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804791c:	687b      	ldr	r3, [r7, #4]
 804791e:	2201      	movs	r2, #1
 8047920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047924:	687b      	ldr	r3, [r7, #4]
 8047926:	2201      	movs	r2, #1
 8047928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 804792c:	687b      	ldr	r3, [r7, #4]
 804792e:	2201      	movs	r2, #1
 8047930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8047934:	687b      	ldr	r3, [r7, #4]
 8047936:	2201      	movs	r2, #1
 8047938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804793c:	687b      	ldr	r3, [r7, #4]
 804793e:	2201      	movs	r2, #1
 8047940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8047944:	2300      	movs	r3, #0
}
 8047946:	4618      	mov	r0, r3
 8047948:	3708      	adds	r7, #8
 804794a:	46bd      	mov	sp, r7
 804794c:	bd80      	pop	{r7, pc}

0804794e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 804794e:	b480      	push	{r7}
 8047950:	b083      	sub	sp, #12
 8047952:	af00      	add	r7, sp, #0
 8047954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8047956:	bf00      	nop
 8047958:	370c      	adds	r7, #12
 804795a:	46bd      	mov	sp, r7
 804795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047960:	4770      	bx	lr
	...

08047964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8047964:	b580      	push	{r7, lr}
 8047966:	b084      	sub	sp, #16
 8047968:	af00      	add	r7, sp, #0
 804796a:	6078      	str	r0, [r7, #4]
 804796c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 804796e:	683b      	ldr	r3, [r7, #0]
 8047970:	2b00      	cmp	r3, #0
 8047972:	d109      	bne.n	8047988 <HAL_TIM_PWM_Start+0x24>
 8047974:	687b      	ldr	r3, [r7, #4]
 8047976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 804797a:	b2db      	uxtb	r3, r3
 804797c:	2b01      	cmp	r3, #1
 804797e:	bf14      	ite	ne
 8047980:	2301      	movne	r3, #1
 8047982:	2300      	moveq	r3, #0
 8047984:	b2db      	uxtb	r3, r3
 8047986:	e022      	b.n	80479ce <HAL_TIM_PWM_Start+0x6a>
 8047988:	683b      	ldr	r3, [r7, #0]
 804798a:	2b04      	cmp	r3, #4
 804798c:	d109      	bne.n	80479a2 <HAL_TIM_PWM_Start+0x3e>
 804798e:	687b      	ldr	r3, [r7, #4]
 8047990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8047994:	b2db      	uxtb	r3, r3
 8047996:	2b01      	cmp	r3, #1
 8047998:	bf14      	ite	ne
 804799a:	2301      	movne	r3, #1
 804799c:	2300      	moveq	r3, #0
 804799e:	b2db      	uxtb	r3, r3
 80479a0:	e015      	b.n	80479ce <HAL_TIM_PWM_Start+0x6a>
 80479a2:	683b      	ldr	r3, [r7, #0]
 80479a4:	2b08      	cmp	r3, #8
 80479a6:	d109      	bne.n	80479bc <HAL_TIM_PWM_Start+0x58>
 80479a8:	687b      	ldr	r3, [r7, #4]
 80479aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80479ae:	b2db      	uxtb	r3, r3
 80479b0:	2b01      	cmp	r3, #1
 80479b2:	bf14      	ite	ne
 80479b4:	2301      	movne	r3, #1
 80479b6:	2300      	moveq	r3, #0
 80479b8:	b2db      	uxtb	r3, r3
 80479ba:	e008      	b.n	80479ce <HAL_TIM_PWM_Start+0x6a>
 80479bc:	687b      	ldr	r3, [r7, #4]
 80479be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80479c2:	b2db      	uxtb	r3, r3
 80479c4:	2b01      	cmp	r3, #1
 80479c6:	bf14      	ite	ne
 80479c8:	2301      	movne	r3, #1
 80479ca:	2300      	moveq	r3, #0
 80479cc:	b2db      	uxtb	r3, r3
 80479ce:	2b00      	cmp	r3, #0
 80479d0:	d001      	beq.n	80479d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80479d2:	2301      	movs	r3, #1
 80479d4:	e07c      	b.n	8047ad0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80479d6:	683b      	ldr	r3, [r7, #0]
 80479d8:	2b00      	cmp	r3, #0
 80479da:	d104      	bne.n	80479e6 <HAL_TIM_PWM_Start+0x82>
 80479dc:	687b      	ldr	r3, [r7, #4]
 80479de:	2202      	movs	r2, #2
 80479e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80479e4:	e013      	b.n	8047a0e <HAL_TIM_PWM_Start+0xaa>
 80479e6:	683b      	ldr	r3, [r7, #0]
 80479e8:	2b04      	cmp	r3, #4
 80479ea:	d104      	bne.n	80479f6 <HAL_TIM_PWM_Start+0x92>
 80479ec:	687b      	ldr	r3, [r7, #4]
 80479ee:	2202      	movs	r2, #2
 80479f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80479f4:	e00b      	b.n	8047a0e <HAL_TIM_PWM_Start+0xaa>
 80479f6:	683b      	ldr	r3, [r7, #0]
 80479f8:	2b08      	cmp	r3, #8
 80479fa:	d104      	bne.n	8047a06 <HAL_TIM_PWM_Start+0xa2>
 80479fc:	687b      	ldr	r3, [r7, #4]
 80479fe:	2202      	movs	r2, #2
 8047a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047a04:	e003      	b.n	8047a0e <HAL_TIM_PWM_Start+0xaa>
 8047a06:	687b      	ldr	r3, [r7, #4]
 8047a08:	2202      	movs	r2, #2
 8047a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8047a0e:	687b      	ldr	r3, [r7, #4]
 8047a10:	681b      	ldr	r3, [r3, #0]
 8047a12:	2201      	movs	r2, #1
 8047a14:	6839      	ldr	r1, [r7, #0]
 8047a16:	4618      	mov	r0, r3
 8047a18:	f000 ffbe 	bl	8048998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8047a1c:	687b      	ldr	r3, [r7, #4]
 8047a1e:	681b      	ldr	r3, [r3, #0]
 8047a20:	4a2d      	ldr	r2, [pc, #180]	; (8047ad8 <HAL_TIM_PWM_Start+0x174>)
 8047a22:	4293      	cmp	r3, r2
 8047a24:	d004      	beq.n	8047a30 <HAL_TIM_PWM_Start+0xcc>
 8047a26:	687b      	ldr	r3, [r7, #4]
 8047a28:	681b      	ldr	r3, [r3, #0]
 8047a2a:	4a2c      	ldr	r2, [pc, #176]	; (8047adc <HAL_TIM_PWM_Start+0x178>)
 8047a2c:	4293      	cmp	r3, r2
 8047a2e:	d101      	bne.n	8047a34 <HAL_TIM_PWM_Start+0xd0>
 8047a30:	2301      	movs	r3, #1
 8047a32:	e000      	b.n	8047a36 <HAL_TIM_PWM_Start+0xd2>
 8047a34:	2300      	movs	r3, #0
 8047a36:	2b00      	cmp	r3, #0
 8047a38:	d007      	beq.n	8047a4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8047a3a:	687b      	ldr	r3, [r7, #4]
 8047a3c:	681b      	ldr	r3, [r3, #0]
 8047a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8047a40:	687b      	ldr	r3, [r7, #4]
 8047a42:	681b      	ldr	r3, [r3, #0]
 8047a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8047a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047a4a:	687b      	ldr	r3, [r7, #4]
 8047a4c:	681b      	ldr	r3, [r3, #0]
 8047a4e:	4a22      	ldr	r2, [pc, #136]	; (8047ad8 <HAL_TIM_PWM_Start+0x174>)
 8047a50:	4293      	cmp	r3, r2
 8047a52:	d022      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a54:	687b      	ldr	r3, [r7, #4]
 8047a56:	681b      	ldr	r3, [r3, #0]
 8047a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047a5c:	d01d      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a5e:	687b      	ldr	r3, [r7, #4]
 8047a60:	681b      	ldr	r3, [r3, #0]
 8047a62:	4a1f      	ldr	r2, [pc, #124]	; (8047ae0 <HAL_TIM_PWM_Start+0x17c>)
 8047a64:	4293      	cmp	r3, r2
 8047a66:	d018      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a68:	687b      	ldr	r3, [r7, #4]
 8047a6a:	681b      	ldr	r3, [r3, #0]
 8047a6c:	4a1d      	ldr	r2, [pc, #116]	; (8047ae4 <HAL_TIM_PWM_Start+0x180>)
 8047a6e:	4293      	cmp	r3, r2
 8047a70:	d013      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a72:	687b      	ldr	r3, [r7, #4]
 8047a74:	681b      	ldr	r3, [r3, #0]
 8047a76:	4a1c      	ldr	r2, [pc, #112]	; (8047ae8 <HAL_TIM_PWM_Start+0x184>)
 8047a78:	4293      	cmp	r3, r2
 8047a7a:	d00e      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a7c:	687b      	ldr	r3, [r7, #4]
 8047a7e:	681b      	ldr	r3, [r3, #0]
 8047a80:	4a16      	ldr	r2, [pc, #88]	; (8047adc <HAL_TIM_PWM_Start+0x178>)
 8047a82:	4293      	cmp	r3, r2
 8047a84:	d009      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a86:	687b      	ldr	r3, [r7, #4]
 8047a88:	681b      	ldr	r3, [r3, #0]
 8047a8a:	4a18      	ldr	r2, [pc, #96]	; (8047aec <HAL_TIM_PWM_Start+0x188>)
 8047a8c:	4293      	cmp	r3, r2
 8047a8e:	d004      	beq.n	8047a9a <HAL_TIM_PWM_Start+0x136>
 8047a90:	687b      	ldr	r3, [r7, #4]
 8047a92:	681b      	ldr	r3, [r3, #0]
 8047a94:	4a16      	ldr	r2, [pc, #88]	; (8047af0 <HAL_TIM_PWM_Start+0x18c>)
 8047a96:	4293      	cmp	r3, r2
 8047a98:	d111      	bne.n	8047abe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047a9a:	687b      	ldr	r3, [r7, #4]
 8047a9c:	681b      	ldr	r3, [r3, #0]
 8047a9e:	689b      	ldr	r3, [r3, #8]
 8047aa0:	f003 0307 	and.w	r3, r3, #7
 8047aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047aa6:	68fb      	ldr	r3, [r7, #12]
 8047aa8:	2b06      	cmp	r3, #6
 8047aaa:	d010      	beq.n	8047ace <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8047aac:	687b      	ldr	r3, [r7, #4]
 8047aae:	681b      	ldr	r3, [r3, #0]
 8047ab0:	681a      	ldr	r2, [r3, #0]
 8047ab2:	687b      	ldr	r3, [r7, #4]
 8047ab4:	681b      	ldr	r3, [r3, #0]
 8047ab6:	f042 0201 	orr.w	r2, r2, #1
 8047aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047abc:	e007      	b.n	8047ace <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047abe:	687b      	ldr	r3, [r7, #4]
 8047ac0:	681b      	ldr	r3, [r3, #0]
 8047ac2:	681a      	ldr	r2, [r3, #0]
 8047ac4:	687b      	ldr	r3, [r7, #4]
 8047ac6:	681b      	ldr	r3, [r3, #0]
 8047ac8:	f042 0201 	orr.w	r2, r2, #1
 8047acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8047ace:	2300      	movs	r3, #0
}
 8047ad0:	4618      	mov	r0, r3
 8047ad2:	3710      	adds	r7, #16
 8047ad4:	46bd      	mov	sp, r7
 8047ad6:	bd80      	pop	{r7, pc}
 8047ad8:	40010000 	.word	0x40010000
 8047adc:	40010400 	.word	0x40010400
 8047ae0:	40000400 	.word	0x40000400
 8047ae4:	40000800 	.word	0x40000800
 8047ae8:	40000c00 	.word	0x40000c00
 8047aec:	40014000 	.word	0x40014000
 8047af0:	40001800 	.word	0x40001800

08047af4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8047af4:	b580      	push	{r7, lr}
 8047af6:	b082      	sub	sp, #8
 8047af8:	af00      	add	r7, sp, #0
 8047afa:	6078      	str	r0, [r7, #4]
 8047afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8047afe:	687b      	ldr	r3, [r7, #4]
 8047b00:	681b      	ldr	r3, [r3, #0]
 8047b02:	2200      	movs	r2, #0
 8047b04:	6839      	ldr	r1, [r7, #0]
 8047b06:	4618      	mov	r0, r3
 8047b08:	f000 ff46 	bl	8048998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8047b0c:	687b      	ldr	r3, [r7, #4]
 8047b0e:	681b      	ldr	r3, [r3, #0]
 8047b10:	4a2e      	ldr	r2, [pc, #184]	; (8047bcc <HAL_TIM_PWM_Stop+0xd8>)
 8047b12:	4293      	cmp	r3, r2
 8047b14:	d004      	beq.n	8047b20 <HAL_TIM_PWM_Stop+0x2c>
 8047b16:	687b      	ldr	r3, [r7, #4]
 8047b18:	681b      	ldr	r3, [r3, #0]
 8047b1a:	4a2d      	ldr	r2, [pc, #180]	; (8047bd0 <HAL_TIM_PWM_Stop+0xdc>)
 8047b1c:	4293      	cmp	r3, r2
 8047b1e:	d101      	bne.n	8047b24 <HAL_TIM_PWM_Stop+0x30>
 8047b20:	2301      	movs	r3, #1
 8047b22:	e000      	b.n	8047b26 <HAL_TIM_PWM_Stop+0x32>
 8047b24:	2300      	movs	r3, #0
 8047b26:	2b00      	cmp	r3, #0
 8047b28:	d017      	beq.n	8047b5a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8047b2a:	687b      	ldr	r3, [r7, #4]
 8047b2c:	681b      	ldr	r3, [r3, #0]
 8047b2e:	6a1a      	ldr	r2, [r3, #32]
 8047b30:	f241 1311 	movw	r3, #4369	; 0x1111
 8047b34:	4013      	ands	r3, r2
 8047b36:	2b00      	cmp	r3, #0
 8047b38:	d10f      	bne.n	8047b5a <HAL_TIM_PWM_Stop+0x66>
 8047b3a:	687b      	ldr	r3, [r7, #4]
 8047b3c:	681b      	ldr	r3, [r3, #0]
 8047b3e:	6a1a      	ldr	r2, [r3, #32]
 8047b40:	f240 4344 	movw	r3, #1092	; 0x444
 8047b44:	4013      	ands	r3, r2
 8047b46:	2b00      	cmp	r3, #0
 8047b48:	d107      	bne.n	8047b5a <HAL_TIM_PWM_Stop+0x66>
 8047b4a:	687b      	ldr	r3, [r7, #4]
 8047b4c:	681b      	ldr	r3, [r3, #0]
 8047b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8047b50:	687b      	ldr	r3, [r7, #4]
 8047b52:	681b      	ldr	r3, [r3, #0]
 8047b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8047b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8047b5a:	687b      	ldr	r3, [r7, #4]
 8047b5c:	681b      	ldr	r3, [r3, #0]
 8047b5e:	6a1a      	ldr	r2, [r3, #32]
 8047b60:	f241 1311 	movw	r3, #4369	; 0x1111
 8047b64:	4013      	ands	r3, r2
 8047b66:	2b00      	cmp	r3, #0
 8047b68:	d10f      	bne.n	8047b8a <HAL_TIM_PWM_Stop+0x96>
 8047b6a:	687b      	ldr	r3, [r7, #4]
 8047b6c:	681b      	ldr	r3, [r3, #0]
 8047b6e:	6a1a      	ldr	r2, [r3, #32]
 8047b70:	f240 4344 	movw	r3, #1092	; 0x444
 8047b74:	4013      	ands	r3, r2
 8047b76:	2b00      	cmp	r3, #0
 8047b78:	d107      	bne.n	8047b8a <HAL_TIM_PWM_Stop+0x96>
 8047b7a:	687b      	ldr	r3, [r7, #4]
 8047b7c:	681b      	ldr	r3, [r3, #0]
 8047b7e:	681a      	ldr	r2, [r3, #0]
 8047b80:	687b      	ldr	r3, [r7, #4]
 8047b82:	681b      	ldr	r3, [r3, #0]
 8047b84:	f022 0201 	bic.w	r2, r2, #1
 8047b88:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8047b8a:	683b      	ldr	r3, [r7, #0]
 8047b8c:	2b00      	cmp	r3, #0
 8047b8e:	d104      	bne.n	8047b9a <HAL_TIM_PWM_Stop+0xa6>
 8047b90:	687b      	ldr	r3, [r7, #4]
 8047b92:	2201      	movs	r2, #1
 8047b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047b98:	e013      	b.n	8047bc2 <HAL_TIM_PWM_Stop+0xce>
 8047b9a:	683b      	ldr	r3, [r7, #0]
 8047b9c:	2b04      	cmp	r3, #4
 8047b9e:	d104      	bne.n	8047baa <HAL_TIM_PWM_Stop+0xb6>
 8047ba0:	687b      	ldr	r3, [r7, #4]
 8047ba2:	2201      	movs	r2, #1
 8047ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047ba8:	e00b      	b.n	8047bc2 <HAL_TIM_PWM_Stop+0xce>
 8047baa:	683b      	ldr	r3, [r7, #0]
 8047bac:	2b08      	cmp	r3, #8
 8047bae:	d104      	bne.n	8047bba <HAL_TIM_PWM_Stop+0xc6>
 8047bb0:	687b      	ldr	r3, [r7, #4]
 8047bb2:	2201      	movs	r2, #1
 8047bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047bb8:	e003      	b.n	8047bc2 <HAL_TIM_PWM_Stop+0xce>
 8047bba:	687b      	ldr	r3, [r7, #4]
 8047bbc:	2201      	movs	r2, #1
 8047bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8047bc2:	2300      	movs	r3, #0
}
 8047bc4:	4618      	mov	r0, r3
 8047bc6:	3708      	adds	r7, #8
 8047bc8:	46bd      	mov	sp, r7
 8047bca:	bd80      	pop	{r7, pc}
 8047bcc:	40010000 	.word	0x40010000
 8047bd0:	40010400 	.word	0x40010400

08047bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8047bd4:	b580      	push	{r7, lr}
 8047bd6:	b086      	sub	sp, #24
 8047bd8:	af00      	add	r7, sp, #0
 8047bda:	6078      	str	r0, [r7, #4]
 8047bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047bde:	687b      	ldr	r3, [r7, #4]
 8047be0:	2b00      	cmp	r3, #0
 8047be2:	d101      	bne.n	8047be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8047be4:	2301      	movs	r3, #1
 8047be6:	e097      	b.n	8047d18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047be8:	687b      	ldr	r3, [r7, #4]
 8047bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047bee:	b2db      	uxtb	r3, r3
 8047bf0:	2b00      	cmp	r3, #0
 8047bf2:	d106      	bne.n	8047c02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047bf4:	687b      	ldr	r3, [r7, #4]
 8047bf6:	2200      	movs	r2, #0
 8047bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8047bfc:	6878      	ldr	r0, [r7, #4]
 8047bfe:	f7fc fdc3 	bl	8044788 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047c02:	687b      	ldr	r3, [r7, #4]
 8047c04:	2202      	movs	r2, #2
 8047c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8047c0a:	687b      	ldr	r3, [r7, #4]
 8047c0c:	681b      	ldr	r3, [r3, #0]
 8047c0e:	689b      	ldr	r3, [r3, #8]
 8047c10:	687a      	ldr	r2, [r7, #4]
 8047c12:	6812      	ldr	r2, [r2, #0]
 8047c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8047c18:	f023 0307 	bic.w	r3, r3, #7
 8047c1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047c1e:	687b      	ldr	r3, [r7, #4]
 8047c20:	681a      	ldr	r2, [r3, #0]
 8047c22:	687b      	ldr	r3, [r7, #4]
 8047c24:	3304      	adds	r3, #4
 8047c26:	4619      	mov	r1, r3
 8047c28:	4610      	mov	r0, r2
 8047c2a:	f000 fbcb 	bl	80483c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8047c2e:	687b      	ldr	r3, [r7, #4]
 8047c30:	681b      	ldr	r3, [r3, #0]
 8047c32:	689b      	ldr	r3, [r3, #8]
 8047c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8047c36:	687b      	ldr	r3, [r7, #4]
 8047c38:	681b      	ldr	r3, [r3, #0]
 8047c3a:	699b      	ldr	r3, [r3, #24]
 8047c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8047c3e:	687b      	ldr	r3, [r7, #4]
 8047c40:	681b      	ldr	r3, [r3, #0]
 8047c42:	6a1b      	ldr	r3, [r3, #32]
 8047c44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8047c46:	683b      	ldr	r3, [r7, #0]
 8047c48:	681b      	ldr	r3, [r3, #0]
 8047c4a:	697a      	ldr	r2, [r7, #20]
 8047c4c:	4313      	orrs	r3, r2
 8047c4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8047c50:	693b      	ldr	r3, [r7, #16]
 8047c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047c56:	f023 0303 	bic.w	r3, r3, #3
 8047c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8047c5c:	683b      	ldr	r3, [r7, #0]
 8047c5e:	689a      	ldr	r2, [r3, #8]
 8047c60:	683b      	ldr	r3, [r7, #0]
 8047c62:	699b      	ldr	r3, [r3, #24]
 8047c64:	021b      	lsls	r3, r3, #8
 8047c66:	4313      	orrs	r3, r2
 8047c68:	693a      	ldr	r2, [r7, #16]
 8047c6a:	4313      	orrs	r3, r2
 8047c6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8047c6e:	693b      	ldr	r3, [r7, #16]
 8047c70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8047c74:	f023 030c 	bic.w	r3, r3, #12
 8047c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8047c7a:	693b      	ldr	r3, [r7, #16]
 8047c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8047c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8047c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8047c86:	683b      	ldr	r3, [r7, #0]
 8047c88:	68da      	ldr	r2, [r3, #12]
 8047c8a:	683b      	ldr	r3, [r7, #0]
 8047c8c:	69db      	ldr	r3, [r3, #28]
 8047c8e:	021b      	lsls	r3, r3, #8
 8047c90:	4313      	orrs	r3, r2
 8047c92:	693a      	ldr	r2, [r7, #16]
 8047c94:	4313      	orrs	r3, r2
 8047c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8047c98:	683b      	ldr	r3, [r7, #0]
 8047c9a:	691b      	ldr	r3, [r3, #16]
 8047c9c:	011a      	lsls	r2, r3, #4
 8047c9e:	683b      	ldr	r3, [r7, #0]
 8047ca0:	6a1b      	ldr	r3, [r3, #32]
 8047ca2:	031b      	lsls	r3, r3, #12
 8047ca4:	4313      	orrs	r3, r2
 8047ca6:	693a      	ldr	r2, [r7, #16]
 8047ca8:	4313      	orrs	r3, r2
 8047caa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8047cac:	68fb      	ldr	r3, [r7, #12]
 8047cae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8047cb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8047cb4:	68fb      	ldr	r3, [r7, #12]
 8047cb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8047cba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8047cbc:	683b      	ldr	r3, [r7, #0]
 8047cbe:	685a      	ldr	r2, [r3, #4]
 8047cc0:	683b      	ldr	r3, [r7, #0]
 8047cc2:	695b      	ldr	r3, [r3, #20]
 8047cc4:	011b      	lsls	r3, r3, #4
 8047cc6:	4313      	orrs	r3, r2
 8047cc8:	68fa      	ldr	r2, [r7, #12]
 8047cca:	4313      	orrs	r3, r2
 8047ccc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8047cce:	687b      	ldr	r3, [r7, #4]
 8047cd0:	681b      	ldr	r3, [r3, #0]
 8047cd2:	697a      	ldr	r2, [r7, #20]
 8047cd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8047cd6:	687b      	ldr	r3, [r7, #4]
 8047cd8:	681b      	ldr	r3, [r3, #0]
 8047cda:	693a      	ldr	r2, [r7, #16]
 8047cdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8047cde:	687b      	ldr	r3, [r7, #4]
 8047ce0:	681b      	ldr	r3, [r3, #0]
 8047ce2:	68fa      	ldr	r2, [r7, #12]
 8047ce4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047ce6:	687b      	ldr	r3, [r7, #4]
 8047ce8:	2201      	movs	r2, #1
 8047cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8047cee:	687b      	ldr	r3, [r7, #4]
 8047cf0:	2201      	movs	r2, #1
 8047cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8047cf6:	687b      	ldr	r3, [r7, #4]
 8047cf8:	2201      	movs	r2, #1
 8047cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8047cfe:	687b      	ldr	r3, [r7, #4]
 8047d00:	2201      	movs	r2, #1
 8047d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8047d06:	687b      	ldr	r3, [r7, #4]
 8047d08:	2201      	movs	r2, #1
 8047d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8047d0e:	687b      	ldr	r3, [r7, #4]
 8047d10:	2201      	movs	r2, #1
 8047d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8047d16:	2300      	movs	r3, #0
}
 8047d18:	4618      	mov	r0, r3
 8047d1a:	3718      	adds	r7, #24
 8047d1c:	46bd      	mov	sp, r7
 8047d1e:	bd80      	pop	{r7, pc}

08047d20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8047d20:	b580      	push	{r7, lr}
 8047d22:	b084      	sub	sp, #16
 8047d24:	af00      	add	r7, sp, #0
 8047d26:	6078      	str	r0, [r7, #4]
 8047d28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8047d2a:	687b      	ldr	r3, [r7, #4]
 8047d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8047d30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8047d32:	687b      	ldr	r3, [r7, #4]
 8047d34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8047d38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8047d3a:	687b      	ldr	r3, [r7, #4]
 8047d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8047d40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8047d42:	687b      	ldr	r3, [r7, #4]
 8047d44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8047d48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8047d4a:	683b      	ldr	r3, [r7, #0]
 8047d4c:	2b00      	cmp	r3, #0
 8047d4e:	d110      	bne.n	8047d72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8047d50:	7bfb      	ldrb	r3, [r7, #15]
 8047d52:	2b01      	cmp	r3, #1
 8047d54:	d102      	bne.n	8047d5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8047d56:	7b7b      	ldrb	r3, [r7, #13]
 8047d58:	2b01      	cmp	r3, #1
 8047d5a:	d001      	beq.n	8047d60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8047d5c:	2301      	movs	r3, #1
 8047d5e:	e069      	b.n	8047e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047d60:	687b      	ldr	r3, [r7, #4]
 8047d62:	2202      	movs	r2, #2
 8047d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047d68:	687b      	ldr	r3, [r7, #4]
 8047d6a:	2202      	movs	r2, #2
 8047d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047d70:	e031      	b.n	8047dd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8047d72:	683b      	ldr	r3, [r7, #0]
 8047d74:	2b04      	cmp	r3, #4
 8047d76:	d110      	bne.n	8047d9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8047d78:	7bbb      	ldrb	r3, [r7, #14]
 8047d7a:	2b01      	cmp	r3, #1
 8047d7c:	d102      	bne.n	8047d84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8047d7e:	7b3b      	ldrb	r3, [r7, #12]
 8047d80:	2b01      	cmp	r3, #1
 8047d82:	d001      	beq.n	8047d88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8047d84:	2301      	movs	r3, #1
 8047d86:	e055      	b.n	8047e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047d88:	687b      	ldr	r3, [r7, #4]
 8047d8a:	2202      	movs	r2, #2
 8047d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047d90:	687b      	ldr	r3, [r7, #4]
 8047d92:	2202      	movs	r2, #2
 8047d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047d98:	e01d      	b.n	8047dd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8047d9a:	7bfb      	ldrb	r3, [r7, #15]
 8047d9c:	2b01      	cmp	r3, #1
 8047d9e:	d108      	bne.n	8047db2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8047da0:	7bbb      	ldrb	r3, [r7, #14]
 8047da2:	2b01      	cmp	r3, #1
 8047da4:	d105      	bne.n	8047db2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8047da6:	7b7b      	ldrb	r3, [r7, #13]
 8047da8:	2b01      	cmp	r3, #1
 8047daa:	d102      	bne.n	8047db2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8047dac:	7b3b      	ldrb	r3, [r7, #12]
 8047dae:	2b01      	cmp	r3, #1
 8047db0:	d001      	beq.n	8047db6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8047db2:	2301      	movs	r3, #1
 8047db4:	e03e      	b.n	8047e34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047db6:	687b      	ldr	r3, [r7, #4]
 8047db8:	2202      	movs	r2, #2
 8047dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047dbe:	687b      	ldr	r3, [r7, #4]
 8047dc0:	2202      	movs	r2, #2
 8047dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8047dc6:	687b      	ldr	r3, [r7, #4]
 8047dc8:	2202      	movs	r2, #2
 8047dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8047dce:	687b      	ldr	r3, [r7, #4]
 8047dd0:	2202      	movs	r2, #2
 8047dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8047dd6:	683b      	ldr	r3, [r7, #0]
 8047dd8:	2b00      	cmp	r3, #0
 8047dda:	d003      	beq.n	8047de4 <HAL_TIM_Encoder_Start+0xc4>
 8047ddc:	683b      	ldr	r3, [r7, #0]
 8047dde:	2b04      	cmp	r3, #4
 8047de0:	d008      	beq.n	8047df4 <HAL_TIM_Encoder_Start+0xd4>
 8047de2:	e00f      	b.n	8047e04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8047de4:	687b      	ldr	r3, [r7, #4]
 8047de6:	681b      	ldr	r3, [r3, #0]
 8047de8:	2201      	movs	r2, #1
 8047dea:	2100      	movs	r1, #0
 8047dec:	4618      	mov	r0, r3
 8047dee:	f000 fdd3 	bl	8048998 <TIM_CCxChannelCmd>
      break;
 8047df2:	e016      	b.n	8047e22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8047df4:	687b      	ldr	r3, [r7, #4]
 8047df6:	681b      	ldr	r3, [r3, #0]
 8047df8:	2201      	movs	r2, #1
 8047dfa:	2104      	movs	r1, #4
 8047dfc:	4618      	mov	r0, r3
 8047dfe:	f000 fdcb 	bl	8048998 <TIM_CCxChannelCmd>
      break;
 8047e02:	e00e      	b.n	8047e22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8047e04:	687b      	ldr	r3, [r7, #4]
 8047e06:	681b      	ldr	r3, [r3, #0]
 8047e08:	2201      	movs	r2, #1
 8047e0a:	2100      	movs	r1, #0
 8047e0c:	4618      	mov	r0, r3
 8047e0e:	f000 fdc3 	bl	8048998 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8047e12:	687b      	ldr	r3, [r7, #4]
 8047e14:	681b      	ldr	r3, [r3, #0]
 8047e16:	2201      	movs	r2, #1
 8047e18:	2104      	movs	r1, #4
 8047e1a:	4618      	mov	r0, r3
 8047e1c:	f000 fdbc 	bl	8048998 <TIM_CCxChannelCmd>
      break;
 8047e20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8047e22:	687b      	ldr	r3, [r7, #4]
 8047e24:	681b      	ldr	r3, [r3, #0]
 8047e26:	681a      	ldr	r2, [r3, #0]
 8047e28:	687b      	ldr	r3, [r7, #4]
 8047e2a:	681b      	ldr	r3, [r3, #0]
 8047e2c:	f042 0201 	orr.w	r2, r2, #1
 8047e30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8047e32:	2300      	movs	r3, #0
}
 8047e34:	4618      	mov	r0, r3
 8047e36:	3710      	adds	r7, #16
 8047e38:	46bd      	mov	sp, r7
 8047e3a:	bd80      	pop	{r7, pc}

08047e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8047e3c:	b580      	push	{r7, lr}
 8047e3e:	b082      	sub	sp, #8
 8047e40:	af00      	add	r7, sp, #0
 8047e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8047e44:	687b      	ldr	r3, [r7, #4]
 8047e46:	681b      	ldr	r3, [r3, #0]
 8047e48:	691b      	ldr	r3, [r3, #16]
 8047e4a:	f003 0302 	and.w	r3, r3, #2
 8047e4e:	2b02      	cmp	r3, #2
 8047e50:	d122      	bne.n	8047e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8047e52:	687b      	ldr	r3, [r7, #4]
 8047e54:	681b      	ldr	r3, [r3, #0]
 8047e56:	68db      	ldr	r3, [r3, #12]
 8047e58:	f003 0302 	and.w	r3, r3, #2
 8047e5c:	2b02      	cmp	r3, #2
 8047e5e:	d11b      	bne.n	8047e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8047e60:	687b      	ldr	r3, [r7, #4]
 8047e62:	681b      	ldr	r3, [r3, #0]
 8047e64:	f06f 0202 	mvn.w	r2, #2
 8047e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8047e6a:	687b      	ldr	r3, [r7, #4]
 8047e6c:	2201      	movs	r2, #1
 8047e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8047e70:	687b      	ldr	r3, [r7, #4]
 8047e72:	681b      	ldr	r3, [r3, #0]
 8047e74:	699b      	ldr	r3, [r3, #24]
 8047e76:	f003 0303 	and.w	r3, r3, #3
 8047e7a:	2b00      	cmp	r3, #0
 8047e7c:	d003      	beq.n	8047e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8047e7e:	6878      	ldr	r0, [r7, #4]
 8047e80:	f000 fa81 	bl	8048386 <HAL_TIM_IC_CaptureCallback>
 8047e84:	e005      	b.n	8047e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8047e86:	6878      	ldr	r0, [r7, #4]
 8047e88:	f000 fa73 	bl	8048372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047e8c:	6878      	ldr	r0, [r7, #4]
 8047e8e:	f000 fa84 	bl	804839a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047e92:	687b      	ldr	r3, [r7, #4]
 8047e94:	2200      	movs	r2, #0
 8047e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8047e98:	687b      	ldr	r3, [r7, #4]
 8047e9a:	681b      	ldr	r3, [r3, #0]
 8047e9c:	691b      	ldr	r3, [r3, #16]
 8047e9e:	f003 0304 	and.w	r3, r3, #4
 8047ea2:	2b04      	cmp	r3, #4
 8047ea4:	d122      	bne.n	8047eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8047ea6:	687b      	ldr	r3, [r7, #4]
 8047ea8:	681b      	ldr	r3, [r3, #0]
 8047eaa:	68db      	ldr	r3, [r3, #12]
 8047eac:	f003 0304 	and.w	r3, r3, #4
 8047eb0:	2b04      	cmp	r3, #4
 8047eb2:	d11b      	bne.n	8047eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8047eb4:	687b      	ldr	r3, [r7, #4]
 8047eb6:	681b      	ldr	r3, [r3, #0]
 8047eb8:	f06f 0204 	mvn.w	r2, #4
 8047ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8047ebe:	687b      	ldr	r3, [r7, #4]
 8047ec0:	2202      	movs	r2, #2
 8047ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8047ec4:	687b      	ldr	r3, [r7, #4]
 8047ec6:	681b      	ldr	r3, [r3, #0]
 8047ec8:	699b      	ldr	r3, [r3, #24]
 8047eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047ece:	2b00      	cmp	r3, #0
 8047ed0:	d003      	beq.n	8047eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047ed2:	6878      	ldr	r0, [r7, #4]
 8047ed4:	f000 fa57 	bl	8048386 <HAL_TIM_IC_CaptureCallback>
 8047ed8:	e005      	b.n	8047ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047eda:	6878      	ldr	r0, [r7, #4]
 8047edc:	f000 fa49 	bl	8048372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047ee0:	6878      	ldr	r0, [r7, #4]
 8047ee2:	f000 fa5a 	bl	804839a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047ee6:	687b      	ldr	r3, [r7, #4]
 8047ee8:	2200      	movs	r2, #0
 8047eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8047eec:	687b      	ldr	r3, [r7, #4]
 8047eee:	681b      	ldr	r3, [r3, #0]
 8047ef0:	691b      	ldr	r3, [r3, #16]
 8047ef2:	f003 0308 	and.w	r3, r3, #8
 8047ef6:	2b08      	cmp	r3, #8
 8047ef8:	d122      	bne.n	8047f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8047efa:	687b      	ldr	r3, [r7, #4]
 8047efc:	681b      	ldr	r3, [r3, #0]
 8047efe:	68db      	ldr	r3, [r3, #12]
 8047f00:	f003 0308 	and.w	r3, r3, #8
 8047f04:	2b08      	cmp	r3, #8
 8047f06:	d11b      	bne.n	8047f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8047f08:	687b      	ldr	r3, [r7, #4]
 8047f0a:	681b      	ldr	r3, [r3, #0]
 8047f0c:	f06f 0208 	mvn.w	r2, #8
 8047f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8047f12:	687b      	ldr	r3, [r7, #4]
 8047f14:	2204      	movs	r2, #4
 8047f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8047f18:	687b      	ldr	r3, [r7, #4]
 8047f1a:	681b      	ldr	r3, [r3, #0]
 8047f1c:	69db      	ldr	r3, [r3, #28]
 8047f1e:	f003 0303 	and.w	r3, r3, #3
 8047f22:	2b00      	cmp	r3, #0
 8047f24:	d003      	beq.n	8047f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047f26:	6878      	ldr	r0, [r7, #4]
 8047f28:	f000 fa2d 	bl	8048386 <HAL_TIM_IC_CaptureCallback>
 8047f2c:	e005      	b.n	8047f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047f2e:	6878      	ldr	r0, [r7, #4]
 8047f30:	f000 fa1f 	bl	8048372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047f34:	6878      	ldr	r0, [r7, #4]
 8047f36:	f000 fa30 	bl	804839a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047f3a:	687b      	ldr	r3, [r7, #4]
 8047f3c:	2200      	movs	r2, #0
 8047f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8047f40:	687b      	ldr	r3, [r7, #4]
 8047f42:	681b      	ldr	r3, [r3, #0]
 8047f44:	691b      	ldr	r3, [r3, #16]
 8047f46:	f003 0310 	and.w	r3, r3, #16
 8047f4a:	2b10      	cmp	r3, #16
 8047f4c:	d122      	bne.n	8047f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8047f4e:	687b      	ldr	r3, [r7, #4]
 8047f50:	681b      	ldr	r3, [r3, #0]
 8047f52:	68db      	ldr	r3, [r3, #12]
 8047f54:	f003 0310 	and.w	r3, r3, #16
 8047f58:	2b10      	cmp	r3, #16
 8047f5a:	d11b      	bne.n	8047f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8047f5c:	687b      	ldr	r3, [r7, #4]
 8047f5e:	681b      	ldr	r3, [r3, #0]
 8047f60:	f06f 0210 	mvn.w	r2, #16
 8047f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8047f66:	687b      	ldr	r3, [r7, #4]
 8047f68:	2208      	movs	r2, #8
 8047f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8047f6c:	687b      	ldr	r3, [r7, #4]
 8047f6e:	681b      	ldr	r3, [r3, #0]
 8047f70:	69db      	ldr	r3, [r3, #28]
 8047f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047f76:	2b00      	cmp	r3, #0
 8047f78:	d003      	beq.n	8047f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047f7a:	6878      	ldr	r0, [r7, #4]
 8047f7c:	f000 fa03 	bl	8048386 <HAL_TIM_IC_CaptureCallback>
 8047f80:	e005      	b.n	8047f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047f82:	6878      	ldr	r0, [r7, #4]
 8047f84:	f000 f9f5 	bl	8048372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047f88:	6878      	ldr	r0, [r7, #4]
 8047f8a:	f000 fa06 	bl	804839a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047f8e:	687b      	ldr	r3, [r7, #4]
 8047f90:	2200      	movs	r2, #0
 8047f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8047f94:	687b      	ldr	r3, [r7, #4]
 8047f96:	681b      	ldr	r3, [r3, #0]
 8047f98:	691b      	ldr	r3, [r3, #16]
 8047f9a:	f003 0301 	and.w	r3, r3, #1
 8047f9e:	2b01      	cmp	r3, #1
 8047fa0:	d10e      	bne.n	8047fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8047fa2:	687b      	ldr	r3, [r7, #4]
 8047fa4:	681b      	ldr	r3, [r3, #0]
 8047fa6:	68db      	ldr	r3, [r3, #12]
 8047fa8:	f003 0301 	and.w	r3, r3, #1
 8047fac:	2b01      	cmp	r3, #1
 8047fae:	d107      	bne.n	8047fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8047fb0:	687b      	ldr	r3, [r7, #4]
 8047fb2:	681b      	ldr	r3, [r3, #0]
 8047fb4:	f06f 0201 	mvn.w	r2, #1
 8047fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8047fba:	6878      	ldr	r0, [r7, #4]
 8047fbc:	f000 f9cf 	bl	804835e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8047fc0:	687b      	ldr	r3, [r7, #4]
 8047fc2:	681b      	ldr	r3, [r3, #0]
 8047fc4:	691b      	ldr	r3, [r3, #16]
 8047fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047fca:	2b80      	cmp	r3, #128	; 0x80
 8047fcc:	d10e      	bne.n	8047fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8047fce:	687b      	ldr	r3, [r7, #4]
 8047fd0:	681b      	ldr	r3, [r3, #0]
 8047fd2:	68db      	ldr	r3, [r3, #12]
 8047fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047fd8:	2b80      	cmp	r3, #128	; 0x80
 8047fda:	d107      	bne.n	8047fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8047fdc:	687b      	ldr	r3, [r7, #4]
 8047fde:	681b      	ldr	r3, [r3, #0]
 8047fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8047fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8047fe6:	6878      	ldr	r0, [r7, #4]
 8047fe8:	f000 fd82 	bl	8048af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8047fec:	687b      	ldr	r3, [r7, #4]
 8047fee:	681b      	ldr	r3, [r3, #0]
 8047ff0:	691b      	ldr	r3, [r3, #16]
 8047ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047ff6:	2b40      	cmp	r3, #64	; 0x40
 8047ff8:	d10e      	bne.n	8048018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8047ffa:	687b      	ldr	r3, [r7, #4]
 8047ffc:	681b      	ldr	r3, [r3, #0]
 8047ffe:	68db      	ldr	r3, [r3, #12]
 8048000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048004:	2b40      	cmp	r3, #64	; 0x40
 8048006:	d107      	bne.n	8048018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8048008:	687b      	ldr	r3, [r7, #4]
 804800a:	681b      	ldr	r3, [r3, #0]
 804800c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8048010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8048012:	6878      	ldr	r0, [r7, #4]
 8048014:	f000 f9cb 	bl	80483ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8048018:	687b      	ldr	r3, [r7, #4]
 804801a:	681b      	ldr	r3, [r3, #0]
 804801c:	691b      	ldr	r3, [r3, #16]
 804801e:	f003 0320 	and.w	r3, r3, #32
 8048022:	2b20      	cmp	r3, #32
 8048024:	d10e      	bne.n	8048044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8048026:	687b      	ldr	r3, [r7, #4]
 8048028:	681b      	ldr	r3, [r3, #0]
 804802a:	68db      	ldr	r3, [r3, #12]
 804802c:	f003 0320 	and.w	r3, r3, #32
 8048030:	2b20      	cmp	r3, #32
 8048032:	d107      	bne.n	8048044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8048034:	687b      	ldr	r3, [r7, #4]
 8048036:	681b      	ldr	r3, [r3, #0]
 8048038:	f06f 0220 	mvn.w	r2, #32
 804803c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 804803e:	6878      	ldr	r0, [r7, #4]
 8048040:	f000 fd4c 	bl	8048adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8048044:	bf00      	nop
 8048046:	3708      	adds	r7, #8
 8048048:	46bd      	mov	sp, r7
 804804a:	bd80      	pop	{r7, pc}

0804804c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 804804c:	b580      	push	{r7, lr}
 804804e:	b086      	sub	sp, #24
 8048050:	af00      	add	r7, sp, #0
 8048052:	60f8      	str	r0, [r7, #12]
 8048054:	60b9      	str	r1, [r7, #8]
 8048056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8048058:	2300      	movs	r3, #0
 804805a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 804805c:	68fb      	ldr	r3, [r7, #12]
 804805e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048062:	2b01      	cmp	r3, #1
 8048064:	d101      	bne.n	804806a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8048066:	2302      	movs	r3, #2
 8048068:	e0ae      	b.n	80481c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 804806a:	68fb      	ldr	r3, [r7, #12]
 804806c:	2201      	movs	r2, #1
 804806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8048072:	687b      	ldr	r3, [r7, #4]
 8048074:	2b0c      	cmp	r3, #12
 8048076:	f200 809f 	bhi.w	80481b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 804807a:	a201      	add	r2, pc, #4	; (adr r2, 8048080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 804807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048080:	080480b5 	.word	0x080480b5
 8048084:	080481b9 	.word	0x080481b9
 8048088:	080481b9 	.word	0x080481b9
 804808c:	080481b9 	.word	0x080481b9
 8048090:	080480f5 	.word	0x080480f5
 8048094:	080481b9 	.word	0x080481b9
 8048098:	080481b9 	.word	0x080481b9
 804809c:	080481b9 	.word	0x080481b9
 80480a0:	08048137 	.word	0x08048137
 80480a4:	080481b9 	.word	0x080481b9
 80480a8:	080481b9 	.word	0x080481b9
 80480ac:	080481b9 	.word	0x080481b9
 80480b0:	08048177 	.word	0x08048177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80480b4:	68fb      	ldr	r3, [r7, #12]
 80480b6:	681b      	ldr	r3, [r3, #0]
 80480b8:	68b9      	ldr	r1, [r7, #8]
 80480ba:	4618      	mov	r0, r3
 80480bc:	f000 fa22 	bl	8048504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80480c0:	68fb      	ldr	r3, [r7, #12]
 80480c2:	681b      	ldr	r3, [r3, #0]
 80480c4:	699a      	ldr	r2, [r3, #24]
 80480c6:	68fb      	ldr	r3, [r7, #12]
 80480c8:	681b      	ldr	r3, [r3, #0]
 80480ca:	f042 0208 	orr.w	r2, r2, #8
 80480ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80480d0:	68fb      	ldr	r3, [r7, #12]
 80480d2:	681b      	ldr	r3, [r3, #0]
 80480d4:	699a      	ldr	r2, [r3, #24]
 80480d6:	68fb      	ldr	r3, [r7, #12]
 80480d8:	681b      	ldr	r3, [r3, #0]
 80480da:	f022 0204 	bic.w	r2, r2, #4
 80480de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80480e0:	68fb      	ldr	r3, [r7, #12]
 80480e2:	681b      	ldr	r3, [r3, #0]
 80480e4:	6999      	ldr	r1, [r3, #24]
 80480e6:	68bb      	ldr	r3, [r7, #8]
 80480e8:	691a      	ldr	r2, [r3, #16]
 80480ea:	68fb      	ldr	r3, [r7, #12]
 80480ec:	681b      	ldr	r3, [r3, #0]
 80480ee:	430a      	orrs	r2, r1
 80480f0:	619a      	str	r2, [r3, #24]
      break;
 80480f2:	e064      	b.n	80481be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80480f4:	68fb      	ldr	r3, [r7, #12]
 80480f6:	681b      	ldr	r3, [r3, #0]
 80480f8:	68b9      	ldr	r1, [r7, #8]
 80480fa:	4618      	mov	r0, r3
 80480fc:	f000 fa72 	bl	80485e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8048100:	68fb      	ldr	r3, [r7, #12]
 8048102:	681b      	ldr	r3, [r3, #0]
 8048104:	699a      	ldr	r2, [r3, #24]
 8048106:	68fb      	ldr	r3, [r7, #12]
 8048108:	681b      	ldr	r3, [r3, #0]
 804810a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 804810e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8048110:	68fb      	ldr	r3, [r7, #12]
 8048112:	681b      	ldr	r3, [r3, #0]
 8048114:	699a      	ldr	r2, [r3, #24]
 8048116:	68fb      	ldr	r3, [r7, #12]
 8048118:	681b      	ldr	r3, [r3, #0]
 804811a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 804811e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8048120:	68fb      	ldr	r3, [r7, #12]
 8048122:	681b      	ldr	r3, [r3, #0]
 8048124:	6999      	ldr	r1, [r3, #24]
 8048126:	68bb      	ldr	r3, [r7, #8]
 8048128:	691b      	ldr	r3, [r3, #16]
 804812a:	021a      	lsls	r2, r3, #8
 804812c:	68fb      	ldr	r3, [r7, #12]
 804812e:	681b      	ldr	r3, [r3, #0]
 8048130:	430a      	orrs	r2, r1
 8048132:	619a      	str	r2, [r3, #24]
      break;
 8048134:	e043      	b.n	80481be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8048136:	68fb      	ldr	r3, [r7, #12]
 8048138:	681b      	ldr	r3, [r3, #0]
 804813a:	68b9      	ldr	r1, [r7, #8]
 804813c:	4618      	mov	r0, r3
 804813e:	f000 fac7 	bl	80486d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8048142:	68fb      	ldr	r3, [r7, #12]
 8048144:	681b      	ldr	r3, [r3, #0]
 8048146:	69da      	ldr	r2, [r3, #28]
 8048148:	68fb      	ldr	r3, [r7, #12]
 804814a:	681b      	ldr	r3, [r3, #0]
 804814c:	f042 0208 	orr.w	r2, r2, #8
 8048150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8048152:	68fb      	ldr	r3, [r7, #12]
 8048154:	681b      	ldr	r3, [r3, #0]
 8048156:	69da      	ldr	r2, [r3, #28]
 8048158:	68fb      	ldr	r3, [r7, #12]
 804815a:	681b      	ldr	r3, [r3, #0]
 804815c:	f022 0204 	bic.w	r2, r2, #4
 8048160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8048162:	68fb      	ldr	r3, [r7, #12]
 8048164:	681b      	ldr	r3, [r3, #0]
 8048166:	69d9      	ldr	r1, [r3, #28]
 8048168:	68bb      	ldr	r3, [r7, #8]
 804816a:	691a      	ldr	r2, [r3, #16]
 804816c:	68fb      	ldr	r3, [r7, #12]
 804816e:	681b      	ldr	r3, [r3, #0]
 8048170:	430a      	orrs	r2, r1
 8048172:	61da      	str	r2, [r3, #28]
      break;
 8048174:	e023      	b.n	80481be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8048176:	68fb      	ldr	r3, [r7, #12]
 8048178:	681b      	ldr	r3, [r3, #0]
 804817a:	68b9      	ldr	r1, [r7, #8]
 804817c:	4618      	mov	r0, r3
 804817e:	f000 fb1b 	bl	80487b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8048182:	68fb      	ldr	r3, [r7, #12]
 8048184:	681b      	ldr	r3, [r3, #0]
 8048186:	69da      	ldr	r2, [r3, #28]
 8048188:	68fb      	ldr	r3, [r7, #12]
 804818a:	681b      	ldr	r3, [r3, #0]
 804818c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8048190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8048192:	68fb      	ldr	r3, [r7, #12]
 8048194:	681b      	ldr	r3, [r3, #0]
 8048196:	69da      	ldr	r2, [r3, #28]
 8048198:	68fb      	ldr	r3, [r7, #12]
 804819a:	681b      	ldr	r3, [r3, #0]
 804819c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80481a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80481a2:	68fb      	ldr	r3, [r7, #12]
 80481a4:	681b      	ldr	r3, [r3, #0]
 80481a6:	69d9      	ldr	r1, [r3, #28]
 80481a8:	68bb      	ldr	r3, [r7, #8]
 80481aa:	691b      	ldr	r3, [r3, #16]
 80481ac:	021a      	lsls	r2, r3, #8
 80481ae:	68fb      	ldr	r3, [r7, #12]
 80481b0:	681b      	ldr	r3, [r3, #0]
 80481b2:	430a      	orrs	r2, r1
 80481b4:	61da      	str	r2, [r3, #28]
      break;
 80481b6:	e002      	b.n	80481be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80481b8:	2301      	movs	r3, #1
 80481ba:	75fb      	strb	r3, [r7, #23]
      break;
 80481bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80481be:	68fb      	ldr	r3, [r7, #12]
 80481c0:	2200      	movs	r2, #0
 80481c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80481c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80481c8:	4618      	mov	r0, r3
 80481ca:	3718      	adds	r7, #24
 80481cc:	46bd      	mov	sp, r7
 80481ce:	bd80      	pop	{r7, pc}

080481d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80481d0:	b580      	push	{r7, lr}
 80481d2:	b084      	sub	sp, #16
 80481d4:	af00      	add	r7, sp, #0
 80481d6:	6078      	str	r0, [r7, #4]
 80481d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80481da:	2300      	movs	r3, #0
 80481dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80481de:	687b      	ldr	r3, [r7, #4]
 80481e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80481e4:	2b01      	cmp	r3, #1
 80481e6:	d101      	bne.n	80481ec <HAL_TIM_ConfigClockSource+0x1c>
 80481e8:	2302      	movs	r3, #2
 80481ea:	e0b4      	b.n	8048356 <HAL_TIM_ConfigClockSource+0x186>
 80481ec:	687b      	ldr	r3, [r7, #4]
 80481ee:	2201      	movs	r2, #1
 80481f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80481f4:	687b      	ldr	r3, [r7, #4]
 80481f6:	2202      	movs	r2, #2
 80481f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80481fc:	687b      	ldr	r3, [r7, #4]
 80481fe:	681b      	ldr	r3, [r3, #0]
 8048200:	689b      	ldr	r3, [r3, #8]
 8048202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8048204:	68bb      	ldr	r3, [r7, #8]
 8048206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 804820a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804820c:	68bb      	ldr	r3, [r7, #8]
 804820e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8048214:	687b      	ldr	r3, [r7, #4]
 8048216:	681b      	ldr	r3, [r3, #0]
 8048218:	68ba      	ldr	r2, [r7, #8]
 804821a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 804821c:	683b      	ldr	r3, [r7, #0]
 804821e:	681b      	ldr	r3, [r3, #0]
 8048220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048224:	d03e      	beq.n	80482a4 <HAL_TIM_ConfigClockSource+0xd4>
 8048226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804822a:	f200 8087 	bhi.w	804833c <HAL_TIM_ConfigClockSource+0x16c>
 804822e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048232:	f000 8086 	beq.w	8048342 <HAL_TIM_ConfigClockSource+0x172>
 8048236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804823a:	d87f      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 804823c:	2b70      	cmp	r3, #112	; 0x70
 804823e:	d01a      	beq.n	8048276 <HAL_TIM_ConfigClockSource+0xa6>
 8048240:	2b70      	cmp	r3, #112	; 0x70
 8048242:	d87b      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 8048244:	2b60      	cmp	r3, #96	; 0x60
 8048246:	d050      	beq.n	80482ea <HAL_TIM_ConfigClockSource+0x11a>
 8048248:	2b60      	cmp	r3, #96	; 0x60
 804824a:	d877      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 804824c:	2b50      	cmp	r3, #80	; 0x50
 804824e:	d03c      	beq.n	80482ca <HAL_TIM_ConfigClockSource+0xfa>
 8048250:	2b50      	cmp	r3, #80	; 0x50
 8048252:	d873      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 8048254:	2b40      	cmp	r3, #64	; 0x40
 8048256:	d058      	beq.n	804830a <HAL_TIM_ConfigClockSource+0x13a>
 8048258:	2b40      	cmp	r3, #64	; 0x40
 804825a:	d86f      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 804825c:	2b30      	cmp	r3, #48	; 0x30
 804825e:	d064      	beq.n	804832a <HAL_TIM_ConfigClockSource+0x15a>
 8048260:	2b30      	cmp	r3, #48	; 0x30
 8048262:	d86b      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 8048264:	2b20      	cmp	r3, #32
 8048266:	d060      	beq.n	804832a <HAL_TIM_ConfigClockSource+0x15a>
 8048268:	2b20      	cmp	r3, #32
 804826a:	d867      	bhi.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
 804826c:	2b00      	cmp	r3, #0
 804826e:	d05c      	beq.n	804832a <HAL_TIM_ConfigClockSource+0x15a>
 8048270:	2b10      	cmp	r3, #16
 8048272:	d05a      	beq.n	804832a <HAL_TIM_ConfigClockSource+0x15a>
 8048274:	e062      	b.n	804833c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8048276:	687b      	ldr	r3, [r7, #4]
 8048278:	6818      	ldr	r0, [r3, #0]
 804827a:	683b      	ldr	r3, [r7, #0]
 804827c:	6899      	ldr	r1, [r3, #8]
 804827e:	683b      	ldr	r3, [r7, #0]
 8048280:	685a      	ldr	r2, [r3, #4]
 8048282:	683b      	ldr	r3, [r7, #0]
 8048284:	68db      	ldr	r3, [r3, #12]
 8048286:	f000 fb67 	bl	8048958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 804828a:	687b      	ldr	r3, [r7, #4]
 804828c:	681b      	ldr	r3, [r3, #0]
 804828e:	689b      	ldr	r3, [r3, #8]
 8048290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8048292:	68bb      	ldr	r3, [r7, #8]
 8048294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8048298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 804829a:	687b      	ldr	r3, [r7, #4]
 804829c:	681b      	ldr	r3, [r3, #0]
 804829e:	68ba      	ldr	r2, [r7, #8]
 80482a0:	609a      	str	r2, [r3, #8]
      break;
 80482a2:	e04f      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80482a4:	687b      	ldr	r3, [r7, #4]
 80482a6:	6818      	ldr	r0, [r3, #0]
 80482a8:	683b      	ldr	r3, [r7, #0]
 80482aa:	6899      	ldr	r1, [r3, #8]
 80482ac:	683b      	ldr	r3, [r7, #0]
 80482ae:	685a      	ldr	r2, [r3, #4]
 80482b0:	683b      	ldr	r3, [r7, #0]
 80482b2:	68db      	ldr	r3, [r3, #12]
 80482b4:	f000 fb50 	bl	8048958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80482b8:	687b      	ldr	r3, [r7, #4]
 80482ba:	681b      	ldr	r3, [r3, #0]
 80482bc:	689a      	ldr	r2, [r3, #8]
 80482be:	687b      	ldr	r3, [r7, #4]
 80482c0:	681b      	ldr	r3, [r3, #0]
 80482c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80482c6:	609a      	str	r2, [r3, #8]
      break;
 80482c8:	e03c      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80482ca:	687b      	ldr	r3, [r7, #4]
 80482cc:	6818      	ldr	r0, [r3, #0]
 80482ce:	683b      	ldr	r3, [r7, #0]
 80482d0:	6859      	ldr	r1, [r3, #4]
 80482d2:	683b      	ldr	r3, [r7, #0]
 80482d4:	68db      	ldr	r3, [r3, #12]
 80482d6:	461a      	mov	r2, r3
 80482d8:	f000 fac4 	bl	8048864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80482dc:	687b      	ldr	r3, [r7, #4]
 80482de:	681b      	ldr	r3, [r3, #0]
 80482e0:	2150      	movs	r1, #80	; 0x50
 80482e2:	4618      	mov	r0, r3
 80482e4:	f000 fb1d 	bl	8048922 <TIM_ITRx_SetConfig>
      break;
 80482e8:	e02c      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80482ea:	687b      	ldr	r3, [r7, #4]
 80482ec:	6818      	ldr	r0, [r3, #0]
 80482ee:	683b      	ldr	r3, [r7, #0]
 80482f0:	6859      	ldr	r1, [r3, #4]
 80482f2:	683b      	ldr	r3, [r7, #0]
 80482f4:	68db      	ldr	r3, [r3, #12]
 80482f6:	461a      	mov	r2, r3
 80482f8:	f000 fae3 	bl	80488c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80482fc:	687b      	ldr	r3, [r7, #4]
 80482fe:	681b      	ldr	r3, [r3, #0]
 8048300:	2160      	movs	r1, #96	; 0x60
 8048302:	4618      	mov	r0, r3
 8048304:	f000 fb0d 	bl	8048922 <TIM_ITRx_SetConfig>
      break;
 8048308:	e01c      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804830a:	687b      	ldr	r3, [r7, #4]
 804830c:	6818      	ldr	r0, [r3, #0]
 804830e:	683b      	ldr	r3, [r7, #0]
 8048310:	6859      	ldr	r1, [r3, #4]
 8048312:	683b      	ldr	r3, [r7, #0]
 8048314:	68db      	ldr	r3, [r3, #12]
 8048316:	461a      	mov	r2, r3
 8048318:	f000 faa4 	bl	8048864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 804831c:	687b      	ldr	r3, [r7, #4]
 804831e:	681b      	ldr	r3, [r3, #0]
 8048320:	2140      	movs	r1, #64	; 0x40
 8048322:	4618      	mov	r0, r3
 8048324:	f000 fafd 	bl	8048922 <TIM_ITRx_SetConfig>
      break;
 8048328:	e00c      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804832a:	687b      	ldr	r3, [r7, #4]
 804832c:	681a      	ldr	r2, [r3, #0]
 804832e:	683b      	ldr	r3, [r7, #0]
 8048330:	681b      	ldr	r3, [r3, #0]
 8048332:	4619      	mov	r1, r3
 8048334:	4610      	mov	r0, r2
 8048336:	f000 faf4 	bl	8048922 <TIM_ITRx_SetConfig>
      break;
 804833a:	e003      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 804833c:	2301      	movs	r3, #1
 804833e:	73fb      	strb	r3, [r7, #15]
      break;
 8048340:	e000      	b.n	8048344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8048342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8048344:	687b      	ldr	r3, [r7, #4]
 8048346:	2201      	movs	r2, #1
 8048348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804834c:	687b      	ldr	r3, [r7, #4]
 804834e:	2200      	movs	r2, #0
 8048350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8048354:	7bfb      	ldrb	r3, [r7, #15]
}
 8048356:	4618      	mov	r0, r3
 8048358:	3710      	adds	r7, #16
 804835a:	46bd      	mov	sp, r7
 804835c:	bd80      	pop	{r7, pc}

0804835e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 804835e:	b480      	push	{r7}
 8048360:	b083      	sub	sp, #12
 8048362:	af00      	add	r7, sp, #0
 8048364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8048366:	bf00      	nop
 8048368:	370c      	adds	r7, #12
 804836a:	46bd      	mov	sp, r7
 804836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048370:	4770      	bx	lr

08048372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8048372:	b480      	push	{r7}
 8048374:	b083      	sub	sp, #12
 8048376:	af00      	add	r7, sp, #0
 8048378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804837a:	bf00      	nop
 804837c:	370c      	adds	r7, #12
 804837e:	46bd      	mov	sp, r7
 8048380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048384:	4770      	bx	lr

08048386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8048386:	b480      	push	{r7}
 8048388:	b083      	sub	sp, #12
 804838a:	af00      	add	r7, sp, #0
 804838c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804838e:	bf00      	nop
 8048390:	370c      	adds	r7, #12
 8048392:	46bd      	mov	sp, r7
 8048394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048398:	4770      	bx	lr

0804839a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804839a:	b480      	push	{r7}
 804839c:	b083      	sub	sp, #12
 804839e:	af00      	add	r7, sp, #0
 80483a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80483a2:	bf00      	nop
 80483a4:	370c      	adds	r7, #12
 80483a6:	46bd      	mov	sp, r7
 80483a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483ac:	4770      	bx	lr

080483ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80483ae:	b480      	push	{r7}
 80483b0:	b083      	sub	sp, #12
 80483b2:	af00      	add	r7, sp, #0
 80483b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80483b6:	bf00      	nop
 80483b8:	370c      	adds	r7, #12
 80483ba:	46bd      	mov	sp, r7
 80483bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483c0:	4770      	bx	lr
	...

080483c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80483c4:	b480      	push	{r7}
 80483c6:	b085      	sub	sp, #20
 80483c8:	af00      	add	r7, sp, #0
 80483ca:	6078      	str	r0, [r7, #4]
 80483cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80483ce:	687b      	ldr	r3, [r7, #4]
 80483d0:	681b      	ldr	r3, [r3, #0]
 80483d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80483d4:	687b      	ldr	r3, [r7, #4]
 80483d6:	4a40      	ldr	r2, [pc, #256]	; (80484d8 <TIM_Base_SetConfig+0x114>)
 80483d8:	4293      	cmp	r3, r2
 80483da:	d013      	beq.n	8048404 <TIM_Base_SetConfig+0x40>
 80483dc:	687b      	ldr	r3, [r7, #4]
 80483de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80483e2:	d00f      	beq.n	8048404 <TIM_Base_SetConfig+0x40>
 80483e4:	687b      	ldr	r3, [r7, #4]
 80483e6:	4a3d      	ldr	r2, [pc, #244]	; (80484dc <TIM_Base_SetConfig+0x118>)
 80483e8:	4293      	cmp	r3, r2
 80483ea:	d00b      	beq.n	8048404 <TIM_Base_SetConfig+0x40>
 80483ec:	687b      	ldr	r3, [r7, #4]
 80483ee:	4a3c      	ldr	r2, [pc, #240]	; (80484e0 <TIM_Base_SetConfig+0x11c>)
 80483f0:	4293      	cmp	r3, r2
 80483f2:	d007      	beq.n	8048404 <TIM_Base_SetConfig+0x40>
 80483f4:	687b      	ldr	r3, [r7, #4]
 80483f6:	4a3b      	ldr	r2, [pc, #236]	; (80484e4 <TIM_Base_SetConfig+0x120>)
 80483f8:	4293      	cmp	r3, r2
 80483fa:	d003      	beq.n	8048404 <TIM_Base_SetConfig+0x40>
 80483fc:	687b      	ldr	r3, [r7, #4]
 80483fe:	4a3a      	ldr	r2, [pc, #232]	; (80484e8 <TIM_Base_SetConfig+0x124>)
 8048400:	4293      	cmp	r3, r2
 8048402:	d108      	bne.n	8048416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8048404:	68fb      	ldr	r3, [r7, #12]
 8048406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804840a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804840c:	683b      	ldr	r3, [r7, #0]
 804840e:	685b      	ldr	r3, [r3, #4]
 8048410:	68fa      	ldr	r2, [r7, #12]
 8048412:	4313      	orrs	r3, r2
 8048414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8048416:	687b      	ldr	r3, [r7, #4]
 8048418:	4a2f      	ldr	r2, [pc, #188]	; (80484d8 <TIM_Base_SetConfig+0x114>)
 804841a:	4293      	cmp	r3, r2
 804841c:	d02b      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804841e:	687b      	ldr	r3, [r7, #4]
 8048420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048424:	d027      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 8048426:	687b      	ldr	r3, [r7, #4]
 8048428:	4a2c      	ldr	r2, [pc, #176]	; (80484dc <TIM_Base_SetConfig+0x118>)
 804842a:	4293      	cmp	r3, r2
 804842c:	d023      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804842e:	687b      	ldr	r3, [r7, #4]
 8048430:	4a2b      	ldr	r2, [pc, #172]	; (80484e0 <TIM_Base_SetConfig+0x11c>)
 8048432:	4293      	cmp	r3, r2
 8048434:	d01f      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 8048436:	687b      	ldr	r3, [r7, #4]
 8048438:	4a2a      	ldr	r2, [pc, #168]	; (80484e4 <TIM_Base_SetConfig+0x120>)
 804843a:	4293      	cmp	r3, r2
 804843c:	d01b      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804843e:	687b      	ldr	r3, [r7, #4]
 8048440:	4a29      	ldr	r2, [pc, #164]	; (80484e8 <TIM_Base_SetConfig+0x124>)
 8048442:	4293      	cmp	r3, r2
 8048444:	d017      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 8048446:	687b      	ldr	r3, [r7, #4]
 8048448:	4a28      	ldr	r2, [pc, #160]	; (80484ec <TIM_Base_SetConfig+0x128>)
 804844a:	4293      	cmp	r3, r2
 804844c:	d013      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804844e:	687b      	ldr	r3, [r7, #4]
 8048450:	4a27      	ldr	r2, [pc, #156]	; (80484f0 <TIM_Base_SetConfig+0x12c>)
 8048452:	4293      	cmp	r3, r2
 8048454:	d00f      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 8048456:	687b      	ldr	r3, [r7, #4]
 8048458:	4a26      	ldr	r2, [pc, #152]	; (80484f4 <TIM_Base_SetConfig+0x130>)
 804845a:	4293      	cmp	r3, r2
 804845c:	d00b      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804845e:	687b      	ldr	r3, [r7, #4]
 8048460:	4a25      	ldr	r2, [pc, #148]	; (80484f8 <TIM_Base_SetConfig+0x134>)
 8048462:	4293      	cmp	r3, r2
 8048464:	d007      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 8048466:	687b      	ldr	r3, [r7, #4]
 8048468:	4a24      	ldr	r2, [pc, #144]	; (80484fc <TIM_Base_SetConfig+0x138>)
 804846a:	4293      	cmp	r3, r2
 804846c:	d003      	beq.n	8048476 <TIM_Base_SetConfig+0xb2>
 804846e:	687b      	ldr	r3, [r7, #4]
 8048470:	4a23      	ldr	r2, [pc, #140]	; (8048500 <TIM_Base_SetConfig+0x13c>)
 8048472:	4293      	cmp	r3, r2
 8048474:	d108      	bne.n	8048488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8048476:	68fb      	ldr	r3, [r7, #12]
 8048478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804847c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804847e:	683b      	ldr	r3, [r7, #0]
 8048480:	68db      	ldr	r3, [r3, #12]
 8048482:	68fa      	ldr	r2, [r7, #12]
 8048484:	4313      	orrs	r3, r2
 8048486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048488:	68fb      	ldr	r3, [r7, #12]
 804848a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804848e:	683b      	ldr	r3, [r7, #0]
 8048490:	695b      	ldr	r3, [r3, #20]
 8048492:	4313      	orrs	r3, r2
 8048494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8048496:	687b      	ldr	r3, [r7, #4]
 8048498:	68fa      	ldr	r2, [r7, #12]
 804849a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804849c:	683b      	ldr	r3, [r7, #0]
 804849e:	689a      	ldr	r2, [r3, #8]
 80484a0:	687b      	ldr	r3, [r7, #4]
 80484a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80484a4:	683b      	ldr	r3, [r7, #0]
 80484a6:	681a      	ldr	r2, [r3, #0]
 80484a8:	687b      	ldr	r3, [r7, #4]
 80484aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80484ac:	687b      	ldr	r3, [r7, #4]
 80484ae:	4a0a      	ldr	r2, [pc, #40]	; (80484d8 <TIM_Base_SetConfig+0x114>)
 80484b0:	4293      	cmp	r3, r2
 80484b2:	d003      	beq.n	80484bc <TIM_Base_SetConfig+0xf8>
 80484b4:	687b      	ldr	r3, [r7, #4]
 80484b6:	4a0c      	ldr	r2, [pc, #48]	; (80484e8 <TIM_Base_SetConfig+0x124>)
 80484b8:	4293      	cmp	r3, r2
 80484ba:	d103      	bne.n	80484c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80484bc:	683b      	ldr	r3, [r7, #0]
 80484be:	691a      	ldr	r2, [r3, #16]
 80484c0:	687b      	ldr	r3, [r7, #4]
 80484c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80484c4:	687b      	ldr	r3, [r7, #4]
 80484c6:	2201      	movs	r2, #1
 80484c8:	615a      	str	r2, [r3, #20]
}
 80484ca:	bf00      	nop
 80484cc:	3714      	adds	r7, #20
 80484ce:	46bd      	mov	sp, r7
 80484d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484d4:	4770      	bx	lr
 80484d6:	bf00      	nop
 80484d8:	40010000 	.word	0x40010000
 80484dc:	40000400 	.word	0x40000400
 80484e0:	40000800 	.word	0x40000800
 80484e4:	40000c00 	.word	0x40000c00
 80484e8:	40010400 	.word	0x40010400
 80484ec:	40014000 	.word	0x40014000
 80484f0:	40014400 	.word	0x40014400
 80484f4:	40014800 	.word	0x40014800
 80484f8:	40001800 	.word	0x40001800
 80484fc:	40001c00 	.word	0x40001c00
 8048500:	40002000 	.word	0x40002000

08048504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8048504:	b480      	push	{r7}
 8048506:	b087      	sub	sp, #28
 8048508:	af00      	add	r7, sp, #0
 804850a:	6078      	str	r0, [r7, #4]
 804850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 804850e:	687b      	ldr	r3, [r7, #4]
 8048510:	6a1b      	ldr	r3, [r3, #32]
 8048512:	f023 0201 	bic.w	r2, r3, #1
 8048516:	687b      	ldr	r3, [r7, #4]
 8048518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 804851a:	687b      	ldr	r3, [r7, #4]
 804851c:	6a1b      	ldr	r3, [r3, #32]
 804851e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8048520:	687b      	ldr	r3, [r7, #4]
 8048522:	685b      	ldr	r3, [r3, #4]
 8048524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8048526:	687b      	ldr	r3, [r7, #4]
 8048528:	699b      	ldr	r3, [r3, #24]
 804852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 804852c:	68fb      	ldr	r3, [r7, #12]
 804852e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8048534:	68fb      	ldr	r3, [r7, #12]
 8048536:	f023 0303 	bic.w	r3, r3, #3
 804853a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 804853c:	683b      	ldr	r3, [r7, #0]
 804853e:	681b      	ldr	r3, [r3, #0]
 8048540:	68fa      	ldr	r2, [r7, #12]
 8048542:	4313      	orrs	r3, r2
 8048544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8048546:	697b      	ldr	r3, [r7, #20]
 8048548:	f023 0302 	bic.w	r3, r3, #2
 804854c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 804854e:	683b      	ldr	r3, [r7, #0]
 8048550:	689b      	ldr	r3, [r3, #8]
 8048552:	697a      	ldr	r2, [r7, #20]
 8048554:	4313      	orrs	r3, r2
 8048556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8048558:	687b      	ldr	r3, [r7, #4]
 804855a:	4a20      	ldr	r2, [pc, #128]	; (80485dc <TIM_OC1_SetConfig+0xd8>)
 804855c:	4293      	cmp	r3, r2
 804855e:	d003      	beq.n	8048568 <TIM_OC1_SetConfig+0x64>
 8048560:	687b      	ldr	r3, [r7, #4]
 8048562:	4a1f      	ldr	r2, [pc, #124]	; (80485e0 <TIM_OC1_SetConfig+0xdc>)
 8048564:	4293      	cmp	r3, r2
 8048566:	d10c      	bne.n	8048582 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8048568:	697b      	ldr	r3, [r7, #20]
 804856a:	f023 0308 	bic.w	r3, r3, #8
 804856e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8048570:	683b      	ldr	r3, [r7, #0]
 8048572:	68db      	ldr	r3, [r3, #12]
 8048574:	697a      	ldr	r2, [r7, #20]
 8048576:	4313      	orrs	r3, r2
 8048578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 804857a:	697b      	ldr	r3, [r7, #20]
 804857c:	f023 0304 	bic.w	r3, r3, #4
 8048580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8048582:	687b      	ldr	r3, [r7, #4]
 8048584:	4a15      	ldr	r2, [pc, #84]	; (80485dc <TIM_OC1_SetConfig+0xd8>)
 8048586:	4293      	cmp	r3, r2
 8048588:	d003      	beq.n	8048592 <TIM_OC1_SetConfig+0x8e>
 804858a:	687b      	ldr	r3, [r7, #4]
 804858c:	4a14      	ldr	r2, [pc, #80]	; (80485e0 <TIM_OC1_SetConfig+0xdc>)
 804858e:	4293      	cmp	r3, r2
 8048590:	d111      	bne.n	80485b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8048592:	693b      	ldr	r3, [r7, #16]
 8048594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8048598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 804859a:	693b      	ldr	r3, [r7, #16]
 804859c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80485a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80485a2:	683b      	ldr	r3, [r7, #0]
 80485a4:	695b      	ldr	r3, [r3, #20]
 80485a6:	693a      	ldr	r2, [r7, #16]
 80485a8:	4313      	orrs	r3, r2
 80485aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80485ac:	683b      	ldr	r3, [r7, #0]
 80485ae:	699b      	ldr	r3, [r3, #24]
 80485b0:	693a      	ldr	r2, [r7, #16]
 80485b2:	4313      	orrs	r3, r2
 80485b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80485b6:	687b      	ldr	r3, [r7, #4]
 80485b8:	693a      	ldr	r2, [r7, #16]
 80485ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80485bc:	687b      	ldr	r3, [r7, #4]
 80485be:	68fa      	ldr	r2, [r7, #12]
 80485c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80485c2:	683b      	ldr	r3, [r7, #0]
 80485c4:	685a      	ldr	r2, [r3, #4]
 80485c6:	687b      	ldr	r3, [r7, #4]
 80485c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80485ca:	687b      	ldr	r3, [r7, #4]
 80485cc:	697a      	ldr	r2, [r7, #20]
 80485ce:	621a      	str	r2, [r3, #32]
}
 80485d0:	bf00      	nop
 80485d2:	371c      	adds	r7, #28
 80485d4:	46bd      	mov	sp, r7
 80485d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485da:	4770      	bx	lr
 80485dc:	40010000 	.word	0x40010000
 80485e0:	40010400 	.word	0x40010400

080485e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80485e4:	b480      	push	{r7}
 80485e6:	b087      	sub	sp, #28
 80485e8:	af00      	add	r7, sp, #0
 80485ea:	6078      	str	r0, [r7, #4]
 80485ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	6a1b      	ldr	r3, [r3, #32]
 80485f2:	f023 0210 	bic.w	r2, r3, #16
 80485f6:	687b      	ldr	r3, [r7, #4]
 80485f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80485fa:	687b      	ldr	r3, [r7, #4]
 80485fc:	6a1b      	ldr	r3, [r3, #32]
 80485fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8048600:	687b      	ldr	r3, [r7, #4]
 8048602:	685b      	ldr	r3, [r3, #4]
 8048604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8048606:	687b      	ldr	r3, [r7, #4]
 8048608:	699b      	ldr	r3, [r3, #24]
 804860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 804860c:	68fb      	ldr	r3, [r7, #12]
 804860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8048612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8048614:	68fb      	ldr	r3, [r7, #12]
 8048616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804861a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 804861c:	683b      	ldr	r3, [r7, #0]
 804861e:	681b      	ldr	r3, [r3, #0]
 8048620:	021b      	lsls	r3, r3, #8
 8048622:	68fa      	ldr	r2, [r7, #12]
 8048624:	4313      	orrs	r3, r2
 8048626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8048628:	697b      	ldr	r3, [r7, #20]
 804862a:	f023 0320 	bic.w	r3, r3, #32
 804862e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8048630:	683b      	ldr	r3, [r7, #0]
 8048632:	689b      	ldr	r3, [r3, #8]
 8048634:	011b      	lsls	r3, r3, #4
 8048636:	697a      	ldr	r2, [r7, #20]
 8048638:	4313      	orrs	r3, r2
 804863a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 804863c:	687b      	ldr	r3, [r7, #4]
 804863e:	4a22      	ldr	r2, [pc, #136]	; (80486c8 <TIM_OC2_SetConfig+0xe4>)
 8048640:	4293      	cmp	r3, r2
 8048642:	d003      	beq.n	804864c <TIM_OC2_SetConfig+0x68>
 8048644:	687b      	ldr	r3, [r7, #4]
 8048646:	4a21      	ldr	r2, [pc, #132]	; (80486cc <TIM_OC2_SetConfig+0xe8>)
 8048648:	4293      	cmp	r3, r2
 804864a:	d10d      	bne.n	8048668 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 804864c:	697b      	ldr	r3, [r7, #20]
 804864e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8048654:	683b      	ldr	r3, [r7, #0]
 8048656:	68db      	ldr	r3, [r3, #12]
 8048658:	011b      	lsls	r3, r3, #4
 804865a:	697a      	ldr	r2, [r7, #20]
 804865c:	4313      	orrs	r3, r2
 804865e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8048660:	697b      	ldr	r3, [r7, #20]
 8048662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8048666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8048668:	687b      	ldr	r3, [r7, #4]
 804866a:	4a17      	ldr	r2, [pc, #92]	; (80486c8 <TIM_OC2_SetConfig+0xe4>)
 804866c:	4293      	cmp	r3, r2
 804866e:	d003      	beq.n	8048678 <TIM_OC2_SetConfig+0x94>
 8048670:	687b      	ldr	r3, [r7, #4]
 8048672:	4a16      	ldr	r2, [pc, #88]	; (80486cc <TIM_OC2_SetConfig+0xe8>)
 8048674:	4293      	cmp	r3, r2
 8048676:	d113      	bne.n	80486a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8048678:	693b      	ldr	r3, [r7, #16]
 804867a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804867e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8048680:	693b      	ldr	r3, [r7, #16]
 8048682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8048686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8048688:	683b      	ldr	r3, [r7, #0]
 804868a:	695b      	ldr	r3, [r3, #20]
 804868c:	009b      	lsls	r3, r3, #2
 804868e:	693a      	ldr	r2, [r7, #16]
 8048690:	4313      	orrs	r3, r2
 8048692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8048694:	683b      	ldr	r3, [r7, #0]
 8048696:	699b      	ldr	r3, [r3, #24]
 8048698:	009b      	lsls	r3, r3, #2
 804869a:	693a      	ldr	r2, [r7, #16]
 804869c:	4313      	orrs	r3, r2
 804869e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80486a0:	687b      	ldr	r3, [r7, #4]
 80486a2:	693a      	ldr	r2, [r7, #16]
 80486a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80486a6:	687b      	ldr	r3, [r7, #4]
 80486a8:	68fa      	ldr	r2, [r7, #12]
 80486aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80486ac:	683b      	ldr	r3, [r7, #0]
 80486ae:	685a      	ldr	r2, [r3, #4]
 80486b0:	687b      	ldr	r3, [r7, #4]
 80486b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80486b4:	687b      	ldr	r3, [r7, #4]
 80486b6:	697a      	ldr	r2, [r7, #20]
 80486b8:	621a      	str	r2, [r3, #32]
}
 80486ba:	bf00      	nop
 80486bc:	371c      	adds	r7, #28
 80486be:	46bd      	mov	sp, r7
 80486c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80486c4:	4770      	bx	lr
 80486c6:	bf00      	nop
 80486c8:	40010000 	.word	0x40010000
 80486cc:	40010400 	.word	0x40010400

080486d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80486d0:	b480      	push	{r7}
 80486d2:	b087      	sub	sp, #28
 80486d4:	af00      	add	r7, sp, #0
 80486d6:	6078      	str	r0, [r7, #4]
 80486d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80486da:	687b      	ldr	r3, [r7, #4]
 80486dc:	6a1b      	ldr	r3, [r3, #32]
 80486de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80486e2:	687b      	ldr	r3, [r7, #4]
 80486e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80486e6:	687b      	ldr	r3, [r7, #4]
 80486e8:	6a1b      	ldr	r3, [r3, #32]
 80486ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80486ec:	687b      	ldr	r3, [r7, #4]
 80486ee:	685b      	ldr	r3, [r3, #4]
 80486f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80486f2:	687b      	ldr	r3, [r7, #4]
 80486f4:	69db      	ldr	r3, [r3, #28]
 80486f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80486f8:	68fb      	ldr	r3, [r7, #12]
 80486fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80486fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8048700:	68fb      	ldr	r3, [r7, #12]
 8048702:	f023 0303 	bic.w	r3, r3, #3
 8048706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8048708:	683b      	ldr	r3, [r7, #0]
 804870a:	681b      	ldr	r3, [r3, #0]
 804870c:	68fa      	ldr	r2, [r7, #12]
 804870e:	4313      	orrs	r3, r2
 8048710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8048712:	697b      	ldr	r3, [r7, #20]
 8048714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8048718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 804871a:	683b      	ldr	r3, [r7, #0]
 804871c:	689b      	ldr	r3, [r3, #8]
 804871e:	021b      	lsls	r3, r3, #8
 8048720:	697a      	ldr	r2, [r7, #20]
 8048722:	4313      	orrs	r3, r2
 8048724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8048726:	687b      	ldr	r3, [r7, #4]
 8048728:	4a21      	ldr	r2, [pc, #132]	; (80487b0 <TIM_OC3_SetConfig+0xe0>)
 804872a:	4293      	cmp	r3, r2
 804872c:	d003      	beq.n	8048736 <TIM_OC3_SetConfig+0x66>
 804872e:	687b      	ldr	r3, [r7, #4]
 8048730:	4a20      	ldr	r2, [pc, #128]	; (80487b4 <TIM_OC3_SetConfig+0xe4>)
 8048732:	4293      	cmp	r3, r2
 8048734:	d10d      	bne.n	8048752 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8048736:	697b      	ldr	r3, [r7, #20]
 8048738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804873c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 804873e:	683b      	ldr	r3, [r7, #0]
 8048740:	68db      	ldr	r3, [r3, #12]
 8048742:	021b      	lsls	r3, r3, #8
 8048744:	697a      	ldr	r2, [r7, #20]
 8048746:	4313      	orrs	r3, r2
 8048748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 804874a:	697b      	ldr	r3, [r7, #20]
 804874c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8048750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8048752:	687b      	ldr	r3, [r7, #4]
 8048754:	4a16      	ldr	r2, [pc, #88]	; (80487b0 <TIM_OC3_SetConfig+0xe0>)
 8048756:	4293      	cmp	r3, r2
 8048758:	d003      	beq.n	8048762 <TIM_OC3_SetConfig+0x92>
 804875a:	687b      	ldr	r3, [r7, #4]
 804875c:	4a15      	ldr	r2, [pc, #84]	; (80487b4 <TIM_OC3_SetConfig+0xe4>)
 804875e:	4293      	cmp	r3, r2
 8048760:	d113      	bne.n	804878a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8048762:	693b      	ldr	r3, [r7, #16]
 8048764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8048768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 804876a:	693b      	ldr	r3, [r7, #16]
 804876c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8048770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8048772:	683b      	ldr	r3, [r7, #0]
 8048774:	695b      	ldr	r3, [r3, #20]
 8048776:	011b      	lsls	r3, r3, #4
 8048778:	693a      	ldr	r2, [r7, #16]
 804877a:	4313      	orrs	r3, r2
 804877c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 804877e:	683b      	ldr	r3, [r7, #0]
 8048780:	699b      	ldr	r3, [r3, #24]
 8048782:	011b      	lsls	r3, r3, #4
 8048784:	693a      	ldr	r2, [r7, #16]
 8048786:	4313      	orrs	r3, r2
 8048788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 804878a:	687b      	ldr	r3, [r7, #4]
 804878c:	693a      	ldr	r2, [r7, #16]
 804878e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8048790:	687b      	ldr	r3, [r7, #4]
 8048792:	68fa      	ldr	r2, [r7, #12]
 8048794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8048796:	683b      	ldr	r3, [r7, #0]
 8048798:	685a      	ldr	r2, [r3, #4]
 804879a:	687b      	ldr	r3, [r7, #4]
 804879c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 804879e:	687b      	ldr	r3, [r7, #4]
 80487a0:	697a      	ldr	r2, [r7, #20]
 80487a2:	621a      	str	r2, [r3, #32]
}
 80487a4:	bf00      	nop
 80487a6:	371c      	adds	r7, #28
 80487a8:	46bd      	mov	sp, r7
 80487aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80487ae:	4770      	bx	lr
 80487b0:	40010000 	.word	0x40010000
 80487b4:	40010400 	.word	0x40010400

080487b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80487b8:	b480      	push	{r7}
 80487ba:	b087      	sub	sp, #28
 80487bc:	af00      	add	r7, sp, #0
 80487be:	6078      	str	r0, [r7, #4]
 80487c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80487c2:	687b      	ldr	r3, [r7, #4]
 80487c4:	6a1b      	ldr	r3, [r3, #32]
 80487c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80487ca:	687b      	ldr	r3, [r7, #4]
 80487cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80487ce:	687b      	ldr	r3, [r7, #4]
 80487d0:	6a1b      	ldr	r3, [r3, #32]
 80487d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80487d4:	687b      	ldr	r3, [r7, #4]
 80487d6:	685b      	ldr	r3, [r3, #4]
 80487d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80487da:	687b      	ldr	r3, [r7, #4]
 80487dc:	69db      	ldr	r3, [r3, #28]
 80487de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80487e0:	68fb      	ldr	r3, [r7, #12]
 80487e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80487e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80487e8:	68fb      	ldr	r3, [r7, #12]
 80487ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80487ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80487f0:	683b      	ldr	r3, [r7, #0]
 80487f2:	681b      	ldr	r3, [r3, #0]
 80487f4:	021b      	lsls	r3, r3, #8
 80487f6:	68fa      	ldr	r2, [r7, #12]
 80487f8:	4313      	orrs	r3, r2
 80487fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80487fc:	693b      	ldr	r3, [r7, #16]
 80487fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8048802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8048804:	683b      	ldr	r3, [r7, #0]
 8048806:	689b      	ldr	r3, [r3, #8]
 8048808:	031b      	lsls	r3, r3, #12
 804880a:	693a      	ldr	r2, [r7, #16]
 804880c:	4313      	orrs	r3, r2
 804880e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8048810:	687b      	ldr	r3, [r7, #4]
 8048812:	4a12      	ldr	r2, [pc, #72]	; (804885c <TIM_OC4_SetConfig+0xa4>)
 8048814:	4293      	cmp	r3, r2
 8048816:	d003      	beq.n	8048820 <TIM_OC4_SetConfig+0x68>
 8048818:	687b      	ldr	r3, [r7, #4]
 804881a:	4a11      	ldr	r2, [pc, #68]	; (8048860 <TIM_OC4_SetConfig+0xa8>)
 804881c:	4293      	cmp	r3, r2
 804881e:	d109      	bne.n	8048834 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8048820:	697b      	ldr	r3, [r7, #20]
 8048822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8048826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8048828:	683b      	ldr	r3, [r7, #0]
 804882a:	695b      	ldr	r3, [r3, #20]
 804882c:	019b      	lsls	r3, r3, #6
 804882e:	697a      	ldr	r2, [r7, #20]
 8048830:	4313      	orrs	r3, r2
 8048832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8048834:	687b      	ldr	r3, [r7, #4]
 8048836:	697a      	ldr	r2, [r7, #20]
 8048838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 804883a:	687b      	ldr	r3, [r7, #4]
 804883c:	68fa      	ldr	r2, [r7, #12]
 804883e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8048840:	683b      	ldr	r3, [r7, #0]
 8048842:	685a      	ldr	r2, [r3, #4]
 8048844:	687b      	ldr	r3, [r7, #4]
 8048846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8048848:	687b      	ldr	r3, [r7, #4]
 804884a:	693a      	ldr	r2, [r7, #16]
 804884c:	621a      	str	r2, [r3, #32]
}
 804884e:	bf00      	nop
 8048850:	371c      	adds	r7, #28
 8048852:	46bd      	mov	sp, r7
 8048854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048858:	4770      	bx	lr
 804885a:	bf00      	nop
 804885c:	40010000 	.word	0x40010000
 8048860:	40010400 	.word	0x40010400

08048864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048864:	b480      	push	{r7}
 8048866:	b087      	sub	sp, #28
 8048868:	af00      	add	r7, sp, #0
 804886a:	60f8      	str	r0, [r7, #12]
 804886c:	60b9      	str	r1, [r7, #8]
 804886e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8048870:	68fb      	ldr	r3, [r7, #12]
 8048872:	6a1b      	ldr	r3, [r3, #32]
 8048874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8048876:	68fb      	ldr	r3, [r7, #12]
 8048878:	6a1b      	ldr	r3, [r3, #32]
 804887a:	f023 0201 	bic.w	r2, r3, #1
 804887e:	68fb      	ldr	r3, [r7, #12]
 8048880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048882:	68fb      	ldr	r3, [r7, #12]
 8048884:	699b      	ldr	r3, [r3, #24]
 8048886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8048888:	693b      	ldr	r3, [r7, #16]
 804888a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804888e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8048890:	687b      	ldr	r3, [r7, #4]
 8048892:	011b      	lsls	r3, r3, #4
 8048894:	693a      	ldr	r2, [r7, #16]
 8048896:	4313      	orrs	r3, r2
 8048898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 804889a:	697b      	ldr	r3, [r7, #20]
 804889c:	f023 030a 	bic.w	r3, r3, #10
 80488a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80488a2:	697a      	ldr	r2, [r7, #20]
 80488a4:	68bb      	ldr	r3, [r7, #8]
 80488a6:	4313      	orrs	r3, r2
 80488a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80488aa:	68fb      	ldr	r3, [r7, #12]
 80488ac:	693a      	ldr	r2, [r7, #16]
 80488ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80488b0:	68fb      	ldr	r3, [r7, #12]
 80488b2:	697a      	ldr	r2, [r7, #20]
 80488b4:	621a      	str	r2, [r3, #32]
}
 80488b6:	bf00      	nop
 80488b8:	371c      	adds	r7, #28
 80488ba:	46bd      	mov	sp, r7
 80488bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488c0:	4770      	bx	lr

080488c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80488c2:	b480      	push	{r7}
 80488c4:	b087      	sub	sp, #28
 80488c6:	af00      	add	r7, sp, #0
 80488c8:	60f8      	str	r0, [r7, #12]
 80488ca:	60b9      	str	r1, [r7, #8]
 80488cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80488ce:	68fb      	ldr	r3, [r7, #12]
 80488d0:	6a1b      	ldr	r3, [r3, #32]
 80488d2:	f023 0210 	bic.w	r2, r3, #16
 80488d6:	68fb      	ldr	r3, [r7, #12]
 80488d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80488da:	68fb      	ldr	r3, [r7, #12]
 80488dc:	699b      	ldr	r3, [r3, #24]
 80488de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80488e0:	68fb      	ldr	r3, [r7, #12]
 80488e2:	6a1b      	ldr	r3, [r3, #32]
 80488e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80488e6:	697b      	ldr	r3, [r7, #20]
 80488e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80488ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80488ee:	687b      	ldr	r3, [r7, #4]
 80488f0:	031b      	lsls	r3, r3, #12
 80488f2:	697a      	ldr	r2, [r7, #20]
 80488f4:	4313      	orrs	r3, r2
 80488f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80488f8:	693b      	ldr	r3, [r7, #16]
 80488fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80488fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8048900:	68bb      	ldr	r3, [r7, #8]
 8048902:	011b      	lsls	r3, r3, #4
 8048904:	693a      	ldr	r2, [r7, #16]
 8048906:	4313      	orrs	r3, r2
 8048908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 804890a:	68fb      	ldr	r3, [r7, #12]
 804890c:	697a      	ldr	r2, [r7, #20]
 804890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048910:	68fb      	ldr	r3, [r7, #12]
 8048912:	693a      	ldr	r2, [r7, #16]
 8048914:	621a      	str	r2, [r3, #32]
}
 8048916:	bf00      	nop
 8048918:	371c      	adds	r7, #28
 804891a:	46bd      	mov	sp, r7
 804891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048920:	4770      	bx	lr

08048922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8048922:	b480      	push	{r7}
 8048924:	b085      	sub	sp, #20
 8048926:	af00      	add	r7, sp, #0
 8048928:	6078      	str	r0, [r7, #4]
 804892a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 804892c:	687b      	ldr	r3, [r7, #4]
 804892e:	689b      	ldr	r3, [r3, #8]
 8048930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8048932:	68fb      	ldr	r3, [r7, #12]
 8048934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804893a:	683a      	ldr	r2, [r7, #0]
 804893c:	68fb      	ldr	r3, [r7, #12]
 804893e:	4313      	orrs	r3, r2
 8048940:	f043 0307 	orr.w	r3, r3, #7
 8048944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048946:	687b      	ldr	r3, [r7, #4]
 8048948:	68fa      	ldr	r2, [r7, #12]
 804894a:	609a      	str	r2, [r3, #8]
}
 804894c:	bf00      	nop
 804894e:	3714      	adds	r7, #20
 8048950:	46bd      	mov	sp, r7
 8048952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048956:	4770      	bx	lr

08048958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8048958:	b480      	push	{r7}
 804895a:	b087      	sub	sp, #28
 804895c:	af00      	add	r7, sp, #0
 804895e:	60f8      	str	r0, [r7, #12]
 8048960:	60b9      	str	r1, [r7, #8]
 8048962:	607a      	str	r2, [r7, #4]
 8048964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8048966:	68fb      	ldr	r3, [r7, #12]
 8048968:	689b      	ldr	r3, [r3, #8]
 804896a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804896c:	697b      	ldr	r3, [r7, #20]
 804896e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8048974:	683b      	ldr	r3, [r7, #0]
 8048976:	021a      	lsls	r2, r3, #8
 8048978:	687b      	ldr	r3, [r7, #4]
 804897a:	431a      	orrs	r2, r3
 804897c:	68bb      	ldr	r3, [r7, #8]
 804897e:	4313      	orrs	r3, r2
 8048980:	697a      	ldr	r2, [r7, #20]
 8048982:	4313      	orrs	r3, r2
 8048984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048986:	68fb      	ldr	r3, [r7, #12]
 8048988:	697a      	ldr	r2, [r7, #20]
 804898a:	609a      	str	r2, [r3, #8]
}
 804898c:	bf00      	nop
 804898e:	371c      	adds	r7, #28
 8048990:	46bd      	mov	sp, r7
 8048992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048996:	4770      	bx	lr

08048998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8048998:	b480      	push	{r7}
 804899a:	b087      	sub	sp, #28
 804899c:	af00      	add	r7, sp, #0
 804899e:	60f8      	str	r0, [r7, #12]
 80489a0:	60b9      	str	r1, [r7, #8]
 80489a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80489a4:	68bb      	ldr	r3, [r7, #8]
 80489a6:	f003 031f 	and.w	r3, r3, #31
 80489aa:	2201      	movs	r2, #1
 80489ac:	fa02 f303 	lsl.w	r3, r2, r3
 80489b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80489b2:	68fb      	ldr	r3, [r7, #12]
 80489b4:	6a1a      	ldr	r2, [r3, #32]
 80489b6:	697b      	ldr	r3, [r7, #20]
 80489b8:	43db      	mvns	r3, r3
 80489ba:	401a      	ands	r2, r3
 80489bc:	68fb      	ldr	r3, [r7, #12]
 80489be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80489c0:	68fb      	ldr	r3, [r7, #12]
 80489c2:	6a1a      	ldr	r2, [r3, #32]
 80489c4:	68bb      	ldr	r3, [r7, #8]
 80489c6:	f003 031f 	and.w	r3, r3, #31
 80489ca:	6879      	ldr	r1, [r7, #4]
 80489cc:	fa01 f303 	lsl.w	r3, r1, r3
 80489d0:	431a      	orrs	r2, r3
 80489d2:	68fb      	ldr	r3, [r7, #12]
 80489d4:	621a      	str	r2, [r3, #32]
}
 80489d6:	bf00      	nop
 80489d8:	371c      	adds	r7, #28
 80489da:	46bd      	mov	sp, r7
 80489dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489e0:	4770      	bx	lr
	...

080489e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80489e4:	b480      	push	{r7}
 80489e6:	b085      	sub	sp, #20
 80489e8:	af00      	add	r7, sp, #0
 80489ea:	6078      	str	r0, [r7, #4]
 80489ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80489ee:	687b      	ldr	r3, [r7, #4]
 80489f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80489f4:	2b01      	cmp	r3, #1
 80489f6:	d101      	bne.n	80489fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80489f8:	2302      	movs	r3, #2
 80489fa:	e05a      	b.n	8048ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80489fc:	687b      	ldr	r3, [r7, #4]
 80489fe:	2201      	movs	r2, #1
 8048a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048a04:	687b      	ldr	r3, [r7, #4]
 8048a06:	2202      	movs	r2, #2
 8048a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8048a0c:	687b      	ldr	r3, [r7, #4]
 8048a0e:	681b      	ldr	r3, [r3, #0]
 8048a10:	685b      	ldr	r3, [r3, #4]
 8048a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048a14:	687b      	ldr	r3, [r7, #4]
 8048a16:	681b      	ldr	r3, [r3, #0]
 8048a18:	689b      	ldr	r3, [r3, #8]
 8048a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8048a1c:	68fb      	ldr	r3, [r7, #12]
 8048a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8048a24:	683b      	ldr	r3, [r7, #0]
 8048a26:	681b      	ldr	r3, [r3, #0]
 8048a28:	68fa      	ldr	r2, [r7, #12]
 8048a2a:	4313      	orrs	r3, r2
 8048a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8048a2e:	687b      	ldr	r3, [r7, #4]
 8048a30:	681b      	ldr	r3, [r3, #0]
 8048a32:	68fa      	ldr	r2, [r7, #12]
 8048a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048a36:	687b      	ldr	r3, [r7, #4]
 8048a38:	681b      	ldr	r3, [r3, #0]
 8048a3a:	4a21      	ldr	r2, [pc, #132]	; (8048ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8048a3c:	4293      	cmp	r3, r2
 8048a3e:	d022      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a40:	687b      	ldr	r3, [r7, #4]
 8048a42:	681b      	ldr	r3, [r3, #0]
 8048a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048a48:	d01d      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a4a:	687b      	ldr	r3, [r7, #4]
 8048a4c:	681b      	ldr	r3, [r3, #0]
 8048a4e:	4a1d      	ldr	r2, [pc, #116]	; (8048ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048a50:	4293      	cmp	r3, r2
 8048a52:	d018      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a54:	687b      	ldr	r3, [r7, #4]
 8048a56:	681b      	ldr	r3, [r3, #0]
 8048a58:	4a1b      	ldr	r2, [pc, #108]	; (8048ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8048a5a:	4293      	cmp	r3, r2
 8048a5c:	d013      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a5e:	687b      	ldr	r3, [r7, #4]
 8048a60:	681b      	ldr	r3, [r3, #0]
 8048a62:	4a1a      	ldr	r2, [pc, #104]	; (8048acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8048a64:	4293      	cmp	r3, r2
 8048a66:	d00e      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a68:	687b      	ldr	r3, [r7, #4]
 8048a6a:	681b      	ldr	r3, [r3, #0]
 8048a6c:	4a18      	ldr	r2, [pc, #96]	; (8048ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048a6e:	4293      	cmp	r3, r2
 8048a70:	d009      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a72:	687b      	ldr	r3, [r7, #4]
 8048a74:	681b      	ldr	r3, [r3, #0]
 8048a76:	4a17      	ldr	r2, [pc, #92]	; (8048ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048a78:	4293      	cmp	r3, r2
 8048a7a:	d004      	beq.n	8048a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048a7c:	687b      	ldr	r3, [r7, #4]
 8048a7e:	681b      	ldr	r3, [r3, #0]
 8048a80:	4a15      	ldr	r2, [pc, #84]	; (8048ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8048a82:	4293      	cmp	r3, r2
 8048a84:	d10c      	bne.n	8048aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8048a86:	68bb      	ldr	r3, [r7, #8]
 8048a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048a8e:	683b      	ldr	r3, [r7, #0]
 8048a90:	685b      	ldr	r3, [r3, #4]
 8048a92:	68ba      	ldr	r2, [r7, #8]
 8048a94:	4313      	orrs	r3, r2
 8048a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8048a98:	687b      	ldr	r3, [r7, #4]
 8048a9a:	681b      	ldr	r3, [r3, #0]
 8048a9c:	68ba      	ldr	r2, [r7, #8]
 8048a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048aa0:	687b      	ldr	r3, [r7, #4]
 8048aa2:	2201      	movs	r2, #1
 8048aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048aa8:	687b      	ldr	r3, [r7, #4]
 8048aaa:	2200      	movs	r2, #0
 8048aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048ab0:	2300      	movs	r3, #0
}
 8048ab2:	4618      	mov	r0, r3
 8048ab4:	3714      	adds	r7, #20
 8048ab6:	46bd      	mov	sp, r7
 8048ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048abc:	4770      	bx	lr
 8048abe:	bf00      	nop
 8048ac0:	40010000 	.word	0x40010000
 8048ac4:	40000400 	.word	0x40000400
 8048ac8:	40000800 	.word	0x40000800
 8048acc:	40000c00 	.word	0x40000c00
 8048ad0:	40010400 	.word	0x40010400
 8048ad4:	40014000 	.word	0x40014000
 8048ad8:	40001800 	.word	0x40001800

08048adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048adc:	b480      	push	{r7}
 8048ade:	b083      	sub	sp, #12
 8048ae0:	af00      	add	r7, sp, #0
 8048ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048ae4:	bf00      	nop
 8048ae6:	370c      	adds	r7, #12
 8048ae8:	46bd      	mov	sp, r7
 8048aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048aee:	4770      	bx	lr

08048af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048af0:	b480      	push	{r7}
 8048af2:	b083      	sub	sp, #12
 8048af4:	af00      	add	r7, sp, #0
 8048af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048af8:	bf00      	nop
 8048afa:	370c      	adds	r7, #12
 8048afc:	46bd      	mov	sp, r7
 8048afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b02:	4770      	bx	lr

08048b04 <arm_pid_init_f32>:
 8048b04:	edd0 6a08 	vldr	s13, [r0, #32]
 8048b08:	edd0 7a06 	vldr	s15, [r0, #24]
 8048b0c:	ed90 7a07 	vldr	s14, [r0, #28]
 8048b10:	edc0 6a02 	vstr	s13, [r0, #8]
 8048b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8048b18:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8048b1c:	eef1 7a67 	vneg.f32	s15, s15
 8048b20:	ee37 7a26 	vadd.f32	s14, s14, s13
 8048b24:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8048b28:	ed80 7a00 	vstr	s14, [r0]
 8048b2c:	edc0 7a01 	vstr	s15, [r0, #4]
 8048b30:	b161      	cbz	r1, 8048b4c <arm_pid_init_f32+0x48>
 8048b32:	2300      	movs	r3, #0
 8048b34:	7303      	strb	r3, [r0, #12]
 8048b36:	7343      	strb	r3, [r0, #13]
 8048b38:	7383      	strb	r3, [r0, #14]
 8048b3a:	73c3      	strb	r3, [r0, #15]
 8048b3c:	7403      	strb	r3, [r0, #16]
 8048b3e:	7443      	strb	r3, [r0, #17]
 8048b40:	7483      	strb	r3, [r0, #18]
 8048b42:	74c3      	strb	r3, [r0, #19]
 8048b44:	7503      	strb	r3, [r0, #20]
 8048b46:	7543      	strb	r3, [r0, #21]
 8048b48:	7583      	strb	r3, [r0, #22]
 8048b4a:	75c3      	strb	r3, [r0, #23]
 8048b4c:	4770      	bx	lr
 8048b4e:	bf00      	nop

08048b50 <__errno>:
 8048b50:	4b01      	ldr	r3, [pc, #4]	; (8048b58 <__errno+0x8>)
 8048b52:	6818      	ldr	r0, [r3, #0]
 8048b54:	4770      	bx	lr
 8048b56:	bf00      	nop
 8048b58:	20000014 	.word	0x20000014

08048b5c <__libc_init_array>:
 8048b5c:	b570      	push	{r4, r5, r6, lr}
 8048b5e:	4d0d      	ldr	r5, [pc, #52]	; (8048b94 <__libc_init_array+0x38>)
 8048b60:	4c0d      	ldr	r4, [pc, #52]	; (8048b98 <__libc_init_array+0x3c>)
 8048b62:	1b64      	subs	r4, r4, r5
 8048b64:	10a4      	asrs	r4, r4, #2
 8048b66:	2600      	movs	r6, #0
 8048b68:	42a6      	cmp	r6, r4
 8048b6a:	d109      	bne.n	8048b80 <__libc_init_array+0x24>
 8048b6c:	4d0b      	ldr	r5, [pc, #44]	; (8048b9c <__libc_init_array+0x40>)
 8048b6e:	4c0c      	ldr	r4, [pc, #48]	; (8048ba0 <__libc_init_array+0x44>)
 8048b70:	f005 fbec 	bl	804e34c <_init>
 8048b74:	1b64      	subs	r4, r4, r5
 8048b76:	10a4      	asrs	r4, r4, #2
 8048b78:	2600      	movs	r6, #0
 8048b7a:	42a6      	cmp	r6, r4
 8048b7c:	d105      	bne.n	8048b8a <__libc_init_array+0x2e>
 8048b7e:	bd70      	pop	{r4, r5, r6, pc}
 8048b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8048b84:	4798      	blx	r3
 8048b86:	3601      	adds	r6, #1
 8048b88:	e7ee      	b.n	8048b68 <__libc_init_array+0xc>
 8048b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8048b8e:	4798      	blx	r3
 8048b90:	3601      	adds	r6, #1
 8048b92:	e7f2      	b.n	8048b7a <__libc_init_array+0x1e>
 8048b94:	0804ea20 	.word	0x0804ea20
 8048b98:	0804ea20 	.word	0x0804ea20
 8048b9c:	0804ea20 	.word	0x0804ea20
 8048ba0:	0804ea24 	.word	0x0804ea24

08048ba4 <memcpy>:
 8048ba4:	440a      	add	r2, r1
 8048ba6:	4291      	cmp	r1, r2
 8048ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8048bac:	d100      	bne.n	8048bb0 <memcpy+0xc>
 8048bae:	4770      	bx	lr
 8048bb0:	b510      	push	{r4, lr}
 8048bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8048bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8048bba:	4291      	cmp	r1, r2
 8048bbc:	d1f9      	bne.n	8048bb2 <memcpy+0xe>
 8048bbe:	bd10      	pop	{r4, pc}

08048bc0 <memset>:
 8048bc0:	4402      	add	r2, r0
 8048bc2:	4603      	mov	r3, r0
 8048bc4:	4293      	cmp	r3, r2
 8048bc6:	d100      	bne.n	8048bca <memset+0xa>
 8048bc8:	4770      	bx	lr
 8048bca:	f803 1b01 	strb.w	r1, [r3], #1
 8048bce:	e7f9      	b.n	8048bc4 <memset+0x4>

08048bd0 <__cvt>:
 8048bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8048bd4:	ec55 4b10 	vmov	r4, r5, d0
 8048bd8:	2d00      	cmp	r5, #0
 8048bda:	460e      	mov	r6, r1
 8048bdc:	4619      	mov	r1, r3
 8048bde:	462b      	mov	r3, r5
 8048be0:	bfbb      	ittet	lt
 8048be2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8048be6:	461d      	movlt	r5, r3
 8048be8:	2300      	movge	r3, #0
 8048bea:	232d      	movlt	r3, #45	; 0x2d
 8048bec:	700b      	strb	r3, [r1, #0]
 8048bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8048bf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8048bf4:	4691      	mov	r9, r2
 8048bf6:	f023 0820 	bic.w	r8, r3, #32
 8048bfa:	bfbc      	itt	lt
 8048bfc:	4622      	movlt	r2, r4
 8048bfe:	4614      	movlt	r4, r2
 8048c00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8048c04:	d005      	beq.n	8048c12 <__cvt+0x42>
 8048c06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8048c0a:	d100      	bne.n	8048c0e <__cvt+0x3e>
 8048c0c:	3601      	adds	r6, #1
 8048c0e:	2102      	movs	r1, #2
 8048c10:	e000      	b.n	8048c14 <__cvt+0x44>
 8048c12:	2103      	movs	r1, #3
 8048c14:	ab03      	add	r3, sp, #12
 8048c16:	9301      	str	r3, [sp, #4]
 8048c18:	ab02      	add	r3, sp, #8
 8048c1a:	9300      	str	r3, [sp, #0]
 8048c1c:	ec45 4b10 	vmov	d0, r4, r5
 8048c20:	4653      	mov	r3, sl
 8048c22:	4632      	mov	r2, r6
 8048c24:	f001 fdf0 	bl	804a808 <_dtoa_r>
 8048c28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8048c2c:	4607      	mov	r7, r0
 8048c2e:	d102      	bne.n	8048c36 <__cvt+0x66>
 8048c30:	f019 0f01 	tst.w	r9, #1
 8048c34:	d022      	beq.n	8048c7c <__cvt+0xac>
 8048c36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8048c3a:	eb07 0906 	add.w	r9, r7, r6
 8048c3e:	d110      	bne.n	8048c62 <__cvt+0x92>
 8048c40:	783b      	ldrb	r3, [r7, #0]
 8048c42:	2b30      	cmp	r3, #48	; 0x30
 8048c44:	d10a      	bne.n	8048c5c <__cvt+0x8c>
 8048c46:	2200      	movs	r2, #0
 8048c48:	2300      	movs	r3, #0
 8048c4a:	4620      	mov	r0, r4
 8048c4c:	4629      	mov	r1, r5
 8048c4e:	f7f7 ff3b 	bl	8040ac8 <__aeabi_dcmpeq>
 8048c52:	b918      	cbnz	r0, 8048c5c <__cvt+0x8c>
 8048c54:	f1c6 0601 	rsb	r6, r6, #1
 8048c58:	f8ca 6000 	str.w	r6, [sl]
 8048c5c:	f8da 3000 	ldr.w	r3, [sl]
 8048c60:	4499      	add	r9, r3
 8048c62:	2200      	movs	r2, #0
 8048c64:	2300      	movs	r3, #0
 8048c66:	4620      	mov	r0, r4
 8048c68:	4629      	mov	r1, r5
 8048c6a:	f7f7 ff2d 	bl	8040ac8 <__aeabi_dcmpeq>
 8048c6e:	b108      	cbz	r0, 8048c74 <__cvt+0xa4>
 8048c70:	f8cd 900c 	str.w	r9, [sp, #12]
 8048c74:	2230      	movs	r2, #48	; 0x30
 8048c76:	9b03      	ldr	r3, [sp, #12]
 8048c78:	454b      	cmp	r3, r9
 8048c7a:	d307      	bcc.n	8048c8c <__cvt+0xbc>
 8048c7c:	9b03      	ldr	r3, [sp, #12]
 8048c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8048c80:	1bdb      	subs	r3, r3, r7
 8048c82:	4638      	mov	r0, r7
 8048c84:	6013      	str	r3, [r2, #0]
 8048c86:	b004      	add	sp, #16
 8048c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048c8c:	1c59      	adds	r1, r3, #1
 8048c8e:	9103      	str	r1, [sp, #12]
 8048c90:	701a      	strb	r2, [r3, #0]
 8048c92:	e7f0      	b.n	8048c76 <__cvt+0xa6>

08048c94 <__exponent>:
 8048c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8048c96:	4603      	mov	r3, r0
 8048c98:	2900      	cmp	r1, #0
 8048c9a:	bfb8      	it	lt
 8048c9c:	4249      	neglt	r1, r1
 8048c9e:	f803 2b02 	strb.w	r2, [r3], #2
 8048ca2:	bfb4      	ite	lt
 8048ca4:	222d      	movlt	r2, #45	; 0x2d
 8048ca6:	222b      	movge	r2, #43	; 0x2b
 8048ca8:	2909      	cmp	r1, #9
 8048caa:	7042      	strb	r2, [r0, #1]
 8048cac:	dd2a      	ble.n	8048d04 <__exponent+0x70>
 8048cae:	f10d 0407 	add.w	r4, sp, #7
 8048cb2:	46a4      	mov	ip, r4
 8048cb4:	270a      	movs	r7, #10
 8048cb6:	46a6      	mov	lr, r4
 8048cb8:	460a      	mov	r2, r1
 8048cba:	fb91 f6f7 	sdiv	r6, r1, r7
 8048cbe:	fb07 1516 	mls	r5, r7, r6, r1
 8048cc2:	3530      	adds	r5, #48	; 0x30
 8048cc4:	2a63      	cmp	r2, #99	; 0x63
 8048cc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8048cca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8048cce:	4631      	mov	r1, r6
 8048cd0:	dcf1      	bgt.n	8048cb6 <__exponent+0x22>
 8048cd2:	3130      	adds	r1, #48	; 0x30
 8048cd4:	f1ae 0502 	sub.w	r5, lr, #2
 8048cd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8048cdc:	1c44      	adds	r4, r0, #1
 8048cde:	4629      	mov	r1, r5
 8048ce0:	4561      	cmp	r1, ip
 8048ce2:	d30a      	bcc.n	8048cfa <__exponent+0x66>
 8048ce4:	f10d 0209 	add.w	r2, sp, #9
 8048ce8:	eba2 020e 	sub.w	r2, r2, lr
 8048cec:	4565      	cmp	r5, ip
 8048cee:	bf88      	it	hi
 8048cf0:	2200      	movhi	r2, #0
 8048cf2:	4413      	add	r3, r2
 8048cf4:	1a18      	subs	r0, r3, r0
 8048cf6:	b003      	add	sp, #12
 8048cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8048cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8048cfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8048d02:	e7ed      	b.n	8048ce0 <__exponent+0x4c>
 8048d04:	2330      	movs	r3, #48	; 0x30
 8048d06:	3130      	adds	r1, #48	; 0x30
 8048d08:	7083      	strb	r3, [r0, #2]
 8048d0a:	70c1      	strb	r1, [r0, #3]
 8048d0c:	1d03      	adds	r3, r0, #4
 8048d0e:	e7f1      	b.n	8048cf4 <__exponent+0x60>

08048d10 <_printf_float>:
 8048d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048d14:	ed2d 8b02 	vpush	{d8}
 8048d18:	b08d      	sub	sp, #52	; 0x34
 8048d1a:	460c      	mov	r4, r1
 8048d1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8048d20:	4616      	mov	r6, r2
 8048d22:	461f      	mov	r7, r3
 8048d24:	4605      	mov	r5, r0
 8048d26:	f002 fecd 	bl	804bac4 <_localeconv_r>
 8048d2a:	f8d0 a000 	ldr.w	sl, [r0]
 8048d2e:	4650      	mov	r0, sl
 8048d30:	f7f7 fa4e 	bl	80401d0 <strlen>
 8048d34:	2300      	movs	r3, #0
 8048d36:	930a      	str	r3, [sp, #40]	; 0x28
 8048d38:	6823      	ldr	r3, [r4, #0]
 8048d3a:	9305      	str	r3, [sp, #20]
 8048d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8048d40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8048d44:	3307      	adds	r3, #7
 8048d46:	f023 0307 	bic.w	r3, r3, #7
 8048d4a:	f103 0208 	add.w	r2, r3, #8
 8048d4e:	f8c8 2000 	str.w	r2, [r8]
 8048d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048d56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8048d5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8048d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8048d62:	9307      	str	r3, [sp, #28]
 8048d64:	f8cd 8018 	str.w	r8, [sp, #24]
 8048d68:	ee08 0a10 	vmov	s16, r0
 8048d6c:	4b9f      	ldr	r3, [pc, #636]	; (8048fec <_printf_float+0x2dc>)
 8048d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8048d72:	f04f 32ff 	mov.w	r2, #4294967295
 8048d76:	f7f7 fed9 	bl	8040b2c <__aeabi_dcmpun>
 8048d7a:	bb88      	cbnz	r0, 8048de0 <_printf_float+0xd0>
 8048d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8048d80:	4b9a      	ldr	r3, [pc, #616]	; (8048fec <_printf_float+0x2dc>)
 8048d82:	f04f 32ff 	mov.w	r2, #4294967295
 8048d86:	f7f7 feb3 	bl	8040af0 <__aeabi_dcmple>
 8048d8a:	bb48      	cbnz	r0, 8048de0 <_printf_float+0xd0>
 8048d8c:	2200      	movs	r2, #0
 8048d8e:	2300      	movs	r3, #0
 8048d90:	4640      	mov	r0, r8
 8048d92:	4649      	mov	r1, r9
 8048d94:	f7f7 fea2 	bl	8040adc <__aeabi_dcmplt>
 8048d98:	b110      	cbz	r0, 8048da0 <_printf_float+0x90>
 8048d9a:	232d      	movs	r3, #45	; 0x2d
 8048d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048da0:	4b93      	ldr	r3, [pc, #588]	; (8048ff0 <_printf_float+0x2e0>)
 8048da2:	4894      	ldr	r0, [pc, #592]	; (8048ff4 <_printf_float+0x2e4>)
 8048da4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8048da8:	bf94      	ite	ls
 8048daa:	4698      	movls	r8, r3
 8048dac:	4680      	movhi	r8, r0
 8048dae:	2303      	movs	r3, #3
 8048db0:	6123      	str	r3, [r4, #16]
 8048db2:	9b05      	ldr	r3, [sp, #20]
 8048db4:	f023 0204 	bic.w	r2, r3, #4
 8048db8:	6022      	str	r2, [r4, #0]
 8048dba:	f04f 0900 	mov.w	r9, #0
 8048dbe:	9700      	str	r7, [sp, #0]
 8048dc0:	4633      	mov	r3, r6
 8048dc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8048dc4:	4621      	mov	r1, r4
 8048dc6:	4628      	mov	r0, r5
 8048dc8:	f000 f9d8 	bl	804917c <_printf_common>
 8048dcc:	3001      	adds	r0, #1
 8048dce:	f040 8090 	bne.w	8048ef2 <_printf_float+0x1e2>
 8048dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8048dd6:	b00d      	add	sp, #52	; 0x34
 8048dd8:	ecbd 8b02 	vpop	{d8}
 8048ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048de0:	4642      	mov	r2, r8
 8048de2:	464b      	mov	r3, r9
 8048de4:	4640      	mov	r0, r8
 8048de6:	4649      	mov	r1, r9
 8048de8:	f7f7 fea0 	bl	8040b2c <__aeabi_dcmpun>
 8048dec:	b140      	cbz	r0, 8048e00 <_printf_float+0xf0>
 8048dee:	464b      	mov	r3, r9
 8048df0:	2b00      	cmp	r3, #0
 8048df2:	bfbc      	itt	lt
 8048df4:	232d      	movlt	r3, #45	; 0x2d
 8048df6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8048dfa:	487f      	ldr	r0, [pc, #508]	; (8048ff8 <_printf_float+0x2e8>)
 8048dfc:	4b7f      	ldr	r3, [pc, #508]	; (8048ffc <_printf_float+0x2ec>)
 8048dfe:	e7d1      	b.n	8048da4 <_printf_float+0x94>
 8048e00:	6863      	ldr	r3, [r4, #4]
 8048e02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8048e06:	9206      	str	r2, [sp, #24]
 8048e08:	1c5a      	adds	r2, r3, #1
 8048e0a:	d13f      	bne.n	8048e8c <_printf_float+0x17c>
 8048e0c:	2306      	movs	r3, #6
 8048e0e:	6063      	str	r3, [r4, #4]
 8048e10:	9b05      	ldr	r3, [sp, #20]
 8048e12:	6861      	ldr	r1, [r4, #4]
 8048e14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8048e18:	2300      	movs	r3, #0
 8048e1a:	9303      	str	r3, [sp, #12]
 8048e1c:	ab0a      	add	r3, sp, #40	; 0x28
 8048e1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8048e22:	ab09      	add	r3, sp, #36	; 0x24
 8048e24:	ec49 8b10 	vmov	d0, r8, r9
 8048e28:	9300      	str	r3, [sp, #0]
 8048e2a:	6022      	str	r2, [r4, #0]
 8048e2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8048e30:	4628      	mov	r0, r5
 8048e32:	f7ff fecd 	bl	8048bd0 <__cvt>
 8048e36:	9b06      	ldr	r3, [sp, #24]
 8048e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048e3a:	2b47      	cmp	r3, #71	; 0x47
 8048e3c:	4680      	mov	r8, r0
 8048e3e:	d108      	bne.n	8048e52 <_printf_float+0x142>
 8048e40:	1cc8      	adds	r0, r1, #3
 8048e42:	db02      	blt.n	8048e4a <_printf_float+0x13a>
 8048e44:	6863      	ldr	r3, [r4, #4]
 8048e46:	4299      	cmp	r1, r3
 8048e48:	dd41      	ble.n	8048ece <_printf_float+0x1be>
 8048e4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8048e4e:	fa5f fb8b 	uxtb.w	fp, fp
 8048e52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8048e56:	d820      	bhi.n	8048e9a <_printf_float+0x18a>
 8048e58:	3901      	subs	r1, #1
 8048e5a:	465a      	mov	r2, fp
 8048e5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8048e60:	9109      	str	r1, [sp, #36]	; 0x24
 8048e62:	f7ff ff17 	bl	8048c94 <__exponent>
 8048e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048e68:	1813      	adds	r3, r2, r0
 8048e6a:	2a01      	cmp	r2, #1
 8048e6c:	4681      	mov	r9, r0
 8048e6e:	6123      	str	r3, [r4, #16]
 8048e70:	dc02      	bgt.n	8048e78 <_printf_float+0x168>
 8048e72:	6822      	ldr	r2, [r4, #0]
 8048e74:	07d2      	lsls	r2, r2, #31
 8048e76:	d501      	bpl.n	8048e7c <_printf_float+0x16c>
 8048e78:	3301      	adds	r3, #1
 8048e7a:	6123      	str	r3, [r4, #16]
 8048e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8048e80:	2b00      	cmp	r3, #0
 8048e82:	d09c      	beq.n	8048dbe <_printf_float+0xae>
 8048e84:	232d      	movs	r3, #45	; 0x2d
 8048e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048e8a:	e798      	b.n	8048dbe <_printf_float+0xae>
 8048e8c:	9a06      	ldr	r2, [sp, #24]
 8048e8e:	2a47      	cmp	r2, #71	; 0x47
 8048e90:	d1be      	bne.n	8048e10 <_printf_float+0x100>
 8048e92:	2b00      	cmp	r3, #0
 8048e94:	d1bc      	bne.n	8048e10 <_printf_float+0x100>
 8048e96:	2301      	movs	r3, #1
 8048e98:	e7b9      	b.n	8048e0e <_printf_float+0xfe>
 8048e9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8048e9e:	d118      	bne.n	8048ed2 <_printf_float+0x1c2>
 8048ea0:	2900      	cmp	r1, #0
 8048ea2:	6863      	ldr	r3, [r4, #4]
 8048ea4:	dd0b      	ble.n	8048ebe <_printf_float+0x1ae>
 8048ea6:	6121      	str	r1, [r4, #16]
 8048ea8:	b913      	cbnz	r3, 8048eb0 <_printf_float+0x1a0>
 8048eaa:	6822      	ldr	r2, [r4, #0]
 8048eac:	07d0      	lsls	r0, r2, #31
 8048eae:	d502      	bpl.n	8048eb6 <_printf_float+0x1a6>
 8048eb0:	3301      	adds	r3, #1
 8048eb2:	440b      	add	r3, r1
 8048eb4:	6123      	str	r3, [r4, #16]
 8048eb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8048eb8:	f04f 0900 	mov.w	r9, #0
 8048ebc:	e7de      	b.n	8048e7c <_printf_float+0x16c>
 8048ebe:	b913      	cbnz	r3, 8048ec6 <_printf_float+0x1b6>
 8048ec0:	6822      	ldr	r2, [r4, #0]
 8048ec2:	07d2      	lsls	r2, r2, #31
 8048ec4:	d501      	bpl.n	8048eca <_printf_float+0x1ba>
 8048ec6:	3302      	adds	r3, #2
 8048ec8:	e7f4      	b.n	8048eb4 <_printf_float+0x1a4>
 8048eca:	2301      	movs	r3, #1
 8048ecc:	e7f2      	b.n	8048eb4 <_printf_float+0x1a4>
 8048ece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8048ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048ed4:	4299      	cmp	r1, r3
 8048ed6:	db05      	blt.n	8048ee4 <_printf_float+0x1d4>
 8048ed8:	6823      	ldr	r3, [r4, #0]
 8048eda:	6121      	str	r1, [r4, #16]
 8048edc:	07d8      	lsls	r0, r3, #31
 8048ede:	d5ea      	bpl.n	8048eb6 <_printf_float+0x1a6>
 8048ee0:	1c4b      	adds	r3, r1, #1
 8048ee2:	e7e7      	b.n	8048eb4 <_printf_float+0x1a4>
 8048ee4:	2900      	cmp	r1, #0
 8048ee6:	bfd4      	ite	le
 8048ee8:	f1c1 0202 	rsble	r2, r1, #2
 8048eec:	2201      	movgt	r2, #1
 8048eee:	4413      	add	r3, r2
 8048ef0:	e7e0      	b.n	8048eb4 <_printf_float+0x1a4>
 8048ef2:	6823      	ldr	r3, [r4, #0]
 8048ef4:	055a      	lsls	r2, r3, #21
 8048ef6:	d407      	bmi.n	8048f08 <_printf_float+0x1f8>
 8048ef8:	6923      	ldr	r3, [r4, #16]
 8048efa:	4642      	mov	r2, r8
 8048efc:	4631      	mov	r1, r6
 8048efe:	4628      	mov	r0, r5
 8048f00:	47b8      	blx	r7
 8048f02:	3001      	adds	r0, #1
 8048f04:	d12c      	bne.n	8048f60 <_printf_float+0x250>
 8048f06:	e764      	b.n	8048dd2 <_printf_float+0xc2>
 8048f08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8048f0c:	f240 80e0 	bls.w	80490d0 <_printf_float+0x3c0>
 8048f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8048f14:	2200      	movs	r2, #0
 8048f16:	2300      	movs	r3, #0
 8048f18:	f7f7 fdd6 	bl	8040ac8 <__aeabi_dcmpeq>
 8048f1c:	2800      	cmp	r0, #0
 8048f1e:	d034      	beq.n	8048f8a <_printf_float+0x27a>
 8048f20:	4a37      	ldr	r2, [pc, #220]	; (8049000 <_printf_float+0x2f0>)
 8048f22:	2301      	movs	r3, #1
 8048f24:	4631      	mov	r1, r6
 8048f26:	4628      	mov	r0, r5
 8048f28:	47b8      	blx	r7
 8048f2a:	3001      	adds	r0, #1
 8048f2c:	f43f af51 	beq.w	8048dd2 <_printf_float+0xc2>
 8048f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048f34:	429a      	cmp	r2, r3
 8048f36:	db02      	blt.n	8048f3e <_printf_float+0x22e>
 8048f38:	6823      	ldr	r3, [r4, #0]
 8048f3a:	07d8      	lsls	r0, r3, #31
 8048f3c:	d510      	bpl.n	8048f60 <_printf_float+0x250>
 8048f3e:	ee18 3a10 	vmov	r3, s16
 8048f42:	4652      	mov	r2, sl
 8048f44:	4631      	mov	r1, r6
 8048f46:	4628      	mov	r0, r5
 8048f48:	47b8      	blx	r7
 8048f4a:	3001      	adds	r0, #1
 8048f4c:	f43f af41 	beq.w	8048dd2 <_printf_float+0xc2>
 8048f50:	f04f 0800 	mov.w	r8, #0
 8048f54:	f104 091a 	add.w	r9, r4, #26
 8048f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048f5a:	3b01      	subs	r3, #1
 8048f5c:	4543      	cmp	r3, r8
 8048f5e:	dc09      	bgt.n	8048f74 <_printf_float+0x264>
 8048f60:	6823      	ldr	r3, [r4, #0]
 8048f62:	079b      	lsls	r3, r3, #30
 8048f64:	f100 8105 	bmi.w	8049172 <_printf_float+0x462>
 8048f68:	68e0      	ldr	r0, [r4, #12]
 8048f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048f6c:	4298      	cmp	r0, r3
 8048f6e:	bfb8      	it	lt
 8048f70:	4618      	movlt	r0, r3
 8048f72:	e730      	b.n	8048dd6 <_printf_float+0xc6>
 8048f74:	2301      	movs	r3, #1
 8048f76:	464a      	mov	r2, r9
 8048f78:	4631      	mov	r1, r6
 8048f7a:	4628      	mov	r0, r5
 8048f7c:	47b8      	blx	r7
 8048f7e:	3001      	adds	r0, #1
 8048f80:	f43f af27 	beq.w	8048dd2 <_printf_float+0xc2>
 8048f84:	f108 0801 	add.w	r8, r8, #1
 8048f88:	e7e6      	b.n	8048f58 <_printf_float+0x248>
 8048f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048f8c:	2b00      	cmp	r3, #0
 8048f8e:	dc39      	bgt.n	8049004 <_printf_float+0x2f4>
 8048f90:	4a1b      	ldr	r2, [pc, #108]	; (8049000 <_printf_float+0x2f0>)
 8048f92:	2301      	movs	r3, #1
 8048f94:	4631      	mov	r1, r6
 8048f96:	4628      	mov	r0, r5
 8048f98:	47b8      	blx	r7
 8048f9a:	3001      	adds	r0, #1
 8048f9c:	f43f af19 	beq.w	8048dd2 <_printf_float+0xc2>
 8048fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048fa4:	4313      	orrs	r3, r2
 8048fa6:	d102      	bne.n	8048fae <_printf_float+0x29e>
 8048fa8:	6823      	ldr	r3, [r4, #0]
 8048faa:	07d9      	lsls	r1, r3, #31
 8048fac:	d5d8      	bpl.n	8048f60 <_printf_float+0x250>
 8048fae:	ee18 3a10 	vmov	r3, s16
 8048fb2:	4652      	mov	r2, sl
 8048fb4:	4631      	mov	r1, r6
 8048fb6:	4628      	mov	r0, r5
 8048fb8:	47b8      	blx	r7
 8048fba:	3001      	adds	r0, #1
 8048fbc:	f43f af09 	beq.w	8048dd2 <_printf_float+0xc2>
 8048fc0:	f04f 0900 	mov.w	r9, #0
 8048fc4:	f104 0a1a 	add.w	sl, r4, #26
 8048fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048fca:	425b      	negs	r3, r3
 8048fcc:	454b      	cmp	r3, r9
 8048fce:	dc01      	bgt.n	8048fd4 <_printf_float+0x2c4>
 8048fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048fd2:	e792      	b.n	8048efa <_printf_float+0x1ea>
 8048fd4:	2301      	movs	r3, #1
 8048fd6:	4652      	mov	r2, sl
 8048fd8:	4631      	mov	r1, r6
 8048fda:	4628      	mov	r0, r5
 8048fdc:	47b8      	blx	r7
 8048fde:	3001      	adds	r0, #1
 8048fe0:	f43f aef7 	beq.w	8048dd2 <_printf_float+0xc2>
 8048fe4:	f109 0901 	add.w	r9, r9, #1
 8048fe8:	e7ee      	b.n	8048fc8 <_printf_float+0x2b8>
 8048fea:	bf00      	nop
 8048fec:	7fefffff 	.word	0x7fefffff
 8048ff0:	0804e51c 	.word	0x0804e51c
 8048ff4:	0804e520 	.word	0x0804e520
 8048ff8:	0804e528 	.word	0x0804e528
 8048ffc:	0804e524 	.word	0x0804e524
 8049000:	0804e52c 	.word	0x0804e52c
 8049004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8049006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8049008:	429a      	cmp	r2, r3
 804900a:	bfa8      	it	ge
 804900c:	461a      	movge	r2, r3
 804900e:	2a00      	cmp	r2, #0
 8049010:	4691      	mov	r9, r2
 8049012:	dc37      	bgt.n	8049084 <_printf_float+0x374>
 8049014:	f04f 0b00 	mov.w	fp, #0
 8049018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 804901c:	f104 021a 	add.w	r2, r4, #26
 8049020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8049022:	9305      	str	r3, [sp, #20]
 8049024:	eba3 0309 	sub.w	r3, r3, r9
 8049028:	455b      	cmp	r3, fp
 804902a:	dc33      	bgt.n	8049094 <_printf_float+0x384>
 804902c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8049030:	429a      	cmp	r2, r3
 8049032:	db3b      	blt.n	80490ac <_printf_float+0x39c>
 8049034:	6823      	ldr	r3, [r4, #0]
 8049036:	07da      	lsls	r2, r3, #31
 8049038:	d438      	bmi.n	80490ac <_printf_float+0x39c>
 804903a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804903c:	9a05      	ldr	r2, [sp, #20]
 804903e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8049040:	1a9a      	subs	r2, r3, r2
 8049042:	eba3 0901 	sub.w	r9, r3, r1
 8049046:	4591      	cmp	r9, r2
 8049048:	bfa8      	it	ge
 804904a:	4691      	movge	r9, r2
 804904c:	f1b9 0f00 	cmp.w	r9, #0
 8049050:	dc35      	bgt.n	80490be <_printf_float+0x3ae>
 8049052:	f04f 0800 	mov.w	r8, #0
 8049056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 804905a:	f104 0a1a 	add.w	sl, r4, #26
 804905e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8049062:	1a9b      	subs	r3, r3, r2
 8049064:	eba3 0309 	sub.w	r3, r3, r9
 8049068:	4543      	cmp	r3, r8
 804906a:	f77f af79 	ble.w	8048f60 <_printf_float+0x250>
 804906e:	2301      	movs	r3, #1
 8049070:	4652      	mov	r2, sl
 8049072:	4631      	mov	r1, r6
 8049074:	4628      	mov	r0, r5
 8049076:	47b8      	blx	r7
 8049078:	3001      	adds	r0, #1
 804907a:	f43f aeaa 	beq.w	8048dd2 <_printf_float+0xc2>
 804907e:	f108 0801 	add.w	r8, r8, #1
 8049082:	e7ec      	b.n	804905e <_printf_float+0x34e>
 8049084:	4613      	mov	r3, r2
 8049086:	4631      	mov	r1, r6
 8049088:	4642      	mov	r2, r8
 804908a:	4628      	mov	r0, r5
 804908c:	47b8      	blx	r7
 804908e:	3001      	adds	r0, #1
 8049090:	d1c0      	bne.n	8049014 <_printf_float+0x304>
 8049092:	e69e      	b.n	8048dd2 <_printf_float+0xc2>
 8049094:	2301      	movs	r3, #1
 8049096:	4631      	mov	r1, r6
 8049098:	4628      	mov	r0, r5
 804909a:	9205      	str	r2, [sp, #20]
 804909c:	47b8      	blx	r7
 804909e:	3001      	adds	r0, #1
 80490a0:	f43f ae97 	beq.w	8048dd2 <_printf_float+0xc2>
 80490a4:	9a05      	ldr	r2, [sp, #20]
 80490a6:	f10b 0b01 	add.w	fp, fp, #1
 80490aa:	e7b9      	b.n	8049020 <_printf_float+0x310>
 80490ac:	ee18 3a10 	vmov	r3, s16
 80490b0:	4652      	mov	r2, sl
 80490b2:	4631      	mov	r1, r6
 80490b4:	4628      	mov	r0, r5
 80490b6:	47b8      	blx	r7
 80490b8:	3001      	adds	r0, #1
 80490ba:	d1be      	bne.n	804903a <_printf_float+0x32a>
 80490bc:	e689      	b.n	8048dd2 <_printf_float+0xc2>
 80490be:	9a05      	ldr	r2, [sp, #20]
 80490c0:	464b      	mov	r3, r9
 80490c2:	4442      	add	r2, r8
 80490c4:	4631      	mov	r1, r6
 80490c6:	4628      	mov	r0, r5
 80490c8:	47b8      	blx	r7
 80490ca:	3001      	adds	r0, #1
 80490cc:	d1c1      	bne.n	8049052 <_printf_float+0x342>
 80490ce:	e680      	b.n	8048dd2 <_printf_float+0xc2>
 80490d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80490d2:	2a01      	cmp	r2, #1
 80490d4:	dc01      	bgt.n	80490da <_printf_float+0x3ca>
 80490d6:	07db      	lsls	r3, r3, #31
 80490d8:	d538      	bpl.n	804914c <_printf_float+0x43c>
 80490da:	2301      	movs	r3, #1
 80490dc:	4642      	mov	r2, r8
 80490de:	4631      	mov	r1, r6
 80490e0:	4628      	mov	r0, r5
 80490e2:	47b8      	blx	r7
 80490e4:	3001      	adds	r0, #1
 80490e6:	f43f ae74 	beq.w	8048dd2 <_printf_float+0xc2>
 80490ea:	ee18 3a10 	vmov	r3, s16
 80490ee:	4652      	mov	r2, sl
 80490f0:	4631      	mov	r1, r6
 80490f2:	4628      	mov	r0, r5
 80490f4:	47b8      	blx	r7
 80490f6:	3001      	adds	r0, #1
 80490f8:	f43f ae6b 	beq.w	8048dd2 <_printf_float+0xc2>
 80490fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8049100:	2200      	movs	r2, #0
 8049102:	2300      	movs	r3, #0
 8049104:	f7f7 fce0 	bl	8040ac8 <__aeabi_dcmpeq>
 8049108:	b9d8      	cbnz	r0, 8049142 <_printf_float+0x432>
 804910a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804910c:	f108 0201 	add.w	r2, r8, #1
 8049110:	3b01      	subs	r3, #1
 8049112:	4631      	mov	r1, r6
 8049114:	4628      	mov	r0, r5
 8049116:	47b8      	blx	r7
 8049118:	3001      	adds	r0, #1
 804911a:	d10e      	bne.n	804913a <_printf_float+0x42a>
 804911c:	e659      	b.n	8048dd2 <_printf_float+0xc2>
 804911e:	2301      	movs	r3, #1
 8049120:	4652      	mov	r2, sl
 8049122:	4631      	mov	r1, r6
 8049124:	4628      	mov	r0, r5
 8049126:	47b8      	blx	r7
 8049128:	3001      	adds	r0, #1
 804912a:	f43f ae52 	beq.w	8048dd2 <_printf_float+0xc2>
 804912e:	f108 0801 	add.w	r8, r8, #1
 8049132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8049134:	3b01      	subs	r3, #1
 8049136:	4543      	cmp	r3, r8
 8049138:	dcf1      	bgt.n	804911e <_printf_float+0x40e>
 804913a:	464b      	mov	r3, r9
 804913c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8049140:	e6dc      	b.n	8048efc <_printf_float+0x1ec>
 8049142:	f04f 0800 	mov.w	r8, #0
 8049146:	f104 0a1a 	add.w	sl, r4, #26
 804914a:	e7f2      	b.n	8049132 <_printf_float+0x422>
 804914c:	2301      	movs	r3, #1
 804914e:	4642      	mov	r2, r8
 8049150:	e7df      	b.n	8049112 <_printf_float+0x402>
 8049152:	2301      	movs	r3, #1
 8049154:	464a      	mov	r2, r9
 8049156:	4631      	mov	r1, r6
 8049158:	4628      	mov	r0, r5
 804915a:	47b8      	blx	r7
 804915c:	3001      	adds	r0, #1
 804915e:	f43f ae38 	beq.w	8048dd2 <_printf_float+0xc2>
 8049162:	f108 0801 	add.w	r8, r8, #1
 8049166:	68e3      	ldr	r3, [r4, #12]
 8049168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 804916a:	1a5b      	subs	r3, r3, r1
 804916c:	4543      	cmp	r3, r8
 804916e:	dcf0      	bgt.n	8049152 <_printf_float+0x442>
 8049170:	e6fa      	b.n	8048f68 <_printf_float+0x258>
 8049172:	f04f 0800 	mov.w	r8, #0
 8049176:	f104 0919 	add.w	r9, r4, #25
 804917a:	e7f4      	b.n	8049166 <_printf_float+0x456>

0804917c <_printf_common>:
 804917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049180:	4616      	mov	r6, r2
 8049182:	4699      	mov	r9, r3
 8049184:	688a      	ldr	r2, [r1, #8]
 8049186:	690b      	ldr	r3, [r1, #16]
 8049188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804918c:	4293      	cmp	r3, r2
 804918e:	bfb8      	it	lt
 8049190:	4613      	movlt	r3, r2
 8049192:	6033      	str	r3, [r6, #0]
 8049194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8049198:	4607      	mov	r7, r0
 804919a:	460c      	mov	r4, r1
 804919c:	b10a      	cbz	r2, 80491a2 <_printf_common+0x26>
 804919e:	3301      	adds	r3, #1
 80491a0:	6033      	str	r3, [r6, #0]
 80491a2:	6823      	ldr	r3, [r4, #0]
 80491a4:	0699      	lsls	r1, r3, #26
 80491a6:	bf42      	ittt	mi
 80491a8:	6833      	ldrmi	r3, [r6, #0]
 80491aa:	3302      	addmi	r3, #2
 80491ac:	6033      	strmi	r3, [r6, #0]
 80491ae:	6825      	ldr	r5, [r4, #0]
 80491b0:	f015 0506 	ands.w	r5, r5, #6
 80491b4:	d106      	bne.n	80491c4 <_printf_common+0x48>
 80491b6:	f104 0a19 	add.w	sl, r4, #25
 80491ba:	68e3      	ldr	r3, [r4, #12]
 80491bc:	6832      	ldr	r2, [r6, #0]
 80491be:	1a9b      	subs	r3, r3, r2
 80491c0:	42ab      	cmp	r3, r5
 80491c2:	dc26      	bgt.n	8049212 <_printf_common+0x96>
 80491c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80491c8:	1e13      	subs	r3, r2, #0
 80491ca:	6822      	ldr	r2, [r4, #0]
 80491cc:	bf18      	it	ne
 80491ce:	2301      	movne	r3, #1
 80491d0:	0692      	lsls	r2, r2, #26
 80491d2:	d42b      	bmi.n	804922c <_printf_common+0xb0>
 80491d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80491d8:	4649      	mov	r1, r9
 80491da:	4638      	mov	r0, r7
 80491dc:	47c0      	blx	r8
 80491de:	3001      	adds	r0, #1
 80491e0:	d01e      	beq.n	8049220 <_printf_common+0xa4>
 80491e2:	6823      	ldr	r3, [r4, #0]
 80491e4:	68e5      	ldr	r5, [r4, #12]
 80491e6:	6832      	ldr	r2, [r6, #0]
 80491e8:	f003 0306 	and.w	r3, r3, #6
 80491ec:	2b04      	cmp	r3, #4
 80491ee:	bf08      	it	eq
 80491f0:	1aad      	subeq	r5, r5, r2
 80491f2:	68a3      	ldr	r3, [r4, #8]
 80491f4:	6922      	ldr	r2, [r4, #16]
 80491f6:	bf0c      	ite	eq
 80491f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80491fc:	2500      	movne	r5, #0
 80491fe:	4293      	cmp	r3, r2
 8049200:	bfc4      	itt	gt
 8049202:	1a9b      	subgt	r3, r3, r2
 8049204:	18ed      	addgt	r5, r5, r3
 8049206:	2600      	movs	r6, #0
 8049208:	341a      	adds	r4, #26
 804920a:	42b5      	cmp	r5, r6
 804920c:	d11a      	bne.n	8049244 <_printf_common+0xc8>
 804920e:	2000      	movs	r0, #0
 8049210:	e008      	b.n	8049224 <_printf_common+0xa8>
 8049212:	2301      	movs	r3, #1
 8049214:	4652      	mov	r2, sl
 8049216:	4649      	mov	r1, r9
 8049218:	4638      	mov	r0, r7
 804921a:	47c0      	blx	r8
 804921c:	3001      	adds	r0, #1
 804921e:	d103      	bne.n	8049228 <_printf_common+0xac>
 8049220:	f04f 30ff 	mov.w	r0, #4294967295
 8049224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8049228:	3501      	adds	r5, #1
 804922a:	e7c6      	b.n	80491ba <_printf_common+0x3e>
 804922c:	18e1      	adds	r1, r4, r3
 804922e:	1c5a      	adds	r2, r3, #1
 8049230:	2030      	movs	r0, #48	; 0x30
 8049232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8049236:	4422      	add	r2, r4
 8049238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804923c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8049240:	3302      	adds	r3, #2
 8049242:	e7c7      	b.n	80491d4 <_printf_common+0x58>
 8049244:	2301      	movs	r3, #1
 8049246:	4622      	mov	r2, r4
 8049248:	4649      	mov	r1, r9
 804924a:	4638      	mov	r0, r7
 804924c:	47c0      	blx	r8
 804924e:	3001      	adds	r0, #1
 8049250:	d0e6      	beq.n	8049220 <_printf_common+0xa4>
 8049252:	3601      	adds	r6, #1
 8049254:	e7d9      	b.n	804920a <_printf_common+0x8e>
	...

08049258 <_printf_i>:
 8049258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804925c:	7e0f      	ldrb	r7, [r1, #24]
 804925e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8049260:	2f78      	cmp	r7, #120	; 0x78
 8049262:	4691      	mov	r9, r2
 8049264:	4680      	mov	r8, r0
 8049266:	460c      	mov	r4, r1
 8049268:	469a      	mov	sl, r3
 804926a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804926e:	d807      	bhi.n	8049280 <_printf_i+0x28>
 8049270:	2f62      	cmp	r7, #98	; 0x62
 8049272:	d80a      	bhi.n	804928a <_printf_i+0x32>
 8049274:	2f00      	cmp	r7, #0
 8049276:	f000 80d8 	beq.w	804942a <_printf_i+0x1d2>
 804927a:	2f58      	cmp	r7, #88	; 0x58
 804927c:	f000 80a3 	beq.w	80493c6 <_printf_i+0x16e>
 8049280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8049284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8049288:	e03a      	b.n	8049300 <_printf_i+0xa8>
 804928a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804928e:	2b15      	cmp	r3, #21
 8049290:	d8f6      	bhi.n	8049280 <_printf_i+0x28>
 8049292:	a101      	add	r1, pc, #4	; (adr r1, 8049298 <_printf_i+0x40>)
 8049294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8049298:	080492f1 	.word	0x080492f1
 804929c:	08049305 	.word	0x08049305
 80492a0:	08049281 	.word	0x08049281
 80492a4:	08049281 	.word	0x08049281
 80492a8:	08049281 	.word	0x08049281
 80492ac:	08049281 	.word	0x08049281
 80492b0:	08049305 	.word	0x08049305
 80492b4:	08049281 	.word	0x08049281
 80492b8:	08049281 	.word	0x08049281
 80492bc:	08049281 	.word	0x08049281
 80492c0:	08049281 	.word	0x08049281
 80492c4:	08049411 	.word	0x08049411
 80492c8:	08049335 	.word	0x08049335
 80492cc:	080493f3 	.word	0x080493f3
 80492d0:	08049281 	.word	0x08049281
 80492d4:	08049281 	.word	0x08049281
 80492d8:	08049433 	.word	0x08049433
 80492dc:	08049281 	.word	0x08049281
 80492e0:	08049335 	.word	0x08049335
 80492e4:	08049281 	.word	0x08049281
 80492e8:	08049281 	.word	0x08049281
 80492ec:	080493fb 	.word	0x080493fb
 80492f0:	682b      	ldr	r3, [r5, #0]
 80492f2:	1d1a      	adds	r2, r3, #4
 80492f4:	681b      	ldr	r3, [r3, #0]
 80492f6:	602a      	str	r2, [r5, #0]
 80492f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80492fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8049300:	2301      	movs	r3, #1
 8049302:	e0a3      	b.n	804944c <_printf_i+0x1f4>
 8049304:	6820      	ldr	r0, [r4, #0]
 8049306:	6829      	ldr	r1, [r5, #0]
 8049308:	0606      	lsls	r6, r0, #24
 804930a:	f101 0304 	add.w	r3, r1, #4
 804930e:	d50a      	bpl.n	8049326 <_printf_i+0xce>
 8049310:	680e      	ldr	r6, [r1, #0]
 8049312:	602b      	str	r3, [r5, #0]
 8049314:	2e00      	cmp	r6, #0
 8049316:	da03      	bge.n	8049320 <_printf_i+0xc8>
 8049318:	232d      	movs	r3, #45	; 0x2d
 804931a:	4276      	negs	r6, r6
 804931c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8049320:	485e      	ldr	r0, [pc, #376]	; (804949c <_printf_i+0x244>)
 8049322:	230a      	movs	r3, #10
 8049324:	e019      	b.n	804935a <_printf_i+0x102>
 8049326:	680e      	ldr	r6, [r1, #0]
 8049328:	602b      	str	r3, [r5, #0]
 804932a:	f010 0f40 	tst.w	r0, #64	; 0x40
 804932e:	bf18      	it	ne
 8049330:	b236      	sxthne	r6, r6
 8049332:	e7ef      	b.n	8049314 <_printf_i+0xbc>
 8049334:	682b      	ldr	r3, [r5, #0]
 8049336:	6820      	ldr	r0, [r4, #0]
 8049338:	1d19      	adds	r1, r3, #4
 804933a:	6029      	str	r1, [r5, #0]
 804933c:	0601      	lsls	r1, r0, #24
 804933e:	d501      	bpl.n	8049344 <_printf_i+0xec>
 8049340:	681e      	ldr	r6, [r3, #0]
 8049342:	e002      	b.n	804934a <_printf_i+0xf2>
 8049344:	0646      	lsls	r6, r0, #25
 8049346:	d5fb      	bpl.n	8049340 <_printf_i+0xe8>
 8049348:	881e      	ldrh	r6, [r3, #0]
 804934a:	4854      	ldr	r0, [pc, #336]	; (804949c <_printf_i+0x244>)
 804934c:	2f6f      	cmp	r7, #111	; 0x6f
 804934e:	bf0c      	ite	eq
 8049350:	2308      	moveq	r3, #8
 8049352:	230a      	movne	r3, #10
 8049354:	2100      	movs	r1, #0
 8049356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804935a:	6865      	ldr	r5, [r4, #4]
 804935c:	60a5      	str	r5, [r4, #8]
 804935e:	2d00      	cmp	r5, #0
 8049360:	bfa2      	ittt	ge
 8049362:	6821      	ldrge	r1, [r4, #0]
 8049364:	f021 0104 	bicge.w	r1, r1, #4
 8049368:	6021      	strge	r1, [r4, #0]
 804936a:	b90e      	cbnz	r6, 8049370 <_printf_i+0x118>
 804936c:	2d00      	cmp	r5, #0
 804936e:	d04d      	beq.n	804940c <_printf_i+0x1b4>
 8049370:	4615      	mov	r5, r2
 8049372:	fbb6 f1f3 	udiv	r1, r6, r3
 8049376:	fb03 6711 	mls	r7, r3, r1, r6
 804937a:	5dc7      	ldrb	r7, [r0, r7]
 804937c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8049380:	4637      	mov	r7, r6
 8049382:	42bb      	cmp	r3, r7
 8049384:	460e      	mov	r6, r1
 8049386:	d9f4      	bls.n	8049372 <_printf_i+0x11a>
 8049388:	2b08      	cmp	r3, #8
 804938a:	d10b      	bne.n	80493a4 <_printf_i+0x14c>
 804938c:	6823      	ldr	r3, [r4, #0]
 804938e:	07de      	lsls	r6, r3, #31
 8049390:	d508      	bpl.n	80493a4 <_printf_i+0x14c>
 8049392:	6923      	ldr	r3, [r4, #16]
 8049394:	6861      	ldr	r1, [r4, #4]
 8049396:	4299      	cmp	r1, r3
 8049398:	bfde      	ittt	le
 804939a:	2330      	movle	r3, #48	; 0x30
 804939c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80493a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80493a4:	1b52      	subs	r2, r2, r5
 80493a6:	6122      	str	r2, [r4, #16]
 80493a8:	f8cd a000 	str.w	sl, [sp]
 80493ac:	464b      	mov	r3, r9
 80493ae:	aa03      	add	r2, sp, #12
 80493b0:	4621      	mov	r1, r4
 80493b2:	4640      	mov	r0, r8
 80493b4:	f7ff fee2 	bl	804917c <_printf_common>
 80493b8:	3001      	adds	r0, #1
 80493ba:	d14c      	bne.n	8049456 <_printf_i+0x1fe>
 80493bc:	f04f 30ff 	mov.w	r0, #4294967295
 80493c0:	b004      	add	sp, #16
 80493c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80493c6:	4835      	ldr	r0, [pc, #212]	; (804949c <_printf_i+0x244>)
 80493c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80493cc:	6829      	ldr	r1, [r5, #0]
 80493ce:	6823      	ldr	r3, [r4, #0]
 80493d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80493d4:	6029      	str	r1, [r5, #0]
 80493d6:	061d      	lsls	r5, r3, #24
 80493d8:	d514      	bpl.n	8049404 <_printf_i+0x1ac>
 80493da:	07df      	lsls	r7, r3, #31
 80493dc:	bf44      	itt	mi
 80493de:	f043 0320 	orrmi.w	r3, r3, #32
 80493e2:	6023      	strmi	r3, [r4, #0]
 80493e4:	b91e      	cbnz	r6, 80493ee <_printf_i+0x196>
 80493e6:	6823      	ldr	r3, [r4, #0]
 80493e8:	f023 0320 	bic.w	r3, r3, #32
 80493ec:	6023      	str	r3, [r4, #0]
 80493ee:	2310      	movs	r3, #16
 80493f0:	e7b0      	b.n	8049354 <_printf_i+0xfc>
 80493f2:	6823      	ldr	r3, [r4, #0]
 80493f4:	f043 0320 	orr.w	r3, r3, #32
 80493f8:	6023      	str	r3, [r4, #0]
 80493fa:	2378      	movs	r3, #120	; 0x78
 80493fc:	4828      	ldr	r0, [pc, #160]	; (80494a0 <_printf_i+0x248>)
 80493fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8049402:	e7e3      	b.n	80493cc <_printf_i+0x174>
 8049404:	0659      	lsls	r1, r3, #25
 8049406:	bf48      	it	mi
 8049408:	b2b6      	uxthmi	r6, r6
 804940a:	e7e6      	b.n	80493da <_printf_i+0x182>
 804940c:	4615      	mov	r5, r2
 804940e:	e7bb      	b.n	8049388 <_printf_i+0x130>
 8049410:	682b      	ldr	r3, [r5, #0]
 8049412:	6826      	ldr	r6, [r4, #0]
 8049414:	6961      	ldr	r1, [r4, #20]
 8049416:	1d18      	adds	r0, r3, #4
 8049418:	6028      	str	r0, [r5, #0]
 804941a:	0635      	lsls	r5, r6, #24
 804941c:	681b      	ldr	r3, [r3, #0]
 804941e:	d501      	bpl.n	8049424 <_printf_i+0x1cc>
 8049420:	6019      	str	r1, [r3, #0]
 8049422:	e002      	b.n	804942a <_printf_i+0x1d2>
 8049424:	0670      	lsls	r0, r6, #25
 8049426:	d5fb      	bpl.n	8049420 <_printf_i+0x1c8>
 8049428:	8019      	strh	r1, [r3, #0]
 804942a:	2300      	movs	r3, #0
 804942c:	6123      	str	r3, [r4, #16]
 804942e:	4615      	mov	r5, r2
 8049430:	e7ba      	b.n	80493a8 <_printf_i+0x150>
 8049432:	682b      	ldr	r3, [r5, #0]
 8049434:	1d1a      	adds	r2, r3, #4
 8049436:	602a      	str	r2, [r5, #0]
 8049438:	681d      	ldr	r5, [r3, #0]
 804943a:	6862      	ldr	r2, [r4, #4]
 804943c:	2100      	movs	r1, #0
 804943e:	4628      	mov	r0, r5
 8049440:	f7f6 fece 	bl	80401e0 <memchr>
 8049444:	b108      	cbz	r0, 804944a <_printf_i+0x1f2>
 8049446:	1b40      	subs	r0, r0, r5
 8049448:	6060      	str	r0, [r4, #4]
 804944a:	6863      	ldr	r3, [r4, #4]
 804944c:	6123      	str	r3, [r4, #16]
 804944e:	2300      	movs	r3, #0
 8049450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8049454:	e7a8      	b.n	80493a8 <_printf_i+0x150>
 8049456:	6923      	ldr	r3, [r4, #16]
 8049458:	462a      	mov	r2, r5
 804945a:	4649      	mov	r1, r9
 804945c:	4640      	mov	r0, r8
 804945e:	47d0      	blx	sl
 8049460:	3001      	adds	r0, #1
 8049462:	d0ab      	beq.n	80493bc <_printf_i+0x164>
 8049464:	6823      	ldr	r3, [r4, #0]
 8049466:	079b      	lsls	r3, r3, #30
 8049468:	d413      	bmi.n	8049492 <_printf_i+0x23a>
 804946a:	68e0      	ldr	r0, [r4, #12]
 804946c:	9b03      	ldr	r3, [sp, #12]
 804946e:	4298      	cmp	r0, r3
 8049470:	bfb8      	it	lt
 8049472:	4618      	movlt	r0, r3
 8049474:	e7a4      	b.n	80493c0 <_printf_i+0x168>
 8049476:	2301      	movs	r3, #1
 8049478:	4632      	mov	r2, r6
 804947a:	4649      	mov	r1, r9
 804947c:	4640      	mov	r0, r8
 804947e:	47d0      	blx	sl
 8049480:	3001      	adds	r0, #1
 8049482:	d09b      	beq.n	80493bc <_printf_i+0x164>
 8049484:	3501      	adds	r5, #1
 8049486:	68e3      	ldr	r3, [r4, #12]
 8049488:	9903      	ldr	r1, [sp, #12]
 804948a:	1a5b      	subs	r3, r3, r1
 804948c:	42ab      	cmp	r3, r5
 804948e:	dcf2      	bgt.n	8049476 <_printf_i+0x21e>
 8049490:	e7eb      	b.n	804946a <_printf_i+0x212>
 8049492:	2500      	movs	r5, #0
 8049494:	f104 0619 	add.w	r6, r4, #25
 8049498:	e7f5      	b.n	8049486 <_printf_i+0x22e>
 804949a:	bf00      	nop
 804949c:	0804e52e 	.word	0x0804e52e
 80494a0:	0804e53f 	.word	0x0804e53f

080494a4 <_scanf_float>:
 80494a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80494a8:	b087      	sub	sp, #28
 80494aa:	4617      	mov	r7, r2
 80494ac:	9303      	str	r3, [sp, #12]
 80494ae:	688b      	ldr	r3, [r1, #8]
 80494b0:	1e5a      	subs	r2, r3, #1
 80494b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80494b6:	bf83      	ittte	hi
 80494b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80494bc:	195b      	addhi	r3, r3, r5
 80494be:	9302      	strhi	r3, [sp, #8]
 80494c0:	2300      	movls	r3, #0
 80494c2:	bf86      	itte	hi
 80494c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80494c8:	608b      	strhi	r3, [r1, #8]
 80494ca:	9302      	strls	r3, [sp, #8]
 80494cc:	680b      	ldr	r3, [r1, #0]
 80494ce:	468b      	mov	fp, r1
 80494d0:	2500      	movs	r5, #0
 80494d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80494d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80494da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80494de:	4680      	mov	r8, r0
 80494e0:	460c      	mov	r4, r1
 80494e2:	465e      	mov	r6, fp
 80494e4:	46aa      	mov	sl, r5
 80494e6:	46a9      	mov	r9, r5
 80494e8:	9501      	str	r5, [sp, #4]
 80494ea:	68a2      	ldr	r2, [r4, #8]
 80494ec:	b152      	cbz	r2, 8049504 <_scanf_float+0x60>
 80494ee:	683b      	ldr	r3, [r7, #0]
 80494f0:	781b      	ldrb	r3, [r3, #0]
 80494f2:	2b4e      	cmp	r3, #78	; 0x4e
 80494f4:	d864      	bhi.n	80495c0 <_scanf_float+0x11c>
 80494f6:	2b40      	cmp	r3, #64	; 0x40
 80494f8:	d83c      	bhi.n	8049574 <_scanf_float+0xd0>
 80494fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80494fe:	b2c8      	uxtb	r0, r1
 8049500:	280e      	cmp	r0, #14
 8049502:	d93a      	bls.n	804957a <_scanf_float+0xd6>
 8049504:	f1b9 0f00 	cmp.w	r9, #0
 8049508:	d003      	beq.n	8049512 <_scanf_float+0x6e>
 804950a:	6823      	ldr	r3, [r4, #0]
 804950c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049510:	6023      	str	r3, [r4, #0]
 8049512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049516:	f1ba 0f01 	cmp.w	sl, #1
 804951a:	f200 8113 	bhi.w	8049744 <_scanf_float+0x2a0>
 804951e:	455e      	cmp	r6, fp
 8049520:	f200 8105 	bhi.w	804972e <_scanf_float+0x28a>
 8049524:	2501      	movs	r5, #1
 8049526:	4628      	mov	r0, r5
 8049528:	b007      	add	sp, #28
 804952a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804952e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8049532:	2a0d      	cmp	r2, #13
 8049534:	d8e6      	bhi.n	8049504 <_scanf_float+0x60>
 8049536:	a101      	add	r1, pc, #4	; (adr r1, 804953c <_scanf_float+0x98>)
 8049538:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 804953c:	0804967b 	.word	0x0804967b
 8049540:	08049505 	.word	0x08049505
 8049544:	08049505 	.word	0x08049505
 8049548:	08049505 	.word	0x08049505
 804954c:	080496db 	.word	0x080496db
 8049550:	080496b3 	.word	0x080496b3
 8049554:	08049505 	.word	0x08049505
 8049558:	08049505 	.word	0x08049505
 804955c:	08049689 	.word	0x08049689
 8049560:	08049505 	.word	0x08049505
 8049564:	08049505 	.word	0x08049505
 8049568:	08049505 	.word	0x08049505
 804956c:	08049505 	.word	0x08049505
 8049570:	08049641 	.word	0x08049641
 8049574:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8049578:	e7db      	b.n	8049532 <_scanf_float+0x8e>
 804957a:	290e      	cmp	r1, #14
 804957c:	d8c2      	bhi.n	8049504 <_scanf_float+0x60>
 804957e:	a001      	add	r0, pc, #4	; (adr r0, 8049584 <_scanf_float+0xe0>)
 8049580:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8049584:	08049633 	.word	0x08049633
 8049588:	08049505 	.word	0x08049505
 804958c:	08049633 	.word	0x08049633
 8049590:	080496c7 	.word	0x080496c7
 8049594:	08049505 	.word	0x08049505
 8049598:	080495e1 	.word	0x080495e1
 804959c:	0804961d 	.word	0x0804961d
 80495a0:	0804961d 	.word	0x0804961d
 80495a4:	0804961d 	.word	0x0804961d
 80495a8:	0804961d 	.word	0x0804961d
 80495ac:	0804961d 	.word	0x0804961d
 80495b0:	0804961d 	.word	0x0804961d
 80495b4:	0804961d 	.word	0x0804961d
 80495b8:	0804961d 	.word	0x0804961d
 80495bc:	0804961d 	.word	0x0804961d
 80495c0:	2b6e      	cmp	r3, #110	; 0x6e
 80495c2:	d809      	bhi.n	80495d8 <_scanf_float+0x134>
 80495c4:	2b60      	cmp	r3, #96	; 0x60
 80495c6:	d8b2      	bhi.n	804952e <_scanf_float+0x8a>
 80495c8:	2b54      	cmp	r3, #84	; 0x54
 80495ca:	d077      	beq.n	80496bc <_scanf_float+0x218>
 80495cc:	2b59      	cmp	r3, #89	; 0x59
 80495ce:	d199      	bne.n	8049504 <_scanf_float+0x60>
 80495d0:	2d07      	cmp	r5, #7
 80495d2:	d197      	bne.n	8049504 <_scanf_float+0x60>
 80495d4:	2508      	movs	r5, #8
 80495d6:	e029      	b.n	804962c <_scanf_float+0x188>
 80495d8:	2b74      	cmp	r3, #116	; 0x74
 80495da:	d06f      	beq.n	80496bc <_scanf_float+0x218>
 80495dc:	2b79      	cmp	r3, #121	; 0x79
 80495de:	e7f6      	b.n	80495ce <_scanf_float+0x12a>
 80495e0:	6821      	ldr	r1, [r4, #0]
 80495e2:	05c8      	lsls	r0, r1, #23
 80495e4:	d51a      	bpl.n	804961c <_scanf_float+0x178>
 80495e6:	9b02      	ldr	r3, [sp, #8]
 80495e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80495ec:	6021      	str	r1, [r4, #0]
 80495ee:	f109 0901 	add.w	r9, r9, #1
 80495f2:	b11b      	cbz	r3, 80495fc <_scanf_float+0x158>
 80495f4:	3b01      	subs	r3, #1
 80495f6:	3201      	adds	r2, #1
 80495f8:	9302      	str	r3, [sp, #8]
 80495fa:	60a2      	str	r2, [r4, #8]
 80495fc:	68a3      	ldr	r3, [r4, #8]
 80495fe:	3b01      	subs	r3, #1
 8049600:	60a3      	str	r3, [r4, #8]
 8049602:	6923      	ldr	r3, [r4, #16]
 8049604:	3301      	adds	r3, #1
 8049606:	6123      	str	r3, [r4, #16]
 8049608:	687b      	ldr	r3, [r7, #4]
 804960a:	3b01      	subs	r3, #1
 804960c:	2b00      	cmp	r3, #0
 804960e:	607b      	str	r3, [r7, #4]
 8049610:	f340 8084 	ble.w	804971c <_scanf_float+0x278>
 8049614:	683b      	ldr	r3, [r7, #0]
 8049616:	3301      	adds	r3, #1
 8049618:	603b      	str	r3, [r7, #0]
 804961a:	e766      	b.n	80494ea <_scanf_float+0x46>
 804961c:	eb1a 0f05 	cmn.w	sl, r5
 8049620:	f47f af70 	bne.w	8049504 <_scanf_float+0x60>
 8049624:	6822      	ldr	r2, [r4, #0]
 8049626:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 804962a:	6022      	str	r2, [r4, #0]
 804962c:	f806 3b01 	strb.w	r3, [r6], #1
 8049630:	e7e4      	b.n	80495fc <_scanf_float+0x158>
 8049632:	6822      	ldr	r2, [r4, #0]
 8049634:	0610      	lsls	r0, r2, #24
 8049636:	f57f af65 	bpl.w	8049504 <_scanf_float+0x60>
 804963a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804963e:	e7f4      	b.n	804962a <_scanf_float+0x186>
 8049640:	f1ba 0f00 	cmp.w	sl, #0
 8049644:	d10e      	bne.n	8049664 <_scanf_float+0x1c0>
 8049646:	f1b9 0f00 	cmp.w	r9, #0
 804964a:	d10e      	bne.n	804966a <_scanf_float+0x1c6>
 804964c:	6822      	ldr	r2, [r4, #0]
 804964e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8049652:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8049656:	d108      	bne.n	804966a <_scanf_float+0x1c6>
 8049658:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 804965c:	6022      	str	r2, [r4, #0]
 804965e:	f04f 0a01 	mov.w	sl, #1
 8049662:	e7e3      	b.n	804962c <_scanf_float+0x188>
 8049664:	f1ba 0f02 	cmp.w	sl, #2
 8049668:	d055      	beq.n	8049716 <_scanf_float+0x272>
 804966a:	2d01      	cmp	r5, #1
 804966c:	d002      	beq.n	8049674 <_scanf_float+0x1d0>
 804966e:	2d04      	cmp	r5, #4
 8049670:	f47f af48 	bne.w	8049504 <_scanf_float+0x60>
 8049674:	3501      	adds	r5, #1
 8049676:	b2ed      	uxtb	r5, r5
 8049678:	e7d8      	b.n	804962c <_scanf_float+0x188>
 804967a:	f1ba 0f01 	cmp.w	sl, #1
 804967e:	f47f af41 	bne.w	8049504 <_scanf_float+0x60>
 8049682:	f04f 0a02 	mov.w	sl, #2
 8049686:	e7d1      	b.n	804962c <_scanf_float+0x188>
 8049688:	b97d      	cbnz	r5, 80496aa <_scanf_float+0x206>
 804968a:	f1b9 0f00 	cmp.w	r9, #0
 804968e:	f47f af3c 	bne.w	804950a <_scanf_float+0x66>
 8049692:	6822      	ldr	r2, [r4, #0]
 8049694:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8049698:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 804969c:	f47f af39 	bne.w	8049512 <_scanf_float+0x6e>
 80496a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80496a4:	6022      	str	r2, [r4, #0]
 80496a6:	2501      	movs	r5, #1
 80496a8:	e7c0      	b.n	804962c <_scanf_float+0x188>
 80496aa:	2d03      	cmp	r5, #3
 80496ac:	d0e2      	beq.n	8049674 <_scanf_float+0x1d0>
 80496ae:	2d05      	cmp	r5, #5
 80496b0:	e7de      	b.n	8049670 <_scanf_float+0x1cc>
 80496b2:	2d02      	cmp	r5, #2
 80496b4:	f47f af26 	bne.w	8049504 <_scanf_float+0x60>
 80496b8:	2503      	movs	r5, #3
 80496ba:	e7b7      	b.n	804962c <_scanf_float+0x188>
 80496bc:	2d06      	cmp	r5, #6
 80496be:	f47f af21 	bne.w	8049504 <_scanf_float+0x60>
 80496c2:	2507      	movs	r5, #7
 80496c4:	e7b2      	b.n	804962c <_scanf_float+0x188>
 80496c6:	6822      	ldr	r2, [r4, #0]
 80496c8:	0591      	lsls	r1, r2, #22
 80496ca:	f57f af1b 	bpl.w	8049504 <_scanf_float+0x60>
 80496ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80496d2:	6022      	str	r2, [r4, #0]
 80496d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80496d8:	e7a8      	b.n	804962c <_scanf_float+0x188>
 80496da:	6822      	ldr	r2, [r4, #0]
 80496dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80496e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80496e4:	d006      	beq.n	80496f4 <_scanf_float+0x250>
 80496e6:	0550      	lsls	r0, r2, #21
 80496e8:	f57f af0c 	bpl.w	8049504 <_scanf_float+0x60>
 80496ec:	f1b9 0f00 	cmp.w	r9, #0
 80496f0:	f43f af0f 	beq.w	8049512 <_scanf_float+0x6e>
 80496f4:	0591      	lsls	r1, r2, #22
 80496f6:	bf58      	it	pl
 80496f8:	9901      	ldrpl	r1, [sp, #4]
 80496fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80496fe:	bf58      	it	pl
 8049700:	eba9 0101 	subpl.w	r1, r9, r1
 8049704:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8049708:	bf58      	it	pl
 804970a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 804970e:	6022      	str	r2, [r4, #0]
 8049710:	f04f 0900 	mov.w	r9, #0
 8049714:	e78a      	b.n	804962c <_scanf_float+0x188>
 8049716:	f04f 0a03 	mov.w	sl, #3
 804971a:	e787      	b.n	804962c <_scanf_float+0x188>
 804971c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8049720:	4639      	mov	r1, r7
 8049722:	4640      	mov	r0, r8
 8049724:	4798      	blx	r3
 8049726:	2800      	cmp	r0, #0
 8049728:	f43f aedf 	beq.w	80494ea <_scanf_float+0x46>
 804972c:	e6ea      	b.n	8049504 <_scanf_float+0x60>
 804972e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8049732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8049736:	463a      	mov	r2, r7
 8049738:	4640      	mov	r0, r8
 804973a:	4798      	blx	r3
 804973c:	6923      	ldr	r3, [r4, #16]
 804973e:	3b01      	subs	r3, #1
 8049740:	6123      	str	r3, [r4, #16]
 8049742:	e6ec      	b.n	804951e <_scanf_float+0x7a>
 8049744:	1e6b      	subs	r3, r5, #1
 8049746:	2b06      	cmp	r3, #6
 8049748:	d825      	bhi.n	8049796 <_scanf_float+0x2f2>
 804974a:	2d02      	cmp	r5, #2
 804974c:	d836      	bhi.n	80497bc <_scanf_float+0x318>
 804974e:	455e      	cmp	r6, fp
 8049750:	f67f aee8 	bls.w	8049524 <_scanf_float+0x80>
 8049754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8049758:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 804975c:	463a      	mov	r2, r7
 804975e:	4640      	mov	r0, r8
 8049760:	4798      	blx	r3
 8049762:	6923      	ldr	r3, [r4, #16]
 8049764:	3b01      	subs	r3, #1
 8049766:	6123      	str	r3, [r4, #16]
 8049768:	e7f1      	b.n	804974e <_scanf_float+0x2aa>
 804976a:	9802      	ldr	r0, [sp, #8]
 804976c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8049770:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8049774:	9002      	str	r0, [sp, #8]
 8049776:	463a      	mov	r2, r7
 8049778:	4640      	mov	r0, r8
 804977a:	4798      	blx	r3
 804977c:	6923      	ldr	r3, [r4, #16]
 804977e:	3b01      	subs	r3, #1
 8049780:	6123      	str	r3, [r4, #16]
 8049782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049786:	fa5f fa8a 	uxtb.w	sl, sl
 804978a:	f1ba 0f02 	cmp.w	sl, #2
 804978e:	d1ec      	bne.n	804976a <_scanf_float+0x2c6>
 8049790:	3d03      	subs	r5, #3
 8049792:	b2ed      	uxtb	r5, r5
 8049794:	1b76      	subs	r6, r6, r5
 8049796:	6823      	ldr	r3, [r4, #0]
 8049798:	05da      	lsls	r2, r3, #23
 804979a:	d52f      	bpl.n	80497fc <_scanf_float+0x358>
 804979c:	055b      	lsls	r3, r3, #21
 804979e:	d510      	bpl.n	80497c2 <_scanf_float+0x31e>
 80497a0:	455e      	cmp	r6, fp
 80497a2:	f67f aebf 	bls.w	8049524 <_scanf_float+0x80>
 80497a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80497aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80497ae:	463a      	mov	r2, r7
 80497b0:	4640      	mov	r0, r8
 80497b2:	4798      	blx	r3
 80497b4:	6923      	ldr	r3, [r4, #16]
 80497b6:	3b01      	subs	r3, #1
 80497b8:	6123      	str	r3, [r4, #16]
 80497ba:	e7f1      	b.n	80497a0 <_scanf_float+0x2fc>
 80497bc:	46aa      	mov	sl, r5
 80497be:	9602      	str	r6, [sp, #8]
 80497c0:	e7df      	b.n	8049782 <_scanf_float+0x2de>
 80497c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80497c6:	6923      	ldr	r3, [r4, #16]
 80497c8:	2965      	cmp	r1, #101	; 0x65
 80497ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80497ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80497d2:	6123      	str	r3, [r4, #16]
 80497d4:	d00c      	beq.n	80497f0 <_scanf_float+0x34c>
 80497d6:	2945      	cmp	r1, #69	; 0x45
 80497d8:	d00a      	beq.n	80497f0 <_scanf_float+0x34c>
 80497da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80497de:	463a      	mov	r2, r7
 80497e0:	4640      	mov	r0, r8
 80497e2:	4798      	blx	r3
 80497e4:	6923      	ldr	r3, [r4, #16]
 80497e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80497ea:	3b01      	subs	r3, #1
 80497ec:	1eb5      	subs	r5, r6, #2
 80497ee:	6123      	str	r3, [r4, #16]
 80497f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80497f4:	463a      	mov	r2, r7
 80497f6:	4640      	mov	r0, r8
 80497f8:	4798      	blx	r3
 80497fa:	462e      	mov	r6, r5
 80497fc:	6825      	ldr	r5, [r4, #0]
 80497fe:	f015 0510 	ands.w	r5, r5, #16
 8049802:	d159      	bne.n	80498b8 <_scanf_float+0x414>
 8049804:	7035      	strb	r5, [r6, #0]
 8049806:	6823      	ldr	r3, [r4, #0]
 8049808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804980c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8049810:	d11b      	bne.n	804984a <_scanf_float+0x3a6>
 8049812:	9b01      	ldr	r3, [sp, #4]
 8049814:	454b      	cmp	r3, r9
 8049816:	eba3 0209 	sub.w	r2, r3, r9
 804981a:	d123      	bne.n	8049864 <_scanf_float+0x3c0>
 804981c:	2200      	movs	r2, #0
 804981e:	4659      	mov	r1, fp
 8049820:	4640      	mov	r0, r8
 8049822:	f000 fe97 	bl	804a554 <_strtod_r>
 8049826:	6822      	ldr	r2, [r4, #0]
 8049828:	9b03      	ldr	r3, [sp, #12]
 804982a:	f012 0f02 	tst.w	r2, #2
 804982e:	ec57 6b10 	vmov	r6, r7, d0
 8049832:	681b      	ldr	r3, [r3, #0]
 8049834:	d021      	beq.n	804987a <_scanf_float+0x3d6>
 8049836:	9903      	ldr	r1, [sp, #12]
 8049838:	1d1a      	adds	r2, r3, #4
 804983a:	600a      	str	r2, [r1, #0]
 804983c:	681b      	ldr	r3, [r3, #0]
 804983e:	e9c3 6700 	strd	r6, r7, [r3]
 8049842:	68e3      	ldr	r3, [r4, #12]
 8049844:	3301      	adds	r3, #1
 8049846:	60e3      	str	r3, [r4, #12]
 8049848:	e66d      	b.n	8049526 <_scanf_float+0x82>
 804984a:	9b04      	ldr	r3, [sp, #16]
 804984c:	2b00      	cmp	r3, #0
 804984e:	d0e5      	beq.n	804981c <_scanf_float+0x378>
 8049850:	9905      	ldr	r1, [sp, #20]
 8049852:	230a      	movs	r3, #10
 8049854:	462a      	mov	r2, r5
 8049856:	3101      	adds	r1, #1
 8049858:	4640      	mov	r0, r8
 804985a:	f000 ff03 	bl	804a664 <_strtol_r>
 804985e:	9b04      	ldr	r3, [sp, #16]
 8049860:	9e05      	ldr	r6, [sp, #20]
 8049862:	1ac2      	subs	r2, r0, r3
 8049864:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8049868:	429e      	cmp	r6, r3
 804986a:	bf28      	it	cs
 804986c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8049870:	4912      	ldr	r1, [pc, #72]	; (80498bc <_scanf_float+0x418>)
 8049872:	4630      	mov	r0, r6
 8049874:	f000 f82c 	bl	80498d0 <siprintf>
 8049878:	e7d0      	b.n	804981c <_scanf_float+0x378>
 804987a:	9903      	ldr	r1, [sp, #12]
 804987c:	f012 0f04 	tst.w	r2, #4
 8049880:	f103 0204 	add.w	r2, r3, #4
 8049884:	600a      	str	r2, [r1, #0]
 8049886:	d1d9      	bne.n	804983c <_scanf_float+0x398>
 8049888:	f8d3 8000 	ldr.w	r8, [r3]
 804988c:	ee10 2a10 	vmov	r2, s0
 8049890:	ee10 0a10 	vmov	r0, s0
 8049894:	463b      	mov	r3, r7
 8049896:	4639      	mov	r1, r7
 8049898:	f7f7 f948 	bl	8040b2c <__aeabi_dcmpun>
 804989c:	b128      	cbz	r0, 80498aa <_scanf_float+0x406>
 804989e:	4808      	ldr	r0, [pc, #32]	; (80498c0 <_scanf_float+0x41c>)
 80498a0:	f000 f810 	bl	80498c4 <nanf>
 80498a4:	ed88 0a00 	vstr	s0, [r8]
 80498a8:	e7cb      	b.n	8049842 <_scanf_float+0x39e>
 80498aa:	4630      	mov	r0, r6
 80498ac:	4639      	mov	r1, r7
 80498ae:	f7f7 f99b 	bl	8040be8 <__aeabi_d2f>
 80498b2:	f8c8 0000 	str.w	r0, [r8]
 80498b6:	e7c4      	b.n	8049842 <_scanf_float+0x39e>
 80498b8:	2500      	movs	r5, #0
 80498ba:	e634      	b.n	8049526 <_scanf_float+0x82>
 80498bc:	0804e550 	.word	0x0804e550
 80498c0:	0804e980 	.word	0x0804e980

080498c4 <nanf>:
 80498c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80498cc <nanf+0x8>
 80498c8:	4770      	bx	lr
 80498ca:	bf00      	nop
 80498cc:	7fc00000 	.word	0x7fc00000

080498d0 <siprintf>:
 80498d0:	b40e      	push	{r1, r2, r3}
 80498d2:	b500      	push	{lr}
 80498d4:	b09c      	sub	sp, #112	; 0x70
 80498d6:	ab1d      	add	r3, sp, #116	; 0x74
 80498d8:	9002      	str	r0, [sp, #8]
 80498da:	9006      	str	r0, [sp, #24]
 80498dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80498e0:	4809      	ldr	r0, [pc, #36]	; (8049908 <siprintf+0x38>)
 80498e2:	9107      	str	r1, [sp, #28]
 80498e4:	9104      	str	r1, [sp, #16]
 80498e6:	4909      	ldr	r1, [pc, #36]	; (804990c <siprintf+0x3c>)
 80498e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80498ec:	9105      	str	r1, [sp, #20]
 80498ee:	6800      	ldr	r0, [r0, #0]
 80498f0:	9301      	str	r3, [sp, #4]
 80498f2:	a902      	add	r1, sp, #8
 80498f4:	f002 ff18 	bl	804c728 <_svfiprintf_r>
 80498f8:	9b02      	ldr	r3, [sp, #8]
 80498fa:	2200      	movs	r2, #0
 80498fc:	701a      	strb	r2, [r3, #0]
 80498fe:	b01c      	add	sp, #112	; 0x70
 8049900:	f85d eb04 	ldr.w	lr, [sp], #4
 8049904:	b003      	add	sp, #12
 8049906:	4770      	bx	lr
 8049908:	20000014 	.word	0x20000014
 804990c:	ffff0208 	.word	0xffff0208

08049910 <sulp>:
 8049910:	b570      	push	{r4, r5, r6, lr}
 8049912:	4604      	mov	r4, r0
 8049914:	460d      	mov	r5, r1
 8049916:	ec45 4b10 	vmov	d0, r4, r5
 804991a:	4616      	mov	r6, r2
 804991c:	f002 fc62 	bl	804c1e4 <__ulp>
 8049920:	ec51 0b10 	vmov	r0, r1, d0
 8049924:	b17e      	cbz	r6, 8049946 <sulp+0x36>
 8049926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 804992a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 804992e:	2b00      	cmp	r3, #0
 8049930:	dd09      	ble.n	8049946 <sulp+0x36>
 8049932:	051b      	lsls	r3, r3, #20
 8049934:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8049938:	2400      	movs	r4, #0
 804993a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 804993e:	4622      	mov	r2, r4
 8049940:	462b      	mov	r3, r5
 8049942:	f7f6 fe59 	bl	80405f8 <__aeabi_dmul>
 8049946:	bd70      	pop	{r4, r5, r6, pc}

08049948 <_strtod_l>:
 8049948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804994c:	ed2d 8b02 	vpush	{d8}
 8049950:	b09d      	sub	sp, #116	; 0x74
 8049952:	461f      	mov	r7, r3
 8049954:	2300      	movs	r3, #0
 8049956:	9318      	str	r3, [sp, #96]	; 0x60
 8049958:	4ba2      	ldr	r3, [pc, #648]	; (8049be4 <_strtod_l+0x29c>)
 804995a:	9213      	str	r2, [sp, #76]	; 0x4c
 804995c:	681b      	ldr	r3, [r3, #0]
 804995e:	9305      	str	r3, [sp, #20]
 8049960:	4604      	mov	r4, r0
 8049962:	4618      	mov	r0, r3
 8049964:	4688      	mov	r8, r1
 8049966:	f7f6 fc33 	bl	80401d0 <strlen>
 804996a:	f04f 0a00 	mov.w	sl, #0
 804996e:	4605      	mov	r5, r0
 8049970:	f04f 0b00 	mov.w	fp, #0
 8049974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8049978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 804997a:	781a      	ldrb	r2, [r3, #0]
 804997c:	2a2b      	cmp	r2, #43	; 0x2b
 804997e:	d04e      	beq.n	8049a1e <_strtod_l+0xd6>
 8049980:	d83b      	bhi.n	80499fa <_strtod_l+0xb2>
 8049982:	2a0d      	cmp	r2, #13
 8049984:	d834      	bhi.n	80499f0 <_strtod_l+0xa8>
 8049986:	2a08      	cmp	r2, #8
 8049988:	d834      	bhi.n	80499f4 <_strtod_l+0xac>
 804998a:	2a00      	cmp	r2, #0
 804998c:	d03e      	beq.n	8049a0c <_strtod_l+0xc4>
 804998e:	2300      	movs	r3, #0
 8049990:	930a      	str	r3, [sp, #40]	; 0x28
 8049992:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8049994:	7833      	ldrb	r3, [r6, #0]
 8049996:	2b30      	cmp	r3, #48	; 0x30
 8049998:	f040 80b0 	bne.w	8049afc <_strtod_l+0x1b4>
 804999c:	7873      	ldrb	r3, [r6, #1]
 804999e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80499a2:	2b58      	cmp	r3, #88	; 0x58
 80499a4:	d168      	bne.n	8049a78 <_strtod_l+0x130>
 80499a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80499a8:	9301      	str	r3, [sp, #4]
 80499aa:	ab18      	add	r3, sp, #96	; 0x60
 80499ac:	9702      	str	r7, [sp, #8]
 80499ae:	9300      	str	r3, [sp, #0]
 80499b0:	4a8d      	ldr	r2, [pc, #564]	; (8049be8 <_strtod_l+0x2a0>)
 80499b2:	ab19      	add	r3, sp, #100	; 0x64
 80499b4:	a917      	add	r1, sp, #92	; 0x5c
 80499b6:	4620      	mov	r0, r4
 80499b8:	f001 fd7c 	bl	804b4b4 <__gethex>
 80499bc:	f010 0707 	ands.w	r7, r0, #7
 80499c0:	4605      	mov	r5, r0
 80499c2:	d005      	beq.n	80499d0 <_strtod_l+0x88>
 80499c4:	2f06      	cmp	r7, #6
 80499c6:	d12c      	bne.n	8049a22 <_strtod_l+0xda>
 80499c8:	3601      	adds	r6, #1
 80499ca:	2300      	movs	r3, #0
 80499cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80499ce:	930a      	str	r3, [sp, #40]	; 0x28
 80499d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80499d2:	2b00      	cmp	r3, #0
 80499d4:	f040 8590 	bne.w	804a4f8 <_strtod_l+0xbb0>
 80499d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80499da:	b1eb      	cbz	r3, 8049a18 <_strtod_l+0xd0>
 80499dc:	4652      	mov	r2, sl
 80499de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80499e2:	ec43 2b10 	vmov	d0, r2, r3
 80499e6:	b01d      	add	sp, #116	; 0x74
 80499e8:	ecbd 8b02 	vpop	{d8}
 80499ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80499f0:	2a20      	cmp	r2, #32
 80499f2:	d1cc      	bne.n	804998e <_strtod_l+0x46>
 80499f4:	3301      	adds	r3, #1
 80499f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80499f8:	e7be      	b.n	8049978 <_strtod_l+0x30>
 80499fa:	2a2d      	cmp	r2, #45	; 0x2d
 80499fc:	d1c7      	bne.n	804998e <_strtod_l+0x46>
 80499fe:	2201      	movs	r2, #1
 8049a00:	920a      	str	r2, [sp, #40]	; 0x28
 8049a02:	1c5a      	adds	r2, r3, #1
 8049a04:	9217      	str	r2, [sp, #92]	; 0x5c
 8049a06:	785b      	ldrb	r3, [r3, #1]
 8049a08:	2b00      	cmp	r3, #0
 8049a0a:	d1c2      	bne.n	8049992 <_strtod_l+0x4a>
 8049a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8049a0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8049a12:	2b00      	cmp	r3, #0
 8049a14:	f040 856e 	bne.w	804a4f4 <_strtod_l+0xbac>
 8049a18:	4652      	mov	r2, sl
 8049a1a:	465b      	mov	r3, fp
 8049a1c:	e7e1      	b.n	80499e2 <_strtod_l+0x9a>
 8049a1e:	2200      	movs	r2, #0
 8049a20:	e7ee      	b.n	8049a00 <_strtod_l+0xb8>
 8049a22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8049a24:	b13a      	cbz	r2, 8049a36 <_strtod_l+0xee>
 8049a26:	2135      	movs	r1, #53	; 0x35
 8049a28:	a81a      	add	r0, sp, #104	; 0x68
 8049a2a:	f002 fce6 	bl	804c3fa <__copybits>
 8049a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049a30:	4620      	mov	r0, r4
 8049a32:	f002 f8a5 	bl	804bb80 <_Bfree>
 8049a36:	3f01      	subs	r7, #1
 8049a38:	2f04      	cmp	r7, #4
 8049a3a:	d806      	bhi.n	8049a4a <_strtod_l+0x102>
 8049a3c:	e8df f007 	tbb	[pc, r7]
 8049a40:	1714030a 	.word	0x1714030a
 8049a44:	0a          	.byte	0x0a
 8049a45:	00          	.byte	0x00
 8049a46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8049a4a:	0728      	lsls	r0, r5, #28
 8049a4c:	d5c0      	bpl.n	80499d0 <_strtod_l+0x88>
 8049a4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8049a52:	e7bd      	b.n	80499d0 <_strtod_l+0x88>
 8049a54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8049a58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8049a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8049a5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8049a62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8049a66:	e7f0      	b.n	8049a4a <_strtod_l+0x102>
 8049a68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8049bec <_strtod_l+0x2a4>
 8049a6c:	e7ed      	b.n	8049a4a <_strtod_l+0x102>
 8049a6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8049a72:	f04f 3aff 	mov.w	sl, #4294967295
 8049a76:	e7e8      	b.n	8049a4a <_strtod_l+0x102>
 8049a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049a7a:	1c5a      	adds	r2, r3, #1
 8049a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8049a7e:	785b      	ldrb	r3, [r3, #1]
 8049a80:	2b30      	cmp	r3, #48	; 0x30
 8049a82:	d0f9      	beq.n	8049a78 <_strtod_l+0x130>
 8049a84:	2b00      	cmp	r3, #0
 8049a86:	d0a3      	beq.n	80499d0 <_strtod_l+0x88>
 8049a88:	2301      	movs	r3, #1
 8049a8a:	f04f 0900 	mov.w	r9, #0
 8049a8e:	9304      	str	r3, [sp, #16]
 8049a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049a92:	9308      	str	r3, [sp, #32]
 8049a94:	f8cd 901c 	str.w	r9, [sp, #28]
 8049a98:	464f      	mov	r7, r9
 8049a9a:	220a      	movs	r2, #10
 8049a9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8049a9e:	7806      	ldrb	r6, [r0, #0]
 8049aa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8049aa4:	b2d9      	uxtb	r1, r3
 8049aa6:	2909      	cmp	r1, #9
 8049aa8:	d92a      	bls.n	8049b00 <_strtod_l+0x1b8>
 8049aaa:	9905      	ldr	r1, [sp, #20]
 8049aac:	462a      	mov	r2, r5
 8049aae:	f002 ff53 	bl	804c958 <strncmp>
 8049ab2:	b398      	cbz	r0, 8049b1c <_strtod_l+0x1d4>
 8049ab4:	2000      	movs	r0, #0
 8049ab6:	4632      	mov	r2, r6
 8049ab8:	463d      	mov	r5, r7
 8049aba:	9005      	str	r0, [sp, #20]
 8049abc:	4603      	mov	r3, r0
 8049abe:	2a65      	cmp	r2, #101	; 0x65
 8049ac0:	d001      	beq.n	8049ac6 <_strtod_l+0x17e>
 8049ac2:	2a45      	cmp	r2, #69	; 0x45
 8049ac4:	d118      	bne.n	8049af8 <_strtod_l+0x1b0>
 8049ac6:	b91d      	cbnz	r5, 8049ad0 <_strtod_l+0x188>
 8049ac8:	9a04      	ldr	r2, [sp, #16]
 8049aca:	4302      	orrs	r2, r0
 8049acc:	d09e      	beq.n	8049a0c <_strtod_l+0xc4>
 8049ace:	2500      	movs	r5, #0
 8049ad0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8049ad4:	f108 0201 	add.w	r2, r8, #1
 8049ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8049ada:	f898 2001 	ldrb.w	r2, [r8, #1]
 8049ade:	2a2b      	cmp	r2, #43	; 0x2b
 8049ae0:	d075      	beq.n	8049bce <_strtod_l+0x286>
 8049ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8049ae4:	d07b      	beq.n	8049bde <_strtod_l+0x296>
 8049ae6:	f04f 0c00 	mov.w	ip, #0
 8049aea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8049aee:	2909      	cmp	r1, #9
 8049af0:	f240 8082 	bls.w	8049bf8 <_strtod_l+0x2b0>
 8049af4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8049af8:	2600      	movs	r6, #0
 8049afa:	e09d      	b.n	8049c38 <_strtod_l+0x2f0>
 8049afc:	2300      	movs	r3, #0
 8049afe:	e7c4      	b.n	8049a8a <_strtod_l+0x142>
 8049b00:	2f08      	cmp	r7, #8
 8049b02:	bfd8      	it	le
 8049b04:	9907      	ldrle	r1, [sp, #28]
 8049b06:	f100 0001 	add.w	r0, r0, #1
 8049b0a:	bfda      	itte	le
 8049b0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8049b10:	9307      	strle	r3, [sp, #28]
 8049b12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8049b16:	3701      	adds	r7, #1
 8049b18:	9017      	str	r0, [sp, #92]	; 0x5c
 8049b1a:	e7bf      	b.n	8049a9c <_strtod_l+0x154>
 8049b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049b1e:	195a      	adds	r2, r3, r5
 8049b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8049b22:	5d5a      	ldrb	r2, [r3, r5]
 8049b24:	2f00      	cmp	r7, #0
 8049b26:	d037      	beq.n	8049b98 <_strtod_l+0x250>
 8049b28:	9005      	str	r0, [sp, #20]
 8049b2a:	463d      	mov	r5, r7
 8049b2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8049b30:	2b09      	cmp	r3, #9
 8049b32:	d912      	bls.n	8049b5a <_strtod_l+0x212>
 8049b34:	2301      	movs	r3, #1
 8049b36:	e7c2      	b.n	8049abe <_strtod_l+0x176>
 8049b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049b3a:	1c5a      	adds	r2, r3, #1
 8049b3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8049b3e:	785a      	ldrb	r2, [r3, #1]
 8049b40:	3001      	adds	r0, #1
 8049b42:	2a30      	cmp	r2, #48	; 0x30
 8049b44:	d0f8      	beq.n	8049b38 <_strtod_l+0x1f0>
 8049b46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8049b4a:	2b08      	cmp	r3, #8
 8049b4c:	f200 84d9 	bhi.w	804a502 <_strtod_l+0xbba>
 8049b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049b52:	9005      	str	r0, [sp, #20]
 8049b54:	2000      	movs	r0, #0
 8049b56:	9308      	str	r3, [sp, #32]
 8049b58:	4605      	mov	r5, r0
 8049b5a:	3a30      	subs	r2, #48	; 0x30
 8049b5c:	f100 0301 	add.w	r3, r0, #1
 8049b60:	d014      	beq.n	8049b8c <_strtod_l+0x244>
 8049b62:	9905      	ldr	r1, [sp, #20]
 8049b64:	4419      	add	r1, r3
 8049b66:	9105      	str	r1, [sp, #20]
 8049b68:	462b      	mov	r3, r5
 8049b6a:	eb00 0e05 	add.w	lr, r0, r5
 8049b6e:	210a      	movs	r1, #10
 8049b70:	4573      	cmp	r3, lr
 8049b72:	d113      	bne.n	8049b9c <_strtod_l+0x254>
 8049b74:	182b      	adds	r3, r5, r0
 8049b76:	2b08      	cmp	r3, #8
 8049b78:	f105 0501 	add.w	r5, r5, #1
 8049b7c:	4405      	add	r5, r0
 8049b7e:	dc1c      	bgt.n	8049bba <_strtod_l+0x272>
 8049b80:	9907      	ldr	r1, [sp, #28]
 8049b82:	230a      	movs	r3, #10
 8049b84:	fb03 2301 	mla	r3, r3, r1, r2
 8049b88:	9307      	str	r3, [sp, #28]
 8049b8a:	2300      	movs	r3, #0
 8049b8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8049b8e:	1c51      	adds	r1, r2, #1
 8049b90:	9117      	str	r1, [sp, #92]	; 0x5c
 8049b92:	7852      	ldrb	r2, [r2, #1]
 8049b94:	4618      	mov	r0, r3
 8049b96:	e7c9      	b.n	8049b2c <_strtod_l+0x1e4>
 8049b98:	4638      	mov	r0, r7
 8049b9a:	e7d2      	b.n	8049b42 <_strtod_l+0x1fa>
 8049b9c:	2b08      	cmp	r3, #8
 8049b9e:	dc04      	bgt.n	8049baa <_strtod_l+0x262>
 8049ba0:	9e07      	ldr	r6, [sp, #28]
 8049ba2:	434e      	muls	r6, r1
 8049ba4:	9607      	str	r6, [sp, #28]
 8049ba6:	3301      	adds	r3, #1
 8049ba8:	e7e2      	b.n	8049b70 <_strtod_l+0x228>
 8049baa:	f103 0c01 	add.w	ip, r3, #1
 8049bae:	f1bc 0f10 	cmp.w	ip, #16
 8049bb2:	bfd8      	it	le
 8049bb4:	fb01 f909 	mulle.w	r9, r1, r9
 8049bb8:	e7f5      	b.n	8049ba6 <_strtod_l+0x25e>
 8049bba:	2d10      	cmp	r5, #16
 8049bbc:	bfdc      	itt	le
 8049bbe:	230a      	movle	r3, #10
 8049bc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8049bc4:	e7e1      	b.n	8049b8a <_strtod_l+0x242>
 8049bc6:	2300      	movs	r3, #0
 8049bc8:	9305      	str	r3, [sp, #20]
 8049bca:	2301      	movs	r3, #1
 8049bcc:	e77c      	b.n	8049ac8 <_strtod_l+0x180>
 8049bce:	f04f 0c00 	mov.w	ip, #0
 8049bd2:	f108 0202 	add.w	r2, r8, #2
 8049bd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8049bd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8049bdc:	e785      	b.n	8049aea <_strtod_l+0x1a2>
 8049bde:	f04f 0c01 	mov.w	ip, #1
 8049be2:	e7f6      	b.n	8049bd2 <_strtod_l+0x28a>
 8049be4:	0804e7c4 	.word	0x0804e7c4
 8049be8:	0804e558 	.word	0x0804e558
 8049bec:	7ff00000 	.word	0x7ff00000
 8049bf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8049bf2:	1c51      	adds	r1, r2, #1
 8049bf4:	9117      	str	r1, [sp, #92]	; 0x5c
 8049bf6:	7852      	ldrb	r2, [r2, #1]
 8049bf8:	2a30      	cmp	r2, #48	; 0x30
 8049bfa:	d0f9      	beq.n	8049bf0 <_strtod_l+0x2a8>
 8049bfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8049c00:	2908      	cmp	r1, #8
 8049c02:	f63f af79 	bhi.w	8049af8 <_strtod_l+0x1b0>
 8049c06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8049c0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8049c0c:	9206      	str	r2, [sp, #24]
 8049c0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8049c10:	1c51      	adds	r1, r2, #1
 8049c12:	9117      	str	r1, [sp, #92]	; 0x5c
 8049c14:	7852      	ldrb	r2, [r2, #1]
 8049c16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8049c1a:	2e09      	cmp	r6, #9
 8049c1c:	d937      	bls.n	8049c8e <_strtod_l+0x346>
 8049c1e:	9e06      	ldr	r6, [sp, #24]
 8049c20:	1b89      	subs	r1, r1, r6
 8049c22:	2908      	cmp	r1, #8
 8049c24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8049c28:	dc02      	bgt.n	8049c30 <_strtod_l+0x2e8>
 8049c2a:	4576      	cmp	r6, lr
 8049c2c:	bfa8      	it	ge
 8049c2e:	4676      	movge	r6, lr
 8049c30:	f1bc 0f00 	cmp.w	ip, #0
 8049c34:	d000      	beq.n	8049c38 <_strtod_l+0x2f0>
 8049c36:	4276      	negs	r6, r6
 8049c38:	2d00      	cmp	r5, #0
 8049c3a:	d14d      	bne.n	8049cd8 <_strtod_l+0x390>
 8049c3c:	9904      	ldr	r1, [sp, #16]
 8049c3e:	4301      	orrs	r1, r0
 8049c40:	f47f aec6 	bne.w	80499d0 <_strtod_l+0x88>
 8049c44:	2b00      	cmp	r3, #0
 8049c46:	f47f aee1 	bne.w	8049a0c <_strtod_l+0xc4>
 8049c4a:	2a69      	cmp	r2, #105	; 0x69
 8049c4c:	d027      	beq.n	8049c9e <_strtod_l+0x356>
 8049c4e:	dc24      	bgt.n	8049c9a <_strtod_l+0x352>
 8049c50:	2a49      	cmp	r2, #73	; 0x49
 8049c52:	d024      	beq.n	8049c9e <_strtod_l+0x356>
 8049c54:	2a4e      	cmp	r2, #78	; 0x4e
 8049c56:	f47f aed9 	bne.w	8049a0c <_strtod_l+0xc4>
 8049c5a:	499f      	ldr	r1, [pc, #636]	; (8049ed8 <_strtod_l+0x590>)
 8049c5c:	a817      	add	r0, sp, #92	; 0x5c
 8049c5e:	f001 fe81 	bl	804b964 <__match>
 8049c62:	2800      	cmp	r0, #0
 8049c64:	f43f aed2 	beq.w	8049a0c <_strtod_l+0xc4>
 8049c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049c6a:	781b      	ldrb	r3, [r3, #0]
 8049c6c:	2b28      	cmp	r3, #40	; 0x28
 8049c6e:	d12d      	bne.n	8049ccc <_strtod_l+0x384>
 8049c70:	499a      	ldr	r1, [pc, #616]	; (8049edc <_strtod_l+0x594>)
 8049c72:	aa1a      	add	r2, sp, #104	; 0x68
 8049c74:	a817      	add	r0, sp, #92	; 0x5c
 8049c76:	f001 fe89 	bl	804b98c <__hexnan>
 8049c7a:	2805      	cmp	r0, #5
 8049c7c:	d126      	bne.n	8049ccc <_strtod_l+0x384>
 8049c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8049c80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8049c84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8049c88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8049c8c:	e6a0      	b.n	80499d0 <_strtod_l+0x88>
 8049c8e:	210a      	movs	r1, #10
 8049c90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8049c94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8049c98:	e7b9      	b.n	8049c0e <_strtod_l+0x2c6>
 8049c9a:	2a6e      	cmp	r2, #110	; 0x6e
 8049c9c:	e7db      	b.n	8049c56 <_strtod_l+0x30e>
 8049c9e:	4990      	ldr	r1, [pc, #576]	; (8049ee0 <_strtod_l+0x598>)
 8049ca0:	a817      	add	r0, sp, #92	; 0x5c
 8049ca2:	f001 fe5f 	bl	804b964 <__match>
 8049ca6:	2800      	cmp	r0, #0
 8049ca8:	f43f aeb0 	beq.w	8049a0c <_strtod_l+0xc4>
 8049cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049cae:	498d      	ldr	r1, [pc, #564]	; (8049ee4 <_strtod_l+0x59c>)
 8049cb0:	3b01      	subs	r3, #1
 8049cb2:	a817      	add	r0, sp, #92	; 0x5c
 8049cb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8049cb6:	f001 fe55 	bl	804b964 <__match>
 8049cba:	b910      	cbnz	r0, 8049cc2 <_strtod_l+0x37a>
 8049cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8049cbe:	3301      	adds	r3, #1
 8049cc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8049cc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8049ef4 <_strtod_l+0x5ac>
 8049cc6:	f04f 0a00 	mov.w	sl, #0
 8049cca:	e681      	b.n	80499d0 <_strtod_l+0x88>
 8049ccc:	4886      	ldr	r0, [pc, #536]	; (8049ee8 <_strtod_l+0x5a0>)
 8049cce:	f002 fe2b 	bl	804c928 <nan>
 8049cd2:	ec5b ab10 	vmov	sl, fp, d0
 8049cd6:	e67b      	b.n	80499d0 <_strtod_l+0x88>
 8049cd8:	9b05      	ldr	r3, [sp, #20]
 8049cda:	9807      	ldr	r0, [sp, #28]
 8049cdc:	1af3      	subs	r3, r6, r3
 8049cde:	2f00      	cmp	r7, #0
 8049ce0:	bf08      	it	eq
 8049ce2:	462f      	moveq	r7, r5
 8049ce4:	2d10      	cmp	r5, #16
 8049ce6:	9306      	str	r3, [sp, #24]
 8049ce8:	46a8      	mov	r8, r5
 8049cea:	bfa8      	it	ge
 8049cec:	f04f 0810 	movge.w	r8, #16
 8049cf0:	f7f6 fc08 	bl	8040504 <__aeabi_ui2d>
 8049cf4:	2d09      	cmp	r5, #9
 8049cf6:	4682      	mov	sl, r0
 8049cf8:	468b      	mov	fp, r1
 8049cfa:	dd13      	ble.n	8049d24 <_strtod_l+0x3dc>
 8049cfc:	4b7b      	ldr	r3, [pc, #492]	; (8049eec <_strtod_l+0x5a4>)
 8049cfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8049d02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8049d06:	f7f6 fc77 	bl	80405f8 <__aeabi_dmul>
 8049d0a:	4682      	mov	sl, r0
 8049d0c:	4648      	mov	r0, r9
 8049d0e:	468b      	mov	fp, r1
 8049d10:	f7f6 fbf8 	bl	8040504 <__aeabi_ui2d>
 8049d14:	4602      	mov	r2, r0
 8049d16:	460b      	mov	r3, r1
 8049d18:	4650      	mov	r0, sl
 8049d1a:	4659      	mov	r1, fp
 8049d1c:	f7f6 fab6 	bl	804028c <__adddf3>
 8049d20:	4682      	mov	sl, r0
 8049d22:	468b      	mov	fp, r1
 8049d24:	2d0f      	cmp	r5, #15
 8049d26:	dc38      	bgt.n	8049d9a <_strtod_l+0x452>
 8049d28:	9b06      	ldr	r3, [sp, #24]
 8049d2a:	2b00      	cmp	r3, #0
 8049d2c:	f43f ae50 	beq.w	80499d0 <_strtod_l+0x88>
 8049d30:	dd24      	ble.n	8049d7c <_strtod_l+0x434>
 8049d32:	2b16      	cmp	r3, #22
 8049d34:	dc0b      	bgt.n	8049d4e <_strtod_l+0x406>
 8049d36:	496d      	ldr	r1, [pc, #436]	; (8049eec <_strtod_l+0x5a4>)
 8049d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8049d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049d40:	4652      	mov	r2, sl
 8049d42:	465b      	mov	r3, fp
 8049d44:	f7f6 fc58 	bl	80405f8 <__aeabi_dmul>
 8049d48:	4682      	mov	sl, r0
 8049d4a:	468b      	mov	fp, r1
 8049d4c:	e640      	b.n	80499d0 <_strtod_l+0x88>
 8049d4e:	9a06      	ldr	r2, [sp, #24]
 8049d50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8049d54:	4293      	cmp	r3, r2
 8049d56:	db20      	blt.n	8049d9a <_strtod_l+0x452>
 8049d58:	4c64      	ldr	r4, [pc, #400]	; (8049eec <_strtod_l+0x5a4>)
 8049d5a:	f1c5 050f 	rsb	r5, r5, #15
 8049d5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8049d62:	4652      	mov	r2, sl
 8049d64:	465b      	mov	r3, fp
 8049d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049d6a:	f7f6 fc45 	bl	80405f8 <__aeabi_dmul>
 8049d6e:	9b06      	ldr	r3, [sp, #24]
 8049d70:	1b5d      	subs	r5, r3, r5
 8049d72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8049d76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8049d7a:	e7e3      	b.n	8049d44 <_strtod_l+0x3fc>
 8049d7c:	9b06      	ldr	r3, [sp, #24]
 8049d7e:	3316      	adds	r3, #22
 8049d80:	db0b      	blt.n	8049d9a <_strtod_l+0x452>
 8049d82:	9b05      	ldr	r3, [sp, #20]
 8049d84:	1b9e      	subs	r6, r3, r6
 8049d86:	4b59      	ldr	r3, [pc, #356]	; (8049eec <_strtod_l+0x5a4>)
 8049d88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8049d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8049d90:	4650      	mov	r0, sl
 8049d92:	4659      	mov	r1, fp
 8049d94:	f7f6 fd5a 	bl	804084c <__aeabi_ddiv>
 8049d98:	e7d6      	b.n	8049d48 <_strtod_l+0x400>
 8049d9a:	9b06      	ldr	r3, [sp, #24]
 8049d9c:	eba5 0808 	sub.w	r8, r5, r8
 8049da0:	4498      	add	r8, r3
 8049da2:	f1b8 0f00 	cmp.w	r8, #0
 8049da6:	dd74      	ble.n	8049e92 <_strtod_l+0x54a>
 8049da8:	f018 030f 	ands.w	r3, r8, #15
 8049dac:	d00a      	beq.n	8049dc4 <_strtod_l+0x47c>
 8049dae:	494f      	ldr	r1, [pc, #316]	; (8049eec <_strtod_l+0x5a4>)
 8049db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8049db4:	4652      	mov	r2, sl
 8049db6:	465b      	mov	r3, fp
 8049db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8049dbc:	f7f6 fc1c 	bl	80405f8 <__aeabi_dmul>
 8049dc0:	4682      	mov	sl, r0
 8049dc2:	468b      	mov	fp, r1
 8049dc4:	f038 080f 	bics.w	r8, r8, #15
 8049dc8:	d04f      	beq.n	8049e6a <_strtod_l+0x522>
 8049dca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8049dce:	dd22      	ble.n	8049e16 <_strtod_l+0x4ce>
 8049dd0:	2500      	movs	r5, #0
 8049dd2:	462e      	mov	r6, r5
 8049dd4:	9507      	str	r5, [sp, #28]
 8049dd6:	9505      	str	r5, [sp, #20]
 8049dd8:	2322      	movs	r3, #34	; 0x22
 8049dda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8049ef4 <_strtod_l+0x5ac>
 8049dde:	6023      	str	r3, [r4, #0]
 8049de0:	f04f 0a00 	mov.w	sl, #0
 8049de4:	9b07      	ldr	r3, [sp, #28]
 8049de6:	2b00      	cmp	r3, #0
 8049de8:	f43f adf2 	beq.w	80499d0 <_strtod_l+0x88>
 8049dec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8049dee:	4620      	mov	r0, r4
 8049df0:	f001 fec6 	bl	804bb80 <_Bfree>
 8049df4:	9905      	ldr	r1, [sp, #20]
 8049df6:	4620      	mov	r0, r4
 8049df8:	f001 fec2 	bl	804bb80 <_Bfree>
 8049dfc:	4631      	mov	r1, r6
 8049dfe:	4620      	mov	r0, r4
 8049e00:	f001 febe 	bl	804bb80 <_Bfree>
 8049e04:	9907      	ldr	r1, [sp, #28]
 8049e06:	4620      	mov	r0, r4
 8049e08:	f001 feba 	bl	804bb80 <_Bfree>
 8049e0c:	4629      	mov	r1, r5
 8049e0e:	4620      	mov	r0, r4
 8049e10:	f001 feb6 	bl	804bb80 <_Bfree>
 8049e14:	e5dc      	b.n	80499d0 <_strtod_l+0x88>
 8049e16:	4b36      	ldr	r3, [pc, #216]	; (8049ef0 <_strtod_l+0x5a8>)
 8049e18:	9304      	str	r3, [sp, #16]
 8049e1a:	2300      	movs	r3, #0
 8049e1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8049e20:	4650      	mov	r0, sl
 8049e22:	4659      	mov	r1, fp
 8049e24:	4699      	mov	r9, r3
 8049e26:	f1b8 0f01 	cmp.w	r8, #1
 8049e2a:	dc21      	bgt.n	8049e70 <_strtod_l+0x528>
 8049e2c:	b10b      	cbz	r3, 8049e32 <_strtod_l+0x4ea>
 8049e2e:	4682      	mov	sl, r0
 8049e30:	468b      	mov	fp, r1
 8049e32:	4b2f      	ldr	r3, [pc, #188]	; (8049ef0 <_strtod_l+0x5a8>)
 8049e34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8049e38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8049e3c:	4652      	mov	r2, sl
 8049e3e:	465b      	mov	r3, fp
 8049e40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8049e44:	f7f6 fbd8 	bl	80405f8 <__aeabi_dmul>
 8049e48:	4b2a      	ldr	r3, [pc, #168]	; (8049ef4 <_strtod_l+0x5ac>)
 8049e4a:	460a      	mov	r2, r1
 8049e4c:	400b      	ands	r3, r1
 8049e4e:	492a      	ldr	r1, [pc, #168]	; (8049ef8 <_strtod_l+0x5b0>)
 8049e50:	428b      	cmp	r3, r1
 8049e52:	4682      	mov	sl, r0
 8049e54:	d8bc      	bhi.n	8049dd0 <_strtod_l+0x488>
 8049e56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8049e5a:	428b      	cmp	r3, r1
 8049e5c:	bf86      	itte	hi
 8049e5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8049efc <_strtod_l+0x5b4>
 8049e62:	f04f 3aff 	movhi.w	sl, #4294967295
 8049e66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8049e6a:	2300      	movs	r3, #0
 8049e6c:	9304      	str	r3, [sp, #16]
 8049e6e:	e084      	b.n	8049f7a <_strtod_l+0x632>
 8049e70:	f018 0f01 	tst.w	r8, #1
 8049e74:	d005      	beq.n	8049e82 <_strtod_l+0x53a>
 8049e76:	9b04      	ldr	r3, [sp, #16]
 8049e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049e7c:	f7f6 fbbc 	bl	80405f8 <__aeabi_dmul>
 8049e80:	2301      	movs	r3, #1
 8049e82:	9a04      	ldr	r2, [sp, #16]
 8049e84:	3208      	adds	r2, #8
 8049e86:	f109 0901 	add.w	r9, r9, #1
 8049e8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8049e8e:	9204      	str	r2, [sp, #16]
 8049e90:	e7c9      	b.n	8049e26 <_strtod_l+0x4de>
 8049e92:	d0ea      	beq.n	8049e6a <_strtod_l+0x522>
 8049e94:	f1c8 0800 	rsb	r8, r8, #0
 8049e98:	f018 020f 	ands.w	r2, r8, #15
 8049e9c:	d00a      	beq.n	8049eb4 <_strtod_l+0x56c>
 8049e9e:	4b13      	ldr	r3, [pc, #76]	; (8049eec <_strtod_l+0x5a4>)
 8049ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8049ea4:	4650      	mov	r0, sl
 8049ea6:	4659      	mov	r1, fp
 8049ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049eac:	f7f6 fcce 	bl	804084c <__aeabi_ddiv>
 8049eb0:	4682      	mov	sl, r0
 8049eb2:	468b      	mov	fp, r1
 8049eb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8049eb8:	d0d7      	beq.n	8049e6a <_strtod_l+0x522>
 8049eba:	f1b8 0f1f 	cmp.w	r8, #31
 8049ebe:	dd1f      	ble.n	8049f00 <_strtod_l+0x5b8>
 8049ec0:	2500      	movs	r5, #0
 8049ec2:	462e      	mov	r6, r5
 8049ec4:	9507      	str	r5, [sp, #28]
 8049ec6:	9505      	str	r5, [sp, #20]
 8049ec8:	2322      	movs	r3, #34	; 0x22
 8049eca:	f04f 0a00 	mov.w	sl, #0
 8049ece:	f04f 0b00 	mov.w	fp, #0
 8049ed2:	6023      	str	r3, [r4, #0]
 8049ed4:	e786      	b.n	8049de4 <_strtod_l+0x49c>
 8049ed6:	bf00      	nop
 8049ed8:	0804e529 	.word	0x0804e529
 8049edc:	0804e56c 	.word	0x0804e56c
 8049ee0:	0804e521 	.word	0x0804e521
 8049ee4:	0804e6d1 	.word	0x0804e6d1
 8049ee8:	0804e980 	.word	0x0804e980
 8049eec:	0804e860 	.word	0x0804e860
 8049ef0:	0804e838 	.word	0x0804e838
 8049ef4:	7ff00000 	.word	0x7ff00000
 8049ef8:	7ca00000 	.word	0x7ca00000
 8049efc:	7fefffff 	.word	0x7fefffff
 8049f00:	f018 0310 	ands.w	r3, r8, #16
 8049f04:	bf18      	it	ne
 8049f06:	236a      	movne	r3, #106	; 0x6a
 8049f08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 804a2b8 <_strtod_l+0x970>
 8049f0c:	9304      	str	r3, [sp, #16]
 8049f0e:	4650      	mov	r0, sl
 8049f10:	4659      	mov	r1, fp
 8049f12:	2300      	movs	r3, #0
 8049f14:	f018 0f01 	tst.w	r8, #1
 8049f18:	d004      	beq.n	8049f24 <_strtod_l+0x5dc>
 8049f1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8049f1e:	f7f6 fb6b 	bl	80405f8 <__aeabi_dmul>
 8049f22:	2301      	movs	r3, #1
 8049f24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8049f28:	f109 0908 	add.w	r9, r9, #8
 8049f2c:	d1f2      	bne.n	8049f14 <_strtod_l+0x5cc>
 8049f2e:	b10b      	cbz	r3, 8049f34 <_strtod_l+0x5ec>
 8049f30:	4682      	mov	sl, r0
 8049f32:	468b      	mov	fp, r1
 8049f34:	9b04      	ldr	r3, [sp, #16]
 8049f36:	b1c3      	cbz	r3, 8049f6a <_strtod_l+0x622>
 8049f38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8049f3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8049f40:	2b00      	cmp	r3, #0
 8049f42:	4659      	mov	r1, fp
 8049f44:	dd11      	ble.n	8049f6a <_strtod_l+0x622>
 8049f46:	2b1f      	cmp	r3, #31
 8049f48:	f340 8124 	ble.w	804a194 <_strtod_l+0x84c>
 8049f4c:	2b34      	cmp	r3, #52	; 0x34
 8049f4e:	bfde      	ittt	le
 8049f50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8049f54:	f04f 33ff 	movle.w	r3, #4294967295
 8049f58:	fa03 f202 	lslle.w	r2, r3, r2
 8049f5c:	f04f 0a00 	mov.w	sl, #0
 8049f60:	bfcc      	ite	gt
 8049f62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8049f66:	ea02 0b01 	andle.w	fp, r2, r1
 8049f6a:	2200      	movs	r2, #0
 8049f6c:	2300      	movs	r3, #0
 8049f6e:	4650      	mov	r0, sl
 8049f70:	4659      	mov	r1, fp
 8049f72:	f7f6 fda9 	bl	8040ac8 <__aeabi_dcmpeq>
 8049f76:	2800      	cmp	r0, #0
 8049f78:	d1a2      	bne.n	8049ec0 <_strtod_l+0x578>
 8049f7a:	9b07      	ldr	r3, [sp, #28]
 8049f7c:	9300      	str	r3, [sp, #0]
 8049f7e:	9908      	ldr	r1, [sp, #32]
 8049f80:	462b      	mov	r3, r5
 8049f82:	463a      	mov	r2, r7
 8049f84:	4620      	mov	r0, r4
 8049f86:	f001 fe63 	bl	804bc50 <__s2b>
 8049f8a:	9007      	str	r0, [sp, #28]
 8049f8c:	2800      	cmp	r0, #0
 8049f8e:	f43f af1f 	beq.w	8049dd0 <_strtod_l+0x488>
 8049f92:	9b05      	ldr	r3, [sp, #20]
 8049f94:	1b9e      	subs	r6, r3, r6
 8049f96:	9b06      	ldr	r3, [sp, #24]
 8049f98:	2b00      	cmp	r3, #0
 8049f9a:	bfb4      	ite	lt
 8049f9c:	4633      	movlt	r3, r6
 8049f9e:	2300      	movge	r3, #0
 8049fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8049fa2:	9b06      	ldr	r3, [sp, #24]
 8049fa4:	2500      	movs	r5, #0
 8049fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8049faa:	9312      	str	r3, [sp, #72]	; 0x48
 8049fac:	462e      	mov	r6, r5
 8049fae:	9b07      	ldr	r3, [sp, #28]
 8049fb0:	4620      	mov	r0, r4
 8049fb2:	6859      	ldr	r1, [r3, #4]
 8049fb4:	f001 fda4 	bl	804bb00 <_Balloc>
 8049fb8:	9005      	str	r0, [sp, #20]
 8049fba:	2800      	cmp	r0, #0
 8049fbc:	f43f af0c 	beq.w	8049dd8 <_strtod_l+0x490>
 8049fc0:	9b07      	ldr	r3, [sp, #28]
 8049fc2:	691a      	ldr	r2, [r3, #16]
 8049fc4:	3202      	adds	r2, #2
 8049fc6:	f103 010c 	add.w	r1, r3, #12
 8049fca:	0092      	lsls	r2, r2, #2
 8049fcc:	300c      	adds	r0, #12
 8049fce:	f7fe fde9 	bl	8048ba4 <memcpy>
 8049fd2:	ec4b ab10 	vmov	d0, sl, fp
 8049fd6:	aa1a      	add	r2, sp, #104	; 0x68
 8049fd8:	a919      	add	r1, sp, #100	; 0x64
 8049fda:	4620      	mov	r0, r4
 8049fdc:	f002 f97e 	bl	804c2dc <__d2b>
 8049fe0:	ec4b ab18 	vmov	d8, sl, fp
 8049fe4:	9018      	str	r0, [sp, #96]	; 0x60
 8049fe6:	2800      	cmp	r0, #0
 8049fe8:	f43f aef6 	beq.w	8049dd8 <_strtod_l+0x490>
 8049fec:	2101      	movs	r1, #1
 8049fee:	4620      	mov	r0, r4
 8049ff0:	f001 fec8 	bl	804bd84 <__i2b>
 8049ff4:	4606      	mov	r6, r0
 8049ff6:	2800      	cmp	r0, #0
 8049ff8:	f43f aeee 	beq.w	8049dd8 <_strtod_l+0x490>
 8049ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8049ffe:	9904      	ldr	r1, [sp, #16]
 804a000:	2b00      	cmp	r3, #0
 804a002:	bfab      	itete	ge
 804a004:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 804a006:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 804a008:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 804a00a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 804a00e:	bfac      	ite	ge
 804a010:	eb03 0902 	addge.w	r9, r3, r2
 804a014:	1ad7      	sublt	r7, r2, r3
 804a016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 804a018:	eba3 0801 	sub.w	r8, r3, r1
 804a01c:	4490      	add	r8, r2
 804a01e:	4ba1      	ldr	r3, [pc, #644]	; (804a2a4 <_strtod_l+0x95c>)
 804a020:	f108 38ff 	add.w	r8, r8, #4294967295
 804a024:	4598      	cmp	r8, r3
 804a026:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 804a02a:	f280 80c7 	bge.w	804a1bc <_strtod_l+0x874>
 804a02e:	eba3 0308 	sub.w	r3, r3, r8
 804a032:	2b1f      	cmp	r3, #31
 804a034:	eba2 0203 	sub.w	r2, r2, r3
 804a038:	f04f 0101 	mov.w	r1, #1
 804a03c:	f300 80b1 	bgt.w	804a1a2 <_strtod_l+0x85a>
 804a040:	fa01 f303 	lsl.w	r3, r1, r3
 804a044:	930d      	str	r3, [sp, #52]	; 0x34
 804a046:	2300      	movs	r3, #0
 804a048:	9308      	str	r3, [sp, #32]
 804a04a:	eb09 0802 	add.w	r8, r9, r2
 804a04e:	9b04      	ldr	r3, [sp, #16]
 804a050:	45c1      	cmp	r9, r8
 804a052:	4417      	add	r7, r2
 804a054:	441f      	add	r7, r3
 804a056:	464b      	mov	r3, r9
 804a058:	bfa8      	it	ge
 804a05a:	4643      	movge	r3, r8
 804a05c:	42bb      	cmp	r3, r7
 804a05e:	bfa8      	it	ge
 804a060:	463b      	movge	r3, r7
 804a062:	2b00      	cmp	r3, #0
 804a064:	bfc2      	ittt	gt
 804a066:	eba8 0803 	subgt.w	r8, r8, r3
 804a06a:	1aff      	subgt	r7, r7, r3
 804a06c:	eba9 0903 	subgt.w	r9, r9, r3
 804a070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804a072:	2b00      	cmp	r3, #0
 804a074:	dd17      	ble.n	804a0a6 <_strtod_l+0x75e>
 804a076:	4631      	mov	r1, r6
 804a078:	461a      	mov	r2, r3
 804a07a:	4620      	mov	r0, r4
 804a07c:	f001 ff42 	bl	804bf04 <__pow5mult>
 804a080:	4606      	mov	r6, r0
 804a082:	2800      	cmp	r0, #0
 804a084:	f43f aea8 	beq.w	8049dd8 <_strtod_l+0x490>
 804a088:	4601      	mov	r1, r0
 804a08a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 804a08c:	4620      	mov	r0, r4
 804a08e:	f001 fe8f 	bl	804bdb0 <__multiply>
 804a092:	900b      	str	r0, [sp, #44]	; 0x2c
 804a094:	2800      	cmp	r0, #0
 804a096:	f43f ae9f 	beq.w	8049dd8 <_strtod_l+0x490>
 804a09a:	9918      	ldr	r1, [sp, #96]	; 0x60
 804a09c:	4620      	mov	r0, r4
 804a09e:	f001 fd6f 	bl	804bb80 <_Bfree>
 804a0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a0a4:	9318      	str	r3, [sp, #96]	; 0x60
 804a0a6:	f1b8 0f00 	cmp.w	r8, #0
 804a0aa:	f300 808c 	bgt.w	804a1c6 <_strtod_l+0x87e>
 804a0ae:	9b06      	ldr	r3, [sp, #24]
 804a0b0:	2b00      	cmp	r3, #0
 804a0b2:	dd08      	ble.n	804a0c6 <_strtod_l+0x77e>
 804a0b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 804a0b6:	9905      	ldr	r1, [sp, #20]
 804a0b8:	4620      	mov	r0, r4
 804a0ba:	f001 ff23 	bl	804bf04 <__pow5mult>
 804a0be:	9005      	str	r0, [sp, #20]
 804a0c0:	2800      	cmp	r0, #0
 804a0c2:	f43f ae89 	beq.w	8049dd8 <_strtod_l+0x490>
 804a0c6:	2f00      	cmp	r7, #0
 804a0c8:	dd08      	ble.n	804a0dc <_strtod_l+0x794>
 804a0ca:	9905      	ldr	r1, [sp, #20]
 804a0cc:	463a      	mov	r2, r7
 804a0ce:	4620      	mov	r0, r4
 804a0d0:	f001 ff72 	bl	804bfb8 <__lshift>
 804a0d4:	9005      	str	r0, [sp, #20]
 804a0d6:	2800      	cmp	r0, #0
 804a0d8:	f43f ae7e 	beq.w	8049dd8 <_strtod_l+0x490>
 804a0dc:	f1b9 0f00 	cmp.w	r9, #0
 804a0e0:	dd08      	ble.n	804a0f4 <_strtod_l+0x7ac>
 804a0e2:	4631      	mov	r1, r6
 804a0e4:	464a      	mov	r2, r9
 804a0e6:	4620      	mov	r0, r4
 804a0e8:	f001 ff66 	bl	804bfb8 <__lshift>
 804a0ec:	4606      	mov	r6, r0
 804a0ee:	2800      	cmp	r0, #0
 804a0f0:	f43f ae72 	beq.w	8049dd8 <_strtod_l+0x490>
 804a0f4:	9a05      	ldr	r2, [sp, #20]
 804a0f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 804a0f8:	4620      	mov	r0, r4
 804a0fa:	f001 ffe9 	bl	804c0d0 <__mdiff>
 804a0fe:	4605      	mov	r5, r0
 804a100:	2800      	cmp	r0, #0
 804a102:	f43f ae69 	beq.w	8049dd8 <_strtod_l+0x490>
 804a106:	68c3      	ldr	r3, [r0, #12]
 804a108:	930b      	str	r3, [sp, #44]	; 0x2c
 804a10a:	2300      	movs	r3, #0
 804a10c:	60c3      	str	r3, [r0, #12]
 804a10e:	4631      	mov	r1, r6
 804a110:	f001 ffc2 	bl	804c098 <__mcmp>
 804a114:	2800      	cmp	r0, #0
 804a116:	da60      	bge.n	804a1da <_strtod_l+0x892>
 804a118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a11a:	ea53 030a 	orrs.w	r3, r3, sl
 804a11e:	f040 8082 	bne.w	804a226 <_strtod_l+0x8de>
 804a122:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a126:	2b00      	cmp	r3, #0
 804a128:	d17d      	bne.n	804a226 <_strtod_l+0x8de>
 804a12a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804a12e:	0d1b      	lsrs	r3, r3, #20
 804a130:	051b      	lsls	r3, r3, #20
 804a132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 804a136:	d976      	bls.n	804a226 <_strtod_l+0x8de>
 804a138:	696b      	ldr	r3, [r5, #20]
 804a13a:	b913      	cbnz	r3, 804a142 <_strtod_l+0x7fa>
 804a13c:	692b      	ldr	r3, [r5, #16]
 804a13e:	2b01      	cmp	r3, #1
 804a140:	dd71      	ble.n	804a226 <_strtod_l+0x8de>
 804a142:	4629      	mov	r1, r5
 804a144:	2201      	movs	r2, #1
 804a146:	4620      	mov	r0, r4
 804a148:	f001 ff36 	bl	804bfb8 <__lshift>
 804a14c:	4631      	mov	r1, r6
 804a14e:	4605      	mov	r5, r0
 804a150:	f001 ffa2 	bl	804c098 <__mcmp>
 804a154:	2800      	cmp	r0, #0
 804a156:	dd66      	ble.n	804a226 <_strtod_l+0x8de>
 804a158:	9904      	ldr	r1, [sp, #16]
 804a15a:	4a53      	ldr	r2, [pc, #332]	; (804a2a8 <_strtod_l+0x960>)
 804a15c:	465b      	mov	r3, fp
 804a15e:	2900      	cmp	r1, #0
 804a160:	f000 8081 	beq.w	804a266 <_strtod_l+0x91e>
 804a164:	ea02 010b 	and.w	r1, r2, fp
 804a168:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 804a16c:	dc7b      	bgt.n	804a266 <_strtod_l+0x91e>
 804a16e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 804a172:	f77f aea9 	ble.w	8049ec8 <_strtod_l+0x580>
 804a176:	4b4d      	ldr	r3, [pc, #308]	; (804a2ac <_strtod_l+0x964>)
 804a178:	4650      	mov	r0, sl
 804a17a:	4659      	mov	r1, fp
 804a17c:	2200      	movs	r2, #0
 804a17e:	f7f6 fa3b 	bl	80405f8 <__aeabi_dmul>
 804a182:	460b      	mov	r3, r1
 804a184:	4303      	orrs	r3, r0
 804a186:	bf08      	it	eq
 804a188:	2322      	moveq	r3, #34	; 0x22
 804a18a:	4682      	mov	sl, r0
 804a18c:	468b      	mov	fp, r1
 804a18e:	bf08      	it	eq
 804a190:	6023      	streq	r3, [r4, #0]
 804a192:	e62b      	b.n	8049dec <_strtod_l+0x4a4>
 804a194:	f04f 32ff 	mov.w	r2, #4294967295
 804a198:	fa02 f303 	lsl.w	r3, r2, r3
 804a19c:	ea03 0a0a 	and.w	sl, r3, sl
 804a1a0:	e6e3      	b.n	8049f6a <_strtod_l+0x622>
 804a1a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 804a1a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 804a1aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 804a1ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 804a1b2:	fa01 f308 	lsl.w	r3, r1, r8
 804a1b6:	9308      	str	r3, [sp, #32]
 804a1b8:	910d      	str	r1, [sp, #52]	; 0x34
 804a1ba:	e746      	b.n	804a04a <_strtod_l+0x702>
 804a1bc:	2300      	movs	r3, #0
 804a1be:	9308      	str	r3, [sp, #32]
 804a1c0:	2301      	movs	r3, #1
 804a1c2:	930d      	str	r3, [sp, #52]	; 0x34
 804a1c4:	e741      	b.n	804a04a <_strtod_l+0x702>
 804a1c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 804a1c8:	4642      	mov	r2, r8
 804a1ca:	4620      	mov	r0, r4
 804a1cc:	f001 fef4 	bl	804bfb8 <__lshift>
 804a1d0:	9018      	str	r0, [sp, #96]	; 0x60
 804a1d2:	2800      	cmp	r0, #0
 804a1d4:	f47f af6b 	bne.w	804a0ae <_strtod_l+0x766>
 804a1d8:	e5fe      	b.n	8049dd8 <_strtod_l+0x490>
 804a1da:	465f      	mov	r7, fp
 804a1dc:	d16e      	bne.n	804a2bc <_strtod_l+0x974>
 804a1de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804a1e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a1e4:	b342      	cbz	r2, 804a238 <_strtod_l+0x8f0>
 804a1e6:	4a32      	ldr	r2, [pc, #200]	; (804a2b0 <_strtod_l+0x968>)
 804a1e8:	4293      	cmp	r3, r2
 804a1ea:	d128      	bne.n	804a23e <_strtod_l+0x8f6>
 804a1ec:	9b04      	ldr	r3, [sp, #16]
 804a1ee:	4651      	mov	r1, sl
 804a1f0:	b1eb      	cbz	r3, 804a22e <_strtod_l+0x8e6>
 804a1f2:	4b2d      	ldr	r3, [pc, #180]	; (804a2a8 <_strtod_l+0x960>)
 804a1f4:	403b      	ands	r3, r7
 804a1f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 804a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 804a1fe:	d819      	bhi.n	804a234 <_strtod_l+0x8ec>
 804a200:	0d1b      	lsrs	r3, r3, #20
 804a202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 804a206:	fa02 f303 	lsl.w	r3, r2, r3
 804a20a:	4299      	cmp	r1, r3
 804a20c:	d117      	bne.n	804a23e <_strtod_l+0x8f6>
 804a20e:	4b29      	ldr	r3, [pc, #164]	; (804a2b4 <_strtod_l+0x96c>)
 804a210:	429f      	cmp	r7, r3
 804a212:	d102      	bne.n	804a21a <_strtod_l+0x8d2>
 804a214:	3101      	adds	r1, #1
 804a216:	f43f addf 	beq.w	8049dd8 <_strtod_l+0x490>
 804a21a:	4b23      	ldr	r3, [pc, #140]	; (804a2a8 <_strtod_l+0x960>)
 804a21c:	403b      	ands	r3, r7
 804a21e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 804a222:	f04f 0a00 	mov.w	sl, #0
 804a226:	9b04      	ldr	r3, [sp, #16]
 804a228:	2b00      	cmp	r3, #0
 804a22a:	d1a4      	bne.n	804a176 <_strtod_l+0x82e>
 804a22c:	e5de      	b.n	8049dec <_strtod_l+0x4a4>
 804a22e:	f04f 33ff 	mov.w	r3, #4294967295
 804a232:	e7ea      	b.n	804a20a <_strtod_l+0x8c2>
 804a234:	4613      	mov	r3, r2
 804a236:	e7e8      	b.n	804a20a <_strtod_l+0x8c2>
 804a238:	ea53 030a 	orrs.w	r3, r3, sl
 804a23c:	d08c      	beq.n	804a158 <_strtod_l+0x810>
 804a23e:	9b08      	ldr	r3, [sp, #32]
 804a240:	b1db      	cbz	r3, 804a27a <_strtod_l+0x932>
 804a242:	423b      	tst	r3, r7
 804a244:	d0ef      	beq.n	804a226 <_strtod_l+0x8de>
 804a246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a248:	9a04      	ldr	r2, [sp, #16]
 804a24a:	4650      	mov	r0, sl
 804a24c:	4659      	mov	r1, fp
 804a24e:	b1c3      	cbz	r3, 804a282 <_strtod_l+0x93a>
 804a250:	f7ff fb5e 	bl	8049910 <sulp>
 804a254:	4602      	mov	r2, r0
 804a256:	460b      	mov	r3, r1
 804a258:	ec51 0b18 	vmov	r0, r1, d8
 804a25c:	f7f6 f816 	bl	804028c <__adddf3>
 804a260:	4682      	mov	sl, r0
 804a262:	468b      	mov	fp, r1
 804a264:	e7df      	b.n	804a226 <_strtod_l+0x8de>
 804a266:	4013      	ands	r3, r2
 804a268:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 804a26c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 804a270:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 804a274:	f04f 3aff 	mov.w	sl, #4294967295
 804a278:	e7d5      	b.n	804a226 <_strtod_l+0x8de>
 804a27a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804a27c:	ea13 0f0a 	tst.w	r3, sl
 804a280:	e7e0      	b.n	804a244 <_strtod_l+0x8fc>
 804a282:	f7ff fb45 	bl	8049910 <sulp>
 804a286:	4602      	mov	r2, r0
 804a288:	460b      	mov	r3, r1
 804a28a:	ec51 0b18 	vmov	r0, r1, d8
 804a28e:	f7f5 fffb 	bl	8040288 <__aeabi_dsub>
 804a292:	2200      	movs	r2, #0
 804a294:	2300      	movs	r3, #0
 804a296:	4682      	mov	sl, r0
 804a298:	468b      	mov	fp, r1
 804a29a:	f7f6 fc15 	bl	8040ac8 <__aeabi_dcmpeq>
 804a29e:	2800      	cmp	r0, #0
 804a2a0:	d0c1      	beq.n	804a226 <_strtod_l+0x8de>
 804a2a2:	e611      	b.n	8049ec8 <_strtod_l+0x580>
 804a2a4:	fffffc02 	.word	0xfffffc02
 804a2a8:	7ff00000 	.word	0x7ff00000
 804a2ac:	39500000 	.word	0x39500000
 804a2b0:	000fffff 	.word	0x000fffff
 804a2b4:	7fefffff 	.word	0x7fefffff
 804a2b8:	0804e580 	.word	0x0804e580
 804a2bc:	4631      	mov	r1, r6
 804a2be:	4628      	mov	r0, r5
 804a2c0:	f002 f868 	bl	804c394 <__ratio>
 804a2c4:	ec59 8b10 	vmov	r8, r9, d0
 804a2c8:	ee10 0a10 	vmov	r0, s0
 804a2cc:	2200      	movs	r2, #0
 804a2ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804a2d2:	4649      	mov	r1, r9
 804a2d4:	f7f6 fc0c 	bl	8040af0 <__aeabi_dcmple>
 804a2d8:	2800      	cmp	r0, #0
 804a2da:	d07a      	beq.n	804a3d2 <_strtod_l+0xa8a>
 804a2dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a2de:	2b00      	cmp	r3, #0
 804a2e0:	d04a      	beq.n	804a378 <_strtod_l+0xa30>
 804a2e2:	4b95      	ldr	r3, [pc, #596]	; (804a538 <_strtod_l+0xbf0>)
 804a2e4:	2200      	movs	r2, #0
 804a2e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804a2ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 804a538 <_strtod_l+0xbf0>
 804a2ee:	f04f 0800 	mov.w	r8, #0
 804a2f2:	4b92      	ldr	r3, [pc, #584]	; (804a53c <_strtod_l+0xbf4>)
 804a2f4:	403b      	ands	r3, r7
 804a2f6:	930d      	str	r3, [sp, #52]	; 0x34
 804a2f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a2fa:	4b91      	ldr	r3, [pc, #580]	; (804a540 <_strtod_l+0xbf8>)
 804a2fc:	429a      	cmp	r2, r3
 804a2fe:	f040 80b0 	bne.w	804a462 <_strtod_l+0xb1a>
 804a302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a306:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 804a30a:	ec4b ab10 	vmov	d0, sl, fp
 804a30e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804a312:	f001 ff67 	bl	804c1e4 <__ulp>
 804a316:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a31a:	ec53 2b10 	vmov	r2, r3, d0
 804a31e:	f7f6 f96b 	bl	80405f8 <__aeabi_dmul>
 804a322:	4652      	mov	r2, sl
 804a324:	465b      	mov	r3, fp
 804a326:	f7f5 ffb1 	bl	804028c <__adddf3>
 804a32a:	460b      	mov	r3, r1
 804a32c:	4983      	ldr	r1, [pc, #524]	; (804a53c <_strtod_l+0xbf4>)
 804a32e:	4a85      	ldr	r2, [pc, #532]	; (804a544 <_strtod_l+0xbfc>)
 804a330:	4019      	ands	r1, r3
 804a332:	4291      	cmp	r1, r2
 804a334:	4682      	mov	sl, r0
 804a336:	d960      	bls.n	804a3fa <_strtod_l+0xab2>
 804a338:	ee18 3a90 	vmov	r3, s17
 804a33c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 804a340:	4293      	cmp	r3, r2
 804a342:	d104      	bne.n	804a34e <_strtod_l+0xa06>
 804a344:	ee18 3a10 	vmov	r3, s16
 804a348:	3301      	adds	r3, #1
 804a34a:	f43f ad45 	beq.w	8049dd8 <_strtod_l+0x490>
 804a34e:	f8df b200 	ldr.w	fp, [pc, #512]	; 804a550 <_strtod_l+0xc08>
 804a352:	f04f 3aff 	mov.w	sl, #4294967295
 804a356:	9918      	ldr	r1, [sp, #96]	; 0x60
 804a358:	4620      	mov	r0, r4
 804a35a:	f001 fc11 	bl	804bb80 <_Bfree>
 804a35e:	9905      	ldr	r1, [sp, #20]
 804a360:	4620      	mov	r0, r4
 804a362:	f001 fc0d 	bl	804bb80 <_Bfree>
 804a366:	4631      	mov	r1, r6
 804a368:	4620      	mov	r0, r4
 804a36a:	f001 fc09 	bl	804bb80 <_Bfree>
 804a36e:	4629      	mov	r1, r5
 804a370:	4620      	mov	r0, r4
 804a372:	f001 fc05 	bl	804bb80 <_Bfree>
 804a376:	e61a      	b.n	8049fae <_strtod_l+0x666>
 804a378:	f1ba 0f00 	cmp.w	sl, #0
 804a37c:	d11b      	bne.n	804a3b6 <_strtod_l+0xa6e>
 804a37e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a382:	b9f3      	cbnz	r3, 804a3c2 <_strtod_l+0xa7a>
 804a384:	4b6c      	ldr	r3, [pc, #432]	; (804a538 <_strtod_l+0xbf0>)
 804a386:	2200      	movs	r2, #0
 804a388:	4640      	mov	r0, r8
 804a38a:	4649      	mov	r1, r9
 804a38c:	f7f6 fba6 	bl	8040adc <__aeabi_dcmplt>
 804a390:	b9d0      	cbnz	r0, 804a3c8 <_strtod_l+0xa80>
 804a392:	4640      	mov	r0, r8
 804a394:	4649      	mov	r1, r9
 804a396:	4b6c      	ldr	r3, [pc, #432]	; (804a548 <_strtod_l+0xc00>)
 804a398:	2200      	movs	r2, #0
 804a39a:	f7f6 f92d 	bl	80405f8 <__aeabi_dmul>
 804a39e:	4680      	mov	r8, r0
 804a3a0:	4689      	mov	r9, r1
 804a3a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 804a3a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 804a3aa:	9315      	str	r3, [sp, #84]	; 0x54
 804a3ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 804a3b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804a3b4:	e79d      	b.n	804a2f2 <_strtod_l+0x9aa>
 804a3b6:	f1ba 0f01 	cmp.w	sl, #1
 804a3ba:	d102      	bne.n	804a3c2 <_strtod_l+0xa7a>
 804a3bc:	2f00      	cmp	r7, #0
 804a3be:	f43f ad83 	beq.w	8049ec8 <_strtod_l+0x580>
 804a3c2:	4b62      	ldr	r3, [pc, #392]	; (804a54c <_strtod_l+0xc04>)
 804a3c4:	2200      	movs	r2, #0
 804a3c6:	e78e      	b.n	804a2e6 <_strtod_l+0x99e>
 804a3c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 804a548 <_strtod_l+0xc00>
 804a3cc:	f04f 0800 	mov.w	r8, #0
 804a3d0:	e7e7      	b.n	804a3a2 <_strtod_l+0xa5a>
 804a3d2:	4b5d      	ldr	r3, [pc, #372]	; (804a548 <_strtod_l+0xc00>)
 804a3d4:	4640      	mov	r0, r8
 804a3d6:	4649      	mov	r1, r9
 804a3d8:	2200      	movs	r2, #0
 804a3da:	f7f6 f90d 	bl	80405f8 <__aeabi_dmul>
 804a3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a3e0:	4680      	mov	r8, r0
 804a3e2:	4689      	mov	r9, r1
 804a3e4:	b933      	cbnz	r3, 804a3f4 <_strtod_l+0xaac>
 804a3e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804a3ea:	900e      	str	r0, [sp, #56]	; 0x38
 804a3ec:	930f      	str	r3, [sp, #60]	; 0x3c
 804a3ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 804a3f2:	e7dd      	b.n	804a3b0 <_strtod_l+0xa68>
 804a3f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 804a3f8:	e7f9      	b.n	804a3ee <_strtod_l+0xaa6>
 804a3fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 804a3fe:	9b04      	ldr	r3, [sp, #16]
 804a400:	2b00      	cmp	r3, #0
 804a402:	d1a8      	bne.n	804a356 <_strtod_l+0xa0e>
 804a404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804a408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a40a:	0d1b      	lsrs	r3, r3, #20
 804a40c:	051b      	lsls	r3, r3, #20
 804a40e:	429a      	cmp	r2, r3
 804a410:	d1a1      	bne.n	804a356 <_strtod_l+0xa0e>
 804a412:	4640      	mov	r0, r8
 804a414:	4649      	mov	r1, r9
 804a416:	f7f6 fc4f 	bl	8040cb8 <__aeabi_d2lz>
 804a41a:	f7f6 f8bf 	bl	804059c <__aeabi_l2d>
 804a41e:	4602      	mov	r2, r0
 804a420:	460b      	mov	r3, r1
 804a422:	4640      	mov	r0, r8
 804a424:	4649      	mov	r1, r9
 804a426:	f7f5 ff2f 	bl	8040288 <__aeabi_dsub>
 804a42a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804a42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a430:	ea43 030a 	orr.w	r3, r3, sl
 804a434:	4313      	orrs	r3, r2
 804a436:	4680      	mov	r8, r0
 804a438:	4689      	mov	r9, r1
 804a43a:	d055      	beq.n	804a4e8 <_strtod_l+0xba0>
 804a43c:	a336      	add	r3, pc, #216	; (adr r3, 804a518 <_strtod_l+0xbd0>)
 804a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a442:	f7f6 fb4b 	bl	8040adc <__aeabi_dcmplt>
 804a446:	2800      	cmp	r0, #0
 804a448:	f47f acd0 	bne.w	8049dec <_strtod_l+0x4a4>
 804a44c:	a334      	add	r3, pc, #208	; (adr r3, 804a520 <_strtod_l+0xbd8>)
 804a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a452:	4640      	mov	r0, r8
 804a454:	4649      	mov	r1, r9
 804a456:	f7f6 fb5f 	bl	8040b18 <__aeabi_dcmpgt>
 804a45a:	2800      	cmp	r0, #0
 804a45c:	f43f af7b 	beq.w	804a356 <_strtod_l+0xa0e>
 804a460:	e4c4      	b.n	8049dec <_strtod_l+0x4a4>
 804a462:	9b04      	ldr	r3, [sp, #16]
 804a464:	b333      	cbz	r3, 804a4b4 <_strtod_l+0xb6c>
 804a466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804a468:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 804a46c:	d822      	bhi.n	804a4b4 <_strtod_l+0xb6c>
 804a46e:	a32e      	add	r3, pc, #184	; (adr r3, 804a528 <_strtod_l+0xbe0>)
 804a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a474:	4640      	mov	r0, r8
 804a476:	4649      	mov	r1, r9
 804a478:	f7f6 fb3a 	bl	8040af0 <__aeabi_dcmple>
 804a47c:	b1a0      	cbz	r0, 804a4a8 <_strtod_l+0xb60>
 804a47e:	4649      	mov	r1, r9
 804a480:	4640      	mov	r0, r8
 804a482:	f7f6 fb91 	bl	8040ba8 <__aeabi_d2uiz>
 804a486:	2801      	cmp	r0, #1
 804a488:	bf38      	it	cc
 804a48a:	2001      	movcc	r0, #1
 804a48c:	f7f6 f83a 	bl	8040504 <__aeabi_ui2d>
 804a490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804a492:	4680      	mov	r8, r0
 804a494:	4689      	mov	r9, r1
 804a496:	bb23      	cbnz	r3, 804a4e2 <_strtod_l+0xb9a>
 804a498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804a49c:	9010      	str	r0, [sp, #64]	; 0x40
 804a49e:	9311      	str	r3, [sp, #68]	; 0x44
 804a4a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 804a4a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 804a4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a4aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 804a4ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 804a4b0:	1a9b      	subs	r3, r3, r2
 804a4b2:	9309      	str	r3, [sp, #36]	; 0x24
 804a4b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a4b8:	eeb0 0a48 	vmov.f32	s0, s16
 804a4bc:	eef0 0a68 	vmov.f32	s1, s17
 804a4c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 804a4c4:	f001 fe8e 	bl	804c1e4 <__ulp>
 804a4c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 804a4cc:	ec53 2b10 	vmov	r2, r3, d0
 804a4d0:	f7f6 f892 	bl	80405f8 <__aeabi_dmul>
 804a4d4:	ec53 2b18 	vmov	r2, r3, d8
 804a4d8:	f7f5 fed8 	bl	804028c <__adddf3>
 804a4dc:	4682      	mov	sl, r0
 804a4de:	468b      	mov	fp, r1
 804a4e0:	e78d      	b.n	804a3fe <_strtod_l+0xab6>
 804a4e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 804a4e6:	e7db      	b.n	804a4a0 <_strtod_l+0xb58>
 804a4e8:	a311      	add	r3, pc, #68	; (adr r3, 804a530 <_strtod_l+0xbe8>)
 804a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a4ee:	f7f6 faf5 	bl	8040adc <__aeabi_dcmplt>
 804a4f2:	e7b2      	b.n	804a45a <_strtod_l+0xb12>
 804a4f4:	2300      	movs	r3, #0
 804a4f6:	930a      	str	r3, [sp, #40]	; 0x28
 804a4f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 804a4fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 804a4fc:	6013      	str	r3, [r2, #0]
 804a4fe:	f7ff ba6b 	b.w	80499d8 <_strtod_l+0x90>
 804a502:	2a65      	cmp	r2, #101	; 0x65
 804a504:	f43f ab5f 	beq.w	8049bc6 <_strtod_l+0x27e>
 804a508:	2a45      	cmp	r2, #69	; 0x45
 804a50a:	f43f ab5c 	beq.w	8049bc6 <_strtod_l+0x27e>
 804a50e:	2301      	movs	r3, #1
 804a510:	f7ff bb94 	b.w	8049c3c <_strtod_l+0x2f4>
 804a514:	f3af 8000 	nop.w
 804a518:	94a03595 	.word	0x94a03595
 804a51c:	3fdfffff 	.word	0x3fdfffff
 804a520:	35afe535 	.word	0x35afe535
 804a524:	3fe00000 	.word	0x3fe00000
 804a528:	ffc00000 	.word	0xffc00000
 804a52c:	41dfffff 	.word	0x41dfffff
 804a530:	94a03595 	.word	0x94a03595
 804a534:	3fcfffff 	.word	0x3fcfffff
 804a538:	3ff00000 	.word	0x3ff00000
 804a53c:	7ff00000 	.word	0x7ff00000
 804a540:	7fe00000 	.word	0x7fe00000
 804a544:	7c9fffff 	.word	0x7c9fffff
 804a548:	3fe00000 	.word	0x3fe00000
 804a54c:	bff00000 	.word	0xbff00000
 804a550:	7fefffff 	.word	0x7fefffff

0804a554 <_strtod_r>:
 804a554:	4b01      	ldr	r3, [pc, #4]	; (804a55c <_strtod_r+0x8>)
 804a556:	f7ff b9f7 	b.w	8049948 <_strtod_l>
 804a55a:	bf00      	nop
 804a55c:	2000007c 	.word	0x2000007c

0804a560 <_strtol_l.constprop.0>:
 804a560:	2b01      	cmp	r3, #1
 804a562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804a566:	d001      	beq.n	804a56c <_strtol_l.constprop.0+0xc>
 804a568:	2b24      	cmp	r3, #36	; 0x24
 804a56a:	d906      	bls.n	804a57a <_strtol_l.constprop.0+0x1a>
 804a56c:	f7fe faf0 	bl	8048b50 <__errno>
 804a570:	2316      	movs	r3, #22
 804a572:	6003      	str	r3, [r0, #0]
 804a574:	2000      	movs	r0, #0
 804a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804a57a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 804a660 <_strtol_l.constprop.0+0x100>
 804a57e:	460d      	mov	r5, r1
 804a580:	462e      	mov	r6, r5
 804a582:	f815 4b01 	ldrb.w	r4, [r5], #1
 804a586:	f814 700c 	ldrb.w	r7, [r4, ip]
 804a58a:	f017 0708 	ands.w	r7, r7, #8
 804a58e:	d1f7      	bne.n	804a580 <_strtol_l.constprop.0+0x20>
 804a590:	2c2d      	cmp	r4, #45	; 0x2d
 804a592:	d132      	bne.n	804a5fa <_strtol_l.constprop.0+0x9a>
 804a594:	782c      	ldrb	r4, [r5, #0]
 804a596:	2701      	movs	r7, #1
 804a598:	1cb5      	adds	r5, r6, #2
 804a59a:	2b00      	cmp	r3, #0
 804a59c:	d05b      	beq.n	804a656 <_strtol_l.constprop.0+0xf6>
 804a59e:	2b10      	cmp	r3, #16
 804a5a0:	d109      	bne.n	804a5b6 <_strtol_l.constprop.0+0x56>
 804a5a2:	2c30      	cmp	r4, #48	; 0x30
 804a5a4:	d107      	bne.n	804a5b6 <_strtol_l.constprop.0+0x56>
 804a5a6:	782c      	ldrb	r4, [r5, #0]
 804a5a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 804a5ac:	2c58      	cmp	r4, #88	; 0x58
 804a5ae:	d14d      	bne.n	804a64c <_strtol_l.constprop.0+0xec>
 804a5b0:	786c      	ldrb	r4, [r5, #1]
 804a5b2:	2310      	movs	r3, #16
 804a5b4:	3502      	adds	r5, #2
 804a5b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 804a5ba:	f108 38ff 	add.w	r8, r8, #4294967295
 804a5be:	f04f 0c00 	mov.w	ip, #0
 804a5c2:	fbb8 f9f3 	udiv	r9, r8, r3
 804a5c6:	4666      	mov	r6, ip
 804a5c8:	fb03 8a19 	mls	sl, r3, r9, r8
 804a5cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 804a5d0:	f1be 0f09 	cmp.w	lr, #9
 804a5d4:	d816      	bhi.n	804a604 <_strtol_l.constprop.0+0xa4>
 804a5d6:	4674      	mov	r4, lr
 804a5d8:	42a3      	cmp	r3, r4
 804a5da:	dd24      	ble.n	804a626 <_strtol_l.constprop.0+0xc6>
 804a5dc:	f1bc 0f00 	cmp.w	ip, #0
 804a5e0:	db1e      	blt.n	804a620 <_strtol_l.constprop.0+0xc0>
 804a5e2:	45b1      	cmp	r9, r6
 804a5e4:	d31c      	bcc.n	804a620 <_strtol_l.constprop.0+0xc0>
 804a5e6:	d101      	bne.n	804a5ec <_strtol_l.constprop.0+0x8c>
 804a5e8:	45a2      	cmp	sl, r4
 804a5ea:	db19      	blt.n	804a620 <_strtol_l.constprop.0+0xc0>
 804a5ec:	fb06 4603 	mla	r6, r6, r3, r4
 804a5f0:	f04f 0c01 	mov.w	ip, #1
 804a5f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 804a5f8:	e7e8      	b.n	804a5cc <_strtol_l.constprop.0+0x6c>
 804a5fa:	2c2b      	cmp	r4, #43	; 0x2b
 804a5fc:	bf04      	itt	eq
 804a5fe:	782c      	ldrbeq	r4, [r5, #0]
 804a600:	1cb5      	addeq	r5, r6, #2
 804a602:	e7ca      	b.n	804a59a <_strtol_l.constprop.0+0x3a>
 804a604:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 804a608:	f1be 0f19 	cmp.w	lr, #25
 804a60c:	d801      	bhi.n	804a612 <_strtol_l.constprop.0+0xb2>
 804a60e:	3c37      	subs	r4, #55	; 0x37
 804a610:	e7e2      	b.n	804a5d8 <_strtol_l.constprop.0+0x78>
 804a612:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 804a616:	f1be 0f19 	cmp.w	lr, #25
 804a61a:	d804      	bhi.n	804a626 <_strtol_l.constprop.0+0xc6>
 804a61c:	3c57      	subs	r4, #87	; 0x57
 804a61e:	e7db      	b.n	804a5d8 <_strtol_l.constprop.0+0x78>
 804a620:	f04f 3cff 	mov.w	ip, #4294967295
 804a624:	e7e6      	b.n	804a5f4 <_strtol_l.constprop.0+0x94>
 804a626:	f1bc 0f00 	cmp.w	ip, #0
 804a62a:	da05      	bge.n	804a638 <_strtol_l.constprop.0+0xd8>
 804a62c:	2322      	movs	r3, #34	; 0x22
 804a62e:	6003      	str	r3, [r0, #0]
 804a630:	4646      	mov	r6, r8
 804a632:	b942      	cbnz	r2, 804a646 <_strtol_l.constprop.0+0xe6>
 804a634:	4630      	mov	r0, r6
 804a636:	e79e      	b.n	804a576 <_strtol_l.constprop.0+0x16>
 804a638:	b107      	cbz	r7, 804a63c <_strtol_l.constprop.0+0xdc>
 804a63a:	4276      	negs	r6, r6
 804a63c:	2a00      	cmp	r2, #0
 804a63e:	d0f9      	beq.n	804a634 <_strtol_l.constprop.0+0xd4>
 804a640:	f1bc 0f00 	cmp.w	ip, #0
 804a644:	d000      	beq.n	804a648 <_strtol_l.constprop.0+0xe8>
 804a646:	1e69      	subs	r1, r5, #1
 804a648:	6011      	str	r1, [r2, #0]
 804a64a:	e7f3      	b.n	804a634 <_strtol_l.constprop.0+0xd4>
 804a64c:	2430      	movs	r4, #48	; 0x30
 804a64e:	2b00      	cmp	r3, #0
 804a650:	d1b1      	bne.n	804a5b6 <_strtol_l.constprop.0+0x56>
 804a652:	2308      	movs	r3, #8
 804a654:	e7af      	b.n	804a5b6 <_strtol_l.constprop.0+0x56>
 804a656:	2c30      	cmp	r4, #48	; 0x30
 804a658:	d0a5      	beq.n	804a5a6 <_strtol_l.constprop.0+0x46>
 804a65a:	230a      	movs	r3, #10
 804a65c:	e7ab      	b.n	804a5b6 <_strtol_l.constprop.0+0x56>
 804a65e:	bf00      	nop
 804a660:	0804e5ce 	.word	0x0804e5ce

0804a664 <_strtol_r>:
 804a664:	f7ff bf7c 	b.w	804a560 <_strtol_l.constprop.0>

0804a668 <__utoa>:
 804a668:	b5f0      	push	{r4, r5, r6, r7, lr}
 804a66a:	4c1f      	ldr	r4, [pc, #124]	; (804a6e8 <__utoa+0x80>)
 804a66c:	b08b      	sub	sp, #44	; 0x2c
 804a66e:	4605      	mov	r5, r0
 804a670:	460b      	mov	r3, r1
 804a672:	466e      	mov	r6, sp
 804a674:	f104 0c20 	add.w	ip, r4, #32
 804a678:	6820      	ldr	r0, [r4, #0]
 804a67a:	6861      	ldr	r1, [r4, #4]
 804a67c:	4637      	mov	r7, r6
 804a67e:	c703      	stmia	r7!, {r0, r1}
 804a680:	3408      	adds	r4, #8
 804a682:	4564      	cmp	r4, ip
 804a684:	463e      	mov	r6, r7
 804a686:	d1f7      	bne.n	804a678 <__utoa+0x10>
 804a688:	7921      	ldrb	r1, [r4, #4]
 804a68a:	7139      	strb	r1, [r7, #4]
 804a68c:	1e91      	subs	r1, r2, #2
 804a68e:	6820      	ldr	r0, [r4, #0]
 804a690:	6038      	str	r0, [r7, #0]
 804a692:	2922      	cmp	r1, #34	; 0x22
 804a694:	f04f 0100 	mov.w	r1, #0
 804a698:	d904      	bls.n	804a6a4 <__utoa+0x3c>
 804a69a:	7019      	strb	r1, [r3, #0]
 804a69c:	460b      	mov	r3, r1
 804a69e:	4618      	mov	r0, r3
 804a6a0:	b00b      	add	sp, #44	; 0x2c
 804a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804a6a4:	1e58      	subs	r0, r3, #1
 804a6a6:	4684      	mov	ip, r0
 804a6a8:	fbb5 f7f2 	udiv	r7, r5, r2
 804a6ac:	fb02 5617 	mls	r6, r2, r7, r5
 804a6b0:	3628      	adds	r6, #40	; 0x28
 804a6b2:	446e      	add	r6, sp
 804a6b4:	460c      	mov	r4, r1
 804a6b6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 804a6ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 804a6be:	462e      	mov	r6, r5
 804a6c0:	42b2      	cmp	r2, r6
 804a6c2:	f101 0101 	add.w	r1, r1, #1
 804a6c6:	463d      	mov	r5, r7
 804a6c8:	d9ee      	bls.n	804a6a8 <__utoa+0x40>
 804a6ca:	2200      	movs	r2, #0
 804a6cc:	545a      	strb	r2, [r3, r1]
 804a6ce:	1919      	adds	r1, r3, r4
 804a6d0:	1aa5      	subs	r5, r4, r2
 804a6d2:	42aa      	cmp	r2, r5
 804a6d4:	dae3      	bge.n	804a69e <__utoa+0x36>
 804a6d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 804a6da:	780e      	ldrb	r6, [r1, #0]
 804a6dc:	7006      	strb	r6, [r0, #0]
 804a6de:	3201      	adds	r2, #1
 804a6e0:	f801 5901 	strb.w	r5, [r1], #-1
 804a6e4:	e7f4      	b.n	804a6d0 <__utoa+0x68>
 804a6e6:	bf00      	nop
 804a6e8:	0804e5a8 	.word	0x0804e5a8

0804a6ec <utoa>:
 804a6ec:	f7ff bfbc 	b.w	804a668 <__utoa>

0804a6f0 <quorem>:
 804a6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a6f4:	6903      	ldr	r3, [r0, #16]
 804a6f6:	690c      	ldr	r4, [r1, #16]
 804a6f8:	42a3      	cmp	r3, r4
 804a6fa:	4607      	mov	r7, r0
 804a6fc:	f2c0 8081 	blt.w	804a802 <quorem+0x112>
 804a700:	3c01      	subs	r4, #1
 804a702:	f101 0814 	add.w	r8, r1, #20
 804a706:	f100 0514 	add.w	r5, r0, #20
 804a70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804a70e:	9301      	str	r3, [sp, #4]
 804a710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 804a714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804a718:	3301      	adds	r3, #1
 804a71a:	429a      	cmp	r2, r3
 804a71c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 804a720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 804a724:	fbb2 f6f3 	udiv	r6, r2, r3
 804a728:	d331      	bcc.n	804a78e <quorem+0x9e>
 804a72a:	f04f 0e00 	mov.w	lr, #0
 804a72e:	4640      	mov	r0, r8
 804a730:	46ac      	mov	ip, r5
 804a732:	46f2      	mov	sl, lr
 804a734:	f850 2b04 	ldr.w	r2, [r0], #4
 804a738:	b293      	uxth	r3, r2
 804a73a:	fb06 e303 	mla	r3, r6, r3, lr
 804a73e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 804a742:	b29b      	uxth	r3, r3
 804a744:	ebaa 0303 	sub.w	r3, sl, r3
 804a748:	f8dc a000 	ldr.w	sl, [ip]
 804a74c:	0c12      	lsrs	r2, r2, #16
 804a74e:	fa13 f38a 	uxtah	r3, r3, sl
 804a752:	fb06 e202 	mla	r2, r6, r2, lr
 804a756:	9300      	str	r3, [sp, #0]
 804a758:	9b00      	ldr	r3, [sp, #0]
 804a75a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 804a75e:	b292      	uxth	r2, r2
 804a760:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 804a764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 804a768:	f8bd 3000 	ldrh.w	r3, [sp]
 804a76c:	4581      	cmp	r9, r0
 804a76e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a772:	f84c 3b04 	str.w	r3, [ip], #4
 804a776:	ea4f 4a22 	mov.w	sl, r2, asr #16
 804a77a:	d2db      	bcs.n	804a734 <quorem+0x44>
 804a77c:	f855 300b 	ldr.w	r3, [r5, fp]
 804a780:	b92b      	cbnz	r3, 804a78e <quorem+0x9e>
 804a782:	9b01      	ldr	r3, [sp, #4]
 804a784:	3b04      	subs	r3, #4
 804a786:	429d      	cmp	r5, r3
 804a788:	461a      	mov	r2, r3
 804a78a:	d32e      	bcc.n	804a7ea <quorem+0xfa>
 804a78c:	613c      	str	r4, [r7, #16]
 804a78e:	4638      	mov	r0, r7
 804a790:	f001 fc82 	bl	804c098 <__mcmp>
 804a794:	2800      	cmp	r0, #0
 804a796:	db24      	blt.n	804a7e2 <quorem+0xf2>
 804a798:	3601      	adds	r6, #1
 804a79a:	4628      	mov	r0, r5
 804a79c:	f04f 0c00 	mov.w	ip, #0
 804a7a0:	f858 2b04 	ldr.w	r2, [r8], #4
 804a7a4:	f8d0 e000 	ldr.w	lr, [r0]
 804a7a8:	b293      	uxth	r3, r2
 804a7aa:	ebac 0303 	sub.w	r3, ip, r3
 804a7ae:	0c12      	lsrs	r2, r2, #16
 804a7b0:	fa13 f38e 	uxtah	r3, r3, lr
 804a7b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 804a7b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 804a7bc:	b29b      	uxth	r3, r3
 804a7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804a7c2:	45c1      	cmp	r9, r8
 804a7c4:	f840 3b04 	str.w	r3, [r0], #4
 804a7c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 804a7cc:	d2e8      	bcs.n	804a7a0 <quorem+0xb0>
 804a7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804a7d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804a7d6:	b922      	cbnz	r2, 804a7e2 <quorem+0xf2>
 804a7d8:	3b04      	subs	r3, #4
 804a7da:	429d      	cmp	r5, r3
 804a7dc:	461a      	mov	r2, r3
 804a7de:	d30a      	bcc.n	804a7f6 <quorem+0x106>
 804a7e0:	613c      	str	r4, [r7, #16]
 804a7e2:	4630      	mov	r0, r6
 804a7e4:	b003      	add	sp, #12
 804a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a7ea:	6812      	ldr	r2, [r2, #0]
 804a7ec:	3b04      	subs	r3, #4
 804a7ee:	2a00      	cmp	r2, #0
 804a7f0:	d1cc      	bne.n	804a78c <quorem+0x9c>
 804a7f2:	3c01      	subs	r4, #1
 804a7f4:	e7c7      	b.n	804a786 <quorem+0x96>
 804a7f6:	6812      	ldr	r2, [r2, #0]
 804a7f8:	3b04      	subs	r3, #4
 804a7fa:	2a00      	cmp	r2, #0
 804a7fc:	d1f0      	bne.n	804a7e0 <quorem+0xf0>
 804a7fe:	3c01      	subs	r4, #1
 804a800:	e7eb      	b.n	804a7da <quorem+0xea>
 804a802:	2000      	movs	r0, #0
 804a804:	e7ee      	b.n	804a7e4 <quorem+0xf4>
	...

0804a808 <_dtoa_r>:
 804a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a80c:	ed2d 8b04 	vpush	{d8-d9}
 804a810:	ec57 6b10 	vmov	r6, r7, d0
 804a814:	b093      	sub	sp, #76	; 0x4c
 804a816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 804a818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 804a81c:	9106      	str	r1, [sp, #24]
 804a81e:	ee10 aa10 	vmov	sl, s0
 804a822:	4604      	mov	r4, r0
 804a824:	9209      	str	r2, [sp, #36]	; 0x24
 804a826:	930c      	str	r3, [sp, #48]	; 0x30
 804a828:	46bb      	mov	fp, r7
 804a82a:	b975      	cbnz	r5, 804a84a <_dtoa_r+0x42>
 804a82c:	2010      	movs	r0, #16
 804a82e:	f001 f94d 	bl	804bacc <malloc>
 804a832:	4602      	mov	r2, r0
 804a834:	6260      	str	r0, [r4, #36]	; 0x24
 804a836:	b920      	cbnz	r0, 804a842 <_dtoa_r+0x3a>
 804a838:	4ba7      	ldr	r3, [pc, #668]	; (804aad8 <_dtoa_r+0x2d0>)
 804a83a:	21ea      	movs	r1, #234	; 0xea
 804a83c:	48a7      	ldr	r0, [pc, #668]	; (804aadc <_dtoa_r+0x2d4>)
 804a83e:	f002 f8ad 	bl	804c99c <__assert_func>
 804a842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 804a846:	6005      	str	r5, [r0, #0]
 804a848:	60c5      	str	r5, [r0, #12]
 804a84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804a84c:	6819      	ldr	r1, [r3, #0]
 804a84e:	b151      	cbz	r1, 804a866 <_dtoa_r+0x5e>
 804a850:	685a      	ldr	r2, [r3, #4]
 804a852:	604a      	str	r2, [r1, #4]
 804a854:	2301      	movs	r3, #1
 804a856:	4093      	lsls	r3, r2
 804a858:	608b      	str	r3, [r1, #8]
 804a85a:	4620      	mov	r0, r4
 804a85c:	f001 f990 	bl	804bb80 <_Bfree>
 804a860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804a862:	2200      	movs	r2, #0
 804a864:	601a      	str	r2, [r3, #0]
 804a866:	1e3b      	subs	r3, r7, #0
 804a868:	bfaa      	itet	ge
 804a86a:	2300      	movge	r3, #0
 804a86c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 804a870:	f8c8 3000 	strge.w	r3, [r8]
 804a874:	4b9a      	ldr	r3, [pc, #616]	; (804aae0 <_dtoa_r+0x2d8>)
 804a876:	bfbc      	itt	lt
 804a878:	2201      	movlt	r2, #1
 804a87a:	f8c8 2000 	strlt.w	r2, [r8]
 804a87e:	ea33 030b 	bics.w	r3, r3, fp
 804a882:	d11b      	bne.n	804a8bc <_dtoa_r+0xb4>
 804a884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804a886:	f242 730f 	movw	r3, #9999	; 0x270f
 804a88a:	6013      	str	r3, [r2, #0]
 804a88c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804a890:	4333      	orrs	r3, r6
 804a892:	f000 8592 	beq.w	804b3ba <_dtoa_r+0xbb2>
 804a896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a898:	b963      	cbnz	r3, 804a8b4 <_dtoa_r+0xac>
 804a89a:	4b92      	ldr	r3, [pc, #584]	; (804aae4 <_dtoa_r+0x2dc>)
 804a89c:	e022      	b.n	804a8e4 <_dtoa_r+0xdc>
 804a89e:	4b92      	ldr	r3, [pc, #584]	; (804aae8 <_dtoa_r+0x2e0>)
 804a8a0:	9301      	str	r3, [sp, #4]
 804a8a2:	3308      	adds	r3, #8
 804a8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 804a8a6:	6013      	str	r3, [r2, #0]
 804a8a8:	9801      	ldr	r0, [sp, #4]
 804a8aa:	b013      	add	sp, #76	; 0x4c
 804a8ac:	ecbd 8b04 	vpop	{d8-d9}
 804a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a8b4:	4b8b      	ldr	r3, [pc, #556]	; (804aae4 <_dtoa_r+0x2dc>)
 804a8b6:	9301      	str	r3, [sp, #4]
 804a8b8:	3303      	adds	r3, #3
 804a8ba:	e7f3      	b.n	804a8a4 <_dtoa_r+0x9c>
 804a8bc:	2200      	movs	r2, #0
 804a8be:	2300      	movs	r3, #0
 804a8c0:	4650      	mov	r0, sl
 804a8c2:	4659      	mov	r1, fp
 804a8c4:	f7f6 f900 	bl	8040ac8 <__aeabi_dcmpeq>
 804a8c8:	ec4b ab19 	vmov	d9, sl, fp
 804a8cc:	4680      	mov	r8, r0
 804a8ce:	b158      	cbz	r0, 804a8e8 <_dtoa_r+0xe0>
 804a8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804a8d2:	2301      	movs	r3, #1
 804a8d4:	6013      	str	r3, [r2, #0]
 804a8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a8d8:	2b00      	cmp	r3, #0
 804a8da:	f000 856b 	beq.w	804b3b4 <_dtoa_r+0xbac>
 804a8de:	4883      	ldr	r0, [pc, #524]	; (804aaec <_dtoa_r+0x2e4>)
 804a8e0:	6018      	str	r0, [r3, #0]
 804a8e2:	1e43      	subs	r3, r0, #1
 804a8e4:	9301      	str	r3, [sp, #4]
 804a8e6:	e7df      	b.n	804a8a8 <_dtoa_r+0xa0>
 804a8e8:	ec4b ab10 	vmov	d0, sl, fp
 804a8ec:	aa10      	add	r2, sp, #64	; 0x40
 804a8ee:	a911      	add	r1, sp, #68	; 0x44
 804a8f0:	4620      	mov	r0, r4
 804a8f2:	f001 fcf3 	bl	804c2dc <__d2b>
 804a8f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 804a8fa:	ee08 0a10 	vmov	s16, r0
 804a8fe:	2d00      	cmp	r5, #0
 804a900:	f000 8084 	beq.w	804aa0c <_dtoa_r+0x204>
 804a904:	ee19 3a90 	vmov	r3, s19
 804a908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 804a90c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 804a910:	4656      	mov	r6, sl
 804a912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 804a916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 804a91a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 804a91e:	4b74      	ldr	r3, [pc, #464]	; (804aaf0 <_dtoa_r+0x2e8>)
 804a920:	2200      	movs	r2, #0
 804a922:	4630      	mov	r0, r6
 804a924:	4639      	mov	r1, r7
 804a926:	f7f5 fcaf 	bl	8040288 <__aeabi_dsub>
 804a92a:	a365      	add	r3, pc, #404	; (adr r3, 804aac0 <_dtoa_r+0x2b8>)
 804a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a930:	f7f5 fe62 	bl	80405f8 <__aeabi_dmul>
 804a934:	a364      	add	r3, pc, #400	; (adr r3, 804aac8 <_dtoa_r+0x2c0>)
 804a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a93a:	f7f5 fca7 	bl	804028c <__adddf3>
 804a93e:	4606      	mov	r6, r0
 804a940:	4628      	mov	r0, r5
 804a942:	460f      	mov	r7, r1
 804a944:	f7f5 fdee 	bl	8040524 <__aeabi_i2d>
 804a948:	a361      	add	r3, pc, #388	; (adr r3, 804aad0 <_dtoa_r+0x2c8>)
 804a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a94e:	f7f5 fe53 	bl	80405f8 <__aeabi_dmul>
 804a952:	4602      	mov	r2, r0
 804a954:	460b      	mov	r3, r1
 804a956:	4630      	mov	r0, r6
 804a958:	4639      	mov	r1, r7
 804a95a:	f7f5 fc97 	bl	804028c <__adddf3>
 804a95e:	4606      	mov	r6, r0
 804a960:	460f      	mov	r7, r1
 804a962:	f7f6 f8f9 	bl	8040b58 <__aeabi_d2iz>
 804a966:	2200      	movs	r2, #0
 804a968:	9000      	str	r0, [sp, #0]
 804a96a:	2300      	movs	r3, #0
 804a96c:	4630      	mov	r0, r6
 804a96e:	4639      	mov	r1, r7
 804a970:	f7f6 f8b4 	bl	8040adc <__aeabi_dcmplt>
 804a974:	b150      	cbz	r0, 804a98c <_dtoa_r+0x184>
 804a976:	9800      	ldr	r0, [sp, #0]
 804a978:	f7f5 fdd4 	bl	8040524 <__aeabi_i2d>
 804a97c:	4632      	mov	r2, r6
 804a97e:	463b      	mov	r3, r7
 804a980:	f7f6 f8a2 	bl	8040ac8 <__aeabi_dcmpeq>
 804a984:	b910      	cbnz	r0, 804a98c <_dtoa_r+0x184>
 804a986:	9b00      	ldr	r3, [sp, #0]
 804a988:	3b01      	subs	r3, #1
 804a98a:	9300      	str	r3, [sp, #0]
 804a98c:	9b00      	ldr	r3, [sp, #0]
 804a98e:	2b16      	cmp	r3, #22
 804a990:	d85a      	bhi.n	804aa48 <_dtoa_r+0x240>
 804a992:	9a00      	ldr	r2, [sp, #0]
 804a994:	4b57      	ldr	r3, [pc, #348]	; (804aaf4 <_dtoa_r+0x2ec>)
 804a996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804a99e:	ec51 0b19 	vmov	r0, r1, d9
 804a9a2:	f7f6 f89b 	bl	8040adc <__aeabi_dcmplt>
 804a9a6:	2800      	cmp	r0, #0
 804a9a8:	d050      	beq.n	804aa4c <_dtoa_r+0x244>
 804a9aa:	9b00      	ldr	r3, [sp, #0]
 804a9ac:	3b01      	subs	r3, #1
 804a9ae:	9300      	str	r3, [sp, #0]
 804a9b0:	2300      	movs	r3, #0
 804a9b2:	930b      	str	r3, [sp, #44]	; 0x2c
 804a9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804a9b6:	1b5d      	subs	r5, r3, r5
 804a9b8:	1e6b      	subs	r3, r5, #1
 804a9ba:	9305      	str	r3, [sp, #20]
 804a9bc:	bf45      	ittet	mi
 804a9be:	f1c5 0301 	rsbmi	r3, r5, #1
 804a9c2:	9304      	strmi	r3, [sp, #16]
 804a9c4:	2300      	movpl	r3, #0
 804a9c6:	2300      	movmi	r3, #0
 804a9c8:	bf4c      	ite	mi
 804a9ca:	9305      	strmi	r3, [sp, #20]
 804a9cc:	9304      	strpl	r3, [sp, #16]
 804a9ce:	9b00      	ldr	r3, [sp, #0]
 804a9d0:	2b00      	cmp	r3, #0
 804a9d2:	db3d      	blt.n	804aa50 <_dtoa_r+0x248>
 804a9d4:	9b05      	ldr	r3, [sp, #20]
 804a9d6:	9a00      	ldr	r2, [sp, #0]
 804a9d8:	920a      	str	r2, [sp, #40]	; 0x28
 804a9da:	4413      	add	r3, r2
 804a9dc:	9305      	str	r3, [sp, #20]
 804a9de:	2300      	movs	r3, #0
 804a9e0:	9307      	str	r3, [sp, #28]
 804a9e2:	9b06      	ldr	r3, [sp, #24]
 804a9e4:	2b09      	cmp	r3, #9
 804a9e6:	f200 8089 	bhi.w	804aafc <_dtoa_r+0x2f4>
 804a9ea:	2b05      	cmp	r3, #5
 804a9ec:	bfc4      	itt	gt
 804a9ee:	3b04      	subgt	r3, #4
 804a9f0:	9306      	strgt	r3, [sp, #24]
 804a9f2:	9b06      	ldr	r3, [sp, #24]
 804a9f4:	f1a3 0302 	sub.w	r3, r3, #2
 804a9f8:	bfcc      	ite	gt
 804a9fa:	2500      	movgt	r5, #0
 804a9fc:	2501      	movle	r5, #1
 804a9fe:	2b03      	cmp	r3, #3
 804aa00:	f200 8087 	bhi.w	804ab12 <_dtoa_r+0x30a>
 804aa04:	e8df f003 	tbb	[pc, r3]
 804aa08:	59383a2d 	.word	0x59383a2d
 804aa0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 804aa10:	441d      	add	r5, r3
 804aa12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 804aa16:	2b20      	cmp	r3, #32
 804aa18:	bfc1      	itttt	gt
 804aa1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 804aa1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 804aa22:	fa0b f303 	lslgt.w	r3, fp, r3
 804aa26:	fa26 f000 	lsrgt.w	r0, r6, r0
 804aa2a:	bfda      	itte	le
 804aa2c:	f1c3 0320 	rsble	r3, r3, #32
 804aa30:	fa06 f003 	lslle.w	r0, r6, r3
 804aa34:	4318      	orrgt	r0, r3
 804aa36:	f7f5 fd65 	bl	8040504 <__aeabi_ui2d>
 804aa3a:	2301      	movs	r3, #1
 804aa3c:	4606      	mov	r6, r0
 804aa3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 804aa42:	3d01      	subs	r5, #1
 804aa44:	930e      	str	r3, [sp, #56]	; 0x38
 804aa46:	e76a      	b.n	804a91e <_dtoa_r+0x116>
 804aa48:	2301      	movs	r3, #1
 804aa4a:	e7b2      	b.n	804a9b2 <_dtoa_r+0x1aa>
 804aa4c:	900b      	str	r0, [sp, #44]	; 0x2c
 804aa4e:	e7b1      	b.n	804a9b4 <_dtoa_r+0x1ac>
 804aa50:	9b04      	ldr	r3, [sp, #16]
 804aa52:	9a00      	ldr	r2, [sp, #0]
 804aa54:	1a9b      	subs	r3, r3, r2
 804aa56:	9304      	str	r3, [sp, #16]
 804aa58:	4253      	negs	r3, r2
 804aa5a:	9307      	str	r3, [sp, #28]
 804aa5c:	2300      	movs	r3, #0
 804aa5e:	930a      	str	r3, [sp, #40]	; 0x28
 804aa60:	e7bf      	b.n	804a9e2 <_dtoa_r+0x1da>
 804aa62:	2300      	movs	r3, #0
 804aa64:	9308      	str	r3, [sp, #32]
 804aa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804aa68:	2b00      	cmp	r3, #0
 804aa6a:	dc55      	bgt.n	804ab18 <_dtoa_r+0x310>
 804aa6c:	2301      	movs	r3, #1
 804aa6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804aa72:	461a      	mov	r2, r3
 804aa74:	9209      	str	r2, [sp, #36]	; 0x24
 804aa76:	e00c      	b.n	804aa92 <_dtoa_r+0x28a>
 804aa78:	2301      	movs	r3, #1
 804aa7a:	e7f3      	b.n	804aa64 <_dtoa_r+0x25c>
 804aa7c:	2300      	movs	r3, #0
 804aa7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804aa80:	9308      	str	r3, [sp, #32]
 804aa82:	9b00      	ldr	r3, [sp, #0]
 804aa84:	4413      	add	r3, r2
 804aa86:	9302      	str	r3, [sp, #8]
 804aa88:	3301      	adds	r3, #1
 804aa8a:	2b01      	cmp	r3, #1
 804aa8c:	9303      	str	r3, [sp, #12]
 804aa8e:	bfb8      	it	lt
 804aa90:	2301      	movlt	r3, #1
 804aa92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 804aa94:	2200      	movs	r2, #0
 804aa96:	6042      	str	r2, [r0, #4]
 804aa98:	2204      	movs	r2, #4
 804aa9a:	f102 0614 	add.w	r6, r2, #20
 804aa9e:	429e      	cmp	r6, r3
 804aaa0:	6841      	ldr	r1, [r0, #4]
 804aaa2:	d93d      	bls.n	804ab20 <_dtoa_r+0x318>
 804aaa4:	4620      	mov	r0, r4
 804aaa6:	f001 f82b 	bl	804bb00 <_Balloc>
 804aaaa:	9001      	str	r0, [sp, #4]
 804aaac:	2800      	cmp	r0, #0
 804aaae:	d13b      	bne.n	804ab28 <_dtoa_r+0x320>
 804aab0:	4b11      	ldr	r3, [pc, #68]	; (804aaf8 <_dtoa_r+0x2f0>)
 804aab2:	4602      	mov	r2, r0
 804aab4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 804aab8:	e6c0      	b.n	804a83c <_dtoa_r+0x34>
 804aaba:	2301      	movs	r3, #1
 804aabc:	e7df      	b.n	804aa7e <_dtoa_r+0x276>
 804aabe:	bf00      	nop
 804aac0:	636f4361 	.word	0x636f4361
 804aac4:	3fd287a7 	.word	0x3fd287a7
 804aac8:	8b60c8b3 	.word	0x8b60c8b3
 804aacc:	3fc68a28 	.word	0x3fc68a28
 804aad0:	509f79fb 	.word	0x509f79fb
 804aad4:	3fd34413 	.word	0x3fd34413
 804aad8:	0804e6db 	.word	0x0804e6db
 804aadc:	0804e6f2 	.word	0x0804e6f2
 804aae0:	7ff00000 	.word	0x7ff00000
 804aae4:	0804e6d7 	.word	0x0804e6d7
 804aae8:	0804e6ce 	.word	0x0804e6ce
 804aaec:	0804e52d 	.word	0x0804e52d
 804aaf0:	3ff80000 	.word	0x3ff80000
 804aaf4:	0804e860 	.word	0x0804e860
 804aaf8:	0804e74d 	.word	0x0804e74d
 804aafc:	2501      	movs	r5, #1
 804aafe:	2300      	movs	r3, #0
 804ab00:	9306      	str	r3, [sp, #24]
 804ab02:	9508      	str	r5, [sp, #32]
 804ab04:	f04f 33ff 	mov.w	r3, #4294967295
 804ab08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804ab0c:	2200      	movs	r2, #0
 804ab0e:	2312      	movs	r3, #18
 804ab10:	e7b0      	b.n	804aa74 <_dtoa_r+0x26c>
 804ab12:	2301      	movs	r3, #1
 804ab14:	9308      	str	r3, [sp, #32]
 804ab16:	e7f5      	b.n	804ab04 <_dtoa_r+0x2fc>
 804ab18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804ab1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 804ab1e:	e7b8      	b.n	804aa92 <_dtoa_r+0x28a>
 804ab20:	3101      	adds	r1, #1
 804ab22:	6041      	str	r1, [r0, #4]
 804ab24:	0052      	lsls	r2, r2, #1
 804ab26:	e7b8      	b.n	804aa9a <_dtoa_r+0x292>
 804ab28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804ab2a:	9a01      	ldr	r2, [sp, #4]
 804ab2c:	601a      	str	r2, [r3, #0]
 804ab2e:	9b03      	ldr	r3, [sp, #12]
 804ab30:	2b0e      	cmp	r3, #14
 804ab32:	f200 809d 	bhi.w	804ac70 <_dtoa_r+0x468>
 804ab36:	2d00      	cmp	r5, #0
 804ab38:	f000 809a 	beq.w	804ac70 <_dtoa_r+0x468>
 804ab3c:	9b00      	ldr	r3, [sp, #0]
 804ab3e:	2b00      	cmp	r3, #0
 804ab40:	dd32      	ble.n	804aba8 <_dtoa_r+0x3a0>
 804ab42:	4ab7      	ldr	r2, [pc, #732]	; (804ae20 <_dtoa_r+0x618>)
 804ab44:	f003 030f 	and.w	r3, r3, #15
 804ab48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804ab4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 804ab50:	9b00      	ldr	r3, [sp, #0]
 804ab52:	05d8      	lsls	r0, r3, #23
 804ab54:	ea4f 1723 	mov.w	r7, r3, asr #4
 804ab58:	d516      	bpl.n	804ab88 <_dtoa_r+0x380>
 804ab5a:	4bb2      	ldr	r3, [pc, #712]	; (804ae24 <_dtoa_r+0x61c>)
 804ab5c:	ec51 0b19 	vmov	r0, r1, d9
 804ab60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 804ab64:	f7f5 fe72 	bl	804084c <__aeabi_ddiv>
 804ab68:	f007 070f 	and.w	r7, r7, #15
 804ab6c:	4682      	mov	sl, r0
 804ab6e:	468b      	mov	fp, r1
 804ab70:	2503      	movs	r5, #3
 804ab72:	4eac      	ldr	r6, [pc, #688]	; (804ae24 <_dtoa_r+0x61c>)
 804ab74:	b957      	cbnz	r7, 804ab8c <_dtoa_r+0x384>
 804ab76:	4642      	mov	r2, r8
 804ab78:	464b      	mov	r3, r9
 804ab7a:	4650      	mov	r0, sl
 804ab7c:	4659      	mov	r1, fp
 804ab7e:	f7f5 fe65 	bl	804084c <__aeabi_ddiv>
 804ab82:	4682      	mov	sl, r0
 804ab84:	468b      	mov	fp, r1
 804ab86:	e028      	b.n	804abda <_dtoa_r+0x3d2>
 804ab88:	2502      	movs	r5, #2
 804ab8a:	e7f2      	b.n	804ab72 <_dtoa_r+0x36a>
 804ab8c:	07f9      	lsls	r1, r7, #31
 804ab8e:	d508      	bpl.n	804aba2 <_dtoa_r+0x39a>
 804ab90:	4640      	mov	r0, r8
 804ab92:	4649      	mov	r1, r9
 804ab94:	e9d6 2300 	ldrd	r2, r3, [r6]
 804ab98:	f7f5 fd2e 	bl	80405f8 <__aeabi_dmul>
 804ab9c:	3501      	adds	r5, #1
 804ab9e:	4680      	mov	r8, r0
 804aba0:	4689      	mov	r9, r1
 804aba2:	107f      	asrs	r7, r7, #1
 804aba4:	3608      	adds	r6, #8
 804aba6:	e7e5      	b.n	804ab74 <_dtoa_r+0x36c>
 804aba8:	f000 809b 	beq.w	804ace2 <_dtoa_r+0x4da>
 804abac:	9b00      	ldr	r3, [sp, #0]
 804abae:	4f9d      	ldr	r7, [pc, #628]	; (804ae24 <_dtoa_r+0x61c>)
 804abb0:	425e      	negs	r6, r3
 804abb2:	4b9b      	ldr	r3, [pc, #620]	; (804ae20 <_dtoa_r+0x618>)
 804abb4:	f006 020f 	and.w	r2, r6, #15
 804abb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804abc0:	ec51 0b19 	vmov	r0, r1, d9
 804abc4:	f7f5 fd18 	bl	80405f8 <__aeabi_dmul>
 804abc8:	1136      	asrs	r6, r6, #4
 804abca:	4682      	mov	sl, r0
 804abcc:	468b      	mov	fp, r1
 804abce:	2300      	movs	r3, #0
 804abd0:	2502      	movs	r5, #2
 804abd2:	2e00      	cmp	r6, #0
 804abd4:	d17a      	bne.n	804accc <_dtoa_r+0x4c4>
 804abd6:	2b00      	cmp	r3, #0
 804abd8:	d1d3      	bne.n	804ab82 <_dtoa_r+0x37a>
 804abda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804abdc:	2b00      	cmp	r3, #0
 804abde:	f000 8082 	beq.w	804ace6 <_dtoa_r+0x4de>
 804abe2:	4b91      	ldr	r3, [pc, #580]	; (804ae28 <_dtoa_r+0x620>)
 804abe4:	2200      	movs	r2, #0
 804abe6:	4650      	mov	r0, sl
 804abe8:	4659      	mov	r1, fp
 804abea:	f7f5 ff77 	bl	8040adc <__aeabi_dcmplt>
 804abee:	2800      	cmp	r0, #0
 804abf0:	d079      	beq.n	804ace6 <_dtoa_r+0x4de>
 804abf2:	9b03      	ldr	r3, [sp, #12]
 804abf4:	2b00      	cmp	r3, #0
 804abf6:	d076      	beq.n	804ace6 <_dtoa_r+0x4de>
 804abf8:	9b02      	ldr	r3, [sp, #8]
 804abfa:	2b00      	cmp	r3, #0
 804abfc:	dd36      	ble.n	804ac6c <_dtoa_r+0x464>
 804abfe:	9b00      	ldr	r3, [sp, #0]
 804ac00:	4650      	mov	r0, sl
 804ac02:	4659      	mov	r1, fp
 804ac04:	1e5f      	subs	r7, r3, #1
 804ac06:	2200      	movs	r2, #0
 804ac08:	4b88      	ldr	r3, [pc, #544]	; (804ae2c <_dtoa_r+0x624>)
 804ac0a:	f7f5 fcf5 	bl	80405f8 <__aeabi_dmul>
 804ac0e:	9e02      	ldr	r6, [sp, #8]
 804ac10:	4682      	mov	sl, r0
 804ac12:	468b      	mov	fp, r1
 804ac14:	3501      	adds	r5, #1
 804ac16:	4628      	mov	r0, r5
 804ac18:	f7f5 fc84 	bl	8040524 <__aeabi_i2d>
 804ac1c:	4652      	mov	r2, sl
 804ac1e:	465b      	mov	r3, fp
 804ac20:	f7f5 fcea 	bl	80405f8 <__aeabi_dmul>
 804ac24:	4b82      	ldr	r3, [pc, #520]	; (804ae30 <_dtoa_r+0x628>)
 804ac26:	2200      	movs	r2, #0
 804ac28:	f7f5 fb30 	bl	804028c <__adddf3>
 804ac2c:	46d0      	mov	r8, sl
 804ac2e:	46d9      	mov	r9, fp
 804ac30:	4682      	mov	sl, r0
 804ac32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 804ac36:	2e00      	cmp	r6, #0
 804ac38:	d158      	bne.n	804acec <_dtoa_r+0x4e4>
 804ac3a:	4b7e      	ldr	r3, [pc, #504]	; (804ae34 <_dtoa_r+0x62c>)
 804ac3c:	2200      	movs	r2, #0
 804ac3e:	4640      	mov	r0, r8
 804ac40:	4649      	mov	r1, r9
 804ac42:	f7f5 fb21 	bl	8040288 <__aeabi_dsub>
 804ac46:	4652      	mov	r2, sl
 804ac48:	465b      	mov	r3, fp
 804ac4a:	4680      	mov	r8, r0
 804ac4c:	4689      	mov	r9, r1
 804ac4e:	f7f5 ff63 	bl	8040b18 <__aeabi_dcmpgt>
 804ac52:	2800      	cmp	r0, #0
 804ac54:	f040 8295 	bne.w	804b182 <_dtoa_r+0x97a>
 804ac58:	4652      	mov	r2, sl
 804ac5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 804ac5e:	4640      	mov	r0, r8
 804ac60:	4649      	mov	r1, r9
 804ac62:	f7f5 ff3b 	bl	8040adc <__aeabi_dcmplt>
 804ac66:	2800      	cmp	r0, #0
 804ac68:	f040 8289 	bne.w	804b17e <_dtoa_r+0x976>
 804ac6c:	ec5b ab19 	vmov	sl, fp, d9
 804ac70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804ac72:	2b00      	cmp	r3, #0
 804ac74:	f2c0 8148 	blt.w	804af08 <_dtoa_r+0x700>
 804ac78:	9a00      	ldr	r2, [sp, #0]
 804ac7a:	2a0e      	cmp	r2, #14
 804ac7c:	f300 8144 	bgt.w	804af08 <_dtoa_r+0x700>
 804ac80:	4b67      	ldr	r3, [pc, #412]	; (804ae20 <_dtoa_r+0x618>)
 804ac82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804ac86:	e9d3 8900 	ldrd	r8, r9, [r3]
 804ac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804ac8c:	2b00      	cmp	r3, #0
 804ac8e:	f280 80d5 	bge.w	804ae3c <_dtoa_r+0x634>
 804ac92:	9b03      	ldr	r3, [sp, #12]
 804ac94:	2b00      	cmp	r3, #0
 804ac96:	f300 80d1 	bgt.w	804ae3c <_dtoa_r+0x634>
 804ac9a:	f040 826f 	bne.w	804b17c <_dtoa_r+0x974>
 804ac9e:	4b65      	ldr	r3, [pc, #404]	; (804ae34 <_dtoa_r+0x62c>)
 804aca0:	2200      	movs	r2, #0
 804aca2:	4640      	mov	r0, r8
 804aca4:	4649      	mov	r1, r9
 804aca6:	f7f5 fca7 	bl	80405f8 <__aeabi_dmul>
 804acaa:	4652      	mov	r2, sl
 804acac:	465b      	mov	r3, fp
 804acae:	f7f5 ff29 	bl	8040b04 <__aeabi_dcmpge>
 804acb2:	9e03      	ldr	r6, [sp, #12]
 804acb4:	4637      	mov	r7, r6
 804acb6:	2800      	cmp	r0, #0
 804acb8:	f040 8245 	bne.w	804b146 <_dtoa_r+0x93e>
 804acbc:	9d01      	ldr	r5, [sp, #4]
 804acbe:	2331      	movs	r3, #49	; 0x31
 804acc0:	f805 3b01 	strb.w	r3, [r5], #1
 804acc4:	9b00      	ldr	r3, [sp, #0]
 804acc6:	3301      	adds	r3, #1
 804acc8:	9300      	str	r3, [sp, #0]
 804acca:	e240      	b.n	804b14e <_dtoa_r+0x946>
 804accc:	07f2      	lsls	r2, r6, #31
 804acce:	d505      	bpl.n	804acdc <_dtoa_r+0x4d4>
 804acd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 804acd4:	f7f5 fc90 	bl	80405f8 <__aeabi_dmul>
 804acd8:	3501      	adds	r5, #1
 804acda:	2301      	movs	r3, #1
 804acdc:	1076      	asrs	r6, r6, #1
 804acde:	3708      	adds	r7, #8
 804ace0:	e777      	b.n	804abd2 <_dtoa_r+0x3ca>
 804ace2:	2502      	movs	r5, #2
 804ace4:	e779      	b.n	804abda <_dtoa_r+0x3d2>
 804ace6:	9f00      	ldr	r7, [sp, #0]
 804ace8:	9e03      	ldr	r6, [sp, #12]
 804acea:	e794      	b.n	804ac16 <_dtoa_r+0x40e>
 804acec:	9901      	ldr	r1, [sp, #4]
 804acee:	4b4c      	ldr	r3, [pc, #304]	; (804ae20 <_dtoa_r+0x618>)
 804acf0:	4431      	add	r1, r6
 804acf2:	910d      	str	r1, [sp, #52]	; 0x34
 804acf4:	9908      	ldr	r1, [sp, #32]
 804acf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 804acfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 804acfe:	2900      	cmp	r1, #0
 804ad00:	d043      	beq.n	804ad8a <_dtoa_r+0x582>
 804ad02:	494d      	ldr	r1, [pc, #308]	; (804ae38 <_dtoa_r+0x630>)
 804ad04:	2000      	movs	r0, #0
 804ad06:	f7f5 fda1 	bl	804084c <__aeabi_ddiv>
 804ad0a:	4652      	mov	r2, sl
 804ad0c:	465b      	mov	r3, fp
 804ad0e:	f7f5 fabb 	bl	8040288 <__aeabi_dsub>
 804ad12:	9d01      	ldr	r5, [sp, #4]
 804ad14:	4682      	mov	sl, r0
 804ad16:	468b      	mov	fp, r1
 804ad18:	4649      	mov	r1, r9
 804ad1a:	4640      	mov	r0, r8
 804ad1c:	f7f5 ff1c 	bl	8040b58 <__aeabi_d2iz>
 804ad20:	4606      	mov	r6, r0
 804ad22:	f7f5 fbff 	bl	8040524 <__aeabi_i2d>
 804ad26:	4602      	mov	r2, r0
 804ad28:	460b      	mov	r3, r1
 804ad2a:	4640      	mov	r0, r8
 804ad2c:	4649      	mov	r1, r9
 804ad2e:	f7f5 faab 	bl	8040288 <__aeabi_dsub>
 804ad32:	3630      	adds	r6, #48	; 0x30
 804ad34:	f805 6b01 	strb.w	r6, [r5], #1
 804ad38:	4652      	mov	r2, sl
 804ad3a:	465b      	mov	r3, fp
 804ad3c:	4680      	mov	r8, r0
 804ad3e:	4689      	mov	r9, r1
 804ad40:	f7f5 fecc 	bl	8040adc <__aeabi_dcmplt>
 804ad44:	2800      	cmp	r0, #0
 804ad46:	d163      	bne.n	804ae10 <_dtoa_r+0x608>
 804ad48:	4642      	mov	r2, r8
 804ad4a:	464b      	mov	r3, r9
 804ad4c:	4936      	ldr	r1, [pc, #216]	; (804ae28 <_dtoa_r+0x620>)
 804ad4e:	2000      	movs	r0, #0
 804ad50:	f7f5 fa9a 	bl	8040288 <__aeabi_dsub>
 804ad54:	4652      	mov	r2, sl
 804ad56:	465b      	mov	r3, fp
 804ad58:	f7f5 fec0 	bl	8040adc <__aeabi_dcmplt>
 804ad5c:	2800      	cmp	r0, #0
 804ad5e:	f040 80b5 	bne.w	804aecc <_dtoa_r+0x6c4>
 804ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804ad64:	429d      	cmp	r5, r3
 804ad66:	d081      	beq.n	804ac6c <_dtoa_r+0x464>
 804ad68:	4b30      	ldr	r3, [pc, #192]	; (804ae2c <_dtoa_r+0x624>)
 804ad6a:	2200      	movs	r2, #0
 804ad6c:	4650      	mov	r0, sl
 804ad6e:	4659      	mov	r1, fp
 804ad70:	f7f5 fc42 	bl	80405f8 <__aeabi_dmul>
 804ad74:	4b2d      	ldr	r3, [pc, #180]	; (804ae2c <_dtoa_r+0x624>)
 804ad76:	4682      	mov	sl, r0
 804ad78:	468b      	mov	fp, r1
 804ad7a:	4640      	mov	r0, r8
 804ad7c:	4649      	mov	r1, r9
 804ad7e:	2200      	movs	r2, #0
 804ad80:	f7f5 fc3a 	bl	80405f8 <__aeabi_dmul>
 804ad84:	4680      	mov	r8, r0
 804ad86:	4689      	mov	r9, r1
 804ad88:	e7c6      	b.n	804ad18 <_dtoa_r+0x510>
 804ad8a:	4650      	mov	r0, sl
 804ad8c:	4659      	mov	r1, fp
 804ad8e:	f7f5 fc33 	bl	80405f8 <__aeabi_dmul>
 804ad92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804ad94:	9d01      	ldr	r5, [sp, #4]
 804ad96:	930f      	str	r3, [sp, #60]	; 0x3c
 804ad98:	4682      	mov	sl, r0
 804ad9a:	468b      	mov	fp, r1
 804ad9c:	4649      	mov	r1, r9
 804ad9e:	4640      	mov	r0, r8
 804ada0:	f7f5 feda 	bl	8040b58 <__aeabi_d2iz>
 804ada4:	4606      	mov	r6, r0
 804ada6:	f7f5 fbbd 	bl	8040524 <__aeabi_i2d>
 804adaa:	3630      	adds	r6, #48	; 0x30
 804adac:	4602      	mov	r2, r0
 804adae:	460b      	mov	r3, r1
 804adb0:	4640      	mov	r0, r8
 804adb2:	4649      	mov	r1, r9
 804adb4:	f7f5 fa68 	bl	8040288 <__aeabi_dsub>
 804adb8:	f805 6b01 	strb.w	r6, [r5], #1
 804adbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804adbe:	429d      	cmp	r5, r3
 804adc0:	4680      	mov	r8, r0
 804adc2:	4689      	mov	r9, r1
 804adc4:	f04f 0200 	mov.w	r2, #0
 804adc8:	d124      	bne.n	804ae14 <_dtoa_r+0x60c>
 804adca:	4b1b      	ldr	r3, [pc, #108]	; (804ae38 <_dtoa_r+0x630>)
 804adcc:	4650      	mov	r0, sl
 804adce:	4659      	mov	r1, fp
 804add0:	f7f5 fa5c 	bl	804028c <__adddf3>
 804add4:	4602      	mov	r2, r0
 804add6:	460b      	mov	r3, r1
 804add8:	4640      	mov	r0, r8
 804adda:	4649      	mov	r1, r9
 804addc:	f7f5 fe9c 	bl	8040b18 <__aeabi_dcmpgt>
 804ade0:	2800      	cmp	r0, #0
 804ade2:	d173      	bne.n	804aecc <_dtoa_r+0x6c4>
 804ade4:	4652      	mov	r2, sl
 804ade6:	465b      	mov	r3, fp
 804ade8:	4913      	ldr	r1, [pc, #76]	; (804ae38 <_dtoa_r+0x630>)
 804adea:	2000      	movs	r0, #0
 804adec:	f7f5 fa4c 	bl	8040288 <__aeabi_dsub>
 804adf0:	4602      	mov	r2, r0
 804adf2:	460b      	mov	r3, r1
 804adf4:	4640      	mov	r0, r8
 804adf6:	4649      	mov	r1, r9
 804adf8:	f7f5 fe70 	bl	8040adc <__aeabi_dcmplt>
 804adfc:	2800      	cmp	r0, #0
 804adfe:	f43f af35 	beq.w	804ac6c <_dtoa_r+0x464>
 804ae02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 804ae04:	1e6b      	subs	r3, r5, #1
 804ae06:	930f      	str	r3, [sp, #60]	; 0x3c
 804ae08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 804ae0c:	2b30      	cmp	r3, #48	; 0x30
 804ae0e:	d0f8      	beq.n	804ae02 <_dtoa_r+0x5fa>
 804ae10:	9700      	str	r7, [sp, #0]
 804ae12:	e049      	b.n	804aea8 <_dtoa_r+0x6a0>
 804ae14:	4b05      	ldr	r3, [pc, #20]	; (804ae2c <_dtoa_r+0x624>)
 804ae16:	f7f5 fbef 	bl	80405f8 <__aeabi_dmul>
 804ae1a:	4680      	mov	r8, r0
 804ae1c:	4689      	mov	r9, r1
 804ae1e:	e7bd      	b.n	804ad9c <_dtoa_r+0x594>
 804ae20:	0804e860 	.word	0x0804e860
 804ae24:	0804e838 	.word	0x0804e838
 804ae28:	3ff00000 	.word	0x3ff00000
 804ae2c:	40240000 	.word	0x40240000
 804ae30:	401c0000 	.word	0x401c0000
 804ae34:	40140000 	.word	0x40140000
 804ae38:	3fe00000 	.word	0x3fe00000
 804ae3c:	9d01      	ldr	r5, [sp, #4]
 804ae3e:	4656      	mov	r6, sl
 804ae40:	465f      	mov	r7, fp
 804ae42:	4642      	mov	r2, r8
 804ae44:	464b      	mov	r3, r9
 804ae46:	4630      	mov	r0, r6
 804ae48:	4639      	mov	r1, r7
 804ae4a:	f7f5 fcff 	bl	804084c <__aeabi_ddiv>
 804ae4e:	f7f5 fe83 	bl	8040b58 <__aeabi_d2iz>
 804ae52:	4682      	mov	sl, r0
 804ae54:	f7f5 fb66 	bl	8040524 <__aeabi_i2d>
 804ae58:	4642      	mov	r2, r8
 804ae5a:	464b      	mov	r3, r9
 804ae5c:	f7f5 fbcc 	bl	80405f8 <__aeabi_dmul>
 804ae60:	4602      	mov	r2, r0
 804ae62:	460b      	mov	r3, r1
 804ae64:	4630      	mov	r0, r6
 804ae66:	4639      	mov	r1, r7
 804ae68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 804ae6c:	f7f5 fa0c 	bl	8040288 <__aeabi_dsub>
 804ae70:	f805 6b01 	strb.w	r6, [r5], #1
 804ae74:	9e01      	ldr	r6, [sp, #4]
 804ae76:	9f03      	ldr	r7, [sp, #12]
 804ae78:	1bae      	subs	r6, r5, r6
 804ae7a:	42b7      	cmp	r7, r6
 804ae7c:	4602      	mov	r2, r0
 804ae7e:	460b      	mov	r3, r1
 804ae80:	d135      	bne.n	804aeee <_dtoa_r+0x6e6>
 804ae82:	f7f5 fa03 	bl	804028c <__adddf3>
 804ae86:	4642      	mov	r2, r8
 804ae88:	464b      	mov	r3, r9
 804ae8a:	4606      	mov	r6, r0
 804ae8c:	460f      	mov	r7, r1
 804ae8e:	f7f5 fe43 	bl	8040b18 <__aeabi_dcmpgt>
 804ae92:	b9d0      	cbnz	r0, 804aeca <_dtoa_r+0x6c2>
 804ae94:	4642      	mov	r2, r8
 804ae96:	464b      	mov	r3, r9
 804ae98:	4630      	mov	r0, r6
 804ae9a:	4639      	mov	r1, r7
 804ae9c:	f7f5 fe14 	bl	8040ac8 <__aeabi_dcmpeq>
 804aea0:	b110      	cbz	r0, 804aea8 <_dtoa_r+0x6a0>
 804aea2:	f01a 0f01 	tst.w	sl, #1
 804aea6:	d110      	bne.n	804aeca <_dtoa_r+0x6c2>
 804aea8:	4620      	mov	r0, r4
 804aeaa:	ee18 1a10 	vmov	r1, s16
 804aeae:	f000 fe67 	bl	804bb80 <_Bfree>
 804aeb2:	2300      	movs	r3, #0
 804aeb4:	9800      	ldr	r0, [sp, #0]
 804aeb6:	702b      	strb	r3, [r5, #0]
 804aeb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804aeba:	3001      	adds	r0, #1
 804aebc:	6018      	str	r0, [r3, #0]
 804aebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804aec0:	2b00      	cmp	r3, #0
 804aec2:	f43f acf1 	beq.w	804a8a8 <_dtoa_r+0xa0>
 804aec6:	601d      	str	r5, [r3, #0]
 804aec8:	e4ee      	b.n	804a8a8 <_dtoa_r+0xa0>
 804aeca:	9f00      	ldr	r7, [sp, #0]
 804aecc:	462b      	mov	r3, r5
 804aece:	461d      	mov	r5, r3
 804aed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804aed4:	2a39      	cmp	r2, #57	; 0x39
 804aed6:	d106      	bne.n	804aee6 <_dtoa_r+0x6de>
 804aed8:	9a01      	ldr	r2, [sp, #4]
 804aeda:	429a      	cmp	r2, r3
 804aedc:	d1f7      	bne.n	804aece <_dtoa_r+0x6c6>
 804aede:	9901      	ldr	r1, [sp, #4]
 804aee0:	2230      	movs	r2, #48	; 0x30
 804aee2:	3701      	adds	r7, #1
 804aee4:	700a      	strb	r2, [r1, #0]
 804aee6:	781a      	ldrb	r2, [r3, #0]
 804aee8:	3201      	adds	r2, #1
 804aeea:	701a      	strb	r2, [r3, #0]
 804aeec:	e790      	b.n	804ae10 <_dtoa_r+0x608>
 804aeee:	4ba6      	ldr	r3, [pc, #664]	; (804b188 <_dtoa_r+0x980>)
 804aef0:	2200      	movs	r2, #0
 804aef2:	f7f5 fb81 	bl	80405f8 <__aeabi_dmul>
 804aef6:	2200      	movs	r2, #0
 804aef8:	2300      	movs	r3, #0
 804aefa:	4606      	mov	r6, r0
 804aefc:	460f      	mov	r7, r1
 804aefe:	f7f5 fde3 	bl	8040ac8 <__aeabi_dcmpeq>
 804af02:	2800      	cmp	r0, #0
 804af04:	d09d      	beq.n	804ae42 <_dtoa_r+0x63a>
 804af06:	e7cf      	b.n	804aea8 <_dtoa_r+0x6a0>
 804af08:	9a08      	ldr	r2, [sp, #32]
 804af0a:	2a00      	cmp	r2, #0
 804af0c:	f000 80d7 	beq.w	804b0be <_dtoa_r+0x8b6>
 804af10:	9a06      	ldr	r2, [sp, #24]
 804af12:	2a01      	cmp	r2, #1
 804af14:	f300 80ba 	bgt.w	804b08c <_dtoa_r+0x884>
 804af18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 804af1a:	2a00      	cmp	r2, #0
 804af1c:	f000 80b2 	beq.w	804b084 <_dtoa_r+0x87c>
 804af20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 804af24:	9e07      	ldr	r6, [sp, #28]
 804af26:	9d04      	ldr	r5, [sp, #16]
 804af28:	9a04      	ldr	r2, [sp, #16]
 804af2a:	441a      	add	r2, r3
 804af2c:	9204      	str	r2, [sp, #16]
 804af2e:	9a05      	ldr	r2, [sp, #20]
 804af30:	2101      	movs	r1, #1
 804af32:	441a      	add	r2, r3
 804af34:	4620      	mov	r0, r4
 804af36:	9205      	str	r2, [sp, #20]
 804af38:	f000 ff24 	bl	804bd84 <__i2b>
 804af3c:	4607      	mov	r7, r0
 804af3e:	2d00      	cmp	r5, #0
 804af40:	dd0c      	ble.n	804af5c <_dtoa_r+0x754>
 804af42:	9b05      	ldr	r3, [sp, #20]
 804af44:	2b00      	cmp	r3, #0
 804af46:	dd09      	ble.n	804af5c <_dtoa_r+0x754>
 804af48:	42ab      	cmp	r3, r5
 804af4a:	9a04      	ldr	r2, [sp, #16]
 804af4c:	bfa8      	it	ge
 804af4e:	462b      	movge	r3, r5
 804af50:	1ad2      	subs	r2, r2, r3
 804af52:	9204      	str	r2, [sp, #16]
 804af54:	9a05      	ldr	r2, [sp, #20]
 804af56:	1aed      	subs	r5, r5, r3
 804af58:	1ad3      	subs	r3, r2, r3
 804af5a:	9305      	str	r3, [sp, #20]
 804af5c:	9b07      	ldr	r3, [sp, #28]
 804af5e:	b31b      	cbz	r3, 804afa8 <_dtoa_r+0x7a0>
 804af60:	9b08      	ldr	r3, [sp, #32]
 804af62:	2b00      	cmp	r3, #0
 804af64:	f000 80af 	beq.w	804b0c6 <_dtoa_r+0x8be>
 804af68:	2e00      	cmp	r6, #0
 804af6a:	dd13      	ble.n	804af94 <_dtoa_r+0x78c>
 804af6c:	4639      	mov	r1, r7
 804af6e:	4632      	mov	r2, r6
 804af70:	4620      	mov	r0, r4
 804af72:	f000 ffc7 	bl	804bf04 <__pow5mult>
 804af76:	ee18 2a10 	vmov	r2, s16
 804af7a:	4601      	mov	r1, r0
 804af7c:	4607      	mov	r7, r0
 804af7e:	4620      	mov	r0, r4
 804af80:	f000 ff16 	bl	804bdb0 <__multiply>
 804af84:	ee18 1a10 	vmov	r1, s16
 804af88:	4680      	mov	r8, r0
 804af8a:	4620      	mov	r0, r4
 804af8c:	f000 fdf8 	bl	804bb80 <_Bfree>
 804af90:	ee08 8a10 	vmov	s16, r8
 804af94:	9b07      	ldr	r3, [sp, #28]
 804af96:	1b9a      	subs	r2, r3, r6
 804af98:	d006      	beq.n	804afa8 <_dtoa_r+0x7a0>
 804af9a:	ee18 1a10 	vmov	r1, s16
 804af9e:	4620      	mov	r0, r4
 804afa0:	f000 ffb0 	bl	804bf04 <__pow5mult>
 804afa4:	ee08 0a10 	vmov	s16, r0
 804afa8:	2101      	movs	r1, #1
 804afaa:	4620      	mov	r0, r4
 804afac:	f000 feea 	bl	804bd84 <__i2b>
 804afb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804afb2:	2b00      	cmp	r3, #0
 804afb4:	4606      	mov	r6, r0
 804afb6:	f340 8088 	ble.w	804b0ca <_dtoa_r+0x8c2>
 804afba:	461a      	mov	r2, r3
 804afbc:	4601      	mov	r1, r0
 804afbe:	4620      	mov	r0, r4
 804afc0:	f000 ffa0 	bl	804bf04 <__pow5mult>
 804afc4:	9b06      	ldr	r3, [sp, #24]
 804afc6:	2b01      	cmp	r3, #1
 804afc8:	4606      	mov	r6, r0
 804afca:	f340 8081 	ble.w	804b0d0 <_dtoa_r+0x8c8>
 804afce:	f04f 0800 	mov.w	r8, #0
 804afd2:	6933      	ldr	r3, [r6, #16]
 804afd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 804afd8:	6918      	ldr	r0, [r3, #16]
 804afda:	f000 fe83 	bl	804bce4 <__hi0bits>
 804afde:	f1c0 0020 	rsb	r0, r0, #32
 804afe2:	9b05      	ldr	r3, [sp, #20]
 804afe4:	4418      	add	r0, r3
 804afe6:	f010 001f 	ands.w	r0, r0, #31
 804afea:	f000 8092 	beq.w	804b112 <_dtoa_r+0x90a>
 804afee:	f1c0 0320 	rsb	r3, r0, #32
 804aff2:	2b04      	cmp	r3, #4
 804aff4:	f340 808a 	ble.w	804b10c <_dtoa_r+0x904>
 804aff8:	f1c0 001c 	rsb	r0, r0, #28
 804affc:	9b04      	ldr	r3, [sp, #16]
 804affe:	4403      	add	r3, r0
 804b000:	9304      	str	r3, [sp, #16]
 804b002:	9b05      	ldr	r3, [sp, #20]
 804b004:	4403      	add	r3, r0
 804b006:	4405      	add	r5, r0
 804b008:	9305      	str	r3, [sp, #20]
 804b00a:	9b04      	ldr	r3, [sp, #16]
 804b00c:	2b00      	cmp	r3, #0
 804b00e:	dd07      	ble.n	804b020 <_dtoa_r+0x818>
 804b010:	ee18 1a10 	vmov	r1, s16
 804b014:	461a      	mov	r2, r3
 804b016:	4620      	mov	r0, r4
 804b018:	f000 ffce 	bl	804bfb8 <__lshift>
 804b01c:	ee08 0a10 	vmov	s16, r0
 804b020:	9b05      	ldr	r3, [sp, #20]
 804b022:	2b00      	cmp	r3, #0
 804b024:	dd05      	ble.n	804b032 <_dtoa_r+0x82a>
 804b026:	4631      	mov	r1, r6
 804b028:	461a      	mov	r2, r3
 804b02a:	4620      	mov	r0, r4
 804b02c:	f000 ffc4 	bl	804bfb8 <__lshift>
 804b030:	4606      	mov	r6, r0
 804b032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804b034:	2b00      	cmp	r3, #0
 804b036:	d06e      	beq.n	804b116 <_dtoa_r+0x90e>
 804b038:	ee18 0a10 	vmov	r0, s16
 804b03c:	4631      	mov	r1, r6
 804b03e:	f001 f82b 	bl	804c098 <__mcmp>
 804b042:	2800      	cmp	r0, #0
 804b044:	da67      	bge.n	804b116 <_dtoa_r+0x90e>
 804b046:	9b00      	ldr	r3, [sp, #0]
 804b048:	3b01      	subs	r3, #1
 804b04a:	ee18 1a10 	vmov	r1, s16
 804b04e:	9300      	str	r3, [sp, #0]
 804b050:	220a      	movs	r2, #10
 804b052:	2300      	movs	r3, #0
 804b054:	4620      	mov	r0, r4
 804b056:	f000 fdb5 	bl	804bbc4 <__multadd>
 804b05a:	9b08      	ldr	r3, [sp, #32]
 804b05c:	ee08 0a10 	vmov	s16, r0
 804b060:	2b00      	cmp	r3, #0
 804b062:	f000 81b1 	beq.w	804b3c8 <_dtoa_r+0xbc0>
 804b066:	2300      	movs	r3, #0
 804b068:	4639      	mov	r1, r7
 804b06a:	220a      	movs	r2, #10
 804b06c:	4620      	mov	r0, r4
 804b06e:	f000 fda9 	bl	804bbc4 <__multadd>
 804b072:	9b02      	ldr	r3, [sp, #8]
 804b074:	2b00      	cmp	r3, #0
 804b076:	4607      	mov	r7, r0
 804b078:	f300 808e 	bgt.w	804b198 <_dtoa_r+0x990>
 804b07c:	9b06      	ldr	r3, [sp, #24]
 804b07e:	2b02      	cmp	r3, #2
 804b080:	dc51      	bgt.n	804b126 <_dtoa_r+0x91e>
 804b082:	e089      	b.n	804b198 <_dtoa_r+0x990>
 804b084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804b086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 804b08a:	e74b      	b.n	804af24 <_dtoa_r+0x71c>
 804b08c:	9b03      	ldr	r3, [sp, #12]
 804b08e:	1e5e      	subs	r6, r3, #1
 804b090:	9b07      	ldr	r3, [sp, #28]
 804b092:	42b3      	cmp	r3, r6
 804b094:	bfbf      	itttt	lt
 804b096:	9b07      	ldrlt	r3, [sp, #28]
 804b098:	9607      	strlt	r6, [sp, #28]
 804b09a:	1af2      	sublt	r2, r6, r3
 804b09c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 804b09e:	bfb6      	itet	lt
 804b0a0:	189b      	addlt	r3, r3, r2
 804b0a2:	1b9e      	subge	r6, r3, r6
 804b0a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 804b0a6:	9b03      	ldr	r3, [sp, #12]
 804b0a8:	bfb8      	it	lt
 804b0aa:	2600      	movlt	r6, #0
 804b0ac:	2b00      	cmp	r3, #0
 804b0ae:	bfb7      	itett	lt
 804b0b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 804b0b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 804b0b8:	1a9d      	sublt	r5, r3, r2
 804b0ba:	2300      	movlt	r3, #0
 804b0bc:	e734      	b.n	804af28 <_dtoa_r+0x720>
 804b0be:	9e07      	ldr	r6, [sp, #28]
 804b0c0:	9d04      	ldr	r5, [sp, #16]
 804b0c2:	9f08      	ldr	r7, [sp, #32]
 804b0c4:	e73b      	b.n	804af3e <_dtoa_r+0x736>
 804b0c6:	9a07      	ldr	r2, [sp, #28]
 804b0c8:	e767      	b.n	804af9a <_dtoa_r+0x792>
 804b0ca:	9b06      	ldr	r3, [sp, #24]
 804b0cc:	2b01      	cmp	r3, #1
 804b0ce:	dc18      	bgt.n	804b102 <_dtoa_r+0x8fa>
 804b0d0:	f1ba 0f00 	cmp.w	sl, #0
 804b0d4:	d115      	bne.n	804b102 <_dtoa_r+0x8fa>
 804b0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804b0da:	b993      	cbnz	r3, 804b102 <_dtoa_r+0x8fa>
 804b0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804b0e0:	0d1b      	lsrs	r3, r3, #20
 804b0e2:	051b      	lsls	r3, r3, #20
 804b0e4:	b183      	cbz	r3, 804b108 <_dtoa_r+0x900>
 804b0e6:	9b04      	ldr	r3, [sp, #16]
 804b0e8:	3301      	adds	r3, #1
 804b0ea:	9304      	str	r3, [sp, #16]
 804b0ec:	9b05      	ldr	r3, [sp, #20]
 804b0ee:	3301      	adds	r3, #1
 804b0f0:	9305      	str	r3, [sp, #20]
 804b0f2:	f04f 0801 	mov.w	r8, #1
 804b0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804b0f8:	2b00      	cmp	r3, #0
 804b0fa:	f47f af6a 	bne.w	804afd2 <_dtoa_r+0x7ca>
 804b0fe:	2001      	movs	r0, #1
 804b100:	e76f      	b.n	804afe2 <_dtoa_r+0x7da>
 804b102:	f04f 0800 	mov.w	r8, #0
 804b106:	e7f6      	b.n	804b0f6 <_dtoa_r+0x8ee>
 804b108:	4698      	mov	r8, r3
 804b10a:	e7f4      	b.n	804b0f6 <_dtoa_r+0x8ee>
 804b10c:	f43f af7d 	beq.w	804b00a <_dtoa_r+0x802>
 804b110:	4618      	mov	r0, r3
 804b112:	301c      	adds	r0, #28
 804b114:	e772      	b.n	804affc <_dtoa_r+0x7f4>
 804b116:	9b03      	ldr	r3, [sp, #12]
 804b118:	2b00      	cmp	r3, #0
 804b11a:	dc37      	bgt.n	804b18c <_dtoa_r+0x984>
 804b11c:	9b06      	ldr	r3, [sp, #24]
 804b11e:	2b02      	cmp	r3, #2
 804b120:	dd34      	ble.n	804b18c <_dtoa_r+0x984>
 804b122:	9b03      	ldr	r3, [sp, #12]
 804b124:	9302      	str	r3, [sp, #8]
 804b126:	9b02      	ldr	r3, [sp, #8]
 804b128:	b96b      	cbnz	r3, 804b146 <_dtoa_r+0x93e>
 804b12a:	4631      	mov	r1, r6
 804b12c:	2205      	movs	r2, #5
 804b12e:	4620      	mov	r0, r4
 804b130:	f000 fd48 	bl	804bbc4 <__multadd>
 804b134:	4601      	mov	r1, r0
 804b136:	4606      	mov	r6, r0
 804b138:	ee18 0a10 	vmov	r0, s16
 804b13c:	f000 ffac 	bl	804c098 <__mcmp>
 804b140:	2800      	cmp	r0, #0
 804b142:	f73f adbb 	bgt.w	804acbc <_dtoa_r+0x4b4>
 804b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804b148:	9d01      	ldr	r5, [sp, #4]
 804b14a:	43db      	mvns	r3, r3
 804b14c:	9300      	str	r3, [sp, #0]
 804b14e:	f04f 0800 	mov.w	r8, #0
 804b152:	4631      	mov	r1, r6
 804b154:	4620      	mov	r0, r4
 804b156:	f000 fd13 	bl	804bb80 <_Bfree>
 804b15a:	2f00      	cmp	r7, #0
 804b15c:	f43f aea4 	beq.w	804aea8 <_dtoa_r+0x6a0>
 804b160:	f1b8 0f00 	cmp.w	r8, #0
 804b164:	d005      	beq.n	804b172 <_dtoa_r+0x96a>
 804b166:	45b8      	cmp	r8, r7
 804b168:	d003      	beq.n	804b172 <_dtoa_r+0x96a>
 804b16a:	4641      	mov	r1, r8
 804b16c:	4620      	mov	r0, r4
 804b16e:	f000 fd07 	bl	804bb80 <_Bfree>
 804b172:	4639      	mov	r1, r7
 804b174:	4620      	mov	r0, r4
 804b176:	f000 fd03 	bl	804bb80 <_Bfree>
 804b17a:	e695      	b.n	804aea8 <_dtoa_r+0x6a0>
 804b17c:	2600      	movs	r6, #0
 804b17e:	4637      	mov	r7, r6
 804b180:	e7e1      	b.n	804b146 <_dtoa_r+0x93e>
 804b182:	9700      	str	r7, [sp, #0]
 804b184:	4637      	mov	r7, r6
 804b186:	e599      	b.n	804acbc <_dtoa_r+0x4b4>
 804b188:	40240000 	.word	0x40240000
 804b18c:	9b08      	ldr	r3, [sp, #32]
 804b18e:	2b00      	cmp	r3, #0
 804b190:	f000 80ca 	beq.w	804b328 <_dtoa_r+0xb20>
 804b194:	9b03      	ldr	r3, [sp, #12]
 804b196:	9302      	str	r3, [sp, #8]
 804b198:	2d00      	cmp	r5, #0
 804b19a:	dd05      	ble.n	804b1a8 <_dtoa_r+0x9a0>
 804b19c:	4639      	mov	r1, r7
 804b19e:	462a      	mov	r2, r5
 804b1a0:	4620      	mov	r0, r4
 804b1a2:	f000 ff09 	bl	804bfb8 <__lshift>
 804b1a6:	4607      	mov	r7, r0
 804b1a8:	f1b8 0f00 	cmp.w	r8, #0
 804b1ac:	d05b      	beq.n	804b266 <_dtoa_r+0xa5e>
 804b1ae:	6879      	ldr	r1, [r7, #4]
 804b1b0:	4620      	mov	r0, r4
 804b1b2:	f000 fca5 	bl	804bb00 <_Balloc>
 804b1b6:	4605      	mov	r5, r0
 804b1b8:	b928      	cbnz	r0, 804b1c6 <_dtoa_r+0x9be>
 804b1ba:	4b87      	ldr	r3, [pc, #540]	; (804b3d8 <_dtoa_r+0xbd0>)
 804b1bc:	4602      	mov	r2, r0
 804b1be:	f240 21ea 	movw	r1, #746	; 0x2ea
 804b1c2:	f7ff bb3b 	b.w	804a83c <_dtoa_r+0x34>
 804b1c6:	693a      	ldr	r2, [r7, #16]
 804b1c8:	3202      	adds	r2, #2
 804b1ca:	0092      	lsls	r2, r2, #2
 804b1cc:	f107 010c 	add.w	r1, r7, #12
 804b1d0:	300c      	adds	r0, #12
 804b1d2:	f7fd fce7 	bl	8048ba4 <memcpy>
 804b1d6:	2201      	movs	r2, #1
 804b1d8:	4629      	mov	r1, r5
 804b1da:	4620      	mov	r0, r4
 804b1dc:	f000 feec 	bl	804bfb8 <__lshift>
 804b1e0:	9b01      	ldr	r3, [sp, #4]
 804b1e2:	f103 0901 	add.w	r9, r3, #1
 804b1e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 804b1ea:	4413      	add	r3, r2
 804b1ec:	9305      	str	r3, [sp, #20]
 804b1ee:	f00a 0301 	and.w	r3, sl, #1
 804b1f2:	46b8      	mov	r8, r7
 804b1f4:	9304      	str	r3, [sp, #16]
 804b1f6:	4607      	mov	r7, r0
 804b1f8:	4631      	mov	r1, r6
 804b1fa:	ee18 0a10 	vmov	r0, s16
 804b1fe:	f7ff fa77 	bl	804a6f0 <quorem>
 804b202:	4641      	mov	r1, r8
 804b204:	9002      	str	r0, [sp, #8]
 804b206:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 804b20a:	ee18 0a10 	vmov	r0, s16
 804b20e:	f000 ff43 	bl	804c098 <__mcmp>
 804b212:	463a      	mov	r2, r7
 804b214:	9003      	str	r0, [sp, #12]
 804b216:	4631      	mov	r1, r6
 804b218:	4620      	mov	r0, r4
 804b21a:	f000 ff59 	bl	804c0d0 <__mdiff>
 804b21e:	68c2      	ldr	r2, [r0, #12]
 804b220:	f109 3bff 	add.w	fp, r9, #4294967295
 804b224:	4605      	mov	r5, r0
 804b226:	bb02      	cbnz	r2, 804b26a <_dtoa_r+0xa62>
 804b228:	4601      	mov	r1, r0
 804b22a:	ee18 0a10 	vmov	r0, s16
 804b22e:	f000 ff33 	bl	804c098 <__mcmp>
 804b232:	4602      	mov	r2, r0
 804b234:	4629      	mov	r1, r5
 804b236:	4620      	mov	r0, r4
 804b238:	9207      	str	r2, [sp, #28]
 804b23a:	f000 fca1 	bl	804bb80 <_Bfree>
 804b23e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 804b242:	ea43 0102 	orr.w	r1, r3, r2
 804b246:	9b04      	ldr	r3, [sp, #16]
 804b248:	430b      	orrs	r3, r1
 804b24a:	464d      	mov	r5, r9
 804b24c:	d10f      	bne.n	804b26e <_dtoa_r+0xa66>
 804b24e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804b252:	d02a      	beq.n	804b2aa <_dtoa_r+0xaa2>
 804b254:	9b03      	ldr	r3, [sp, #12]
 804b256:	2b00      	cmp	r3, #0
 804b258:	dd02      	ble.n	804b260 <_dtoa_r+0xa58>
 804b25a:	9b02      	ldr	r3, [sp, #8]
 804b25c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 804b260:	f88b a000 	strb.w	sl, [fp]
 804b264:	e775      	b.n	804b152 <_dtoa_r+0x94a>
 804b266:	4638      	mov	r0, r7
 804b268:	e7ba      	b.n	804b1e0 <_dtoa_r+0x9d8>
 804b26a:	2201      	movs	r2, #1
 804b26c:	e7e2      	b.n	804b234 <_dtoa_r+0xa2c>
 804b26e:	9b03      	ldr	r3, [sp, #12]
 804b270:	2b00      	cmp	r3, #0
 804b272:	db04      	blt.n	804b27e <_dtoa_r+0xa76>
 804b274:	9906      	ldr	r1, [sp, #24]
 804b276:	430b      	orrs	r3, r1
 804b278:	9904      	ldr	r1, [sp, #16]
 804b27a:	430b      	orrs	r3, r1
 804b27c:	d122      	bne.n	804b2c4 <_dtoa_r+0xabc>
 804b27e:	2a00      	cmp	r2, #0
 804b280:	ddee      	ble.n	804b260 <_dtoa_r+0xa58>
 804b282:	ee18 1a10 	vmov	r1, s16
 804b286:	2201      	movs	r2, #1
 804b288:	4620      	mov	r0, r4
 804b28a:	f000 fe95 	bl	804bfb8 <__lshift>
 804b28e:	4631      	mov	r1, r6
 804b290:	ee08 0a10 	vmov	s16, r0
 804b294:	f000 ff00 	bl	804c098 <__mcmp>
 804b298:	2800      	cmp	r0, #0
 804b29a:	dc03      	bgt.n	804b2a4 <_dtoa_r+0xa9c>
 804b29c:	d1e0      	bne.n	804b260 <_dtoa_r+0xa58>
 804b29e:	f01a 0f01 	tst.w	sl, #1
 804b2a2:	d0dd      	beq.n	804b260 <_dtoa_r+0xa58>
 804b2a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804b2a8:	d1d7      	bne.n	804b25a <_dtoa_r+0xa52>
 804b2aa:	2339      	movs	r3, #57	; 0x39
 804b2ac:	f88b 3000 	strb.w	r3, [fp]
 804b2b0:	462b      	mov	r3, r5
 804b2b2:	461d      	mov	r5, r3
 804b2b4:	3b01      	subs	r3, #1
 804b2b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 804b2ba:	2a39      	cmp	r2, #57	; 0x39
 804b2bc:	d071      	beq.n	804b3a2 <_dtoa_r+0xb9a>
 804b2be:	3201      	adds	r2, #1
 804b2c0:	701a      	strb	r2, [r3, #0]
 804b2c2:	e746      	b.n	804b152 <_dtoa_r+0x94a>
 804b2c4:	2a00      	cmp	r2, #0
 804b2c6:	dd07      	ble.n	804b2d8 <_dtoa_r+0xad0>
 804b2c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 804b2cc:	d0ed      	beq.n	804b2aa <_dtoa_r+0xaa2>
 804b2ce:	f10a 0301 	add.w	r3, sl, #1
 804b2d2:	f88b 3000 	strb.w	r3, [fp]
 804b2d6:	e73c      	b.n	804b152 <_dtoa_r+0x94a>
 804b2d8:	9b05      	ldr	r3, [sp, #20]
 804b2da:	f809 ac01 	strb.w	sl, [r9, #-1]
 804b2de:	4599      	cmp	r9, r3
 804b2e0:	d047      	beq.n	804b372 <_dtoa_r+0xb6a>
 804b2e2:	ee18 1a10 	vmov	r1, s16
 804b2e6:	2300      	movs	r3, #0
 804b2e8:	220a      	movs	r2, #10
 804b2ea:	4620      	mov	r0, r4
 804b2ec:	f000 fc6a 	bl	804bbc4 <__multadd>
 804b2f0:	45b8      	cmp	r8, r7
 804b2f2:	ee08 0a10 	vmov	s16, r0
 804b2f6:	f04f 0300 	mov.w	r3, #0
 804b2fa:	f04f 020a 	mov.w	r2, #10
 804b2fe:	4641      	mov	r1, r8
 804b300:	4620      	mov	r0, r4
 804b302:	d106      	bne.n	804b312 <_dtoa_r+0xb0a>
 804b304:	f000 fc5e 	bl	804bbc4 <__multadd>
 804b308:	4680      	mov	r8, r0
 804b30a:	4607      	mov	r7, r0
 804b30c:	f109 0901 	add.w	r9, r9, #1
 804b310:	e772      	b.n	804b1f8 <_dtoa_r+0x9f0>
 804b312:	f000 fc57 	bl	804bbc4 <__multadd>
 804b316:	4639      	mov	r1, r7
 804b318:	4680      	mov	r8, r0
 804b31a:	2300      	movs	r3, #0
 804b31c:	220a      	movs	r2, #10
 804b31e:	4620      	mov	r0, r4
 804b320:	f000 fc50 	bl	804bbc4 <__multadd>
 804b324:	4607      	mov	r7, r0
 804b326:	e7f1      	b.n	804b30c <_dtoa_r+0xb04>
 804b328:	9b03      	ldr	r3, [sp, #12]
 804b32a:	9302      	str	r3, [sp, #8]
 804b32c:	9d01      	ldr	r5, [sp, #4]
 804b32e:	ee18 0a10 	vmov	r0, s16
 804b332:	4631      	mov	r1, r6
 804b334:	f7ff f9dc 	bl	804a6f0 <quorem>
 804b338:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 804b33c:	9b01      	ldr	r3, [sp, #4]
 804b33e:	f805 ab01 	strb.w	sl, [r5], #1
 804b342:	1aea      	subs	r2, r5, r3
 804b344:	9b02      	ldr	r3, [sp, #8]
 804b346:	4293      	cmp	r3, r2
 804b348:	dd09      	ble.n	804b35e <_dtoa_r+0xb56>
 804b34a:	ee18 1a10 	vmov	r1, s16
 804b34e:	2300      	movs	r3, #0
 804b350:	220a      	movs	r2, #10
 804b352:	4620      	mov	r0, r4
 804b354:	f000 fc36 	bl	804bbc4 <__multadd>
 804b358:	ee08 0a10 	vmov	s16, r0
 804b35c:	e7e7      	b.n	804b32e <_dtoa_r+0xb26>
 804b35e:	9b02      	ldr	r3, [sp, #8]
 804b360:	2b00      	cmp	r3, #0
 804b362:	bfc8      	it	gt
 804b364:	461d      	movgt	r5, r3
 804b366:	9b01      	ldr	r3, [sp, #4]
 804b368:	bfd8      	it	le
 804b36a:	2501      	movle	r5, #1
 804b36c:	441d      	add	r5, r3
 804b36e:	f04f 0800 	mov.w	r8, #0
 804b372:	ee18 1a10 	vmov	r1, s16
 804b376:	2201      	movs	r2, #1
 804b378:	4620      	mov	r0, r4
 804b37a:	f000 fe1d 	bl	804bfb8 <__lshift>
 804b37e:	4631      	mov	r1, r6
 804b380:	ee08 0a10 	vmov	s16, r0
 804b384:	f000 fe88 	bl	804c098 <__mcmp>
 804b388:	2800      	cmp	r0, #0
 804b38a:	dc91      	bgt.n	804b2b0 <_dtoa_r+0xaa8>
 804b38c:	d102      	bne.n	804b394 <_dtoa_r+0xb8c>
 804b38e:	f01a 0f01 	tst.w	sl, #1
 804b392:	d18d      	bne.n	804b2b0 <_dtoa_r+0xaa8>
 804b394:	462b      	mov	r3, r5
 804b396:	461d      	mov	r5, r3
 804b398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804b39c:	2a30      	cmp	r2, #48	; 0x30
 804b39e:	d0fa      	beq.n	804b396 <_dtoa_r+0xb8e>
 804b3a0:	e6d7      	b.n	804b152 <_dtoa_r+0x94a>
 804b3a2:	9a01      	ldr	r2, [sp, #4]
 804b3a4:	429a      	cmp	r2, r3
 804b3a6:	d184      	bne.n	804b2b2 <_dtoa_r+0xaaa>
 804b3a8:	9b00      	ldr	r3, [sp, #0]
 804b3aa:	3301      	adds	r3, #1
 804b3ac:	9300      	str	r3, [sp, #0]
 804b3ae:	2331      	movs	r3, #49	; 0x31
 804b3b0:	7013      	strb	r3, [r2, #0]
 804b3b2:	e6ce      	b.n	804b152 <_dtoa_r+0x94a>
 804b3b4:	4b09      	ldr	r3, [pc, #36]	; (804b3dc <_dtoa_r+0xbd4>)
 804b3b6:	f7ff ba95 	b.w	804a8e4 <_dtoa_r+0xdc>
 804b3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804b3bc:	2b00      	cmp	r3, #0
 804b3be:	f47f aa6e 	bne.w	804a89e <_dtoa_r+0x96>
 804b3c2:	4b07      	ldr	r3, [pc, #28]	; (804b3e0 <_dtoa_r+0xbd8>)
 804b3c4:	f7ff ba8e 	b.w	804a8e4 <_dtoa_r+0xdc>
 804b3c8:	9b02      	ldr	r3, [sp, #8]
 804b3ca:	2b00      	cmp	r3, #0
 804b3cc:	dcae      	bgt.n	804b32c <_dtoa_r+0xb24>
 804b3ce:	9b06      	ldr	r3, [sp, #24]
 804b3d0:	2b02      	cmp	r3, #2
 804b3d2:	f73f aea8 	bgt.w	804b126 <_dtoa_r+0x91e>
 804b3d6:	e7a9      	b.n	804b32c <_dtoa_r+0xb24>
 804b3d8:	0804e74d 	.word	0x0804e74d
 804b3dc:	0804e52c 	.word	0x0804e52c
 804b3e0:	0804e6ce 	.word	0x0804e6ce

0804b3e4 <rshift>:
 804b3e4:	6903      	ldr	r3, [r0, #16]
 804b3e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 804b3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804b3ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 804b3f2:	f100 0414 	add.w	r4, r0, #20
 804b3f6:	dd45      	ble.n	804b484 <rshift+0xa0>
 804b3f8:	f011 011f 	ands.w	r1, r1, #31
 804b3fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 804b400:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 804b404:	d10c      	bne.n	804b420 <rshift+0x3c>
 804b406:	f100 0710 	add.w	r7, r0, #16
 804b40a:	4629      	mov	r1, r5
 804b40c:	42b1      	cmp	r1, r6
 804b40e:	d334      	bcc.n	804b47a <rshift+0x96>
 804b410:	1a9b      	subs	r3, r3, r2
 804b412:	009b      	lsls	r3, r3, #2
 804b414:	1eea      	subs	r2, r5, #3
 804b416:	4296      	cmp	r6, r2
 804b418:	bf38      	it	cc
 804b41a:	2300      	movcc	r3, #0
 804b41c:	4423      	add	r3, r4
 804b41e:	e015      	b.n	804b44c <rshift+0x68>
 804b420:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 804b424:	f1c1 0820 	rsb	r8, r1, #32
 804b428:	40cf      	lsrs	r7, r1
 804b42a:	f105 0e04 	add.w	lr, r5, #4
 804b42e:	46a1      	mov	r9, r4
 804b430:	4576      	cmp	r6, lr
 804b432:	46f4      	mov	ip, lr
 804b434:	d815      	bhi.n	804b462 <rshift+0x7e>
 804b436:	1a9a      	subs	r2, r3, r2
 804b438:	0092      	lsls	r2, r2, #2
 804b43a:	3a04      	subs	r2, #4
 804b43c:	3501      	adds	r5, #1
 804b43e:	42ae      	cmp	r6, r5
 804b440:	bf38      	it	cc
 804b442:	2200      	movcc	r2, #0
 804b444:	18a3      	adds	r3, r4, r2
 804b446:	50a7      	str	r7, [r4, r2]
 804b448:	b107      	cbz	r7, 804b44c <rshift+0x68>
 804b44a:	3304      	adds	r3, #4
 804b44c:	1b1a      	subs	r2, r3, r4
 804b44e:	42a3      	cmp	r3, r4
 804b450:	ea4f 02a2 	mov.w	r2, r2, asr #2
 804b454:	bf08      	it	eq
 804b456:	2300      	moveq	r3, #0
 804b458:	6102      	str	r2, [r0, #16]
 804b45a:	bf08      	it	eq
 804b45c:	6143      	streq	r3, [r0, #20]
 804b45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804b462:	f8dc c000 	ldr.w	ip, [ip]
 804b466:	fa0c fc08 	lsl.w	ip, ip, r8
 804b46a:	ea4c 0707 	orr.w	r7, ip, r7
 804b46e:	f849 7b04 	str.w	r7, [r9], #4
 804b472:	f85e 7b04 	ldr.w	r7, [lr], #4
 804b476:	40cf      	lsrs	r7, r1
 804b478:	e7da      	b.n	804b430 <rshift+0x4c>
 804b47a:	f851 cb04 	ldr.w	ip, [r1], #4
 804b47e:	f847 cf04 	str.w	ip, [r7, #4]!
 804b482:	e7c3      	b.n	804b40c <rshift+0x28>
 804b484:	4623      	mov	r3, r4
 804b486:	e7e1      	b.n	804b44c <rshift+0x68>

0804b488 <__hexdig_fun>:
 804b488:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 804b48c:	2b09      	cmp	r3, #9
 804b48e:	d802      	bhi.n	804b496 <__hexdig_fun+0xe>
 804b490:	3820      	subs	r0, #32
 804b492:	b2c0      	uxtb	r0, r0
 804b494:	4770      	bx	lr
 804b496:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 804b49a:	2b05      	cmp	r3, #5
 804b49c:	d801      	bhi.n	804b4a2 <__hexdig_fun+0x1a>
 804b49e:	3847      	subs	r0, #71	; 0x47
 804b4a0:	e7f7      	b.n	804b492 <__hexdig_fun+0xa>
 804b4a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 804b4a6:	2b05      	cmp	r3, #5
 804b4a8:	d801      	bhi.n	804b4ae <__hexdig_fun+0x26>
 804b4aa:	3827      	subs	r0, #39	; 0x27
 804b4ac:	e7f1      	b.n	804b492 <__hexdig_fun+0xa>
 804b4ae:	2000      	movs	r0, #0
 804b4b0:	4770      	bx	lr
	...

0804b4b4 <__gethex>:
 804b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b4b8:	ed2d 8b02 	vpush	{d8}
 804b4bc:	b089      	sub	sp, #36	; 0x24
 804b4be:	ee08 0a10 	vmov	s16, r0
 804b4c2:	9304      	str	r3, [sp, #16]
 804b4c4:	4bb4      	ldr	r3, [pc, #720]	; (804b798 <__gethex+0x2e4>)
 804b4c6:	681b      	ldr	r3, [r3, #0]
 804b4c8:	9301      	str	r3, [sp, #4]
 804b4ca:	4618      	mov	r0, r3
 804b4cc:	468b      	mov	fp, r1
 804b4ce:	4690      	mov	r8, r2
 804b4d0:	f7f4 fe7e 	bl	80401d0 <strlen>
 804b4d4:	9b01      	ldr	r3, [sp, #4]
 804b4d6:	f8db 2000 	ldr.w	r2, [fp]
 804b4da:	4403      	add	r3, r0
 804b4dc:	4682      	mov	sl, r0
 804b4de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804b4e2:	9305      	str	r3, [sp, #20]
 804b4e4:	1c93      	adds	r3, r2, #2
 804b4e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 804b4ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 804b4ee:	32fe      	adds	r2, #254	; 0xfe
 804b4f0:	18d1      	adds	r1, r2, r3
 804b4f2:	461f      	mov	r7, r3
 804b4f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 804b4f8:	9100      	str	r1, [sp, #0]
 804b4fa:	2830      	cmp	r0, #48	; 0x30
 804b4fc:	d0f8      	beq.n	804b4f0 <__gethex+0x3c>
 804b4fe:	f7ff ffc3 	bl	804b488 <__hexdig_fun>
 804b502:	4604      	mov	r4, r0
 804b504:	2800      	cmp	r0, #0
 804b506:	d13a      	bne.n	804b57e <__gethex+0xca>
 804b508:	9901      	ldr	r1, [sp, #4]
 804b50a:	4652      	mov	r2, sl
 804b50c:	4638      	mov	r0, r7
 804b50e:	f001 fa23 	bl	804c958 <strncmp>
 804b512:	4605      	mov	r5, r0
 804b514:	2800      	cmp	r0, #0
 804b516:	d168      	bne.n	804b5ea <__gethex+0x136>
 804b518:	f817 000a 	ldrb.w	r0, [r7, sl]
 804b51c:	eb07 060a 	add.w	r6, r7, sl
 804b520:	f7ff ffb2 	bl	804b488 <__hexdig_fun>
 804b524:	2800      	cmp	r0, #0
 804b526:	d062      	beq.n	804b5ee <__gethex+0x13a>
 804b528:	4633      	mov	r3, r6
 804b52a:	7818      	ldrb	r0, [r3, #0]
 804b52c:	2830      	cmp	r0, #48	; 0x30
 804b52e:	461f      	mov	r7, r3
 804b530:	f103 0301 	add.w	r3, r3, #1
 804b534:	d0f9      	beq.n	804b52a <__gethex+0x76>
 804b536:	f7ff ffa7 	bl	804b488 <__hexdig_fun>
 804b53a:	2301      	movs	r3, #1
 804b53c:	fab0 f480 	clz	r4, r0
 804b540:	0964      	lsrs	r4, r4, #5
 804b542:	4635      	mov	r5, r6
 804b544:	9300      	str	r3, [sp, #0]
 804b546:	463a      	mov	r2, r7
 804b548:	4616      	mov	r6, r2
 804b54a:	3201      	adds	r2, #1
 804b54c:	7830      	ldrb	r0, [r6, #0]
 804b54e:	f7ff ff9b 	bl	804b488 <__hexdig_fun>
 804b552:	2800      	cmp	r0, #0
 804b554:	d1f8      	bne.n	804b548 <__gethex+0x94>
 804b556:	9901      	ldr	r1, [sp, #4]
 804b558:	4652      	mov	r2, sl
 804b55a:	4630      	mov	r0, r6
 804b55c:	f001 f9fc 	bl	804c958 <strncmp>
 804b560:	b980      	cbnz	r0, 804b584 <__gethex+0xd0>
 804b562:	b94d      	cbnz	r5, 804b578 <__gethex+0xc4>
 804b564:	eb06 050a 	add.w	r5, r6, sl
 804b568:	462a      	mov	r2, r5
 804b56a:	4616      	mov	r6, r2
 804b56c:	3201      	adds	r2, #1
 804b56e:	7830      	ldrb	r0, [r6, #0]
 804b570:	f7ff ff8a 	bl	804b488 <__hexdig_fun>
 804b574:	2800      	cmp	r0, #0
 804b576:	d1f8      	bne.n	804b56a <__gethex+0xb6>
 804b578:	1bad      	subs	r5, r5, r6
 804b57a:	00ad      	lsls	r5, r5, #2
 804b57c:	e004      	b.n	804b588 <__gethex+0xd4>
 804b57e:	2400      	movs	r4, #0
 804b580:	4625      	mov	r5, r4
 804b582:	e7e0      	b.n	804b546 <__gethex+0x92>
 804b584:	2d00      	cmp	r5, #0
 804b586:	d1f7      	bne.n	804b578 <__gethex+0xc4>
 804b588:	7833      	ldrb	r3, [r6, #0]
 804b58a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804b58e:	2b50      	cmp	r3, #80	; 0x50
 804b590:	d13b      	bne.n	804b60a <__gethex+0x156>
 804b592:	7873      	ldrb	r3, [r6, #1]
 804b594:	2b2b      	cmp	r3, #43	; 0x2b
 804b596:	d02c      	beq.n	804b5f2 <__gethex+0x13e>
 804b598:	2b2d      	cmp	r3, #45	; 0x2d
 804b59a:	d02e      	beq.n	804b5fa <__gethex+0x146>
 804b59c:	1c71      	adds	r1, r6, #1
 804b59e:	f04f 0900 	mov.w	r9, #0
 804b5a2:	7808      	ldrb	r0, [r1, #0]
 804b5a4:	f7ff ff70 	bl	804b488 <__hexdig_fun>
 804b5a8:	1e43      	subs	r3, r0, #1
 804b5aa:	b2db      	uxtb	r3, r3
 804b5ac:	2b18      	cmp	r3, #24
 804b5ae:	d82c      	bhi.n	804b60a <__gethex+0x156>
 804b5b0:	f1a0 0210 	sub.w	r2, r0, #16
 804b5b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 804b5b8:	f7ff ff66 	bl	804b488 <__hexdig_fun>
 804b5bc:	1e43      	subs	r3, r0, #1
 804b5be:	b2db      	uxtb	r3, r3
 804b5c0:	2b18      	cmp	r3, #24
 804b5c2:	d91d      	bls.n	804b600 <__gethex+0x14c>
 804b5c4:	f1b9 0f00 	cmp.w	r9, #0
 804b5c8:	d000      	beq.n	804b5cc <__gethex+0x118>
 804b5ca:	4252      	negs	r2, r2
 804b5cc:	4415      	add	r5, r2
 804b5ce:	f8cb 1000 	str.w	r1, [fp]
 804b5d2:	b1e4      	cbz	r4, 804b60e <__gethex+0x15a>
 804b5d4:	9b00      	ldr	r3, [sp, #0]
 804b5d6:	2b00      	cmp	r3, #0
 804b5d8:	bf14      	ite	ne
 804b5da:	2700      	movne	r7, #0
 804b5dc:	2706      	moveq	r7, #6
 804b5de:	4638      	mov	r0, r7
 804b5e0:	b009      	add	sp, #36	; 0x24
 804b5e2:	ecbd 8b02 	vpop	{d8}
 804b5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b5ea:	463e      	mov	r6, r7
 804b5ec:	4625      	mov	r5, r4
 804b5ee:	2401      	movs	r4, #1
 804b5f0:	e7ca      	b.n	804b588 <__gethex+0xd4>
 804b5f2:	f04f 0900 	mov.w	r9, #0
 804b5f6:	1cb1      	adds	r1, r6, #2
 804b5f8:	e7d3      	b.n	804b5a2 <__gethex+0xee>
 804b5fa:	f04f 0901 	mov.w	r9, #1
 804b5fe:	e7fa      	b.n	804b5f6 <__gethex+0x142>
 804b600:	230a      	movs	r3, #10
 804b602:	fb03 0202 	mla	r2, r3, r2, r0
 804b606:	3a10      	subs	r2, #16
 804b608:	e7d4      	b.n	804b5b4 <__gethex+0x100>
 804b60a:	4631      	mov	r1, r6
 804b60c:	e7df      	b.n	804b5ce <__gethex+0x11a>
 804b60e:	1bf3      	subs	r3, r6, r7
 804b610:	3b01      	subs	r3, #1
 804b612:	4621      	mov	r1, r4
 804b614:	2b07      	cmp	r3, #7
 804b616:	dc0b      	bgt.n	804b630 <__gethex+0x17c>
 804b618:	ee18 0a10 	vmov	r0, s16
 804b61c:	f000 fa70 	bl	804bb00 <_Balloc>
 804b620:	4604      	mov	r4, r0
 804b622:	b940      	cbnz	r0, 804b636 <__gethex+0x182>
 804b624:	4b5d      	ldr	r3, [pc, #372]	; (804b79c <__gethex+0x2e8>)
 804b626:	4602      	mov	r2, r0
 804b628:	21de      	movs	r1, #222	; 0xde
 804b62a:	485d      	ldr	r0, [pc, #372]	; (804b7a0 <__gethex+0x2ec>)
 804b62c:	f001 f9b6 	bl	804c99c <__assert_func>
 804b630:	3101      	adds	r1, #1
 804b632:	105b      	asrs	r3, r3, #1
 804b634:	e7ee      	b.n	804b614 <__gethex+0x160>
 804b636:	f100 0914 	add.w	r9, r0, #20
 804b63a:	f04f 0b00 	mov.w	fp, #0
 804b63e:	f1ca 0301 	rsb	r3, sl, #1
 804b642:	f8cd 9008 	str.w	r9, [sp, #8]
 804b646:	f8cd b000 	str.w	fp, [sp]
 804b64a:	9306      	str	r3, [sp, #24]
 804b64c:	42b7      	cmp	r7, r6
 804b64e:	d340      	bcc.n	804b6d2 <__gethex+0x21e>
 804b650:	9802      	ldr	r0, [sp, #8]
 804b652:	9b00      	ldr	r3, [sp, #0]
 804b654:	f840 3b04 	str.w	r3, [r0], #4
 804b658:	eba0 0009 	sub.w	r0, r0, r9
 804b65c:	1080      	asrs	r0, r0, #2
 804b65e:	0146      	lsls	r6, r0, #5
 804b660:	6120      	str	r0, [r4, #16]
 804b662:	4618      	mov	r0, r3
 804b664:	f000 fb3e 	bl	804bce4 <__hi0bits>
 804b668:	1a30      	subs	r0, r6, r0
 804b66a:	f8d8 6000 	ldr.w	r6, [r8]
 804b66e:	42b0      	cmp	r0, r6
 804b670:	dd63      	ble.n	804b73a <__gethex+0x286>
 804b672:	1b87      	subs	r7, r0, r6
 804b674:	4639      	mov	r1, r7
 804b676:	4620      	mov	r0, r4
 804b678:	f000 fee2 	bl	804c440 <__any_on>
 804b67c:	4682      	mov	sl, r0
 804b67e:	b1a8      	cbz	r0, 804b6ac <__gethex+0x1f8>
 804b680:	1e7b      	subs	r3, r7, #1
 804b682:	1159      	asrs	r1, r3, #5
 804b684:	f003 021f 	and.w	r2, r3, #31
 804b688:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 804b68c:	f04f 0a01 	mov.w	sl, #1
 804b690:	fa0a f202 	lsl.w	r2, sl, r2
 804b694:	420a      	tst	r2, r1
 804b696:	d009      	beq.n	804b6ac <__gethex+0x1f8>
 804b698:	4553      	cmp	r3, sl
 804b69a:	dd05      	ble.n	804b6a8 <__gethex+0x1f4>
 804b69c:	1eb9      	subs	r1, r7, #2
 804b69e:	4620      	mov	r0, r4
 804b6a0:	f000 fece 	bl	804c440 <__any_on>
 804b6a4:	2800      	cmp	r0, #0
 804b6a6:	d145      	bne.n	804b734 <__gethex+0x280>
 804b6a8:	f04f 0a02 	mov.w	sl, #2
 804b6ac:	4639      	mov	r1, r7
 804b6ae:	4620      	mov	r0, r4
 804b6b0:	f7ff fe98 	bl	804b3e4 <rshift>
 804b6b4:	443d      	add	r5, r7
 804b6b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804b6ba:	42ab      	cmp	r3, r5
 804b6bc:	da4c      	bge.n	804b758 <__gethex+0x2a4>
 804b6be:	ee18 0a10 	vmov	r0, s16
 804b6c2:	4621      	mov	r1, r4
 804b6c4:	f000 fa5c 	bl	804bb80 <_Bfree>
 804b6c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804b6ca:	2300      	movs	r3, #0
 804b6cc:	6013      	str	r3, [r2, #0]
 804b6ce:	27a3      	movs	r7, #163	; 0xa3
 804b6d0:	e785      	b.n	804b5de <__gethex+0x12a>
 804b6d2:	1e73      	subs	r3, r6, #1
 804b6d4:	9a05      	ldr	r2, [sp, #20]
 804b6d6:	9303      	str	r3, [sp, #12]
 804b6d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 804b6dc:	4293      	cmp	r3, r2
 804b6de:	d019      	beq.n	804b714 <__gethex+0x260>
 804b6e0:	f1bb 0f20 	cmp.w	fp, #32
 804b6e4:	d107      	bne.n	804b6f6 <__gethex+0x242>
 804b6e6:	9b02      	ldr	r3, [sp, #8]
 804b6e8:	9a00      	ldr	r2, [sp, #0]
 804b6ea:	f843 2b04 	str.w	r2, [r3], #4
 804b6ee:	9302      	str	r3, [sp, #8]
 804b6f0:	2300      	movs	r3, #0
 804b6f2:	9300      	str	r3, [sp, #0]
 804b6f4:	469b      	mov	fp, r3
 804b6f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 804b6fa:	f7ff fec5 	bl	804b488 <__hexdig_fun>
 804b6fe:	9b00      	ldr	r3, [sp, #0]
 804b700:	f000 000f 	and.w	r0, r0, #15
 804b704:	fa00 f00b 	lsl.w	r0, r0, fp
 804b708:	4303      	orrs	r3, r0
 804b70a:	9300      	str	r3, [sp, #0]
 804b70c:	f10b 0b04 	add.w	fp, fp, #4
 804b710:	9b03      	ldr	r3, [sp, #12]
 804b712:	e00d      	b.n	804b730 <__gethex+0x27c>
 804b714:	9b03      	ldr	r3, [sp, #12]
 804b716:	9a06      	ldr	r2, [sp, #24]
 804b718:	4413      	add	r3, r2
 804b71a:	42bb      	cmp	r3, r7
 804b71c:	d3e0      	bcc.n	804b6e0 <__gethex+0x22c>
 804b71e:	4618      	mov	r0, r3
 804b720:	9901      	ldr	r1, [sp, #4]
 804b722:	9307      	str	r3, [sp, #28]
 804b724:	4652      	mov	r2, sl
 804b726:	f001 f917 	bl	804c958 <strncmp>
 804b72a:	9b07      	ldr	r3, [sp, #28]
 804b72c:	2800      	cmp	r0, #0
 804b72e:	d1d7      	bne.n	804b6e0 <__gethex+0x22c>
 804b730:	461e      	mov	r6, r3
 804b732:	e78b      	b.n	804b64c <__gethex+0x198>
 804b734:	f04f 0a03 	mov.w	sl, #3
 804b738:	e7b8      	b.n	804b6ac <__gethex+0x1f8>
 804b73a:	da0a      	bge.n	804b752 <__gethex+0x29e>
 804b73c:	1a37      	subs	r7, r6, r0
 804b73e:	4621      	mov	r1, r4
 804b740:	ee18 0a10 	vmov	r0, s16
 804b744:	463a      	mov	r2, r7
 804b746:	f000 fc37 	bl	804bfb8 <__lshift>
 804b74a:	1bed      	subs	r5, r5, r7
 804b74c:	4604      	mov	r4, r0
 804b74e:	f100 0914 	add.w	r9, r0, #20
 804b752:	f04f 0a00 	mov.w	sl, #0
 804b756:	e7ae      	b.n	804b6b6 <__gethex+0x202>
 804b758:	f8d8 0004 	ldr.w	r0, [r8, #4]
 804b75c:	42a8      	cmp	r0, r5
 804b75e:	dd72      	ble.n	804b846 <__gethex+0x392>
 804b760:	1b45      	subs	r5, r0, r5
 804b762:	42ae      	cmp	r6, r5
 804b764:	dc36      	bgt.n	804b7d4 <__gethex+0x320>
 804b766:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804b76a:	2b02      	cmp	r3, #2
 804b76c:	d02a      	beq.n	804b7c4 <__gethex+0x310>
 804b76e:	2b03      	cmp	r3, #3
 804b770:	d02c      	beq.n	804b7cc <__gethex+0x318>
 804b772:	2b01      	cmp	r3, #1
 804b774:	d11c      	bne.n	804b7b0 <__gethex+0x2fc>
 804b776:	42ae      	cmp	r6, r5
 804b778:	d11a      	bne.n	804b7b0 <__gethex+0x2fc>
 804b77a:	2e01      	cmp	r6, #1
 804b77c:	d112      	bne.n	804b7a4 <__gethex+0x2f0>
 804b77e:	9a04      	ldr	r2, [sp, #16]
 804b780:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804b784:	6013      	str	r3, [r2, #0]
 804b786:	2301      	movs	r3, #1
 804b788:	6123      	str	r3, [r4, #16]
 804b78a:	f8c9 3000 	str.w	r3, [r9]
 804b78e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804b790:	2762      	movs	r7, #98	; 0x62
 804b792:	601c      	str	r4, [r3, #0]
 804b794:	e723      	b.n	804b5de <__gethex+0x12a>
 804b796:	bf00      	nop
 804b798:	0804e7c4 	.word	0x0804e7c4
 804b79c:	0804e74d 	.word	0x0804e74d
 804b7a0:	0804e75e 	.word	0x0804e75e
 804b7a4:	1e71      	subs	r1, r6, #1
 804b7a6:	4620      	mov	r0, r4
 804b7a8:	f000 fe4a 	bl	804c440 <__any_on>
 804b7ac:	2800      	cmp	r0, #0
 804b7ae:	d1e6      	bne.n	804b77e <__gethex+0x2ca>
 804b7b0:	ee18 0a10 	vmov	r0, s16
 804b7b4:	4621      	mov	r1, r4
 804b7b6:	f000 f9e3 	bl	804bb80 <_Bfree>
 804b7ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804b7bc:	2300      	movs	r3, #0
 804b7be:	6013      	str	r3, [r2, #0]
 804b7c0:	2750      	movs	r7, #80	; 0x50
 804b7c2:	e70c      	b.n	804b5de <__gethex+0x12a>
 804b7c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b7c6:	2b00      	cmp	r3, #0
 804b7c8:	d1f2      	bne.n	804b7b0 <__gethex+0x2fc>
 804b7ca:	e7d8      	b.n	804b77e <__gethex+0x2ca>
 804b7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b7ce:	2b00      	cmp	r3, #0
 804b7d0:	d1d5      	bne.n	804b77e <__gethex+0x2ca>
 804b7d2:	e7ed      	b.n	804b7b0 <__gethex+0x2fc>
 804b7d4:	1e6f      	subs	r7, r5, #1
 804b7d6:	f1ba 0f00 	cmp.w	sl, #0
 804b7da:	d131      	bne.n	804b840 <__gethex+0x38c>
 804b7dc:	b127      	cbz	r7, 804b7e8 <__gethex+0x334>
 804b7de:	4639      	mov	r1, r7
 804b7e0:	4620      	mov	r0, r4
 804b7e2:	f000 fe2d 	bl	804c440 <__any_on>
 804b7e6:	4682      	mov	sl, r0
 804b7e8:	117b      	asrs	r3, r7, #5
 804b7ea:	2101      	movs	r1, #1
 804b7ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 804b7f0:	f007 071f 	and.w	r7, r7, #31
 804b7f4:	fa01 f707 	lsl.w	r7, r1, r7
 804b7f8:	421f      	tst	r7, r3
 804b7fa:	4629      	mov	r1, r5
 804b7fc:	4620      	mov	r0, r4
 804b7fe:	bf18      	it	ne
 804b800:	f04a 0a02 	orrne.w	sl, sl, #2
 804b804:	1b76      	subs	r6, r6, r5
 804b806:	f7ff fded 	bl	804b3e4 <rshift>
 804b80a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 804b80e:	2702      	movs	r7, #2
 804b810:	f1ba 0f00 	cmp.w	sl, #0
 804b814:	d048      	beq.n	804b8a8 <__gethex+0x3f4>
 804b816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804b81a:	2b02      	cmp	r3, #2
 804b81c:	d015      	beq.n	804b84a <__gethex+0x396>
 804b81e:	2b03      	cmp	r3, #3
 804b820:	d017      	beq.n	804b852 <__gethex+0x39e>
 804b822:	2b01      	cmp	r3, #1
 804b824:	d109      	bne.n	804b83a <__gethex+0x386>
 804b826:	f01a 0f02 	tst.w	sl, #2
 804b82a:	d006      	beq.n	804b83a <__gethex+0x386>
 804b82c:	f8d9 0000 	ldr.w	r0, [r9]
 804b830:	ea4a 0a00 	orr.w	sl, sl, r0
 804b834:	f01a 0f01 	tst.w	sl, #1
 804b838:	d10e      	bne.n	804b858 <__gethex+0x3a4>
 804b83a:	f047 0710 	orr.w	r7, r7, #16
 804b83e:	e033      	b.n	804b8a8 <__gethex+0x3f4>
 804b840:	f04f 0a01 	mov.w	sl, #1
 804b844:	e7d0      	b.n	804b7e8 <__gethex+0x334>
 804b846:	2701      	movs	r7, #1
 804b848:	e7e2      	b.n	804b810 <__gethex+0x35c>
 804b84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b84c:	f1c3 0301 	rsb	r3, r3, #1
 804b850:	9315      	str	r3, [sp, #84]	; 0x54
 804b852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804b854:	2b00      	cmp	r3, #0
 804b856:	d0f0      	beq.n	804b83a <__gethex+0x386>
 804b858:	f8d4 b010 	ldr.w	fp, [r4, #16]
 804b85c:	f104 0314 	add.w	r3, r4, #20
 804b860:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 804b864:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 804b868:	f04f 0c00 	mov.w	ip, #0
 804b86c:	4618      	mov	r0, r3
 804b86e:	f853 2b04 	ldr.w	r2, [r3], #4
 804b872:	f1b2 3fff 	cmp.w	r2, #4294967295
 804b876:	d01c      	beq.n	804b8b2 <__gethex+0x3fe>
 804b878:	3201      	adds	r2, #1
 804b87a:	6002      	str	r2, [r0, #0]
 804b87c:	2f02      	cmp	r7, #2
 804b87e:	f104 0314 	add.w	r3, r4, #20
 804b882:	d13f      	bne.n	804b904 <__gethex+0x450>
 804b884:	f8d8 2000 	ldr.w	r2, [r8]
 804b888:	3a01      	subs	r2, #1
 804b88a:	42b2      	cmp	r2, r6
 804b88c:	d10a      	bne.n	804b8a4 <__gethex+0x3f0>
 804b88e:	1171      	asrs	r1, r6, #5
 804b890:	2201      	movs	r2, #1
 804b892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 804b896:	f006 061f 	and.w	r6, r6, #31
 804b89a:	fa02 f606 	lsl.w	r6, r2, r6
 804b89e:	421e      	tst	r6, r3
 804b8a0:	bf18      	it	ne
 804b8a2:	4617      	movne	r7, r2
 804b8a4:	f047 0720 	orr.w	r7, r7, #32
 804b8a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804b8aa:	601c      	str	r4, [r3, #0]
 804b8ac:	9b04      	ldr	r3, [sp, #16]
 804b8ae:	601d      	str	r5, [r3, #0]
 804b8b0:	e695      	b.n	804b5de <__gethex+0x12a>
 804b8b2:	4299      	cmp	r1, r3
 804b8b4:	f843 cc04 	str.w	ip, [r3, #-4]
 804b8b8:	d8d8      	bhi.n	804b86c <__gethex+0x3b8>
 804b8ba:	68a3      	ldr	r3, [r4, #8]
 804b8bc:	459b      	cmp	fp, r3
 804b8be:	db19      	blt.n	804b8f4 <__gethex+0x440>
 804b8c0:	6861      	ldr	r1, [r4, #4]
 804b8c2:	ee18 0a10 	vmov	r0, s16
 804b8c6:	3101      	adds	r1, #1
 804b8c8:	f000 f91a 	bl	804bb00 <_Balloc>
 804b8cc:	4681      	mov	r9, r0
 804b8ce:	b918      	cbnz	r0, 804b8d8 <__gethex+0x424>
 804b8d0:	4b1a      	ldr	r3, [pc, #104]	; (804b93c <__gethex+0x488>)
 804b8d2:	4602      	mov	r2, r0
 804b8d4:	2184      	movs	r1, #132	; 0x84
 804b8d6:	e6a8      	b.n	804b62a <__gethex+0x176>
 804b8d8:	6922      	ldr	r2, [r4, #16]
 804b8da:	3202      	adds	r2, #2
 804b8dc:	f104 010c 	add.w	r1, r4, #12
 804b8e0:	0092      	lsls	r2, r2, #2
 804b8e2:	300c      	adds	r0, #12
 804b8e4:	f7fd f95e 	bl	8048ba4 <memcpy>
 804b8e8:	4621      	mov	r1, r4
 804b8ea:	ee18 0a10 	vmov	r0, s16
 804b8ee:	f000 f947 	bl	804bb80 <_Bfree>
 804b8f2:	464c      	mov	r4, r9
 804b8f4:	6923      	ldr	r3, [r4, #16]
 804b8f6:	1c5a      	adds	r2, r3, #1
 804b8f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 804b8fc:	6122      	str	r2, [r4, #16]
 804b8fe:	2201      	movs	r2, #1
 804b900:	615a      	str	r2, [r3, #20]
 804b902:	e7bb      	b.n	804b87c <__gethex+0x3c8>
 804b904:	6922      	ldr	r2, [r4, #16]
 804b906:	455a      	cmp	r2, fp
 804b908:	dd0b      	ble.n	804b922 <__gethex+0x46e>
 804b90a:	2101      	movs	r1, #1
 804b90c:	4620      	mov	r0, r4
 804b90e:	f7ff fd69 	bl	804b3e4 <rshift>
 804b912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804b916:	3501      	adds	r5, #1
 804b918:	42ab      	cmp	r3, r5
 804b91a:	f6ff aed0 	blt.w	804b6be <__gethex+0x20a>
 804b91e:	2701      	movs	r7, #1
 804b920:	e7c0      	b.n	804b8a4 <__gethex+0x3f0>
 804b922:	f016 061f 	ands.w	r6, r6, #31
 804b926:	d0fa      	beq.n	804b91e <__gethex+0x46a>
 804b928:	4453      	add	r3, sl
 804b92a:	f1c6 0620 	rsb	r6, r6, #32
 804b92e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 804b932:	f000 f9d7 	bl	804bce4 <__hi0bits>
 804b936:	42b0      	cmp	r0, r6
 804b938:	dbe7      	blt.n	804b90a <__gethex+0x456>
 804b93a:	e7f0      	b.n	804b91e <__gethex+0x46a>
 804b93c:	0804e74d 	.word	0x0804e74d

0804b940 <L_shift>:
 804b940:	f1c2 0208 	rsb	r2, r2, #8
 804b944:	0092      	lsls	r2, r2, #2
 804b946:	b570      	push	{r4, r5, r6, lr}
 804b948:	f1c2 0620 	rsb	r6, r2, #32
 804b94c:	6843      	ldr	r3, [r0, #4]
 804b94e:	6804      	ldr	r4, [r0, #0]
 804b950:	fa03 f506 	lsl.w	r5, r3, r6
 804b954:	432c      	orrs	r4, r5
 804b956:	40d3      	lsrs	r3, r2
 804b958:	6004      	str	r4, [r0, #0]
 804b95a:	f840 3f04 	str.w	r3, [r0, #4]!
 804b95e:	4288      	cmp	r0, r1
 804b960:	d3f4      	bcc.n	804b94c <L_shift+0xc>
 804b962:	bd70      	pop	{r4, r5, r6, pc}

0804b964 <__match>:
 804b964:	b530      	push	{r4, r5, lr}
 804b966:	6803      	ldr	r3, [r0, #0]
 804b968:	3301      	adds	r3, #1
 804b96a:	f811 4b01 	ldrb.w	r4, [r1], #1
 804b96e:	b914      	cbnz	r4, 804b976 <__match+0x12>
 804b970:	6003      	str	r3, [r0, #0]
 804b972:	2001      	movs	r0, #1
 804b974:	bd30      	pop	{r4, r5, pc}
 804b976:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b97a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 804b97e:	2d19      	cmp	r5, #25
 804b980:	bf98      	it	ls
 804b982:	3220      	addls	r2, #32
 804b984:	42a2      	cmp	r2, r4
 804b986:	d0f0      	beq.n	804b96a <__match+0x6>
 804b988:	2000      	movs	r0, #0
 804b98a:	e7f3      	b.n	804b974 <__match+0x10>

0804b98c <__hexnan>:
 804b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b990:	680b      	ldr	r3, [r1, #0]
 804b992:	115e      	asrs	r6, r3, #5
 804b994:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 804b998:	f013 031f 	ands.w	r3, r3, #31
 804b99c:	b087      	sub	sp, #28
 804b99e:	bf18      	it	ne
 804b9a0:	3604      	addne	r6, #4
 804b9a2:	2500      	movs	r5, #0
 804b9a4:	1f37      	subs	r7, r6, #4
 804b9a6:	4690      	mov	r8, r2
 804b9a8:	6802      	ldr	r2, [r0, #0]
 804b9aa:	9301      	str	r3, [sp, #4]
 804b9ac:	4682      	mov	sl, r0
 804b9ae:	f846 5c04 	str.w	r5, [r6, #-4]
 804b9b2:	46b9      	mov	r9, r7
 804b9b4:	463c      	mov	r4, r7
 804b9b6:	9502      	str	r5, [sp, #8]
 804b9b8:	46ab      	mov	fp, r5
 804b9ba:	7851      	ldrb	r1, [r2, #1]
 804b9bc:	1c53      	adds	r3, r2, #1
 804b9be:	9303      	str	r3, [sp, #12]
 804b9c0:	b341      	cbz	r1, 804ba14 <__hexnan+0x88>
 804b9c2:	4608      	mov	r0, r1
 804b9c4:	9205      	str	r2, [sp, #20]
 804b9c6:	9104      	str	r1, [sp, #16]
 804b9c8:	f7ff fd5e 	bl	804b488 <__hexdig_fun>
 804b9cc:	2800      	cmp	r0, #0
 804b9ce:	d14f      	bne.n	804ba70 <__hexnan+0xe4>
 804b9d0:	9904      	ldr	r1, [sp, #16]
 804b9d2:	9a05      	ldr	r2, [sp, #20]
 804b9d4:	2920      	cmp	r1, #32
 804b9d6:	d818      	bhi.n	804ba0a <__hexnan+0x7e>
 804b9d8:	9b02      	ldr	r3, [sp, #8]
 804b9da:	459b      	cmp	fp, r3
 804b9dc:	dd13      	ble.n	804ba06 <__hexnan+0x7a>
 804b9de:	454c      	cmp	r4, r9
 804b9e0:	d206      	bcs.n	804b9f0 <__hexnan+0x64>
 804b9e2:	2d07      	cmp	r5, #7
 804b9e4:	dc04      	bgt.n	804b9f0 <__hexnan+0x64>
 804b9e6:	462a      	mov	r2, r5
 804b9e8:	4649      	mov	r1, r9
 804b9ea:	4620      	mov	r0, r4
 804b9ec:	f7ff ffa8 	bl	804b940 <L_shift>
 804b9f0:	4544      	cmp	r4, r8
 804b9f2:	d950      	bls.n	804ba96 <__hexnan+0x10a>
 804b9f4:	2300      	movs	r3, #0
 804b9f6:	f1a4 0904 	sub.w	r9, r4, #4
 804b9fa:	f844 3c04 	str.w	r3, [r4, #-4]
 804b9fe:	f8cd b008 	str.w	fp, [sp, #8]
 804ba02:	464c      	mov	r4, r9
 804ba04:	461d      	mov	r5, r3
 804ba06:	9a03      	ldr	r2, [sp, #12]
 804ba08:	e7d7      	b.n	804b9ba <__hexnan+0x2e>
 804ba0a:	2929      	cmp	r1, #41	; 0x29
 804ba0c:	d156      	bne.n	804babc <__hexnan+0x130>
 804ba0e:	3202      	adds	r2, #2
 804ba10:	f8ca 2000 	str.w	r2, [sl]
 804ba14:	f1bb 0f00 	cmp.w	fp, #0
 804ba18:	d050      	beq.n	804babc <__hexnan+0x130>
 804ba1a:	454c      	cmp	r4, r9
 804ba1c:	d206      	bcs.n	804ba2c <__hexnan+0xa0>
 804ba1e:	2d07      	cmp	r5, #7
 804ba20:	dc04      	bgt.n	804ba2c <__hexnan+0xa0>
 804ba22:	462a      	mov	r2, r5
 804ba24:	4649      	mov	r1, r9
 804ba26:	4620      	mov	r0, r4
 804ba28:	f7ff ff8a 	bl	804b940 <L_shift>
 804ba2c:	4544      	cmp	r4, r8
 804ba2e:	d934      	bls.n	804ba9a <__hexnan+0x10e>
 804ba30:	f1a8 0204 	sub.w	r2, r8, #4
 804ba34:	4623      	mov	r3, r4
 804ba36:	f853 1b04 	ldr.w	r1, [r3], #4
 804ba3a:	f842 1f04 	str.w	r1, [r2, #4]!
 804ba3e:	429f      	cmp	r7, r3
 804ba40:	d2f9      	bcs.n	804ba36 <__hexnan+0xaa>
 804ba42:	1b3b      	subs	r3, r7, r4
 804ba44:	f023 0303 	bic.w	r3, r3, #3
 804ba48:	3304      	adds	r3, #4
 804ba4a:	3401      	adds	r4, #1
 804ba4c:	3e03      	subs	r6, #3
 804ba4e:	42b4      	cmp	r4, r6
 804ba50:	bf88      	it	hi
 804ba52:	2304      	movhi	r3, #4
 804ba54:	4443      	add	r3, r8
 804ba56:	2200      	movs	r2, #0
 804ba58:	f843 2b04 	str.w	r2, [r3], #4
 804ba5c:	429f      	cmp	r7, r3
 804ba5e:	d2fb      	bcs.n	804ba58 <__hexnan+0xcc>
 804ba60:	683b      	ldr	r3, [r7, #0]
 804ba62:	b91b      	cbnz	r3, 804ba6c <__hexnan+0xe0>
 804ba64:	4547      	cmp	r7, r8
 804ba66:	d127      	bne.n	804bab8 <__hexnan+0x12c>
 804ba68:	2301      	movs	r3, #1
 804ba6a:	603b      	str	r3, [r7, #0]
 804ba6c:	2005      	movs	r0, #5
 804ba6e:	e026      	b.n	804babe <__hexnan+0x132>
 804ba70:	3501      	adds	r5, #1
 804ba72:	2d08      	cmp	r5, #8
 804ba74:	f10b 0b01 	add.w	fp, fp, #1
 804ba78:	dd06      	ble.n	804ba88 <__hexnan+0xfc>
 804ba7a:	4544      	cmp	r4, r8
 804ba7c:	d9c3      	bls.n	804ba06 <__hexnan+0x7a>
 804ba7e:	2300      	movs	r3, #0
 804ba80:	f844 3c04 	str.w	r3, [r4, #-4]
 804ba84:	2501      	movs	r5, #1
 804ba86:	3c04      	subs	r4, #4
 804ba88:	6822      	ldr	r2, [r4, #0]
 804ba8a:	f000 000f 	and.w	r0, r0, #15
 804ba8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 804ba92:	6022      	str	r2, [r4, #0]
 804ba94:	e7b7      	b.n	804ba06 <__hexnan+0x7a>
 804ba96:	2508      	movs	r5, #8
 804ba98:	e7b5      	b.n	804ba06 <__hexnan+0x7a>
 804ba9a:	9b01      	ldr	r3, [sp, #4]
 804ba9c:	2b00      	cmp	r3, #0
 804ba9e:	d0df      	beq.n	804ba60 <__hexnan+0xd4>
 804baa0:	f04f 32ff 	mov.w	r2, #4294967295
 804baa4:	f1c3 0320 	rsb	r3, r3, #32
 804baa8:	fa22 f303 	lsr.w	r3, r2, r3
 804baac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 804bab0:	401a      	ands	r2, r3
 804bab2:	f846 2c04 	str.w	r2, [r6, #-4]
 804bab6:	e7d3      	b.n	804ba60 <__hexnan+0xd4>
 804bab8:	3f04      	subs	r7, #4
 804baba:	e7d1      	b.n	804ba60 <__hexnan+0xd4>
 804babc:	2004      	movs	r0, #4
 804babe:	b007      	add	sp, #28
 804bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804bac4 <_localeconv_r>:
 804bac4:	4800      	ldr	r0, [pc, #0]	; (804bac8 <_localeconv_r+0x4>)
 804bac6:	4770      	bx	lr
 804bac8:	2000016c 	.word	0x2000016c

0804bacc <malloc>:
 804bacc:	4b02      	ldr	r3, [pc, #8]	; (804bad8 <malloc+0xc>)
 804bace:	4601      	mov	r1, r0
 804bad0:	6818      	ldr	r0, [r3, #0]
 804bad2:	f000 bd59 	b.w	804c588 <_malloc_r>
 804bad6:	bf00      	nop
 804bad8:	20000014 	.word	0x20000014

0804badc <__ascii_mbtowc>:
 804badc:	b082      	sub	sp, #8
 804bade:	b901      	cbnz	r1, 804bae2 <__ascii_mbtowc+0x6>
 804bae0:	a901      	add	r1, sp, #4
 804bae2:	b142      	cbz	r2, 804baf6 <__ascii_mbtowc+0x1a>
 804bae4:	b14b      	cbz	r3, 804bafa <__ascii_mbtowc+0x1e>
 804bae6:	7813      	ldrb	r3, [r2, #0]
 804bae8:	600b      	str	r3, [r1, #0]
 804baea:	7812      	ldrb	r2, [r2, #0]
 804baec:	1e10      	subs	r0, r2, #0
 804baee:	bf18      	it	ne
 804baf0:	2001      	movne	r0, #1
 804baf2:	b002      	add	sp, #8
 804baf4:	4770      	bx	lr
 804baf6:	4610      	mov	r0, r2
 804baf8:	e7fb      	b.n	804baf2 <__ascii_mbtowc+0x16>
 804bafa:	f06f 0001 	mvn.w	r0, #1
 804bafe:	e7f8      	b.n	804baf2 <__ascii_mbtowc+0x16>

0804bb00 <_Balloc>:
 804bb00:	b570      	push	{r4, r5, r6, lr}
 804bb02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804bb04:	4604      	mov	r4, r0
 804bb06:	460d      	mov	r5, r1
 804bb08:	b976      	cbnz	r6, 804bb28 <_Balloc+0x28>
 804bb0a:	2010      	movs	r0, #16
 804bb0c:	f7ff ffde 	bl	804bacc <malloc>
 804bb10:	4602      	mov	r2, r0
 804bb12:	6260      	str	r0, [r4, #36]	; 0x24
 804bb14:	b920      	cbnz	r0, 804bb20 <_Balloc+0x20>
 804bb16:	4b18      	ldr	r3, [pc, #96]	; (804bb78 <_Balloc+0x78>)
 804bb18:	4818      	ldr	r0, [pc, #96]	; (804bb7c <_Balloc+0x7c>)
 804bb1a:	2166      	movs	r1, #102	; 0x66
 804bb1c:	f000 ff3e 	bl	804c99c <__assert_func>
 804bb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804bb24:	6006      	str	r6, [r0, #0]
 804bb26:	60c6      	str	r6, [r0, #12]
 804bb28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 804bb2a:	68f3      	ldr	r3, [r6, #12]
 804bb2c:	b183      	cbz	r3, 804bb50 <_Balloc+0x50>
 804bb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804bb30:	68db      	ldr	r3, [r3, #12]
 804bb32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 804bb36:	b9b8      	cbnz	r0, 804bb68 <_Balloc+0x68>
 804bb38:	2101      	movs	r1, #1
 804bb3a:	fa01 f605 	lsl.w	r6, r1, r5
 804bb3e:	1d72      	adds	r2, r6, #5
 804bb40:	0092      	lsls	r2, r2, #2
 804bb42:	4620      	mov	r0, r4
 804bb44:	f000 fc9d 	bl	804c482 <_calloc_r>
 804bb48:	b160      	cbz	r0, 804bb64 <_Balloc+0x64>
 804bb4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804bb4e:	e00e      	b.n	804bb6e <_Balloc+0x6e>
 804bb50:	2221      	movs	r2, #33	; 0x21
 804bb52:	2104      	movs	r1, #4
 804bb54:	4620      	mov	r0, r4
 804bb56:	f000 fc94 	bl	804c482 <_calloc_r>
 804bb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804bb5c:	60f0      	str	r0, [r6, #12]
 804bb5e:	68db      	ldr	r3, [r3, #12]
 804bb60:	2b00      	cmp	r3, #0
 804bb62:	d1e4      	bne.n	804bb2e <_Balloc+0x2e>
 804bb64:	2000      	movs	r0, #0
 804bb66:	bd70      	pop	{r4, r5, r6, pc}
 804bb68:	6802      	ldr	r2, [r0, #0]
 804bb6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804bb6e:	2300      	movs	r3, #0
 804bb70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 804bb74:	e7f7      	b.n	804bb66 <_Balloc+0x66>
 804bb76:	bf00      	nop
 804bb78:	0804e6db 	.word	0x0804e6db
 804bb7c:	0804e7d8 	.word	0x0804e7d8

0804bb80 <_Bfree>:
 804bb80:	b570      	push	{r4, r5, r6, lr}
 804bb82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804bb84:	4605      	mov	r5, r0
 804bb86:	460c      	mov	r4, r1
 804bb88:	b976      	cbnz	r6, 804bba8 <_Bfree+0x28>
 804bb8a:	2010      	movs	r0, #16
 804bb8c:	f7ff ff9e 	bl	804bacc <malloc>
 804bb90:	4602      	mov	r2, r0
 804bb92:	6268      	str	r0, [r5, #36]	; 0x24
 804bb94:	b920      	cbnz	r0, 804bba0 <_Bfree+0x20>
 804bb96:	4b09      	ldr	r3, [pc, #36]	; (804bbbc <_Bfree+0x3c>)
 804bb98:	4809      	ldr	r0, [pc, #36]	; (804bbc0 <_Bfree+0x40>)
 804bb9a:	218a      	movs	r1, #138	; 0x8a
 804bb9c:	f000 fefe 	bl	804c99c <__assert_func>
 804bba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804bba4:	6006      	str	r6, [r0, #0]
 804bba6:	60c6      	str	r6, [r0, #12]
 804bba8:	b13c      	cbz	r4, 804bbba <_Bfree+0x3a>
 804bbaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 804bbac:	6862      	ldr	r2, [r4, #4]
 804bbae:	68db      	ldr	r3, [r3, #12]
 804bbb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804bbb4:	6021      	str	r1, [r4, #0]
 804bbb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804bbba:	bd70      	pop	{r4, r5, r6, pc}
 804bbbc:	0804e6db 	.word	0x0804e6db
 804bbc0:	0804e7d8 	.word	0x0804e7d8

0804bbc4 <__multadd>:
 804bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804bbc8:	690d      	ldr	r5, [r1, #16]
 804bbca:	4607      	mov	r7, r0
 804bbcc:	460c      	mov	r4, r1
 804bbce:	461e      	mov	r6, r3
 804bbd0:	f101 0c14 	add.w	ip, r1, #20
 804bbd4:	2000      	movs	r0, #0
 804bbd6:	f8dc 3000 	ldr.w	r3, [ip]
 804bbda:	b299      	uxth	r1, r3
 804bbdc:	fb02 6101 	mla	r1, r2, r1, r6
 804bbe0:	0c1e      	lsrs	r6, r3, #16
 804bbe2:	0c0b      	lsrs	r3, r1, #16
 804bbe4:	fb02 3306 	mla	r3, r2, r6, r3
 804bbe8:	b289      	uxth	r1, r1
 804bbea:	3001      	adds	r0, #1
 804bbec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 804bbf0:	4285      	cmp	r5, r0
 804bbf2:	f84c 1b04 	str.w	r1, [ip], #4
 804bbf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 804bbfa:	dcec      	bgt.n	804bbd6 <__multadd+0x12>
 804bbfc:	b30e      	cbz	r6, 804bc42 <__multadd+0x7e>
 804bbfe:	68a3      	ldr	r3, [r4, #8]
 804bc00:	42ab      	cmp	r3, r5
 804bc02:	dc19      	bgt.n	804bc38 <__multadd+0x74>
 804bc04:	6861      	ldr	r1, [r4, #4]
 804bc06:	4638      	mov	r0, r7
 804bc08:	3101      	adds	r1, #1
 804bc0a:	f7ff ff79 	bl	804bb00 <_Balloc>
 804bc0e:	4680      	mov	r8, r0
 804bc10:	b928      	cbnz	r0, 804bc1e <__multadd+0x5a>
 804bc12:	4602      	mov	r2, r0
 804bc14:	4b0c      	ldr	r3, [pc, #48]	; (804bc48 <__multadd+0x84>)
 804bc16:	480d      	ldr	r0, [pc, #52]	; (804bc4c <__multadd+0x88>)
 804bc18:	21b5      	movs	r1, #181	; 0xb5
 804bc1a:	f000 febf 	bl	804c99c <__assert_func>
 804bc1e:	6922      	ldr	r2, [r4, #16]
 804bc20:	3202      	adds	r2, #2
 804bc22:	f104 010c 	add.w	r1, r4, #12
 804bc26:	0092      	lsls	r2, r2, #2
 804bc28:	300c      	adds	r0, #12
 804bc2a:	f7fc ffbb 	bl	8048ba4 <memcpy>
 804bc2e:	4621      	mov	r1, r4
 804bc30:	4638      	mov	r0, r7
 804bc32:	f7ff ffa5 	bl	804bb80 <_Bfree>
 804bc36:	4644      	mov	r4, r8
 804bc38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 804bc3c:	3501      	adds	r5, #1
 804bc3e:	615e      	str	r6, [r3, #20]
 804bc40:	6125      	str	r5, [r4, #16]
 804bc42:	4620      	mov	r0, r4
 804bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804bc48:	0804e74d 	.word	0x0804e74d
 804bc4c:	0804e7d8 	.word	0x0804e7d8

0804bc50 <__s2b>:
 804bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804bc54:	460c      	mov	r4, r1
 804bc56:	4615      	mov	r5, r2
 804bc58:	461f      	mov	r7, r3
 804bc5a:	2209      	movs	r2, #9
 804bc5c:	3308      	adds	r3, #8
 804bc5e:	4606      	mov	r6, r0
 804bc60:	fb93 f3f2 	sdiv	r3, r3, r2
 804bc64:	2100      	movs	r1, #0
 804bc66:	2201      	movs	r2, #1
 804bc68:	429a      	cmp	r2, r3
 804bc6a:	db09      	blt.n	804bc80 <__s2b+0x30>
 804bc6c:	4630      	mov	r0, r6
 804bc6e:	f7ff ff47 	bl	804bb00 <_Balloc>
 804bc72:	b940      	cbnz	r0, 804bc86 <__s2b+0x36>
 804bc74:	4602      	mov	r2, r0
 804bc76:	4b19      	ldr	r3, [pc, #100]	; (804bcdc <__s2b+0x8c>)
 804bc78:	4819      	ldr	r0, [pc, #100]	; (804bce0 <__s2b+0x90>)
 804bc7a:	21ce      	movs	r1, #206	; 0xce
 804bc7c:	f000 fe8e 	bl	804c99c <__assert_func>
 804bc80:	0052      	lsls	r2, r2, #1
 804bc82:	3101      	adds	r1, #1
 804bc84:	e7f0      	b.n	804bc68 <__s2b+0x18>
 804bc86:	9b08      	ldr	r3, [sp, #32]
 804bc88:	6143      	str	r3, [r0, #20]
 804bc8a:	2d09      	cmp	r5, #9
 804bc8c:	f04f 0301 	mov.w	r3, #1
 804bc90:	6103      	str	r3, [r0, #16]
 804bc92:	dd16      	ble.n	804bcc2 <__s2b+0x72>
 804bc94:	f104 0909 	add.w	r9, r4, #9
 804bc98:	46c8      	mov	r8, r9
 804bc9a:	442c      	add	r4, r5
 804bc9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 804bca0:	4601      	mov	r1, r0
 804bca2:	3b30      	subs	r3, #48	; 0x30
 804bca4:	220a      	movs	r2, #10
 804bca6:	4630      	mov	r0, r6
 804bca8:	f7ff ff8c 	bl	804bbc4 <__multadd>
 804bcac:	45a0      	cmp	r8, r4
 804bcae:	d1f5      	bne.n	804bc9c <__s2b+0x4c>
 804bcb0:	f1a5 0408 	sub.w	r4, r5, #8
 804bcb4:	444c      	add	r4, r9
 804bcb6:	1b2d      	subs	r5, r5, r4
 804bcb8:	1963      	adds	r3, r4, r5
 804bcba:	42bb      	cmp	r3, r7
 804bcbc:	db04      	blt.n	804bcc8 <__s2b+0x78>
 804bcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804bcc2:	340a      	adds	r4, #10
 804bcc4:	2509      	movs	r5, #9
 804bcc6:	e7f6      	b.n	804bcb6 <__s2b+0x66>
 804bcc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 804bccc:	4601      	mov	r1, r0
 804bcce:	3b30      	subs	r3, #48	; 0x30
 804bcd0:	220a      	movs	r2, #10
 804bcd2:	4630      	mov	r0, r6
 804bcd4:	f7ff ff76 	bl	804bbc4 <__multadd>
 804bcd8:	e7ee      	b.n	804bcb8 <__s2b+0x68>
 804bcda:	bf00      	nop
 804bcdc:	0804e74d 	.word	0x0804e74d
 804bce0:	0804e7d8 	.word	0x0804e7d8

0804bce4 <__hi0bits>:
 804bce4:	0c03      	lsrs	r3, r0, #16
 804bce6:	041b      	lsls	r3, r3, #16
 804bce8:	b9d3      	cbnz	r3, 804bd20 <__hi0bits+0x3c>
 804bcea:	0400      	lsls	r0, r0, #16
 804bcec:	2310      	movs	r3, #16
 804bcee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 804bcf2:	bf04      	itt	eq
 804bcf4:	0200      	lsleq	r0, r0, #8
 804bcf6:	3308      	addeq	r3, #8
 804bcf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 804bcfc:	bf04      	itt	eq
 804bcfe:	0100      	lsleq	r0, r0, #4
 804bd00:	3304      	addeq	r3, #4
 804bd02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 804bd06:	bf04      	itt	eq
 804bd08:	0080      	lsleq	r0, r0, #2
 804bd0a:	3302      	addeq	r3, #2
 804bd0c:	2800      	cmp	r0, #0
 804bd0e:	db05      	blt.n	804bd1c <__hi0bits+0x38>
 804bd10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 804bd14:	f103 0301 	add.w	r3, r3, #1
 804bd18:	bf08      	it	eq
 804bd1a:	2320      	moveq	r3, #32
 804bd1c:	4618      	mov	r0, r3
 804bd1e:	4770      	bx	lr
 804bd20:	2300      	movs	r3, #0
 804bd22:	e7e4      	b.n	804bcee <__hi0bits+0xa>

0804bd24 <__lo0bits>:
 804bd24:	6803      	ldr	r3, [r0, #0]
 804bd26:	f013 0207 	ands.w	r2, r3, #7
 804bd2a:	4601      	mov	r1, r0
 804bd2c:	d00b      	beq.n	804bd46 <__lo0bits+0x22>
 804bd2e:	07da      	lsls	r2, r3, #31
 804bd30:	d423      	bmi.n	804bd7a <__lo0bits+0x56>
 804bd32:	0798      	lsls	r0, r3, #30
 804bd34:	bf49      	itett	mi
 804bd36:	085b      	lsrmi	r3, r3, #1
 804bd38:	089b      	lsrpl	r3, r3, #2
 804bd3a:	2001      	movmi	r0, #1
 804bd3c:	600b      	strmi	r3, [r1, #0]
 804bd3e:	bf5c      	itt	pl
 804bd40:	600b      	strpl	r3, [r1, #0]
 804bd42:	2002      	movpl	r0, #2
 804bd44:	4770      	bx	lr
 804bd46:	b298      	uxth	r0, r3
 804bd48:	b9a8      	cbnz	r0, 804bd76 <__lo0bits+0x52>
 804bd4a:	0c1b      	lsrs	r3, r3, #16
 804bd4c:	2010      	movs	r0, #16
 804bd4e:	b2da      	uxtb	r2, r3
 804bd50:	b90a      	cbnz	r2, 804bd56 <__lo0bits+0x32>
 804bd52:	3008      	adds	r0, #8
 804bd54:	0a1b      	lsrs	r3, r3, #8
 804bd56:	071a      	lsls	r2, r3, #28
 804bd58:	bf04      	itt	eq
 804bd5a:	091b      	lsreq	r3, r3, #4
 804bd5c:	3004      	addeq	r0, #4
 804bd5e:	079a      	lsls	r2, r3, #30
 804bd60:	bf04      	itt	eq
 804bd62:	089b      	lsreq	r3, r3, #2
 804bd64:	3002      	addeq	r0, #2
 804bd66:	07da      	lsls	r2, r3, #31
 804bd68:	d403      	bmi.n	804bd72 <__lo0bits+0x4e>
 804bd6a:	085b      	lsrs	r3, r3, #1
 804bd6c:	f100 0001 	add.w	r0, r0, #1
 804bd70:	d005      	beq.n	804bd7e <__lo0bits+0x5a>
 804bd72:	600b      	str	r3, [r1, #0]
 804bd74:	4770      	bx	lr
 804bd76:	4610      	mov	r0, r2
 804bd78:	e7e9      	b.n	804bd4e <__lo0bits+0x2a>
 804bd7a:	2000      	movs	r0, #0
 804bd7c:	4770      	bx	lr
 804bd7e:	2020      	movs	r0, #32
 804bd80:	4770      	bx	lr
	...

0804bd84 <__i2b>:
 804bd84:	b510      	push	{r4, lr}
 804bd86:	460c      	mov	r4, r1
 804bd88:	2101      	movs	r1, #1
 804bd8a:	f7ff feb9 	bl	804bb00 <_Balloc>
 804bd8e:	4602      	mov	r2, r0
 804bd90:	b928      	cbnz	r0, 804bd9e <__i2b+0x1a>
 804bd92:	4b05      	ldr	r3, [pc, #20]	; (804bda8 <__i2b+0x24>)
 804bd94:	4805      	ldr	r0, [pc, #20]	; (804bdac <__i2b+0x28>)
 804bd96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 804bd9a:	f000 fdff 	bl	804c99c <__assert_func>
 804bd9e:	2301      	movs	r3, #1
 804bda0:	6144      	str	r4, [r0, #20]
 804bda2:	6103      	str	r3, [r0, #16]
 804bda4:	bd10      	pop	{r4, pc}
 804bda6:	bf00      	nop
 804bda8:	0804e74d 	.word	0x0804e74d
 804bdac:	0804e7d8 	.word	0x0804e7d8

0804bdb0 <__multiply>:
 804bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804bdb4:	4691      	mov	r9, r2
 804bdb6:	690a      	ldr	r2, [r1, #16]
 804bdb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804bdbc:	429a      	cmp	r2, r3
 804bdbe:	bfb8      	it	lt
 804bdc0:	460b      	movlt	r3, r1
 804bdc2:	460c      	mov	r4, r1
 804bdc4:	bfbc      	itt	lt
 804bdc6:	464c      	movlt	r4, r9
 804bdc8:	4699      	movlt	r9, r3
 804bdca:	6927      	ldr	r7, [r4, #16]
 804bdcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 804bdd0:	68a3      	ldr	r3, [r4, #8]
 804bdd2:	6861      	ldr	r1, [r4, #4]
 804bdd4:	eb07 060a 	add.w	r6, r7, sl
 804bdd8:	42b3      	cmp	r3, r6
 804bdda:	b085      	sub	sp, #20
 804bddc:	bfb8      	it	lt
 804bdde:	3101      	addlt	r1, #1
 804bde0:	f7ff fe8e 	bl	804bb00 <_Balloc>
 804bde4:	b930      	cbnz	r0, 804bdf4 <__multiply+0x44>
 804bde6:	4602      	mov	r2, r0
 804bde8:	4b44      	ldr	r3, [pc, #272]	; (804befc <__multiply+0x14c>)
 804bdea:	4845      	ldr	r0, [pc, #276]	; (804bf00 <__multiply+0x150>)
 804bdec:	f240 115d 	movw	r1, #349	; 0x15d
 804bdf0:	f000 fdd4 	bl	804c99c <__assert_func>
 804bdf4:	f100 0514 	add.w	r5, r0, #20
 804bdf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 804bdfc:	462b      	mov	r3, r5
 804bdfe:	2200      	movs	r2, #0
 804be00:	4543      	cmp	r3, r8
 804be02:	d321      	bcc.n	804be48 <__multiply+0x98>
 804be04:	f104 0314 	add.w	r3, r4, #20
 804be08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 804be0c:	f109 0314 	add.w	r3, r9, #20
 804be10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 804be14:	9202      	str	r2, [sp, #8]
 804be16:	1b3a      	subs	r2, r7, r4
 804be18:	3a15      	subs	r2, #21
 804be1a:	f022 0203 	bic.w	r2, r2, #3
 804be1e:	3204      	adds	r2, #4
 804be20:	f104 0115 	add.w	r1, r4, #21
 804be24:	428f      	cmp	r7, r1
 804be26:	bf38      	it	cc
 804be28:	2204      	movcc	r2, #4
 804be2a:	9201      	str	r2, [sp, #4]
 804be2c:	9a02      	ldr	r2, [sp, #8]
 804be2e:	9303      	str	r3, [sp, #12]
 804be30:	429a      	cmp	r2, r3
 804be32:	d80c      	bhi.n	804be4e <__multiply+0x9e>
 804be34:	2e00      	cmp	r6, #0
 804be36:	dd03      	ble.n	804be40 <__multiply+0x90>
 804be38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 804be3c:	2b00      	cmp	r3, #0
 804be3e:	d05a      	beq.n	804bef6 <__multiply+0x146>
 804be40:	6106      	str	r6, [r0, #16]
 804be42:	b005      	add	sp, #20
 804be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804be48:	f843 2b04 	str.w	r2, [r3], #4
 804be4c:	e7d8      	b.n	804be00 <__multiply+0x50>
 804be4e:	f8b3 a000 	ldrh.w	sl, [r3]
 804be52:	f1ba 0f00 	cmp.w	sl, #0
 804be56:	d024      	beq.n	804bea2 <__multiply+0xf2>
 804be58:	f104 0e14 	add.w	lr, r4, #20
 804be5c:	46a9      	mov	r9, r5
 804be5e:	f04f 0c00 	mov.w	ip, #0
 804be62:	f85e 2b04 	ldr.w	r2, [lr], #4
 804be66:	f8d9 1000 	ldr.w	r1, [r9]
 804be6a:	fa1f fb82 	uxth.w	fp, r2
 804be6e:	b289      	uxth	r1, r1
 804be70:	fb0a 110b 	mla	r1, sl, fp, r1
 804be74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 804be78:	f8d9 2000 	ldr.w	r2, [r9]
 804be7c:	4461      	add	r1, ip
 804be7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 804be82:	fb0a c20b 	mla	r2, sl, fp, ip
 804be86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 804be8a:	b289      	uxth	r1, r1
 804be8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 804be90:	4577      	cmp	r7, lr
 804be92:	f849 1b04 	str.w	r1, [r9], #4
 804be96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 804be9a:	d8e2      	bhi.n	804be62 <__multiply+0xb2>
 804be9c:	9a01      	ldr	r2, [sp, #4]
 804be9e:	f845 c002 	str.w	ip, [r5, r2]
 804bea2:	9a03      	ldr	r2, [sp, #12]
 804bea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 804bea8:	3304      	adds	r3, #4
 804beaa:	f1b9 0f00 	cmp.w	r9, #0
 804beae:	d020      	beq.n	804bef2 <__multiply+0x142>
 804beb0:	6829      	ldr	r1, [r5, #0]
 804beb2:	f104 0c14 	add.w	ip, r4, #20
 804beb6:	46ae      	mov	lr, r5
 804beb8:	f04f 0a00 	mov.w	sl, #0
 804bebc:	f8bc b000 	ldrh.w	fp, [ip]
 804bec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 804bec4:	fb09 220b 	mla	r2, r9, fp, r2
 804bec8:	4492      	add	sl, r2
 804beca:	b289      	uxth	r1, r1
 804becc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 804bed0:	f84e 1b04 	str.w	r1, [lr], #4
 804bed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 804bed8:	f8be 1000 	ldrh.w	r1, [lr]
 804bedc:	0c12      	lsrs	r2, r2, #16
 804bede:	fb09 1102 	mla	r1, r9, r2, r1
 804bee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 804bee6:	4567      	cmp	r7, ip
 804bee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 804beec:	d8e6      	bhi.n	804bebc <__multiply+0x10c>
 804beee:	9a01      	ldr	r2, [sp, #4]
 804bef0:	50a9      	str	r1, [r5, r2]
 804bef2:	3504      	adds	r5, #4
 804bef4:	e79a      	b.n	804be2c <__multiply+0x7c>
 804bef6:	3e01      	subs	r6, #1
 804bef8:	e79c      	b.n	804be34 <__multiply+0x84>
 804befa:	bf00      	nop
 804befc:	0804e74d 	.word	0x0804e74d
 804bf00:	0804e7d8 	.word	0x0804e7d8

0804bf04 <__pow5mult>:
 804bf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804bf08:	4615      	mov	r5, r2
 804bf0a:	f012 0203 	ands.w	r2, r2, #3
 804bf0e:	4606      	mov	r6, r0
 804bf10:	460f      	mov	r7, r1
 804bf12:	d007      	beq.n	804bf24 <__pow5mult+0x20>
 804bf14:	4c25      	ldr	r4, [pc, #148]	; (804bfac <__pow5mult+0xa8>)
 804bf16:	3a01      	subs	r2, #1
 804bf18:	2300      	movs	r3, #0
 804bf1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804bf1e:	f7ff fe51 	bl	804bbc4 <__multadd>
 804bf22:	4607      	mov	r7, r0
 804bf24:	10ad      	asrs	r5, r5, #2
 804bf26:	d03d      	beq.n	804bfa4 <__pow5mult+0xa0>
 804bf28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 804bf2a:	b97c      	cbnz	r4, 804bf4c <__pow5mult+0x48>
 804bf2c:	2010      	movs	r0, #16
 804bf2e:	f7ff fdcd 	bl	804bacc <malloc>
 804bf32:	4602      	mov	r2, r0
 804bf34:	6270      	str	r0, [r6, #36]	; 0x24
 804bf36:	b928      	cbnz	r0, 804bf44 <__pow5mult+0x40>
 804bf38:	4b1d      	ldr	r3, [pc, #116]	; (804bfb0 <__pow5mult+0xac>)
 804bf3a:	481e      	ldr	r0, [pc, #120]	; (804bfb4 <__pow5mult+0xb0>)
 804bf3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 804bf40:	f000 fd2c 	bl	804c99c <__assert_func>
 804bf44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 804bf48:	6004      	str	r4, [r0, #0]
 804bf4a:	60c4      	str	r4, [r0, #12]
 804bf4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 804bf50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 804bf54:	b94c      	cbnz	r4, 804bf6a <__pow5mult+0x66>
 804bf56:	f240 2171 	movw	r1, #625	; 0x271
 804bf5a:	4630      	mov	r0, r6
 804bf5c:	f7ff ff12 	bl	804bd84 <__i2b>
 804bf60:	2300      	movs	r3, #0
 804bf62:	f8c8 0008 	str.w	r0, [r8, #8]
 804bf66:	4604      	mov	r4, r0
 804bf68:	6003      	str	r3, [r0, #0]
 804bf6a:	f04f 0900 	mov.w	r9, #0
 804bf6e:	07eb      	lsls	r3, r5, #31
 804bf70:	d50a      	bpl.n	804bf88 <__pow5mult+0x84>
 804bf72:	4639      	mov	r1, r7
 804bf74:	4622      	mov	r2, r4
 804bf76:	4630      	mov	r0, r6
 804bf78:	f7ff ff1a 	bl	804bdb0 <__multiply>
 804bf7c:	4639      	mov	r1, r7
 804bf7e:	4680      	mov	r8, r0
 804bf80:	4630      	mov	r0, r6
 804bf82:	f7ff fdfd 	bl	804bb80 <_Bfree>
 804bf86:	4647      	mov	r7, r8
 804bf88:	106d      	asrs	r5, r5, #1
 804bf8a:	d00b      	beq.n	804bfa4 <__pow5mult+0xa0>
 804bf8c:	6820      	ldr	r0, [r4, #0]
 804bf8e:	b938      	cbnz	r0, 804bfa0 <__pow5mult+0x9c>
 804bf90:	4622      	mov	r2, r4
 804bf92:	4621      	mov	r1, r4
 804bf94:	4630      	mov	r0, r6
 804bf96:	f7ff ff0b 	bl	804bdb0 <__multiply>
 804bf9a:	6020      	str	r0, [r4, #0]
 804bf9c:	f8c0 9000 	str.w	r9, [r0]
 804bfa0:	4604      	mov	r4, r0
 804bfa2:	e7e4      	b.n	804bf6e <__pow5mult+0x6a>
 804bfa4:	4638      	mov	r0, r7
 804bfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804bfaa:	bf00      	nop
 804bfac:	0804e928 	.word	0x0804e928
 804bfb0:	0804e6db 	.word	0x0804e6db
 804bfb4:	0804e7d8 	.word	0x0804e7d8

0804bfb8 <__lshift>:
 804bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bfbc:	460c      	mov	r4, r1
 804bfbe:	6849      	ldr	r1, [r1, #4]
 804bfc0:	6923      	ldr	r3, [r4, #16]
 804bfc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 804bfc6:	68a3      	ldr	r3, [r4, #8]
 804bfc8:	4607      	mov	r7, r0
 804bfca:	4691      	mov	r9, r2
 804bfcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 804bfd0:	f108 0601 	add.w	r6, r8, #1
 804bfd4:	42b3      	cmp	r3, r6
 804bfd6:	db0b      	blt.n	804bff0 <__lshift+0x38>
 804bfd8:	4638      	mov	r0, r7
 804bfda:	f7ff fd91 	bl	804bb00 <_Balloc>
 804bfde:	4605      	mov	r5, r0
 804bfe0:	b948      	cbnz	r0, 804bff6 <__lshift+0x3e>
 804bfe2:	4602      	mov	r2, r0
 804bfe4:	4b2a      	ldr	r3, [pc, #168]	; (804c090 <__lshift+0xd8>)
 804bfe6:	482b      	ldr	r0, [pc, #172]	; (804c094 <__lshift+0xdc>)
 804bfe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 804bfec:	f000 fcd6 	bl	804c99c <__assert_func>
 804bff0:	3101      	adds	r1, #1
 804bff2:	005b      	lsls	r3, r3, #1
 804bff4:	e7ee      	b.n	804bfd4 <__lshift+0x1c>
 804bff6:	2300      	movs	r3, #0
 804bff8:	f100 0114 	add.w	r1, r0, #20
 804bffc:	f100 0210 	add.w	r2, r0, #16
 804c000:	4618      	mov	r0, r3
 804c002:	4553      	cmp	r3, sl
 804c004:	db37      	blt.n	804c076 <__lshift+0xbe>
 804c006:	6920      	ldr	r0, [r4, #16]
 804c008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 804c00c:	f104 0314 	add.w	r3, r4, #20
 804c010:	f019 091f 	ands.w	r9, r9, #31
 804c014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 804c018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 804c01c:	d02f      	beq.n	804c07e <__lshift+0xc6>
 804c01e:	f1c9 0e20 	rsb	lr, r9, #32
 804c022:	468a      	mov	sl, r1
 804c024:	f04f 0c00 	mov.w	ip, #0
 804c028:	681a      	ldr	r2, [r3, #0]
 804c02a:	fa02 f209 	lsl.w	r2, r2, r9
 804c02e:	ea42 020c 	orr.w	r2, r2, ip
 804c032:	f84a 2b04 	str.w	r2, [sl], #4
 804c036:	f853 2b04 	ldr.w	r2, [r3], #4
 804c03a:	4298      	cmp	r0, r3
 804c03c:	fa22 fc0e 	lsr.w	ip, r2, lr
 804c040:	d8f2      	bhi.n	804c028 <__lshift+0x70>
 804c042:	1b03      	subs	r3, r0, r4
 804c044:	3b15      	subs	r3, #21
 804c046:	f023 0303 	bic.w	r3, r3, #3
 804c04a:	3304      	adds	r3, #4
 804c04c:	f104 0215 	add.w	r2, r4, #21
 804c050:	4290      	cmp	r0, r2
 804c052:	bf38      	it	cc
 804c054:	2304      	movcc	r3, #4
 804c056:	f841 c003 	str.w	ip, [r1, r3]
 804c05a:	f1bc 0f00 	cmp.w	ip, #0
 804c05e:	d001      	beq.n	804c064 <__lshift+0xac>
 804c060:	f108 0602 	add.w	r6, r8, #2
 804c064:	3e01      	subs	r6, #1
 804c066:	4638      	mov	r0, r7
 804c068:	612e      	str	r6, [r5, #16]
 804c06a:	4621      	mov	r1, r4
 804c06c:	f7ff fd88 	bl	804bb80 <_Bfree>
 804c070:	4628      	mov	r0, r5
 804c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c076:	f842 0f04 	str.w	r0, [r2, #4]!
 804c07a:	3301      	adds	r3, #1
 804c07c:	e7c1      	b.n	804c002 <__lshift+0x4a>
 804c07e:	3904      	subs	r1, #4
 804c080:	f853 2b04 	ldr.w	r2, [r3], #4
 804c084:	f841 2f04 	str.w	r2, [r1, #4]!
 804c088:	4298      	cmp	r0, r3
 804c08a:	d8f9      	bhi.n	804c080 <__lshift+0xc8>
 804c08c:	e7ea      	b.n	804c064 <__lshift+0xac>
 804c08e:	bf00      	nop
 804c090:	0804e74d 	.word	0x0804e74d
 804c094:	0804e7d8 	.word	0x0804e7d8

0804c098 <__mcmp>:
 804c098:	b530      	push	{r4, r5, lr}
 804c09a:	6902      	ldr	r2, [r0, #16]
 804c09c:	690c      	ldr	r4, [r1, #16]
 804c09e:	1b12      	subs	r2, r2, r4
 804c0a0:	d10e      	bne.n	804c0c0 <__mcmp+0x28>
 804c0a2:	f100 0314 	add.w	r3, r0, #20
 804c0a6:	3114      	adds	r1, #20
 804c0a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 804c0ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 804c0b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 804c0b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 804c0b8:	42a5      	cmp	r5, r4
 804c0ba:	d003      	beq.n	804c0c4 <__mcmp+0x2c>
 804c0bc:	d305      	bcc.n	804c0ca <__mcmp+0x32>
 804c0be:	2201      	movs	r2, #1
 804c0c0:	4610      	mov	r0, r2
 804c0c2:	bd30      	pop	{r4, r5, pc}
 804c0c4:	4283      	cmp	r3, r0
 804c0c6:	d3f3      	bcc.n	804c0b0 <__mcmp+0x18>
 804c0c8:	e7fa      	b.n	804c0c0 <__mcmp+0x28>
 804c0ca:	f04f 32ff 	mov.w	r2, #4294967295
 804c0ce:	e7f7      	b.n	804c0c0 <__mcmp+0x28>

0804c0d0 <__mdiff>:
 804c0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c0d4:	460c      	mov	r4, r1
 804c0d6:	4606      	mov	r6, r0
 804c0d8:	4611      	mov	r1, r2
 804c0da:	4620      	mov	r0, r4
 804c0dc:	4690      	mov	r8, r2
 804c0de:	f7ff ffdb 	bl	804c098 <__mcmp>
 804c0e2:	1e05      	subs	r5, r0, #0
 804c0e4:	d110      	bne.n	804c108 <__mdiff+0x38>
 804c0e6:	4629      	mov	r1, r5
 804c0e8:	4630      	mov	r0, r6
 804c0ea:	f7ff fd09 	bl	804bb00 <_Balloc>
 804c0ee:	b930      	cbnz	r0, 804c0fe <__mdiff+0x2e>
 804c0f0:	4b3a      	ldr	r3, [pc, #232]	; (804c1dc <__mdiff+0x10c>)
 804c0f2:	4602      	mov	r2, r0
 804c0f4:	f240 2132 	movw	r1, #562	; 0x232
 804c0f8:	4839      	ldr	r0, [pc, #228]	; (804c1e0 <__mdiff+0x110>)
 804c0fa:	f000 fc4f 	bl	804c99c <__assert_func>
 804c0fe:	2301      	movs	r3, #1
 804c100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 804c104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c108:	bfa4      	itt	ge
 804c10a:	4643      	movge	r3, r8
 804c10c:	46a0      	movge	r8, r4
 804c10e:	4630      	mov	r0, r6
 804c110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 804c114:	bfa6      	itte	ge
 804c116:	461c      	movge	r4, r3
 804c118:	2500      	movge	r5, #0
 804c11a:	2501      	movlt	r5, #1
 804c11c:	f7ff fcf0 	bl	804bb00 <_Balloc>
 804c120:	b920      	cbnz	r0, 804c12c <__mdiff+0x5c>
 804c122:	4b2e      	ldr	r3, [pc, #184]	; (804c1dc <__mdiff+0x10c>)
 804c124:	4602      	mov	r2, r0
 804c126:	f44f 7110 	mov.w	r1, #576	; 0x240
 804c12a:	e7e5      	b.n	804c0f8 <__mdiff+0x28>
 804c12c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 804c130:	6926      	ldr	r6, [r4, #16]
 804c132:	60c5      	str	r5, [r0, #12]
 804c134:	f104 0914 	add.w	r9, r4, #20
 804c138:	f108 0514 	add.w	r5, r8, #20
 804c13c:	f100 0e14 	add.w	lr, r0, #20
 804c140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 804c144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 804c148:	f108 0210 	add.w	r2, r8, #16
 804c14c:	46f2      	mov	sl, lr
 804c14e:	2100      	movs	r1, #0
 804c150:	f859 3b04 	ldr.w	r3, [r9], #4
 804c154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 804c158:	fa1f f883 	uxth.w	r8, r3
 804c15c:	fa11 f18b 	uxtah	r1, r1, fp
 804c160:	0c1b      	lsrs	r3, r3, #16
 804c162:	eba1 0808 	sub.w	r8, r1, r8
 804c166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 804c16a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 804c16e:	fa1f f888 	uxth.w	r8, r8
 804c172:	1419      	asrs	r1, r3, #16
 804c174:	454e      	cmp	r6, r9
 804c176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 804c17a:	f84a 3b04 	str.w	r3, [sl], #4
 804c17e:	d8e7      	bhi.n	804c150 <__mdiff+0x80>
 804c180:	1b33      	subs	r3, r6, r4
 804c182:	3b15      	subs	r3, #21
 804c184:	f023 0303 	bic.w	r3, r3, #3
 804c188:	3304      	adds	r3, #4
 804c18a:	3415      	adds	r4, #21
 804c18c:	42a6      	cmp	r6, r4
 804c18e:	bf38      	it	cc
 804c190:	2304      	movcc	r3, #4
 804c192:	441d      	add	r5, r3
 804c194:	4473      	add	r3, lr
 804c196:	469e      	mov	lr, r3
 804c198:	462e      	mov	r6, r5
 804c19a:	4566      	cmp	r6, ip
 804c19c:	d30e      	bcc.n	804c1bc <__mdiff+0xec>
 804c19e:	f10c 0203 	add.w	r2, ip, #3
 804c1a2:	1b52      	subs	r2, r2, r5
 804c1a4:	f022 0203 	bic.w	r2, r2, #3
 804c1a8:	3d03      	subs	r5, #3
 804c1aa:	45ac      	cmp	ip, r5
 804c1ac:	bf38      	it	cc
 804c1ae:	2200      	movcc	r2, #0
 804c1b0:	441a      	add	r2, r3
 804c1b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 804c1b6:	b17b      	cbz	r3, 804c1d8 <__mdiff+0x108>
 804c1b8:	6107      	str	r7, [r0, #16]
 804c1ba:	e7a3      	b.n	804c104 <__mdiff+0x34>
 804c1bc:	f856 8b04 	ldr.w	r8, [r6], #4
 804c1c0:	fa11 f288 	uxtah	r2, r1, r8
 804c1c4:	1414      	asrs	r4, r2, #16
 804c1c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 804c1ca:	b292      	uxth	r2, r2
 804c1cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 804c1d0:	f84e 2b04 	str.w	r2, [lr], #4
 804c1d4:	1421      	asrs	r1, r4, #16
 804c1d6:	e7e0      	b.n	804c19a <__mdiff+0xca>
 804c1d8:	3f01      	subs	r7, #1
 804c1da:	e7ea      	b.n	804c1b2 <__mdiff+0xe2>
 804c1dc:	0804e74d 	.word	0x0804e74d
 804c1e0:	0804e7d8 	.word	0x0804e7d8

0804c1e4 <__ulp>:
 804c1e4:	b082      	sub	sp, #8
 804c1e6:	ed8d 0b00 	vstr	d0, [sp]
 804c1ea:	9b01      	ldr	r3, [sp, #4]
 804c1ec:	4912      	ldr	r1, [pc, #72]	; (804c238 <__ulp+0x54>)
 804c1ee:	4019      	ands	r1, r3
 804c1f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 804c1f4:	2900      	cmp	r1, #0
 804c1f6:	dd05      	ble.n	804c204 <__ulp+0x20>
 804c1f8:	2200      	movs	r2, #0
 804c1fa:	460b      	mov	r3, r1
 804c1fc:	ec43 2b10 	vmov	d0, r2, r3
 804c200:	b002      	add	sp, #8
 804c202:	4770      	bx	lr
 804c204:	4249      	negs	r1, r1
 804c206:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 804c20a:	ea4f 5021 	mov.w	r0, r1, asr #20
 804c20e:	f04f 0200 	mov.w	r2, #0
 804c212:	f04f 0300 	mov.w	r3, #0
 804c216:	da04      	bge.n	804c222 <__ulp+0x3e>
 804c218:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 804c21c:	fa41 f300 	asr.w	r3, r1, r0
 804c220:	e7ec      	b.n	804c1fc <__ulp+0x18>
 804c222:	f1a0 0114 	sub.w	r1, r0, #20
 804c226:	291e      	cmp	r1, #30
 804c228:	bfda      	itte	le
 804c22a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 804c22e:	fa20 f101 	lsrle.w	r1, r0, r1
 804c232:	2101      	movgt	r1, #1
 804c234:	460a      	mov	r2, r1
 804c236:	e7e1      	b.n	804c1fc <__ulp+0x18>
 804c238:	7ff00000 	.word	0x7ff00000

0804c23c <__b2d>:
 804c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c23e:	6905      	ldr	r5, [r0, #16]
 804c240:	f100 0714 	add.w	r7, r0, #20
 804c244:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 804c248:	1f2e      	subs	r6, r5, #4
 804c24a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 804c24e:	4620      	mov	r0, r4
 804c250:	f7ff fd48 	bl	804bce4 <__hi0bits>
 804c254:	f1c0 0320 	rsb	r3, r0, #32
 804c258:	280a      	cmp	r0, #10
 804c25a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 804c2d8 <__b2d+0x9c>
 804c25e:	600b      	str	r3, [r1, #0]
 804c260:	dc14      	bgt.n	804c28c <__b2d+0x50>
 804c262:	f1c0 0e0b 	rsb	lr, r0, #11
 804c266:	fa24 f10e 	lsr.w	r1, r4, lr
 804c26a:	42b7      	cmp	r7, r6
 804c26c:	ea41 030c 	orr.w	r3, r1, ip
 804c270:	bf34      	ite	cc
 804c272:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804c276:	2100      	movcs	r1, #0
 804c278:	3015      	adds	r0, #21
 804c27a:	fa04 f000 	lsl.w	r0, r4, r0
 804c27e:	fa21 f10e 	lsr.w	r1, r1, lr
 804c282:	ea40 0201 	orr.w	r2, r0, r1
 804c286:	ec43 2b10 	vmov	d0, r2, r3
 804c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804c28c:	42b7      	cmp	r7, r6
 804c28e:	bf3a      	itte	cc
 804c290:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804c294:	f1a5 0608 	subcc.w	r6, r5, #8
 804c298:	2100      	movcs	r1, #0
 804c29a:	380b      	subs	r0, #11
 804c29c:	d017      	beq.n	804c2ce <__b2d+0x92>
 804c29e:	f1c0 0c20 	rsb	ip, r0, #32
 804c2a2:	fa04 f500 	lsl.w	r5, r4, r0
 804c2a6:	42be      	cmp	r6, r7
 804c2a8:	fa21 f40c 	lsr.w	r4, r1, ip
 804c2ac:	ea45 0504 	orr.w	r5, r5, r4
 804c2b0:	bf8c      	ite	hi
 804c2b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 804c2b6:	2400      	movls	r4, #0
 804c2b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 804c2bc:	fa01 f000 	lsl.w	r0, r1, r0
 804c2c0:	fa24 f40c 	lsr.w	r4, r4, ip
 804c2c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804c2c8:	ea40 0204 	orr.w	r2, r0, r4
 804c2cc:	e7db      	b.n	804c286 <__b2d+0x4a>
 804c2ce:	ea44 030c 	orr.w	r3, r4, ip
 804c2d2:	460a      	mov	r2, r1
 804c2d4:	e7d7      	b.n	804c286 <__b2d+0x4a>
 804c2d6:	bf00      	nop
 804c2d8:	3ff00000 	.word	0x3ff00000

0804c2dc <__d2b>:
 804c2dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804c2e0:	4689      	mov	r9, r1
 804c2e2:	2101      	movs	r1, #1
 804c2e4:	ec57 6b10 	vmov	r6, r7, d0
 804c2e8:	4690      	mov	r8, r2
 804c2ea:	f7ff fc09 	bl	804bb00 <_Balloc>
 804c2ee:	4604      	mov	r4, r0
 804c2f0:	b930      	cbnz	r0, 804c300 <__d2b+0x24>
 804c2f2:	4602      	mov	r2, r0
 804c2f4:	4b25      	ldr	r3, [pc, #148]	; (804c38c <__d2b+0xb0>)
 804c2f6:	4826      	ldr	r0, [pc, #152]	; (804c390 <__d2b+0xb4>)
 804c2f8:	f240 310a 	movw	r1, #778	; 0x30a
 804c2fc:	f000 fb4e 	bl	804c99c <__assert_func>
 804c300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 804c304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 804c308:	bb35      	cbnz	r5, 804c358 <__d2b+0x7c>
 804c30a:	2e00      	cmp	r6, #0
 804c30c:	9301      	str	r3, [sp, #4]
 804c30e:	d028      	beq.n	804c362 <__d2b+0x86>
 804c310:	4668      	mov	r0, sp
 804c312:	9600      	str	r6, [sp, #0]
 804c314:	f7ff fd06 	bl	804bd24 <__lo0bits>
 804c318:	9900      	ldr	r1, [sp, #0]
 804c31a:	b300      	cbz	r0, 804c35e <__d2b+0x82>
 804c31c:	9a01      	ldr	r2, [sp, #4]
 804c31e:	f1c0 0320 	rsb	r3, r0, #32
 804c322:	fa02 f303 	lsl.w	r3, r2, r3
 804c326:	430b      	orrs	r3, r1
 804c328:	40c2      	lsrs	r2, r0
 804c32a:	6163      	str	r3, [r4, #20]
 804c32c:	9201      	str	r2, [sp, #4]
 804c32e:	9b01      	ldr	r3, [sp, #4]
 804c330:	61a3      	str	r3, [r4, #24]
 804c332:	2b00      	cmp	r3, #0
 804c334:	bf14      	ite	ne
 804c336:	2202      	movne	r2, #2
 804c338:	2201      	moveq	r2, #1
 804c33a:	6122      	str	r2, [r4, #16]
 804c33c:	b1d5      	cbz	r5, 804c374 <__d2b+0x98>
 804c33e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 804c342:	4405      	add	r5, r0
 804c344:	f8c9 5000 	str.w	r5, [r9]
 804c348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 804c34c:	f8c8 0000 	str.w	r0, [r8]
 804c350:	4620      	mov	r0, r4
 804c352:	b003      	add	sp, #12
 804c354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804c358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804c35c:	e7d5      	b.n	804c30a <__d2b+0x2e>
 804c35e:	6161      	str	r1, [r4, #20]
 804c360:	e7e5      	b.n	804c32e <__d2b+0x52>
 804c362:	a801      	add	r0, sp, #4
 804c364:	f7ff fcde 	bl	804bd24 <__lo0bits>
 804c368:	9b01      	ldr	r3, [sp, #4]
 804c36a:	6163      	str	r3, [r4, #20]
 804c36c:	2201      	movs	r2, #1
 804c36e:	6122      	str	r2, [r4, #16]
 804c370:	3020      	adds	r0, #32
 804c372:	e7e3      	b.n	804c33c <__d2b+0x60>
 804c374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 804c378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 804c37c:	f8c9 0000 	str.w	r0, [r9]
 804c380:	6918      	ldr	r0, [r3, #16]
 804c382:	f7ff fcaf 	bl	804bce4 <__hi0bits>
 804c386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 804c38a:	e7df      	b.n	804c34c <__d2b+0x70>
 804c38c:	0804e74d 	.word	0x0804e74d
 804c390:	0804e7d8 	.word	0x0804e7d8

0804c394 <__ratio>:
 804c394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c398:	4688      	mov	r8, r1
 804c39a:	4669      	mov	r1, sp
 804c39c:	4681      	mov	r9, r0
 804c39e:	f7ff ff4d 	bl	804c23c <__b2d>
 804c3a2:	a901      	add	r1, sp, #4
 804c3a4:	4640      	mov	r0, r8
 804c3a6:	ec55 4b10 	vmov	r4, r5, d0
 804c3aa:	f7ff ff47 	bl	804c23c <__b2d>
 804c3ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804c3b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 804c3b6:	eba3 0c02 	sub.w	ip, r3, r2
 804c3ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 804c3be:	1a9b      	subs	r3, r3, r2
 804c3c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 804c3c4:	ec51 0b10 	vmov	r0, r1, d0
 804c3c8:	2b00      	cmp	r3, #0
 804c3ca:	bfd6      	itet	le
 804c3cc:	460a      	movle	r2, r1
 804c3ce:	462a      	movgt	r2, r5
 804c3d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 804c3d4:	468b      	mov	fp, r1
 804c3d6:	462f      	mov	r7, r5
 804c3d8:	bfd4      	ite	le
 804c3da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 804c3de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 804c3e2:	4620      	mov	r0, r4
 804c3e4:	ee10 2a10 	vmov	r2, s0
 804c3e8:	465b      	mov	r3, fp
 804c3ea:	4639      	mov	r1, r7
 804c3ec:	f7f4 fa2e 	bl	804084c <__aeabi_ddiv>
 804c3f0:	ec41 0b10 	vmov	d0, r0, r1
 804c3f4:	b003      	add	sp, #12
 804c3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804c3fa <__copybits>:
 804c3fa:	3901      	subs	r1, #1
 804c3fc:	b570      	push	{r4, r5, r6, lr}
 804c3fe:	1149      	asrs	r1, r1, #5
 804c400:	6914      	ldr	r4, [r2, #16]
 804c402:	3101      	adds	r1, #1
 804c404:	f102 0314 	add.w	r3, r2, #20
 804c408:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 804c40c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 804c410:	1f05      	subs	r5, r0, #4
 804c412:	42a3      	cmp	r3, r4
 804c414:	d30c      	bcc.n	804c430 <__copybits+0x36>
 804c416:	1aa3      	subs	r3, r4, r2
 804c418:	3b11      	subs	r3, #17
 804c41a:	f023 0303 	bic.w	r3, r3, #3
 804c41e:	3211      	adds	r2, #17
 804c420:	42a2      	cmp	r2, r4
 804c422:	bf88      	it	hi
 804c424:	2300      	movhi	r3, #0
 804c426:	4418      	add	r0, r3
 804c428:	2300      	movs	r3, #0
 804c42a:	4288      	cmp	r0, r1
 804c42c:	d305      	bcc.n	804c43a <__copybits+0x40>
 804c42e:	bd70      	pop	{r4, r5, r6, pc}
 804c430:	f853 6b04 	ldr.w	r6, [r3], #4
 804c434:	f845 6f04 	str.w	r6, [r5, #4]!
 804c438:	e7eb      	b.n	804c412 <__copybits+0x18>
 804c43a:	f840 3b04 	str.w	r3, [r0], #4
 804c43e:	e7f4      	b.n	804c42a <__copybits+0x30>

0804c440 <__any_on>:
 804c440:	f100 0214 	add.w	r2, r0, #20
 804c444:	6900      	ldr	r0, [r0, #16]
 804c446:	114b      	asrs	r3, r1, #5
 804c448:	4298      	cmp	r0, r3
 804c44a:	b510      	push	{r4, lr}
 804c44c:	db11      	blt.n	804c472 <__any_on+0x32>
 804c44e:	dd0a      	ble.n	804c466 <__any_on+0x26>
 804c450:	f011 011f 	ands.w	r1, r1, #31
 804c454:	d007      	beq.n	804c466 <__any_on+0x26>
 804c456:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 804c45a:	fa24 f001 	lsr.w	r0, r4, r1
 804c45e:	fa00 f101 	lsl.w	r1, r0, r1
 804c462:	428c      	cmp	r4, r1
 804c464:	d10b      	bne.n	804c47e <__any_on+0x3e>
 804c466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 804c46a:	4293      	cmp	r3, r2
 804c46c:	d803      	bhi.n	804c476 <__any_on+0x36>
 804c46e:	2000      	movs	r0, #0
 804c470:	bd10      	pop	{r4, pc}
 804c472:	4603      	mov	r3, r0
 804c474:	e7f7      	b.n	804c466 <__any_on+0x26>
 804c476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 804c47a:	2900      	cmp	r1, #0
 804c47c:	d0f5      	beq.n	804c46a <__any_on+0x2a>
 804c47e:	2001      	movs	r0, #1
 804c480:	e7f6      	b.n	804c470 <__any_on+0x30>

0804c482 <_calloc_r>:
 804c482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c484:	fba1 2402 	umull	r2, r4, r1, r2
 804c488:	b94c      	cbnz	r4, 804c49e <_calloc_r+0x1c>
 804c48a:	4611      	mov	r1, r2
 804c48c:	9201      	str	r2, [sp, #4]
 804c48e:	f000 f87b 	bl	804c588 <_malloc_r>
 804c492:	9a01      	ldr	r2, [sp, #4]
 804c494:	4605      	mov	r5, r0
 804c496:	b930      	cbnz	r0, 804c4a6 <_calloc_r+0x24>
 804c498:	4628      	mov	r0, r5
 804c49a:	b003      	add	sp, #12
 804c49c:	bd30      	pop	{r4, r5, pc}
 804c49e:	220c      	movs	r2, #12
 804c4a0:	6002      	str	r2, [r0, #0]
 804c4a2:	2500      	movs	r5, #0
 804c4a4:	e7f8      	b.n	804c498 <_calloc_r+0x16>
 804c4a6:	4621      	mov	r1, r4
 804c4a8:	f7fc fb8a 	bl	8048bc0 <memset>
 804c4ac:	e7f4      	b.n	804c498 <_calloc_r+0x16>
	...

0804c4b0 <_free_r>:
 804c4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c4b2:	2900      	cmp	r1, #0
 804c4b4:	d044      	beq.n	804c540 <_free_r+0x90>
 804c4b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c4ba:	9001      	str	r0, [sp, #4]
 804c4bc:	2b00      	cmp	r3, #0
 804c4be:	f1a1 0404 	sub.w	r4, r1, #4
 804c4c2:	bfb8      	it	lt
 804c4c4:	18e4      	addlt	r4, r4, r3
 804c4c6:	f000 fab3 	bl	804ca30 <__malloc_lock>
 804c4ca:	4a1e      	ldr	r2, [pc, #120]	; (804c544 <_free_r+0x94>)
 804c4cc:	9801      	ldr	r0, [sp, #4]
 804c4ce:	6813      	ldr	r3, [r2, #0]
 804c4d0:	b933      	cbnz	r3, 804c4e0 <_free_r+0x30>
 804c4d2:	6063      	str	r3, [r4, #4]
 804c4d4:	6014      	str	r4, [r2, #0]
 804c4d6:	b003      	add	sp, #12
 804c4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804c4dc:	f000 baae 	b.w	804ca3c <__malloc_unlock>
 804c4e0:	42a3      	cmp	r3, r4
 804c4e2:	d908      	bls.n	804c4f6 <_free_r+0x46>
 804c4e4:	6825      	ldr	r5, [r4, #0]
 804c4e6:	1961      	adds	r1, r4, r5
 804c4e8:	428b      	cmp	r3, r1
 804c4ea:	bf01      	itttt	eq
 804c4ec:	6819      	ldreq	r1, [r3, #0]
 804c4ee:	685b      	ldreq	r3, [r3, #4]
 804c4f0:	1949      	addeq	r1, r1, r5
 804c4f2:	6021      	streq	r1, [r4, #0]
 804c4f4:	e7ed      	b.n	804c4d2 <_free_r+0x22>
 804c4f6:	461a      	mov	r2, r3
 804c4f8:	685b      	ldr	r3, [r3, #4]
 804c4fa:	b10b      	cbz	r3, 804c500 <_free_r+0x50>
 804c4fc:	42a3      	cmp	r3, r4
 804c4fe:	d9fa      	bls.n	804c4f6 <_free_r+0x46>
 804c500:	6811      	ldr	r1, [r2, #0]
 804c502:	1855      	adds	r5, r2, r1
 804c504:	42a5      	cmp	r5, r4
 804c506:	d10b      	bne.n	804c520 <_free_r+0x70>
 804c508:	6824      	ldr	r4, [r4, #0]
 804c50a:	4421      	add	r1, r4
 804c50c:	1854      	adds	r4, r2, r1
 804c50e:	42a3      	cmp	r3, r4
 804c510:	6011      	str	r1, [r2, #0]
 804c512:	d1e0      	bne.n	804c4d6 <_free_r+0x26>
 804c514:	681c      	ldr	r4, [r3, #0]
 804c516:	685b      	ldr	r3, [r3, #4]
 804c518:	6053      	str	r3, [r2, #4]
 804c51a:	4421      	add	r1, r4
 804c51c:	6011      	str	r1, [r2, #0]
 804c51e:	e7da      	b.n	804c4d6 <_free_r+0x26>
 804c520:	d902      	bls.n	804c528 <_free_r+0x78>
 804c522:	230c      	movs	r3, #12
 804c524:	6003      	str	r3, [r0, #0]
 804c526:	e7d6      	b.n	804c4d6 <_free_r+0x26>
 804c528:	6825      	ldr	r5, [r4, #0]
 804c52a:	1961      	adds	r1, r4, r5
 804c52c:	428b      	cmp	r3, r1
 804c52e:	bf04      	itt	eq
 804c530:	6819      	ldreq	r1, [r3, #0]
 804c532:	685b      	ldreq	r3, [r3, #4]
 804c534:	6063      	str	r3, [r4, #4]
 804c536:	bf04      	itt	eq
 804c538:	1949      	addeq	r1, r1, r5
 804c53a:	6021      	streq	r1, [r4, #0]
 804c53c:	6054      	str	r4, [r2, #4]
 804c53e:	e7ca      	b.n	804c4d6 <_free_r+0x26>
 804c540:	b003      	add	sp, #12
 804c542:	bd30      	pop	{r4, r5, pc}
 804c544:	20000234 	.word	0x20000234

0804c548 <sbrk_aligned>:
 804c548:	b570      	push	{r4, r5, r6, lr}
 804c54a:	4e0e      	ldr	r6, [pc, #56]	; (804c584 <sbrk_aligned+0x3c>)
 804c54c:	460c      	mov	r4, r1
 804c54e:	6831      	ldr	r1, [r6, #0]
 804c550:	4605      	mov	r5, r0
 804c552:	b911      	cbnz	r1, 804c55a <sbrk_aligned+0x12>
 804c554:	f000 f9f0 	bl	804c938 <_sbrk_r>
 804c558:	6030      	str	r0, [r6, #0]
 804c55a:	4621      	mov	r1, r4
 804c55c:	4628      	mov	r0, r5
 804c55e:	f000 f9eb 	bl	804c938 <_sbrk_r>
 804c562:	1c43      	adds	r3, r0, #1
 804c564:	d00a      	beq.n	804c57c <sbrk_aligned+0x34>
 804c566:	1cc4      	adds	r4, r0, #3
 804c568:	f024 0403 	bic.w	r4, r4, #3
 804c56c:	42a0      	cmp	r0, r4
 804c56e:	d007      	beq.n	804c580 <sbrk_aligned+0x38>
 804c570:	1a21      	subs	r1, r4, r0
 804c572:	4628      	mov	r0, r5
 804c574:	f000 f9e0 	bl	804c938 <_sbrk_r>
 804c578:	3001      	adds	r0, #1
 804c57a:	d101      	bne.n	804c580 <sbrk_aligned+0x38>
 804c57c:	f04f 34ff 	mov.w	r4, #4294967295
 804c580:	4620      	mov	r0, r4
 804c582:	bd70      	pop	{r4, r5, r6, pc}
 804c584:	20000238 	.word	0x20000238

0804c588 <_malloc_r>:
 804c588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c58c:	1ccd      	adds	r5, r1, #3
 804c58e:	f025 0503 	bic.w	r5, r5, #3
 804c592:	3508      	adds	r5, #8
 804c594:	2d0c      	cmp	r5, #12
 804c596:	bf38      	it	cc
 804c598:	250c      	movcc	r5, #12
 804c59a:	2d00      	cmp	r5, #0
 804c59c:	4607      	mov	r7, r0
 804c59e:	db01      	blt.n	804c5a4 <_malloc_r+0x1c>
 804c5a0:	42a9      	cmp	r1, r5
 804c5a2:	d905      	bls.n	804c5b0 <_malloc_r+0x28>
 804c5a4:	230c      	movs	r3, #12
 804c5a6:	603b      	str	r3, [r7, #0]
 804c5a8:	2600      	movs	r6, #0
 804c5aa:	4630      	mov	r0, r6
 804c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c5b0:	4e2e      	ldr	r6, [pc, #184]	; (804c66c <_malloc_r+0xe4>)
 804c5b2:	f000 fa3d 	bl	804ca30 <__malloc_lock>
 804c5b6:	6833      	ldr	r3, [r6, #0]
 804c5b8:	461c      	mov	r4, r3
 804c5ba:	bb34      	cbnz	r4, 804c60a <_malloc_r+0x82>
 804c5bc:	4629      	mov	r1, r5
 804c5be:	4638      	mov	r0, r7
 804c5c0:	f7ff ffc2 	bl	804c548 <sbrk_aligned>
 804c5c4:	1c43      	adds	r3, r0, #1
 804c5c6:	4604      	mov	r4, r0
 804c5c8:	d14d      	bne.n	804c666 <_malloc_r+0xde>
 804c5ca:	6834      	ldr	r4, [r6, #0]
 804c5cc:	4626      	mov	r6, r4
 804c5ce:	2e00      	cmp	r6, #0
 804c5d0:	d140      	bne.n	804c654 <_malloc_r+0xcc>
 804c5d2:	6823      	ldr	r3, [r4, #0]
 804c5d4:	4631      	mov	r1, r6
 804c5d6:	4638      	mov	r0, r7
 804c5d8:	eb04 0803 	add.w	r8, r4, r3
 804c5dc:	f000 f9ac 	bl	804c938 <_sbrk_r>
 804c5e0:	4580      	cmp	r8, r0
 804c5e2:	d13a      	bne.n	804c65a <_malloc_r+0xd2>
 804c5e4:	6821      	ldr	r1, [r4, #0]
 804c5e6:	3503      	adds	r5, #3
 804c5e8:	1a6d      	subs	r5, r5, r1
 804c5ea:	f025 0503 	bic.w	r5, r5, #3
 804c5ee:	3508      	adds	r5, #8
 804c5f0:	2d0c      	cmp	r5, #12
 804c5f2:	bf38      	it	cc
 804c5f4:	250c      	movcc	r5, #12
 804c5f6:	4629      	mov	r1, r5
 804c5f8:	4638      	mov	r0, r7
 804c5fa:	f7ff ffa5 	bl	804c548 <sbrk_aligned>
 804c5fe:	3001      	adds	r0, #1
 804c600:	d02b      	beq.n	804c65a <_malloc_r+0xd2>
 804c602:	6823      	ldr	r3, [r4, #0]
 804c604:	442b      	add	r3, r5
 804c606:	6023      	str	r3, [r4, #0]
 804c608:	e00e      	b.n	804c628 <_malloc_r+0xa0>
 804c60a:	6822      	ldr	r2, [r4, #0]
 804c60c:	1b52      	subs	r2, r2, r5
 804c60e:	d41e      	bmi.n	804c64e <_malloc_r+0xc6>
 804c610:	2a0b      	cmp	r2, #11
 804c612:	d916      	bls.n	804c642 <_malloc_r+0xba>
 804c614:	1961      	adds	r1, r4, r5
 804c616:	42a3      	cmp	r3, r4
 804c618:	6025      	str	r5, [r4, #0]
 804c61a:	bf18      	it	ne
 804c61c:	6059      	strne	r1, [r3, #4]
 804c61e:	6863      	ldr	r3, [r4, #4]
 804c620:	bf08      	it	eq
 804c622:	6031      	streq	r1, [r6, #0]
 804c624:	5162      	str	r2, [r4, r5]
 804c626:	604b      	str	r3, [r1, #4]
 804c628:	4638      	mov	r0, r7
 804c62a:	f104 060b 	add.w	r6, r4, #11
 804c62e:	f000 fa05 	bl	804ca3c <__malloc_unlock>
 804c632:	f026 0607 	bic.w	r6, r6, #7
 804c636:	1d23      	adds	r3, r4, #4
 804c638:	1af2      	subs	r2, r6, r3
 804c63a:	d0b6      	beq.n	804c5aa <_malloc_r+0x22>
 804c63c:	1b9b      	subs	r3, r3, r6
 804c63e:	50a3      	str	r3, [r4, r2]
 804c640:	e7b3      	b.n	804c5aa <_malloc_r+0x22>
 804c642:	6862      	ldr	r2, [r4, #4]
 804c644:	42a3      	cmp	r3, r4
 804c646:	bf0c      	ite	eq
 804c648:	6032      	streq	r2, [r6, #0]
 804c64a:	605a      	strne	r2, [r3, #4]
 804c64c:	e7ec      	b.n	804c628 <_malloc_r+0xa0>
 804c64e:	4623      	mov	r3, r4
 804c650:	6864      	ldr	r4, [r4, #4]
 804c652:	e7b2      	b.n	804c5ba <_malloc_r+0x32>
 804c654:	4634      	mov	r4, r6
 804c656:	6876      	ldr	r6, [r6, #4]
 804c658:	e7b9      	b.n	804c5ce <_malloc_r+0x46>
 804c65a:	230c      	movs	r3, #12
 804c65c:	603b      	str	r3, [r7, #0]
 804c65e:	4638      	mov	r0, r7
 804c660:	f000 f9ec 	bl	804ca3c <__malloc_unlock>
 804c664:	e7a1      	b.n	804c5aa <_malloc_r+0x22>
 804c666:	6025      	str	r5, [r4, #0]
 804c668:	e7de      	b.n	804c628 <_malloc_r+0xa0>
 804c66a:	bf00      	nop
 804c66c:	20000234 	.word	0x20000234

0804c670 <__ssputs_r>:
 804c670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c674:	688e      	ldr	r6, [r1, #8]
 804c676:	429e      	cmp	r6, r3
 804c678:	4682      	mov	sl, r0
 804c67a:	460c      	mov	r4, r1
 804c67c:	4690      	mov	r8, r2
 804c67e:	461f      	mov	r7, r3
 804c680:	d838      	bhi.n	804c6f4 <__ssputs_r+0x84>
 804c682:	898a      	ldrh	r2, [r1, #12]
 804c684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804c688:	d032      	beq.n	804c6f0 <__ssputs_r+0x80>
 804c68a:	6825      	ldr	r5, [r4, #0]
 804c68c:	6909      	ldr	r1, [r1, #16]
 804c68e:	eba5 0901 	sub.w	r9, r5, r1
 804c692:	6965      	ldr	r5, [r4, #20]
 804c694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804c698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804c69c:	3301      	adds	r3, #1
 804c69e:	444b      	add	r3, r9
 804c6a0:	106d      	asrs	r5, r5, #1
 804c6a2:	429d      	cmp	r5, r3
 804c6a4:	bf38      	it	cc
 804c6a6:	461d      	movcc	r5, r3
 804c6a8:	0553      	lsls	r3, r2, #21
 804c6aa:	d531      	bpl.n	804c710 <__ssputs_r+0xa0>
 804c6ac:	4629      	mov	r1, r5
 804c6ae:	f7ff ff6b 	bl	804c588 <_malloc_r>
 804c6b2:	4606      	mov	r6, r0
 804c6b4:	b950      	cbnz	r0, 804c6cc <__ssputs_r+0x5c>
 804c6b6:	230c      	movs	r3, #12
 804c6b8:	f8ca 3000 	str.w	r3, [sl]
 804c6bc:	89a3      	ldrh	r3, [r4, #12]
 804c6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c6c2:	81a3      	strh	r3, [r4, #12]
 804c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 804c6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c6cc:	6921      	ldr	r1, [r4, #16]
 804c6ce:	464a      	mov	r2, r9
 804c6d0:	f7fc fa68 	bl	8048ba4 <memcpy>
 804c6d4:	89a3      	ldrh	r3, [r4, #12]
 804c6d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804c6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804c6de:	81a3      	strh	r3, [r4, #12]
 804c6e0:	6126      	str	r6, [r4, #16]
 804c6e2:	6165      	str	r5, [r4, #20]
 804c6e4:	444e      	add	r6, r9
 804c6e6:	eba5 0509 	sub.w	r5, r5, r9
 804c6ea:	6026      	str	r6, [r4, #0]
 804c6ec:	60a5      	str	r5, [r4, #8]
 804c6ee:	463e      	mov	r6, r7
 804c6f0:	42be      	cmp	r6, r7
 804c6f2:	d900      	bls.n	804c6f6 <__ssputs_r+0x86>
 804c6f4:	463e      	mov	r6, r7
 804c6f6:	6820      	ldr	r0, [r4, #0]
 804c6f8:	4632      	mov	r2, r6
 804c6fa:	4641      	mov	r1, r8
 804c6fc:	f000 f97e 	bl	804c9fc <memmove>
 804c700:	68a3      	ldr	r3, [r4, #8]
 804c702:	1b9b      	subs	r3, r3, r6
 804c704:	60a3      	str	r3, [r4, #8]
 804c706:	6823      	ldr	r3, [r4, #0]
 804c708:	4433      	add	r3, r6
 804c70a:	6023      	str	r3, [r4, #0]
 804c70c:	2000      	movs	r0, #0
 804c70e:	e7db      	b.n	804c6c8 <__ssputs_r+0x58>
 804c710:	462a      	mov	r2, r5
 804c712:	f000 f999 	bl	804ca48 <_realloc_r>
 804c716:	4606      	mov	r6, r0
 804c718:	2800      	cmp	r0, #0
 804c71a:	d1e1      	bne.n	804c6e0 <__ssputs_r+0x70>
 804c71c:	6921      	ldr	r1, [r4, #16]
 804c71e:	4650      	mov	r0, sl
 804c720:	f7ff fec6 	bl	804c4b0 <_free_r>
 804c724:	e7c7      	b.n	804c6b6 <__ssputs_r+0x46>
	...

0804c728 <_svfiprintf_r>:
 804c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c72c:	4698      	mov	r8, r3
 804c72e:	898b      	ldrh	r3, [r1, #12]
 804c730:	061b      	lsls	r3, r3, #24
 804c732:	b09d      	sub	sp, #116	; 0x74
 804c734:	4607      	mov	r7, r0
 804c736:	460d      	mov	r5, r1
 804c738:	4614      	mov	r4, r2
 804c73a:	d50e      	bpl.n	804c75a <_svfiprintf_r+0x32>
 804c73c:	690b      	ldr	r3, [r1, #16]
 804c73e:	b963      	cbnz	r3, 804c75a <_svfiprintf_r+0x32>
 804c740:	2140      	movs	r1, #64	; 0x40
 804c742:	f7ff ff21 	bl	804c588 <_malloc_r>
 804c746:	6028      	str	r0, [r5, #0]
 804c748:	6128      	str	r0, [r5, #16]
 804c74a:	b920      	cbnz	r0, 804c756 <_svfiprintf_r+0x2e>
 804c74c:	230c      	movs	r3, #12
 804c74e:	603b      	str	r3, [r7, #0]
 804c750:	f04f 30ff 	mov.w	r0, #4294967295
 804c754:	e0d1      	b.n	804c8fa <_svfiprintf_r+0x1d2>
 804c756:	2340      	movs	r3, #64	; 0x40
 804c758:	616b      	str	r3, [r5, #20]
 804c75a:	2300      	movs	r3, #0
 804c75c:	9309      	str	r3, [sp, #36]	; 0x24
 804c75e:	2320      	movs	r3, #32
 804c760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804c764:	f8cd 800c 	str.w	r8, [sp, #12]
 804c768:	2330      	movs	r3, #48	; 0x30
 804c76a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804c914 <_svfiprintf_r+0x1ec>
 804c76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804c772:	f04f 0901 	mov.w	r9, #1
 804c776:	4623      	mov	r3, r4
 804c778:	469a      	mov	sl, r3
 804c77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804c77e:	b10a      	cbz	r2, 804c784 <_svfiprintf_r+0x5c>
 804c780:	2a25      	cmp	r2, #37	; 0x25
 804c782:	d1f9      	bne.n	804c778 <_svfiprintf_r+0x50>
 804c784:	ebba 0b04 	subs.w	fp, sl, r4
 804c788:	d00b      	beq.n	804c7a2 <_svfiprintf_r+0x7a>
 804c78a:	465b      	mov	r3, fp
 804c78c:	4622      	mov	r2, r4
 804c78e:	4629      	mov	r1, r5
 804c790:	4638      	mov	r0, r7
 804c792:	f7ff ff6d 	bl	804c670 <__ssputs_r>
 804c796:	3001      	adds	r0, #1
 804c798:	f000 80aa 	beq.w	804c8f0 <_svfiprintf_r+0x1c8>
 804c79c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804c79e:	445a      	add	r2, fp
 804c7a0:	9209      	str	r2, [sp, #36]	; 0x24
 804c7a2:	f89a 3000 	ldrb.w	r3, [sl]
 804c7a6:	2b00      	cmp	r3, #0
 804c7a8:	f000 80a2 	beq.w	804c8f0 <_svfiprintf_r+0x1c8>
 804c7ac:	2300      	movs	r3, #0
 804c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 804c7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804c7b6:	f10a 0a01 	add.w	sl, sl, #1
 804c7ba:	9304      	str	r3, [sp, #16]
 804c7bc:	9307      	str	r3, [sp, #28]
 804c7be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804c7c2:	931a      	str	r3, [sp, #104]	; 0x68
 804c7c4:	4654      	mov	r4, sl
 804c7c6:	2205      	movs	r2, #5
 804c7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c7cc:	4851      	ldr	r0, [pc, #324]	; (804c914 <_svfiprintf_r+0x1ec>)
 804c7ce:	f7f3 fd07 	bl	80401e0 <memchr>
 804c7d2:	9a04      	ldr	r2, [sp, #16]
 804c7d4:	b9d8      	cbnz	r0, 804c80e <_svfiprintf_r+0xe6>
 804c7d6:	06d0      	lsls	r0, r2, #27
 804c7d8:	bf44      	itt	mi
 804c7da:	2320      	movmi	r3, #32
 804c7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c7e0:	0711      	lsls	r1, r2, #28
 804c7e2:	bf44      	itt	mi
 804c7e4:	232b      	movmi	r3, #43	; 0x2b
 804c7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c7ea:	f89a 3000 	ldrb.w	r3, [sl]
 804c7ee:	2b2a      	cmp	r3, #42	; 0x2a
 804c7f0:	d015      	beq.n	804c81e <_svfiprintf_r+0xf6>
 804c7f2:	9a07      	ldr	r2, [sp, #28]
 804c7f4:	4654      	mov	r4, sl
 804c7f6:	2000      	movs	r0, #0
 804c7f8:	f04f 0c0a 	mov.w	ip, #10
 804c7fc:	4621      	mov	r1, r4
 804c7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c802:	3b30      	subs	r3, #48	; 0x30
 804c804:	2b09      	cmp	r3, #9
 804c806:	d94e      	bls.n	804c8a6 <_svfiprintf_r+0x17e>
 804c808:	b1b0      	cbz	r0, 804c838 <_svfiprintf_r+0x110>
 804c80a:	9207      	str	r2, [sp, #28]
 804c80c:	e014      	b.n	804c838 <_svfiprintf_r+0x110>
 804c80e:	eba0 0308 	sub.w	r3, r0, r8
 804c812:	fa09 f303 	lsl.w	r3, r9, r3
 804c816:	4313      	orrs	r3, r2
 804c818:	9304      	str	r3, [sp, #16]
 804c81a:	46a2      	mov	sl, r4
 804c81c:	e7d2      	b.n	804c7c4 <_svfiprintf_r+0x9c>
 804c81e:	9b03      	ldr	r3, [sp, #12]
 804c820:	1d19      	adds	r1, r3, #4
 804c822:	681b      	ldr	r3, [r3, #0]
 804c824:	9103      	str	r1, [sp, #12]
 804c826:	2b00      	cmp	r3, #0
 804c828:	bfbb      	ittet	lt
 804c82a:	425b      	neglt	r3, r3
 804c82c:	f042 0202 	orrlt.w	r2, r2, #2
 804c830:	9307      	strge	r3, [sp, #28]
 804c832:	9307      	strlt	r3, [sp, #28]
 804c834:	bfb8      	it	lt
 804c836:	9204      	strlt	r2, [sp, #16]
 804c838:	7823      	ldrb	r3, [r4, #0]
 804c83a:	2b2e      	cmp	r3, #46	; 0x2e
 804c83c:	d10c      	bne.n	804c858 <_svfiprintf_r+0x130>
 804c83e:	7863      	ldrb	r3, [r4, #1]
 804c840:	2b2a      	cmp	r3, #42	; 0x2a
 804c842:	d135      	bne.n	804c8b0 <_svfiprintf_r+0x188>
 804c844:	9b03      	ldr	r3, [sp, #12]
 804c846:	1d1a      	adds	r2, r3, #4
 804c848:	681b      	ldr	r3, [r3, #0]
 804c84a:	9203      	str	r2, [sp, #12]
 804c84c:	2b00      	cmp	r3, #0
 804c84e:	bfb8      	it	lt
 804c850:	f04f 33ff 	movlt.w	r3, #4294967295
 804c854:	3402      	adds	r4, #2
 804c856:	9305      	str	r3, [sp, #20]
 804c858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804c924 <_svfiprintf_r+0x1fc>
 804c85c:	7821      	ldrb	r1, [r4, #0]
 804c85e:	2203      	movs	r2, #3
 804c860:	4650      	mov	r0, sl
 804c862:	f7f3 fcbd 	bl	80401e0 <memchr>
 804c866:	b140      	cbz	r0, 804c87a <_svfiprintf_r+0x152>
 804c868:	2340      	movs	r3, #64	; 0x40
 804c86a:	eba0 000a 	sub.w	r0, r0, sl
 804c86e:	fa03 f000 	lsl.w	r0, r3, r0
 804c872:	9b04      	ldr	r3, [sp, #16]
 804c874:	4303      	orrs	r3, r0
 804c876:	3401      	adds	r4, #1
 804c878:	9304      	str	r3, [sp, #16]
 804c87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c87e:	4826      	ldr	r0, [pc, #152]	; (804c918 <_svfiprintf_r+0x1f0>)
 804c880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804c884:	2206      	movs	r2, #6
 804c886:	f7f3 fcab 	bl	80401e0 <memchr>
 804c88a:	2800      	cmp	r0, #0
 804c88c:	d038      	beq.n	804c900 <_svfiprintf_r+0x1d8>
 804c88e:	4b23      	ldr	r3, [pc, #140]	; (804c91c <_svfiprintf_r+0x1f4>)
 804c890:	bb1b      	cbnz	r3, 804c8da <_svfiprintf_r+0x1b2>
 804c892:	9b03      	ldr	r3, [sp, #12]
 804c894:	3307      	adds	r3, #7
 804c896:	f023 0307 	bic.w	r3, r3, #7
 804c89a:	3308      	adds	r3, #8
 804c89c:	9303      	str	r3, [sp, #12]
 804c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804c8a0:	4433      	add	r3, r6
 804c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 804c8a4:	e767      	b.n	804c776 <_svfiprintf_r+0x4e>
 804c8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 804c8aa:	460c      	mov	r4, r1
 804c8ac:	2001      	movs	r0, #1
 804c8ae:	e7a5      	b.n	804c7fc <_svfiprintf_r+0xd4>
 804c8b0:	2300      	movs	r3, #0
 804c8b2:	3401      	adds	r4, #1
 804c8b4:	9305      	str	r3, [sp, #20]
 804c8b6:	4619      	mov	r1, r3
 804c8b8:	f04f 0c0a 	mov.w	ip, #10
 804c8bc:	4620      	mov	r0, r4
 804c8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 804c8c2:	3a30      	subs	r2, #48	; 0x30
 804c8c4:	2a09      	cmp	r2, #9
 804c8c6:	d903      	bls.n	804c8d0 <_svfiprintf_r+0x1a8>
 804c8c8:	2b00      	cmp	r3, #0
 804c8ca:	d0c5      	beq.n	804c858 <_svfiprintf_r+0x130>
 804c8cc:	9105      	str	r1, [sp, #20]
 804c8ce:	e7c3      	b.n	804c858 <_svfiprintf_r+0x130>
 804c8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 804c8d4:	4604      	mov	r4, r0
 804c8d6:	2301      	movs	r3, #1
 804c8d8:	e7f0      	b.n	804c8bc <_svfiprintf_r+0x194>
 804c8da:	ab03      	add	r3, sp, #12
 804c8dc:	9300      	str	r3, [sp, #0]
 804c8de:	462a      	mov	r2, r5
 804c8e0:	4b0f      	ldr	r3, [pc, #60]	; (804c920 <_svfiprintf_r+0x1f8>)
 804c8e2:	a904      	add	r1, sp, #16
 804c8e4:	4638      	mov	r0, r7
 804c8e6:	f7fc fa13 	bl	8048d10 <_printf_float>
 804c8ea:	1c42      	adds	r2, r0, #1
 804c8ec:	4606      	mov	r6, r0
 804c8ee:	d1d6      	bne.n	804c89e <_svfiprintf_r+0x176>
 804c8f0:	89ab      	ldrh	r3, [r5, #12]
 804c8f2:	065b      	lsls	r3, r3, #25
 804c8f4:	f53f af2c 	bmi.w	804c750 <_svfiprintf_r+0x28>
 804c8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 804c8fa:	b01d      	add	sp, #116	; 0x74
 804c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c900:	ab03      	add	r3, sp, #12
 804c902:	9300      	str	r3, [sp, #0]
 804c904:	462a      	mov	r2, r5
 804c906:	4b06      	ldr	r3, [pc, #24]	; (804c920 <_svfiprintf_r+0x1f8>)
 804c908:	a904      	add	r1, sp, #16
 804c90a:	4638      	mov	r0, r7
 804c90c:	f7fc fca4 	bl	8049258 <_printf_i>
 804c910:	e7eb      	b.n	804c8ea <_svfiprintf_r+0x1c2>
 804c912:	bf00      	nop
 804c914:	0804e934 	.word	0x0804e934
 804c918:	0804e93e 	.word	0x0804e93e
 804c91c:	08048d11 	.word	0x08048d11
 804c920:	0804c671 	.word	0x0804c671
 804c924:	0804e93a 	.word	0x0804e93a

0804c928 <nan>:
 804c928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 804c930 <nan+0x8>
 804c92c:	4770      	bx	lr
 804c92e:	bf00      	nop
 804c930:	00000000 	.word	0x00000000
 804c934:	7ff80000 	.word	0x7ff80000

0804c938 <_sbrk_r>:
 804c938:	b538      	push	{r3, r4, r5, lr}
 804c93a:	4d06      	ldr	r5, [pc, #24]	; (804c954 <_sbrk_r+0x1c>)
 804c93c:	2300      	movs	r3, #0
 804c93e:	4604      	mov	r4, r0
 804c940:	4608      	mov	r0, r1
 804c942:	602b      	str	r3, [r5, #0]
 804c944:	f7f8 f93c 	bl	8044bc0 <_sbrk>
 804c948:	1c43      	adds	r3, r0, #1
 804c94a:	d102      	bne.n	804c952 <_sbrk_r+0x1a>
 804c94c:	682b      	ldr	r3, [r5, #0]
 804c94e:	b103      	cbz	r3, 804c952 <_sbrk_r+0x1a>
 804c950:	6023      	str	r3, [r4, #0]
 804c952:	bd38      	pop	{r3, r4, r5, pc}
 804c954:	2000023c 	.word	0x2000023c

0804c958 <strncmp>:
 804c958:	b510      	push	{r4, lr}
 804c95a:	b17a      	cbz	r2, 804c97c <strncmp+0x24>
 804c95c:	4603      	mov	r3, r0
 804c95e:	3901      	subs	r1, #1
 804c960:	1884      	adds	r4, r0, r2
 804c962:	f813 0b01 	ldrb.w	r0, [r3], #1
 804c966:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 804c96a:	4290      	cmp	r0, r2
 804c96c:	d101      	bne.n	804c972 <strncmp+0x1a>
 804c96e:	42a3      	cmp	r3, r4
 804c970:	d101      	bne.n	804c976 <strncmp+0x1e>
 804c972:	1a80      	subs	r0, r0, r2
 804c974:	bd10      	pop	{r4, pc}
 804c976:	2800      	cmp	r0, #0
 804c978:	d1f3      	bne.n	804c962 <strncmp+0xa>
 804c97a:	e7fa      	b.n	804c972 <strncmp+0x1a>
 804c97c:	4610      	mov	r0, r2
 804c97e:	e7f9      	b.n	804c974 <strncmp+0x1c>

0804c980 <__ascii_wctomb>:
 804c980:	b149      	cbz	r1, 804c996 <__ascii_wctomb+0x16>
 804c982:	2aff      	cmp	r2, #255	; 0xff
 804c984:	bf85      	ittet	hi
 804c986:	238a      	movhi	r3, #138	; 0x8a
 804c988:	6003      	strhi	r3, [r0, #0]
 804c98a:	700a      	strbls	r2, [r1, #0]
 804c98c:	f04f 30ff 	movhi.w	r0, #4294967295
 804c990:	bf98      	it	ls
 804c992:	2001      	movls	r0, #1
 804c994:	4770      	bx	lr
 804c996:	4608      	mov	r0, r1
 804c998:	4770      	bx	lr
	...

0804c99c <__assert_func>:
 804c99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804c99e:	4614      	mov	r4, r2
 804c9a0:	461a      	mov	r2, r3
 804c9a2:	4b09      	ldr	r3, [pc, #36]	; (804c9c8 <__assert_func+0x2c>)
 804c9a4:	681b      	ldr	r3, [r3, #0]
 804c9a6:	4605      	mov	r5, r0
 804c9a8:	68d8      	ldr	r0, [r3, #12]
 804c9aa:	b14c      	cbz	r4, 804c9c0 <__assert_func+0x24>
 804c9ac:	4b07      	ldr	r3, [pc, #28]	; (804c9cc <__assert_func+0x30>)
 804c9ae:	9100      	str	r1, [sp, #0]
 804c9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804c9b4:	4906      	ldr	r1, [pc, #24]	; (804c9d0 <__assert_func+0x34>)
 804c9b6:	462b      	mov	r3, r5
 804c9b8:	f000 f80e 	bl	804c9d8 <fiprintf>
 804c9bc:	f000 fa8c 	bl	804ced8 <abort>
 804c9c0:	4b04      	ldr	r3, [pc, #16]	; (804c9d4 <__assert_func+0x38>)
 804c9c2:	461c      	mov	r4, r3
 804c9c4:	e7f3      	b.n	804c9ae <__assert_func+0x12>
 804c9c6:	bf00      	nop
 804c9c8:	20000014 	.word	0x20000014
 804c9cc:	0804e945 	.word	0x0804e945
 804c9d0:	0804e952 	.word	0x0804e952
 804c9d4:	0804e980 	.word	0x0804e980

0804c9d8 <fiprintf>:
 804c9d8:	b40e      	push	{r1, r2, r3}
 804c9da:	b503      	push	{r0, r1, lr}
 804c9dc:	4601      	mov	r1, r0
 804c9de:	ab03      	add	r3, sp, #12
 804c9e0:	4805      	ldr	r0, [pc, #20]	; (804c9f8 <fiprintf+0x20>)
 804c9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 804c9e6:	6800      	ldr	r0, [r0, #0]
 804c9e8:	9301      	str	r3, [sp, #4]
 804c9ea:	f000 f885 	bl	804caf8 <_vfiprintf_r>
 804c9ee:	b002      	add	sp, #8
 804c9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 804c9f4:	b003      	add	sp, #12
 804c9f6:	4770      	bx	lr
 804c9f8:	20000014 	.word	0x20000014

0804c9fc <memmove>:
 804c9fc:	4288      	cmp	r0, r1
 804c9fe:	b510      	push	{r4, lr}
 804ca00:	eb01 0402 	add.w	r4, r1, r2
 804ca04:	d902      	bls.n	804ca0c <memmove+0x10>
 804ca06:	4284      	cmp	r4, r0
 804ca08:	4623      	mov	r3, r4
 804ca0a:	d807      	bhi.n	804ca1c <memmove+0x20>
 804ca0c:	1e43      	subs	r3, r0, #1
 804ca0e:	42a1      	cmp	r1, r4
 804ca10:	d008      	beq.n	804ca24 <memmove+0x28>
 804ca12:	f811 2b01 	ldrb.w	r2, [r1], #1
 804ca16:	f803 2f01 	strb.w	r2, [r3, #1]!
 804ca1a:	e7f8      	b.n	804ca0e <memmove+0x12>
 804ca1c:	4402      	add	r2, r0
 804ca1e:	4601      	mov	r1, r0
 804ca20:	428a      	cmp	r2, r1
 804ca22:	d100      	bne.n	804ca26 <memmove+0x2a>
 804ca24:	bd10      	pop	{r4, pc}
 804ca26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804ca2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804ca2e:	e7f7      	b.n	804ca20 <memmove+0x24>

0804ca30 <__malloc_lock>:
 804ca30:	4801      	ldr	r0, [pc, #4]	; (804ca38 <__malloc_lock+0x8>)
 804ca32:	f000 bc11 	b.w	804d258 <__retarget_lock_acquire_recursive>
 804ca36:	bf00      	nop
 804ca38:	20000240 	.word	0x20000240

0804ca3c <__malloc_unlock>:
 804ca3c:	4801      	ldr	r0, [pc, #4]	; (804ca44 <__malloc_unlock+0x8>)
 804ca3e:	f000 bc0c 	b.w	804d25a <__retarget_lock_release_recursive>
 804ca42:	bf00      	nop
 804ca44:	20000240 	.word	0x20000240

0804ca48 <_realloc_r>:
 804ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ca4c:	4680      	mov	r8, r0
 804ca4e:	4614      	mov	r4, r2
 804ca50:	460e      	mov	r6, r1
 804ca52:	b921      	cbnz	r1, 804ca5e <_realloc_r+0x16>
 804ca54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804ca58:	4611      	mov	r1, r2
 804ca5a:	f7ff bd95 	b.w	804c588 <_malloc_r>
 804ca5e:	b92a      	cbnz	r2, 804ca6c <_realloc_r+0x24>
 804ca60:	f7ff fd26 	bl	804c4b0 <_free_r>
 804ca64:	4625      	mov	r5, r4
 804ca66:	4628      	mov	r0, r5
 804ca68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ca6c:	f000 fc5c 	bl	804d328 <_malloc_usable_size_r>
 804ca70:	4284      	cmp	r4, r0
 804ca72:	4607      	mov	r7, r0
 804ca74:	d802      	bhi.n	804ca7c <_realloc_r+0x34>
 804ca76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804ca7a:	d812      	bhi.n	804caa2 <_realloc_r+0x5a>
 804ca7c:	4621      	mov	r1, r4
 804ca7e:	4640      	mov	r0, r8
 804ca80:	f7ff fd82 	bl	804c588 <_malloc_r>
 804ca84:	4605      	mov	r5, r0
 804ca86:	2800      	cmp	r0, #0
 804ca88:	d0ed      	beq.n	804ca66 <_realloc_r+0x1e>
 804ca8a:	42bc      	cmp	r4, r7
 804ca8c:	4622      	mov	r2, r4
 804ca8e:	4631      	mov	r1, r6
 804ca90:	bf28      	it	cs
 804ca92:	463a      	movcs	r2, r7
 804ca94:	f7fc f886 	bl	8048ba4 <memcpy>
 804ca98:	4631      	mov	r1, r6
 804ca9a:	4640      	mov	r0, r8
 804ca9c:	f7ff fd08 	bl	804c4b0 <_free_r>
 804caa0:	e7e1      	b.n	804ca66 <_realloc_r+0x1e>
 804caa2:	4635      	mov	r5, r6
 804caa4:	e7df      	b.n	804ca66 <_realloc_r+0x1e>

0804caa6 <__sfputc_r>:
 804caa6:	6893      	ldr	r3, [r2, #8]
 804caa8:	3b01      	subs	r3, #1
 804caaa:	2b00      	cmp	r3, #0
 804caac:	b410      	push	{r4}
 804caae:	6093      	str	r3, [r2, #8]
 804cab0:	da08      	bge.n	804cac4 <__sfputc_r+0x1e>
 804cab2:	6994      	ldr	r4, [r2, #24]
 804cab4:	42a3      	cmp	r3, r4
 804cab6:	db01      	blt.n	804cabc <__sfputc_r+0x16>
 804cab8:	290a      	cmp	r1, #10
 804caba:	d103      	bne.n	804cac4 <__sfputc_r+0x1e>
 804cabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cac0:	f000 b94a 	b.w	804cd58 <__swbuf_r>
 804cac4:	6813      	ldr	r3, [r2, #0]
 804cac6:	1c58      	adds	r0, r3, #1
 804cac8:	6010      	str	r0, [r2, #0]
 804caca:	7019      	strb	r1, [r3, #0]
 804cacc:	4608      	mov	r0, r1
 804cace:	f85d 4b04 	ldr.w	r4, [sp], #4
 804cad2:	4770      	bx	lr

0804cad4 <__sfputs_r>:
 804cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cad6:	4606      	mov	r6, r0
 804cad8:	460f      	mov	r7, r1
 804cada:	4614      	mov	r4, r2
 804cadc:	18d5      	adds	r5, r2, r3
 804cade:	42ac      	cmp	r4, r5
 804cae0:	d101      	bne.n	804cae6 <__sfputs_r+0x12>
 804cae2:	2000      	movs	r0, #0
 804cae4:	e007      	b.n	804caf6 <__sfputs_r+0x22>
 804cae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804caea:	463a      	mov	r2, r7
 804caec:	4630      	mov	r0, r6
 804caee:	f7ff ffda 	bl	804caa6 <__sfputc_r>
 804caf2:	1c43      	adds	r3, r0, #1
 804caf4:	d1f3      	bne.n	804cade <__sfputs_r+0xa>
 804caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0804caf8 <_vfiprintf_r>:
 804caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804cafc:	460d      	mov	r5, r1
 804cafe:	b09d      	sub	sp, #116	; 0x74
 804cb00:	4614      	mov	r4, r2
 804cb02:	4698      	mov	r8, r3
 804cb04:	4606      	mov	r6, r0
 804cb06:	b118      	cbz	r0, 804cb10 <_vfiprintf_r+0x18>
 804cb08:	6983      	ldr	r3, [r0, #24]
 804cb0a:	b90b      	cbnz	r3, 804cb10 <_vfiprintf_r+0x18>
 804cb0c:	f000 fb06 	bl	804d11c <__sinit>
 804cb10:	4b89      	ldr	r3, [pc, #548]	; (804cd38 <_vfiprintf_r+0x240>)
 804cb12:	429d      	cmp	r5, r3
 804cb14:	d11b      	bne.n	804cb4e <_vfiprintf_r+0x56>
 804cb16:	6875      	ldr	r5, [r6, #4]
 804cb18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804cb1a:	07d9      	lsls	r1, r3, #31
 804cb1c:	d405      	bmi.n	804cb2a <_vfiprintf_r+0x32>
 804cb1e:	89ab      	ldrh	r3, [r5, #12]
 804cb20:	059a      	lsls	r2, r3, #22
 804cb22:	d402      	bmi.n	804cb2a <_vfiprintf_r+0x32>
 804cb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804cb26:	f000 fb97 	bl	804d258 <__retarget_lock_acquire_recursive>
 804cb2a:	89ab      	ldrh	r3, [r5, #12]
 804cb2c:	071b      	lsls	r3, r3, #28
 804cb2e:	d501      	bpl.n	804cb34 <_vfiprintf_r+0x3c>
 804cb30:	692b      	ldr	r3, [r5, #16]
 804cb32:	b9eb      	cbnz	r3, 804cb70 <_vfiprintf_r+0x78>
 804cb34:	4629      	mov	r1, r5
 804cb36:	4630      	mov	r0, r6
 804cb38:	f000 f960 	bl	804cdfc <__swsetup_r>
 804cb3c:	b1c0      	cbz	r0, 804cb70 <_vfiprintf_r+0x78>
 804cb3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804cb40:	07dc      	lsls	r4, r3, #31
 804cb42:	d50e      	bpl.n	804cb62 <_vfiprintf_r+0x6a>
 804cb44:	f04f 30ff 	mov.w	r0, #4294967295
 804cb48:	b01d      	add	sp, #116	; 0x74
 804cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804cb4e:	4b7b      	ldr	r3, [pc, #492]	; (804cd3c <_vfiprintf_r+0x244>)
 804cb50:	429d      	cmp	r5, r3
 804cb52:	d101      	bne.n	804cb58 <_vfiprintf_r+0x60>
 804cb54:	68b5      	ldr	r5, [r6, #8]
 804cb56:	e7df      	b.n	804cb18 <_vfiprintf_r+0x20>
 804cb58:	4b79      	ldr	r3, [pc, #484]	; (804cd40 <_vfiprintf_r+0x248>)
 804cb5a:	429d      	cmp	r5, r3
 804cb5c:	bf08      	it	eq
 804cb5e:	68f5      	ldreq	r5, [r6, #12]
 804cb60:	e7da      	b.n	804cb18 <_vfiprintf_r+0x20>
 804cb62:	89ab      	ldrh	r3, [r5, #12]
 804cb64:	0598      	lsls	r0, r3, #22
 804cb66:	d4ed      	bmi.n	804cb44 <_vfiprintf_r+0x4c>
 804cb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804cb6a:	f000 fb76 	bl	804d25a <__retarget_lock_release_recursive>
 804cb6e:	e7e9      	b.n	804cb44 <_vfiprintf_r+0x4c>
 804cb70:	2300      	movs	r3, #0
 804cb72:	9309      	str	r3, [sp, #36]	; 0x24
 804cb74:	2320      	movs	r3, #32
 804cb76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804cb7a:	f8cd 800c 	str.w	r8, [sp, #12]
 804cb7e:	2330      	movs	r3, #48	; 0x30
 804cb80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804cd44 <_vfiprintf_r+0x24c>
 804cb84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804cb88:	f04f 0901 	mov.w	r9, #1
 804cb8c:	4623      	mov	r3, r4
 804cb8e:	469a      	mov	sl, r3
 804cb90:	f813 2b01 	ldrb.w	r2, [r3], #1
 804cb94:	b10a      	cbz	r2, 804cb9a <_vfiprintf_r+0xa2>
 804cb96:	2a25      	cmp	r2, #37	; 0x25
 804cb98:	d1f9      	bne.n	804cb8e <_vfiprintf_r+0x96>
 804cb9a:	ebba 0b04 	subs.w	fp, sl, r4
 804cb9e:	d00b      	beq.n	804cbb8 <_vfiprintf_r+0xc0>
 804cba0:	465b      	mov	r3, fp
 804cba2:	4622      	mov	r2, r4
 804cba4:	4629      	mov	r1, r5
 804cba6:	4630      	mov	r0, r6
 804cba8:	f7ff ff94 	bl	804cad4 <__sfputs_r>
 804cbac:	3001      	adds	r0, #1
 804cbae:	f000 80aa 	beq.w	804cd06 <_vfiprintf_r+0x20e>
 804cbb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804cbb4:	445a      	add	r2, fp
 804cbb6:	9209      	str	r2, [sp, #36]	; 0x24
 804cbb8:	f89a 3000 	ldrb.w	r3, [sl]
 804cbbc:	2b00      	cmp	r3, #0
 804cbbe:	f000 80a2 	beq.w	804cd06 <_vfiprintf_r+0x20e>
 804cbc2:	2300      	movs	r3, #0
 804cbc4:	f04f 32ff 	mov.w	r2, #4294967295
 804cbc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804cbcc:	f10a 0a01 	add.w	sl, sl, #1
 804cbd0:	9304      	str	r3, [sp, #16]
 804cbd2:	9307      	str	r3, [sp, #28]
 804cbd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804cbd8:	931a      	str	r3, [sp, #104]	; 0x68
 804cbda:	4654      	mov	r4, sl
 804cbdc:	2205      	movs	r2, #5
 804cbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 804cbe2:	4858      	ldr	r0, [pc, #352]	; (804cd44 <_vfiprintf_r+0x24c>)
 804cbe4:	f7f3 fafc 	bl	80401e0 <memchr>
 804cbe8:	9a04      	ldr	r2, [sp, #16]
 804cbea:	b9d8      	cbnz	r0, 804cc24 <_vfiprintf_r+0x12c>
 804cbec:	06d1      	lsls	r1, r2, #27
 804cbee:	bf44      	itt	mi
 804cbf0:	2320      	movmi	r3, #32
 804cbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804cbf6:	0713      	lsls	r3, r2, #28
 804cbf8:	bf44      	itt	mi
 804cbfa:	232b      	movmi	r3, #43	; 0x2b
 804cbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804cc00:	f89a 3000 	ldrb.w	r3, [sl]
 804cc04:	2b2a      	cmp	r3, #42	; 0x2a
 804cc06:	d015      	beq.n	804cc34 <_vfiprintf_r+0x13c>
 804cc08:	9a07      	ldr	r2, [sp, #28]
 804cc0a:	4654      	mov	r4, sl
 804cc0c:	2000      	movs	r0, #0
 804cc0e:	f04f 0c0a 	mov.w	ip, #10
 804cc12:	4621      	mov	r1, r4
 804cc14:	f811 3b01 	ldrb.w	r3, [r1], #1
 804cc18:	3b30      	subs	r3, #48	; 0x30
 804cc1a:	2b09      	cmp	r3, #9
 804cc1c:	d94e      	bls.n	804ccbc <_vfiprintf_r+0x1c4>
 804cc1e:	b1b0      	cbz	r0, 804cc4e <_vfiprintf_r+0x156>
 804cc20:	9207      	str	r2, [sp, #28]
 804cc22:	e014      	b.n	804cc4e <_vfiprintf_r+0x156>
 804cc24:	eba0 0308 	sub.w	r3, r0, r8
 804cc28:	fa09 f303 	lsl.w	r3, r9, r3
 804cc2c:	4313      	orrs	r3, r2
 804cc2e:	9304      	str	r3, [sp, #16]
 804cc30:	46a2      	mov	sl, r4
 804cc32:	e7d2      	b.n	804cbda <_vfiprintf_r+0xe2>
 804cc34:	9b03      	ldr	r3, [sp, #12]
 804cc36:	1d19      	adds	r1, r3, #4
 804cc38:	681b      	ldr	r3, [r3, #0]
 804cc3a:	9103      	str	r1, [sp, #12]
 804cc3c:	2b00      	cmp	r3, #0
 804cc3e:	bfbb      	ittet	lt
 804cc40:	425b      	neglt	r3, r3
 804cc42:	f042 0202 	orrlt.w	r2, r2, #2
 804cc46:	9307      	strge	r3, [sp, #28]
 804cc48:	9307      	strlt	r3, [sp, #28]
 804cc4a:	bfb8      	it	lt
 804cc4c:	9204      	strlt	r2, [sp, #16]
 804cc4e:	7823      	ldrb	r3, [r4, #0]
 804cc50:	2b2e      	cmp	r3, #46	; 0x2e
 804cc52:	d10c      	bne.n	804cc6e <_vfiprintf_r+0x176>
 804cc54:	7863      	ldrb	r3, [r4, #1]
 804cc56:	2b2a      	cmp	r3, #42	; 0x2a
 804cc58:	d135      	bne.n	804ccc6 <_vfiprintf_r+0x1ce>
 804cc5a:	9b03      	ldr	r3, [sp, #12]
 804cc5c:	1d1a      	adds	r2, r3, #4
 804cc5e:	681b      	ldr	r3, [r3, #0]
 804cc60:	9203      	str	r2, [sp, #12]
 804cc62:	2b00      	cmp	r3, #0
 804cc64:	bfb8      	it	lt
 804cc66:	f04f 33ff 	movlt.w	r3, #4294967295
 804cc6a:	3402      	adds	r4, #2
 804cc6c:	9305      	str	r3, [sp, #20]
 804cc6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804cd54 <_vfiprintf_r+0x25c>
 804cc72:	7821      	ldrb	r1, [r4, #0]
 804cc74:	2203      	movs	r2, #3
 804cc76:	4650      	mov	r0, sl
 804cc78:	f7f3 fab2 	bl	80401e0 <memchr>
 804cc7c:	b140      	cbz	r0, 804cc90 <_vfiprintf_r+0x198>
 804cc7e:	2340      	movs	r3, #64	; 0x40
 804cc80:	eba0 000a 	sub.w	r0, r0, sl
 804cc84:	fa03 f000 	lsl.w	r0, r3, r0
 804cc88:	9b04      	ldr	r3, [sp, #16]
 804cc8a:	4303      	orrs	r3, r0
 804cc8c:	3401      	adds	r4, #1
 804cc8e:	9304      	str	r3, [sp, #16]
 804cc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 804cc94:	482c      	ldr	r0, [pc, #176]	; (804cd48 <_vfiprintf_r+0x250>)
 804cc96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804cc9a:	2206      	movs	r2, #6
 804cc9c:	f7f3 faa0 	bl	80401e0 <memchr>
 804cca0:	2800      	cmp	r0, #0
 804cca2:	d03f      	beq.n	804cd24 <_vfiprintf_r+0x22c>
 804cca4:	4b29      	ldr	r3, [pc, #164]	; (804cd4c <_vfiprintf_r+0x254>)
 804cca6:	bb1b      	cbnz	r3, 804ccf0 <_vfiprintf_r+0x1f8>
 804cca8:	9b03      	ldr	r3, [sp, #12]
 804ccaa:	3307      	adds	r3, #7
 804ccac:	f023 0307 	bic.w	r3, r3, #7
 804ccb0:	3308      	adds	r3, #8
 804ccb2:	9303      	str	r3, [sp, #12]
 804ccb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804ccb6:	443b      	add	r3, r7
 804ccb8:	9309      	str	r3, [sp, #36]	; 0x24
 804ccba:	e767      	b.n	804cb8c <_vfiprintf_r+0x94>
 804ccbc:	fb0c 3202 	mla	r2, ip, r2, r3
 804ccc0:	460c      	mov	r4, r1
 804ccc2:	2001      	movs	r0, #1
 804ccc4:	e7a5      	b.n	804cc12 <_vfiprintf_r+0x11a>
 804ccc6:	2300      	movs	r3, #0
 804ccc8:	3401      	adds	r4, #1
 804ccca:	9305      	str	r3, [sp, #20]
 804cccc:	4619      	mov	r1, r3
 804ccce:	f04f 0c0a 	mov.w	ip, #10
 804ccd2:	4620      	mov	r0, r4
 804ccd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 804ccd8:	3a30      	subs	r2, #48	; 0x30
 804ccda:	2a09      	cmp	r2, #9
 804ccdc:	d903      	bls.n	804cce6 <_vfiprintf_r+0x1ee>
 804ccde:	2b00      	cmp	r3, #0
 804cce0:	d0c5      	beq.n	804cc6e <_vfiprintf_r+0x176>
 804cce2:	9105      	str	r1, [sp, #20]
 804cce4:	e7c3      	b.n	804cc6e <_vfiprintf_r+0x176>
 804cce6:	fb0c 2101 	mla	r1, ip, r1, r2
 804ccea:	4604      	mov	r4, r0
 804ccec:	2301      	movs	r3, #1
 804ccee:	e7f0      	b.n	804ccd2 <_vfiprintf_r+0x1da>
 804ccf0:	ab03      	add	r3, sp, #12
 804ccf2:	9300      	str	r3, [sp, #0]
 804ccf4:	462a      	mov	r2, r5
 804ccf6:	4b16      	ldr	r3, [pc, #88]	; (804cd50 <_vfiprintf_r+0x258>)
 804ccf8:	a904      	add	r1, sp, #16
 804ccfa:	4630      	mov	r0, r6
 804ccfc:	f7fc f808 	bl	8048d10 <_printf_float>
 804cd00:	4607      	mov	r7, r0
 804cd02:	1c78      	adds	r0, r7, #1
 804cd04:	d1d6      	bne.n	804ccb4 <_vfiprintf_r+0x1bc>
 804cd06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804cd08:	07d9      	lsls	r1, r3, #31
 804cd0a:	d405      	bmi.n	804cd18 <_vfiprintf_r+0x220>
 804cd0c:	89ab      	ldrh	r3, [r5, #12]
 804cd0e:	059a      	lsls	r2, r3, #22
 804cd10:	d402      	bmi.n	804cd18 <_vfiprintf_r+0x220>
 804cd12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804cd14:	f000 faa1 	bl	804d25a <__retarget_lock_release_recursive>
 804cd18:	89ab      	ldrh	r3, [r5, #12]
 804cd1a:	065b      	lsls	r3, r3, #25
 804cd1c:	f53f af12 	bmi.w	804cb44 <_vfiprintf_r+0x4c>
 804cd20:	9809      	ldr	r0, [sp, #36]	; 0x24
 804cd22:	e711      	b.n	804cb48 <_vfiprintf_r+0x50>
 804cd24:	ab03      	add	r3, sp, #12
 804cd26:	9300      	str	r3, [sp, #0]
 804cd28:	462a      	mov	r2, r5
 804cd2a:	4b09      	ldr	r3, [pc, #36]	; (804cd50 <_vfiprintf_r+0x258>)
 804cd2c:	a904      	add	r1, sp, #16
 804cd2e:	4630      	mov	r0, r6
 804cd30:	f7fc fa92 	bl	8049258 <_printf_i>
 804cd34:	e7e4      	b.n	804cd00 <_vfiprintf_r+0x208>
 804cd36:	bf00      	nop
 804cd38:	0804e9a4 	.word	0x0804e9a4
 804cd3c:	0804e9c4 	.word	0x0804e9c4
 804cd40:	0804e984 	.word	0x0804e984
 804cd44:	0804e934 	.word	0x0804e934
 804cd48:	0804e93e 	.word	0x0804e93e
 804cd4c:	08048d11 	.word	0x08048d11
 804cd50:	0804cad5 	.word	0x0804cad5
 804cd54:	0804e93a 	.word	0x0804e93a

0804cd58 <__swbuf_r>:
 804cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cd5a:	460e      	mov	r6, r1
 804cd5c:	4614      	mov	r4, r2
 804cd5e:	4605      	mov	r5, r0
 804cd60:	b118      	cbz	r0, 804cd6a <__swbuf_r+0x12>
 804cd62:	6983      	ldr	r3, [r0, #24]
 804cd64:	b90b      	cbnz	r3, 804cd6a <__swbuf_r+0x12>
 804cd66:	f000 f9d9 	bl	804d11c <__sinit>
 804cd6a:	4b21      	ldr	r3, [pc, #132]	; (804cdf0 <__swbuf_r+0x98>)
 804cd6c:	429c      	cmp	r4, r3
 804cd6e:	d12b      	bne.n	804cdc8 <__swbuf_r+0x70>
 804cd70:	686c      	ldr	r4, [r5, #4]
 804cd72:	69a3      	ldr	r3, [r4, #24]
 804cd74:	60a3      	str	r3, [r4, #8]
 804cd76:	89a3      	ldrh	r3, [r4, #12]
 804cd78:	071a      	lsls	r2, r3, #28
 804cd7a:	d52f      	bpl.n	804cddc <__swbuf_r+0x84>
 804cd7c:	6923      	ldr	r3, [r4, #16]
 804cd7e:	b36b      	cbz	r3, 804cddc <__swbuf_r+0x84>
 804cd80:	6923      	ldr	r3, [r4, #16]
 804cd82:	6820      	ldr	r0, [r4, #0]
 804cd84:	1ac0      	subs	r0, r0, r3
 804cd86:	6963      	ldr	r3, [r4, #20]
 804cd88:	b2f6      	uxtb	r6, r6
 804cd8a:	4283      	cmp	r3, r0
 804cd8c:	4637      	mov	r7, r6
 804cd8e:	dc04      	bgt.n	804cd9a <__swbuf_r+0x42>
 804cd90:	4621      	mov	r1, r4
 804cd92:	4628      	mov	r0, r5
 804cd94:	f000 f92e 	bl	804cff4 <_fflush_r>
 804cd98:	bb30      	cbnz	r0, 804cde8 <__swbuf_r+0x90>
 804cd9a:	68a3      	ldr	r3, [r4, #8]
 804cd9c:	3b01      	subs	r3, #1
 804cd9e:	60a3      	str	r3, [r4, #8]
 804cda0:	6823      	ldr	r3, [r4, #0]
 804cda2:	1c5a      	adds	r2, r3, #1
 804cda4:	6022      	str	r2, [r4, #0]
 804cda6:	701e      	strb	r6, [r3, #0]
 804cda8:	6963      	ldr	r3, [r4, #20]
 804cdaa:	3001      	adds	r0, #1
 804cdac:	4283      	cmp	r3, r0
 804cdae:	d004      	beq.n	804cdba <__swbuf_r+0x62>
 804cdb0:	89a3      	ldrh	r3, [r4, #12]
 804cdb2:	07db      	lsls	r3, r3, #31
 804cdb4:	d506      	bpl.n	804cdc4 <__swbuf_r+0x6c>
 804cdb6:	2e0a      	cmp	r6, #10
 804cdb8:	d104      	bne.n	804cdc4 <__swbuf_r+0x6c>
 804cdba:	4621      	mov	r1, r4
 804cdbc:	4628      	mov	r0, r5
 804cdbe:	f000 f919 	bl	804cff4 <_fflush_r>
 804cdc2:	b988      	cbnz	r0, 804cde8 <__swbuf_r+0x90>
 804cdc4:	4638      	mov	r0, r7
 804cdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cdc8:	4b0a      	ldr	r3, [pc, #40]	; (804cdf4 <__swbuf_r+0x9c>)
 804cdca:	429c      	cmp	r4, r3
 804cdcc:	d101      	bne.n	804cdd2 <__swbuf_r+0x7a>
 804cdce:	68ac      	ldr	r4, [r5, #8]
 804cdd0:	e7cf      	b.n	804cd72 <__swbuf_r+0x1a>
 804cdd2:	4b09      	ldr	r3, [pc, #36]	; (804cdf8 <__swbuf_r+0xa0>)
 804cdd4:	429c      	cmp	r4, r3
 804cdd6:	bf08      	it	eq
 804cdd8:	68ec      	ldreq	r4, [r5, #12]
 804cdda:	e7ca      	b.n	804cd72 <__swbuf_r+0x1a>
 804cddc:	4621      	mov	r1, r4
 804cdde:	4628      	mov	r0, r5
 804cde0:	f000 f80c 	bl	804cdfc <__swsetup_r>
 804cde4:	2800      	cmp	r0, #0
 804cde6:	d0cb      	beq.n	804cd80 <__swbuf_r+0x28>
 804cde8:	f04f 37ff 	mov.w	r7, #4294967295
 804cdec:	e7ea      	b.n	804cdc4 <__swbuf_r+0x6c>
 804cdee:	bf00      	nop
 804cdf0:	0804e9a4 	.word	0x0804e9a4
 804cdf4:	0804e9c4 	.word	0x0804e9c4
 804cdf8:	0804e984 	.word	0x0804e984

0804cdfc <__swsetup_r>:
 804cdfc:	4b32      	ldr	r3, [pc, #200]	; (804cec8 <__swsetup_r+0xcc>)
 804cdfe:	b570      	push	{r4, r5, r6, lr}
 804ce00:	681d      	ldr	r5, [r3, #0]
 804ce02:	4606      	mov	r6, r0
 804ce04:	460c      	mov	r4, r1
 804ce06:	b125      	cbz	r5, 804ce12 <__swsetup_r+0x16>
 804ce08:	69ab      	ldr	r3, [r5, #24]
 804ce0a:	b913      	cbnz	r3, 804ce12 <__swsetup_r+0x16>
 804ce0c:	4628      	mov	r0, r5
 804ce0e:	f000 f985 	bl	804d11c <__sinit>
 804ce12:	4b2e      	ldr	r3, [pc, #184]	; (804cecc <__swsetup_r+0xd0>)
 804ce14:	429c      	cmp	r4, r3
 804ce16:	d10f      	bne.n	804ce38 <__swsetup_r+0x3c>
 804ce18:	686c      	ldr	r4, [r5, #4]
 804ce1a:	89a3      	ldrh	r3, [r4, #12]
 804ce1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804ce20:	0719      	lsls	r1, r3, #28
 804ce22:	d42c      	bmi.n	804ce7e <__swsetup_r+0x82>
 804ce24:	06dd      	lsls	r5, r3, #27
 804ce26:	d411      	bmi.n	804ce4c <__swsetup_r+0x50>
 804ce28:	2309      	movs	r3, #9
 804ce2a:	6033      	str	r3, [r6, #0]
 804ce2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804ce30:	81a3      	strh	r3, [r4, #12]
 804ce32:	f04f 30ff 	mov.w	r0, #4294967295
 804ce36:	e03e      	b.n	804ceb6 <__swsetup_r+0xba>
 804ce38:	4b25      	ldr	r3, [pc, #148]	; (804ced0 <__swsetup_r+0xd4>)
 804ce3a:	429c      	cmp	r4, r3
 804ce3c:	d101      	bne.n	804ce42 <__swsetup_r+0x46>
 804ce3e:	68ac      	ldr	r4, [r5, #8]
 804ce40:	e7eb      	b.n	804ce1a <__swsetup_r+0x1e>
 804ce42:	4b24      	ldr	r3, [pc, #144]	; (804ced4 <__swsetup_r+0xd8>)
 804ce44:	429c      	cmp	r4, r3
 804ce46:	bf08      	it	eq
 804ce48:	68ec      	ldreq	r4, [r5, #12]
 804ce4a:	e7e6      	b.n	804ce1a <__swsetup_r+0x1e>
 804ce4c:	0758      	lsls	r0, r3, #29
 804ce4e:	d512      	bpl.n	804ce76 <__swsetup_r+0x7a>
 804ce50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804ce52:	b141      	cbz	r1, 804ce66 <__swsetup_r+0x6a>
 804ce54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804ce58:	4299      	cmp	r1, r3
 804ce5a:	d002      	beq.n	804ce62 <__swsetup_r+0x66>
 804ce5c:	4630      	mov	r0, r6
 804ce5e:	f7ff fb27 	bl	804c4b0 <_free_r>
 804ce62:	2300      	movs	r3, #0
 804ce64:	6363      	str	r3, [r4, #52]	; 0x34
 804ce66:	89a3      	ldrh	r3, [r4, #12]
 804ce68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804ce6c:	81a3      	strh	r3, [r4, #12]
 804ce6e:	2300      	movs	r3, #0
 804ce70:	6063      	str	r3, [r4, #4]
 804ce72:	6923      	ldr	r3, [r4, #16]
 804ce74:	6023      	str	r3, [r4, #0]
 804ce76:	89a3      	ldrh	r3, [r4, #12]
 804ce78:	f043 0308 	orr.w	r3, r3, #8
 804ce7c:	81a3      	strh	r3, [r4, #12]
 804ce7e:	6923      	ldr	r3, [r4, #16]
 804ce80:	b94b      	cbnz	r3, 804ce96 <__swsetup_r+0x9a>
 804ce82:	89a3      	ldrh	r3, [r4, #12]
 804ce84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804ce88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804ce8c:	d003      	beq.n	804ce96 <__swsetup_r+0x9a>
 804ce8e:	4621      	mov	r1, r4
 804ce90:	4630      	mov	r0, r6
 804ce92:	f000 fa09 	bl	804d2a8 <__smakebuf_r>
 804ce96:	89a0      	ldrh	r0, [r4, #12]
 804ce98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804ce9c:	f010 0301 	ands.w	r3, r0, #1
 804cea0:	d00a      	beq.n	804ceb8 <__swsetup_r+0xbc>
 804cea2:	2300      	movs	r3, #0
 804cea4:	60a3      	str	r3, [r4, #8]
 804cea6:	6963      	ldr	r3, [r4, #20]
 804cea8:	425b      	negs	r3, r3
 804ceaa:	61a3      	str	r3, [r4, #24]
 804ceac:	6923      	ldr	r3, [r4, #16]
 804ceae:	b943      	cbnz	r3, 804cec2 <__swsetup_r+0xc6>
 804ceb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804ceb4:	d1ba      	bne.n	804ce2c <__swsetup_r+0x30>
 804ceb6:	bd70      	pop	{r4, r5, r6, pc}
 804ceb8:	0781      	lsls	r1, r0, #30
 804ceba:	bf58      	it	pl
 804cebc:	6963      	ldrpl	r3, [r4, #20]
 804cebe:	60a3      	str	r3, [r4, #8]
 804cec0:	e7f4      	b.n	804ceac <__swsetup_r+0xb0>
 804cec2:	2000      	movs	r0, #0
 804cec4:	e7f7      	b.n	804ceb6 <__swsetup_r+0xba>
 804cec6:	bf00      	nop
 804cec8:	20000014 	.word	0x20000014
 804cecc:	0804e9a4 	.word	0x0804e9a4
 804ced0:	0804e9c4 	.word	0x0804e9c4
 804ced4:	0804e984 	.word	0x0804e984

0804ced8 <abort>:
 804ced8:	b508      	push	{r3, lr}
 804ceda:	2006      	movs	r0, #6
 804cedc:	f000 fa54 	bl	804d388 <raise>
 804cee0:	2001      	movs	r0, #1
 804cee2:	f7f7 fdf5 	bl	8044ad0 <_exit>
	...

0804cee8 <__sflush_r>:
 804cee8:	898a      	ldrh	r2, [r1, #12]
 804ceea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ceee:	4605      	mov	r5, r0
 804cef0:	0710      	lsls	r0, r2, #28
 804cef2:	460c      	mov	r4, r1
 804cef4:	d458      	bmi.n	804cfa8 <__sflush_r+0xc0>
 804cef6:	684b      	ldr	r3, [r1, #4]
 804cef8:	2b00      	cmp	r3, #0
 804cefa:	dc05      	bgt.n	804cf08 <__sflush_r+0x20>
 804cefc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804cefe:	2b00      	cmp	r3, #0
 804cf00:	dc02      	bgt.n	804cf08 <__sflush_r+0x20>
 804cf02:	2000      	movs	r0, #0
 804cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cf08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cf0a:	2e00      	cmp	r6, #0
 804cf0c:	d0f9      	beq.n	804cf02 <__sflush_r+0x1a>
 804cf0e:	2300      	movs	r3, #0
 804cf10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804cf14:	682f      	ldr	r7, [r5, #0]
 804cf16:	602b      	str	r3, [r5, #0]
 804cf18:	d032      	beq.n	804cf80 <__sflush_r+0x98>
 804cf1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804cf1c:	89a3      	ldrh	r3, [r4, #12]
 804cf1e:	075a      	lsls	r2, r3, #29
 804cf20:	d505      	bpl.n	804cf2e <__sflush_r+0x46>
 804cf22:	6863      	ldr	r3, [r4, #4]
 804cf24:	1ac0      	subs	r0, r0, r3
 804cf26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804cf28:	b10b      	cbz	r3, 804cf2e <__sflush_r+0x46>
 804cf2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804cf2c:	1ac0      	subs	r0, r0, r3
 804cf2e:	2300      	movs	r3, #0
 804cf30:	4602      	mov	r2, r0
 804cf32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cf34:	6a21      	ldr	r1, [r4, #32]
 804cf36:	4628      	mov	r0, r5
 804cf38:	47b0      	blx	r6
 804cf3a:	1c43      	adds	r3, r0, #1
 804cf3c:	89a3      	ldrh	r3, [r4, #12]
 804cf3e:	d106      	bne.n	804cf4e <__sflush_r+0x66>
 804cf40:	6829      	ldr	r1, [r5, #0]
 804cf42:	291d      	cmp	r1, #29
 804cf44:	d82c      	bhi.n	804cfa0 <__sflush_r+0xb8>
 804cf46:	4a2a      	ldr	r2, [pc, #168]	; (804cff0 <__sflush_r+0x108>)
 804cf48:	40ca      	lsrs	r2, r1
 804cf4a:	07d6      	lsls	r6, r2, #31
 804cf4c:	d528      	bpl.n	804cfa0 <__sflush_r+0xb8>
 804cf4e:	2200      	movs	r2, #0
 804cf50:	6062      	str	r2, [r4, #4]
 804cf52:	04d9      	lsls	r1, r3, #19
 804cf54:	6922      	ldr	r2, [r4, #16]
 804cf56:	6022      	str	r2, [r4, #0]
 804cf58:	d504      	bpl.n	804cf64 <__sflush_r+0x7c>
 804cf5a:	1c42      	adds	r2, r0, #1
 804cf5c:	d101      	bne.n	804cf62 <__sflush_r+0x7a>
 804cf5e:	682b      	ldr	r3, [r5, #0]
 804cf60:	b903      	cbnz	r3, 804cf64 <__sflush_r+0x7c>
 804cf62:	6560      	str	r0, [r4, #84]	; 0x54
 804cf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cf66:	602f      	str	r7, [r5, #0]
 804cf68:	2900      	cmp	r1, #0
 804cf6a:	d0ca      	beq.n	804cf02 <__sflush_r+0x1a>
 804cf6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cf70:	4299      	cmp	r1, r3
 804cf72:	d002      	beq.n	804cf7a <__sflush_r+0x92>
 804cf74:	4628      	mov	r0, r5
 804cf76:	f7ff fa9b 	bl	804c4b0 <_free_r>
 804cf7a:	2000      	movs	r0, #0
 804cf7c:	6360      	str	r0, [r4, #52]	; 0x34
 804cf7e:	e7c1      	b.n	804cf04 <__sflush_r+0x1c>
 804cf80:	6a21      	ldr	r1, [r4, #32]
 804cf82:	2301      	movs	r3, #1
 804cf84:	4628      	mov	r0, r5
 804cf86:	47b0      	blx	r6
 804cf88:	1c41      	adds	r1, r0, #1
 804cf8a:	d1c7      	bne.n	804cf1c <__sflush_r+0x34>
 804cf8c:	682b      	ldr	r3, [r5, #0]
 804cf8e:	2b00      	cmp	r3, #0
 804cf90:	d0c4      	beq.n	804cf1c <__sflush_r+0x34>
 804cf92:	2b1d      	cmp	r3, #29
 804cf94:	d001      	beq.n	804cf9a <__sflush_r+0xb2>
 804cf96:	2b16      	cmp	r3, #22
 804cf98:	d101      	bne.n	804cf9e <__sflush_r+0xb6>
 804cf9a:	602f      	str	r7, [r5, #0]
 804cf9c:	e7b1      	b.n	804cf02 <__sflush_r+0x1a>
 804cf9e:	89a3      	ldrh	r3, [r4, #12]
 804cfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cfa4:	81a3      	strh	r3, [r4, #12]
 804cfa6:	e7ad      	b.n	804cf04 <__sflush_r+0x1c>
 804cfa8:	690f      	ldr	r7, [r1, #16]
 804cfaa:	2f00      	cmp	r7, #0
 804cfac:	d0a9      	beq.n	804cf02 <__sflush_r+0x1a>
 804cfae:	0793      	lsls	r3, r2, #30
 804cfb0:	680e      	ldr	r6, [r1, #0]
 804cfb2:	bf08      	it	eq
 804cfb4:	694b      	ldreq	r3, [r1, #20]
 804cfb6:	600f      	str	r7, [r1, #0]
 804cfb8:	bf18      	it	ne
 804cfba:	2300      	movne	r3, #0
 804cfbc:	eba6 0807 	sub.w	r8, r6, r7
 804cfc0:	608b      	str	r3, [r1, #8]
 804cfc2:	f1b8 0f00 	cmp.w	r8, #0
 804cfc6:	dd9c      	ble.n	804cf02 <__sflush_r+0x1a>
 804cfc8:	6a21      	ldr	r1, [r4, #32]
 804cfca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804cfcc:	4643      	mov	r3, r8
 804cfce:	463a      	mov	r2, r7
 804cfd0:	4628      	mov	r0, r5
 804cfd2:	47b0      	blx	r6
 804cfd4:	2800      	cmp	r0, #0
 804cfd6:	dc06      	bgt.n	804cfe6 <__sflush_r+0xfe>
 804cfd8:	89a3      	ldrh	r3, [r4, #12]
 804cfda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cfde:	81a3      	strh	r3, [r4, #12]
 804cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 804cfe4:	e78e      	b.n	804cf04 <__sflush_r+0x1c>
 804cfe6:	4407      	add	r7, r0
 804cfe8:	eba8 0800 	sub.w	r8, r8, r0
 804cfec:	e7e9      	b.n	804cfc2 <__sflush_r+0xda>
 804cfee:	bf00      	nop
 804cff0:	20400001 	.word	0x20400001

0804cff4 <_fflush_r>:
 804cff4:	b538      	push	{r3, r4, r5, lr}
 804cff6:	690b      	ldr	r3, [r1, #16]
 804cff8:	4605      	mov	r5, r0
 804cffa:	460c      	mov	r4, r1
 804cffc:	b913      	cbnz	r3, 804d004 <_fflush_r+0x10>
 804cffe:	2500      	movs	r5, #0
 804d000:	4628      	mov	r0, r5
 804d002:	bd38      	pop	{r3, r4, r5, pc}
 804d004:	b118      	cbz	r0, 804d00e <_fflush_r+0x1a>
 804d006:	6983      	ldr	r3, [r0, #24]
 804d008:	b90b      	cbnz	r3, 804d00e <_fflush_r+0x1a>
 804d00a:	f000 f887 	bl	804d11c <__sinit>
 804d00e:	4b14      	ldr	r3, [pc, #80]	; (804d060 <_fflush_r+0x6c>)
 804d010:	429c      	cmp	r4, r3
 804d012:	d11b      	bne.n	804d04c <_fflush_r+0x58>
 804d014:	686c      	ldr	r4, [r5, #4]
 804d016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d01a:	2b00      	cmp	r3, #0
 804d01c:	d0ef      	beq.n	804cffe <_fflush_r+0xa>
 804d01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804d020:	07d0      	lsls	r0, r2, #31
 804d022:	d404      	bmi.n	804d02e <_fflush_r+0x3a>
 804d024:	0599      	lsls	r1, r3, #22
 804d026:	d402      	bmi.n	804d02e <_fflush_r+0x3a>
 804d028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d02a:	f000 f915 	bl	804d258 <__retarget_lock_acquire_recursive>
 804d02e:	4628      	mov	r0, r5
 804d030:	4621      	mov	r1, r4
 804d032:	f7ff ff59 	bl	804cee8 <__sflush_r>
 804d036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d038:	07da      	lsls	r2, r3, #31
 804d03a:	4605      	mov	r5, r0
 804d03c:	d4e0      	bmi.n	804d000 <_fflush_r+0xc>
 804d03e:	89a3      	ldrh	r3, [r4, #12]
 804d040:	059b      	lsls	r3, r3, #22
 804d042:	d4dd      	bmi.n	804d000 <_fflush_r+0xc>
 804d044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d046:	f000 f908 	bl	804d25a <__retarget_lock_release_recursive>
 804d04a:	e7d9      	b.n	804d000 <_fflush_r+0xc>
 804d04c:	4b05      	ldr	r3, [pc, #20]	; (804d064 <_fflush_r+0x70>)
 804d04e:	429c      	cmp	r4, r3
 804d050:	d101      	bne.n	804d056 <_fflush_r+0x62>
 804d052:	68ac      	ldr	r4, [r5, #8]
 804d054:	e7df      	b.n	804d016 <_fflush_r+0x22>
 804d056:	4b04      	ldr	r3, [pc, #16]	; (804d068 <_fflush_r+0x74>)
 804d058:	429c      	cmp	r4, r3
 804d05a:	bf08      	it	eq
 804d05c:	68ec      	ldreq	r4, [r5, #12]
 804d05e:	e7da      	b.n	804d016 <_fflush_r+0x22>
 804d060:	0804e9a4 	.word	0x0804e9a4
 804d064:	0804e9c4 	.word	0x0804e9c4
 804d068:	0804e984 	.word	0x0804e984

0804d06c <std>:
 804d06c:	2300      	movs	r3, #0
 804d06e:	b510      	push	{r4, lr}
 804d070:	4604      	mov	r4, r0
 804d072:	e9c0 3300 	strd	r3, r3, [r0]
 804d076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804d07a:	6083      	str	r3, [r0, #8]
 804d07c:	8181      	strh	r1, [r0, #12]
 804d07e:	6643      	str	r3, [r0, #100]	; 0x64
 804d080:	81c2      	strh	r2, [r0, #14]
 804d082:	6183      	str	r3, [r0, #24]
 804d084:	4619      	mov	r1, r3
 804d086:	2208      	movs	r2, #8
 804d088:	305c      	adds	r0, #92	; 0x5c
 804d08a:	f7fb fd99 	bl	8048bc0 <memset>
 804d08e:	4b05      	ldr	r3, [pc, #20]	; (804d0a4 <std+0x38>)
 804d090:	6263      	str	r3, [r4, #36]	; 0x24
 804d092:	4b05      	ldr	r3, [pc, #20]	; (804d0a8 <std+0x3c>)
 804d094:	62a3      	str	r3, [r4, #40]	; 0x28
 804d096:	4b05      	ldr	r3, [pc, #20]	; (804d0ac <std+0x40>)
 804d098:	62e3      	str	r3, [r4, #44]	; 0x2c
 804d09a:	4b05      	ldr	r3, [pc, #20]	; (804d0b0 <std+0x44>)
 804d09c:	6224      	str	r4, [r4, #32]
 804d09e:	6323      	str	r3, [r4, #48]	; 0x30
 804d0a0:	bd10      	pop	{r4, pc}
 804d0a2:	bf00      	nop
 804d0a4:	0804d3c1 	.word	0x0804d3c1
 804d0a8:	0804d3e3 	.word	0x0804d3e3
 804d0ac:	0804d41b 	.word	0x0804d41b
 804d0b0:	0804d43f 	.word	0x0804d43f

0804d0b4 <_cleanup_r>:
 804d0b4:	4901      	ldr	r1, [pc, #4]	; (804d0bc <_cleanup_r+0x8>)
 804d0b6:	f000 b8af 	b.w	804d218 <_fwalk_reent>
 804d0ba:	bf00      	nop
 804d0bc:	0804cff5 	.word	0x0804cff5

0804d0c0 <__sfmoreglue>:
 804d0c0:	b570      	push	{r4, r5, r6, lr}
 804d0c2:	2268      	movs	r2, #104	; 0x68
 804d0c4:	1e4d      	subs	r5, r1, #1
 804d0c6:	4355      	muls	r5, r2
 804d0c8:	460e      	mov	r6, r1
 804d0ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804d0ce:	f7ff fa5b 	bl	804c588 <_malloc_r>
 804d0d2:	4604      	mov	r4, r0
 804d0d4:	b140      	cbz	r0, 804d0e8 <__sfmoreglue+0x28>
 804d0d6:	2100      	movs	r1, #0
 804d0d8:	e9c0 1600 	strd	r1, r6, [r0]
 804d0dc:	300c      	adds	r0, #12
 804d0de:	60a0      	str	r0, [r4, #8]
 804d0e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804d0e4:	f7fb fd6c 	bl	8048bc0 <memset>
 804d0e8:	4620      	mov	r0, r4
 804d0ea:	bd70      	pop	{r4, r5, r6, pc}

0804d0ec <__sfp_lock_acquire>:
 804d0ec:	4801      	ldr	r0, [pc, #4]	; (804d0f4 <__sfp_lock_acquire+0x8>)
 804d0ee:	f000 b8b3 	b.w	804d258 <__retarget_lock_acquire_recursive>
 804d0f2:	bf00      	nop
 804d0f4:	20000241 	.word	0x20000241

0804d0f8 <__sfp_lock_release>:
 804d0f8:	4801      	ldr	r0, [pc, #4]	; (804d100 <__sfp_lock_release+0x8>)
 804d0fa:	f000 b8ae 	b.w	804d25a <__retarget_lock_release_recursive>
 804d0fe:	bf00      	nop
 804d100:	20000241 	.word	0x20000241

0804d104 <__sinit_lock_acquire>:
 804d104:	4801      	ldr	r0, [pc, #4]	; (804d10c <__sinit_lock_acquire+0x8>)
 804d106:	f000 b8a7 	b.w	804d258 <__retarget_lock_acquire_recursive>
 804d10a:	bf00      	nop
 804d10c:	20000242 	.word	0x20000242

0804d110 <__sinit_lock_release>:
 804d110:	4801      	ldr	r0, [pc, #4]	; (804d118 <__sinit_lock_release+0x8>)
 804d112:	f000 b8a2 	b.w	804d25a <__retarget_lock_release_recursive>
 804d116:	bf00      	nop
 804d118:	20000242 	.word	0x20000242

0804d11c <__sinit>:
 804d11c:	b510      	push	{r4, lr}
 804d11e:	4604      	mov	r4, r0
 804d120:	f7ff fff0 	bl	804d104 <__sinit_lock_acquire>
 804d124:	69a3      	ldr	r3, [r4, #24]
 804d126:	b11b      	cbz	r3, 804d130 <__sinit+0x14>
 804d128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d12c:	f7ff bff0 	b.w	804d110 <__sinit_lock_release>
 804d130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804d134:	6523      	str	r3, [r4, #80]	; 0x50
 804d136:	4b13      	ldr	r3, [pc, #76]	; (804d184 <__sinit+0x68>)
 804d138:	4a13      	ldr	r2, [pc, #76]	; (804d188 <__sinit+0x6c>)
 804d13a:	681b      	ldr	r3, [r3, #0]
 804d13c:	62a2      	str	r2, [r4, #40]	; 0x28
 804d13e:	42a3      	cmp	r3, r4
 804d140:	bf04      	itt	eq
 804d142:	2301      	moveq	r3, #1
 804d144:	61a3      	streq	r3, [r4, #24]
 804d146:	4620      	mov	r0, r4
 804d148:	f000 f820 	bl	804d18c <__sfp>
 804d14c:	6060      	str	r0, [r4, #4]
 804d14e:	4620      	mov	r0, r4
 804d150:	f000 f81c 	bl	804d18c <__sfp>
 804d154:	60a0      	str	r0, [r4, #8]
 804d156:	4620      	mov	r0, r4
 804d158:	f000 f818 	bl	804d18c <__sfp>
 804d15c:	2200      	movs	r2, #0
 804d15e:	60e0      	str	r0, [r4, #12]
 804d160:	2104      	movs	r1, #4
 804d162:	6860      	ldr	r0, [r4, #4]
 804d164:	f7ff ff82 	bl	804d06c <std>
 804d168:	68a0      	ldr	r0, [r4, #8]
 804d16a:	2201      	movs	r2, #1
 804d16c:	2109      	movs	r1, #9
 804d16e:	f7ff ff7d 	bl	804d06c <std>
 804d172:	68e0      	ldr	r0, [r4, #12]
 804d174:	2202      	movs	r2, #2
 804d176:	2112      	movs	r1, #18
 804d178:	f7ff ff78 	bl	804d06c <std>
 804d17c:	2301      	movs	r3, #1
 804d17e:	61a3      	str	r3, [r4, #24]
 804d180:	e7d2      	b.n	804d128 <__sinit+0xc>
 804d182:	bf00      	nop
 804d184:	0804e518 	.word	0x0804e518
 804d188:	0804d0b5 	.word	0x0804d0b5

0804d18c <__sfp>:
 804d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d18e:	4607      	mov	r7, r0
 804d190:	f7ff ffac 	bl	804d0ec <__sfp_lock_acquire>
 804d194:	4b1e      	ldr	r3, [pc, #120]	; (804d210 <__sfp+0x84>)
 804d196:	681e      	ldr	r6, [r3, #0]
 804d198:	69b3      	ldr	r3, [r6, #24]
 804d19a:	b913      	cbnz	r3, 804d1a2 <__sfp+0x16>
 804d19c:	4630      	mov	r0, r6
 804d19e:	f7ff ffbd 	bl	804d11c <__sinit>
 804d1a2:	3648      	adds	r6, #72	; 0x48
 804d1a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804d1a8:	3b01      	subs	r3, #1
 804d1aa:	d503      	bpl.n	804d1b4 <__sfp+0x28>
 804d1ac:	6833      	ldr	r3, [r6, #0]
 804d1ae:	b30b      	cbz	r3, 804d1f4 <__sfp+0x68>
 804d1b0:	6836      	ldr	r6, [r6, #0]
 804d1b2:	e7f7      	b.n	804d1a4 <__sfp+0x18>
 804d1b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804d1b8:	b9d5      	cbnz	r5, 804d1f0 <__sfp+0x64>
 804d1ba:	4b16      	ldr	r3, [pc, #88]	; (804d214 <__sfp+0x88>)
 804d1bc:	60e3      	str	r3, [r4, #12]
 804d1be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804d1c2:	6665      	str	r5, [r4, #100]	; 0x64
 804d1c4:	f000 f847 	bl	804d256 <__retarget_lock_init_recursive>
 804d1c8:	f7ff ff96 	bl	804d0f8 <__sfp_lock_release>
 804d1cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804d1d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804d1d4:	6025      	str	r5, [r4, #0]
 804d1d6:	61a5      	str	r5, [r4, #24]
 804d1d8:	2208      	movs	r2, #8
 804d1da:	4629      	mov	r1, r5
 804d1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804d1e0:	f7fb fcee 	bl	8048bc0 <memset>
 804d1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804d1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804d1ec:	4620      	mov	r0, r4
 804d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d1f0:	3468      	adds	r4, #104	; 0x68
 804d1f2:	e7d9      	b.n	804d1a8 <__sfp+0x1c>
 804d1f4:	2104      	movs	r1, #4
 804d1f6:	4638      	mov	r0, r7
 804d1f8:	f7ff ff62 	bl	804d0c0 <__sfmoreglue>
 804d1fc:	4604      	mov	r4, r0
 804d1fe:	6030      	str	r0, [r6, #0]
 804d200:	2800      	cmp	r0, #0
 804d202:	d1d5      	bne.n	804d1b0 <__sfp+0x24>
 804d204:	f7ff ff78 	bl	804d0f8 <__sfp_lock_release>
 804d208:	230c      	movs	r3, #12
 804d20a:	603b      	str	r3, [r7, #0]
 804d20c:	e7ee      	b.n	804d1ec <__sfp+0x60>
 804d20e:	bf00      	nop
 804d210:	0804e518 	.word	0x0804e518
 804d214:	ffff0001 	.word	0xffff0001

0804d218 <_fwalk_reent>:
 804d218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804d21c:	4606      	mov	r6, r0
 804d21e:	4688      	mov	r8, r1
 804d220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804d224:	2700      	movs	r7, #0
 804d226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804d22a:	f1b9 0901 	subs.w	r9, r9, #1
 804d22e:	d505      	bpl.n	804d23c <_fwalk_reent+0x24>
 804d230:	6824      	ldr	r4, [r4, #0]
 804d232:	2c00      	cmp	r4, #0
 804d234:	d1f7      	bne.n	804d226 <_fwalk_reent+0xe>
 804d236:	4638      	mov	r0, r7
 804d238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804d23c:	89ab      	ldrh	r3, [r5, #12]
 804d23e:	2b01      	cmp	r3, #1
 804d240:	d907      	bls.n	804d252 <_fwalk_reent+0x3a>
 804d242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804d246:	3301      	adds	r3, #1
 804d248:	d003      	beq.n	804d252 <_fwalk_reent+0x3a>
 804d24a:	4629      	mov	r1, r5
 804d24c:	4630      	mov	r0, r6
 804d24e:	47c0      	blx	r8
 804d250:	4307      	orrs	r7, r0
 804d252:	3568      	adds	r5, #104	; 0x68
 804d254:	e7e9      	b.n	804d22a <_fwalk_reent+0x12>

0804d256 <__retarget_lock_init_recursive>:
 804d256:	4770      	bx	lr

0804d258 <__retarget_lock_acquire_recursive>:
 804d258:	4770      	bx	lr

0804d25a <__retarget_lock_release_recursive>:
 804d25a:	4770      	bx	lr

0804d25c <__swhatbuf_r>:
 804d25c:	b570      	push	{r4, r5, r6, lr}
 804d25e:	460e      	mov	r6, r1
 804d260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d264:	2900      	cmp	r1, #0
 804d266:	b096      	sub	sp, #88	; 0x58
 804d268:	4614      	mov	r4, r2
 804d26a:	461d      	mov	r5, r3
 804d26c:	da08      	bge.n	804d280 <__swhatbuf_r+0x24>
 804d26e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804d272:	2200      	movs	r2, #0
 804d274:	602a      	str	r2, [r5, #0]
 804d276:	061a      	lsls	r2, r3, #24
 804d278:	d410      	bmi.n	804d29c <__swhatbuf_r+0x40>
 804d27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d27e:	e00e      	b.n	804d29e <__swhatbuf_r+0x42>
 804d280:	466a      	mov	r2, sp
 804d282:	f000 f903 	bl	804d48c <_fstat_r>
 804d286:	2800      	cmp	r0, #0
 804d288:	dbf1      	blt.n	804d26e <__swhatbuf_r+0x12>
 804d28a:	9a01      	ldr	r2, [sp, #4]
 804d28c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804d290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804d294:	425a      	negs	r2, r3
 804d296:	415a      	adcs	r2, r3
 804d298:	602a      	str	r2, [r5, #0]
 804d29a:	e7ee      	b.n	804d27a <__swhatbuf_r+0x1e>
 804d29c:	2340      	movs	r3, #64	; 0x40
 804d29e:	2000      	movs	r0, #0
 804d2a0:	6023      	str	r3, [r4, #0]
 804d2a2:	b016      	add	sp, #88	; 0x58
 804d2a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0804d2a8 <__smakebuf_r>:
 804d2a8:	898b      	ldrh	r3, [r1, #12]
 804d2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d2ac:	079d      	lsls	r5, r3, #30
 804d2ae:	4606      	mov	r6, r0
 804d2b0:	460c      	mov	r4, r1
 804d2b2:	d507      	bpl.n	804d2c4 <__smakebuf_r+0x1c>
 804d2b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d2b8:	6023      	str	r3, [r4, #0]
 804d2ba:	6123      	str	r3, [r4, #16]
 804d2bc:	2301      	movs	r3, #1
 804d2be:	6163      	str	r3, [r4, #20]
 804d2c0:	b002      	add	sp, #8
 804d2c2:	bd70      	pop	{r4, r5, r6, pc}
 804d2c4:	ab01      	add	r3, sp, #4
 804d2c6:	466a      	mov	r2, sp
 804d2c8:	f7ff ffc8 	bl	804d25c <__swhatbuf_r>
 804d2cc:	9900      	ldr	r1, [sp, #0]
 804d2ce:	4605      	mov	r5, r0
 804d2d0:	4630      	mov	r0, r6
 804d2d2:	f7ff f959 	bl	804c588 <_malloc_r>
 804d2d6:	b948      	cbnz	r0, 804d2ec <__smakebuf_r+0x44>
 804d2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d2dc:	059a      	lsls	r2, r3, #22
 804d2de:	d4ef      	bmi.n	804d2c0 <__smakebuf_r+0x18>
 804d2e0:	f023 0303 	bic.w	r3, r3, #3
 804d2e4:	f043 0302 	orr.w	r3, r3, #2
 804d2e8:	81a3      	strh	r3, [r4, #12]
 804d2ea:	e7e3      	b.n	804d2b4 <__smakebuf_r+0xc>
 804d2ec:	4b0d      	ldr	r3, [pc, #52]	; (804d324 <__smakebuf_r+0x7c>)
 804d2ee:	62b3      	str	r3, [r6, #40]	; 0x28
 804d2f0:	89a3      	ldrh	r3, [r4, #12]
 804d2f2:	6020      	str	r0, [r4, #0]
 804d2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d2f8:	81a3      	strh	r3, [r4, #12]
 804d2fa:	9b00      	ldr	r3, [sp, #0]
 804d2fc:	6163      	str	r3, [r4, #20]
 804d2fe:	9b01      	ldr	r3, [sp, #4]
 804d300:	6120      	str	r0, [r4, #16]
 804d302:	b15b      	cbz	r3, 804d31c <__smakebuf_r+0x74>
 804d304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d308:	4630      	mov	r0, r6
 804d30a:	f000 f8d1 	bl	804d4b0 <_isatty_r>
 804d30e:	b128      	cbz	r0, 804d31c <__smakebuf_r+0x74>
 804d310:	89a3      	ldrh	r3, [r4, #12]
 804d312:	f023 0303 	bic.w	r3, r3, #3
 804d316:	f043 0301 	orr.w	r3, r3, #1
 804d31a:	81a3      	strh	r3, [r4, #12]
 804d31c:	89a0      	ldrh	r0, [r4, #12]
 804d31e:	4305      	orrs	r5, r0
 804d320:	81a5      	strh	r5, [r4, #12]
 804d322:	e7cd      	b.n	804d2c0 <__smakebuf_r+0x18>
 804d324:	0804d0b5 	.word	0x0804d0b5

0804d328 <_malloc_usable_size_r>:
 804d328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804d32c:	1f18      	subs	r0, r3, #4
 804d32e:	2b00      	cmp	r3, #0
 804d330:	bfbc      	itt	lt
 804d332:	580b      	ldrlt	r3, [r1, r0]
 804d334:	18c0      	addlt	r0, r0, r3
 804d336:	4770      	bx	lr

0804d338 <_raise_r>:
 804d338:	291f      	cmp	r1, #31
 804d33a:	b538      	push	{r3, r4, r5, lr}
 804d33c:	4604      	mov	r4, r0
 804d33e:	460d      	mov	r5, r1
 804d340:	d904      	bls.n	804d34c <_raise_r+0x14>
 804d342:	2316      	movs	r3, #22
 804d344:	6003      	str	r3, [r0, #0]
 804d346:	f04f 30ff 	mov.w	r0, #4294967295
 804d34a:	bd38      	pop	{r3, r4, r5, pc}
 804d34c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 804d34e:	b112      	cbz	r2, 804d356 <_raise_r+0x1e>
 804d350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 804d354:	b94b      	cbnz	r3, 804d36a <_raise_r+0x32>
 804d356:	4620      	mov	r0, r4
 804d358:	f000 f830 	bl	804d3bc <_getpid_r>
 804d35c:	462a      	mov	r2, r5
 804d35e:	4601      	mov	r1, r0
 804d360:	4620      	mov	r0, r4
 804d362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804d366:	f000 b817 	b.w	804d398 <_kill_r>
 804d36a:	2b01      	cmp	r3, #1
 804d36c:	d00a      	beq.n	804d384 <_raise_r+0x4c>
 804d36e:	1c59      	adds	r1, r3, #1
 804d370:	d103      	bne.n	804d37a <_raise_r+0x42>
 804d372:	2316      	movs	r3, #22
 804d374:	6003      	str	r3, [r0, #0]
 804d376:	2001      	movs	r0, #1
 804d378:	e7e7      	b.n	804d34a <_raise_r+0x12>
 804d37a:	2400      	movs	r4, #0
 804d37c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 804d380:	4628      	mov	r0, r5
 804d382:	4798      	blx	r3
 804d384:	2000      	movs	r0, #0
 804d386:	e7e0      	b.n	804d34a <_raise_r+0x12>

0804d388 <raise>:
 804d388:	4b02      	ldr	r3, [pc, #8]	; (804d394 <raise+0xc>)
 804d38a:	4601      	mov	r1, r0
 804d38c:	6818      	ldr	r0, [r3, #0]
 804d38e:	f7ff bfd3 	b.w	804d338 <_raise_r>
 804d392:	bf00      	nop
 804d394:	20000014 	.word	0x20000014

0804d398 <_kill_r>:
 804d398:	b538      	push	{r3, r4, r5, lr}
 804d39a:	4d07      	ldr	r5, [pc, #28]	; (804d3b8 <_kill_r+0x20>)
 804d39c:	2300      	movs	r3, #0
 804d39e:	4604      	mov	r4, r0
 804d3a0:	4608      	mov	r0, r1
 804d3a2:	4611      	mov	r1, r2
 804d3a4:	602b      	str	r3, [r5, #0]
 804d3a6:	f7f7 fb83 	bl	8044ab0 <_kill>
 804d3aa:	1c43      	adds	r3, r0, #1
 804d3ac:	d102      	bne.n	804d3b4 <_kill_r+0x1c>
 804d3ae:	682b      	ldr	r3, [r5, #0]
 804d3b0:	b103      	cbz	r3, 804d3b4 <_kill_r+0x1c>
 804d3b2:	6023      	str	r3, [r4, #0]
 804d3b4:	bd38      	pop	{r3, r4, r5, pc}
 804d3b6:	bf00      	nop
 804d3b8:	2000023c 	.word	0x2000023c

0804d3bc <_getpid_r>:
 804d3bc:	f7f7 bb70 	b.w	8044aa0 <_getpid>

0804d3c0 <__sread>:
 804d3c0:	b510      	push	{r4, lr}
 804d3c2:	460c      	mov	r4, r1
 804d3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d3c8:	f000 f894 	bl	804d4f4 <_read_r>
 804d3cc:	2800      	cmp	r0, #0
 804d3ce:	bfab      	itete	ge
 804d3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804d3d2:	89a3      	ldrhlt	r3, [r4, #12]
 804d3d4:	181b      	addge	r3, r3, r0
 804d3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804d3da:	bfac      	ite	ge
 804d3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 804d3de:	81a3      	strhlt	r3, [r4, #12]
 804d3e0:	bd10      	pop	{r4, pc}

0804d3e2 <__swrite>:
 804d3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d3e6:	461f      	mov	r7, r3
 804d3e8:	898b      	ldrh	r3, [r1, #12]
 804d3ea:	05db      	lsls	r3, r3, #23
 804d3ec:	4605      	mov	r5, r0
 804d3ee:	460c      	mov	r4, r1
 804d3f0:	4616      	mov	r6, r2
 804d3f2:	d505      	bpl.n	804d400 <__swrite+0x1e>
 804d3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d3f8:	2302      	movs	r3, #2
 804d3fa:	2200      	movs	r2, #0
 804d3fc:	f000 f868 	bl	804d4d0 <_lseek_r>
 804d400:	89a3      	ldrh	r3, [r4, #12]
 804d402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804d40a:	81a3      	strh	r3, [r4, #12]
 804d40c:	4632      	mov	r2, r6
 804d40e:	463b      	mov	r3, r7
 804d410:	4628      	mov	r0, r5
 804d412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804d416:	f000 b817 	b.w	804d448 <_write_r>

0804d41a <__sseek>:
 804d41a:	b510      	push	{r4, lr}
 804d41c:	460c      	mov	r4, r1
 804d41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d422:	f000 f855 	bl	804d4d0 <_lseek_r>
 804d426:	1c43      	adds	r3, r0, #1
 804d428:	89a3      	ldrh	r3, [r4, #12]
 804d42a:	bf15      	itete	ne
 804d42c:	6560      	strne	r0, [r4, #84]	; 0x54
 804d42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804d432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804d436:	81a3      	strheq	r3, [r4, #12]
 804d438:	bf18      	it	ne
 804d43a:	81a3      	strhne	r3, [r4, #12]
 804d43c:	bd10      	pop	{r4, pc}

0804d43e <__sclose>:
 804d43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d442:	f000 b813 	b.w	804d46c <_close_r>
	...

0804d448 <_write_r>:
 804d448:	b538      	push	{r3, r4, r5, lr}
 804d44a:	4d07      	ldr	r5, [pc, #28]	; (804d468 <_write_r+0x20>)
 804d44c:	4604      	mov	r4, r0
 804d44e:	4608      	mov	r0, r1
 804d450:	4611      	mov	r1, r2
 804d452:	2200      	movs	r2, #0
 804d454:	602a      	str	r2, [r5, #0]
 804d456:	461a      	mov	r2, r3
 804d458:	f7f7 fb61 	bl	8044b1e <_write>
 804d45c:	1c43      	adds	r3, r0, #1
 804d45e:	d102      	bne.n	804d466 <_write_r+0x1e>
 804d460:	682b      	ldr	r3, [r5, #0]
 804d462:	b103      	cbz	r3, 804d466 <_write_r+0x1e>
 804d464:	6023      	str	r3, [r4, #0]
 804d466:	bd38      	pop	{r3, r4, r5, pc}
 804d468:	2000023c 	.word	0x2000023c

0804d46c <_close_r>:
 804d46c:	b538      	push	{r3, r4, r5, lr}
 804d46e:	4d06      	ldr	r5, [pc, #24]	; (804d488 <_close_r+0x1c>)
 804d470:	2300      	movs	r3, #0
 804d472:	4604      	mov	r4, r0
 804d474:	4608      	mov	r0, r1
 804d476:	602b      	str	r3, [r5, #0]
 804d478:	f7f7 fb6d 	bl	8044b56 <_close>
 804d47c:	1c43      	adds	r3, r0, #1
 804d47e:	d102      	bne.n	804d486 <_close_r+0x1a>
 804d480:	682b      	ldr	r3, [r5, #0]
 804d482:	b103      	cbz	r3, 804d486 <_close_r+0x1a>
 804d484:	6023      	str	r3, [r4, #0]
 804d486:	bd38      	pop	{r3, r4, r5, pc}
 804d488:	2000023c 	.word	0x2000023c

0804d48c <_fstat_r>:
 804d48c:	b538      	push	{r3, r4, r5, lr}
 804d48e:	4d07      	ldr	r5, [pc, #28]	; (804d4ac <_fstat_r+0x20>)
 804d490:	2300      	movs	r3, #0
 804d492:	4604      	mov	r4, r0
 804d494:	4608      	mov	r0, r1
 804d496:	4611      	mov	r1, r2
 804d498:	602b      	str	r3, [r5, #0]
 804d49a:	f7f7 fb68 	bl	8044b6e <_fstat>
 804d49e:	1c43      	adds	r3, r0, #1
 804d4a0:	d102      	bne.n	804d4a8 <_fstat_r+0x1c>
 804d4a2:	682b      	ldr	r3, [r5, #0]
 804d4a4:	b103      	cbz	r3, 804d4a8 <_fstat_r+0x1c>
 804d4a6:	6023      	str	r3, [r4, #0]
 804d4a8:	bd38      	pop	{r3, r4, r5, pc}
 804d4aa:	bf00      	nop
 804d4ac:	2000023c 	.word	0x2000023c

0804d4b0 <_isatty_r>:
 804d4b0:	b538      	push	{r3, r4, r5, lr}
 804d4b2:	4d06      	ldr	r5, [pc, #24]	; (804d4cc <_isatty_r+0x1c>)
 804d4b4:	2300      	movs	r3, #0
 804d4b6:	4604      	mov	r4, r0
 804d4b8:	4608      	mov	r0, r1
 804d4ba:	602b      	str	r3, [r5, #0]
 804d4bc:	f7f7 fb67 	bl	8044b8e <_isatty>
 804d4c0:	1c43      	adds	r3, r0, #1
 804d4c2:	d102      	bne.n	804d4ca <_isatty_r+0x1a>
 804d4c4:	682b      	ldr	r3, [r5, #0]
 804d4c6:	b103      	cbz	r3, 804d4ca <_isatty_r+0x1a>
 804d4c8:	6023      	str	r3, [r4, #0]
 804d4ca:	bd38      	pop	{r3, r4, r5, pc}
 804d4cc:	2000023c 	.word	0x2000023c

0804d4d0 <_lseek_r>:
 804d4d0:	b538      	push	{r3, r4, r5, lr}
 804d4d2:	4d07      	ldr	r5, [pc, #28]	; (804d4f0 <_lseek_r+0x20>)
 804d4d4:	4604      	mov	r4, r0
 804d4d6:	4608      	mov	r0, r1
 804d4d8:	4611      	mov	r1, r2
 804d4da:	2200      	movs	r2, #0
 804d4dc:	602a      	str	r2, [r5, #0]
 804d4de:	461a      	mov	r2, r3
 804d4e0:	f7f7 fb60 	bl	8044ba4 <_lseek>
 804d4e4:	1c43      	adds	r3, r0, #1
 804d4e6:	d102      	bne.n	804d4ee <_lseek_r+0x1e>
 804d4e8:	682b      	ldr	r3, [r5, #0]
 804d4ea:	b103      	cbz	r3, 804d4ee <_lseek_r+0x1e>
 804d4ec:	6023      	str	r3, [r4, #0]
 804d4ee:	bd38      	pop	{r3, r4, r5, pc}
 804d4f0:	2000023c 	.word	0x2000023c

0804d4f4 <_read_r>:
 804d4f4:	b538      	push	{r3, r4, r5, lr}
 804d4f6:	4d07      	ldr	r5, [pc, #28]	; (804d514 <_read_r+0x20>)
 804d4f8:	4604      	mov	r4, r0
 804d4fa:	4608      	mov	r0, r1
 804d4fc:	4611      	mov	r1, r2
 804d4fe:	2200      	movs	r2, #0
 804d500:	602a      	str	r2, [r5, #0]
 804d502:	461a      	mov	r2, r3
 804d504:	f7f7 faee 	bl	8044ae4 <_read>
 804d508:	1c43      	adds	r3, r0, #1
 804d50a:	d102      	bne.n	804d512 <_read_r+0x1e>
 804d50c:	682b      	ldr	r3, [r5, #0]
 804d50e:	b103      	cbz	r3, 804d512 <_read_r+0x1e>
 804d510:	6023      	str	r3, [r4, #0]
 804d512:	bd38      	pop	{r3, r4, r5, pc}
 804d514:	2000023c 	.word	0x2000023c

0804d518 <pow>:
 804d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d51a:	ed2d 8b02 	vpush	{d8}
 804d51e:	eeb0 8a40 	vmov.f32	s16, s0
 804d522:	eef0 8a60 	vmov.f32	s17, s1
 804d526:	ec55 4b11 	vmov	r4, r5, d1
 804d52a:	f000 f865 	bl	804d5f8 <__ieee754_pow>
 804d52e:	4622      	mov	r2, r4
 804d530:	462b      	mov	r3, r5
 804d532:	4620      	mov	r0, r4
 804d534:	4629      	mov	r1, r5
 804d536:	ec57 6b10 	vmov	r6, r7, d0
 804d53a:	f7f3 faf7 	bl	8040b2c <__aeabi_dcmpun>
 804d53e:	2800      	cmp	r0, #0
 804d540:	d13b      	bne.n	804d5ba <pow+0xa2>
 804d542:	ec51 0b18 	vmov	r0, r1, d8
 804d546:	2200      	movs	r2, #0
 804d548:	2300      	movs	r3, #0
 804d54a:	f7f3 fabd 	bl	8040ac8 <__aeabi_dcmpeq>
 804d54e:	b1b8      	cbz	r0, 804d580 <pow+0x68>
 804d550:	2200      	movs	r2, #0
 804d552:	2300      	movs	r3, #0
 804d554:	4620      	mov	r0, r4
 804d556:	4629      	mov	r1, r5
 804d558:	f7f3 fab6 	bl	8040ac8 <__aeabi_dcmpeq>
 804d55c:	2800      	cmp	r0, #0
 804d55e:	d146      	bne.n	804d5ee <pow+0xd6>
 804d560:	ec45 4b10 	vmov	d0, r4, r5
 804d564:	f000 fe61 	bl	804e22a <finite>
 804d568:	b338      	cbz	r0, 804d5ba <pow+0xa2>
 804d56a:	2200      	movs	r2, #0
 804d56c:	2300      	movs	r3, #0
 804d56e:	4620      	mov	r0, r4
 804d570:	4629      	mov	r1, r5
 804d572:	f7f3 fab3 	bl	8040adc <__aeabi_dcmplt>
 804d576:	b300      	cbz	r0, 804d5ba <pow+0xa2>
 804d578:	f7fb faea 	bl	8048b50 <__errno>
 804d57c:	2322      	movs	r3, #34	; 0x22
 804d57e:	e01b      	b.n	804d5b8 <pow+0xa0>
 804d580:	ec47 6b10 	vmov	d0, r6, r7
 804d584:	f000 fe51 	bl	804e22a <finite>
 804d588:	b9e0      	cbnz	r0, 804d5c4 <pow+0xac>
 804d58a:	eeb0 0a48 	vmov.f32	s0, s16
 804d58e:	eef0 0a68 	vmov.f32	s1, s17
 804d592:	f000 fe4a 	bl	804e22a <finite>
 804d596:	b1a8      	cbz	r0, 804d5c4 <pow+0xac>
 804d598:	ec45 4b10 	vmov	d0, r4, r5
 804d59c:	f000 fe45 	bl	804e22a <finite>
 804d5a0:	b180      	cbz	r0, 804d5c4 <pow+0xac>
 804d5a2:	4632      	mov	r2, r6
 804d5a4:	463b      	mov	r3, r7
 804d5a6:	4630      	mov	r0, r6
 804d5a8:	4639      	mov	r1, r7
 804d5aa:	f7f3 fabf 	bl	8040b2c <__aeabi_dcmpun>
 804d5ae:	2800      	cmp	r0, #0
 804d5b0:	d0e2      	beq.n	804d578 <pow+0x60>
 804d5b2:	f7fb facd 	bl	8048b50 <__errno>
 804d5b6:	2321      	movs	r3, #33	; 0x21
 804d5b8:	6003      	str	r3, [r0, #0]
 804d5ba:	ecbd 8b02 	vpop	{d8}
 804d5be:	ec47 6b10 	vmov	d0, r6, r7
 804d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d5c4:	2200      	movs	r2, #0
 804d5c6:	2300      	movs	r3, #0
 804d5c8:	4630      	mov	r0, r6
 804d5ca:	4639      	mov	r1, r7
 804d5cc:	f7f3 fa7c 	bl	8040ac8 <__aeabi_dcmpeq>
 804d5d0:	2800      	cmp	r0, #0
 804d5d2:	d0f2      	beq.n	804d5ba <pow+0xa2>
 804d5d4:	eeb0 0a48 	vmov.f32	s0, s16
 804d5d8:	eef0 0a68 	vmov.f32	s1, s17
 804d5dc:	f000 fe25 	bl	804e22a <finite>
 804d5e0:	2800      	cmp	r0, #0
 804d5e2:	d0ea      	beq.n	804d5ba <pow+0xa2>
 804d5e4:	ec45 4b10 	vmov	d0, r4, r5
 804d5e8:	f000 fe1f 	bl	804e22a <finite>
 804d5ec:	e7c3      	b.n	804d576 <pow+0x5e>
 804d5ee:	4f01      	ldr	r7, [pc, #4]	; (804d5f4 <pow+0xdc>)
 804d5f0:	2600      	movs	r6, #0
 804d5f2:	e7e2      	b.n	804d5ba <pow+0xa2>
 804d5f4:	3ff00000 	.word	0x3ff00000

0804d5f8 <__ieee754_pow>:
 804d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d5fc:	ed2d 8b06 	vpush	{d8-d10}
 804d600:	b089      	sub	sp, #36	; 0x24
 804d602:	ed8d 1b00 	vstr	d1, [sp]
 804d606:	e9dd 2900 	ldrd	r2, r9, [sp]
 804d60a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 804d60e:	ea58 0102 	orrs.w	r1, r8, r2
 804d612:	ec57 6b10 	vmov	r6, r7, d0
 804d616:	d115      	bne.n	804d644 <__ieee754_pow+0x4c>
 804d618:	19b3      	adds	r3, r6, r6
 804d61a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 804d61e:	4152      	adcs	r2, r2
 804d620:	4299      	cmp	r1, r3
 804d622:	4b89      	ldr	r3, [pc, #548]	; (804d848 <__ieee754_pow+0x250>)
 804d624:	4193      	sbcs	r3, r2
 804d626:	f080 84d2 	bcs.w	804dfce <__ieee754_pow+0x9d6>
 804d62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 804d62e:	4630      	mov	r0, r6
 804d630:	4639      	mov	r1, r7
 804d632:	f7f2 fe2b 	bl	804028c <__adddf3>
 804d636:	ec41 0b10 	vmov	d0, r0, r1
 804d63a:	b009      	add	sp, #36	; 0x24
 804d63c:	ecbd 8b06 	vpop	{d8-d10}
 804d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d644:	4b81      	ldr	r3, [pc, #516]	; (804d84c <__ieee754_pow+0x254>)
 804d646:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 804d64a:	429c      	cmp	r4, r3
 804d64c:	ee10 aa10 	vmov	sl, s0
 804d650:	463d      	mov	r5, r7
 804d652:	dc06      	bgt.n	804d662 <__ieee754_pow+0x6a>
 804d654:	d101      	bne.n	804d65a <__ieee754_pow+0x62>
 804d656:	2e00      	cmp	r6, #0
 804d658:	d1e7      	bne.n	804d62a <__ieee754_pow+0x32>
 804d65a:	4598      	cmp	r8, r3
 804d65c:	dc01      	bgt.n	804d662 <__ieee754_pow+0x6a>
 804d65e:	d10f      	bne.n	804d680 <__ieee754_pow+0x88>
 804d660:	b172      	cbz	r2, 804d680 <__ieee754_pow+0x88>
 804d662:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 804d666:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 804d66a:	ea55 050a 	orrs.w	r5, r5, sl
 804d66e:	d1dc      	bne.n	804d62a <__ieee754_pow+0x32>
 804d670:	e9dd 3200 	ldrd	r3, r2, [sp]
 804d674:	18db      	adds	r3, r3, r3
 804d676:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 804d67a:	4152      	adcs	r2, r2
 804d67c:	429d      	cmp	r5, r3
 804d67e:	e7d0      	b.n	804d622 <__ieee754_pow+0x2a>
 804d680:	2d00      	cmp	r5, #0
 804d682:	da3b      	bge.n	804d6fc <__ieee754_pow+0x104>
 804d684:	4b72      	ldr	r3, [pc, #456]	; (804d850 <__ieee754_pow+0x258>)
 804d686:	4598      	cmp	r8, r3
 804d688:	dc51      	bgt.n	804d72e <__ieee754_pow+0x136>
 804d68a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 804d68e:	4598      	cmp	r8, r3
 804d690:	f340 84ac 	ble.w	804dfec <__ieee754_pow+0x9f4>
 804d694:	ea4f 5328 	mov.w	r3, r8, asr #20
 804d698:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804d69c:	2b14      	cmp	r3, #20
 804d69e:	dd0f      	ble.n	804d6c0 <__ieee754_pow+0xc8>
 804d6a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 804d6a4:	fa22 f103 	lsr.w	r1, r2, r3
 804d6a8:	fa01 f303 	lsl.w	r3, r1, r3
 804d6ac:	4293      	cmp	r3, r2
 804d6ae:	f040 849d 	bne.w	804dfec <__ieee754_pow+0x9f4>
 804d6b2:	f001 0101 	and.w	r1, r1, #1
 804d6b6:	f1c1 0302 	rsb	r3, r1, #2
 804d6ba:	9304      	str	r3, [sp, #16]
 804d6bc:	b182      	cbz	r2, 804d6e0 <__ieee754_pow+0xe8>
 804d6be:	e05f      	b.n	804d780 <__ieee754_pow+0x188>
 804d6c0:	2a00      	cmp	r2, #0
 804d6c2:	d15b      	bne.n	804d77c <__ieee754_pow+0x184>
 804d6c4:	f1c3 0314 	rsb	r3, r3, #20
 804d6c8:	fa48 f103 	asr.w	r1, r8, r3
 804d6cc:	fa01 f303 	lsl.w	r3, r1, r3
 804d6d0:	4543      	cmp	r3, r8
 804d6d2:	f040 8488 	bne.w	804dfe6 <__ieee754_pow+0x9ee>
 804d6d6:	f001 0101 	and.w	r1, r1, #1
 804d6da:	f1c1 0302 	rsb	r3, r1, #2
 804d6de:	9304      	str	r3, [sp, #16]
 804d6e0:	4b5c      	ldr	r3, [pc, #368]	; (804d854 <__ieee754_pow+0x25c>)
 804d6e2:	4598      	cmp	r8, r3
 804d6e4:	d132      	bne.n	804d74c <__ieee754_pow+0x154>
 804d6e6:	f1b9 0f00 	cmp.w	r9, #0
 804d6ea:	f280 8478 	bge.w	804dfde <__ieee754_pow+0x9e6>
 804d6ee:	4959      	ldr	r1, [pc, #356]	; (804d854 <__ieee754_pow+0x25c>)
 804d6f0:	4632      	mov	r2, r6
 804d6f2:	463b      	mov	r3, r7
 804d6f4:	2000      	movs	r0, #0
 804d6f6:	f7f3 f8a9 	bl	804084c <__aeabi_ddiv>
 804d6fa:	e79c      	b.n	804d636 <__ieee754_pow+0x3e>
 804d6fc:	2300      	movs	r3, #0
 804d6fe:	9304      	str	r3, [sp, #16]
 804d700:	2a00      	cmp	r2, #0
 804d702:	d13d      	bne.n	804d780 <__ieee754_pow+0x188>
 804d704:	4b51      	ldr	r3, [pc, #324]	; (804d84c <__ieee754_pow+0x254>)
 804d706:	4598      	cmp	r8, r3
 804d708:	d1ea      	bne.n	804d6e0 <__ieee754_pow+0xe8>
 804d70a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 804d70e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 804d712:	ea53 030a 	orrs.w	r3, r3, sl
 804d716:	f000 845a 	beq.w	804dfce <__ieee754_pow+0x9d6>
 804d71a:	4b4f      	ldr	r3, [pc, #316]	; (804d858 <__ieee754_pow+0x260>)
 804d71c:	429c      	cmp	r4, r3
 804d71e:	dd08      	ble.n	804d732 <__ieee754_pow+0x13a>
 804d720:	f1b9 0f00 	cmp.w	r9, #0
 804d724:	f2c0 8457 	blt.w	804dfd6 <__ieee754_pow+0x9de>
 804d728:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d72c:	e783      	b.n	804d636 <__ieee754_pow+0x3e>
 804d72e:	2302      	movs	r3, #2
 804d730:	e7e5      	b.n	804d6fe <__ieee754_pow+0x106>
 804d732:	f1b9 0f00 	cmp.w	r9, #0
 804d736:	f04f 0000 	mov.w	r0, #0
 804d73a:	f04f 0100 	mov.w	r1, #0
 804d73e:	f6bf af7a 	bge.w	804d636 <__ieee754_pow+0x3e>
 804d742:	e9dd 0300 	ldrd	r0, r3, [sp]
 804d746:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 804d74a:	e774      	b.n	804d636 <__ieee754_pow+0x3e>
 804d74c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 804d750:	d106      	bne.n	804d760 <__ieee754_pow+0x168>
 804d752:	4632      	mov	r2, r6
 804d754:	463b      	mov	r3, r7
 804d756:	4630      	mov	r0, r6
 804d758:	4639      	mov	r1, r7
 804d75a:	f7f2 ff4d 	bl	80405f8 <__aeabi_dmul>
 804d75e:	e76a      	b.n	804d636 <__ieee754_pow+0x3e>
 804d760:	4b3e      	ldr	r3, [pc, #248]	; (804d85c <__ieee754_pow+0x264>)
 804d762:	4599      	cmp	r9, r3
 804d764:	d10c      	bne.n	804d780 <__ieee754_pow+0x188>
 804d766:	2d00      	cmp	r5, #0
 804d768:	db0a      	blt.n	804d780 <__ieee754_pow+0x188>
 804d76a:	ec47 6b10 	vmov	d0, r6, r7
 804d76e:	b009      	add	sp, #36	; 0x24
 804d770:	ecbd 8b06 	vpop	{d8-d10}
 804d774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d778:	f000 bc6c 	b.w	804e054 <__ieee754_sqrt>
 804d77c:	2300      	movs	r3, #0
 804d77e:	9304      	str	r3, [sp, #16]
 804d780:	ec47 6b10 	vmov	d0, r6, r7
 804d784:	f000 fd48 	bl	804e218 <fabs>
 804d788:	ec51 0b10 	vmov	r0, r1, d0
 804d78c:	f1ba 0f00 	cmp.w	sl, #0
 804d790:	d129      	bne.n	804d7e6 <__ieee754_pow+0x1ee>
 804d792:	b124      	cbz	r4, 804d79e <__ieee754_pow+0x1a6>
 804d794:	4b2f      	ldr	r3, [pc, #188]	; (804d854 <__ieee754_pow+0x25c>)
 804d796:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 804d79a:	429a      	cmp	r2, r3
 804d79c:	d123      	bne.n	804d7e6 <__ieee754_pow+0x1ee>
 804d79e:	f1b9 0f00 	cmp.w	r9, #0
 804d7a2:	da05      	bge.n	804d7b0 <__ieee754_pow+0x1b8>
 804d7a4:	4602      	mov	r2, r0
 804d7a6:	460b      	mov	r3, r1
 804d7a8:	2000      	movs	r0, #0
 804d7aa:	492a      	ldr	r1, [pc, #168]	; (804d854 <__ieee754_pow+0x25c>)
 804d7ac:	f7f3 f84e 	bl	804084c <__aeabi_ddiv>
 804d7b0:	2d00      	cmp	r5, #0
 804d7b2:	f6bf af40 	bge.w	804d636 <__ieee754_pow+0x3e>
 804d7b6:	9b04      	ldr	r3, [sp, #16]
 804d7b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 804d7bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 804d7c0:	4323      	orrs	r3, r4
 804d7c2:	d108      	bne.n	804d7d6 <__ieee754_pow+0x1de>
 804d7c4:	4602      	mov	r2, r0
 804d7c6:	460b      	mov	r3, r1
 804d7c8:	4610      	mov	r0, r2
 804d7ca:	4619      	mov	r1, r3
 804d7cc:	f7f2 fd5c 	bl	8040288 <__aeabi_dsub>
 804d7d0:	4602      	mov	r2, r0
 804d7d2:	460b      	mov	r3, r1
 804d7d4:	e78f      	b.n	804d6f6 <__ieee754_pow+0xfe>
 804d7d6:	9b04      	ldr	r3, [sp, #16]
 804d7d8:	2b01      	cmp	r3, #1
 804d7da:	f47f af2c 	bne.w	804d636 <__ieee754_pow+0x3e>
 804d7de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804d7e2:	4619      	mov	r1, r3
 804d7e4:	e727      	b.n	804d636 <__ieee754_pow+0x3e>
 804d7e6:	0feb      	lsrs	r3, r5, #31
 804d7e8:	3b01      	subs	r3, #1
 804d7ea:	9306      	str	r3, [sp, #24]
 804d7ec:	9a06      	ldr	r2, [sp, #24]
 804d7ee:	9b04      	ldr	r3, [sp, #16]
 804d7f0:	4313      	orrs	r3, r2
 804d7f2:	d102      	bne.n	804d7fa <__ieee754_pow+0x202>
 804d7f4:	4632      	mov	r2, r6
 804d7f6:	463b      	mov	r3, r7
 804d7f8:	e7e6      	b.n	804d7c8 <__ieee754_pow+0x1d0>
 804d7fa:	4b19      	ldr	r3, [pc, #100]	; (804d860 <__ieee754_pow+0x268>)
 804d7fc:	4598      	cmp	r8, r3
 804d7fe:	f340 80fb 	ble.w	804d9f8 <__ieee754_pow+0x400>
 804d802:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 804d806:	4598      	cmp	r8, r3
 804d808:	4b13      	ldr	r3, [pc, #76]	; (804d858 <__ieee754_pow+0x260>)
 804d80a:	dd0c      	ble.n	804d826 <__ieee754_pow+0x22e>
 804d80c:	429c      	cmp	r4, r3
 804d80e:	dc0f      	bgt.n	804d830 <__ieee754_pow+0x238>
 804d810:	f1b9 0f00 	cmp.w	r9, #0
 804d814:	da0f      	bge.n	804d836 <__ieee754_pow+0x23e>
 804d816:	2000      	movs	r0, #0
 804d818:	b009      	add	sp, #36	; 0x24
 804d81a:	ecbd 8b06 	vpop	{d8-d10}
 804d81e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d822:	f000 bcf0 	b.w	804e206 <__math_oflow>
 804d826:	429c      	cmp	r4, r3
 804d828:	dbf2      	blt.n	804d810 <__ieee754_pow+0x218>
 804d82a:	4b0a      	ldr	r3, [pc, #40]	; (804d854 <__ieee754_pow+0x25c>)
 804d82c:	429c      	cmp	r4, r3
 804d82e:	dd19      	ble.n	804d864 <__ieee754_pow+0x26c>
 804d830:	f1b9 0f00 	cmp.w	r9, #0
 804d834:	dcef      	bgt.n	804d816 <__ieee754_pow+0x21e>
 804d836:	2000      	movs	r0, #0
 804d838:	b009      	add	sp, #36	; 0x24
 804d83a:	ecbd 8b06 	vpop	{d8-d10}
 804d83e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d842:	f000 bcd7 	b.w	804e1f4 <__math_uflow>
 804d846:	bf00      	nop
 804d848:	fff00000 	.word	0xfff00000
 804d84c:	7ff00000 	.word	0x7ff00000
 804d850:	433fffff 	.word	0x433fffff
 804d854:	3ff00000 	.word	0x3ff00000
 804d858:	3fefffff 	.word	0x3fefffff
 804d85c:	3fe00000 	.word	0x3fe00000
 804d860:	41e00000 	.word	0x41e00000
 804d864:	4b60      	ldr	r3, [pc, #384]	; (804d9e8 <__ieee754_pow+0x3f0>)
 804d866:	2200      	movs	r2, #0
 804d868:	f7f2 fd0e 	bl	8040288 <__aeabi_dsub>
 804d86c:	a354      	add	r3, pc, #336	; (adr r3, 804d9c0 <__ieee754_pow+0x3c8>)
 804d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d872:	4604      	mov	r4, r0
 804d874:	460d      	mov	r5, r1
 804d876:	f7f2 febf 	bl	80405f8 <__aeabi_dmul>
 804d87a:	a353      	add	r3, pc, #332	; (adr r3, 804d9c8 <__ieee754_pow+0x3d0>)
 804d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d880:	4606      	mov	r6, r0
 804d882:	460f      	mov	r7, r1
 804d884:	4620      	mov	r0, r4
 804d886:	4629      	mov	r1, r5
 804d888:	f7f2 feb6 	bl	80405f8 <__aeabi_dmul>
 804d88c:	4b57      	ldr	r3, [pc, #348]	; (804d9ec <__ieee754_pow+0x3f4>)
 804d88e:	4682      	mov	sl, r0
 804d890:	468b      	mov	fp, r1
 804d892:	2200      	movs	r2, #0
 804d894:	4620      	mov	r0, r4
 804d896:	4629      	mov	r1, r5
 804d898:	f7f2 feae 	bl	80405f8 <__aeabi_dmul>
 804d89c:	4602      	mov	r2, r0
 804d89e:	460b      	mov	r3, r1
 804d8a0:	a14b      	add	r1, pc, #300	; (adr r1, 804d9d0 <__ieee754_pow+0x3d8>)
 804d8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d8a6:	f7f2 fcef 	bl	8040288 <__aeabi_dsub>
 804d8aa:	4622      	mov	r2, r4
 804d8ac:	462b      	mov	r3, r5
 804d8ae:	f7f2 fea3 	bl	80405f8 <__aeabi_dmul>
 804d8b2:	4602      	mov	r2, r0
 804d8b4:	460b      	mov	r3, r1
 804d8b6:	2000      	movs	r0, #0
 804d8b8:	494d      	ldr	r1, [pc, #308]	; (804d9f0 <__ieee754_pow+0x3f8>)
 804d8ba:	f7f2 fce5 	bl	8040288 <__aeabi_dsub>
 804d8be:	4622      	mov	r2, r4
 804d8c0:	4680      	mov	r8, r0
 804d8c2:	4689      	mov	r9, r1
 804d8c4:	462b      	mov	r3, r5
 804d8c6:	4620      	mov	r0, r4
 804d8c8:	4629      	mov	r1, r5
 804d8ca:	f7f2 fe95 	bl	80405f8 <__aeabi_dmul>
 804d8ce:	4602      	mov	r2, r0
 804d8d0:	460b      	mov	r3, r1
 804d8d2:	4640      	mov	r0, r8
 804d8d4:	4649      	mov	r1, r9
 804d8d6:	f7f2 fe8f 	bl	80405f8 <__aeabi_dmul>
 804d8da:	a33f      	add	r3, pc, #252	; (adr r3, 804d9d8 <__ieee754_pow+0x3e0>)
 804d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d8e0:	f7f2 fe8a 	bl	80405f8 <__aeabi_dmul>
 804d8e4:	4602      	mov	r2, r0
 804d8e6:	460b      	mov	r3, r1
 804d8e8:	4650      	mov	r0, sl
 804d8ea:	4659      	mov	r1, fp
 804d8ec:	f7f2 fccc 	bl	8040288 <__aeabi_dsub>
 804d8f0:	4602      	mov	r2, r0
 804d8f2:	460b      	mov	r3, r1
 804d8f4:	4680      	mov	r8, r0
 804d8f6:	4689      	mov	r9, r1
 804d8f8:	4630      	mov	r0, r6
 804d8fa:	4639      	mov	r1, r7
 804d8fc:	f7f2 fcc6 	bl	804028c <__adddf3>
 804d900:	2000      	movs	r0, #0
 804d902:	4632      	mov	r2, r6
 804d904:	463b      	mov	r3, r7
 804d906:	4604      	mov	r4, r0
 804d908:	460d      	mov	r5, r1
 804d90a:	f7f2 fcbd 	bl	8040288 <__aeabi_dsub>
 804d90e:	4602      	mov	r2, r0
 804d910:	460b      	mov	r3, r1
 804d912:	4640      	mov	r0, r8
 804d914:	4649      	mov	r1, r9
 804d916:	f7f2 fcb7 	bl	8040288 <__aeabi_dsub>
 804d91a:	9b04      	ldr	r3, [sp, #16]
 804d91c:	9a06      	ldr	r2, [sp, #24]
 804d91e:	3b01      	subs	r3, #1
 804d920:	4313      	orrs	r3, r2
 804d922:	4682      	mov	sl, r0
 804d924:	468b      	mov	fp, r1
 804d926:	f040 81e7 	bne.w	804dcf8 <__ieee754_pow+0x700>
 804d92a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 804d9e0 <__ieee754_pow+0x3e8>
 804d92e:	eeb0 8a47 	vmov.f32	s16, s14
 804d932:	eef0 8a67 	vmov.f32	s17, s15
 804d936:	e9dd 6700 	ldrd	r6, r7, [sp]
 804d93a:	2600      	movs	r6, #0
 804d93c:	4632      	mov	r2, r6
 804d93e:	463b      	mov	r3, r7
 804d940:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d944:	f7f2 fca0 	bl	8040288 <__aeabi_dsub>
 804d948:	4622      	mov	r2, r4
 804d94a:	462b      	mov	r3, r5
 804d94c:	f7f2 fe54 	bl	80405f8 <__aeabi_dmul>
 804d950:	e9dd 2300 	ldrd	r2, r3, [sp]
 804d954:	4680      	mov	r8, r0
 804d956:	4689      	mov	r9, r1
 804d958:	4650      	mov	r0, sl
 804d95a:	4659      	mov	r1, fp
 804d95c:	f7f2 fe4c 	bl	80405f8 <__aeabi_dmul>
 804d960:	4602      	mov	r2, r0
 804d962:	460b      	mov	r3, r1
 804d964:	4640      	mov	r0, r8
 804d966:	4649      	mov	r1, r9
 804d968:	f7f2 fc90 	bl	804028c <__adddf3>
 804d96c:	4632      	mov	r2, r6
 804d96e:	463b      	mov	r3, r7
 804d970:	4680      	mov	r8, r0
 804d972:	4689      	mov	r9, r1
 804d974:	4620      	mov	r0, r4
 804d976:	4629      	mov	r1, r5
 804d978:	f7f2 fe3e 	bl	80405f8 <__aeabi_dmul>
 804d97c:	460b      	mov	r3, r1
 804d97e:	4604      	mov	r4, r0
 804d980:	460d      	mov	r5, r1
 804d982:	4602      	mov	r2, r0
 804d984:	4649      	mov	r1, r9
 804d986:	4640      	mov	r0, r8
 804d988:	f7f2 fc80 	bl	804028c <__adddf3>
 804d98c:	4b19      	ldr	r3, [pc, #100]	; (804d9f4 <__ieee754_pow+0x3fc>)
 804d98e:	4299      	cmp	r1, r3
 804d990:	ec45 4b19 	vmov	d9, r4, r5
 804d994:	4606      	mov	r6, r0
 804d996:	460f      	mov	r7, r1
 804d998:	468b      	mov	fp, r1
 804d99a:	f340 82f1 	ble.w	804df80 <__ieee754_pow+0x988>
 804d99e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 804d9a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 804d9a6:	4303      	orrs	r3, r0
 804d9a8:	f000 81e4 	beq.w	804dd74 <__ieee754_pow+0x77c>
 804d9ac:	ec51 0b18 	vmov	r0, r1, d8
 804d9b0:	2200      	movs	r2, #0
 804d9b2:	2300      	movs	r3, #0
 804d9b4:	f7f3 f892 	bl	8040adc <__aeabi_dcmplt>
 804d9b8:	3800      	subs	r0, #0
 804d9ba:	bf18      	it	ne
 804d9bc:	2001      	movne	r0, #1
 804d9be:	e72b      	b.n	804d818 <__ieee754_pow+0x220>
 804d9c0:	60000000 	.word	0x60000000
 804d9c4:	3ff71547 	.word	0x3ff71547
 804d9c8:	f85ddf44 	.word	0xf85ddf44
 804d9cc:	3e54ae0b 	.word	0x3e54ae0b
 804d9d0:	55555555 	.word	0x55555555
 804d9d4:	3fd55555 	.word	0x3fd55555
 804d9d8:	652b82fe 	.word	0x652b82fe
 804d9dc:	3ff71547 	.word	0x3ff71547
 804d9e0:	00000000 	.word	0x00000000
 804d9e4:	bff00000 	.word	0xbff00000
 804d9e8:	3ff00000 	.word	0x3ff00000
 804d9ec:	3fd00000 	.word	0x3fd00000
 804d9f0:	3fe00000 	.word	0x3fe00000
 804d9f4:	408fffff 	.word	0x408fffff
 804d9f8:	4bd5      	ldr	r3, [pc, #852]	; (804dd50 <__ieee754_pow+0x758>)
 804d9fa:	402b      	ands	r3, r5
 804d9fc:	2200      	movs	r2, #0
 804d9fe:	b92b      	cbnz	r3, 804da0c <__ieee754_pow+0x414>
 804da00:	4bd4      	ldr	r3, [pc, #848]	; (804dd54 <__ieee754_pow+0x75c>)
 804da02:	f7f2 fdf9 	bl	80405f8 <__aeabi_dmul>
 804da06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 804da0a:	460c      	mov	r4, r1
 804da0c:	1523      	asrs	r3, r4, #20
 804da0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804da12:	4413      	add	r3, r2
 804da14:	9305      	str	r3, [sp, #20]
 804da16:	4bd0      	ldr	r3, [pc, #832]	; (804dd58 <__ieee754_pow+0x760>)
 804da18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 804da1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 804da20:	429c      	cmp	r4, r3
 804da22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 804da26:	dd08      	ble.n	804da3a <__ieee754_pow+0x442>
 804da28:	4bcc      	ldr	r3, [pc, #816]	; (804dd5c <__ieee754_pow+0x764>)
 804da2a:	429c      	cmp	r4, r3
 804da2c:	f340 8162 	ble.w	804dcf4 <__ieee754_pow+0x6fc>
 804da30:	9b05      	ldr	r3, [sp, #20]
 804da32:	3301      	adds	r3, #1
 804da34:	9305      	str	r3, [sp, #20]
 804da36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 804da3a:	2400      	movs	r4, #0
 804da3c:	00e3      	lsls	r3, r4, #3
 804da3e:	9307      	str	r3, [sp, #28]
 804da40:	4bc7      	ldr	r3, [pc, #796]	; (804dd60 <__ieee754_pow+0x768>)
 804da42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 804da46:	ed93 7b00 	vldr	d7, [r3]
 804da4a:	4629      	mov	r1, r5
 804da4c:	ec53 2b17 	vmov	r2, r3, d7
 804da50:	eeb0 9a47 	vmov.f32	s18, s14
 804da54:	eef0 9a67 	vmov.f32	s19, s15
 804da58:	4682      	mov	sl, r0
 804da5a:	f7f2 fc15 	bl	8040288 <__aeabi_dsub>
 804da5e:	4652      	mov	r2, sl
 804da60:	4606      	mov	r6, r0
 804da62:	460f      	mov	r7, r1
 804da64:	462b      	mov	r3, r5
 804da66:	ec51 0b19 	vmov	r0, r1, d9
 804da6a:	f7f2 fc0f 	bl	804028c <__adddf3>
 804da6e:	4602      	mov	r2, r0
 804da70:	460b      	mov	r3, r1
 804da72:	2000      	movs	r0, #0
 804da74:	49bb      	ldr	r1, [pc, #748]	; (804dd64 <__ieee754_pow+0x76c>)
 804da76:	f7f2 fee9 	bl	804084c <__aeabi_ddiv>
 804da7a:	ec41 0b1a 	vmov	d10, r0, r1
 804da7e:	4602      	mov	r2, r0
 804da80:	460b      	mov	r3, r1
 804da82:	4630      	mov	r0, r6
 804da84:	4639      	mov	r1, r7
 804da86:	f7f2 fdb7 	bl	80405f8 <__aeabi_dmul>
 804da8a:	2300      	movs	r3, #0
 804da8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804da90:	9302      	str	r3, [sp, #8]
 804da92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 804da96:	46ab      	mov	fp, r5
 804da98:	106d      	asrs	r5, r5, #1
 804da9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 804da9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 804daa2:	ec41 0b18 	vmov	d8, r0, r1
 804daa6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 804daaa:	2200      	movs	r2, #0
 804daac:	4640      	mov	r0, r8
 804daae:	4649      	mov	r1, r9
 804dab0:	4614      	mov	r4, r2
 804dab2:	461d      	mov	r5, r3
 804dab4:	f7f2 fda0 	bl	80405f8 <__aeabi_dmul>
 804dab8:	4602      	mov	r2, r0
 804daba:	460b      	mov	r3, r1
 804dabc:	4630      	mov	r0, r6
 804dabe:	4639      	mov	r1, r7
 804dac0:	f7f2 fbe2 	bl	8040288 <__aeabi_dsub>
 804dac4:	ec53 2b19 	vmov	r2, r3, d9
 804dac8:	4606      	mov	r6, r0
 804daca:	460f      	mov	r7, r1
 804dacc:	4620      	mov	r0, r4
 804dace:	4629      	mov	r1, r5
 804dad0:	f7f2 fbda 	bl	8040288 <__aeabi_dsub>
 804dad4:	4602      	mov	r2, r0
 804dad6:	460b      	mov	r3, r1
 804dad8:	4650      	mov	r0, sl
 804dada:	4659      	mov	r1, fp
 804dadc:	f7f2 fbd4 	bl	8040288 <__aeabi_dsub>
 804dae0:	4642      	mov	r2, r8
 804dae2:	464b      	mov	r3, r9
 804dae4:	f7f2 fd88 	bl	80405f8 <__aeabi_dmul>
 804dae8:	4602      	mov	r2, r0
 804daea:	460b      	mov	r3, r1
 804daec:	4630      	mov	r0, r6
 804daee:	4639      	mov	r1, r7
 804daf0:	f7f2 fbca 	bl	8040288 <__aeabi_dsub>
 804daf4:	ec53 2b1a 	vmov	r2, r3, d10
 804daf8:	f7f2 fd7e 	bl	80405f8 <__aeabi_dmul>
 804dafc:	ec53 2b18 	vmov	r2, r3, d8
 804db00:	ec41 0b19 	vmov	d9, r0, r1
 804db04:	ec51 0b18 	vmov	r0, r1, d8
 804db08:	f7f2 fd76 	bl	80405f8 <__aeabi_dmul>
 804db0c:	a37c      	add	r3, pc, #496	; (adr r3, 804dd00 <__ieee754_pow+0x708>)
 804db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db12:	4604      	mov	r4, r0
 804db14:	460d      	mov	r5, r1
 804db16:	f7f2 fd6f 	bl	80405f8 <__aeabi_dmul>
 804db1a:	a37b      	add	r3, pc, #492	; (adr r3, 804dd08 <__ieee754_pow+0x710>)
 804db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db20:	f7f2 fbb4 	bl	804028c <__adddf3>
 804db24:	4622      	mov	r2, r4
 804db26:	462b      	mov	r3, r5
 804db28:	f7f2 fd66 	bl	80405f8 <__aeabi_dmul>
 804db2c:	a378      	add	r3, pc, #480	; (adr r3, 804dd10 <__ieee754_pow+0x718>)
 804db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db32:	f7f2 fbab 	bl	804028c <__adddf3>
 804db36:	4622      	mov	r2, r4
 804db38:	462b      	mov	r3, r5
 804db3a:	f7f2 fd5d 	bl	80405f8 <__aeabi_dmul>
 804db3e:	a376      	add	r3, pc, #472	; (adr r3, 804dd18 <__ieee754_pow+0x720>)
 804db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db44:	f7f2 fba2 	bl	804028c <__adddf3>
 804db48:	4622      	mov	r2, r4
 804db4a:	462b      	mov	r3, r5
 804db4c:	f7f2 fd54 	bl	80405f8 <__aeabi_dmul>
 804db50:	a373      	add	r3, pc, #460	; (adr r3, 804dd20 <__ieee754_pow+0x728>)
 804db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db56:	f7f2 fb99 	bl	804028c <__adddf3>
 804db5a:	4622      	mov	r2, r4
 804db5c:	462b      	mov	r3, r5
 804db5e:	f7f2 fd4b 	bl	80405f8 <__aeabi_dmul>
 804db62:	a371      	add	r3, pc, #452	; (adr r3, 804dd28 <__ieee754_pow+0x730>)
 804db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 804db68:	f7f2 fb90 	bl	804028c <__adddf3>
 804db6c:	4622      	mov	r2, r4
 804db6e:	4606      	mov	r6, r0
 804db70:	460f      	mov	r7, r1
 804db72:	462b      	mov	r3, r5
 804db74:	4620      	mov	r0, r4
 804db76:	4629      	mov	r1, r5
 804db78:	f7f2 fd3e 	bl	80405f8 <__aeabi_dmul>
 804db7c:	4602      	mov	r2, r0
 804db7e:	460b      	mov	r3, r1
 804db80:	4630      	mov	r0, r6
 804db82:	4639      	mov	r1, r7
 804db84:	f7f2 fd38 	bl	80405f8 <__aeabi_dmul>
 804db88:	4642      	mov	r2, r8
 804db8a:	4604      	mov	r4, r0
 804db8c:	460d      	mov	r5, r1
 804db8e:	464b      	mov	r3, r9
 804db90:	ec51 0b18 	vmov	r0, r1, d8
 804db94:	f7f2 fb7a 	bl	804028c <__adddf3>
 804db98:	ec53 2b19 	vmov	r2, r3, d9
 804db9c:	f7f2 fd2c 	bl	80405f8 <__aeabi_dmul>
 804dba0:	4622      	mov	r2, r4
 804dba2:	462b      	mov	r3, r5
 804dba4:	f7f2 fb72 	bl	804028c <__adddf3>
 804dba8:	4642      	mov	r2, r8
 804dbaa:	4682      	mov	sl, r0
 804dbac:	468b      	mov	fp, r1
 804dbae:	464b      	mov	r3, r9
 804dbb0:	4640      	mov	r0, r8
 804dbb2:	4649      	mov	r1, r9
 804dbb4:	f7f2 fd20 	bl	80405f8 <__aeabi_dmul>
 804dbb8:	4b6b      	ldr	r3, [pc, #428]	; (804dd68 <__ieee754_pow+0x770>)
 804dbba:	2200      	movs	r2, #0
 804dbbc:	4606      	mov	r6, r0
 804dbbe:	460f      	mov	r7, r1
 804dbc0:	f7f2 fb64 	bl	804028c <__adddf3>
 804dbc4:	4652      	mov	r2, sl
 804dbc6:	465b      	mov	r3, fp
 804dbc8:	f7f2 fb60 	bl	804028c <__adddf3>
 804dbcc:	2000      	movs	r0, #0
 804dbce:	4604      	mov	r4, r0
 804dbd0:	460d      	mov	r5, r1
 804dbd2:	4602      	mov	r2, r0
 804dbd4:	460b      	mov	r3, r1
 804dbd6:	4640      	mov	r0, r8
 804dbd8:	4649      	mov	r1, r9
 804dbda:	f7f2 fd0d 	bl	80405f8 <__aeabi_dmul>
 804dbde:	4b62      	ldr	r3, [pc, #392]	; (804dd68 <__ieee754_pow+0x770>)
 804dbe0:	4680      	mov	r8, r0
 804dbe2:	4689      	mov	r9, r1
 804dbe4:	2200      	movs	r2, #0
 804dbe6:	4620      	mov	r0, r4
 804dbe8:	4629      	mov	r1, r5
 804dbea:	f7f2 fb4d 	bl	8040288 <__aeabi_dsub>
 804dbee:	4632      	mov	r2, r6
 804dbf0:	463b      	mov	r3, r7
 804dbf2:	f7f2 fb49 	bl	8040288 <__aeabi_dsub>
 804dbf6:	4602      	mov	r2, r0
 804dbf8:	460b      	mov	r3, r1
 804dbfa:	4650      	mov	r0, sl
 804dbfc:	4659      	mov	r1, fp
 804dbfe:	f7f2 fb43 	bl	8040288 <__aeabi_dsub>
 804dc02:	ec53 2b18 	vmov	r2, r3, d8
 804dc06:	f7f2 fcf7 	bl	80405f8 <__aeabi_dmul>
 804dc0a:	4622      	mov	r2, r4
 804dc0c:	4606      	mov	r6, r0
 804dc0e:	460f      	mov	r7, r1
 804dc10:	462b      	mov	r3, r5
 804dc12:	ec51 0b19 	vmov	r0, r1, d9
 804dc16:	f7f2 fcef 	bl	80405f8 <__aeabi_dmul>
 804dc1a:	4602      	mov	r2, r0
 804dc1c:	460b      	mov	r3, r1
 804dc1e:	4630      	mov	r0, r6
 804dc20:	4639      	mov	r1, r7
 804dc22:	f7f2 fb33 	bl	804028c <__adddf3>
 804dc26:	4606      	mov	r6, r0
 804dc28:	460f      	mov	r7, r1
 804dc2a:	4602      	mov	r2, r0
 804dc2c:	460b      	mov	r3, r1
 804dc2e:	4640      	mov	r0, r8
 804dc30:	4649      	mov	r1, r9
 804dc32:	f7f2 fb2b 	bl	804028c <__adddf3>
 804dc36:	a33e      	add	r3, pc, #248	; (adr r3, 804dd30 <__ieee754_pow+0x738>)
 804dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dc3c:	2000      	movs	r0, #0
 804dc3e:	4604      	mov	r4, r0
 804dc40:	460d      	mov	r5, r1
 804dc42:	f7f2 fcd9 	bl	80405f8 <__aeabi_dmul>
 804dc46:	4642      	mov	r2, r8
 804dc48:	ec41 0b18 	vmov	d8, r0, r1
 804dc4c:	464b      	mov	r3, r9
 804dc4e:	4620      	mov	r0, r4
 804dc50:	4629      	mov	r1, r5
 804dc52:	f7f2 fb19 	bl	8040288 <__aeabi_dsub>
 804dc56:	4602      	mov	r2, r0
 804dc58:	460b      	mov	r3, r1
 804dc5a:	4630      	mov	r0, r6
 804dc5c:	4639      	mov	r1, r7
 804dc5e:	f7f2 fb13 	bl	8040288 <__aeabi_dsub>
 804dc62:	a335      	add	r3, pc, #212	; (adr r3, 804dd38 <__ieee754_pow+0x740>)
 804dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dc68:	f7f2 fcc6 	bl	80405f8 <__aeabi_dmul>
 804dc6c:	a334      	add	r3, pc, #208	; (adr r3, 804dd40 <__ieee754_pow+0x748>)
 804dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dc72:	4606      	mov	r6, r0
 804dc74:	460f      	mov	r7, r1
 804dc76:	4620      	mov	r0, r4
 804dc78:	4629      	mov	r1, r5
 804dc7a:	f7f2 fcbd 	bl	80405f8 <__aeabi_dmul>
 804dc7e:	4602      	mov	r2, r0
 804dc80:	460b      	mov	r3, r1
 804dc82:	4630      	mov	r0, r6
 804dc84:	4639      	mov	r1, r7
 804dc86:	f7f2 fb01 	bl	804028c <__adddf3>
 804dc8a:	9a07      	ldr	r2, [sp, #28]
 804dc8c:	4b37      	ldr	r3, [pc, #220]	; (804dd6c <__ieee754_pow+0x774>)
 804dc8e:	4413      	add	r3, r2
 804dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dc94:	f7f2 fafa 	bl	804028c <__adddf3>
 804dc98:	4682      	mov	sl, r0
 804dc9a:	9805      	ldr	r0, [sp, #20]
 804dc9c:	468b      	mov	fp, r1
 804dc9e:	f7f2 fc41 	bl	8040524 <__aeabi_i2d>
 804dca2:	9a07      	ldr	r2, [sp, #28]
 804dca4:	4b32      	ldr	r3, [pc, #200]	; (804dd70 <__ieee754_pow+0x778>)
 804dca6:	4413      	add	r3, r2
 804dca8:	e9d3 8900 	ldrd	r8, r9, [r3]
 804dcac:	4606      	mov	r6, r0
 804dcae:	460f      	mov	r7, r1
 804dcb0:	4652      	mov	r2, sl
 804dcb2:	465b      	mov	r3, fp
 804dcb4:	ec51 0b18 	vmov	r0, r1, d8
 804dcb8:	f7f2 fae8 	bl	804028c <__adddf3>
 804dcbc:	4642      	mov	r2, r8
 804dcbe:	464b      	mov	r3, r9
 804dcc0:	f7f2 fae4 	bl	804028c <__adddf3>
 804dcc4:	4632      	mov	r2, r6
 804dcc6:	463b      	mov	r3, r7
 804dcc8:	f7f2 fae0 	bl	804028c <__adddf3>
 804dccc:	2000      	movs	r0, #0
 804dcce:	4632      	mov	r2, r6
 804dcd0:	463b      	mov	r3, r7
 804dcd2:	4604      	mov	r4, r0
 804dcd4:	460d      	mov	r5, r1
 804dcd6:	f7f2 fad7 	bl	8040288 <__aeabi_dsub>
 804dcda:	4642      	mov	r2, r8
 804dcdc:	464b      	mov	r3, r9
 804dcde:	f7f2 fad3 	bl	8040288 <__aeabi_dsub>
 804dce2:	ec53 2b18 	vmov	r2, r3, d8
 804dce6:	f7f2 facf 	bl	8040288 <__aeabi_dsub>
 804dcea:	4602      	mov	r2, r0
 804dcec:	460b      	mov	r3, r1
 804dcee:	4650      	mov	r0, sl
 804dcf0:	4659      	mov	r1, fp
 804dcf2:	e610      	b.n	804d916 <__ieee754_pow+0x31e>
 804dcf4:	2401      	movs	r4, #1
 804dcf6:	e6a1      	b.n	804da3c <__ieee754_pow+0x444>
 804dcf8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 804dd48 <__ieee754_pow+0x750>
 804dcfc:	e617      	b.n	804d92e <__ieee754_pow+0x336>
 804dcfe:	bf00      	nop
 804dd00:	4a454eef 	.word	0x4a454eef
 804dd04:	3fca7e28 	.word	0x3fca7e28
 804dd08:	93c9db65 	.word	0x93c9db65
 804dd0c:	3fcd864a 	.word	0x3fcd864a
 804dd10:	a91d4101 	.word	0xa91d4101
 804dd14:	3fd17460 	.word	0x3fd17460
 804dd18:	518f264d 	.word	0x518f264d
 804dd1c:	3fd55555 	.word	0x3fd55555
 804dd20:	db6fabff 	.word	0xdb6fabff
 804dd24:	3fdb6db6 	.word	0x3fdb6db6
 804dd28:	33333303 	.word	0x33333303
 804dd2c:	3fe33333 	.word	0x3fe33333
 804dd30:	e0000000 	.word	0xe0000000
 804dd34:	3feec709 	.word	0x3feec709
 804dd38:	dc3a03fd 	.word	0xdc3a03fd
 804dd3c:	3feec709 	.word	0x3feec709
 804dd40:	145b01f5 	.word	0x145b01f5
 804dd44:	be3e2fe0 	.word	0xbe3e2fe0
 804dd48:	00000000 	.word	0x00000000
 804dd4c:	3ff00000 	.word	0x3ff00000
 804dd50:	7ff00000 	.word	0x7ff00000
 804dd54:	43400000 	.word	0x43400000
 804dd58:	0003988e 	.word	0x0003988e
 804dd5c:	000bb679 	.word	0x000bb679
 804dd60:	0804e9e8 	.word	0x0804e9e8
 804dd64:	3ff00000 	.word	0x3ff00000
 804dd68:	40080000 	.word	0x40080000
 804dd6c:	0804ea08 	.word	0x0804ea08
 804dd70:	0804e9f8 	.word	0x0804e9f8
 804dd74:	a3b5      	add	r3, pc, #724	; (adr r3, 804e04c <__ieee754_pow+0xa54>)
 804dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dd7a:	4640      	mov	r0, r8
 804dd7c:	4649      	mov	r1, r9
 804dd7e:	f7f2 fa85 	bl	804028c <__adddf3>
 804dd82:	4622      	mov	r2, r4
 804dd84:	ec41 0b1a 	vmov	d10, r0, r1
 804dd88:	462b      	mov	r3, r5
 804dd8a:	4630      	mov	r0, r6
 804dd8c:	4639      	mov	r1, r7
 804dd8e:	f7f2 fa7b 	bl	8040288 <__aeabi_dsub>
 804dd92:	4602      	mov	r2, r0
 804dd94:	460b      	mov	r3, r1
 804dd96:	ec51 0b1a 	vmov	r0, r1, d10
 804dd9a:	f7f2 febd 	bl	8040b18 <__aeabi_dcmpgt>
 804dd9e:	2800      	cmp	r0, #0
 804dda0:	f47f ae04 	bne.w	804d9ac <__ieee754_pow+0x3b4>
 804dda4:	4aa4      	ldr	r2, [pc, #656]	; (804e038 <__ieee754_pow+0xa40>)
 804dda6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804ddaa:	4293      	cmp	r3, r2
 804ddac:	f340 8108 	ble.w	804dfc0 <__ieee754_pow+0x9c8>
 804ddb0:	151b      	asrs	r3, r3, #20
 804ddb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 804ddb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 804ddba:	fa4a f303 	asr.w	r3, sl, r3
 804ddbe:	445b      	add	r3, fp
 804ddc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 804ddc4:	4e9d      	ldr	r6, [pc, #628]	; (804e03c <__ieee754_pow+0xa44>)
 804ddc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 804ddca:	4116      	asrs	r6, r2
 804ddcc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 804ddd0:	2000      	movs	r0, #0
 804ddd2:	ea23 0106 	bic.w	r1, r3, r6
 804ddd6:	f1c2 0214 	rsb	r2, r2, #20
 804ddda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 804ddde:	fa4a fa02 	asr.w	sl, sl, r2
 804dde2:	f1bb 0f00 	cmp.w	fp, #0
 804dde6:	4602      	mov	r2, r0
 804dde8:	460b      	mov	r3, r1
 804ddea:	4620      	mov	r0, r4
 804ddec:	4629      	mov	r1, r5
 804ddee:	bfb8      	it	lt
 804ddf0:	f1ca 0a00 	rsblt	sl, sl, #0
 804ddf4:	f7f2 fa48 	bl	8040288 <__aeabi_dsub>
 804ddf8:	ec41 0b19 	vmov	d9, r0, r1
 804ddfc:	4642      	mov	r2, r8
 804ddfe:	464b      	mov	r3, r9
 804de00:	ec51 0b19 	vmov	r0, r1, d9
 804de04:	f7f2 fa42 	bl	804028c <__adddf3>
 804de08:	a37b      	add	r3, pc, #492	; (adr r3, 804dff8 <__ieee754_pow+0xa00>)
 804de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de0e:	2000      	movs	r0, #0
 804de10:	4604      	mov	r4, r0
 804de12:	460d      	mov	r5, r1
 804de14:	f7f2 fbf0 	bl	80405f8 <__aeabi_dmul>
 804de18:	ec53 2b19 	vmov	r2, r3, d9
 804de1c:	4606      	mov	r6, r0
 804de1e:	460f      	mov	r7, r1
 804de20:	4620      	mov	r0, r4
 804de22:	4629      	mov	r1, r5
 804de24:	f7f2 fa30 	bl	8040288 <__aeabi_dsub>
 804de28:	4602      	mov	r2, r0
 804de2a:	460b      	mov	r3, r1
 804de2c:	4640      	mov	r0, r8
 804de2e:	4649      	mov	r1, r9
 804de30:	f7f2 fa2a 	bl	8040288 <__aeabi_dsub>
 804de34:	a372      	add	r3, pc, #456	; (adr r3, 804e000 <__ieee754_pow+0xa08>)
 804de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de3a:	f7f2 fbdd 	bl	80405f8 <__aeabi_dmul>
 804de3e:	a372      	add	r3, pc, #456	; (adr r3, 804e008 <__ieee754_pow+0xa10>)
 804de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de44:	4680      	mov	r8, r0
 804de46:	4689      	mov	r9, r1
 804de48:	4620      	mov	r0, r4
 804de4a:	4629      	mov	r1, r5
 804de4c:	f7f2 fbd4 	bl	80405f8 <__aeabi_dmul>
 804de50:	4602      	mov	r2, r0
 804de52:	460b      	mov	r3, r1
 804de54:	4640      	mov	r0, r8
 804de56:	4649      	mov	r1, r9
 804de58:	f7f2 fa18 	bl	804028c <__adddf3>
 804de5c:	4604      	mov	r4, r0
 804de5e:	460d      	mov	r5, r1
 804de60:	4602      	mov	r2, r0
 804de62:	460b      	mov	r3, r1
 804de64:	4630      	mov	r0, r6
 804de66:	4639      	mov	r1, r7
 804de68:	f7f2 fa10 	bl	804028c <__adddf3>
 804de6c:	4632      	mov	r2, r6
 804de6e:	463b      	mov	r3, r7
 804de70:	4680      	mov	r8, r0
 804de72:	4689      	mov	r9, r1
 804de74:	f7f2 fa08 	bl	8040288 <__aeabi_dsub>
 804de78:	4602      	mov	r2, r0
 804de7a:	460b      	mov	r3, r1
 804de7c:	4620      	mov	r0, r4
 804de7e:	4629      	mov	r1, r5
 804de80:	f7f2 fa02 	bl	8040288 <__aeabi_dsub>
 804de84:	4642      	mov	r2, r8
 804de86:	4606      	mov	r6, r0
 804de88:	460f      	mov	r7, r1
 804de8a:	464b      	mov	r3, r9
 804de8c:	4640      	mov	r0, r8
 804de8e:	4649      	mov	r1, r9
 804de90:	f7f2 fbb2 	bl	80405f8 <__aeabi_dmul>
 804de94:	a35e      	add	r3, pc, #376	; (adr r3, 804e010 <__ieee754_pow+0xa18>)
 804de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 804de9a:	4604      	mov	r4, r0
 804de9c:	460d      	mov	r5, r1
 804de9e:	f7f2 fbab 	bl	80405f8 <__aeabi_dmul>
 804dea2:	a35d      	add	r3, pc, #372	; (adr r3, 804e018 <__ieee754_pow+0xa20>)
 804dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dea8:	f7f2 f9ee 	bl	8040288 <__aeabi_dsub>
 804deac:	4622      	mov	r2, r4
 804deae:	462b      	mov	r3, r5
 804deb0:	f7f2 fba2 	bl	80405f8 <__aeabi_dmul>
 804deb4:	a35a      	add	r3, pc, #360	; (adr r3, 804e020 <__ieee754_pow+0xa28>)
 804deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804deba:	f7f2 f9e7 	bl	804028c <__adddf3>
 804debe:	4622      	mov	r2, r4
 804dec0:	462b      	mov	r3, r5
 804dec2:	f7f2 fb99 	bl	80405f8 <__aeabi_dmul>
 804dec6:	a358      	add	r3, pc, #352	; (adr r3, 804e028 <__ieee754_pow+0xa30>)
 804dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 804decc:	f7f2 f9dc 	bl	8040288 <__aeabi_dsub>
 804ded0:	4622      	mov	r2, r4
 804ded2:	462b      	mov	r3, r5
 804ded4:	f7f2 fb90 	bl	80405f8 <__aeabi_dmul>
 804ded8:	a355      	add	r3, pc, #340	; (adr r3, 804e030 <__ieee754_pow+0xa38>)
 804deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 804dede:	f7f2 f9d5 	bl	804028c <__adddf3>
 804dee2:	4622      	mov	r2, r4
 804dee4:	462b      	mov	r3, r5
 804dee6:	f7f2 fb87 	bl	80405f8 <__aeabi_dmul>
 804deea:	4602      	mov	r2, r0
 804deec:	460b      	mov	r3, r1
 804deee:	4640      	mov	r0, r8
 804def0:	4649      	mov	r1, r9
 804def2:	f7f2 f9c9 	bl	8040288 <__aeabi_dsub>
 804def6:	4604      	mov	r4, r0
 804def8:	460d      	mov	r5, r1
 804defa:	4602      	mov	r2, r0
 804defc:	460b      	mov	r3, r1
 804defe:	4640      	mov	r0, r8
 804df00:	4649      	mov	r1, r9
 804df02:	f7f2 fb79 	bl	80405f8 <__aeabi_dmul>
 804df06:	2200      	movs	r2, #0
 804df08:	ec41 0b19 	vmov	d9, r0, r1
 804df0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804df10:	4620      	mov	r0, r4
 804df12:	4629      	mov	r1, r5
 804df14:	f7f2 f9b8 	bl	8040288 <__aeabi_dsub>
 804df18:	4602      	mov	r2, r0
 804df1a:	460b      	mov	r3, r1
 804df1c:	ec51 0b19 	vmov	r0, r1, d9
 804df20:	f7f2 fc94 	bl	804084c <__aeabi_ddiv>
 804df24:	4632      	mov	r2, r6
 804df26:	4604      	mov	r4, r0
 804df28:	460d      	mov	r5, r1
 804df2a:	463b      	mov	r3, r7
 804df2c:	4640      	mov	r0, r8
 804df2e:	4649      	mov	r1, r9
 804df30:	f7f2 fb62 	bl	80405f8 <__aeabi_dmul>
 804df34:	4632      	mov	r2, r6
 804df36:	463b      	mov	r3, r7
 804df38:	f7f2 f9a8 	bl	804028c <__adddf3>
 804df3c:	4602      	mov	r2, r0
 804df3e:	460b      	mov	r3, r1
 804df40:	4620      	mov	r0, r4
 804df42:	4629      	mov	r1, r5
 804df44:	f7f2 f9a0 	bl	8040288 <__aeabi_dsub>
 804df48:	4642      	mov	r2, r8
 804df4a:	464b      	mov	r3, r9
 804df4c:	f7f2 f99c 	bl	8040288 <__aeabi_dsub>
 804df50:	460b      	mov	r3, r1
 804df52:	4602      	mov	r2, r0
 804df54:	493a      	ldr	r1, [pc, #232]	; (804e040 <__ieee754_pow+0xa48>)
 804df56:	2000      	movs	r0, #0
 804df58:	f7f2 f996 	bl	8040288 <__aeabi_dsub>
 804df5c:	ec41 0b10 	vmov	d0, r0, r1
 804df60:	ee10 3a90 	vmov	r3, s1
 804df64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 804df68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804df6c:	da2b      	bge.n	804dfc6 <__ieee754_pow+0x9ce>
 804df6e:	4650      	mov	r0, sl
 804df70:	f000 f966 	bl	804e240 <scalbn>
 804df74:	ec51 0b10 	vmov	r0, r1, d0
 804df78:	ec53 2b18 	vmov	r2, r3, d8
 804df7c:	f7ff bbed 	b.w	804d75a <__ieee754_pow+0x162>
 804df80:	4b30      	ldr	r3, [pc, #192]	; (804e044 <__ieee754_pow+0xa4c>)
 804df82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 804df86:	429e      	cmp	r6, r3
 804df88:	f77f af0c 	ble.w	804dda4 <__ieee754_pow+0x7ac>
 804df8c:	4b2e      	ldr	r3, [pc, #184]	; (804e048 <__ieee754_pow+0xa50>)
 804df8e:	440b      	add	r3, r1
 804df90:	4303      	orrs	r3, r0
 804df92:	d009      	beq.n	804dfa8 <__ieee754_pow+0x9b0>
 804df94:	ec51 0b18 	vmov	r0, r1, d8
 804df98:	2200      	movs	r2, #0
 804df9a:	2300      	movs	r3, #0
 804df9c:	f7f2 fd9e 	bl	8040adc <__aeabi_dcmplt>
 804dfa0:	3800      	subs	r0, #0
 804dfa2:	bf18      	it	ne
 804dfa4:	2001      	movne	r0, #1
 804dfa6:	e447      	b.n	804d838 <__ieee754_pow+0x240>
 804dfa8:	4622      	mov	r2, r4
 804dfaa:	462b      	mov	r3, r5
 804dfac:	f7f2 f96c 	bl	8040288 <__aeabi_dsub>
 804dfb0:	4642      	mov	r2, r8
 804dfb2:	464b      	mov	r3, r9
 804dfb4:	f7f2 fda6 	bl	8040b04 <__aeabi_dcmpge>
 804dfb8:	2800      	cmp	r0, #0
 804dfba:	f43f aef3 	beq.w	804dda4 <__ieee754_pow+0x7ac>
 804dfbe:	e7e9      	b.n	804df94 <__ieee754_pow+0x99c>
 804dfc0:	f04f 0a00 	mov.w	sl, #0
 804dfc4:	e71a      	b.n	804ddfc <__ieee754_pow+0x804>
 804dfc6:	ec51 0b10 	vmov	r0, r1, d0
 804dfca:	4619      	mov	r1, r3
 804dfcc:	e7d4      	b.n	804df78 <__ieee754_pow+0x980>
 804dfce:	491c      	ldr	r1, [pc, #112]	; (804e040 <__ieee754_pow+0xa48>)
 804dfd0:	2000      	movs	r0, #0
 804dfd2:	f7ff bb30 	b.w	804d636 <__ieee754_pow+0x3e>
 804dfd6:	2000      	movs	r0, #0
 804dfd8:	2100      	movs	r1, #0
 804dfda:	f7ff bb2c 	b.w	804d636 <__ieee754_pow+0x3e>
 804dfde:	4630      	mov	r0, r6
 804dfe0:	4639      	mov	r1, r7
 804dfe2:	f7ff bb28 	b.w	804d636 <__ieee754_pow+0x3e>
 804dfe6:	9204      	str	r2, [sp, #16]
 804dfe8:	f7ff bb7a 	b.w	804d6e0 <__ieee754_pow+0xe8>
 804dfec:	2300      	movs	r3, #0
 804dfee:	f7ff bb64 	b.w	804d6ba <__ieee754_pow+0xc2>
 804dff2:	bf00      	nop
 804dff4:	f3af 8000 	nop.w
 804dff8:	00000000 	.word	0x00000000
 804dffc:	3fe62e43 	.word	0x3fe62e43
 804e000:	fefa39ef 	.word	0xfefa39ef
 804e004:	3fe62e42 	.word	0x3fe62e42
 804e008:	0ca86c39 	.word	0x0ca86c39
 804e00c:	be205c61 	.word	0xbe205c61
 804e010:	72bea4d0 	.word	0x72bea4d0
 804e014:	3e663769 	.word	0x3e663769
 804e018:	c5d26bf1 	.word	0xc5d26bf1
 804e01c:	3ebbbd41 	.word	0x3ebbbd41
 804e020:	af25de2c 	.word	0xaf25de2c
 804e024:	3f11566a 	.word	0x3f11566a
 804e028:	16bebd93 	.word	0x16bebd93
 804e02c:	3f66c16c 	.word	0x3f66c16c
 804e030:	5555553e 	.word	0x5555553e
 804e034:	3fc55555 	.word	0x3fc55555
 804e038:	3fe00000 	.word	0x3fe00000
 804e03c:	000fffff 	.word	0x000fffff
 804e040:	3ff00000 	.word	0x3ff00000
 804e044:	4090cbff 	.word	0x4090cbff
 804e048:	3f6f3400 	.word	0x3f6f3400
 804e04c:	652b82fe 	.word	0x652b82fe
 804e050:	3c971547 	.word	0x3c971547

0804e054 <__ieee754_sqrt>:
 804e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e058:	ec55 4b10 	vmov	r4, r5, d0
 804e05c:	4e55      	ldr	r6, [pc, #340]	; (804e1b4 <__ieee754_sqrt+0x160>)
 804e05e:	43ae      	bics	r6, r5
 804e060:	ee10 0a10 	vmov	r0, s0
 804e064:	ee10 3a10 	vmov	r3, s0
 804e068:	462a      	mov	r2, r5
 804e06a:	4629      	mov	r1, r5
 804e06c:	d110      	bne.n	804e090 <__ieee754_sqrt+0x3c>
 804e06e:	ee10 2a10 	vmov	r2, s0
 804e072:	462b      	mov	r3, r5
 804e074:	f7f2 fac0 	bl	80405f8 <__aeabi_dmul>
 804e078:	4602      	mov	r2, r0
 804e07a:	460b      	mov	r3, r1
 804e07c:	4620      	mov	r0, r4
 804e07e:	4629      	mov	r1, r5
 804e080:	f7f2 f904 	bl	804028c <__adddf3>
 804e084:	4604      	mov	r4, r0
 804e086:	460d      	mov	r5, r1
 804e088:	ec45 4b10 	vmov	d0, r4, r5
 804e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804e090:	2d00      	cmp	r5, #0
 804e092:	dc10      	bgt.n	804e0b6 <__ieee754_sqrt+0x62>
 804e094:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 804e098:	4330      	orrs	r0, r6
 804e09a:	d0f5      	beq.n	804e088 <__ieee754_sqrt+0x34>
 804e09c:	b15d      	cbz	r5, 804e0b6 <__ieee754_sqrt+0x62>
 804e09e:	ee10 2a10 	vmov	r2, s0
 804e0a2:	462b      	mov	r3, r5
 804e0a4:	ee10 0a10 	vmov	r0, s0
 804e0a8:	f7f2 f8ee 	bl	8040288 <__aeabi_dsub>
 804e0ac:	4602      	mov	r2, r0
 804e0ae:	460b      	mov	r3, r1
 804e0b0:	f7f2 fbcc 	bl	804084c <__aeabi_ddiv>
 804e0b4:	e7e6      	b.n	804e084 <__ieee754_sqrt+0x30>
 804e0b6:	1512      	asrs	r2, r2, #20
 804e0b8:	d074      	beq.n	804e1a4 <__ieee754_sqrt+0x150>
 804e0ba:	07d4      	lsls	r4, r2, #31
 804e0bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 804e0c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 804e0c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 804e0c8:	bf5e      	ittt	pl
 804e0ca:	0fda      	lsrpl	r2, r3, #31
 804e0cc:	005b      	lslpl	r3, r3, #1
 804e0ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 804e0d2:	2400      	movs	r4, #0
 804e0d4:	0fda      	lsrs	r2, r3, #31
 804e0d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 804e0da:	107f      	asrs	r7, r7, #1
 804e0dc:	005b      	lsls	r3, r3, #1
 804e0de:	2516      	movs	r5, #22
 804e0e0:	4620      	mov	r0, r4
 804e0e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 804e0e6:	1886      	adds	r6, r0, r2
 804e0e8:	428e      	cmp	r6, r1
 804e0ea:	bfde      	ittt	le
 804e0ec:	1b89      	suble	r1, r1, r6
 804e0ee:	18b0      	addle	r0, r6, r2
 804e0f0:	18a4      	addle	r4, r4, r2
 804e0f2:	0049      	lsls	r1, r1, #1
 804e0f4:	3d01      	subs	r5, #1
 804e0f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 804e0fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 804e0fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804e102:	d1f0      	bne.n	804e0e6 <__ieee754_sqrt+0x92>
 804e104:	462a      	mov	r2, r5
 804e106:	f04f 0e20 	mov.w	lr, #32
 804e10a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 804e10e:	4281      	cmp	r1, r0
 804e110:	eb06 0c05 	add.w	ip, r6, r5
 804e114:	dc02      	bgt.n	804e11c <__ieee754_sqrt+0xc8>
 804e116:	d113      	bne.n	804e140 <__ieee754_sqrt+0xec>
 804e118:	459c      	cmp	ip, r3
 804e11a:	d811      	bhi.n	804e140 <__ieee754_sqrt+0xec>
 804e11c:	f1bc 0f00 	cmp.w	ip, #0
 804e120:	eb0c 0506 	add.w	r5, ip, r6
 804e124:	da43      	bge.n	804e1ae <__ieee754_sqrt+0x15a>
 804e126:	2d00      	cmp	r5, #0
 804e128:	db41      	blt.n	804e1ae <__ieee754_sqrt+0x15a>
 804e12a:	f100 0801 	add.w	r8, r0, #1
 804e12e:	1a09      	subs	r1, r1, r0
 804e130:	459c      	cmp	ip, r3
 804e132:	bf88      	it	hi
 804e134:	f101 31ff 	addhi.w	r1, r1, #4294967295
 804e138:	eba3 030c 	sub.w	r3, r3, ip
 804e13c:	4432      	add	r2, r6
 804e13e:	4640      	mov	r0, r8
 804e140:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 804e144:	f1be 0e01 	subs.w	lr, lr, #1
 804e148:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 804e14c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804e150:	ea4f 0656 	mov.w	r6, r6, lsr #1
 804e154:	d1db      	bne.n	804e10e <__ieee754_sqrt+0xba>
 804e156:	430b      	orrs	r3, r1
 804e158:	d006      	beq.n	804e168 <__ieee754_sqrt+0x114>
 804e15a:	1c50      	adds	r0, r2, #1
 804e15c:	bf13      	iteet	ne
 804e15e:	3201      	addne	r2, #1
 804e160:	3401      	addeq	r4, #1
 804e162:	4672      	moveq	r2, lr
 804e164:	f022 0201 	bicne.w	r2, r2, #1
 804e168:	1063      	asrs	r3, r4, #1
 804e16a:	0852      	lsrs	r2, r2, #1
 804e16c:	07e1      	lsls	r1, r4, #31
 804e16e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 804e172:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 804e176:	bf48      	it	mi
 804e178:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 804e17c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 804e180:	4614      	mov	r4, r2
 804e182:	e781      	b.n	804e088 <__ieee754_sqrt+0x34>
 804e184:	0ad9      	lsrs	r1, r3, #11
 804e186:	3815      	subs	r0, #21
 804e188:	055b      	lsls	r3, r3, #21
 804e18a:	2900      	cmp	r1, #0
 804e18c:	d0fa      	beq.n	804e184 <__ieee754_sqrt+0x130>
 804e18e:	02cd      	lsls	r5, r1, #11
 804e190:	d50a      	bpl.n	804e1a8 <__ieee754_sqrt+0x154>
 804e192:	f1c2 0420 	rsb	r4, r2, #32
 804e196:	fa23 f404 	lsr.w	r4, r3, r4
 804e19a:	1e55      	subs	r5, r2, #1
 804e19c:	4093      	lsls	r3, r2
 804e19e:	4321      	orrs	r1, r4
 804e1a0:	1b42      	subs	r2, r0, r5
 804e1a2:	e78a      	b.n	804e0ba <__ieee754_sqrt+0x66>
 804e1a4:	4610      	mov	r0, r2
 804e1a6:	e7f0      	b.n	804e18a <__ieee754_sqrt+0x136>
 804e1a8:	0049      	lsls	r1, r1, #1
 804e1aa:	3201      	adds	r2, #1
 804e1ac:	e7ef      	b.n	804e18e <__ieee754_sqrt+0x13a>
 804e1ae:	4680      	mov	r8, r0
 804e1b0:	e7bd      	b.n	804e12e <__ieee754_sqrt+0xda>
 804e1b2:	bf00      	nop
 804e1b4:	7ff00000 	.word	0x7ff00000

0804e1b8 <with_errno>:
 804e1b8:	b570      	push	{r4, r5, r6, lr}
 804e1ba:	4604      	mov	r4, r0
 804e1bc:	460d      	mov	r5, r1
 804e1be:	4616      	mov	r6, r2
 804e1c0:	f7fa fcc6 	bl	8048b50 <__errno>
 804e1c4:	4629      	mov	r1, r5
 804e1c6:	6006      	str	r6, [r0, #0]
 804e1c8:	4620      	mov	r0, r4
 804e1ca:	bd70      	pop	{r4, r5, r6, pc}

0804e1cc <xflow>:
 804e1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804e1ce:	4614      	mov	r4, r2
 804e1d0:	461d      	mov	r5, r3
 804e1d2:	b108      	cbz	r0, 804e1d8 <xflow+0xc>
 804e1d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 804e1d8:	e9cd 2300 	strd	r2, r3, [sp]
 804e1dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 804e1e0:	4620      	mov	r0, r4
 804e1e2:	4629      	mov	r1, r5
 804e1e4:	f7f2 fa08 	bl	80405f8 <__aeabi_dmul>
 804e1e8:	2222      	movs	r2, #34	; 0x22
 804e1ea:	b003      	add	sp, #12
 804e1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804e1f0:	f7ff bfe2 	b.w	804e1b8 <with_errno>

0804e1f4 <__math_uflow>:
 804e1f4:	b508      	push	{r3, lr}
 804e1f6:	2200      	movs	r2, #0
 804e1f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 804e1fc:	f7ff ffe6 	bl	804e1cc <xflow>
 804e200:	ec41 0b10 	vmov	d0, r0, r1
 804e204:	bd08      	pop	{r3, pc}

0804e206 <__math_oflow>:
 804e206:	b508      	push	{r3, lr}
 804e208:	2200      	movs	r2, #0
 804e20a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 804e20e:	f7ff ffdd 	bl	804e1cc <xflow>
 804e212:	ec41 0b10 	vmov	d0, r0, r1
 804e216:	bd08      	pop	{r3, pc}

0804e218 <fabs>:
 804e218:	ec51 0b10 	vmov	r0, r1, d0
 804e21c:	ee10 2a10 	vmov	r2, s0
 804e220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 804e224:	ec43 2b10 	vmov	d0, r2, r3
 804e228:	4770      	bx	lr

0804e22a <finite>:
 804e22a:	b082      	sub	sp, #8
 804e22c:	ed8d 0b00 	vstr	d0, [sp]
 804e230:	9801      	ldr	r0, [sp, #4]
 804e232:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 804e236:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 804e23a:	0fc0      	lsrs	r0, r0, #31
 804e23c:	b002      	add	sp, #8
 804e23e:	4770      	bx	lr

0804e240 <scalbn>:
 804e240:	b570      	push	{r4, r5, r6, lr}
 804e242:	ec55 4b10 	vmov	r4, r5, d0
 804e246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 804e24a:	4606      	mov	r6, r0
 804e24c:	462b      	mov	r3, r5
 804e24e:	b99a      	cbnz	r2, 804e278 <scalbn+0x38>
 804e250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 804e254:	4323      	orrs	r3, r4
 804e256:	d036      	beq.n	804e2c6 <scalbn+0x86>
 804e258:	4b39      	ldr	r3, [pc, #228]	; (804e340 <scalbn+0x100>)
 804e25a:	4629      	mov	r1, r5
 804e25c:	ee10 0a10 	vmov	r0, s0
 804e260:	2200      	movs	r2, #0
 804e262:	f7f2 f9c9 	bl	80405f8 <__aeabi_dmul>
 804e266:	4b37      	ldr	r3, [pc, #220]	; (804e344 <scalbn+0x104>)
 804e268:	429e      	cmp	r6, r3
 804e26a:	4604      	mov	r4, r0
 804e26c:	460d      	mov	r5, r1
 804e26e:	da10      	bge.n	804e292 <scalbn+0x52>
 804e270:	a32b      	add	r3, pc, #172	; (adr r3, 804e320 <scalbn+0xe0>)
 804e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 804e276:	e03a      	b.n	804e2ee <scalbn+0xae>
 804e278:	f240 71ff 	movw	r1, #2047	; 0x7ff
 804e27c:	428a      	cmp	r2, r1
 804e27e:	d10c      	bne.n	804e29a <scalbn+0x5a>
 804e280:	ee10 2a10 	vmov	r2, s0
 804e284:	4620      	mov	r0, r4
 804e286:	4629      	mov	r1, r5
 804e288:	f7f2 f800 	bl	804028c <__adddf3>
 804e28c:	4604      	mov	r4, r0
 804e28e:	460d      	mov	r5, r1
 804e290:	e019      	b.n	804e2c6 <scalbn+0x86>
 804e292:	f3c1 520a 	ubfx	r2, r1, #20, #11
 804e296:	460b      	mov	r3, r1
 804e298:	3a36      	subs	r2, #54	; 0x36
 804e29a:	4432      	add	r2, r6
 804e29c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 804e2a0:	428a      	cmp	r2, r1
 804e2a2:	dd08      	ble.n	804e2b6 <scalbn+0x76>
 804e2a4:	2d00      	cmp	r5, #0
 804e2a6:	a120      	add	r1, pc, #128	; (adr r1, 804e328 <scalbn+0xe8>)
 804e2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 804e2ac:	da1c      	bge.n	804e2e8 <scalbn+0xa8>
 804e2ae:	a120      	add	r1, pc, #128	; (adr r1, 804e330 <scalbn+0xf0>)
 804e2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 804e2b4:	e018      	b.n	804e2e8 <scalbn+0xa8>
 804e2b6:	2a00      	cmp	r2, #0
 804e2b8:	dd08      	ble.n	804e2cc <scalbn+0x8c>
 804e2ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804e2be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804e2c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804e2c6:	ec45 4b10 	vmov	d0, r4, r5
 804e2ca:	bd70      	pop	{r4, r5, r6, pc}
 804e2cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 804e2d0:	da19      	bge.n	804e306 <scalbn+0xc6>
 804e2d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 804e2d6:	429e      	cmp	r6, r3
 804e2d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 804e2dc:	dd0a      	ble.n	804e2f4 <scalbn+0xb4>
 804e2de:	a112      	add	r1, pc, #72	; (adr r1, 804e328 <scalbn+0xe8>)
 804e2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 804e2e4:	2b00      	cmp	r3, #0
 804e2e6:	d1e2      	bne.n	804e2ae <scalbn+0x6e>
 804e2e8:	a30f      	add	r3, pc, #60	; (adr r3, 804e328 <scalbn+0xe8>)
 804e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 804e2ee:	f7f2 f983 	bl	80405f8 <__aeabi_dmul>
 804e2f2:	e7cb      	b.n	804e28c <scalbn+0x4c>
 804e2f4:	a10a      	add	r1, pc, #40	; (adr r1, 804e320 <scalbn+0xe0>)
 804e2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 804e2fa:	2b00      	cmp	r3, #0
 804e2fc:	d0b8      	beq.n	804e270 <scalbn+0x30>
 804e2fe:	a10e      	add	r1, pc, #56	; (adr r1, 804e338 <scalbn+0xf8>)
 804e300:	e9d1 0100 	ldrd	r0, r1, [r1]
 804e304:	e7b4      	b.n	804e270 <scalbn+0x30>
 804e306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804e30a:	3236      	adds	r2, #54	; 0x36
 804e30c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804e310:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 804e314:	4620      	mov	r0, r4
 804e316:	4b0c      	ldr	r3, [pc, #48]	; (804e348 <scalbn+0x108>)
 804e318:	2200      	movs	r2, #0
 804e31a:	e7e8      	b.n	804e2ee <scalbn+0xae>
 804e31c:	f3af 8000 	nop.w
 804e320:	c2f8f359 	.word	0xc2f8f359
 804e324:	01a56e1f 	.word	0x01a56e1f
 804e328:	8800759c 	.word	0x8800759c
 804e32c:	7e37e43c 	.word	0x7e37e43c
 804e330:	8800759c 	.word	0x8800759c
 804e334:	fe37e43c 	.word	0xfe37e43c
 804e338:	c2f8f359 	.word	0xc2f8f359
 804e33c:	81a56e1f 	.word	0x81a56e1f
 804e340:	43500000 	.word	0x43500000
 804e344:	ffff3cb0 	.word	0xffff3cb0
 804e348:	3c900000 	.word	0x3c900000

0804e34c <_init>:
 804e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e34e:	bf00      	nop
 804e350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e352:	bc08      	pop	{r3}
 804e354:	469e      	mov	lr, r3
 804e356:	4770      	bx	lr

0804e358 <_fini>:
 804e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e35a:	bf00      	nop
 804e35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e35e:	bc08      	pop	{r3}
 804e360:	469e      	mov	lr, r3
 804e362:	4770      	bx	lr

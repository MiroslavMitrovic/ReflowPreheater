
ReflowPreheater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d44c  08040190  08040190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0804d5e0  0804d5e0  0001d5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804dc88  0804dc88  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0804dc88  0804dc88  0001dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804dc90  0804dc90  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804dc90  0804dc90  0001dc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804dc94  0804dc94  0001dc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0804dc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          0000edb0  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000efa0  2000efa0  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001993f  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003220  00000000  00000000  00039b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0003cd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ff4  00000000  00000000  0003f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157e2  00000000  00000000  0006302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c0e  00000000  00000000  0007880e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c3  00000000  00000000  0014941c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006228  00000000  00000000  001494e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	; (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	; (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	; (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	200001f0 	.word	0x200001f0
 80401ac:	00000000 	.word	0x00000000
 80401b0:	0804d5c4 	.word	0x0804d5c4

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	; (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	; (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	; (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	200001f4 	.word	0x200001f4
 80401cc:	0804d5c4 	.word	0x0804d5c4

080401d0 <strlen>:
 80401d0:	4603      	mov	r3, r0
 80401d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401d6:	2a00      	cmp	r2, #0
 80401d8:	d1fb      	bne.n	80401d2 <strlen+0x2>
 80401da:	1a18      	subs	r0, r3, r0
 80401dc:	3801      	subs	r0, #1
 80401de:	4770      	bx	lr

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_drsub>:
 8040280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8040284:	e002      	b.n	804028c <__adddf3>
 8040286:	bf00      	nop

08040288 <__aeabi_dsub>:
 8040288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0804028c <__adddf3>:
 804028c:	b530      	push	{r4, r5, lr}
 804028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8040292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8040296:	ea94 0f05 	teq	r4, r5
 804029a:	bf08      	it	eq
 804029c:	ea90 0f02 	teqeq	r0, r2
 80402a0:	bf1f      	itttt	ne
 80402a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402b2:	f000 80e2 	beq.w	804047a <__adddf3+0x1ee>
 80402b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402be:	bfb8      	it	lt
 80402c0:	426d      	neglt	r5, r5
 80402c2:	dd0c      	ble.n	80402de <__adddf3+0x52>
 80402c4:	442c      	add	r4, r5
 80402c6:	ea80 0202 	eor.w	r2, r0, r2
 80402ca:	ea81 0303 	eor.w	r3, r1, r3
 80402ce:	ea82 0000 	eor.w	r0, r2, r0
 80402d2:	ea83 0101 	eor.w	r1, r3, r1
 80402d6:	ea80 0202 	eor.w	r2, r0, r2
 80402da:	ea81 0303 	eor.w	r3, r1, r3
 80402de:	2d36      	cmp	r5, #54	; 0x36
 80402e0:	bf88      	it	hi
 80402e2:	bd30      	pophi	{r4, r5, pc}
 80402e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402f4:	d002      	beq.n	80402fc <__adddf3+0x70>
 80402f6:	4240      	negs	r0, r0
 80402f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040308:	d002      	beq.n	8040310 <__adddf3+0x84>
 804030a:	4252      	negs	r2, r2
 804030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040310:	ea94 0f05 	teq	r4, r5
 8040314:	f000 80a7 	beq.w	8040466 <__adddf3+0x1da>
 8040318:	f1a4 0401 	sub.w	r4, r4, #1
 804031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040320:	db0d      	blt.n	804033e <__adddf3+0xb2>
 8040322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040326:	fa22 f205 	lsr.w	r2, r2, r5
 804032a:	1880      	adds	r0, r0, r2
 804032c:	f141 0100 	adc.w	r1, r1, #0
 8040330:	fa03 f20e 	lsl.w	r2, r3, lr
 8040334:	1880      	adds	r0, r0, r2
 8040336:	fa43 f305 	asr.w	r3, r3, r5
 804033a:	4159      	adcs	r1, r3
 804033c:	e00e      	b.n	804035c <__adddf3+0xd0>
 804033e:	f1a5 0520 	sub.w	r5, r5, #32
 8040342:	f10e 0e20 	add.w	lr, lr, #32
 8040346:	2a01      	cmp	r2, #1
 8040348:	fa03 fc0e 	lsl.w	ip, r3, lr
 804034c:	bf28      	it	cs
 804034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040352:	fa43 f305 	asr.w	r3, r3, r5
 8040356:	18c0      	adds	r0, r0, r3
 8040358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040360:	d507      	bpl.n	8040372 <__adddf3+0xe6>
 8040362:	f04f 0e00 	mov.w	lr, #0
 8040366:	f1dc 0c00 	rsbs	ip, ip, #0
 804036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040376:	d31b      	bcc.n	80403b0 <__adddf3+0x124>
 8040378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804037c:	d30c      	bcc.n	8040398 <__adddf3+0x10c>
 804037e:	0849      	lsrs	r1, r1, #1
 8040380:	ea5f 0030 	movs.w	r0, r0, rrx
 8040384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040388:	f104 0401 	add.w	r4, r4, #1
 804038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8040394:	f080 809a 	bcs.w	80404cc <__adddf3+0x240>
 8040398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 804039c:	bf08      	it	eq
 804039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403a2:	f150 0000 	adcs.w	r0, r0, #0
 80403a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403aa:	ea41 0105 	orr.w	r1, r1, r5
 80403ae:	bd30      	pop	{r4, r5, pc}
 80403b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403b4:	4140      	adcs	r0, r0
 80403b6:	eb41 0101 	adc.w	r1, r1, r1
 80403ba:	3c01      	subs	r4, #1
 80403bc:	bf28      	it	cs
 80403be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403c2:	d2e9      	bcs.n	8040398 <__adddf3+0x10c>
 80403c4:	f091 0f00 	teq	r1, #0
 80403c8:	bf04      	itt	eq
 80403ca:	4601      	moveq	r1, r0
 80403cc:	2000      	moveq	r0, #0
 80403ce:	fab1 f381 	clz	r3, r1
 80403d2:	bf08      	it	eq
 80403d4:	3320      	addeq	r3, #32
 80403d6:	f1a3 030b 	sub.w	r3, r3, #11
 80403da:	f1b3 0220 	subs.w	r2, r3, #32
 80403de:	da0c      	bge.n	80403fa <__adddf3+0x16e>
 80403e0:	320c      	adds	r2, #12
 80403e2:	dd08      	ble.n	80403f6 <__adddf3+0x16a>
 80403e4:	f102 0c14 	add.w	ip, r2, #20
 80403e8:	f1c2 020c 	rsb	r2, r2, #12
 80403ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80403f0:	fa21 f102 	lsr.w	r1, r1, r2
 80403f4:	e00c      	b.n	8040410 <__adddf3+0x184>
 80403f6:	f102 0214 	add.w	r2, r2, #20
 80403fa:	bfd8      	it	le
 80403fc:	f1c2 0c20 	rsble	ip, r2, #32
 8040400:	fa01 f102 	lsl.w	r1, r1, r2
 8040404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040408:	bfdc      	itt	le
 804040a:	ea41 010c 	orrle.w	r1, r1, ip
 804040e:	4090      	lslle	r0, r2
 8040410:	1ae4      	subs	r4, r4, r3
 8040412:	bfa2      	ittt	ge
 8040414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040418:	4329      	orrge	r1, r5
 804041a:	bd30      	popge	{r4, r5, pc}
 804041c:	ea6f 0404 	mvn.w	r4, r4
 8040420:	3c1f      	subs	r4, #31
 8040422:	da1c      	bge.n	804045e <__adddf3+0x1d2>
 8040424:	340c      	adds	r4, #12
 8040426:	dc0e      	bgt.n	8040446 <__adddf3+0x1ba>
 8040428:	f104 0414 	add.w	r4, r4, #20
 804042c:	f1c4 0220 	rsb	r2, r4, #32
 8040430:	fa20 f004 	lsr.w	r0, r0, r4
 8040434:	fa01 f302 	lsl.w	r3, r1, r2
 8040438:	ea40 0003 	orr.w	r0, r0, r3
 804043c:	fa21 f304 	lsr.w	r3, r1, r4
 8040440:	ea45 0103 	orr.w	r1, r5, r3
 8040444:	bd30      	pop	{r4, r5, pc}
 8040446:	f1c4 040c 	rsb	r4, r4, #12
 804044a:	f1c4 0220 	rsb	r2, r4, #32
 804044e:	fa20 f002 	lsr.w	r0, r0, r2
 8040452:	fa01 f304 	lsl.w	r3, r1, r4
 8040456:	ea40 0003 	orr.w	r0, r0, r3
 804045a:	4629      	mov	r1, r5
 804045c:	bd30      	pop	{r4, r5, pc}
 804045e:	fa21 f004 	lsr.w	r0, r1, r4
 8040462:	4629      	mov	r1, r5
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f094 0f00 	teq	r4, #0
 804046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804046e:	bf06      	itte	eq
 8040470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040474:	3401      	addeq	r4, #1
 8040476:	3d01      	subne	r5, #1
 8040478:	e74e      	b.n	8040318 <__adddf3+0x8c>
 804047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804047e:	bf18      	it	ne
 8040480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8040484:	d029      	beq.n	80404da <__adddf3+0x24e>
 8040486:	ea94 0f05 	teq	r4, r5
 804048a:	bf08      	it	eq
 804048c:	ea90 0f02 	teqeq	r0, r2
 8040490:	d005      	beq.n	804049e <__adddf3+0x212>
 8040492:	ea54 0c00 	orrs.w	ip, r4, r0
 8040496:	bf04      	itt	eq
 8040498:	4619      	moveq	r1, r3
 804049a:	4610      	moveq	r0, r2
 804049c:	bd30      	pop	{r4, r5, pc}
 804049e:	ea91 0f03 	teq	r1, r3
 80404a2:	bf1e      	ittt	ne
 80404a4:	2100      	movne	r1, #0
 80404a6:	2000      	movne	r0, #0
 80404a8:	bd30      	popne	{r4, r5, pc}
 80404aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ae:	d105      	bne.n	80404bc <__adddf3+0x230>
 80404b0:	0040      	lsls	r0, r0, #1
 80404b2:	4149      	adcs	r1, r1
 80404b4:	bf28      	it	cs
 80404b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404ba:	bd30      	pop	{r4, r5, pc}
 80404bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404c0:	bf3c      	itt	cc
 80404c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404c6:	bd30      	popcc	{r4, r5, pc}
 80404c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404d4:	f04f 0000 	mov.w	r0, #0
 80404d8:	bd30      	pop	{r4, r5, pc}
 80404da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404de:	bf1a      	itte	ne
 80404e0:	4619      	movne	r1, r3
 80404e2:	4610      	movne	r0, r2
 80404e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404e8:	bf1c      	itt	ne
 80404ea:	460b      	movne	r3, r1
 80404ec:	4602      	movne	r2, r0
 80404ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404f2:	bf06      	itte	eq
 80404f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404f8:	ea91 0f03 	teqeq	r1, r3
 80404fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040500:	bd30      	pop	{r4, r5, pc}
 8040502:	bf00      	nop

08040504 <__aeabi_ui2d>:
 8040504:	f090 0f00 	teq	r0, #0
 8040508:	bf04      	itt	eq
 804050a:	2100      	moveq	r1, #0
 804050c:	4770      	bxeq	lr
 804050e:	b530      	push	{r4, r5, lr}
 8040510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040518:	f04f 0500 	mov.w	r5, #0
 804051c:	f04f 0100 	mov.w	r1, #0
 8040520:	e750      	b.n	80403c4 <__adddf3+0x138>
 8040522:	bf00      	nop

08040524 <__aeabi_i2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804053c:	bf48      	it	mi
 804053e:	4240      	negmi	r0, r0
 8040540:	f04f 0100 	mov.w	r1, #0
 8040544:	e73e      	b.n	80403c4 <__adddf3+0x138>
 8040546:	bf00      	nop

08040548 <__aeabi_f2d>:
 8040548:	0042      	lsls	r2, r0, #1
 804054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040556:	bf1f      	itttt	ne
 8040558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040564:	4770      	bxne	lr
 8040566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804056a:	bf08      	it	eq
 804056c:	4770      	bxeq	lr
 804056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040572:	bf04      	itt	eq
 8040574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040578:	4770      	bxeq	lr
 804057a:	b530      	push	{r4, r5, lr}
 804057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040588:	e71c      	b.n	80403c4 <__adddf3+0x138>
 804058a:	bf00      	nop

0804058c <__aeabi_ul2d>:
 804058c:	ea50 0201 	orrs.w	r2, r0, r1
 8040590:	bf08      	it	eq
 8040592:	4770      	bxeq	lr
 8040594:	b530      	push	{r4, r5, lr}
 8040596:	f04f 0500 	mov.w	r5, #0
 804059a:	e00a      	b.n	80405b2 <__aeabi_l2d+0x16>

0804059c <__aeabi_l2d>:
 804059c:	ea50 0201 	orrs.w	r2, r0, r1
 80405a0:	bf08      	it	eq
 80405a2:	4770      	bxeq	lr
 80405a4:	b530      	push	{r4, r5, lr}
 80405a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405aa:	d502      	bpl.n	80405b2 <__aeabi_l2d+0x16>
 80405ac:	4240      	negs	r0, r0
 80405ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405be:	f43f aed8 	beq.w	8040372 <__adddf3+0xe6>
 80405c2:	f04f 0203 	mov.w	r2, #3
 80405c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ca:	bf18      	it	ne
 80405cc:	3203      	addne	r2, #3
 80405ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405d2:	bf18      	it	ne
 80405d4:	3203      	addne	r2, #3
 80405d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405da:	f1c2 0320 	rsb	r3, r2, #32
 80405de:	fa00 fc03 	lsl.w	ip, r0, r3
 80405e2:	fa20 f002 	lsr.w	r0, r0, r2
 80405e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80405ea:	ea40 000e 	orr.w	r0, r0, lr
 80405ee:	fa21 f102 	lsr.w	r1, r1, r2
 80405f2:	4414      	add	r4, r2
 80405f4:	e6bd      	b.n	8040372 <__adddf3+0xe6>
 80405f6:	bf00      	nop

080405f8 <__aeabi_dmul>:
 80405f8:	b570      	push	{r4, r5, r6, lr}
 80405fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040606:	bf1d      	ittte	ne
 8040608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804060c:	ea94 0f0c 	teqne	r4, ip
 8040610:	ea95 0f0c 	teqne	r5, ip
 8040614:	f000 f8de 	bleq	80407d4 <__aeabi_dmul+0x1dc>
 8040618:	442c      	add	r4, r5
 804061a:	ea81 0603 	eor.w	r6, r1, r3
 804061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804062a:	bf18      	it	ne
 804062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040638:	d038      	beq.n	80406ac <__aeabi_dmul+0xb4>
 804063a:	fba0 ce02 	umull	ip, lr, r0, r2
 804063e:	f04f 0500 	mov.w	r5, #0
 8040642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804064e:	f04f 0600 	mov.w	r6, #0
 8040652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040656:	f09c 0f00 	teq	ip, #0
 804065a:	bf18      	it	ne
 804065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804066c:	d204      	bcs.n	8040678 <__aeabi_dmul+0x80>
 804066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040672:	416d      	adcs	r5, r5
 8040674:	eb46 0606 	adc.w	r6, r6, r6
 8040678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040690:	bf88      	it	hi
 8040692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040696:	d81e      	bhi.n	80406d6 <__aeabi_dmul+0xde>
 8040698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804069c:	bf08      	it	eq
 804069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406a2:	f150 0000 	adcs.w	r0, r0, #0
 80406a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406aa:	bd70      	pop	{r4, r5, r6, pc}
 80406ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406b0:	ea46 0101 	orr.w	r1, r6, r1
 80406b4:	ea40 0002 	orr.w	r0, r0, r2
 80406b8:	ea81 0103 	eor.w	r1, r1, r3
 80406bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406c0:	bfc2      	ittt	gt
 80406c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	popgt	{r4, r5, r6, pc}
 80406cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406d0:	f04f 0e00 	mov.w	lr, #0
 80406d4:	3c01      	subs	r4, #1
 80406d6:	f300 80ab 	bgt.w	8040830 <__aeabi_dmul+0x238>
 80406da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406de:	bfde      	ittt	le
 80406e0:	2000      	movle	r0, #0
 80406e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406e6:	bd70      	pople	{r4, r5, r6, pc}
 80406e8:	f1c4 0400 	rsb	r4, r4, #0
 80406ec:	3c20      	subs	r4, #32
 80406ee:	da35      	bge.n	804075c <__aeabi_dmul+0x164>
 80406f0:	340c      	adds	r4, #12
 80406f2:	dc1b      	bgt.n	804072c <__aeabi_dmul+0x134>
 80406f4:	f104 0414 	add.w	r4, r4, #20
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f305 	lsl.w	r3, r0, r5
 8040700:	fa20 f004 	lsr.w	r0, r0, r4
 8040704:	fa01 f205 	lsl.w	r2, r1, r5
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040718:	fa21 f604 	lsr.w	r6, r1, r4
 804071c:	eb42 0106 	adc.w	r1, r2, r6
 8040720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040724:	bf08      	it	eq
 8040726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804072a:	bd70      	pop	{r4, r5, r6, pc}
 804072c:	f1c4 040c 	rsb	r4, r4, #12
 8040730:	f1c4 0520 	rsb	r5, r4, #32
 8040734:	fa00 f304 	lsl.w	r3, r0, r4
 8040738:	fa20 f005 	lsr.w	r0, r0, r5
 804073c:	fa01 f204 	lsl.w	r2, r1, r4
 8040740:	ea40 0002 	orr.w	r0, r0, r2
 8040744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804074c:	f141 0100 	adc.w	r1, r1, #0
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f1c4 0520 	rsb	r5, r4, #32
 8040760:	fa00 f205 	lsl.w	r2, r0, r5
 8040764:	ea4e 0e02 	orr.w	lr, lr, r2
 8040768:	fa20 f304 	lsr.w	r3, r0, r4
 804076c:	fa01 f205 	lsl.w	r2, r1, r5
 8040770:	ea43 0302 	orr.w	r3, r3, r2
 8040774:	fa21 f004 	lsr.w	r0, r1, r4
 8040778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804077c:	fa21 f204 	lsr.w	r2, r1, r4
 8040780:	ea20 0002 	bic.w	r0, r0, r2
 8040784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804078c:	bf08      	it	eq
 804078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040792:	bd70      	pop	{r4, r5, r6, pc}
 8040794:	f094 0f00 	teq	r4, #0
 8040798:	d10f      	bne.n	80407ba <__aeabi_dmul+0x1c2>
 804079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804079e:	0040      	lsls	r0, r0, #1
 80407a0:	eb41 0101 	adc.w	r1, r1, r1
 80407a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407a8:	bf08      	it	eq
 80407aa:	3c01      	subeq	r4, #1
 80407ac:	d0f7      	beq.n	804079e <__aeabi_dmul+0x1a6>
 80407ae:	ea41 0106 	orr.w	r1, r1, r6
 80407b2:	f095 0f00 	teq	r5, #0
 80407b6:	bf18      	it	ne
 80407b8:	4770      	bxne	lr
 80407ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407be:	0052      	lsls	r2, r2, #1
 80407c0:	eb43 0303 	adc.w	r3, r3, r3
 80407c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3d01      	subeq	r5, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1c6>
 80407ce:	ea43 0306 	orr.w	r3, r3, r6
 80407d2:	4770      	bx	lr
 80407d4:	ea94 0f0c 	teq	r4, ip
 80407d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407dc:	bf18      	it	ne
 80407de:	ea95 0f0c 	teqne	r5, ip
 80407e2:	d00c      	beq.n	80407fe <__aeabi_dmul+0x206>
 80407e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407e8:	bf18      	it	ne
 80407ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407ee:	d1d1      	bne.n	8040794 <__aeabi_dmul+0x19c>
 80407f0:	ea81 0103 	eor.w	r1, r1, r3
 80407f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407f8:	f04f 0000 	mov.w	r0, #0
 80407fc:	bd70      	pop	{r4, r5, r6, pc}
 80407fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040802:	bf06      	itte	eq
 8040804:	4610      	moveq	r0, r2
 8040806:	4619      	moveq	r1, r3
 8040808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080c:	d019      	beq.n	8040842 <__aeabi_dmul+0x24a>
 804080e:	ea94 0f0c 	teq	r4, ip
 8040812:	d102      	bne.n	804081a <__aeabi_dmul+0x222>
 8040814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040818:	d113      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804081a:	ea95 0f0c 	teq	r5, ip
 804081e:	d105      	bne.n	804082c <__aeabi_dmul+0x234>
 8040820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040824:	bf1c      	itt	ne
 8040826:	4610      	movne	r0, r2
 8040828:	4619      	movne	r1, r3
 804082a:	d10a      	bne.n	8040842 <__aeabi_dmul+0x24a>
 804082c:	ea81 0103 	eor.w	r1, r1, r3
 8040830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804083c:	f04f 0000 	mov.w	r0, #0
 8040840:	bd70      	pop	{r4, r5, r6, pc}
 8040842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804084a:	bd70      	pop	{r4, r5, r6, pc}

0804084c <__aeabi_ddiv>:
 804084c:	b570      	push	{r4, r5, r6, lr}
 804084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804085a:	bf1d      	ittte	ne
 804085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040860:	ea94 0f0c 	teqne	r4, ip
 8040864:	ea95 0f0c 	teqne	r5, ip
 8040868:	f000 f8a7 	bleq	80409ba <__aeabi_ddiv+0x16e>
 804086c:	eba4 0405 	sub.w	r4, r4, r5
 8040870:	ea81 0e03 	eor.w	lr, r1, r3
 8040874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804087c:	f000 8088 	beq.w	8040990 <__aeabi_ddiv+0x144>
 8040880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408a4:	429d      	cmp	r5, r3
 80408a6:	bf08      	it	eq
 80408a8:	4296      	cmpeq	r6, r2
 80408aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408b2:	d202      	bcs.n	80408ba <__aeabi_ddiv+0x6e>
 80408b4:	085b      	lsrs	r3, r3, #1
 80408b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ba:	1ab6      	subs	r6, r6, r2
 80408bc:	eb65 0503 	sbc.w	r5, r5, r3
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ee:	bf22      	ittt	cs
 80408f0:	1ab6      	subcs	r6, r6, r2
 80408f2:	4675      	movcs	r5, lr
 80408f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408f8:	085b      	lsrs	r3, r3, #1
 80408fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8040902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040906:	bf22      	ittt	cs
 8040908:	1ab6      	subcs	r6, r6, r2
 804090a:	4675      	movcs	r5, lr
 804090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040910:	085b      	lsrs	r3, r3, #1
 8040912:	ea4f 0232 	mov.w	r2, r2, rrx
 8040916:	ebb6 0e02 	subs.w	lr, r6, r2
 804091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804091e:	bf22      	ittt	cs
 8040920:	1ab6      	subcs	r6, r6, r2
 8040922:	4675      	movcs	r5, lr
 8040924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040928:	ea55 0e06 	orrs.w	lr, r5, r6
 804092c:	d018      	beq.n	8040960 <__aeabi_ddiv+0x114>
 804092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804094a:	d1c0      	bne.n	80408ce <__aeabi_ddiv+0x82>
 804094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040950:	d10b      	bne.n	804096a <__aeabi_ddiv+0x11e>
 8040952:	ea41 0100 	orr.w	r1, r1, r0
 8040956:	f04f 0000 	mov.w	r0, #0
 804095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804095e:	e7b6      	b.n	80408ce <__aeabi_ddiv+0x82>
 8040960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040964:	bf04      	itt	eq
 8040966:	4301      	orreq	r1, r0
 8040968:	2000      	moveq	r0, #0
 804096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804096e:	bf88      	it	hi
 8040970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040974:	f63f aeaf 	bhi.w	80406d6 <__aeabi_dmul+0xde>
 8040978:	ebb5 0c03 	subs.w	ip, r5, r3
 804097c:	bf04      	itt	eq
 804097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040986:	f150 0000 	adcs.w	r0, r0, #0
 804098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804098e:	bd70      	pop	{r4, r5, r6, pc}
 8040990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804099c:	bfc2      	ittt	gt
 804099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409a6:	bd70      	popgt	{r4, r5, r6, pc}
 80409a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409ac:	f04f 0e00 	mov.w	lr, #0
 80409b0:	3c01      	subs	r4, #1
 80409b2:	e690      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409b4:	ea45 0e06 	orr.w	lr, r5, r6
 80409b8:	e68d      	b.n	80406d6 <__aeabi_dmul+0xde>
 80409ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409be:	ea94 0f0c 	teq	r4, ip
 80409c2:	bf08      	it	eq
 80409c4:	ea95 0f0c 	teqeq	r5, ip
 80409c8:	f43f af3b 	beq.w	8040842 <__aeabi_dmul+0x24a>
 80409cc:	ea94 0f0c 	teq	r4, ip
 80409d0:	d10a      	bne.n	80409e8 <__aeabi_ddiv+0x19c>
 80409d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409d6:	f47f af34 	bne.w	8040842 <__aeabi_dmul+0x24a>
 80409da:	ea95 0f0c 	teq	r5, ip
 80409de:	f47f af25 	bne.w	804082c <__aeabi_dmul+0x234>
 80409e2:	4610      	mov	r0, r2
 80409e4:	4619      	mov	r1, r3
 80409e6:	e72c      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409e8:	ea95 0f0c 	teq	r5, ip
 80409ec:	d106      	bne.n	80409fc <__aeabi_ddiv+0x1b0>
 80409ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409f2:	f43f aefd 	beq.w	80407f0 <__aeabi_dmul+0x1f8>
 80409f6:	4610      	mov	r0, r2
 80409f8:	4619      	mov	r1, r3
 80409fa:	e722      	b.n	8040842 <__aeabi_dmul+0x24a>
 80409fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a00:	bf18      	it	ne
 8040a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a06:	f47f aec5 	bne.w	8040794 <__aeabi_dmul+0x19c>
 8040a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a0e:	f47f af0d 	bne.w	804082c <__aeabi_dmul+0x234>
 8040a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a16:	f47f aeeb 	bne.w	80407f0 <__aeabi_dmul+0x1f8>
 8040a1a:	e712      	b.n	8040842 <__aeabi_dmul+0x24a>

08040a1c <__gedf2>:
 8040a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a20:	e006      	b.n	8040a30 <__cmpdf2+0x4>
 8040a22:	bf00      	nop

08040a24 <__ledf2>:
 8040a24:	f04f 0c01 	mov.w	ip, #1
 8040a28:	e002      	b.n	8040a30 <__cmpdf2+0x4>
 8040a2a:	bf00      	nop

08040a2c <__cmpdf2>:
 8040a2c:	f04f 0c01 	mov.w	ip, #1
 8040a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a40:	bf18      	it	ne
 8040a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a46:	d01b      	beq.n	8040a80 <__cmpdf2+0x54>
 8040a48:	b001      	add	sp, #4
 8040a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a4e:	bf0c      	ite	eq
 8040a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a54:	ea91 0f03 	teqne	r1, r3
 8040a58:	bf02      	ittt	eq
 8040a5a:	ea90 0f02 	teqeq	r0, r2
 8040a5e:	2000      	moveq	r0, #0
 8040a60:	4770      	bxeq	lr
 8040a62:	f110 0f00 	cmn.w	r0, #0
 8040a66:	ea91 0f03 	teq	r1, r3
 8040a6a:	bf58      	it	pl
 8040a6c:	4299      	cmppl	r1, r3
 8040a6e:	bf08      	it	eq
 8040a70:	4290      	cmpeq	r0, r2
 8040a72:	bf2c      	ite	cs
 8040a74:	17d8      	asrcs	r0, r3, #31
 8040a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a7a:	f040 0001 	orr.w	r0, r0, #1
 8040a7e:	4770      	bx	lr
 8040a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a88:	d102      	bne.n	8040a90 <__cmpdf2+0x64>
 8040a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a8e:	d107      	bne.n	8040aa0 <__cmpdf2+0x74>
 8040a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a98:	d1d6      	bne.n	8040a48 <__cmpdf2+0x1c>
 8040a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a9e:	d0d3      	beq.n	8040a48 <__cmpdf2+0x1c>
 8040aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040aa4:	4770      	bx	lr
 8040aa6:	bf00      	nop

08040aa8 <__aeabi_cdrcmple>:
 8040aa8:	4684      	mov	ip, r0
 8040aaa:	4610      	mov	r0, r2
 8040aac:	4662      	mov	r2, ip
 8040aae:	468c      	mov	ip, r1
 8040ab0:	4619      	mov	r1, r3
 8040ab2:	4663      	mov	r3, ip
 8040ab4:	e000      	b.n	8040ab8 <__aeabi_cdcmpeq>
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_cdcmpeq>:
 8040ab8:	b501      	push	{r0, lr}
 8040aba:	f7ff ffb7 	bl	8040a2c <__cmpdf2>
 8040abe:	2800      	cmp	r0, #0
 8040ac0:	bf48      	it	mi
 8040ac2:	f110 0f00 	cmnmi.w	r0, #0
 8040ac6:	bd01      	pop	{r0, pc}

08040ac8 <__aeabi_dcmpeq>:
 8040ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040acc:	f7ff fff4 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ad0:	bf0c      	ite	eq
 8040ad2:	2001      	moveq	r0, #1
 8040ad4:	2000      	movne	r0, #0
 8040ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ada:	bf00      	nop

08040adc <__aeabi_dcmplt>:
 8040adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae0:	f7ff ffea 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040ae4:	bf34      	ite	cc
 8040ae6:	2001      	movcc	r0, #1
 8040ae8:	2000      	movcs	r0, #0
 8040aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aee:	bf00      	nop

08040af0 <__aeabi_dcmple>:
 8040af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040af4:	f7ff ffe0 	bl	8040ab8 <__aeabi_cdcmpeq>
 8040af8:	bf94      	ite	ls
 8040afa:	2001      	movls	r0, #1
 8040afc:	2000      	movhi	r0, #0
 8040afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b02:	bf00      	nop

08040b04 <__aeabi_dcmpge>:
 8040b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b08:	f7ff ffce 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b0c:	bf94      	ite	ls
 8040b0e:	2001      	movls	r0, #1
 8040b10:	2000      	movhi	r0, #0
 8040b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b16:	bf00      	nop

08040b18 <__aeabi_dcmpgt>:
 8040b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b1c:	f7ff ffc4 	bl	8040aa8 <__aeabi_cdrcmple>
 8040b20:	bf34      	ite	cc
 8040b22:	2001      	movcc	r0, #1
 8040b24:	2000      	movcs	r0, #0
 8040b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b2a:	bf00      	nop

08040b2c <__aeabi_dcmpun>:
 8040b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b34:	d102      	bne.n	8040b3c <__aeabi_dcmpun+0x10>
 8040b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b3a:	d10a      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b44:	d102      	bne.n	8040b4c <__aeabi_dcmpun+0x20>
 8040b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b4a:	d102      	bne.n	8040b52 <__aeabi_dcmpun+0x26>
 8040b4c:	f04f 0000 	mov.w	r0, #0
 8040b50:	4770      	bx	lr
 8040b52:	f04f 0001 	mov.w	r0, #1
 8040b56:	4770      	bx	lr

08040b58 <__aeabi_d2iz>:
 8040b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b60:	d215      	bcs.n	8040b8e <__aeabi_d2iz+0x36>
 8040b62:	d511      	bpl.n	8040b88 <__aeabi_d2iz+0x30>
 8040b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b6c:	d912      	bls.n	8040b94 <__aeabi_d2iz+0x3c>
 8040b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8040b82:	bf18      	it	ne
 8040b84:	4240      	negne	r0, r0
 8040b86:	4770      	bx	lr
 8040b88:	f04f 0000 	mov.w	r0, #0
 8040b8c:	4770      	bx	lr
 8040b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b92:	d105      	bne.n	8040ba0 <__aeabi_d2iz+0x48>
 8040b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b98:	bf08      	it	eq
 8040b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b9e:	4770      	bx	lr
 8040ba0:	f04f 0000 	mov.w	r0, #0
 8040ba4:	4770      	bx	lr
 8040ba6:	bf00      	nop

08040ba8 <__aeabi_d2uiz>:
 8040ba8:	004a      	lsls	r2, r1, #1
 8040baa:	d211      	bcs.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040bb0:	d211      	bcs.n	8040bd6 <__aeabi_d2uiz+0x2e>
 8040bb2:	d50d      	bpl.n	8040bd0 <__aeabi_d2uiz+0x28>
 8040bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040bbc:	d40e      	bmi.n	8040bdc <__aeabi_d2uiz+0x34>
 8040bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040bca:	fa23 f002 	lsr.w	r0, r3, r2
 8040bce:	4770      	bx	lr
 8040bd0:	f04f 0000 	mov.w	r0, #0
 8040bd4:	4770      	bx	lr
 8040bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bda:	d102      	bne.n	8040be2 <__aeabi_d2uiz+0x3a>
 8040bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8040be0:	4770      	bx	lr
 8040be2:	f04f 0000 	mov.w	r0, #0
 8040be6:	4770      	bx	lr

08040be8 <__aeabi_d2f>:
 8040be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040bf0:	bf24      	itt	cs
 8040bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040bfa:	d90d      	bls.n	8040c18 <__aeabi_d2f+0x30>
 8040bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040c10:	bf08      	it	eq
 8040c12:	f020 0001 	biceq.w	r0, r0, #1
 8040c16:	4770      	bx	lr
 8040c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040c1c:	d121      	bne.n	8040c62 <__aeabi_d2f+0x7a>
 8040c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040c22:	bfbc      	itt	lt
 8040c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040c28:	4770      	bxlt	lr
 8040c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040c32:	f1c2 0218 	rsb	r2, r2, #24
 8040c36:	f1c2 0c20 	rsb	ip, r2, #32
 8040c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8040c42:	bf18      	it	ne
 8040c44:	f040 0001 	orrne.w	r0, r0, #1
 8040c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c54:	ea40 000c 	orr.w	r0, r0, ip
 8040c58:	fa23 f302 	lsr.w	r3, r3, r2
 8040c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c60:	e7cc      	b.n	8040bfc <__aeabi_d2f+0x14>
 8040c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c66:	d107      	bne.n	8040c78 <__aeabi_d2f+0x90>
 8040c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c6c:	bf1e      	ittt	ne
 8040c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040c76:	4770      	bxne	lr
 8040c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040c84:	4770      	bx	lr
 8040c86:	bf00      	nop

08040c88 <__aeabi_uldivmod>:
 8040c88:	b953      	cbnz	r3, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8a:	b94a      	cbnz	r2, 8040ca0 <__aeabi_uldivmod+0x18>
 8040c8c:	2900      	cmp	r1, #0
 8040c8e:	bf08      	it	eq
 8040c90:	2800      	cmpeq	r0, #0
 8040c92:	bf1c      	itt	ne
 8040c94:	f04f 31ff 	movne.w	r1, #4294967295
 8040c98:	f04f 30ff 	movne.w	r0, #4294967295
 8040c9c:	f000 b9a4 	b.w	8040fe8 <__aeabi_idiv0>
 8040ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040ca8:	f000 f83c 	bl	8040d24 <__udivmoddi4>
 8040cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040cb4:	b004      	add	sp, #16
 8040cb6:	4770      	bx	lr

08040cb8 <__aeabi_d2lz>:
 8040cb8:	b538      	push	{r3, r4, r5, lr}
 8040cba:	2200      	movs	r2, #0
 8040cbc:	2300      	movs	r3, #0
 8040cbe:	4604      	mov	r4, r0
 8040cc0:	460d      	mov	r5, r1
 8040cc2:	f7ff ff0b 	bl	8040adc <__aeabi_dcmplt>
 8040cc6:	b928      	cbnz	r0, 8040cd4 <__aeabi_d2lz+0x1c>
 8040cc8:	4620      	mov	r0, r4
 8040cca:	4629      	mov	r1, r5
 8040ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040cd0:	f000 b80a 	b.w	8040ce8 <__aeabi_d2ulz>
 8040cd4:	4620      	mov	r0, r4
 8040cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040cda:	f000 f805 	bl	8040ce8 <__aeabi_d2ulz>
 8040cde:	4240      	negs	r0, r0
 8040ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040ce4:	bd38      	pop	{r3, r4, r5, pc}
 8040ce6:	bf00      	nop

08040ce8 <__aeabi_d2ulz>:
 8040ce8:	b5d0      	push	{r4, r6, r7, lr}
 8040cea:	4b0c      	ldr	r3, [pc, #48]	; (8040d1c <__aeabi_d2ulz+0x34>)
 8040cec:	2200      	movs	r2, #0
 8040cee:	4606      	mov	r6, r0
 8040cf0:	460f      	mov	r7, r1
 8040cf2:	f7ff fc81 	bl	80405f8 <__aeabi_dmul>
 8040cf6:	f7ff ff57 	bl	8040ba8 <__aeabi_d2uiz>
 8040cfa:	4604      	mov	r4, r0
 8040cfc:	f7ff fc02 	bl	8040504 <__aeabi_ui2d>
 8040d00:	4b07      	ldr	r3, [pc, #28]	; (8040d20 <__aeabi_d2ulz+0x38>)
 8040d02:	2200      	movs	r2, #0
 8040d04:	f7ff fc78 	bl	80405f8 <__aeabi_dmul>
 8040d08:	4602      	mov	r2, r0
 8040d0a:	460b      	mov	r3, r1
 8040d0c:	4630      	mov	r0, r6
 8040d0e:	4639      	mov	r1, r7
 8040d10:	f7ff faba 	bl	8040288 <__aeabi_dsub>
 8040d14:	f7ff ff48 	bl	8040ba8 <__aeabi_d2uiz>
 8040d18:	4621      	mov	r1, r4
 8040d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8040d1c:	3df00000 	.word	0x3df00000
 8040d20:	41f00000 	.word	0x41f00000

08040d24 <__udivmoddi4>:
 8040d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040d28:	9d08      	ldr	r5, [sp, #32]
 8040d2a:	4604      	mov	r4, r0
 8040d2c:	468c      	mov	ip, r1
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	f040 8083 	bne.w	8040e3a <__udivmoddi4+0x116>
 8040d34:	428a      	cmp	r2, r1
 8040d36:	4617      	mov	r7, r2
 8040d38:	d947      	bls.n	8040dca <__udivmoddi4+0xa6>
 8040d3a:	fab2 f282 	clz	r2, r2
 8040d3e:	b142      	cbz	r2, 8040d52 <__udivmoddi4+0x2e>
 8040d40:	f1c2 0020 	rsb	r0, r2, #32
 8040d44:	fa24 f000 	lsr.w	r0, r4, r0
 8040d48:	4091      	lsls	r1, r2
 8040d4a:	4097      	lsls	r7, r2
 8040d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8040d50:	4094      	lsls	r4, r2
 8040d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8040d56:	0c23      	lsrs	r3, r4, #16
 8040d58:	fbbc f6f8 	udiv	r6, ip, r8
 8040d5c:	fa1f fe87 	uxth.w	lr, r7
 8040d60:	fb08 c116 	mls	r1, r8, r6, ip
 8040d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040d68:	fb06 f10e 	mul.w	r1, r6, lr
 8040d6c:	4299      	cmp	r1, r3
 8040d6e:	d909      	bls.n	8040d84 <__udivmoddi4+0x60>
 8040d70:	18fb      	adds	r3, r7, r3
 8040d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8040d76:	f080 8119 	bcs.w	8040fac <__udivmoddi4+0x288>
 8040d7a:	4299      	cmp	r1, r3
 8040d7c:	f240 8116 	bls.w	8040fac <__udivmoddi4+0x288>
 8040d80:	3e02      	subs	r6, #2
 8040d82:	443b      	add	r3, r7
 8040d84:	1a5b      	subs	r3, r3, r1
 8040d86:	b2a4      	uxth	r4, r4
 8040d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8040d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8040d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8040d98:	45a6      	cmp	lr, r4
 8040d9a:	d909      	bls.n	8040db0 <__udivmoddi4+0x8c>
 8040d9c:	193c      	adds	r4, r7, r4
 8040d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8040da2:	f080 8105 	bcs.w	8040fb0 <__udivmoddi4+0x28c>
 8040da6:	45a6      	cmp	lr, r4
 8040da8:	f240 8102 	bls.w	8040fb0 <__udivmoddi4+0x28c>
 8040dac:	3802      	subs	r0, #2
 8040dae:	443c      	add	r4, r7
 8040db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040db4:	eba4 040e 	sub.w	r4, r4, lr
 8040db8:	2600      	movs	r6, #0
 8040dba:	b11d      	cbz	r5, 8040dc4 <__udivmoddi4+0xa0>
 8040dbc:	40d4      	lsrs	r4, r2
 8040dbe:	2300      	movs	r3, #0
 8040dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8040dc4:	4631      	mov	r1, r6
 8040dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040dca:	b902      	cbnz	r2, 8040dce <__udivmoddi4+0xaa>
 8040dcc:	deff      	udf	#255	; 0xff
 8040dce:	fab2 f282 	clz	r2, r2
 8040dd2:	2a00      	cmp	r2, #0
 8040dd4:	d150      	bne.n	8040e78 <__udivmoddi4+0x154>
 8040dd6:	1bcb      	subs	r3, r1, r7
 8040dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040ddc:	fa1f f887 	uxth.w	r8, r7
 8040de0:	2601      	movs	r6, #1
 8040de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8040de6:	0c21      	lsrs	r1, r4, #16
 8040de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8040dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040df0:	fb08 f30c 	mul.w	r3, r8, ip
 8040df4:	428b      	cmp	r3, r1
 8040df6:	d907      	bls.n	8040e08 <__udivmoddi4+0xe4>
 8040df8:	1879      	adds	r1, r7, r1
 8040dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8040dfe:	d202      	bcs.n	8040e06 <__udivmoddi4+0xe2>
 8040e00:	428b      	cmp	r3, r1
 8040e02:	f200 80e9 	bhi.w	8040fd8 <__udivmoddi4+0x2b4>
 8040e06:	4684      	mov	ip, r0
 8040e08:	1ac9      	subs	r1, r1, r3
 8040e0a:	b2a3      	uxth	r3, r4
 8040e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8040e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8040e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040e18:	fb08 f800 	mul.w	r8, r8, r0
 8040e1c:	45a0      	cmp	r8, r4
 8040e1e:	d907      	bls.n	8040e30 <__udivmoddi4+0x10c>
 8040e20:	193c      	adds	r4, r7, r4
 8040e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8040e26:	d202      	bcs.n	8040e2e <__udivmoddi4+0x10a>
 8040e28:	45a0      	cmp	r8, r4
 8040e2a:	f200 80d9 	bhi.w	8040fe0 <__udivmoddi4+0x2bc>
 8040e2e:	4618      	mov	r0, r3
 8040e30:	eba4 0408 	sub.w	r4, r4, r8
 8040e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040e38:	e7bf      	b.n	8040dba <__udivmoddi4+0x96>
 8040e3a:	428b      	cmp	r3, r1
 8040e3c:	d909      	bls.n	8040e52 <__udivmoddi4+0x12e>
 8040e3e:	2d00      	cmp	r5, #0
 8040e40:	f000 80b1 	beq.w	8040fa6 <__udivmoddi4+0x282>
 8040e44:	2600      	movs	r6, #0
 8040e46:	e9c5 0100 	strd	r0, r1, [r5]
 8040e4a:	4630      	mov	r0, r6
 8040e4c:	4631      	mov	r1, r6
 8040e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040e52:	fab3 f683 	clz	r6, r3
 8040e56:	2e00      	cmp	r6, #0
 8040e58:	d14a      	bne.n	8040ef0 <__udivmoddi4+0x1cc>
 8040e5a:	428b      	cmp	r3, r1
 8040e5c:	d302      	bcc.n	8040e64 <__udivmoddi4+0x140>
 8040e5e:	4282      	cmp	r2, r0
 8040e60:	f200 80b8 	bhi.w	8040fd4 <__udivmoddi4+0x2b0>
 8040e64:	1a84      	subs	r4, r0, r2
 8040e66:	eb61 0103 	sbc.w	r1, r1, r3
 8040e6a:	2001      	movs	r0, #1
 8040e6c:	468c      	mov	ip, r1
 8040e6e:	2d00      	cmp	r5, #0
 8040e70:	d0a8      	beq.n	8040dc4 <__udivmoddi4+0xa0>
 8040e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8040e76:	e7a5      	b.n	8040dc4 <__udivmoddi4+0xa0>
 8040e78:	f1c2 0320 	rsb	r3, r2, #32
 8040e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8040e80:	4097      	lsls	r7, r2
 8040e82:	fa01 f002 	lsl.w	r0, r1, r2
 8040e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040e8a:	40d9      	lsrs	r1, r3
 8040e8c:	4330      	orrs	r0, r6
 8040e8e:	0c03      	lsrs	r3, r0, #16
 8040e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8040e94:	fa1f f887 	uxth.w	r8, r7
 8040e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8040e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040ea0:	fb06 f108 	mul.w	r1, r6, r8
 8040ea4:	4299      	cmp	r1, r3
 8040ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8040eaa:	d909      	bls.n	8040ec0 <__udivmoddi4+0x19c>
 8040eac:	18fb      	adds	r3, r7, r3
 8040eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8040eb2:	f080 808d 	bcs.w	8040fd0 <__udivmoddi4+0x2ac>
 8040eb6:	4299      	cmp	r1, r3
 8040eb8:	f240 808a 	bls.w	8040fd0 <__udivmoddi4+0x2ac>
 8040ebc:	3e02      	subs	r6, #2
 8040ebe:	443b      	add	r3, r7
 8040ec0:	1a5b      	subs	r3, r3, r1
 8040ec2:	b281      	uxth	r1, r0
 8040ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8040ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8040ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040ed0:	fb00 f308 	mul.w	r3, r0, r8
 8040ed4:	428b      	cmp	r3, r1
 8040ed6:	d907      	bls.n	8040ee8 <__udivmoddi4+0x1c4>
 8040ed8:	1879      	adds	r1, r7, r1
 8040eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8040ede:	d273      	bcs.n	8040fc8 <__udivmoddi4+0x2a4>
 8040ee0:	428b      	cmp	r3, r1
 8040ee2:	d971      	bls.n	8040fc8 <__udivmoddi4+0x2a4>
 8040ee4:	3802      	subs	r0, #2
 8040ee6:	4439      	add	r1, r7
 8040ee8:	1acb      	subs	r3, r1, r3
 8040eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8040eee:	e778      	b.n	8040de2 <__udivmoddi4+0xbe>
 8040ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8040ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8040ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8040efc:	431c      	orrs	r4, r3
 8040efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8040f02:	fa01 f306 	lsl.w	r3, r1, r6
 8040f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8040f0e:	431f      	orrs	r7, r3
 8040f10:	0c3b      	lsrs	r3, r7, #16
 8040f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8040f16:	fa1f f884 	uxth.w	r8, r4
 8040f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8040f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040f22:	fb09 fa08 	mul.w	sl, r9, r8
 8040f26:	458a      	cmp	sl, r1
 8040f28:	fa02 f206 	lsl.w	r2, r2, r6
 8040f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8040f30:	d908      	bls.n	8040f44 <__udivmoddi4+0x220>
 8040f32:	1861      	adds	r1, r4, r1
 8040f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8040f38:	d248      	bcs.n	8040fcc <__udivmoddi4+0x2a8>
 8040f3a:	458a      	cmp	sl, r1
 8040f3c:	d946      	bls.n	8040fcc <__udivmoddi4+0x2a8>
 8040f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8040f42:	4421      	add	r1, r4
 8040f44:	eba1 010a 	sub.w	r1, r1, sl
 8040f48:	b2bf      	uxth	r7, r7
 8040f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8040f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8040f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8040f56:	fb00 f808 	mul.w	r8, r0, r8
 8040f5a:	45b8      	cmp	r8, r7
 8040f5c:	d907      	bls.n	8040f6e <__udivmoddi4+0x24a>
 8040f5e:	19e7      	adds	r7, r4, r7
 8040f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8040f64:	d22e      	bcs.n	8040fc4 <__udivmoddi4+0x2a0>
 8040f66:	45b8      	cmp	r8, r7
 8040f68:	d92c      	bls.n	8040fc4 <__udivmoddi4+0x2a0>
 8040f6a:	3802      	subs	r0, #2
 8040f6c:	4427      	add	r7, r4
 8040f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8040f72:	eba7 0708 	sub.w	r7, r7, r8
 8040f76:	fba0 8902 	umull	r8, r9, r0, r2
 8040f7a:	454f      	cmp	r7, r9
 8040f7c:	46c6      	mov	lr, r8
 8040f7e:	4649      	mov	r1, r9
 8040f80:	d31a      	bcc.n	8040fb8 <__udivmoddi4+0x294>
 8040f82:	d017      	beq.n	8040fb4 <__udivmoddi4+0x290>
 8040f84:	b15d      	cbz	r5, 8040f9e <__udivmoddi4+0x27a>
 8040f86:	ebb3 020e 	subs.w	r2, r3, lr
 8040f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8040f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8040f92:	40f2      	lsrs	r2, r6
 8040f94:	ea4c 0202 	orr.w	r2, ip, r2
 8040f98:	40f7      	lsrs	r7, r6
 8040f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8040f9e:	2600      	movs	r6, #0
 8040fa0:	4631      	mov	r1, r6
 8040fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040fa6:	462e      	mov	r6, r5
 8040fa8:	4628      	mov	r0, r5
 8040faa:	e70b      	b.n	8040dc4 <__udivmoddi4+0xa0>
 8040fac:	4606      	mov	r6, r0
 8040fae:	e6e9      	b.n	8040d84 <__udivmoddi4+0x60>
 8040fb0:	4618      	mov	r0, r3
 8040fb2:	e6fd      	b.n	8040db0 <__udivmoddi4+0x8c>
 8040fb4:	4543      	cmp	r3, r8
 8040fb6:	d2e5      	bcs.n	8040f84 <__udivmoddi4+0x260>
 8040fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8040fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8040fc0:	3801      	subs	r0, #1
 8040fc2:	e7df      	b.n	8040f84 <__udivmoddi4+0x260>
 8040fc4:	4608      	mov	r0, r1
 8040fc6:	e7d2      	b.n	8040f6e <__udivmoddi4+0x24a>
 8040fc8:	4660      	mov	r0, ip
 8040fca:	e78d      	b.n	8040ee8 <__udivmoddi4+0x1c4>
 8040fcc:	4681      	mov	r9, r0
 8040fce:	e7b9      	b.n	8040f44 <__udivmoddi4+0x220>
 8040fd0:	4666      	mov	r6, ip
 8040fd2:	e775      	b.n	8040ec0 <__udivmoddi4+0x19c>
 8040fd4:	4630      	mov	r0, r6
 8040fd6:	e74a      	b.n	8040e6e <__udivmoddi4+0x14a>
 8040fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8040fdc:	4439      	add	r1, r7
 8040fde:	e713      	b.n	8040e08 <__udivmoddi4+0xe4>
 8040fe0:	3802      	subs	r0, #2
 8040fe2:	443c      	add	r4, r7
 8040fe4:	e724      	b.n	8040e30 <__udivmoddi4+0x10c>
 8040fe6:	bf00      	nop

08040fe8 <__aeabi_idiv0>:
 8040fe8:	4770      	bx	lr
 8040fea:	bf00      	nop

08040fec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8040fec:	b480      	push	{r7}
 8040fee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8040ff0:	f3bf 8f4f 	dsb	sy
}
 8040ff4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8040ff6:	4b06      	ldr	r3, [pc, #24]	; (8041010 <__NVIC_SystemReset+0x24>)
 8040ff8:	68db      	ldr	r3, [r3, #12]
 8040ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8040ffe:	4904      	ldr	r1, [pc, #16]	; (8041010 <__NVIC_SystemReset+0x24>)
 8041000:	4b04      	ldr	r3, [pc, #16]	; (8041014 <__NVIC_SystemReset+0x28>)
 8041002:	4313      	orrs	r3, r2
 8041004:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8041006:	f3bf 8f4f 	dsb	sy
}
 804100a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 804100c:	bf00      	nop
 804100e:	e7fd      	b.n	804100c <__NVIC_SystemReset+0x20>
 8041010:	e000ed00 	.word	0xe000ed00
 8041014:	05fa0004 	.word	0x05fa0004

08041018 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8041018:	b480      	push	{r7}
 804101a:	b085      	sub	sp, #20
 804101c:	af00      	add	r7, sp, #0
 804101e:	6078      	str	r0, [r7, #4]
 8041020:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8041024:	687b      	ldr	r3, [r7, #4]
 8041026:	ed93 7a00 	vldr	s14, [r3]
 804102a:	edd7 7a00 	vldr	s15, [r7]
 804102e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041032:	687b      	ldr	r3, [r7, #4]
 8041034:	edd3 6a01 	vldr	s13, [r3, #4]
 8041038:	687b      	ldr	r3, [r7, #4]
 804103a:	edd3 7a03 	vldr	s15, [r3, #12]
 804103e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8041042:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8041046:	687b      	ldr	r3, [r7, #4]
 8041048:	edd3 6a02 	vldr	s13, [r3, #8]
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	edd3 7a04 	vldr	s15, [r3, #16]
 8041052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041056:	ee37 7a27 	vadd.f32	s14, s14, s15
 804105a:	687b      	ldr	r3, [r7, #4]
 804105c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8041060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041064:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8041068:	687b      	ldr	r3, [r7, #4]
 804106a:	68da      	ldr	r2, [r3, #12]
 804106c:	687b      	ldr	r3, [r7, #4]
 804106e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	683a      	ldr	r2, [r7, #0]
 8041074:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8041076:	687b      	ldr	r3, [r7, #4]
 8041078:	68fa      	ldr	r2, [r7, #12]
 804107a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 804107c:	68fb      	ldr	r3, [r7, #12]
 804107e:	ee07 3a90 	vmov	s15, r3

  }
 8041082:	eeb0 0a67 	vmov.f32	s0, s15
 8041086:	3714      	adds	r7, #20
 8041088:	46bd      	mov	sp, r7
 804108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804108e:	4770      	bx	lr

08041090 <reverse>:
msTempControlParams CtrlParams;
uint32_t u32_EEPromErrCnt;

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 8041090:	b480      	push	{r7}
 8041092:	b087      	sub	sp, #28
 8041094:	af00      	add	r7, sp, #0
 8041096:	6078      	str	r0, [r7, #4]
 8041098:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 804109a:	2300      	movs	r3, #0
 804109c:	617b      	str	r3, [r7, #20]
 804109e:	683b      	ldr	r3, [r7, #0]
 80410a0:	3b01      	subs	r3, #1
 80410a2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80410a4:	e018      	b.n	80410d8 <reverse+0x48>
        temp = str[i];
 80410a6:	697b      	ldr	r3, [r7, #20]
 80410a8:	687a      	ldr	r2, [r7, #4]
 80410aa:	4413      	add	r3, r2
 80410ac:	781b      	ldrb	r3, [r3, #0]
 80410ae:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80410b0:	693b      	ldr	r3, [r7, #16]
 80410b2:	687a      	ldr	r2, [r7, #4]
 80410b4:	441a      	add	r2, r3
 80410b6:	697b      	ldr	r3, [r7, #20]
 80410b8:	6879      	ldr	r1, [r7, #4]
 80410ba:	440b      	add	r3, r1
 80410bc:	7812      	ldrb	r2, [r2, #0]
 80410be:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80410c0:	693b      	ldr	r3, [r7, #16]
 80410c2:	687a      	ldr	r2, [r7, #4]
 80410c4:	4413      	add	r3, r2
 80410c6:	68fa      	ldr	r2, [r7, #12]
 80410c8:	b2d2      	uxtb	r2, r2
 80410ca:	701a      	strb	r2, [r3, #0]
        i++;
 80410cc:	697b      	ldr	r3, [r7, #20]
 80410ce:	3301      	adds	r3, #1
 80410d0:	617b      	str	r3, [r7, #20]
        j--;
 80410d2:	693b      	ldr	r3, [r7, #16]
 80410d4:	3b01      	subs	r3, #1
 80410d6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80410d8:	697a      	ldr	r2, [r7, #20]
 80410da:	693b      	ldr	r3, [r7, #16]
 80410dc:	429a      	cmp	r2, r3
 80410de:	dbe2      	blt.n	80410a6 <reverse+0x16>
    }
}
 80410e0:	bf00      	nop
 80410e2:	bf00      	nop
 80410e4:	371c      	adds	r7, #28
 80410e6:	46bd      	mov	sp, r7
 80410e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410ec:	4770      	bx	lr
	...

080410f0 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b086      	sub	sp, #24
 80410f4:	af00      	add	r7, sp, #0
 80410f6:	60f8      	str	r0, [r7, #12]
 80410f8:	60b9      	str	r1, [r7, #8]
 80410fa:	607a      	str	r2, [r7, #4]
    int i = 0;
 80410fc:	2300      	movs	r3, #0
 80410fe:	617b      	str	r3, [r7, #20]
    while (x) {
 8041100:	e01d      	b.n	804113e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8041102:	68fa      	ldr	r2, [r7, #12]
 8041104:	4b1d      	ldr	r3, [pc, #116]	; (804117c <intToStr+0x8c>)
 8041106:	fb83 1302 	smull	r1, r3, r3, r2
 804110a:	1099      	asrs	r1, r3, #2
 804110c:	17d3      	asrs	r3, r2, #31
 804110e:	1ac9      	subs	r1, r1, r3
 8041110:	460b      	mov	r3, r1
 8041112:	009b      	lsls	r3, r3, #2
 8041114:	440b      	add	r3, r1
 8041116:	005b      	lsls	r3, r3, #1
 8041118:	1ad1      	subs	r1, r2, r3
 804111a:	b2ca      	uxtb	r2, r1
 804111c:	697b      	ldr	r3, [r7, #20]
 804111e:	1c59      	adds	r1, r3, #1
 8041120:	6179      	str	r1, [r7, #20]
 8041122:	4619      	mov	r1, r3
 8041124:	68bb      	ldr	r3, [r7, #8]
 8041126:	440b      	add	r3, r1
 8041128:	3230      	adds	r2, #48	; 0x30
 804112a:	b2d2      	uxtb	r2, r2
 804112c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 804112e:	68fb      	ldr	r3, [r7, #12]
 8041130:	4a12      	ldr	r2, [pc, #72]	; (804117c <intToStr+0x8c>)
 8041132:	fb82 1203 	smull	r1, r2, r2, r3
 8041136:	1092      	asrs	r2, r2, #2
 8041138:	17db      	asrs	r3, r3, #31
 804113a:	1ad3      	subs	r3, r2, r3
 804113c:	60fb      	str	r3, [r7, #12]
    while (x) {
 804113e:	68fb      	ldr	r3, [r7, #12]
 8041140:	2b00      	cmp	r3, #0
 8041142:	d1de      	bne.n	8041102 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8041144:	e007      	b.n	8041156 <intToStr+0x66>
        str[i++] = '0';
 8041146:	697b      	ldr	r3, [r7, #20]
 8041148:	1c5a      	adds	r2, r3, #1
 804114a:	617a      	str	r2, [r7, #20]
 804114c:	461a      	mov	r2, r3
 804114e:	68bb      	ldr	r3, [r7, #8]
 8041150:	4413      	add	r3, r2
 8041152:	2230      	movs	r2, #48	; 0x30
 8041154:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8041156:	697a      	ldr	r2, [r7, #20]
 8041158:	687b      	ldr	r3, [r7, #4]
 804115a:	429a      	cmp	r2, r3
 804115c:	dbf3      	blt.n	8041146 <intToStr+0x56>

    reverse(str, i);
 804115e:	6979      	ldr	r1, [r7, #20]
 8041160:	68b8      	ldr	r0, [r7, #8]
 8041162:	f7ff ff95 	bl	8041090 <reverse>
    str[i] = '\0';
 8041166:	697b      	ldr	r3, [r7, #20]
 8041168:	68ba      	ldr	r2, [r7, #8]
 804116a:	4413      	add	r3, r2
 804116c:	2200      	movs	r2, #0
 804116e:	701a      	strb	r2, [r3, #0]
    return i;
 8041170:	697b      	ldr	r3, [r7, #20]
}
 8041172:	4618      	mov	r0, r3
 8041174:	3718      	adds	r7, #24
 8041176:	46bd      	mov	sp, r7
 8041178:	bd80      	pop	{r7, pc}
 804117a:	bf00      	nop
 804117c:	66666667 	.word	0x66666667

08041180 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, unsigned char* res, int afterpoint)
{
 8041180:	b5b0      	push	{r4, r5, r7, lr}
 8041182:	b088      	sub	sp, #32
 8041184:	af00      	add	r7, sp, #0
 8041186:	ed87 0a03 	vstr	s0, [r7, #12]
 804118a:	60b8      	str	r0, [r7, #8]
 804118c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 804118e:	edd7 7a03 	vldr	s15, [r7, #12]
 8041192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8041196:	ee17 3a90 	vmov	r3, s15
 804119a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 804119c:	69fb      	ldr	r3, [r7, #28]
 804119e:	ee07 3a90 	vmov	s15, r3
 80411a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80411a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80411aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80411ae:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80411b2:	2200      	movs	r2, #0
 80411b4:	68b9      	ldr	r1, [r7, #8]
 80411b6:	69f8      	ldr	r0, [r7, #28]
 80411b8:	f7ff ff9a 	bl	80410f0 <intToStr>
 80411bc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80411be:	687b      	ldr	r3, [r7, #4]
 80411c0:	2b00      	cmp	r3, #0
 80411c2:	d030      	beq.n	8041226 <ftoa+0xa6>
        res[i] = '.'; // add dot
 80411c4:	697b      	ldr	r3, [r7, #20]
 80411c6:	68ba      	ldr	r2, [r7, #8]
 80411c8:	4413      	add	r3, r2
 80411ca:	222e      	movs	r2, #46	; 0x2e
 80411cc:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80411ce:	69b8      	ldr	r0, [r7, #24]
 80411d0:	f7ff f9ba 	bl	8040548 <__aeabi_f2d>
 80411d4:	4604      	mov	r4, r0
 80411d6:	460d      	mov	r5, r1
 80411d8:	6878      	ldr	r0, [r7, #4]
 80411da:	f7ff f9a3 	bl	8040524 <__aeabi_i2d>
 80411de:	4602      	mov	r2, r0
 80411e0:	460b      	mov	r3, r1
 80411e2:	ec43 2b11 	vmov	d1, r2, r3
 80411e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8041230 <ftoa+0xb0>
 80411ea:	f00b fa41 	bl	804c670 <pow>
 80411ee:	ec53 2b10 	vmov	r2, r3, d0
 80411f2:	4620      	mov	r0, r4
 80411f4:	4629      	mov	r1, r5
 80411f6:	f7ff f9ff 	bl	80405f8 <__aeabi_dmul>
 80411fa:	4602      	mov	r2, r0
 80411fc:	460b      	mov	r3, r1
 80411fe:	4610      	mov	r0, r2
 8041200:	4619      	mov	r1, r3
 8041202:	f7ff fcf1 	bl	8040be8 <__aeabi_d2f>
 8041206:	4603      	mov	r3, r0
 8041208:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 804120a:	edd7 7a06 	vldr	s15, [r7, #24]
 804120e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8041212:	697b      	ldr	r3, [r7, #20]
 8041214:	3301      	adds	r3, #1
 8041216:	68ba      	ldr	r2, [r7, #8]
 8041218:	4413      	add	r3, r2
 804121a:	687a      	ldr	r2, [r7, #4]
 804121c:	4619      	mov	r1, r3
 804121e:	ee17 0a90 	vmov	r0, s15
 8041222:	f7ff ff65 	bl	80410f0 <intToStr>
    }
}
 8041226:	bf00      	nop
 8041228:	3720      	adds	r7, #32
 804122a:	46bd      	mov	sp, r7
 804122c:	bdb0      	pop	{r4, r5, r7, pc}
 804122e:	bf00      	nop
 8041230:	00000000 	.word	0x00000000
 8041234:	40240000 	.word	0x40240000

08041238 <calculateReflowCurve>:




void calculateReflowCurve(ReflowTemplate *p_ReflowParameters, uint16_t *p_ReflowCurve, uint16_t *p_PhaseIndex){
 8041238:	b5b0      	push	{r4, r5, r7, lr}
 804123a:	b08e      	sub	sp, #56	; 0x38
 804123c:	af00      	add	r7, sp, #0
 804123e:	60f8      	str	r0, [r7, #12]
 8041240:	60b9      	str	r1, [r7, #8]
 8041242:	607a      	str	r2, [r7, #4]
	static uint16_t ReflowCurve[15000];
	size_t s_ReflowCurve;
	size_t s_PhaseIndex;
	int index;

	index=0;
 8041244:	2300      	movs	r3, #0
 8041246:	637b      	str	r3, [r7, #52]	; 0x34
	s_ReflowCurve=0;
 8041248:	2300      	movs	r3, #0
 804124a:	623b      	str	r3, [r7, #32]
	s_PhaseIndex=0;
 804124c:	2300      	movs	r3, #0
 804124e:	61fb      	str	r3, [r7, #28]

	float timestep = 0.5;
 8041250:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8041254:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i =0;i<4000;i++){
 8041256:	2300      	movs	r3, #0
 8041258:	62fb      	str	r3, [r7, #44]	; 0x2c
 804125a:	e00f      	b.n	804127c <calculateReflowCurve+0x44>
		ReflowCurve[i]=0;
 804125c:	4aaa      	ldr	r2, [pc, #680]	; (8041508 <calculateReflowCurve+0x2d0>)
 804125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041260:	2100      	movs	r1, #0
 8041262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if(5>i)
 8041266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041268:	2b04      	cmp	r3, #4
 804126a:	dc04      	bgt.n	8041276 <calculateReflowCurve+0x3e>
		{
		PhaseIndex[i]=0;
 804126c:	4aa7      	ldr	r2, [pc, #668]	; (804150c <calculateReflowCurve+0x2d4>)
 804126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041270:	2100      	movs	r1, #0
 8041272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i =0;i<4000;i++){
 8041276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041278:	3301      	adds	r3, #1
 804127a:	62fb      	str	r3, [r7, #44]	; 0x2c
 804127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804127e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8041282:	dbeb      	blt.n	804125c <calculateReflowCurve+0x24>
		}
	}


	//First Heat Up:
	while (24 + timestep * p_ReflowParameters->firstHeatUpRate <= p_ReflowParameters->SoakTempeture) {
 8041284:	e01e      	b.n	80412c4 <calculateReflowCurve+0x8c>
	ReflowCurve[index] = 24 + timestep * p_ReflowParameters->firstHeatUpRate;
 8041286:	68fb      	ldr	r3, [r7, #12]
 8041288:	ed93 7a03 	vldr	s14, [r3, #12]
 804128c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8041290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8041294:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8041298:	ee77 7a87 	vadd.f32	s15, s15, s14
 804129c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80412a0:	ee17 3a90 	vmov	r3, s15
 80412a4:	b299      	uxth	r1, r3
 80412a6:	4a98      	ldr	r2, [pc, #608]	; (8041508 <calculateReflowCurve+0x2d0>)
 80412a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80412aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	index++;
 80412ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80412b0:	3301      	adds	r3, #1
 80412b2:	637b      	str	r3, [r7, #52]	; 0x34
	timestep = timestep + 0.5;
 80412b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80412b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80412bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80412c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	while (24 + timestep * p_ReflowParameters->firstHeatUpRate <= p_ReflowParameters->SoakTempeture) {
 80412c4:	68fb      	ldr	r3, [r7, #12]
 80412c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80412ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80412ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80412d2:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80412d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80412da:	68fb      	ldr	r3, [r7, #12]
 80412dc:	691b      	ldr	r3, [r3, #16]
 80412de:	ee07 3a90 	vmov	s15, r3
 80412e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80412e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80412ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80412ee:	d9ca      	bls.n	8041286 <calculateReflowCurve+0x4e>
	}
	PhaseIndex[1]=index;
 80412f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80412f2:	b29a      	uxth	r2, r3
 80412f4:	4b85      	ldr	r3, [pc, #532]	; (804150c <calculateReflowCurve+0x2d4>)
 80412f6:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*p_ReflowParameters->SoakTime;
 80412f8:	68fb      	ldr	r3, [r7, #12]
 80412fa:	695b      	ldr	r3, [r3, #20]
 80412fc:	005b      	lsls	r3, r3, #1
 80412fe:	61bb      	str	r3, [r7, #24]

	for(int i=0;i<Soakduration;i++){
 8041300:	2300      	movs	r3, #0
 8041302:	62bb      	str	r3, [r7, #40]	; 0x28
 8041304:	e00b      	b.n	804131e <calculateReflowCurve+0xe6>
		ReflowCurve[index+i]=p_ReflowParameters->SoakTempeture;
 8041306:	68fb      	ldr	r3, [r7, #12]
 8041308:	6919      	ldr	r1, [r3, #16]
 804130a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804130e:	4413      	add	r3, r2
 8041310:	b289      	uxth	r1, r1
 8041312:	4a7d      	ldr	r2, [pc, #500]	; (8041508 <calculateReflowCurve+0x2d0>)
 8041314:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<Soakduration;i++){
 8041318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804131a:	3301      	adds	r3, #1
 804131c:	62bb      	str	r3, [r7, #40]	; 0x28
 804131e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8041320:	69bb      	ldr	r3, [r7, #24]
 8041322:	429a      	cmp	r2, r3
 8041324:	dbef      	blt.n	8041306 <calculateReflowCurve+0xce>
	}


	//Second Heat Up:
	index = index + Soakduration;
 8041326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8041328:	69bb      	ldr	r3, [r7, #24]
 804132a:	4413      	add	r3, r2
 804132c:	637b      	str	r3, [r7, #52]	; 0x34
	PhaseIndex[2]=index;
 804132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041330:	b29a      	uxth	r2, r3
 8041332:	4b76      	ldr	r3, [pc, #472]	; (804150c <calculateReflowCurve+0x2d4>)
 8041334:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8041336:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 804133a:	633b      	str	r3, [r7, #48]	; 0x30
	while (p_ReflowParameters->SoakTempeture + timestep * p_ReflowParameters->secondHeatUpRate <= p_ReflowParameters->ReflowTempeture) {
 804133c:	e02c      	b.n	8041398 <calculateReflowCurve+0x160>
	ReflowCurve[index] = p_ReflowParameters->SoakTempeture + (uint8_t)timestep * p_ReflowParameters->secondHeatUpRate;
 804133e:	68fb      	ldr	r3, [r7, #12]
 8041340:	691b      	ldr	r3, [r3, #16]
 8041342:	ee07 3a90 	vmov	s15, r3
 8041346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 804134a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041352:	edc7 7a00 	vstr	s15, [r7]
 8041356:	683b      	ldr	r3, [r7, #0]
 8041358:	b2db      	uxtb	r3, r3
 804135a:	ee07 3a90 	vmov	s15, r3
 804135e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8041362:	68fb      	ldr	r3, [r7, #12]
 8041364:	edd3 7a06 	vldr	s15, [r3, #24]
 8041368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 804136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041374:	ee17 3a90 	vmov	r3, s15
 8041378:	b299      	uxth	r1, r3
 804137a:	4a63      	ldr	r2, [pc, #396]	; (8041508 <calculateReflowCurve+0x2d0>)
 804137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804137e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	index++;
 8041382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041384:	3301      	adds	r3, #1
 8041386:	637b      	str	r3, [r7, #52]	; 0x34
	timestep = timestep + 0.5;
 8041388:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 804138c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	while (p_ReflowParameters->SoakTempeture + timestep * p_ReflowParameters->secondHeatUpRate <= p_ReflowParameters->ReflowTempeture) {
 8041398:	68fb      	ldr	r3, [r7, #12]
 804139a:	691b      	ldr	r3, [r3, #16]
 804139c:	ee07 3a90 	vmov	s15, r3
 80413a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80413a4:	68fb      	ldr	r3, [r7, #12]
 80413a6:	edd3 6a06 	vldr	s13, [r3, #24]
 80413aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80413ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80413b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80413b6:	68fb      	ldr	r3, [r7, #12]
 80413b8:	69db      	ldr	r3, [r3, #28]
 80413ba:	ee07 3a90 	vmov	s15, r3
 80413be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80413c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80413c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80413ca:	d9b8      	bls.n	804133e <calculateReflowCurve+0x106>
	}
	PhaseIndex[3]=index;
 80413cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80413ce:	b29a      	uxth	r2, r3
 80413d0:	4b4e      	ldr	r3, [pc, #312]	; (804150c <calculateReflowCurve+0x2d4>)
 80413d2:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*p_ReflowParameters->ReflowTime;
 80413d4:	68fb      	ldr	r3, [r7, #12]
 80413d6:	6a1b      	ldr	r3, [r3, #32]
 80413d8:	005b      	lsls	r3, r3, #1
 80413da:	617b      	str	r3, [r7, #20]

	for(int i=0;i<Reflowduration;i++){
 80413dc:	2300      	movs	r3, #0
 80413de:	627b      	str	r3, [r7, #36]	; 0x24
 80413e0:	e00b      	b.n	80413fa <calculateReflowCurve+0x1c2>
		ReflowCurve[index+i]=p_ReflowParameters->ReflowTempeture;
 80413e2:	68fb      	ldr	r3, [r7, #12]
 80413e4:	69d9      	ldr	r1, [r3, #28]
 80413e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80413e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80413ea:	4413      	add	r3, r2
 80413ec:	b289      	uxth	r1, r1
 80413ee:	4a46      	ldr	r2, [pc, #280]	; (8041508 <calculateReflowCurve+0x2d0>)
 80413f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<Reflowduration;i++){
 80413f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80413f6:	3301      	adds	r3, #1
 80413f8:	627b      	str	r3, [r7, #36]	; 0x24
 80413fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80413fc:	697b      	ldr	r3, [r7, #20]
 80413fe:	429a      	cmp	r2, r3
 8041400:	dbef      	blt.n	80413e2 <calculateReflowCurve+0x1aa>
	}

	index = index + Reflowduration;
 8041402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8041404:	697b      	ldr	r3, [r7, #20]
 8041406:	4413      	add	r3, r2
 8041408:	637b      	str	r3, [r7, #52]	; 0x34
	ReflowCurve[index]=0;
 804140a:	4a3f      	ldr	r2, [pc, #252]	; (8041508 <calculateReflowCurve+0x2d0>)
 804140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804140e:	2100      	movs	r1, #0
 8041410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	PhaseIndex[4]=index;
 8041414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041416:	b29a      	uxth	r2, r3
 8041418:	4b3c      	ldr	r3, [pc, #240]	; (804150c <calculateReflowCurve+0x2d4>)
 804141a:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 804141c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8041420:	633b      	str	r3, [r7, #48]	; 0x30
	while (p_ReflowParameters->ReflowTempeture - timestep * 1.8 >= 24) {
 8041422:	e02f      	b.n	8041484 <calculateReflowCurve+0x24c>
	ReflowCurve[index] = p_ReflowParameters->ReflowTempeture - timestep * 1.8;
 8041424:	68fb      	ldr	r3, [r7, #12]
 8041426:	69db      	ldr	r3, [r3, #28]
 8041428:	4618      	mov	r0, r3
 804142a:	f7ff f86b 	bl	8040504 <__aeabi_ui2d>
 804142e:	4604      	mov	r4, r0
 8041430:	460d      	mov	r5, r1
 8041432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8041434:	f7ff f888 	bl	8040548 <__aeabi_f2d>
 8041438:	a331      	add	r3, pc, #196	; (adr r3, 8041500 <calculateReflowCurve+0x2c8>)
 804143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804143e:	f7ff f8db 	bl	80405f8 <__aeabi_dmul>
 8041442:	4602      	mov	r2, r0
 8041444:	460b      	mov	r3, r1
 8041446:	4620      	mov	r0, r4
 8041448:	4629      	mov	r1, r5
 804144a:	f7fe ff1d 	bl	8040288 <__aeabi_dsub>
 804144e:	4602      	mov	r2, r0
 8041450:	460b      	mov	r3, r1
 8041452:	4610      	mov	r0, r2
 8041454:	4619      	mov	r1, r3
 8041456:	f7ff fba7 	bl	8040ba8 <__aeabi_d2uiz>
 804145a:	4603      	mov	r3, r0
 804145c:	b299      	uxth	r1, r3
 804145e:	4a2a      	ldr	r2, [pc, #168]	; (8041508 <calculateReflowCurve+0x2d0>)
 8041460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	index++;
 8041466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041468:	3301      	adds	r3, #1
 804146a:	637b      	str	r3, [r7, #52]	; 0x34
	timestep = timestep + 0.5;
 804146c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8041470:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8041474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8041478:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	PhaseIndex[5]=index;
 804147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804147e:	b29a      	uxth	r2, r3
 8041480:	4b22      	ldr	r3, [pc, #136]	; (804150c <calculateReflowCurve+0x2d4>)
 8041482:	815a      	strh	r2, [r3, #10]
	while (p_ReflowParameters->ReflowTempeture - timestep * 1.8 >= 24) {
 8041484:	68fb      	ldr	r3, [r7, #12]
 8041486:	69db      	ldr	r3, [r3, #28]
 8041488:	4618      	mov	r0, r3
 804148a:	f7ff f83b 	bl	8040504 <__aeabi_ui2d>
 804148e:	4604      	mov	r4, r0
 8041490:	460d      	mov	r5, r1
 8041492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8041494:	f7ff f858 	bl	8040548 <__aeabi_f2d>
 8041498:	a319      	add	r3, pc, #100	; (adr r3, 8041500 <calculateReflowCurve+0x2c8>)
 804149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804149e:	f7ff f8ab 	bl	80405f8 <__aeabi_dmul>
 80414a2:	4602      	mov	r2, r0
 80414a4:	460b      	mov	r3, r1
 80414a6:	4620      	mov	r0, r4
 80414a8:	4629      	mov	r1, r5
 80414aa:	f7fe feed 	bl	8040288 <__aeabi_dsub>
 80414ae:	4602      	mov	r2, r0
 80414b0:	460b      	mov	r3, r1
 80414b2:	4610      	mov	r0, r2
 80414b4:	4619      	mov	r1, r3
 80414b6:	f04f 0200 	mov.w	r2, #0
 80414ba:	4b15      	ldr	r3, [pc, #84]	; (8041510 <calculateReflowCurve+0x2d8>)
 80414bc:	f7ff fb22 	bl	8040b04 <__aeabi_dcmpge>
 80414c0:	4603      	mov	r3, r0
 80414c2:	2b00      	cmp	r3, #0
 80414c4:	d1ae      	bne.n	8041424 <calculateReflowCurve+0x1ec>
	}
	s_ReflowCurve = sizeof(ReflowCurve);
 80414c6:	f247 5330 	movw	r3, #30000	; 0x7530
 80414ca:	623b      	str	r3, [r7, #32]
	s_PhaseIndex  = sizeof(PhaseIndex);
 80414cc:	230c      	movs	r3, #12
 80414ce:	61fb      	str	r3, [r7, #28]

	if(0<s_ReflowCurve || 0< s_PhaseIndex)
 80414d0:	6a3b      	ldr	r3, [r7, #32]
 80414d2:	2b00      	cmp	r3, #0
 80414d4:	d102      	bne.n	80414dc <calculateReflowCurve+0x2a4>
 80414d6:	69fb      	ldr	r3, [r7, #28]
 80414d8:	2b00      	cmp	r3, #0
 80414da:	d00a      	beq.n	80414f2 <calculateReflowCurve+0x2ba>
	{
		//custom_memcpy(p_PhaseIndex,&PhaseIndex,s_PhaseIndex);
		memcpy((uint8_t*)p_PhaseIndex,(uint8_t*)PhaseIndex,s_PhaseIndex);
 80414dc:	69fa      	ldr	r2, [r7, #28]
 80414de:	490b      	ldr	r1, [pc, #44]	; (804150c <calculateReflowCurve+0x2d4>)
 80414e0:	6878      	ldr	r0, [r7, #4]
 80414e2:	f006 fc53 	bl	8047d8c <memcpy>
		memcpy((uint8_t*)p_ReflowCurve,(uint8_t*)ReflowCurve,s_ReflowCurve);
 80414e6:	6a3a      	ldr	r2, [r7, #32]
 80414e8:	4907      	ldr	r1, [pc, #28]	; (8041508 <calculateReflowCurve+0x2d0>)
 80414ea:	68b8      	ldr	r0, [r7, #8]
 80414ec:	f006 fc4e 	bl	8047d8c <memcpy>
	else
	{
		while(1);
	}

}
 80414f0:	e000      	b.n	80414f4 <calculateReflowCurve+0x2bc>
		while(1);
 80414f2:	e7fe      	b.n	80414f2 <calculateReflowCurve+0x2ba>
}
 80414f4:	3738      	adds	r7, #56	; 0x38
 80414f6:	46bd      	mov	sp, r7
 80414f8:	bdb0      	pop	{r4, r5, r7, pc}
 80414fa:	bf00      	nop
 80414fc:	f3af 8000 	nop.w
 8041500:	cccccccd 	.word	0xcccccccd
 8041504:	3ffccccc 	.word	0x3ffccccc
 8041508:	20000210 	.word	0x20000210
 804150c:	20007740 	.word	0x20007740
 8041510:	40380000 	.word	0x40380000

08041514 <HandleGui>:

void HandleGui(){
 8041514:	b580      	push	{r7, lr}
 8041516:	b086      	sub	sp, #24
 8041518:	af00      	add	r7, sp, #0
	//###################ErrorCheck##########################

uint32_t	u32_encoder_cnt_loc;
float		f_hx;
unsigned char enc_string[10] = {"    "};
 804151a:	4a2d      	ldr	r2, [pc, #180]	; (80415d0 <HandleGui+0xbc>)
 804151c:	463b      	mov	r3, r7
 804151e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8041522:	6018      	str	r0, [r3, #0]
 8041524:	3304      	adds	r3, #4
 8041526:	7019      	strb	r1, [r3, #0]
 8041528:	1d7b      	adds	r3, r7, #5
 804152a:	2200      	movs	r2, #0
 804152c:	601a      	str	r2, [r3, #0]
 804152e:	711a      	strb	r2, [r3, #4]
static uint8_t State_gui	 = MaxNumberofS_x_States;

/*TODO SORT THE WRITE STRING TO CLEAR AFTER EVERY WRITE*/

	u32_encoder_cnt_loc=0;
 8041530:	2300      	movs	r3, #0
 8041532:	613b      	str	r3, [r7, #16]

	lcd_clear_cmd();
 8041534:	f001 fed7 	bl	80432e6 <lcd_clear_cmd>

	if (-1==temperature)
 8041538:	4b26      	ldr	r3, [pc, #152]	; (80415d4 <HandleGui+0xc0>)
 804153a:	edd3 7a00 	vldr	s15, [r3]
 804153e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8041542:	eef4 7a47 	vcmp.f32	s15, s14
 8041546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804154a:	d130      	bne.n	80415ae <HandleGui+0x9a>
	{
		int errorCnt=0;
 804154c:	2300      	movs	r3, #0
 804154e:	617b      	str	r3, [r7, #20]
		State=Error;
 8041550:	4b21      	ldr	r3, [pc, #132]	; (80415d8 <HandleGui+0xc4>)
 8041552:	2206      	movs	r2, #6
 8041554:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(1, 0);
 8041556:	2100      	movs	r1, #0
 8041558:	2001      	movs	r0, #1
 804155a:	f001 fed4 	bl	8043306 <lcd_put_cur>
		lcd_send_string("Sensor Error");
 804155e:	481f      	ldr	r0, [pc, #124]	; (80415dc <HandleGui+0xc8>)
 8041560:	f001 ff2d 	bl	80433be <lcd_send_string>
		HAL_Delay(2000);
 8041564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8041568:	f002 fe8a 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 804156c:	f001 febb 	bl	80432e6 <lcd_clear_cmd>
		while(1)
		{
			if(0==errorCnt)
 8041570:	697b      	ldr	r3, [r7, #20]
 8041572:	2b00      	cmp	r3, #0
 8041574:	d110      	bne.n	8041598 <HandleGui+0x84>
			{

			lcd_put_cur(0, 0);
 8041576:	2100      	movs	r1, #0
 8041578:	2000      	movs	r0, #0
 804157a:	f001 fec4 	bl	8043306 <lcd_put_cur>
			lcd_send_string("Recconnect");
 804157e:	4818      	ldr	r0, [pc, #96]	; (80415e0 <HandleGui+0xcc>)
 8041580:	f001 ff1d 	bl	80433be <lcd_send_string>
			lcd_put_cur(1, 0);
 8041584:	2100      	movs	r1, #0
 8041586:	2001      	movs	r0, #1
 8041588:	f001 febd 	bl	8043306 <lcd_put_cur>
			lcd_send_string("Sensor");
 804158c:	4815      	ldr	r0, [pc, #84]	; (80415e4 <HandleGui+0xd0>)
 804158e:	f001 ff16 	bl	80433be <lcd_send_string>
			errorCnt++;
 8041592:	697b      	ldr	r3, [r7, #20]
 8041594:	3301      	adds	r3, #1
 8041596:	617b      	str	r3, [r7, #20]
			}
			if (-1!=temperature)
 8041598:	4b0e      	ldr	r3, [pc, #56]	; (80415d4 <HandleGui+0xc0>)
 804159a:	edd3 7a00 	vldr	s15, [r3]
 804159e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80415a2:	eef4 7a47 	vcmp.f32	s15, s14
 80415a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80415aa:	d121      	bne.n	80415f0 <HandleGui+0xdc>
			if(0==errorCnt)
 80415ac:	e7e0      	b.n	8041570 <HandleGui+0x5c>
			//HAL_Delay(200);
		}
	}
	else
	{
		lcd_clear_cmd();
 80415ae:	f001 fe9a 	bl	80432e6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80415b2:	2100      	movs	r1, #0
 80415b4:	2000      	movs	r0, #0
 80415b6:	f001 fea6 	bl	8043306 <lcd_put_cur>
		lcd_send_string("Initializing...");
 80415ba:	480b      	ldr	r0, [pc, #44]	; (80415e8 <HandleGui+0xd4>)
 80415bc:	f001 feff 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 0);
 80415c0:	2100      	movs	r1, #0
 80415c2:	2001      	movs	r0, #1
 80415c4:	f001 fe9f 	bl	8043306 <lcd_put_cur>
		lcd_send_string("Sensor OK");
 80415c8:	4808      	ldr	r0, [pc, #32]	; (80415ec <HandleGui+0xd8>)
 80415ca:	f001 fef8 	bl	80433be <lcd_send_string>
 80415ce:	e010      	b.n	80415f2 <HandleGui+0xde>
 80415d0:	0804d6dc 	.word	0x0804d6dc
 80415d4:	2000eca0 	.word	0x2000eca0
 80415d8:	2000ee70 	.word	0x2000ee70
 80415dc:	0804d5e0 	.word	0x0804d5e0
 80415e0:	0804d5f0 	.word	0x0804d5f0
 80415e4:	0804d5fc 	.word	0x0804d5fc
 80415e8:	0804d604 	.word	0x0804d604
 80415ec:	0804d614 	.word	0x0804d614
				break;
 80415f0:	bf00      	nop
//	  volatile HAL_StatusTypeDef status_erase2;
//
//
//
//	  status_erase2 = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError2);
	  HAL_FLASH_Unlock();
 80415f2:	f003 f801 	bl	80445f8 <HAL_FLASH_Unlock>
	  /* Unlock the Flash Program Erase controller */
		 /* EEPROM Init */
	    if( EE_Init() != EE_OK)
 80415f6:	f001 f81f 	bl	8042638 <EE_Init>
 80415fa:	4603      	mov	r3, r0
 80415fc:	2b00      	cmp	r3, #0
 80415fe:	d004      	beq.n	804160a <HandleGui+0xf6>
	    {
	 	   u32_EEPromErrCnt++;
 8041600:	4bb6      	ldr	r3, [pc, #728]	; (80418dc <HandleGui+0x3c8>)
 8041602:	681b      	ldr	r3, [r3, #0]
 8041604:	3301      	adds	r3, #1
 8041606:	4ab5      	ldr	r2, [pc, #724]	; (80418dc <HandleGui+0x3c8>)
 8041608:	6013      	str	r3, [r2, #0]
	    {

	    }


	if( HAL_ERROR == FEE_ReadCtrlParams( &CtrlParams, p_ReflowParameters ) )
 804160a:	4bb5      	ldr	r3, [pc, #724]	; (80418e0 <HandleGui+0x3cc>)
 804160c:	681b      	ldr	r3, [r3, #0]
 804160e:	4619      	mov	r1, r3
 8041610:	48b4      	ldr	r0, [pc, #720]	; (80418e4 <HandleGui+0x3d0>)
 8041612:	f001 fcf7 	bl	8043004 <FEE_ReadCtrlParams>
 8041616:	4603      	mov	r3, r0
 8041618:	2b01      	cmp	r3, #1
 804161a:	d12c      	bne.n	8041676 <HandleGui+0x162>
	{
		CtrlParams.ui8_bank1Percentage=100;
 804161c:	4bb1      	ldr	r3, [pc, #708]	; (80418e4 <HandleGui+0x3d0>)
 804161e:	2264      	movs	r2, #100	; 0x64
 8041620:	701a      	strb	r2, [r3, #0]
		CtrlParams.ui8_bank2Percentage=100;
 8041622:	4bb0      	ldr	r3, [pc, #704]	; (80418e4 <HandleGui+0x3d0>)
 8041624:	2264      	movs	r2, #100	; 0x64
 8041626:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP=200;
 8041628:	4bad      	ldr	r3, [pc, #692]	; (80418e0 <HandleGui+0x3cc>)
 804162a:	681b      	ldr	r3, [r3, #0]
 804162c:	4aae      	ldr	r2, [pc, #696]	; (80418e8 <HandleGui+0x3d4>)
 804162e:	601a      	str	r2, [r3, #0]
		p_ReflowParameters->ReflowTempeture=250;
 8041630:	4bab      	ldr	r3, [pc, #684]	; (80418e0 <HandleGui+0x3cc>)
 8041632:	681b      	ldr	r3, [r3, #0]
 8041634:	22fa      	movs	r2, #250	; 0xfa
 8041636:	61da      	str	r2, [r3, #28]
		p_ReflowParameters->ReflowTime=100;
 8041638:	4ba9      	ldr	r3, [pc, #676]	; (80418e0 <HandleGui+0x3cc>)
 804163a:	681b      	ldr	r3, [r3, #0]
 804163c:	2264      	movs	r2, #100	; 0x64
 804163e:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->SoakTempeture=110;
 8041640:	4ba7      	ldr	r3, [pc, #668]	; (80418e0 <HandleGui+0x3cc>)
 8041642:	681b      	ldr	r3, [r3, #0]
 8041644:	226e      	movs	r2, #110	; 0x6e
 8041646:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->SoakTime=150;
 8041648:	4ba5      	ldr	r3, [pc, #660]	; (80418e0 <HandleGui+0x3cc>)
 804164a:	681b      	ldr	r3, [r3, #0]
 804164c:	2296      	movs	r2, #150	; 0x96
 804164e:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->firstHeatUpRate=2.0;
 8041650:	4ba3      	ldr	r3, [pc, #652]	; (80418e0 <HandleGui+0x3cc>)
 8041652:	681b      	ldr	r3, [r3, #0]
 8041654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8041658:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate=2.0;
 804165a:	4ba1      	ldr	r3, [pc, #644]	; (80418e0 <HandleGui+0x3cc>)
 804165c:	681b      	ldr	r3, [r3, #0]
 804165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8041662:	619a      	str	r2, [r3, #24]
		/*FlashWrite*/
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8041664:	4ba1      	ldr	r3, [pc, #644]	; (80418ec <HandleGui+0x3d8>)
 8041666:	22f3      	movs	r2, #243	; 0xf3
 8041668:	60da      	str	r2, [r3, #12]
		FEE_WriteCtrlParams(&CtrlParams,p_ReflowParameters);
 804166a:	4b9d      	ldr	r3, [pc, #628]	; (80418e0 <HandleGui+0x3cc>)
 804166c:	681b      	ldr	r3, [r3, #0]
 804166e:	4619      	mov	r1, r3
 8041670:	489c      	ldr	r0, [pc, #624]	; (80418e4 <HandleGui+0x3d0>)
 8041672:	f001 fc03 	bl	8042e7c <FEE_WriteCtrlParams>
//					else
//					{}
//				}
	}

	FLASH_FlushCaches();
 8041676:	f003 f9fd 	bl	8044a74 <FLASH_FlushCaches>
	HAL_FLASH_Lock();
 804167a:	f002 ffdf 	bl	804463c <HAL_FLASH_Lock>
	lcd_clear_cmd();
 804167e:	f001 fe32 	bl	80432e6 <lcd_clear_cmd>

	TIM1->CNT = (p_ReflowParameters->SoakTempeture) * 4;
 8041682:	4b97      	ldr	r3, [pc, #604]	; (80418e0 <HandleGui+0x3cc>)
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	691b      	ldr	r3, [r3, #16]
 8041688:	4a99      	ldr	r2, [pc, #612]	; (80418f0 <HandleGui+0x3dc>)
 804168a:	009b      	lsls	r3, r3, #2
 804168c:	6253      	str	r3, [r2, #36]	; 0x24

	while(1)
	{
		if(1800 < TIM1->CNT)
 804168e:	4b98      	ldr	r3, [pc, #608]	; (80418f0 <HandleGui+0x3dc>)
 8041690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041692:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8041696:	d903      	bls.n	80416a0 <HandleGui+0x18c>
		{
			TIM1->CNT = 1800;
 8041698:	4b95      	ldr	r3, [pc, #596]	; (80418f0 <HandleGui+0x3dc>)
 804169a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 804169e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		else
		{

		}
		u32_encoder_cnt_loc = TIM1->CNT/4;
 80416a0:	4b93      	ldr	r3, [pc, #588]	; (80418f0 <HandleGui+0x3dc>)
 80416a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80416a4:	089b      	lsrs	r3, r3, #2
 80416a6:	613b      	str	r3, [r7, #16]
//			lcd_clear_cmd();
//			State_gui = MaxNumberofS_x_States;
//		}


		sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 80416a8:	463b      	mov	r3, r7
 80416aa:	693a      	ldr	r2, [r7, #16]
 80416ac:	4991      	ldr	r1, [pc, #580]	; (80418f4 <HandleGui+0x3e0>)
 80416ae:	4618      	mov	r0, r3
 80416b0:	f007 fa02 	bl	8048ab8 <siprintf>
		lcd_clear_cmd();
 80416b4:	f001 fe17 	bl	80432e6 <lcd_clear_cmd>

		lcd_put_cur(0, 0);
 80416b8:	2100      	movs	r1, #0
 80416ba:	2000      	movs	r0, #0
 80416bc:	f001 fe23 	bl	8043306 <lcd_put_cur>

		lcd_send_string("Enter T1[degC]");
 80416c0:	488d      	ldr	r0, [pc, #564]	; (80418f8 <HandleGui+0x3e4>)
 80416c2:	f001 fe7c 	bl	80433be <lcd_send_string>

		lcd_put_cur(1, 0);
 80416c6:	2100      	movs	r1, #0
 80416c8:	2001      	movs	r0, #1
 80416ca:	f001 fe1c 	bl	8043306 <lcd_put_cur>

		lcd_send_string("T1=");
 80416ce:	488b      	ldr	r0, [pc, #556]	; (80418fc <HandleGui+0x3e8>)
 80416d0:	f001 fe75 	bl	80433be <lcd_send_string>

		lcd_put_cur(1, 3);
 80416d4:	2103      	movs	r1, #3
 80416d6:	2001      	movs	r0, #1
 80416d8:	f001 fe15 	bl	8043306 <lcd_put_cur>

		lcd_send_string(&enc_string);
 80416dc:	463b      	mov	r3, r7
 80416de:	4618      	mov	r0, r3
 80416e0:	f001 fe6d 	bl	80433be <lcd_send_string>
		HAL_Delay(200);
 80416e4:	20c8      	movs	r0, #200	; 0xc8
 80416e6:	f002 fdcb 	bl	8044280 <HAL_Delay>

		if(true==ui8_encButtonPressed)
 80416ea:	4b85      	ldr	r3, [pc, #532]	; (8041900 <HandleGui+0x3ec>)
 80416ec:	781b      	ldrb	r3, [r3, #0]
 80416ee:	b2db      	uxtb	r3, r3
 80416f0:	2b01      	cmp	r3, #1
 80416f2:	d1cc      	bne.n	804168e <HandleGui+0x17a>
		{

			p_ReflowParameters->SoakTempeture=u32_encoder_cnt_loc;
 80416f4:	4b7a      	ldr	r3, [pc, #488]	; (80418e0 <HandleGui+0x3cc>)
 80416f6:	681b      	ldr	r3, [r3, #0]
 80416f8:	693a      	ldr	r2, [r7, #16]
 80416fa:	611a      	str	r2, [r3, #16]
			 ui8_encButtonPressed=false;
 80416fc:	4b80      	ldr	r3, [pc, #512]	; (8041900 <HandleGui+0x3ec>)
 80416fe:	2200      	movs	r2, #0
 8041700:	701a      	strb	r2, [r3, #0]
			break;
 8041702:	bf00      	nop
		}

	}
	//###################Menu2##########################

	HAL_Delay(100);
 8041704:	2064      	movs	r0, #100	; 0x64
 8041706:	f002 fdbb 	bl	8044280 <HAL_Delay>
	lcd_clear_cmd();
 804170a:	f001 fdec 	bl	80432e6 <lcd_clear_cmd>

	TIM1->CNT = (p_ReflowParameters->SoakTime) * 4;
 804170e:	4b74      	ldr	r3, [pc, #464]	; (80418e0 <HandleGui+0x3cc>)
 8041710:	681b      	ldr	r3, [r3, #0]
 8041712:	695b      	ldr	r3, [r3, #20]
 8041714:	4a76      	ldr	r2, [pc, #472]	; (80418f0 <HandleGui+0x3dc>)
 8041716:	009b      	lsls	r3, r3, #2
 8041718:	6253      	str	r3, [r2, #36]	; 0x24
	while(1)
	{


		if(10000 < TIM1->CNT)
 804171a:	4b75      	ldr	r3, [pc, #468]	; (80418f0 <HandleGui+0x3dc>)
 804171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804171e:	f242 7210 	movw	r2, #10000	; 0x2710
 8041722:	4293      	cmp	r3, r2
 8041724:	d903      	bls.n	804172e <HandleGui+0x21a>
		{
			TIM1->CNT = 10000;
 8041726:	4b72      	ldr	r3, [pc, #456]	; (80418f0 <HandleGui+0x3dc>)
 8041728:	f242 7210 	movw	r2, #10000	; 0x2710
 804172c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		else
		{

		}
		u32_encoder_cnt_loc=TIM1->CNT/4;
 804172e:	4b70      	ldr	r3, [pc, #448]	; (80418f0 <HandleGui+0x3dc>)
 8041730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041732:	089b      	lsrs	r3, r3, #2
 8041734:	613b      	str	r3, [r7, #16]

		sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 8041736:	463b      	mov	r3, r7
 8041738:	693a      	ldr	r2, [r7, #16]
 804173a:	496e      	ldr	r1, [pc, #440]	; (80418f4 <HandleGui+0x3e0>)
 804173c:	4618      	mov	r0, r3
 804173e:	f007 f9bb 	bl	8048ab8 <siprintf>
		lcd_clear_cmd();
 8041742:	f001 fdd0 	bl	80432e6 <lcd_clear_cmd>

		lcd_put_cur(0, 0);
 8041746:	2100      	movs	r1, #0
 8041748:	2000      	movs	r0, #0
 804174a:	f001 fddc 	bl	8043306 <lcd_put_cur>

		lcd_send_string("Enter t1 [s]");
 804174e:	486d      	ldr	r0, [pc, #436]	; (8041904 <HandleGui+0x3f0>)
 8041750:	f001 fe35 	bl	80433be <lcd_send_string>

		lcd_put_cur(1, 0);
 8041754:	2100      	movs	r1, #0
 8041756:	2001      	movs	r0, #1
 8041758:	f001 fdd5 	bl	8043306 <lcd_put_cur>

		lcd_send_string("t1=");
 804175c:	486a      	ldr	r0, [pc, #424]	; (8041908 <HandleGui+0x3f4>)
 804175e:	f001 fe2e 	bl	80433be <lcd_send_string>

		lcd_put_cur(1, 3);
 8041762:	2103      	movs	r1, #3
 8041764:	2001      	movs	r0, #1
 8041766:	f001 fdce 	bl	8043306 <lcd_put_cur>

		lcd_send_string(&enc_string);
 804176a:	463b      	mov	r3, r7
 804176c:	4618      	mov	r0, r3
 804176e:	f001 fe26 	bl	80433be <lcd_send_string>
		HAL_Delay(200);
 8041772:	20c8      	movs	r0, #200	; 0xc8
 8041774:	f002 fd84 	bl	8044280 <HAL_Delay>

		if(true == ui8_encButtonPressed)
 8041778:	4b61      	ldr	r3, [pc, #388]	; (8041900 <HandleGui+0x3ec>)
 804177a:	781b      	ldrb	r3, [r3, #0]
 804177c:	b2db      	uxtb	r3, r3
 804177e:	2b01      	cmp	r3, #1
 8041780:	d1cb      	bne.n	804171a <HandleGui+0x206>
		{

			p_ReflowParameters->SoakTime = u32_encoder_cnt_loc;
 8041782:	4b57      	ldr	r3, [pc, #348]	; (80418e0 <HandleGui+0x3cc>)
 8041784:	681b      	ldr	r3, [r3, #0]
 8041786:	693a      	ldr	r2, [r7, #16]
 8041788:	615a      	str	r2, [r3, #20]
			ui8_encButtonPressed = false;
 804178a:	4b5d      	ldr	r3, [pc, #372]	; (8041900 <HandleGui+0x3ec>)
 804178c:	2200      	movs	r2, #0
 804178e:	701a      	strb	r2, [r3, #0]
			break;
 8041790:	bf00      	nop
		}

	}
	//###################Menu3##########################
		HAL_Delay(100);
 8041792:	2064      	movs	r0, #100	; 0x64
 8041794:	f002 fd74 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 8041798:	f001 fda5 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT = (p_ReflowParameters->ReflowTempeture) * 4;
 804179c:	4b50      	ldr	r3, [pc, #320]	; (80418e0 <HandleGui+0x3cc>)
 804179e:	681b      	ldr	r3, [r3, #0]
 80417a0:	69db      	ldr	r3, [r3, #28]
 80417a2:	4a53      	ldr	r2, [pc, #332]	; (80418f0 <HandleGui+0x3dc>)
 80417a4:	009b      	lsls	r3, r3, #2
 80417a6:	6253      	str	r3, [r2, #36]	; 0x24
		while(1)
		{


			if(1800<TIM1->CNT)
 80417a8:	4b51      	ldr	r3, [pc, #324]	; (80418f0 <HandleGui+0x3dc>)
 80417aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80417ac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80417b0:	d903      	bls.n	80417ba <HandleGui+0x2a6>
			{
				TIM1->CNT=1800;
 80417b2:	4b4f      	ldr	r3, [pc, #316]	; (80418f0 <HandleGui+0x3dc>)
 80417b4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80417b8:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			u32_encoder_cnt_loc=TIM1->CNT/4;
 80417ba:	4b4d      	ldr	r3, [pc, #308]	; (80418f0 <HandleGui+0x3dc>)
 80417bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80417be:	089b      	lsrs	r3, r3, #2
 80417c0:	613b      	str	r3, [r7, #16]
			sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 80417c2:	463b      	mov	r3, r7
 80417c4:	693a      	ldr	r2, [r7, #16]
 80417c6:	494b      	ldr	r1, [pc, #300]	; (80418f4 <HandleGui+0x3e0>)
 80417c8:	4618      	mov	r0, r3
 80417ca:	f007 f975 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 80417ce:	f001 fd8a 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 80417d2:	2100      	movs	r1, #0
 80417d4:	2000      	movs	r0, #0
 80417d6:	f001 fd96 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter T2[degC]");
 80417da:	484c      	ldr	r0, [pc, #304]	; (804190c <HandleGui+0x3f8>)
 80417dc:	f001 fdef 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 80417e0:	2100      	movs	r1, #0
 80417e2:	2001      	movs	r0, #1
 80417e4:	f001 fd8f 	bl	8043306 <lcd_put_cur>

			lcd_send_string("T2=");
 80417e8:	4849      	ldr	r0, [pc, #292]	; (8041910 <HandleGui+0x3fc>)
 80417ea:	f001 fde8 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 3);
 80417ee:	2103      	movs	r1, #3
 80417f0:	2001      	movs	r0, #1
 80417f2:	f001 fd88 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 80417f6:	463b      	mov	r3, r7
 80417f8:	4618      	mov	r0, r3
 80417fa:	f001 fde0 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 80417fe:	20c8      	movs	r0, #200	; 0xc8
 8041800:	f002 fd3e 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041804:	4b3e      	ldr	r3, [pc, #248]	; (8041900 <HandleGui+0x3ec>)
 8041806:	781b      	ldrb	r3, [r3, #0]
 8041808:	b2db      	uxtb	r3, r3
 804180a:	2b01      	cmp	r3, #1
 804180c:	d1cc      	bne.n	80417a8 <HandleGui+0x294>
			{

				p_ReflowParameters->ReflowTempeture=u32_encoder_cnt_loc;
 804180e:	4b34      	ldr	r3, [pc, #208]	; (80418e0 <HandleGui+0x3cc>)
 8041810:	681b      	ldr	r3, [r3, #0]
 8041812:	693a      	ldr	r2, [r7, #16]
 8041814:	61da      	str	r2, [r3, #28]
				ui8_encButtonPressed=false;
 8041816:	4b3a      	ldr	r3, [pc, #232]	; (8041900 <HandleGui+0x3ec>)
 8041818:	2200      	movs	r2, #0
 804181a:	701a      	strb	r2, [r3, #0]
				break;
 804181c:	bf00      	nop
			}

		}
		//###################Menu4##########################
		HAL_Delay(100);
 804181e:	2064      	movs	r0, #100	; 0x64
 8041820:	f002 fd2e 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 8041824:	f001 fd5f 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT = (p_ReflowParameters->ReflowTime) * 4;
 8041828:	4b2d      	ldr	r3, [pc, #180]	; (80418e0 <HandleGui+0x3cc>)
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	6a1b      	ldr	r3, [r3, #32]
 804182e:	4a30      	ldr	r2, [pc, #192]	; (80418f0 <HandleGui+0x3dc>)
 8041830:	009b      	lsls	r3, r3, #2
 8041832:	6253      	str	r3, [r2, #36]	; 0x24
		while(1)
		{


			if(10000 < TIM1->CNT)
 8041834:	4b2e      	ldr	r3, [pc, #184]	; (80418f0 <HandleGui+0x3dc>)
 8041836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041838:	f242 7210 	movw	r2, #10000	; 0x2710
 804183c:	4293      	cmp	r3, r2
 804183e:	d903      	bls.n	8041848 <HandleGui+0x334>
			{
				TIM1->CNT = 10000;
 8041840:	4b2b      	ldr	r3, [pc, #172]	; (80418f0 <HandleGui+0x3dc>)
 8041842:	f242 7210 	movw	r2, #10000	; 0x2710
 8041846:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			u32_encoder_cnt_loc=TIM1->CNT/4;
 8041848:	4b29      	ldr	r3, [pc, #164]	; (80418f0 <HandleGui+0x3dc>)
 804184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804184c:	089b      	lsrs	r3, r3, #2
 804184e:	613b      	str	r3, [r7, #16]
			sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 8041850:	463b      	mov	r3, r7
 8041852:	693a      	ldr	r2, [r7, #16]
 8041854:	4927      	ldr	r1, [pc, #156]	; (80418f4 <HandleGui+0x3e0>)
 8041856:	4618      	mov	r0, r3
 8041858:	f007 f92e 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 804185c:	f001 fd43 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 8041860:	2100      	movs	r1, #0
 8041862:	2000      	movs	r0, #0
 8041864:	f001 fd4f 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter t2 [s]");
 8041868:	482a      	ldr	r0, [pc, #168]	; (8041914 <HandleGui+0x400>)
 804186a:	f001 fda8 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 804186e:	2100      	movs	r1, #0
 8041870:	2001      	movs	r0, #1
 8041872:	f001 fd48 	bl	8043306 <lcd_put_cur>

			lcd_send_string("t2=");
 8041876:	4828      	ldr	r0, [pc, #160]	; (8041918 <HandleGui+0x404>)
 8041878:	f001 fda1 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 3);
 804187c:	2103      	movs	r1, #3
 804187e:	2001      	movs	r0, #1
 8041880:	f001 fd41 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041884:	463b      	mov	r3, r7
 8041886:	4618      	mov	r0, r3
 8041888:	f001 fd99 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 804188c:	20c8      	movs	r0, #200	; 0xc8
 804188e:	f002 fcf7 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041892:	4b1b      	ldr	r3, [pc, #108]	; (8041900 <HandleGui+0x3ec>)
 8041894:	781b      	ldrb	r3, [r3, #0]
 8041896:	b2db      	uxtb	r3, r3
 8041898:	2b01      	cmp	r3, #1
 804189a:	d1cb      	bne.n	8041834 <HandleGui+0x320>
			{

				p_ReflowParameters->ReflowTime=u32_encoder_cnt_loc;
 804189c:	4b10      	ldr	r3, [pc, #64]	; (80418e0 <HandleGui+0x3cc>)
 804189e:	681b      	ldr	r3, [r3, #0]
 80418a0:	693a      	ldr	r2, [r7, #16]
 80418a2:	621a      	str	r2, [r3, #32]
				ui8_encButtonPressed=false;
 80418a4:	4b16      	ldr	r3, [pc, #88]	; (8041900 <HandleGui+0x3ec>)
 80418a6:	2200      	movs	r2, #0
 80418a8:	701a      	strb	r2, [r3, #0]
				break;
 80418aa:	bf00      	nop
			}

		}
		//###################Menu5##########################
		HAL_Delay(100);
 80418ac:	2064      	movs	r0, #100	; 0x64
 80418ae:	f002 fce7 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 80418b2:	f001 fd18 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT=(uint16_t)(p_ReflowParameters->firstHeatUpRate * 400.00);
 80418b6:	4b0a      	ldr	r3, [pc, #40]	; (80418e0 <HandleGui+0x3cc>)
 80418b8:	681b      	ldr	r3, [r3, #0]
 80418ba:	68db      	ldr	r3, [r3, #12]
 80418bc:	4618      	mov	r0, r3
 80418be:	f7fe fe43 	bl	8040548 <__aeabi_f2d>
 80418c2:	f04f 0200 	mov.w	r2, #0
 80418c6:	4b15      	ldr	r3, [pc, #84]	; (804191c <HandleGui+0x408>)
 80418c8:	f7fe fe96 	bl	80405f8 <__aeabi_dmul>
 80418cc:	4602      	mov	r2, r0
 80418ce:	460b      	mov	r3, r1
 80418d0:	4610      	mov	r0, r2
 80418d2:	4619      	mov	r1, r3
 80418d4:	f7ff f968 	bl	8040ba8 <__aeabi_d2uiz>
 80418d8:	4603      	mov	r3, r0
 80418da:	e021      	b.n	8041920 <HandleGui+0x40c>
 80418dc:	2000775c 	.word	0x2000775c
 80418e0:	2000eee0 	.word	0x2000eee0
 80418e4:	2000eebc 	.word	0x2000eebc
 80418e8:	43480000 	.word	0x43480000
 80418ec:	40023c00 	.word	0x40023c00
 80418f0:	40010000 	.word	0x40010000
 80418f4:	0804d620 	.word	0x0804d620
 80418f8:	0804d624 	.word	0x0804d624
 80418fc:	0804d634 	.word	0x0804d634
 8041900:	2000ee7d 	.word	0x2000ee7d
 8041904:	0804d638 	.word	0x0804d638
 8041908:	0804d648 	.word	0x0804d648
 804190c:	0804d64c 	.word	0x0804d64c
 8041910:	0804d65c 	.word	0x0804d65c
 8041914:	0804d660 	.word	0x0804d660
 8041918:	0804d670 	.word	0x0804d670
 804191c:	40790000 	.word	0x40790000
 8041920:	b29a      	uxth	r2, r3
 8041922:	4bc2      	ldr	r3, [pc, #776]	; (8041c2c <HandleGui+0x718>)
 8041924:	625a      	str	r2, [r3, #36]	; 0x24
		while(1)
		{


			if(1600<TIM1->CNT)
 8041926:	4bc1      	ldr	r3, [pc, #772]	; (8041c2c <HandleGui+0x718>)
 8041928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804192a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804192e:	d903      	bls.n	8041938 <HandleGui+0x424>
			{
				TIM1->CNT=1600;
 8041930:	4bbe      	ldr	r3, [pc, #760]	; (8041c2c <HandleGui+0x718>)
 8041932:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8041936:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			f_hx=TIM1->CNT/400.00;
 8041938:	4bbc      	ldr	r3, [pc, #752]	; (8041c2c <HandleGui+0x718>)
 804193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804193c:	4618      	mov	r0, r3
 804193e:	f7fe fde1 	bl	8040504 <__aeabi_ui2d>
 8041942:	f04f 0200 	mov.w	r2, #0
 8041946:	4bba      	ldr	r3, [pc, #744]	; (8041c30 <HandleGui+0x71c>)
 8041948:	f7fe ff80 	bl	804084c <__aeabi_ddiv>
 804194c:	4602      	mov	r2, r0
 804194e:	460b      	mov	r3, r1
 8041950:	4610      	mov	r0, r2
 8041952:	4619      	mov	r1, r3
 8041954:	f7ff f948 	bl	8040be8 <__aeabi_d2f>
 8041958:	4603      	mov	r3, r0
 804195a:	60fb      	str	r3, [r7, #12]
			sprintf(&enc_string,"%3.2f",f_hx);
 804195c:	68f8      	ldr	r0, [r7, #12]
 804195e:	f7fe fdf3 	bl	8040548 <__aeabi_f2d>
 8041962:	4602      	mov	r2, r0
 8041964:	460b      	mov	r3, r1
 8041966:	4638      	mov	r0, r7
 8041968:	49b2      	ldr	r1, [pc, #712]	; (8041c34 <HandleGui+0x720>)
 804196a:	f007 f8a5 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 804196e:	f001 fcba 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 8041972:	2100      	movs	r1, #0
 8041974:	2000      	movs	r0, #0
 8041976:	f001 fcc6 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter h1[degC/s]");
 804197a:	48af      	ldr	r0, [pc, #700]	; (8041c38 <HandleGui+0x724>)
 804197c:	f001 fd1f 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 8041980:	2100      	movs	r1, #0
 8041982:	2001      	movs	r0, #1
 8041984:	f001 fcbf 	bl	8043306 <lcd_put_cur>

			lcd_send_string("h1=");
 8041988:	48ac      	ldr	r0, [pc, #688]	; (8041c3c <HandleGui+0x728>)
 804198a:	f001 fd18 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 4);
 804198e:	2104      	movs	r1, #4
 8041990:	2001      	movs	r0, #1
 8041992:	f001 fcb8 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041996:	463b      	mov	r3, r7
 8041998:	4618      	mov	r0, r3
 804199a:	f001 fd10 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 804199e:	20c8      	movs	r0, #200	; 0xc8
 80419a0:	f002 fc6e 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 80419a4:	4ba6      	ldr	r3, [pc, #664]	; (8041c40 <HandleGui+0x72c>)
 80419a6:	781b      	ldrb	r3, [r3, #0]
 80419a8:	b2db      	uxtb	r3, r3
 80419aa:	2b01      	cmp	r3, #1
 80419ac:	d1bb      	bne.n	8041926 <HandleGui+0x412>
			{

				p_ReflowParameters->firstHeatUpRate=f_hx;
 80419ae:	4ba5      	ldr	r3, [pc, #660]	; (8041c44 <HandleGui+0x730>)
 80419b0:	681b      	ldr	r3, [r3, #0]
 80419b2:	68fa      	ldr	r2, [r7, #12]
 80419b4:	60da      	str	r2, [r3, #12]
				ui8_encButtonPressed=false;
 80419b6:	4ba2      	ldr	r3, [pc, #648]	; (8041c40 <HandleGui+0x72c>)
 80419b8:	2200      	movs	r2, #0
 80419ba:	701a      	strb	r2, [r3, #0]
				break;
 80419bc:	bf00      	nop
			}

		}
		//###################Menu6##########################
		HAL_Delay(100);
 80419be:	2064      	movs	r0, #100	; 0x64
 80419c0:	f002 fc5e 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 80419c4:	f001 fc8f 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT=(uint16_t)(p_ReflowParameters->secondHeatUpRate * 400.00);
 80419c8:	4b9e      	ldr	r3, [pc, #632]	; (8041c44 <HandleGui+0x730>)
 80419ca:	681b      	ldr	r3, [r3, #0]
 80419cc:	699b      	ldr	r3, [r3, #24]
 80419ce:	4618      	mov	r0, r3
 80419d0:	f7fe fdba 	bl	8040548 <__aeabi_f2d>
 80419d4:	f04f 0200 	mov.w	r2, #0
 80419d8:	4b95      	ldr	r3, [pc, #596]	; (8041c30 <HandleGui+0x71c>)
 80419da:	f7fe fe0d 	bl	80405f8 <__aeabi_dmul>
 80419de:	4602      	mov	r2, r0
 80419e0:	460b      	mov	r3, r1
 80419e2:	4610      	mov	r0, r2
 80419e4:	4619      	mov	r1, r3
 80419e6:	f7ff f8df 	bl	8040ba8 <__aeabi_d2uiz>
 80419ea:	4603      	mov	r3, r0
 80419ec:	b29a      	uxth	r2, r3
 80419ee:	4b8f      	ldr	r3, [pc, #572]	; (8041c2c <HandleGui+0x718>)
 80419f0:	625a      	str	r2, [r3, #36]	; 0x24
		while(1)
		{

			if(1600<TIM1->CNT)
 80419f2:	4b8e      	ldr	r3, [pc, #568]	; (8041c2c <HandleGui+0x718>)
 80419f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80419f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80419fa:	d903      	bls.n	8041a04 <HandleGui+0x4f0>
			{
				TIM1->CNT=1600;
 80419fc:	4b8b      	ldr	r3, [pc, #556]	; (8041c2c <HandleGui+0x718>)
 80419fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8041a02:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			f_hx=TIM1->CNT/400.00;
 8041a04:	4b89      	ldr	r3, [pc, #548]	; (8041c2c <HandleGui+0x718>)
 8041a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041a08:	4618      	mov	r0, r3
 8041a0a:	f7fe fd7b 	bl	8040504 <__aeabi_ui2d>
 8041a0e:	f04f 0200 	mov.w	r2, #0
 8041a12:	4b87      	ldr	r3, [pc, #540]	; (8041c30 <HandleGui+0x71c>)
 8041a14:	f7fe ff1a 	bl	804084c <__aeabi_ddiv>
 8041a18:	4602      	mov	r2, r0
 8041a1a:	460b      	mov	r3, r1
 8041a1c:	4610      	mov	r0, r2
 8041a1e:	4619      	mov	r1, r3
 8041a20:	f7ff f8e2 	bl	8040be8 <__aeabi_d2f>
 8041a24:	4603      	mov	r3, r0
 8041a26:	60fb      	str	r3, [r7, #12]
			sprintf(&enc_string,"%3.2f",f_hx);
 8041a28:	68f8      	ldr	r0, [r7, #12]
 8041a2a:	f7fe fd8d 	bl	8040548 <__aeabi_f2d>
 8041a2e:	4602      	mov	r2, r0
 8041a30:	460b      	mov	r3, r1
 8041a32:	4638      	mov	r0, r7
 8041a34:	497f      	ldr	r1, [pc, #508]	; (8041c34 <HandleGui+0x720>)
 8041a36:	f007 f83f 	bl	8048ab8 <siprintf>

			lcd_put_cur(0, 0);
 8041a3a:	2100      	movs	r1, #0
 8041a3c:	2000      	movs	r0, #0
 8041a3e:	f001 fc62 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter h2[degC/s]");
 8041a42:	4881      	ldr	r0, [pc, #516]	; (8041c48 <HandleGui+0x734>)
 8041a44:	f001 fcbb 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 8041a48:	2100      	movs	r1, #0
 8041a4a:	2001      	movs	r0, #1
 8041a4c:	f001 fc5b 	bl	8043306 <lcd_put_cur>

			lcd_send_string("h2=");
 8041a50:	487e      	ldr	r0, [pc, #504]	; (8041c4c <HandleGui+0x738>)
 8041a52:	f001 fcb4 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 4);
 8041a56:	2104      	movs	r1, #4
 8041a58:	2001      	movs	r0, #1
 8041a5a:	f001 fc54 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041a5e:	463b      	mov	r3, r7
 8041a60:	4618      	mov	r0, r3
 8041a62:	f001 fcac 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 8041a66:	20c8      	movs	r0, #200	; 0xc8
 8041a68:	f002 fc0a 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041a6c:	4b74      	ldr	r3, [pc, #464]	; (8041c40 <HandleGui+0x72c>)
 8041a6e:	781b      	ldrb	r3, [r3, #0]
 8041a70:	b2db      	uxtb	r3, r3
 8041a72:	2b01      	cmp	r3, #1
 8041a74:	d1bd      	bne.n	80419f2 <HandleGui+0x4de>
			{

				p_ReflowParameters->secondHeatUpRate=f_hx;
 8041a76:	4b73      	ldr	r3, [pc, #460]	; (8041c44 <HandleGui+0x730>)
 8041a78:	681b      	ldr	r3, [r3, #0]
 8041a7a:	68fa      	ldr	r2, [r7, #12]
 8041a7c:	619a      	str	r2, [r3, #24]
				ui8_encButtonPressed=false;
 8041a7e:	4b70      	ldr	r3, [pc, #448]	; (8041c40 <HandleGui+0x72c>)
 8041a80:	2200      	movs	r2, #0
 8041a82:	701a      	strb	r2, [r3, #0]
				break;
 8041a84:	bf00      	nop
			}

		}

		//###################Menu6##########################
		HAL_Delay(100);
 8041a86:	2064      	movs	r0, #100	; 0x64
 8041a88:	f002 fbfa 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 8041a8c:	f001 fc2b 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT=(uint16_t)p_ReflowParameters->KP *4;
 8041a90:	4b6c      	ldr	r3, [pc, #432]	; (8041c44 <HandleGui+0x730>)
 8041a92:	681b      	ldr	r3, [r3, #0]
 8041a94:	edd3 7a00 	vldr	s15, [r3]
 8041a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041a9c:	ee17 3a90 	vmov	r3, s15
 8041aa0:	b29b      	uxth	r3, r3
 8041aa2:	009a      	lsls	r2, r3, #2
 8041aa4:	4b61      	ldr	r3, [pc, #388]	; (8041c2c <HandleGui+0x718>)
 8041aa6:	625a      	str	r2, [r3, #36]	; 0x24
		while(1)
		{


			if(8000<TIM1->CNT)
 8041aa8:	4b60      	ldr	r3, [pc, #384]	; (8041c2c <HandleGui+0x718>)
 8041aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041aac:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8041ab0:	d903      	bls.n	8041aba <HandleGui+0x5a6>
			{
				TIM1->CNT=8000;
 8041ab2:	4b5e      	ldr	r3, [pc, #376]	; (8041c2c <HandleGui+0x718>)
 8041ab4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8041ab8:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			u32_encoder_cnt_loc=TIM1->CNT/4;
 8041aba:	4b5c      	ldr	r3, [pc, #368]	; (8041c2c <HandleGui+0x718>)
 8041abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041abe:	089b      	lsrs	r3, r3, #2
 8041ac0:	613b      	str	r3, [r7, #16]
			sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 8041ac2:	463b      	mov	r3, r7
 8041ac4:	693a      	ldr	r2, [r7, #16]
 8041ac6:	4962      	ldr	r1, [pc, #392]	; (8041c50 <HandleGui+0x73c>)
 8041ac8:	4618      	mov	r0, r3
 8041aca:	f006 fff5 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 8041ace:	f001 fc0a 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 8041ad2:	2100      	movs	r1, #0
 8041ad4:	2000      	movs	r0, #0
 8041ad6:	f001 fc16 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter KP");
 8041ada:	485e      	ldr	r0, [pc, #376]	; (8041c54 <HandleGui+0x740>)
 8041adc:	f001 fc6f 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 8041ae0:	2100      	movs	r1, #0
 8041ae2:	2001      	movs	r0, #1
 8041ae4:	f001 fc0f 	bl	8043306 <lcd_put_cur>

			lcd_send_string("KP=");
 8041ae8:	485b      	ldr	r0, [pc, #364]	; (8041c58 <HandleGui+0x744>)
 8041aea:	f001 fc68 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 4);
 8041aee:	2104      	movs	r1, #4
 8041af0:	2001      	movs	r0, #1
 8041af2:	f001 fc08 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041af6:	463b      	mov	r3, r7
 8041af8:	4618      	mov	r0, r3
 8041afa:	f001 fc60 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 8041afe:	20c8      	movs	r0, #200	; 0xc8
 8041b00:	f002 fbbe 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041b04:	4b4e      	ldr	r3, [pc, #312]	; (8041c40 <HandleGui+0x72c>)
 8041b06:	781b      	ldrb	r3, [r3, #0]
 8041b08:	b2db      	uxtb	r3, r3
 8041b0a:	2b01      	cmp	r3, #1
 8041b0c:	d1cc      	bne.n	8041aa8 <HandleGui+0x594>
			{

				p_ReflowParameters->KP=(float32_t)u32_encoder_cnt_loc;
 8041b0e:	4b4d      	ldr	r3, [pc, #308]	; (8041c44 <HandleGui+0x730>)
 8041b10:	681b      	ldr	r3, [r3, #0]
 8041b12:	693a      	ldr	r2, [r7, #16]
 8041b14:	ee07 2a90 	vmov	s15, r2
 8041b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8041b1c:	edc3 7a00 	vstr	s15, [r3]
				ui8_encButtonPressed=false;
 8041b20:	4b47      	ldr	r3, [pc, #284]	; (8041c40 <HandleGui+0x72c>)
 8041b22:	2200      	movs	r2, #0
 8041b24:	701a      	strb	r2, [r3, #0]
				break;
 8041b26:	bf00      	nop
			}

		}

		//###################Menu7##########################
		HAL_Delay(100);
 8041b28:	2064      	movs	r0, #100	; 0x64
 8041b2a:	f002 fba9 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 8041b2e:	f001 fbda 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank1Percentage * 4;
 8041b32:	4b4a      	ldr	r3, [pc, #296]	; (8041c5c <HandleGui+0x748>)
 8041b34:	781b      	ldrb	r3, [r3, #0]
 8041b36:	009a      	lsls	r2, r3, #2
 8041b38:	4b3c      	ldr	r3, [pc, #240]	; (8041c2c <HandleGui+0x718>)
 8041b3a:	625a      	str	r2, [r3, #36]	; 0x24
		while(1)
		{


			if(400<TIM1->CNT)
 8041b3c:	4b3b      	ldr	r3, [pc, #236]	; (8041c2c <HandleGui+0x718>)
 8041b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041b40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8041b44:	d903      	bls.n	8041b4e <HandleGui+0x63a>
			{
				TIM1->CNT=400;
 8041b46:	4b39      	ldr	r3, [pc, #228]	; (8041c2c <HandleGui+0x718>)
 8041b48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8041b4c:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			u32_encoder_cnt_loc=TIM1->CNT/4;
 8041b4e:	4b37      	ldr	r3, [pc, #220]	; (8041c2c <HandleGui+0x718>)
 8041b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041b52:	089b      	lsrs	r3, r3, #2
 8041b54:	613b      	str	r3, [r7, #16]
			sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 8041b56:	463b      	mov	r3, r7
 8041b58:	693a      	ldr	r2, [r7, #16]
 8041b5a:	493d      	ldr	r1, [pc, #244]	; (8041c50 <HandleGui+0x73c>)
 8041b5c:	4618      	mov	r0, r3
 8041b5e:	f006 ffab 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 8041b62:	f001 fbc0 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 8041b66:	2100      	movs	r1, #0
 8041b68:	2000      	movs	r0, #0
 8041b6a:	f001 fbcc 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter b1[%]");
 8041b6e:	483c      	ldr	r0, [pc, #240]	; (8041c60 <HandleGui+0x74c>)
 8041b70:	f001 fc25 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 8041b74:	2100      	movs	r1, #0
 8041b76:	2001      	movs	r0, #1
 8041b78:	f001 fbc5 	bl	8043306 <lcd_put_cur>

			lcd_send_string("b1=");
 8041b7c:	4839      	ldr	r0, [pc, #228]	; (8041c64 <HandleGui+0x750>)
 8041b7e:	f001 fc1e 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 4);
 8041b82:	2104      	movs	r1, #4
 8041b84:	2001      	movs	r0, #1
 8041b86:	f001 fbbe 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041b8a:	463b      	mov	r3, r7
 8041b8c:	4618      	mov	r0, r3
 8041b8e:	f001 fc16 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 8041b92:	20c8      	movs	r0, #200	; 0xc8
 8041b94:	f002 fb74 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041b98:	4b29      	ldr	r3, [pc, #164]	; (8041c40 <HandleGui+0x72c>)
 8041b9a:	781b      	ldrb	r3, [r3, #0]
 8041b9c:	b2db      	uxtb	r3, r3
 8041b9e:	2b01      	cmp	r3, #1
 8041ba0:	d1cc      	bne.n	8041b3c <HandleGui+0x628>
			{

				CtrlParams.ui8_bank1Percentage=u32_encoder_cnt_loc;
 8041ba2:	693b      	ldr	r3, [r7, #16]
 8041ba4:	b2da      	uxtb	r2, r3
 8041ba6:	4b2d      	ldr	r3, [pc, #180]	; (8041c5c <HandleGui+0x748>)
 8041ba8:	701a      	strb	r2, [r3, #0]
				ui8_encButtonPressed=false;
 8041baa:	4b25      	ldr	r3, [pc, #148]	; (8041c40 <HandleGui+0x72c>)
 8041bac:	2200      	movs	r2, #0
 8041bae:	701a      	strb	r2, [r3, #0]
				break;
 8041bb0:	bf00      	nop
			}

		}
		//###################Menu8##########################
		HAL_Delay(100);
 8041bb2:	2064      	movs	r0, #100	; 0x64
 8041bb4:	f002 fb64 	bl	8044280 <HAL_Delay>
		lcd_clear_cmd();
 8041bb8:	f001 fb95 	bl	80432e6 <lcd_clear_cmd>
		TIM1->CNT = CtrlParams.ui8_bank2Percentage * 4;
 8041bbc:	4b27      	ldr	r3, [pc, #156]	; (8041c5c <HandleGui+0x748>)
 8041bbe:	785b      	ldrb	r3, [r3, #1]
 8041bc0:	009a      	lsls	r2, r3, #2
 8041bc2:	4b1a      	ldr	r3, [pc, #104]	; (8041c2c <HandleGui+0x718>)
 8041bc4:	625a      	str	r2, [r3, #36]	; 0x24
		while(1)
		{

			if(400<TIM1->CNT)
 8041bc6:	4b19      	ldr	r3, [pc, #100]	; (8041c2c <HandleGui+0x718>)
 8041bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041bca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8041bce:	d903      	bls.n	8041bd8 <HandleGui+0x6c4>
			{
				TIM1->CNT=400;
 8041bd0:	4b16      	ldr	r3, [pc, #88]	; (8041c2c <HandleGui+0x718>)
 8041bd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8041bd6:	625a      	str	r2, [r3, #36]	; 0x24
			}
			else
			{

			}
			u32_encoder_cnt_loc=TIM1->CNT/4;
 8041bd8:	4b14      	ldr	r3, [pc, #80]	; (8041c2c <HandleGui+0x718>)
 8041bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041bdc:	089b      	lsrs	r3, r3, #2
 8041bde:	613b      	str	r3, [r7, #16]
			sprintf(&enc_string,"%u",u32_encoder_cnt_loc);
 8041be0:	463b      	mov	r3, r7
 8041be2:	693a      	ldr	r2, [r7, #16]
 8041be4:	491a      	ldr	r1, [pc, #104]	; (8041c50 <HandleGui+0x73c>)
 8041be6:	4618      	mov	r0, r3
 8041be8:	f006 ff66 	bl	8048ab8 <siprintf>
			lcd_clear_cmd();
 8041bec:	f001 fb7b 	bl	80432e6 <lcd_clear_cmd>

			lcd_put_cur(0, 0);
 8041bf0:	2100      	movs	r1, #0
 8041bf2:	2000      	movs	r0, #0
 8041bf4:	f001 fb87 	bl	8043306 <lcd_put_cur>

			lcd_send_string("Enter b2[%]");
 8041bf8:	481b      	ldr	r0, [pc, #108]	; (8041c68 <HandleGui+0x754>)
 8041bfa:	f001 fbe0 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 0);
 8041bfe:	2100      	movs	r1, #0
 8041c00:	2001      	movs	r0, #1
 8041c02:	f001 fb80 	bl	8043306 <lcd_put_cur>

			lcd_send_string("b2=");
 8041c06:	4819      	ldr	r0, [pc, #100]	; (8041c6c <HandleGui+0x758>)
 8041c08:	f001 fbd9 	bl	80433be <lcd_send_string>

			lcd_put_cur(1, 4);
 8041c0c:	2104      	movs	r1, #4
 8041c0e:	2001      	movs	r0, #1
 8041c10:	f001 fb79 	bl	8043306 <lcd_put_cur>

			lcd_send_string(&enc_string);
 8041c14:	463b      	mov	r3, r7
 8041c16:	4618      	mov	r0, r3
 8041c18:	f001 fbd1 	bl	80433be <lcd_send_string>
			HAL_Delay(200);
 8041c1c:	20c8      	movs	r0, #200	; 0xc8
 8041c1e:	f002 fb2f 	bl	8044280 <HAL_Delay>

			if(true==ui8_encButtonPressed)
 8041c22:	4b07      	ldr	r3, [pc, #28]	; (8041c40 <HandleGui+0x72c>)
 8041c24:	781b      	ldrb	r3, [r3, #0]
 8041c26:	b2db      	uxtb	r3, r3
 8041c28:	2b01      	cmp	r3, #1
 8041c2a:	e021      	b.n	8041c70 <HandleGui+0x75c>
 8041c2c:	40010000 	.word	0x40010000
 8041c30:	40790000 	.word	0x40790000
 8041c34:	0804d674 	.word	0x0804d674
 8041c38:	0804d67c 	.word	0x0804d67c
 8041c3c:	0804d690 	.word	0x0804d690
 8041c40:	2000ee7d 	.word	0x2000ee7d
 8041c44:	2000eee0 	.word	0x2000eee0
 8041c48:	0804d694 	.word	0x0804d694
 8041c4c:	0804d6a8 	.word	0x0804d6a8
 8041c50:	0804d620 	.word	0x0804d620
 8041c54:	0804d6ac 	.word	0x0804d6ac
 8041c58:	0804d6b8 	.word	0x0804d6b8
 8041c5c:	2000eebc 	.word	0x2000eebc
 8041c60:	0804d6bc 	.word	0x0804d6bc
 8041c64:	0804d6c8 	.word	0x0804d6c8
 8041c68:	0804d6cc 	.word	0x0804d6cc
 8041c6c:	0804d6d8 	.word	0x0804d6d8
 8041c70:	d1a9      	bne.n	8041bc6 <HandleGui+0x6b2>
			{

				CtrlParams.ui8_bank2Percentage=u32_encoder_cnt_loc;
 8041c72:	693b      	ldr	r3, [r7, #16]
 8041c74:	b2da      	uxtb	r2, r3
 8041c76:	4b0d      	ldr	r3, [pc, #52]	; (8041cac <HandleGui+0x798>)
 8041c78:	705a      	strb	r2, [r3, #1]
				ui8_encButtonPressed=false;
 8041c7a:	4b0d      	ldr	r3, [pc, #52]	; (8041cb0 <HandleGui+0x79c>)
 8041c7c:	2200      	movs	r2, #0
 8041c7e:	701a      	strb	r2, [r3, #0]
				break;
 8041c80:	bf00      	nop
			}

		}


		HAL_FLASH_Unlock();
 8041c82:	f002 fcb9 	bl	80445f8 <HAL_FLASH_Unlock>
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);
 8041c86:	4b0b      	ldr	r3, [pc, #44]	; (8041cb4 <HandleGui+0x7a0>)
 8041c88:	22f3      	movs	r2, #243	; 0xf3
 8041c8a:	60da      	str	r2, [r3, #12]
		FEE_WriteCtrlParams(&CtrlParams,p_ReflowParameters);
 8041c8c:	4b0a      	ldr	r3, [pc, #40]	; (8041cb8 <HandleGui+0x7a4>)
 8041c8e:	681b      	ldr	r3, [r3, #0]
 8041c90:	4619      	mov	r1, r3
 8041c92:	4806      	ldr	r0, [pc, #24]	; (8041cac <HandleGui+0x798>)
 8041c94:	f001 f8f2 	bl	8042e7c <FEE_WriteCtrlParams>

		HAL_FLASH_Lock();
 8041c98:	f002 fcd0 	bl	804463c <HAL_FLASH_Lock>



		Flags.StartFlag=true;
 8041c9c:	4b07      	ldr	r3, [pc, #28]	; (8041cbc <HandleGui+0x7a8>)
 8041c9e:	2201      	movs	r2, #1
 8041ca0:	701a      	strb	r2, [r3, #0]


}
 8041ca2:	bf00      	nop
 8041ca4:	3718      	adds	r7, #24
 8041ca6:	46bd      	mov	sp, r7
 8041ca8:	bd80      	pop	{r7, pc}
 8041caa:	bf00      	nop
 8041cac:	2000eebc 	.word	0x2000eebc
 8041cb0:	2000ee7d 	.word	0x2000ee7d
 8041cb4:	40023c00 	.word	0x40023c00
 8041cb8:	2000eee0 	.word	0x2000eee0
 8041cbc:	2000eeb0 	.word	0x2000eeb0

08041cc0 <readTemperatureData>:

void readTemperatureData(volatile float* temperature_val)
{
 8041cc0:	b580      	push	{r7, lr}
 8041cc2:	b084      	sub	sp, #16
 8041cc4:	af00      	add	r7, sp, #0
 8041cc6:	6078      	str	r0, [r7, #4]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 8041cc8:	2201      	movs	r2, #1
 8041cca:	2110      	movs	r1, #16
 8041ccc:	4820      	ldr	r0, [pc, #128]	; (8041d50 <readTemperatureData+0x90>)
 8041cce:	f003 f8b3 	bl	8044e38 <HAL_GPIO_WritePin>
			uint8_t data8[2]={0};
 8041cd2:	2300      	movs	r3, #0
 8041cd4:	81bb      	strh	r3, [r7, #12]
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 8041cd6:	2200      	movs	r2, #0
 8041cd8:	2110      	movs	r1, #16
 8041cda:	481d      	ldr	r0, [pc, #116]	; (8041d50 <readTemperatureData+0x90>)
 8041cdc:	f003 f8ac 	bl	8044e38 <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 8041ce0:	f107 010c 	add.w	r1, r7, #12
 8041ce4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8041ce8:	2202      	movs	r2, #2
 8041cea:	481a      	ldr	r0, [pc, #104]	; (8041d54 <readTemperatureData+0x94>)
 8041cec:	f004 fa31 	bl	8046152 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 8041cf0:	2201      	movs	r2, #1
 8041cf2:	2110      	movs	r1, #16
 8041cf4:	4816      	ldr	r0, [pc, #88]	; (8041d50 <readTemperatureData+0x90>)
 8041cf6:	f003 f89f 	bl	8044e38 <HAL_GPIO_WritePin>
			uint16_t sum={0};
 8041cfa:	2300      	movs	r3, #0
 8041cfc:	81fb      	strh	r3, [r7, #14]
			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 8041cfe:	7b7b      	ldrb	r3, [r7, #13]
 8041d00:	b21a      	sxth	r2, r3
 8041d02:	7b3b      	ldrb	r3, [r7, #12]
 8041d04:	021b      	lsls	r3, r3, #8
 8041d06:	b21b      	sxth	r3, r3
 8041d08:	4313      	orrs	r3, r2
 8041d0a:	b21b      	sxth	r3, r3
 8041d0c:	81fb      	strh	r3, [r7, #14]
			if(sum &	0x0004)//No TC connected, error -1
 8041d0e:	89fb      	ldrh	r3, [r7, #14]
 8041d10:	f003 0304 	and.w	r3, r3, #4
 8041d14:	2b00      	cmp	r3, #0
 8041d16:	d003      	beq.n	8041d20 <readTemperatureData+0x60>
			{
				(*temperature_val)=-1;
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	4a0f      	ldr	r2, [pc, #60]	; (8041d58 <readTemperatureData+0x98>)
 8041d1c:	601a      	str	r2, [r3, #0]
			{
				(*temperature_val)=((sum>>3)/4.0);
			}


}
 8041d1e:	e013      	b.n	8041d48 <readTemperatureData+0x88>
				(*temperature_val)=((sum>>3)/4.0);
 8041d20:	89fb      	ldrh	r3, [r7, #14]
 8041d22:	08db      	lsrs	r3, r3, #3
 8041d24:	b29b      	uxth	r3, r3
 8041d26:	4618      	mov	r0, r3
 8041d28:	f7fe fbfc 	bl	8040524 <__aeabi_i2d>
 8041d2c:	f04f 0200 	mov.w	r2, #0
 8041d30:	4b0a      	ldr	r3, [pc, #40]	; (8041d5c <readTemperatureData+0x9c>)
 8041d32:	f7fe fd8b 	bl	804084c <__aeabi_ddiv>
 8041d36:	4602      	mov	r2, r0
 8041d38:	460b      	mov	r3, r1
 8041d3a:	4610      	mov	r0, r2
 8041d3c:	4619      	mov	r1, r3
 8041d3e:	f7fe ff53 	bl	8040be8 <__aeabi_d2f>
 8041d42:	4602      	mov	r2, r0
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	601a      	str	r2, [r3, #0]
}
 8041d48:	bf00      	nop
 8041d4a:	3710      	adds	r7, #16
 8041d4c:	46bd      	mov	sp, r7
 8041d4e:	bd80      	pop	{r7, pc}
 8041d50:	40020000 	.word	0x40020000
 8041d54:	2000ed8c 	.word	0x2000ed8c
 8041d58:	bf800000 	.word	0xbf800000
 8041d5c:	40100000 	.word	0x40100000

08041d60 <msTempControlHandler>:

void msTempControlHandler(msTempControlParams* CtrlParams, uint16_t* p_ReflowCurve, ReflowTemplate *p_ReflowParameters )
{
 8041d60:	b580      	push	{r7, lr}
 8041d62:	b08c      	sub	sp, #48	; 0x30
 8041d64:	af00      	add	r7, sp, #0
 8041d66:	60f8      	str	r0, [r7, #12]
 8041d68:	60b9      	str	r1, [r7, #8]
 8041d6a:	607a      	str	r2, [r7, #4]


  uint8_t *p_bank1Percentage = &CtrlParams->ui8_bank1Percentage;
 8041d6c:	68fb      	ldr	r3, [r7, #12]
 8041d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t *p_bank2Percentage = &CtrlParams->ui8_bank2Percentage;
 8041d70:	68fb      	ldr	r3, [r7, #12]
 8041d72:	3301      	adds	r3, #1
 8041d74:	627b      	str	r3, [r7, #36]	; 0x24
  volatile float *p_temperature = CtrlParams->p_temperature;
 8041d76:	68fb      	ldr	r3, [r7, #12]
 8041d78:	691b      	ldr	r3, [r3, #16]
 8041d7a:	623b      	str	r3, [r7, #32]
  volatile float *p_PIDError = CtrlParams->p_PIDError;
 8041d7c:	68fb      	ldr	r3, [r7, #12]
 8041d7e:	695b      	ldr	r3, [r3, #20]
 8041d80:	61fb      	str	r3, [r7, #28]
  uint16_t ui16_Bank1Limit;
  uint16_t ui16_Bank2Limit;
  uint16_t ReflowIndex = CtrlParams->u16_ReflowIndexCurrent;
 8041d82:	68fb      	ldr	r3, [r7, #12]
 8041d84:	885b      	ldrh	r3, [r3, #2]
 8041d86:	837b      	strh	r3, [r7, #26]
  volatile float pid_error;
  static float32_t f32_PidCorr;
  static uint32_t u32_PidCorr;
  PID.Kp = p_ReflowParameters->KP;
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	681b      	ldr	r3, [r3, #0]
 8041d8c:	4a96      	ldr	r2, [pc, #600]	; (8041fe8 <msTempControlHandler+0x288>)
 8041d8e:	6193      	str	r3, [r2, #24]
  PID.Ki = p_ReflowParameters->Ki;
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	685b      	ldr	r3, [r3, #4]
 8041d94:	4a94      	ldr	r2, [pc, #592]	; (8041fe8 <msTempControlHandler+0x288>)
 8041d96:	61d3      	str	r3, [r2, #28]
  PID.Kd = p_ReflowParameters->KD;
 8041d98:	687b      	ldr	r3, [r7, #4]
 8041d9a:	689b      	ldr	r3, [r3, #8]
 8041d9c:	4a92      	ldr	r2, [pc, #584]	; (8041fe8 <msTempControlHandler+0x288>)
 8041d9e:	6213      	str	r3, [r2, #32]
/*TODO modify temperature reading and PID ctrl in same time period*/
  if( ((*p_bank1Percentage) != 0) &&  ((*p_bank2Percentage) != 0) )
 8041da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041da2:	781b      	ldrb	r3, [r3, #0]
 8041da4:	2b00      	cmp	r3, #0
 8041da6:	d01f      	beq.n	8041de8 <msTempControlHandler+0x88>
 8041da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041daa:	781b      	ldrb	r3, [r3, #0]
 8041dac:	2b00      	cmp	r3, #0
 8041dae:	d01b      	beq.n	8041de8 <msTempControlHandler+0x88>
  {
	  ui16_Bank1Limit = 999 * (*p_bank1Percentage) / 100;
 8041db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041db2:	781b      	ldrb	r3, [r3, #0]
 8041db4:	461a      	mov	r2, r3
 8041db6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041dba:	fb03 f302 	mul.w	r3, r3, r2
 8041dbe:	4a8b      	ldr	r2, [pc, #556]	; (8041fec <msTempControlHandler+0x28c>)
 8041dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8041dc4:	1152      	asrs	r2, r2, #5
 8041dc6:	17db      	asrs	r3, r3, #31
 8041dc8:	1ad3      	subs	r3, r2, r3
 8041dca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  ui16_Bank2Limit = 999 * (*p_bank2Percentage) / 100;
 8041dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041dce:	781b      	ldrb	r3, [r3, #0]
 8041dd0:	461a      	mov	r2, r3
 8041dd2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8041dd6:	fb03 f302 	mul.w	r3, r3, r2
 8041dda:	4a84      	ldr	r2, [pc, #528]	; (8041fec <msTempControlHandler+0x28c>)
 8041ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8041de0:	1152      	asrs	r2, r2, #5
 8041de2:	17db      	asrs	r3, r3, #31
 8041de4:	1ad3      	subs	r3, r2, r3
 8041de6:	85bb      	strh	r3, [r7, #44]	; 0x2c

  }


  /*Temperature Readout*/
  readTemperatureData(p_temperature);
 8041de8:	6a38      	ldr	r0, [r7, #32]
 8041dea:	f7ff ff69 	bl	8041cc0 <readTemperatureData>
  if(avg_temp ==-100)
 8041dee:	4b80      	ldr	r3, [pc, #512]	; (8041ff0 <msTempControlHandler+0x290>)
 8041df0:	edd3 7a00 	vldr	s15, [r3]
 8041df4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8041ff4 <msTempControlHandler+0x294>
 8041df8:	eef4 7a47 	vcmp.f32	s15, s14
 8041dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8041e00:	d103      	bne.n	8041e0a <msTempControlHandler+0xaa>
  {
	  avg_temp = (*p_temperature);
 8041e02:	6a3b      	ldr	r3, [r7, #32]
 8041e04:	681b      	ldr	r3, [r3, #0]
 8041e06:	4a7a      	ldr	r2, [pc, #488]	; (8041ff0 <msTempControlHandler+0x290>)
 8041e08:	6013      	str	r3, [r2, #0]
  }
  else
  {

  }
  avg_temp = alpha * (*p_temperature) + (1 - alpha) * avg_temp;
 8041e0a:	6a3b      	ldr	r3, [r7, #32]
 8041e0c:	edd3 7a00 	vldr	s15, [r3]
 8041e10:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8041ff8 <msTempControlHandler+0x298>
 8041e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8041e18:	eddf 7a77 	vldr	s15, [pc, #476]	; 8041ff8 <msTempControlHandler+0x298>
 8041e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8041e20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8041e24:	4b72      	ldr	r3, [pc, #456]	; (8041ff0 <msTempControlHandler+0x290>)
 8041e26:	edd3 7a00 	vldr	s15, [r3]
 8041e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8041e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041e32:	4b6f      	ldr	r3, [pc, #444]	; (8041ff0 <msTempControlHandler+0x290>)
 8041e34:	edc3 7a00 	vstr	s15, [r3]
  (*p_temperature) = avg_temp;
 8041e38:	4b6d      	ldr	r3, [pc, #436]	; (8041ff0 <msTempControlHandler+0x290>)
 8041e3a:	681a      	ldr	r2, [r3, #0]
 8041e3c:	6a3b      	ldr	r3, [r7, #32]
 8041e3e:	601a      	str	r2, [r3, #0]


  if(1 == ReflowEnable)
 8041e40:	4b6e      	ldr	r3, [pc, #440]	; (8041ffc <msTempControlHandler+0x29c>)
 8041e42:	781b      	ldrb	r3, [r3, #0]
 8041e44:	2b01      	cmp	r3, #1
 8041e46:	f040 80c9 	bne.w	8041fdc <msTempControlHandler+0x27c>

	  //TODO need to perform modification of PID controller in order to get half power
	  //Error
	  //pid_error =temperature  -(float32_t)ReflowCurve[ReflowIndex];
	  //Error for power limitation
	  pid_error = (float32_t) *(p_ReflowCurve+ReflowIndex)-temperature;
 8041e4a:	8b7b      	ldrh	r3, [r7, #26]
 8041e4c:	005b      	lsls	r3, r3, #1
 8041e4e:	68ba      	ldr	r2, [r7, #8]
 8041e50:	4413      	add	r3, r2
 8041e52:	881b      	ldrh	r3, [r3, #0]
 8041e54:	ee07 3a90 	vmov	s15, r3
 8041e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8041e5c:	4b68      	ldr	r3, [pc, #416]	; (8042000 <msTempControlHandler+0x2a0>)
 8041e5e:	edd3 7a00 	vldr	s15, [r3]
 8041e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041e66:	edc7 7a05 	vstr	s15, [r7, #20]
	  *p_PIDError = pid_error;
 8041e6a:	697a      	ldr	r2, [r7, #20]
 8041e6c:	69fb      	ldr	r3, [r7, #28]
 8041e6e:	601a      	str	r2, [r3, #0]
	  *(CtrlParams->p_PIDError) = *(p_PIDError);
 8041e70:	68fb      	ldr	r3, [r7, #12]
 8041e72:	695b      	ldr	r3, [r3, #20]
 8041e74:	69fa      	ldr	r2, [r7, #28]
 8041e76:	6812      	ldr	r2, [r2, #0]
 8041e78:	601a      	str	r2, [r3, #0]
	  //Correction
	  f32_PidCorr = arm_pid_f32(&PID, pid_error);
 8041e7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8041e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8041e82:	4859      	ldr	r0, [pc, #356]	; (8041fe8 <msTempControlHandler+0x288>)
 8041e84:	f7ff f8c8 	bl	8041018 <arm_pid_f32>
 8041e88:	eef0 7a40 	vmov.f32	s15, s0
 8041e8c:	4b5d      	ldr	r3, [pc, #372]	; (8042004 <msTempControlHandler+0x2a4>)
 8041e8e:	edc3 7a00 	vstr	s15, [r3]
	  u32_PidCorr = (uint32_t)f32_PidCorr;
 8041e92:	4b5c      	ldr	r3, [pc, #368]	; (8042004 <msTempControlHandler+0x2a4>)
 8041e94:	edd3 7a00 	vldr	s15, [r3]
 8041e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8041e9c:	ee17 2a90 	vmov	r2, s15
 8041ea0:	4b59      	ldr	r3, [pc, #356]	; (8042008 <msTempControlHandler+0x2a8>)
 8041ea2:	601a      	str	r2, [r3, #0]
	  //Correction limits bank1-set value
	  if (u32_PidCorr > (ui16_Bank1Limit))
 8041ea4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8041ea6:	4b58      	ldr	r3, [pc, #352]	; (8042008 <msTempControlHandler+0x2a8>)
 8041ea8:	681b      	ldr	r3, [r3, #0]
 8041eaa:	429a      	cmp	r2, r3
 8041eac:	d203      	bcs.n	8041eb6 <msTempControlHandler+0x156>
	  {
		  PIDBank1 = ui16_Bank1Limit;
 8041eae:	4a57      	ldr	r2, [pc, #348]	; (804200c <msTempControlHandler+0x2ac>)
 8041eb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041eb2:	8013      	strh	r3, [r2, #0]
 8041eb4:	e004      	b.n	8041ec0 <msTempControlHandler+0x160>
	  }
	  else
	  {
		  PIDBank1 = u32_PidCorr;
 8041eb6:	4b54      	ldr	r3, [pc, #336]	; (8042008 <msTempControlHandler+0x2a8>)
 8041eb8:	681b      	ldr	r3, [r3, #0]
 8041eba:	b29a      	uxth	r2, r3
 8041ebc:	4b53      	ldr	r3, [pc, #332]	; (804200c <msTempControlHandler+0x2ac>)
 8041ebe:	801a      	strh	r2, [r3, #0]
	  }
	  //Correction limits bank2-set value
	  if(u32_PidCorr > ui16_Bank2Limit)
 8041ec0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8041ec2:	4b51      	ldr	r3, [pc, #324]	; (8042008 <msTempControlHandler+0x2a8>)
 8041ec4:	681b      	ldr	r3, [r3, #0]
 8041ec6:	429a      	cmp	r2, r3
 8041ec8:	d203      	bcs.n	8041ed2 <msTempControlHandler+0x172>
	  {
		  PIDBank2 = ui16_Bank2Limit;
 8041eca:	4a51      	ldr	r2, [pc, #324]	; (8042010 <msTempControlHandler+0x2b0>)
 8041ecc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8041ece:	8013      	strh	r3, [r2, #0]
 8041ed0:	e004      	b.n	8041edc <msTempControlHandler+0x17c>
	  }
	  else
	  {
		  PIDBank2 = u32_PidCorr;
 8041ed2:	4b4d      	ldr	r3, [pc, #308]	; (8042008 <msTempControlHandler+0x2a8>)
 8041ed4:	681b      	ldr	r3, [r3, #0]
 8041ed6:	b29a      	uxth	r2, r3
 8041ed8:	4b4d      	ldr	r3, [pc, #308]	; (8042010 <msTempControlHandler+0x2b0>)
 8041eda:	801a      	strh	r2, [r3, #0]
	  //				}
	  //P Control without power limitation
	  //TIM3->CCR2=999-PIDBank1;
	  //TIM3->CCR3=450-PIDBank2;
	  //P Control with power limitation
	  TIM3->CCR2 = PIDBank1;
 8041edc:	4b4b      	ldr	r3, [pc, #300]	; (804200c <msTempControlHandler+0x2ac>)
 8041ede:	881b      	ldrh	r3, [r3, #0]
 8041ee0:	b29a      	uxth	r2, r3
 8041ee2:	4b4c      	ldr	r3, [pc, #304]	; (8042014 <msTempControlHandler+0x2b4>)
 8041ee4:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = PIDBank2;
 8041ee6:	4b4a      	ldr	r3, [pc, #296]	; (8042010 <msTempControlHandler+0x2b0>)
 8041ee8:	881b      	ldrh	r3, [r3, #0]
 8041eea:	b29a      	uxth	r2, r3
 8041eec:	4b49      	ldr	r3, [pc, #292]	; (8042014 <msTempControlHandler+0x2b4>)
 8041eee:	63da      	str	r2, [r3, #60]	; 0x3c
	  if((TIM3->CCR2>0) || (TIM3->CCR3>0))
 8041ef0:	4b48      	ldr	r3, [pc, #288]	; (8042014 <msTempControlHandler+0x2b4>)
 8041ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041ef4:	2b00      	cmp	r3, #0
 8041ef6:	d103      	bne.n	8041f00 <msTempControlHandler+0x1a0>
 8041ef8:	4b46      	ldr	r3, [pc, #280]	; (8042014 <msTempControlHandler+0x2b4>)
 8041efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041efc:	2b00      	cmp	r3, #0
 8041efe:	d006      	beq.n	8041f0e <msTempControlHandler+0x1ae>
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8041f00:	2201      	movs	r2, #1
 8041f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041f06:	4844      	ldr	r0, [pc, #272]	; (8042018 <msTempControlHandler+0x2b8>)
 8041f08:	f002 ff96 	bl	8044e38 <HAL_GPIO_WritePin>
 8041f0c:	e005      	b.n	8041f1a <msTempControlHandler+0x1ba>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041f0e:	2200      	movs	r2, #0
 8041f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041f14:	4840      	ldr	r0, [pc, #256]	; (8042018 <msTempControlHandler+0x2b8>)
 8041f16:	f002 ff8f 	bl	8044e38 <HAL_GPIO_WritePin>
	  }

	  if(	(ReflowIndex >= (PhaseIndex_main[0]+10)	)	&&	(ReflowIndex < PhaseIndex_main[1])	 )
 8041f1a:	4b40      	ldr	r3, [pc, #256]	; (804201c <msTempControlHandler+0x2bc>)
 8041f1c:	881b      	ldrh	r3, [r3, #0]
 8041f1e:	f103 0209 	add.w	r2, r3, #9
 8041f22:	8b7b      	ldrh	r3, [r7, #26]
 8041f24:	429a      	cmp	r2, r3
 8041f26:	da0a      	bge.n	8041f3e <msTempControlHandler+0x1de>
 8041f28:	4b3c      	ldr	r3, [pc, #240]	; (804201c <msTempControlHandler+0x2bc>)
 8041f2a:	885b      	ldrh	r3, [r3, #2]
 8041f2c:	8b7a      	ldrh	r2, [r7, #26]
 8041f2e:	429a      	cmp	r2, r3
 8041f30:	d205      	bcs.n	8041f3e <msTempControlHandler+0x1de>
	  {
		  //sprintf(ConsoleMSG,"HEAT UP");
		  Flags.initComplete = TRUE;
 8041f32:	4b3b      	ldr	r3, [pc, #236]	; (8042020 <msTempControlHandler+0x2c0>)
 8041f34:	2201      	movs	r2, #1
 8041f36:	705a      	strb	r2, [r3, #1]
		  State = Preheat;
 8041f38:	4b3a      	ldr	r3, [pc, #232]	; (8042024 <msTempControlHandler+0x2c4>)
 8041f3a:	2201      	movs	r2, #1
 8041f3c:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[1])
 8041f3e:	4b37      	ldr	r3, [pc, #220]	; (804201c <msTempControlHandler+0x2bc>)
 8041f40:	885b      	ldrh	r3, [r3, #2]
 8041f42:	8b7a      	ldrh	r2, [r7, #26]
 8041f44:	429a      	cmp	r2, r3
 8041f46:	d105      	bne.n	8041f54 <msTempControlHandler+0x1f4>
	  {
		  //sprintf(ConsoleMSG,"SOAK");
		  Flags.preheatComplete_1 = TRUE;
 8041f48:	4b35      	ldr	r3, [pc, #212]	; (8042020 <msTempControlHandler+0x2c0>)
 8041f4a:	2201      	movs	r2, #1
 8041f4c:	709a      	strb	r2, [r3, #2]
		  State = Soak;
 8041f4e:	4b35      	ldr	r3, [pc, #212]	; (8042024 <msTempControlHandler+0x2c4>)
 8041f50:	2202      	movs	r2, #2
 8041f52:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[2])
 8041f54:	4b31      	ldr	r3, [pc, #196]	; (804201c <msTempControlHandler+0x2bc>)
 8041f56:	889b      	ldrh	r3, [r3, #4]
 8041f58:	8b7a      	ldrh	r2, [r7, #26]
 8041f5a:	429a      	cmp	r2, r3
 8041f5c:	d105      	bne.n	8041f6a <msTempControlHandler+0x20a>
	  {
		  //sprintf(ConsoleMSG,"HEAT UP");

		  Flags.soakComplete = TRUE;
 8041f5e:	4b30      	ldr	r3, [pc, #192]	; (8042020 <msTempControlHandler+0x2c0>)
 8041f60:	2201      	movs	r2, #1
 8041f62:	70da      	strb	r2, [r3, #3]
		  State = Preheat;
 8041f64:	4b2f      	ldr	r3, [pc, #188]	; (8042024 <msTempControlHandler+0x2c4>)
 8041f66:	2201      	movs	r2, #1
 8041f68:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[3])
 8041f6a:	4b2c      	ldr	r3, [pc, #176]	; (804201c <msTempControlHandler+0x2bc>)
 8041f6c:	88db      	ldrh	r3, [r3, #6]
 8041f6e:	8b7a      	ldrh	r2, [r7, #26]
 8041f70:	429a      	cmp	r2, r3
 8041f72:	d105      	bne.n	8041f80 <msTempControlHandler+0x220>
	  {
		  //sprintf(ConsoleMSG,"REFLOW");
		  Flags.preheatComplete_2 = TRUE;
 8041f74:	4b2a      	ldr	r3, [pc, #168]	; (8042020 <msTempControlHandler+0x2c0>)
 8041f76:	2201      	movs	r2, #1
 8041f78:	711a      	strb	r2, [r3, #4]
		  State = Reflow;
 8041f7a:	4b2a      	ldr	r3, [pc, #168]	; (8042024 <msTempControlHandler+0x2c4>)
 8041f7c:	2203      	movs	r2, #3
 8041f7e:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if(ReflowIndex == PhaseIndex_main[4])
 8041f80:	4b26      	ldr	r3, [pc, #152]	; (804201c <msTempControlHandler+0x2bc>)
 8041f82:	891b      	ldrh	r3, [r3, #8]
 8041f84:	8b7a      	ldrh	r2, [r7, #26]
 8041f86:	429a      	cmp	r2, r3
 8041f88:	d116      	bne.n	8041fb8 <msTempControlHandler+0x258>
	  {
		  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8041f8a:	2017      	movs	r0, #23
 8041f8c:	f002 fac5 	bl	804451a <HAL_NVIC_DisableIRQ>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8041f90:	2108      	movs	r1, #8
 8041f92:	4825      	ldr	r0, [pc, #148]	; (8042028 <msTempControlHandler+0x2c8>)
 8041f94:	f004 fea2 	bl	8046cdc <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8041f98:	2104      	movs	r1, #4
 8041f9a:	4823      	ldr	r0, [pc, #140]	; (8042028 <msTempControlHandler+0x2c8>)
 8041f9c:	f004 fe9e 	bl	8046cdc <HAL_TIM_PWM_Stop>

		  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8041fa0:	2200      	movs	r2, #0
 8041fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8041fa6:	481c      	ldr	r0, [pc, #112]	; (8042018 <msTempControlHandler+0x2b8>)
 8041fa8:	f002 ff46 	bl	8044e38 <HAL_GPIO_WritePin>
		  //sprintf(ConsoleMSG,"COOL DOWN");
		  Flags.reflowComplete = TRUE;
 8041fac:	4b1c      	ldr	r3, [pc, #112]	; (8042020 <msTempControlHandler+0x2c0>)
 8041fae:	2201      	movs	r2, #1
 8041fb0:	715a      	strb	r2, [r3, #5]
		  State = Cooldown;
 8041fb2:	4b1c      	ldr	r3, [pc, #112]	; (8042024 <msTempControlHandler+0x2c4>)
 8041fb4:	2204      	movs	r2, #4
 8041fb6:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  //do nothing.
	  }
	  if (PhaseIndex_main[5] == ReflowIndex)
 8041fb8:	4b18      	ldr	r3, [pc, #96]	; (804201c <msTempControlHandler+0x2bc>)
 8041fba:	895b      	ldrh	r3, [r3, #10]
 8041fbc:	8b7a      	ldrh	r2, [r7, #26]
 8041fbe:	429a      	cmp	r2, r3
 8041fc0:	d10e      	bne.n	8041fe0 <msTempControlHandler+0x280>
	  {
		  //sprintf(ConsoleMSG,"FINISHED");
		  Flags.cooldownComplete = TRUE;
 8041fc2:	4b17      	ldr	r3, [pc, #92]	; (8042020 <msTempControlHandler+0x2c0>)
 8041fc4:	2201      	movs	r2, #1
 8041fc6:	719a      	strb	r2, [r3, #6]
		  State = Finish;
 8041fc8:	4b16      	ldr	r3, [pc, #88]	; (8042024 <msTempControlHandler+0x2c4>)
 8041fca:	2205      	movs	r2, #5
 8041fcc:	701a      	strb	r2, [r3, #0]
		  ReflowEnable = 0;
 8041fce:	4b0b      	ldr	r3, [pc, #44]	; (8041ffc <msTempControlHandler+0x29c>)
 8041fd0:	2200      	movs	r2, #0
 8041fd2:	701a      	strb	r2, [r3, #0]
		  PIDFlag = 0;
 8041fd4:	4b15      	ldr	r3, [pc, #84]	; (804202c <msTempControlHandler+0x2cc>)
 8041fd6:	2200      	movs	r2, #0
 8041fd8:	701a      	strb	r2, [r3, #0]





}
 8041fda:	e001      	b.n	8041fe0 <msTempControlHandler+0x280>
	  ReflowIndex = 0;
 8041fdc:	2300      	movs	r3, #0
 8041fde:	837b      	strh	r3, [r7, #26]
}
 8041fe0:	bf00      	nop
 8041fe2:	3730      	adds	r7, #48	; 0x30
 8041fe4:	46bd      	mov	sp, r7
 8041fe6:	bd80      	pop	{r7, pc}
 8041fe8:	2000ee34 	.word	0x2000ee34
 8041fec:	51eb851f 	.word	0x51eb851f
 8041ff0:	20000000 	.word	0x20000000
 8041ff4:	c2c80000 	.word	0xc2c80000
 8041ff8:	3dcccccd 	.word	0x3dcccccd
 8041ffc:	2000eeb7 	.word	0x2000eeb7
 8042000:	2000eca0 	.word	0x2000eca0
 8042004:	2000774c 	.word	0x2000774c
 8042008:	20007750 	.word	0x20007750
 804200c:	2000eeb8 	.word	0x2000eeb8
 8042010:	2000eed8 	.word	0x2000eed8
 8042014:	40000400 	.word	0x40000400
 8042018:	40020c00 	.word	0x40020c00
 804201c:	2000ec90 	.word	0x2000ec90
 8042020:	2000eeb0 	.word	0x2000eeb0
 8042024:	2000ee70 	.word	0x2000ee70
 8042028:	2000ecfc 	.word	0x2000ecfc
 804202c:	2000ee94 	.word	0x2000ee94

08042030 <updateGuiVal>:
/// Alice -> BOB : HELLO
/// BOB --> Alice : World
///@enduml
//
void updateGuiVal(msTempControlParams* CtrlParams, ReflowTemplate *p_ReflowParameters, uint16_t *p_PhaseIndex)
{
 8042030:	b580      	push	{r7, lr}
 8042032:	b094      	sub	sp, #80	; 0x50
 8042034:	af00      	add	r7, sp, #0
 8042036:	60f8      	str	r0, [r7, #12]
 8042038:	60b9      	str	r1, [r7, #8]
 804203a:	607a      	str	r2, [r7, #4]
	unsigned char gui_stringFloat[7] = {"\0"};
 804203c:	2300      	movs	r3, #0
 804203e:	627b      	str	r3, [r7, #36]	; 0x24
 8042040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8042044:	2100      	movs	r1, #0
 8042046:	460a      	mov	r2, r1
 8042048:	801a      	strh	r2, [r3, #0]
 804204a:	460a      	mov	r2, r1
 804204c:	709a      	strb	r2, [r3, #2]
	unsigned char gui_stringInt  [4] = {"\0"};
 804204e:	2300      	movs	r3, #0
 8042050:	623b      	str	r3, [r7, #32]
	unsigned char gui_stringTime[10] = {"\0"};
 8042052:	2300      	movs	r3, #0
 8042054:	617b      	str	r3, [r7, #20]
 8042056:	f107 0318 	add.w	r3, r7, #24
 804205a:	2200      	movs	r2, #0
 804205c:	601a      	str	r2, [r3, #0]
 804205e:	809a      	strh	r2, [r3, #4]
	static uint8_t u8_ClearLCDFlag = 0;

	volatile float32_t *p_temperature    = CtrlParams->p_temperature;
 8042060:	68fb      	ldr	r3, [r7, #12]
 8042062:	691b      	ldr	r3, [r3, #16]
 8042064:	64fb      	str	r3, [r7, #76]	; 0x4c
	volatile float32_t *p_PIDError       = CtrlParams->p_PIDError;
 8042066:	68fb      	ldr	r3, [r7, #12]
 8042068:	695b      	ldr	r3, [r3, #20]
 804206a:	64bb      	str	r3, [r7, #72]	; 0x48
	volatile float32_t f_PIDError    = 0;
 804206c:	f04f 0300 	mov.w	r3, #0
 8042070:	613b      	str	r3, [r7, #16]
	uint32_t u32_SoakTemperature     = p_ReflowParameters->SoakTempeture;
 8042072:	68bb      	ldr	r3, [r7, #8]
 8042074:	691b      	ldr	r3, [r3, #16]
 8042076:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t u16_ReflowIndexCurrent  = CtrlParams->u16_ReflowIndexCurrent;
 8042078:	68fb      	ldr	r3, [r7, #12]
 804207a:	885b      	ldrh	r3, [r3, #2]
 804207c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t u16_FirstHeatupTime     =    p_PhaseIndex[1] / 2;
 8042080:	687b      	ldr	r3, [r7, #4]
 8042082:	3302      	adds	r3, #2
 8042084:	881b      	ldrh	r3, [r3, #0]
 8042086:	085b      	lsrs	r3, r3, #1
 8042088:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t u16_SoakTime   	     =  ( p_PhaseIndex[2] - p_PhaseIndex[1] ) /2;
 804208c:	687b      	ldr	r3, [r7, #4]
 804208e:	3304      	adds	r3, #4
 8042090:	881b      	ldrh	r3, [r3, #0]
 8042092:	461a      	mov	r2, r3
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	3302      	adds	r3, #2
 8042098:	881b      	ldrh	r3, [r3, #0]
 804209a:	1ad3      	subs	r3, r2, r3
 804209c:	0fda      	lsrs	r2, r3, #31
 804209e:	4413      	add	r3, r2
 80420a0:	105b      	asrs	r3, r3, #1
 80420a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t u16_SecondHeatupTime    =  ( p_PhaseIndex[3] - p_PhaseIndex[2] ) /2;
 80420a4:	687b      	ldr	r3, [r7, #4]
 80420a6:	3306      	adds	r3, #6
 80420a8:	881b      	ldrh	r3, [r3, #0]
 80420aa:	461a      	mov	r2, r3
 80420ac:	687b      	ldr	r3, [r7, #4]
 80420ae:	3304      	adds	r3, #4
 80420b0:	881b      	ldrh	r3, [r3, #0]
 80420b2:	1ad3      	subs	r3, r2, r3
 80420b4:	0fda      	lsrs	r2, r3, #31
 80420b6:	4413      	add	r3, r2
 80420b8:	105b      	asrs	r3, r3, #1
 80420ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t u16_ReflowTime 	     =  ( p_PhaseIndex[4] - p_PhaseIndex[3] ) /2;
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	3308      	adds	r3, #8
 80420c0:	881b      	ldrh	r3, [r3, #0]
 80420c2:	461a      	mov	r2, r3
 80420c4:	687b      	ldr	r3, [r7, #4]
 80420c6:	3306      	adds	r3, #6
 80420c8:	881b      	ldrh	r3, [r3, #0]
 80420ca:	1ad3      	subs	r3, r2, r3
 80420cc:	0fda      	lsrs	r2, r3, #31
 80420ce:	4413      	add	r3, r2
 80420d0:	105b      	asrs	r3, r3, #1
 80420d2:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t u16_CooldownTime        =  ( p_PhaseIndex[5] - p_PhaseIndex[4] ) /2;
 80420d4:	687b      	ldr	r3, [r7, #4]
 80420d6:	330a      	adds	r3, #10
 80420d8:	881b      	ldrh	r3, [r3, #0]
 80420da:	461a      	mov	r2, r3
 80420dc:	687b      	ldr	r3, [r7, #4]
 80420de:	3308      	adds	r3, #8
 80420e0:	881b      	ldrh	r3, [r3, #0]
 80420e2:	1ad3      	subs	r3, r2, r3
 80420e4:	0fda      	lsrs	r2, r3, #31
 80420e6:	4413      	add	r3, r2
 80420e8:	105b      	asrs	r3, r3, #1
 80420ea:	873b      	strh	r3, [r7, #56]	; 0x38
	uint32_t u32_ReflowTemperature   = p_ReflowParameters->ReflowTempeture;
 80420ec:	68bb      	ldr	r3, [r7, #8]
 80420ee:	69db      	ldr	r3, [r3, #28]
 80420f0:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t u16_CooldownTemperature = 24;
 80420f2:	2318      	movs	r3, #24
 80420f4:	867b      	strh	r3, [r7, #50]	; 0x32
	static uint16_t u16_timeRemaining = 0;
	bool b_SoakComplete              = CtrlParams->p_StatusFlags->soakComplete;
 80420f6:	68fb      	ldr	r3, [r7, #12]
 80420f8:	699b      	ldr	r3, [r3, #24]
 80420fa:	78db      	ldrb	r3, [r3, #3]
 80420fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	bool b_ReflowComplete            = CtrlParams->p_StatusFlags->reflowComplete;
 8042100:	68fb      	ldr	r3, [r7, #12]
 8042102:	699b      	ldr	r3, [r3, #24]
 8042104:	795b      	ldrb	r3, [r3, #5]
 8042106:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool b_PreheatComplete_1         = CtrlParams->p_StatusFlags->preheatComplete_1;
 804210a:	68fb      	ldr	r3, [r7, #12]
 804210c:	699b      	ldr	r3, [r3, #24]
 804210e:	789b      	ldrb	r3, [r3, #2]
 8042110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool b_PreheatComplete_2         = CtrlParams->p_StatusFlags->preheatComplete_2;
 8042114:	68fb      	ldr	r3, [r7, #12]
 8042116:	699b      	ldr	r3, [r3, #24]
 8042118:	791b      	ldrb	r3, [r3, #4]
 804211a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	bool b_InitComplete              = CtrlParams->p_StatusFlags->initComplete;
 804211e:	68fb      	ldr	r3, [r7, #12]
 8042120:	699b      	ldr	r3, [r3, #24]
 8042122:	785b      	ldrb	r3, [r3, #1]
 8042124:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	bool b_CooldownComplete          = CtrlParams->p_StatusFlags->cooldownComplete;
 8042128:	68fb      	ldr	r3, [r7, #12]
 804212a:	699b      	ldr	r3, [r3, #24]
 804212c:	799b      	ldrb	r3, [r3, #6]
 804212e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	static uint8_t State			 = s_1000;
	/*TODO add clear buffer and lcd clear commands */
#warning "add the condition to clear lcd when it is in cooldown phase"
#warning "solve Td write float negative values"

	lcd_clear_cmd();
 8042132:	f001 f8d8 	bl	80432e6 <lcd_clear_cmd>



	f_PIDError = *p_PIDError;
 8042136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8042138:	681b      	ldr	r3, [r3, #0]
 804213a:	613b      	str	r3, [r7, #16]
	if(0 > f_PIDError)
 804213c:	edd7 7a04 	vldr	s15, [r7, #16]
 8042140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8042144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8042148:	d505      	bpl.n	8042156 <updateGuiVal+0x126>
	{
		f_PIDError = f_PIDError *(-1);
 804214a:	edd7 7a04 	vldr	s15, [r7, #16]
 804214e:	eef1 7a67 	vneg.f32	s15, s15
 8042152:	edc7 7a04 	vstr	s15, [r7, #16]
	else
	{

	}

	ftoa( (*p_temperature), gui_stringFloat, 2);
 8042156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042158:	edd3 7a00 	vldr	s15, [r3]
 804215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042160:	2102      	movs	r1, #2
 8042162:	4618      	mov	r0, r3
 8042164:	eeb0 0a67 	vmov.f32	s0, s15
 8042168:	f7ff f80a 	bl	8041180 <ftoa>



	lcd_put_cur(0, 0);
 804216c:	2100      	movs	r1, #0
 804216e:	2000      	movs	r0, #0
 8042170:	f001 f8c9 	bl	8043306 <lcd_put_cur>

	lcd_send_string("T=");
 8042174:	48d0      	ldr	r0, [pc, #832]	; (80424b8 <updateGuiVal+0x488>)
 8042176:	f001 f922 	bl	80433be <lcd_send_string>

	lcd_put_cur(0, 2);
 804217a:	2102      	movs	r1, #2
 804217c:	2000      	movs	r0, #0
 804217e:	f001 f8c2 	bl	8043306 <lcd_put_cur>

	lcd_send_string(&gui_stringFloat);
 8042182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042186:	4618      	mov	r0, r3
 8042188:	f001 f919 	bl	80433be <lcd_send_string>

	ftoa( f_PIDError, gui_stringFloat, 2);
 804218c:	edd7 7a04 	vldr	s15, [r7, #16]
 8042190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042194:	2102      	movs	r1, #2
 8042196:	4618      	mov	r0, r3
 8042198:	eeb0 0a67 	vmov.f32	s0, s15
 804219c:	f7fe fff0 	bl	8041180 <ftoa>

	lcd_put_cur(1, 0);
 80421a0:	2100      	movs	r1, #0
 80421a2:	2001      	movs	r0, #1
 80421a4:	f001 f8af 	bl	8043306 <lcd_put_cur>

	lcd_send_string("Td=");
 80421a8:	48c4      	ldr	r0, [pc, #784]	; (80424bc <updateGuiVal+0x48c>)
 80421aa:	f001 f908 	bl	80433be <lcd_send_string>

	lcd_put_cur(1,3);
 80421ae:	2103      	movs	r1, #3
 80421b0:	2001      	movs	r0, #1
 80421b2:	f001 f8a8 	bl	8043306 <lcd_put_cur>

	lcd_send_string(&gui_stringFloat);
 80421b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80421ba:	4618      	mov	r0, r3
 80421bc:	f001 f8ff 	bl	80433be <lcd_send_string>


	/*First Heatup Phase*/
	if( (true == b_InitComplete) && (true != b_PreheatComplete_1) )
 80421c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80421c4:	2b00      	cmp	r3, #0
 80421c6:	d040      	beq.n	804224a <updateGuiVal+0x21a>
 80421c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80421cc:	f083 0301 	eor.w	r3, r3, #1
 80421d0:	b2db      	uxtb	r3, r3
 80421d2:	2b00      	cmp	r3, #0
 80421d4:	d039      	beq.n	804224a <updateGuiVal+0x21a>
	{



		u16_timeRemaining = u16_FirstHeatupTime - (u16_ReflowIndexCurrent/2);
 80421d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80421da:	085b      	lsrs	r3, r3, #1
 80421dc:	b29b      	uxth	r3, r3
 80421de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80421e2:	1ad3      	subs	r3, r2, r3
 80421e4:	b29a      	uxth	r2, r3
 80421e6:	4bb6      	ldr	r3, [pc, #728]	; (80424c0 <updateGuiVal+0x490>)
 80421e8:	801a      	strh	r2, [r3, #0]





		utoa(u32_SoakTemperature,gui_stringInt,10);
 80421ea:	f107 0320 	add.w	r3, r7, #32
 80421ee:	220a      	movs	r2, #10
 80421f0:	4619      	mov	r1, r3
 80421f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80421f4:	f007 fb74 	bl	80498e0 <utoa>

		lcd_put_cur(0, 9);
 80421f8:	2109      	movs	r1, #9
 80421fa:	2000      	movs	r0, #0
 80421fc:	f001 f883 	bl	8043306 <lcd_put_cur>
		lcd_send_string("T=");
 8042200:	48ad      	ldr	r0, [pc, #692]	; (80424b8 <updateGuiVal+0x488>)
 8042202:	f001 f8dc 	bl	80433be <lcd_send_string>
		lcd_put_cur(0, 11);
 8042206:	210b      	movs	r1, #11
 8042208:	2000      	movs	r0, #0
 804220a:	f001 f87c 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 804220e:	f107 0320 	add.w	r3, r7, #32
 8042212:	4618      	mov	r0, r3
 8042214:	f001 f8d3 	bl	80433be <lcd_send_string>

		utoa(u16_timeRemaining,gui_stringInt,10);
 8042218:	4ba9      	ldr	r3, [pc, #676]	; (80424c0 <updateGuiVal+0x490>)
 804221a:	881b      	ldrh	r3, [r3, #0]
 804221c:	4618      	mov	r0, r3
 804221e:	f107 0320 	add.w	r3, r7, #32
 8042222:	220a      	movs	r2, #10
 8042224:	4619      	mov	r1, r3
 8042226:	f007 fb5b 	bl	80498e0 <utoa>
		lcd_put_cur(1,9);
 804222a:	2109      	movs	r1, #9
 804222c:	2001      	movs	r0, #1
 804222e:	f001 f86a 	bl	8043306 <lcd_put_cur>
		lcd_send_string("t=");
 8042232:	48a4      	ldr	r0, [pc, #656]	; (80424c4 <updateGuiVal+0x494>)
 8042234:	f001 f8c3 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 11);
 8042238:	210b      	movs	r1, #11
 804223a:	2001      	movs	r0, #1
 804223c:	f001 f863 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 8042240:	f107 0320 	add.w	r3, r7, #32
 8042244:	4618      	mov	r0, r3
 8042246:	f001 f8ba 	bl	80433be <lcd_send_string>


	}

	/*SOAK time and Temperature*/
	if( (true == b_PreheatComplete_1) && (true != b_SoakComplete) )
 804224a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 804224e:	2b00      	cmp	r3, #0
 8042250:	d043      	beq.n	80422da <updateGuiVal+0x2aa>
 8042252:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8042256:	f083 0301 	eor.w	r3, r3, #1
 804225a:	b2db      	uxtb	r3, r3
 804225c:	2b00      	cmp	r3, #0
 804225e:	d03c      	beq.n	80422da <updateGuiVal+0x2aa>
	{

		u16_timeRemaining = u16_SoakTime - ( (u16_ReflowIndexCurrent/2) - u16_FirstHeatupTime );
 8042260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8042264:	085b      	lsrs	r3, r3, #1
 8042266:	b29b      	uxth	r3, r3
 8042268:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 804226c:	1ad3      	subs	r3, r2, r3
 804226e:	b29a      	uxth	r2, r3
 8042270:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8042272:	4413      	add	r3, r2
 8042274:	b29a      	uxth	r2, r3
 8042276:	4b92      	ldr	r3, [pc, #584]	; (80424c0 <updateGuiVal+0x490>)
 8042278:	801a      	strh	r2, [r3, #0]





		utoa(u32_SoakTemperature,gui_stringInt,10);
 804227a:	f107 0320 	add.w	r3, r7, #32
 804227e:	220a      	movs	r2, #10
 8042280:	4619      	mov	r1, r3
 8042282:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8042284:	f007 fb2c 	bl	80498e0 <utoa>
		lcd_put_cur(0, 9);
 8042288:	2109      	movs	r1, #9
 804228a:	2000      	movs	r0, #0
 804228c:	f001 f83b 	bl	8043306 <lcd_put_cur>
		lcd_send_string("T=");
 8042290:	4889      	ldr	r0, [pc, #548]	; (80424b8 <updateGuiVal+0x488>)
 8042292:	f001 f894 	bl	80433be <lcd_send_string>
		lcd_put_cur(0, 11);
 8042296:	210b      	movs	r1, #11
 8042298:	2000      	movs	r0, #0
 804229a:	f001 f834 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 804229e:	f107 0320 	add.w	r3, r7, #32
 80422a2:	4618      	mov	r0, r3
 80422a4:	f001 f88b 	bl	80433be <lcd_send_string>

		utoa(u16_timeRemaining,gui_stringInt,10);
 80422a8:	4b85      	ldr	r3, [pc, #532]	; (80424c0 <updateGuiVal+0x490>)
 80422aa:	881b      	ldrh	r3, [r3, #0]
 80422ac:	4618      	mov	r0, r3
 80422ae:	f107 0320 	add.w	r3, r7, #32
 80422b2:	220a      	movs	r2, #10
 80422b4:	4619      	mov	r1, r3
 80422b6:	f007 fb13 	bl	80498e0 <utoa>
		lcd_put_cur(1, 9);
 80422ba:	2109      	movs	r1, #9
 80422bc:	2001      	movs	r0, #1
 80422be:	f001 f822 	bl	8043306 <lcd_put_cur>
		lcd_send_string("t=");
 80422c2:	4880      	ldr	r0, [pc, #512]	; (80424c4 <updateGuiVal+0x494>)
 80422c4:	f001 f87b 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 11);
 80422c8:	210b      	movs	r1, #11
 80422ca:	2001      	movs	r0, #1
 80422cc:	f001 f81b 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 80422d0:	f107 0320 	add.w	r3, r7, #32
 80422d4:	4618      	mov	r0, r3
 80422d6:	f001 f872 	bl	80433be <lcd_send_string>
	}



	/*Second Heatup */
	if( (true == b_SoakComplete) && (true != b_PreheatComplete_2) )
 80422da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80422de:	2b00      	cmp	r3, #0
 80422e0:	d046      	beq.n	8042370 <updateGuiVal+0x340>
 80422e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80422e6:	f083 0301 	eor.w	r3, r3, #1
 80422ea:	b2db      	uxtb	r3, r3
 80422ec:	2b00      	cmp	r3, #0
 80422ee:	d03f      	beq.n	8042370 <updateGuiVal+0x340>
	{

		u16_timeRemaining = u16_SecondHeatupTime - ( (u16_ReflowIndexCurrent/2) - u16_FirstHeatupTime - u16_SoakTime );
 80422f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80422f4:	085b      	lsrs	r3, r3, #1
 80422f6:	b29b      	uxth	r3, r3
 80422f8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80422fc:	1ad3      	subs	r3, r2, r3
 80422fe:	b29a      	uxth	r2, r3
 8042300:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8042302:	4413      	add	r3, r2
 8042304:	b29a      	uxth	r2, r3
 8042306:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8042308:	4413      	add	r3, r2
 804230a:	b29a      	uxth	r2, r3
 804230c:	4b6c      	ldr	r3, [pc, #432]	; (80424c0 <updateGuiVal+0x490>)
 804230e:	801a      	strh	r2, [r3, #0]


		utoa(u32_ReflowTemperature,gui_stringInt,10);
 8042310:	f107 0320 	add.w	r3, r7, #32
 8042314:	220a      	movs	r2, #10
 8042316:	4619      	mov	r1, r3
 8042318:	6b78      	ldr	r0, [r7, #52]	; 0x34
 804231a:	f007 fae1 	bl	80498e0 <utoa>
		lcd_put_cur(0, 9);
 804231e:	2109      	movs	r1, #9
 8042320:	2000      	movs	r0, #0
 8042322:	f000 fff0 	bl	8043306 <lcd_put_cur>
		lcd_send_string("T=");
 8042326:	4864      	ldr	r0, [pc, #400]	; (80424b8 <updateGuiVal+0x488>)
 8042328:	f001 f849 	bl	80433be <lcd_send_string>
		lcd_put_cur(0, 11);
 804232c:	210b      	movs	r1, #11
 804232e:	2000      	movs	r0, #0
 8042330:	f000 ffe9 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 8042334:	f107 0320 	add.w	r3, r7, #32
 8042338:	4618      	mov	r0, r3
 804233a:	f001 f840 	bl	80433be <lcd_send_string>

		utoa(u16_timeRemaining,gui_stringInt,10);
 804233e:	4b60      	ldr	r3, [pc, #384]	; (80424c0 <updateGuiVal+0x490>)
 8042340:	881b      	ldrh	r3, [r3, #0]
 8042342:	4618      	mov	r0, r3
 8042344:	f107 0320 	add.w	r3, r7, #32
 8042348:	220a      	movs	r2, #10
 804234a:	4619      	mov	r1, r3
 804234c:	f007 fac8 	bl	80498e0 <utoa>
		lcd_put_cur(1, 9);
 8042350:	2109      	movs	r1, #9
 8042352:	2001      	movs	r0, #1
 8042354:	f000 ffd7 	bl	8043306 <lcd_put_cur>
		lcd_send_string("t=");
 8042358:	485a      	ldr	r0, [pc, #360]	; (80424c4 <updateGuiVal+0x494>)
 804235a:	f001 f830 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 11);
 804235e:	210b      	movs	r1, #11
 8042360:	2001      	movs	r0, #1
 8042362:	f000 ffd0 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 8042366:	f107 0320 	add.w	r3, r7, #32
 804236a:	4618      	mov	r0, r3
 804236c:	f001 f827 	bl	80433be <lcd_send_string>
	}



	/*Reflow  */
	if( (true == b_PreheatComplete_2) && (true != b_ReflowComplete) && (true == b_SoakComplete) )
 8042370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8042374:	2b00      	cmp	r3, #0
 8042376:	d04d      	beq.n	8042414 <updateGuiVal+0x3e4>
 8042378:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 804237c:	f083 0301 	eor.w	r3, r3, #1
 8042380:	b2db      	uxtb	r3, r3
 8042382:	2b00      	cmp	r3, #0
 8042384:	d046      	beq.n	8042414 <updateGuiVal+0x3e4>
 8042386:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 804238a:	2b00      	cmp	r3, #0
 804238c:	d042      	beq.n	8042414 <updateGuiVal+0x3e4>
	{

		u16_timeRemaining = u16_ReflowTime - ( (u16_ReflowIndexCurrent/2) - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime );
 804238e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8042392:	085b      	lsrs	r3, r3, #1
 8042394:	b29b      	uxth	r3, r3
 8042396:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 804239a:	1ad3      	subs	r3, r2, r3
 804239c:	b29a      	uxth	r2, r3
 804239e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80423a0:	4413      	add	r3, r2
 80423a2:	b29a      	uxth	r2, r3
 80423a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80423a6:	4413      	add	r3, r2
 80423a8:	b29a      	uxth	r2, r3
 80423aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80423ac:	4413      	add	r3, r2
 80423ae:	b29a      	uxth	r2, r3
 80423b0:	4b43      	ldr	r3, [pc, #268]	; (80424c0 <updateGuiVal+0x490>)
 80423b2:	801a      	strh	r2, [r3, #0]


		utoa(u32_ReflowTemperature,gui_stringInt,10);
 80423b4:	f107 0320 	add.w	r3, r7, #32
 80423b8:	220a      	movs	r2, #10
 80423ba:	4619      	mov	r1, r3
 80423bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80423be:	f007 fa8f 	bl	80498e0 <utoa>
		lcd_put_cur(0, 9);
 80423c2:	2109      	movs	r1, #9
 80423c4:	2000      	movs	r0, #0
 80423c6:	f000 ff9e 	bl	8043306 <lcd_put_cur>
		lcd_send_string("T=");
 80423ca:	483b      	ldr	r0, [pc, #236]	; (80424b8 <updateGuiVal+0x488>)
 80423cc:	f000 fff7 	bl	80433be <lcd_send_string>
		lcd_put_cur(0, 11);
 80423d0:	210b      	movs	r1, #11
 80423d2:	2000      	movs	r0, #0
 80423d4:	f000 ff97 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 80423d8:	f107 0320 	add.w	r3, r7, #32
 80423dc:	4618      	mov	r0, r3
 80423de:	f000 ffee 	bl	80433be <lcd_send_string>

		utoa(u16_timeRemaining,gui_stringInt,10);
 80423e2:	4b37      	ldr	r3, [pc, #220]	; (80424c0 <updateGuiVal+0x490>)
 80423e4:	881b      	ldrh	r3, [r3, #0]
 80423e6:	4618      	mov	r0, r3
 80423e8:	f107 0320 	add.w	r3, r7, #32
 80423ec:	220a      	movs	r2, #10
 80423ee:	4619      	mov	r1, r3
 80423f0:	f007 fa76 	bl	80498e0 <utoa>
		lcd_put_cur(1, 9);
 80423f4:	2109      	movs	r1, #9
 80423f6:	2001      	movs	r0, #1
 80423f8:	f000 ff85 	bl	8043306 <lcd_put_cur>
		lcd_send_string("t=");
 80423fc:	4831      	ldr	r0, [pc, #196]	; (80424c4 <updateGuiVal+0x494>)
 80423fe:	f000 ffde 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 11);
 8042402:	210b      	movs	r1, #11
 8042404:	2001      	movs	r0, #1
 8042406:	f000 ff7e 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 804240a:	f107 0320 	add.w	r3, r7, #32
 804240e:	4618      	mov	r0, r3
 8042410:	f000 ffd5 	bl	80433be <lcd_send_string>
	}



	/*Cooldown  */
	if( (true == b_ReflowComplete) && (true != b_CooldownComplete) )
 8042414:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8042418:	2b00      	cmp	r3, #0
 804241a:	d055      	beq.n	80424c8 <updateGuiVal+0x498>
 804241c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8042420:	f083 0301 	eor.w	r3, r3, #1
 8042424:	b2db      	uxtb	r3, r3
 8042426:	2b00      	cmp	r3, #0
 8042428:	d04e      	beq.n	80424c8 <updateGuiVal+0x498>
	{


		u16_timeRemaining = u16_CooldownTime - ( (u16_ReflowIndexCurrent/2) - u16_FirstHeatupTime - u16_SoakTime - u16_SecondHeatupTime - u16_ReflowTime );
 804242a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 804242e:	085b      	lsrs	r3, r3, #1
 8042430:	b29b      	uxth	r3, r3
 8042432:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8042436:	1ad3      	subs	r3, r2, r3
 8042438:	b29a      	uxth	r2, r3
 804243a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 804243c:	4413      	add	r3, r2
 804243e:	b29a      	uxth	r2, r3
 8042440:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8042442:	4413      	add	r3, r2
 8042444:	b29a      	uxth	r2, r3
 8042446:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8042448:	4413      	add	r3, r2
 804244a:	b29a      	uxth	r2, r3
 804244c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 804244e:	4413      	add	r3, r2
 8042450:	b29a      	uxth	r2, r3
 8042452:	4b1b      	ldr	r3, [pc, #108]	; (80424c0 <updateGuiVal+0x490>)
 8042454:	801a      	strh	r2, [r3, #0]



		utoa(u16_CooldownTemperature,gui_stringInt,10);
 8042456:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8042458:	f107 0120 	add.w	r1, r7, #32
 804245c:	220a      	movs	r2, #10
 804245e:	4618      	mov	r0, r3
 8042460:	f007 fa3e 	bl	80498e0 <utoa>
		lcd_put_cur(0, 9);
 8042464:	2109      	movs	r1, #9
 8042466:	2000      	movs	r0, #0
 8042468:	f000 ff4d 	bl	8043306 <lcd_put_cur>
		lcd_send_string("T=");
 804246c:	4812      	ldr	r0, [pc, #72]	; (80424b8 <updateGuiVal+0x488>)
 804246e:	f000 ffa6 	bl	80433be <lcd_send_string>
		lcd_put_cur(0, 11);
 8042472:	210b      	movs	r1, #11
 8042474:	2000      	movs	r0, #0
 8042476:	f000 ff46 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 804247a:	f107 0320 	add.w	r3, r7, #32
 804247e:	4618      	mov	r0, r3
 8042480:	f000 ff9d 	bl	80433be <lcd_send_string>

		utoa(u16_timeRemaining,gui_stringInt,10);
 8042484:	4b0e      	ldr	r3, [pc, #56]	; (80424c0 <updateGuiVal+0x490>)
 8042486:	881b      	ldrh	r3, [r3, #0]
 8042488:	4618      	mov	r0, r3
 804248a:	f107 0320 	add.w	r3, r7, #32
 804248e:	220a      	movs	r2, #10
 8042490:	4619      	mov	r1, r3
 8042492:	f007 fa25 	bl	80498e0 <utoa>
		lcd_put_cur(1, 9);
 8042496:	2109      	movs	r1, #9
 8042498:	2001      	movs	r0, #1
 804249a:	f000 ff34 	bl	8043306 <lcd_put_cur>
		lcd_send_string("t=");
 804249e:	4809      	ldr	r0, [pc, #36]	; (80424c4 <updateGuiVal+0x494>)
 80424a0:	f000 ff8d 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 11);
 80424a4:	210b      	movs	r1, #11
 80424a6:	2001      	movs	r0, #1
 80424a8:	f000 ff2d 	bl	8043306 <lcd_put_cur>
		lcd_send_string(&gui_stringInt);
 80424ac:	f107 0320 	add.w	r3, r7, #32
 80424b0:	4618      	mov	r0, r3
 80424b2:	f000 ff84 	bl	80433be <lcd_send_string>
 80424b6:	e007      	b.n	80424c8 <updateGuiVal+0x498>
 80424b8:	0804d6e8 	.word	0x0804d6e8
 80424bc:	0804d6ec 	.word	0x0804d6ec
 80424c0:	20007754 	.word	0x20007754
 80424c4:	0804d6f0 	.word	0x0804d6f0


	}

	/*Cooldown  */
	if( (true == b_CooldownComplete) )
 80424c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80424cc:	2b00      	cmp	r3, #0
 80424ce:	d018      	beq.n	8042502 <updateGuiVal+0x4d2>
	{

		lcd_clear_cmd();
 80424d0:	f000 ff09 	bl	80432e6 <lcd_clear_cmd>
		lcd_put_cur(0, 0);
 80424d4:	2100      	movs	r1, #0
 80424d6:	2000      	movs	r0, #0
 80424d8:	f000 ff15 	bl	8043306 <lcd_put_cur>
		lcd_send_string("Reflow");
 80424dc:	480b      	ldr	r0, [pc, #44]	; (804250c <updateGuiVal+0x4dc>)
 80424de:	f000 ff6e 	bl	80433be <lcd_send_string>
		lcd_put_cur(1, 0);
 80424e2:	2100      	movs	r1, #0
 80424e4:	2001      	movs	r0, #1
 80424e6:	f000 ff0e 	bl	8043306 <lcd_put_cur>
		lcd_send_string("Finished!");
 80424ea:	4809      	ldr	r0, [pc, #36]	; (8042510 <updateGuiVal+0x4e0>)
 80424ec:	f000 ff67 	bl	80433be <lcd_send_string>
		while(1)
		{
			if(true == ui8_encButtonPressed)
 80424f0:	4b08      	ldr	r3, [pc, #32]	; (8042514 <updateGuiVal+0x4e4>)
 80424f2:	781b      	ldrb	r3, [r3, #0]
 80424f4:	b2db      	uxtb	r3, r3
 80424f6:	2b01      	cmp	r3, #1
 80424f8:	d1fa      	bne.n	80424f0 <updateGuiVal+0x4c0>
			{

				ui8_encButtonPressed=false;
 80424fa:	4b06      	ldr	r3, [pc, #24]	; (8042514 <updateGuiVal+0x4e4>)
 80424fc:	2200      	movs	r2, #0
 80424fe:	701a      	strb	r2, [r3, #0]
				break;
 8042500:	bf00      	nop
		}
	}



}
 8042502:	bf00      	nop
 8042504:	3750      	adds	r7, #80	; 0x50
 8042506:	46bd      	mov	sp, r7
 8042508:	bd80      	pop	{r7, pc}
 804250a:	bf00      	nop
 804250c:	0804d6f4 	.word	0x0804d6f4
 8042510:	0804d6fc 	.word	0x0804d6fc
 8042514:	2000ee7d 	.word	0x2000ee7d

08042518 <ResetFlags>:
void ResetFlags(void)
{
 8042518:	b480      	push	{r7}
 804251a:	af00      	add	r7, sp, #0

	  ReflowEnable = 1;
 804251c:	4b0f      	ldr	r3, [pc, #60]	; (804255c <ResetFlags+0x44>)
 804251e:	2201      	movs	r2, #1
 8042520:	701a      	strb	r2, [r3, #0]

	  Flags.StartFlag = false;
 8042522:	4b0f      	ldr	r3, [pc, #60]	; (8042560 <ResetFlags+0x48>)
 8042524:	2200      	movs	r2, #0
 8042526:	701a      	strb	r2, [r3, #0]
	  Flags.cooldownComplete = false;
 8042528:	4b0d      	ldr	r3, [pc, #52]	; (8042560 <ResetFlags+0x48>)
 804252a:	2200      	movs	r2, #0
 804252c:	719a      	strb	r2, [r3, #6]
	  Flags.initComplete = false;
 804252e:	4b0c      	ldr	r3, [pc, #48]	; (8042560 <ResetFlags+0x48>)
 8042530:	2200      	movs	r2, #0
 8042532:	705a      	strb	r2, [r3, #1]
	  Flags.preheatComplete_1 = false;
 8042534:	4b0a      	ldr	r3, [pc, #40]	; (8042560 <ResetFlags+0x48>)
 8042536:	2200      	movs	r2, #0
 8042538:	709a      	strb	r2, [r3, #2]
	  Flags.preheatComplete_2 = false;
 804253a:	4b09      	ldr	r3, [pc, #36]	; (8042560 <ResetFlags+0x48>)
 804253c:	2200      	movs	r2, #0
 804253e:	711a      	strb	r2, [r3, #4]
	  Flags.reflowComplete = false;
 8042540:	4b07      	ldr	r3, [pc, #28]	; (8042560 <ResetFlags+0x48>)
 8042542:	2200      	movs	r2, #0
 8042544:	715a      	strb	r2, [r3, #5]
	  Flags.soakComplete = false;
 8042546:	4b06      	ldr	r3, [pc, #24]	; (8042560 <ResetFlags+0x48>)
 8042548:	2200      	movs	r2, #0
 804254a:	70da      	strb	r2, [r3, #3]
	  b_dataEnter = false;
 804254c:	4b05      	ldr	r3, [pc, #20]	; (8042564 <ResetFlags+0x4c>)
 804254e:	2200      	movs	r2, #0
 8042550:	701a      	strb	r2, [r3, #0]


}
 8042552:	bf00      	nop
 8042554:	46bd      	mov	sp, r7
 8042556:	f85d 7b04 	ldr.w	r7, [sp], #4
 804255a:	4770      	bx	lr
 804255c:	2000eeb7 	.word	0x2000eeb7
 8042560:	2000eeb0 	.word	0x2000eeb0
 8042564:	20007758 	.word	0x20007758

08042568 <RefloWConditionsUpdate>:

void RefloWConditionsUpdate(void)
{
 8042568:	b580      	push	{r7, lr}
 804256a:	b082      	sub	sp, #8
 804256c:	af00      	add	r7, sp, #0
	uint16_t u16_Counter = 0;
 804256e:	2300      	movs	r3, #0
 8042570:	80fb      	strh	r3, [r7, #6]




	lcd_clear_cmd();
 8042572:	f000 feb8 	bl	80432e6 <lcd_clear_cmd>
	lcd_put_cur(0, 0);
 8042576:	2100      	movs	r1, #0
 8042578:	2000      	movs	r0, #0
 804257a:	f000 fec4 	bl	8043306 <lcd_put_cur>
	lcd_send_string("Reflow Again ?");
 804257e:	4828      	ldr	r0, [pc, #160]	; (8042620 <RefloWConditionsUpdate+0xb8>)
 8042580:	f000 ff1d 	bl	80433be <lcd_send_string>
	lcd_put_cur(1, 0);
 8042584:	2100      	movs	r1, #0
 8042586:	2001      	movs	r0, #1
 8042588:	f000 febd 	bl	8043306 <lcd_put_cur>
	lcd_send_string("Yes/No");
 804258c:	4825      	ldr	r0, [pc, #148]	; (8042624 <RefloWConditionsUpdate+0xbc>)
 804258e:	f000 ff16 	bl	80433be <lcd_send_string>


	 TIM1->CNT = 10;
 8042592:	4b25      	ldr	r3, [pc, #148]	; (8042628 <RefloWConditionsUpdate+0xc0>)
 8042594:	220a      	movs	r2, #10
 8042596:	625a      	str	r2, [r3, #36]	; 0x24

	while(1)
		{
		u16_Counter = TIM1->CNT;
 8042598:	4b23      	ldr	r3, [pc, #140]	; (8042628 <RefloWConditionsUpdate+0xc0>)
 804259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804259c:	80fb      	strh	r3, [r7, #6]

		if((10 < u16_Counter)  )
 804259e:	88fb      	ldrh	r3, [r7, #6]
 80425a0:	2b0a      	cmp	r3, #10
 80425a2:	d923      	bls.n	80425ec <RefloWConditionsUpdate+0x84>
		{
			lcd_put_cur(1, 5);
 80425a4:	2105      	movs	r1, #5
 80425a6:	2001      	movs	r0, #1
 80425a8:	f000 fead 	bl	8043306 <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 80425ac:	200f      	movs	r0, #15
 80425ae:	f000 fe23 	bl	80431f8 <lcd_send_cmd>
			while(1)
			{
				if(true == ui8_encButtonPressed)
 80425b2:	4b1e      	ldr	r3, [pc, #120]	; (804262c <RefloWConditionsUpdate+0xc4>)
 80425b4:	781b      	ldrb	r3, [r3, #0]
 80425b6:	b2db      	uxtb	r3, r3
 80425b8:	2b01      	cmp	r3, #1
 80425ba:	d1fa      	bne.n	80425b2 <RefloWConditionsUpdate+0x4a>
				{
					lcd_clear_cmd();
 80425bc:	f000 fe93 	bl	80432e6 <lcd_clear_cmd>
					lcd_put_cur(0, 0);
 80425c0:	2100      	movs	r1, #0
 80425c2:	2000      	movs	r0, #0
 80425c4:	f000 fe9f 	bl	8043306 <lcd_put_cur>
					lcd_send_string("Turn OFF or");
 80425c8:	4819      	ldr	r0, [pc, #100]	; (8042630 <RefloWConditionsUpdate+0xc8>)
 80425ca:	f000 fef8 	bl	80433be <lcd_send_string>
					lcd_put_cur(1, 0);
 80425ce:	2100      	movs	r1, #0
 80425d0:	2001      	movs	r0, #1
 80425d2:	f000 fe98 	bl	8043306 <lcd_put_cur>
					lcd_send_string("Restart!");
 80425d6:	4817      	ldr	r0, [pc, #92]	; (8042634 <RefloWConditionsUpdate+0xcc>)
 80425d8:	f000 fef1 	bl	80433be <lcd_send_string>
					lcd_send_cmd(LCD_CURSOR_OFF);
 80425dc:	200c      	movs	r0, #12
 80425de:	f000 fe0b 	bl	80431f8 <lcd_send_cmd>

					ui8_encButtonPressed = false;
 80425e2:	4b12      	ldr	r3, [pc, #72]	; (804262c <RefloWConditionsUpdate+0xc4>)
 80425e4:	2200      	movs	r2, #0
 80425e6:	701a      	strb	r2, [r3, #0]
					break;
 80425e8:	bf00      	nop
				}
			}
			break;
 80425ea:	e015      	b.n	8042618 <RefloWConditionsUpdate+0xb0>
		}
		else if ( (10 > u16_Counter))
 80425ec:	88fb      	ldrh	r3, [r7, #6]
 80425ee:	2b09      	cmp	r3, #9
 80425f0:	d8d2      	bhi.n	8042598 <RefloWConditionsUpdate+0x30>
		{
			lcd_put_cur(1, 0);
 80425f2:	2100      	movs	r1, #0
 80425f4:	2001      	movs	r0, #1
 80425f6:	f000 fe86 	bl	8043306 <lcd_put_cur>
			lcd_send_cmd(LCD_BLINK_CURSOR_ON);
 80425fa:	200f      	movs	r0, #15
 80425fc:	f000 fdfc 	bl	80431f8 <lcd_send_cmd>
			while(1)
			{
				if(true == ui8_encButtonPressed)
 8042600:	4b0a      	ldr	r3, [pc, #40]	; (804262c <RefloWConditionsUpdate+0xc4>)
 8042602:	781b      	ldrb	r3, [r3, #0]
 8042604:	b2db      	uxtb	r3, r3
 8042606:	2b01      	cmp	r3, #1
 8042608:	d1fa      	bne.n	8042600 <RefloWConditionsUpdate+0x98>
				{
					ResetFlags();
 804260a:	f7ff ff85 	bl	8042518 <ResetFlags>
					ui8_encButtonPressed = false;
 804260e:	4b07      	ldr	r3, [pc, #28]	; (804262c <RefloWConditionsUpdate+0xc4>)
 8042610:	2200      	movs	r2, #0
 8042612:	701a      	strb	r2, [r3, #0]
					NVIC_SystemReset(); /*Init a system reset*/
 8042614:	f7fe fcea 	bl	8040fec <__NVIC_SystemReset>
			}
		}

		}

}
 8042618:	bf00      	nop
 804261a:	3708      	adds	r7, #8
 804261c:	46bd      	mov	sp, r7
 804261e:	bd80      	pop	{r7, pc}
 8042620:	0804d708 	.word	0x0804d708
 8042624:	0804d718 	.word	0x0804d718
 8042628:	40010000 	.word	0x40010000
 804262c:	2000ee7d 	.word	0x2000ee7d
 8042630:	0804d720 	.word	0x0804d720
 8042634:	0804d72c 	.word	0x0804d72c

08042638 <EE_Init>:




uint16_t EE_Init(void)
{
 8042638:	b580      	push	{r7, lr}
 804263a:	b08a      	sub	sp, #40	; 0x28
 804263c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 804263e:	2306      	movs	r3, #6
 8042640:	847b      	strh	r3, [r7, #34]	; 0x22
 8042642:	2306      	movs	r3, #6
 8042644:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8042646:	2300      	movs	r3, #0
 8042648:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 804264a:	2300      	movs	r3, #0
 804264c:	83fb      	strh	r3, [r7, #30]
 804264e:	2300      	movs	r3, #0
 8042650:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8042652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8042656:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8042658:	2300      	movs	r3, #0
 804265a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 804265c:	4ba3      	ldr	r3, [pc, #652]	; (80428ec <EE_Init+0x2b4>)
 804265e:	881b      	ldrh	r3, [r3, #0]
 8042660:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8042662:	4ba3      	ldr	r3, [pc, #652]	; (80428f0 <EE_Init+0x2b8>)
 8042664:	881b      	ldrh	r3, [r3, #0]
 8042666:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8042668:	2300      	movs	r3, #0
 804266a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 804266c:	2309      	movs	r3, #9
 804266e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8042670:	2301      	movs	r3, #1
 8042672:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042674:	2301      	movs	r3, #1
 8042676:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8042678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804267a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804267e:	4293      	cmp	r3, r2
 8042680:	d00b      	beq.n	804269a <EE_Init+0x62>
 8042682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042686:	f280 8198 	bge.w	80429ba <EE_Init+0x382>
 804268a:	2b00      	cmp	r3, #0
 804268c:	f000 80fb 	beq.w	8042886 <EE_Init+0x24e>
 8042690:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042694:	4293      	cmp	r3, r2
 8042696:	d050      	beq.n	804273a <EE_Init+0x102>
 8042698:	e18f      	b.n	80429ba <EE_Init+0x382>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 804269a:	8c3b      	ldrh	r3, [r7, #32]
 804269c:	2b00      	cmp	r3, #0
 804269e:	d116      	bne.n	80426ce <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80426a0:	4892      	ldr	r0, [pc, #584]	; (80428ec <EE_Init+0x2b4>)
 80426a2:	f000 f9ab 	bl	80429fc <EE_VerifyPageFullyErased>
 80426a6:	4603      	mov	r3, r0
 80426a8:	2b00      	cmp	r3, #0
 80426aa:	f040 8190 	bne.w	80429ce <EE_Init+0x396>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80426ae:	f107 0214 	add.w	r2, r7, #20
 80426b2:	463b      	mov	r3, r7
 80426b4:	4611      	mov	r1, r2
 80426b6:	4618      	mov	r0, r3
 80426b8:	f002 f900 	bl	80448bc <HAL_FLASHEx_Erase>
 80426bc:	4603      	mov	r3, r0
 80426be:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80426c0:	7efb      	ldrb	r3, [r7, #27]
 80426c2:	2b00      	cmp	r3, #0
 80426c4:	f000 8183 	beq.w	80429ce <EE_Init+0x396>
          {
            return FlashStatus;
 80426c8:	7efb      	ldrb	r3, [r7, #27]
 80426ca:	b29b      	uxth	r3, r3
 80426cc:	e187      	b.n	80429de <EE_Init+0x3a6>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80426ce:	8c3b      	ldrh	r3, [r7, #32]
 80426d0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80426d4:	4293      	cmp	r3, r2
 80426d6:	d125      	bne.n	8042724 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80426d8:	4884      	ldr	r0, [pc, #528]	; (80428ec <EE_Init+0x2b4>)
 80426da:	f000 f98f 	bl	80429fc <EE_VerifyPageFullyErased>
 80426de:	4603      	mov	r3, r0
 80426e0:	2b00      	cmp	r3, #0
 80426e2:	d10e      	bne.n	8042702 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80426e4:	f107 0214 	add.w	r2, r7, #20
 80426e8:	463b      	mov	r3, r7
 80426ea:	4611      	mov	r1, r2
 80426ec:	4618      	mov	r0, r3
 80426ee:	f002 f8e5 	bl	80448bc <HAL_FLASHEx_Erase>
 80426f2:	4603      	mov	r3, r0
 80426f4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80426f6:	7efb      	ldrb	r3, [r7, #27]
 80426f8:	2b00      	cmp	r3, #0
 80426fa:	d002      	beq.n	8042702 <EE_Init+0xca>
          {
            return FlashStatus;
 80426fc:	7efb      	ldrb	r3, [r7, #27]
 80426fe:	b29b      	uxth	r3, r3
 8042700:	e16d      	b.n	80429de <EE_Init+0x3a6>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8042702:	f04f 0200 	mov.w	r2, #0
 8042706:	f04f 0300 	mov.w	r3, #0
 804270a:	4979      	ldr	r1, [pc, #484]	; (80428f0 <EE_Init+0x2b8>)
 804270c:	2001      	movs	r0, #1
 804270e:	f001 ff1f 	bl	8044550 <HAL_FLASH_Program>
 8042712:	4603      	mov	r3, r0
 8042714:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042716:	7efb      	ldrb	r3, [r7, #27]
 8042718:	2b00      	cmp	r3, #0
 804271a:	f000 8158 	beq.w	80429ce <EE_Init+0x396>
        {
          return FlashStatus;
 804271e:	7efb      	ldrb	r3, [r7, #27]
 8042720:	b29b      	uxth	r3, r3
 8042722:	e15c      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8042724:	f000 f9fc 	bl	8042b20 <EE_Format>
 8042728:	4603      	mov	r3, r0
 804272a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 804272c:	7efb      	ldrb	r3, [r7, #27]
 804272e:	2b00      	cmp	r3, #0
 8042730:	f000 814d 	beq.w	80429ce <EE_Init+0x396>
        {
          return FlashStatus;
 8042734:	7efb      	ldrb	r3, [r7, #27]
 8042736:	b29b      	uxth	r3, r3
 8042738:	e151      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 804273a:	8c3b      	ldrh	r3, [r7, #32]
 804273c:	2b00      	cmp	r3, #0
 804273e:	d166      	bne.n	804280e <EE_Init+0x1d6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042740:	2300      	movs	r3, #0
 8042742:	84fb      	strh	r3, [r7, #38]	; 0x26
 8042744:	e033      	b.n	80427ae <EE_Init+0x176>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == (KP_VirtAddr+VarIdx) )
 8042746:	4b6b      	ldr	r3, [pc, #428]	; (80428f4 <EE_Init+0x2bc>)
 8042748:	881b      	ldrh	r3, [r3, #0]
 804274a:	b29b      	uxth	r3, r3
 804274c:	461a      	mov	r2, r3
 804274e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042750:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8042754:	33a0      	adds	r3, #160	; 0xa0
 8042756:	429a      	cmp	r2, r3
 8042758:	d101      	bne.n	804275e <EE_Init+0x126>
          {
            x = VarIdx;
 804275a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804275c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 804275e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8042760:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8042764:	429a      	cmp	r2, r3
 8042766:	d01f      	beq.n	80427a8 <EE_Init+0x170>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 8042768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804276a:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 804276e:	3b60      	subs	r3, #96	; 0x60
 8042770:	b29b      	uxth	r3, r3
 8042772:	4961      	ldr	r1, [pc, #388]	; (80428f8 <EE_Init+0x2c0>)
 8042774:	4618      	mov	r0, r3
 8042776:	f000 f967 	bl	8042a48 <EE_ReadVariable>
 804277a:	4603      	mov	r3, r0
 804277c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 804277e:	8bbb      	ldrh	r3, [r7, #28]
 8042780:	2b01      	cmp	r3, #1
 8042782:	d011      	beq.n	80427a8 <EE_Init+0x170>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8042784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042786:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 804278a:	3b60      	subs	r3, #96	; 0x60
 804278c:	b29b      	uxth	r3, r3
 804278e:	4a5a      	ldr	r2, [pc, #360]	; (80428f8 <EE_Init+0x2c0>)
 8042790:	8812      	ldrh	r2, [r2, #0]
 8042792:	4611      	mov	r1, r2
 8042794:	4618      	mov	r0, r3
 8042796:	f000 fa5b 	bl	8042c50 <EE_VerifyPageFullWriteVariable>
 804279a:	4603      	mov	r3, r0
 804279c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 804279e:	8bfb      	ldrh	r3, [r7, #30]
 80427a0:	2b00      	cmp	r3, #0
 80427a2:	d001      	beq.n	80427a8 <EE_Init+0x170>
              {
                return EepromStatus;
 80427a4:	8bfb      	ldrh	r3, [r7, #30]
 80427a6:	e11a      	b.n	80429de <EE_Init+0x3a6>
        for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 80427a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80427aa:	3301      	adds	r3, #1
 80427ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80427ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80427b0:	2b09      	cmp	r3, #9
 80427b2:	d9c8      	bls.n	8042746 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80427b4:	f04f 0200 	mov.w	r2, #0
 80427b8:	f04f 0300 	mov.w	r3, #0
 80427bc:	494b      	ldr	r1, [pc, #300]	; (80428ec <EE_Init+0x2b4>)
 80427be:	2001      	movs	r0, #1
 80427c0:	f001 fec6 	bl	8044550 <HAL_FLASH_Program>
 80427c4:	4603      	mov	r3, r0
 80427c6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80427c8:	7efb      	ldrb	r3, [r7, #27]
 80427ca:	2b00      	cmp	r3, #0
 80427cc:	d002      	beq.n	80427d4 <EE_Init+0x19c>
        {
          return FlashStatus;
 80427ce:	7efb      	ldrb	r3, [r7, #27]
 80427d0:	b29b      	uxth	r3, r3
 80427d2:	e104      	b.n	80429de <EE_Init+0x3a6>
        }
        pEraseInit.Sector = PAGE1_ID;
 80427d4:	230a      	movs	r3, #10
 80427d6:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80427d8:	2301      	movs	r3, #1
 80427da:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80427dc:	2301      	movs	r3, #1
 80427de:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80427e0:	4843      	ldr	r0, [pc, #268]	; (80428f0 <EE_Init+0x2b8>)
 80427e2:	f000 f90b 	bl	80429fc <EE_VerifyPageFullyErased>
 80427e6:	4603      	mov	r3, r0
 80427e8:	2b00      	cmp	r3, #0
 80427ea:	f040 80f2 	bne.w	80429d2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80427ee:	f107 0214 	add.w	r2, r7, #20
 80427f2:	463b      	mov	r3, r7
 80427f4:	4611      	mov	r1, r2
 80427f6:	4618      	mov	r0, r3
 80427f8:	f002 f860 	bl	80448bc <HAL_FLASHEx_Erase>
 80427fc:	4603      	mov	r3, r0
 80427fe:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042800:	7efb      	ldrb	r3, [r7, #27]
 8042802:	2b00      	cmp	r3, #0
 8042804:	f000 80e5 	beq.w	80429d2 <EE_Init+0x39a>
          {
            return FlashStatus;
 8042808:	7efb      	ldrb	r3, [r7, #27]
 804280a:	b29b      	uxth	r3, r3
 804280c:	e0e7      	b.n	80429de <EE_Init+0x3a6>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 804280e:	8c3b      	ldrh	r3, [r7, #32]
 8042810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042814:	4293      	cmp	r3, r2
 8042816:	d12b      	bne.n	8042870 <EE_Init+0x238>
      {
        pEraseInit.Sector = PAGE1_ID;
 8042818:	230a      	movs	r3, #10
 804281a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 804281c:	2301      	movs	r3, #1
 804281e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042820:	2301      	movs	r3, #1
 8042822:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8042824:	4832      	ldr	r0, [pc, #200]	; (80428f0 <EE_Init+0x2b8>)
 8042826:	f000 f8e9 	bl	80429fc <EE_VerifyPageFullyErased>
 804282a:	4603      	mov	r3, r0
 804282c:	2b00      	cmp	r3, #0
 804282e:	d10e      	bne.n	804284e <EE_Init+0x216>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8042830:	f107 0214 	add.w	r2, r7, #20
 8042834:	463b      	mov	r3, r7
 8042836:	4611      	mov	r1, r2
 8042838:	4618      	mov	r0, r3
 804283a:	f002 f83f 	bl	80448bc <HAL_FLASHEx_Erase>
 804283e:	4603      	mov	r3, r0
 8042840:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8042842:	7efb      	ldrb	r3, [r7, #27]
 8042844:	2b00      	cmp	r3, #0
 8042846:	d002      	beq.n	804284e <EE_Init+0x216>
          {
            return FlashStatus;
 8042848:	7efb      	ldrb	r3, [r7, #27]
 804284a:	b29b      	uxth	r3, r3
 804284c:	e0c7      	b.n	80429de <EE_Init+0x3a6>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 804284e:	f04f 0200 	mov.w	r2, #0
 8042852:	f04f 0300 	mov.w	r3, #0
 8042856:	4925      	ldr	r1, [pc, #148]	; (80428ec <EE_Init+0x2b4>)
 8042858:	2001      	movs	r0, #1
 804285a:	f001 fe79 	bl	8044550 <HAL_FLASH_Program>
 804285e:	4603      	mov	r3, r0
 8042860:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042862:	7efb      	ldrb	r3, [r7, #27]
 8042864:	2b00      	cmp	r3, #0
 8042866:	f000 80b4 	beq.w	80429d2 <EE_Init+0x39a>
        {
          return FlashStatus;
 804286a:	7efb      	ldrb	r3, [r7, #27]
 804286c:	b29b      	uxth	r3, r3
 804286e:	e0b6      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8042870:	f000 f956 	bl	8042b20 <EE_Format>
 8042874:	4603      	mov	r3, r0
 8042876:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042878:	7efb      	ldrb	r3, [r7, #27]
 804287a:	2b00      	cmp	r3, #0
 804287c:	f000 80a9 	beq.w	80429d2 <EE_Init+0x39a>
        {
          return FlashStatus;
 8042880:	7efb      	ldrb	r3, [r7, #27]
 8042882:	b29b      	uxth	r3, r3
 8042884:	e0ab      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8042886:	8c3b      	ldrh	r3, [r7, #32]
 8042888:	2b00      	cmp	r3, #0
 804288a:	d10a      	bne.n	80428a2 <EE_Init+0x26a>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 804288c:	f000 f948 	bl	8042b20 <EE_Format>
 8042890:	4603      	mov	r3, r0
 8042892:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042894:	7efb      	ldrb	r3, [r7, #27]
 8042896:	2b00      	cmp	r3, #0
 8042898:	f000 809d 	beq.w	80429d6 <EE_Init+0x39e>
        {
          return FlashStatus;
 804289c:	7efb      	ldrb	r3, [r7, #27]
 804289e:	b29b      	uxth	r3, r3
 80428a0:	e09d      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80428a2:	8c3b      	ldrh	r3, [r7, #32]
 80428a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80428a8:	4293      	cmp	r3, r2
 80428aa:	d11b      	bne.n	80428e4 <EE_Init+0x2ac>
      {
        pEraseInit.Sector = PAGE1_ID;
 80428ac:	230a      	movs	r3, #10
 80428ae:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80428b0:	2301      	movs	r3, #1
 80428b2:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80428b4:	2301      	movs	r3, #1
 80428b6:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80428b8:	480d      	ldr	r0, [pc, #52]	; (80428f0 <EE_Init+0x2b8>)
 80428ba:	f000 f89f 	bl	80429fc <EE_VerifyPageFullyErased>
 80428be:	4603      	mov	r3, r0
 80428c0:	2b00      	cmp	r3, #0
 80428c2:	f040 8088 	bne.w	80429d6 <EE_Init+0x39e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80428c6:	f107 0214 	add.w	r2, r7, #20
 80428ca:	463b      	mov	r3, r7
 80428cc:	4611      	mov	r1, r2
 80428ce:	4618      	mov	r0, r3
 80428d0:	f001 fff4 	bl	80448bc <HAL_FLASHEx_Erase>
 80428d4:	4603      	mov	r3, r0
 80428d6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80428d8:	7efb      	ldrb	r3, [r7, #27]
 80428da:	2b00      	cmp	r3, #0
 80428dc:	d07b      	beq.n	80429d6 <EE_Init+0x39e>
          {
            return FlashStatus;
 80428de:	7efb      	ldrb	r3, [r7, #27]
 80428e0:	b29b      	uxth	r3, r3
 80428e2:	e07c      	b.n	80429de <EE_Init+0x3a6>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80428e4:	2300      	movs	r3, #0
 80428e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80428e8:	e039      	b.n	804295e <EE_Init+0x326>
 80428ea:	bf00      	nop
 80428ec:	080a0000 	.word	0x080a0000
 80428f0:	080c0000 	.word	0x080c0000
 80428f4:	080a0006 	.word	0x080a0006
 80428f8:	20007756 	.word	0x20007756
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80428fc:	4b3a      	ldr	r3, [pc, #232]	; (80429e8 <EE_Init+0x3b0>)
 80428fe:	881b      	ldrh	r3, [r3, #0]
 8042900:	b29a      	uxth	r2, r3
 8042902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042904:	4939      	ldr	r1, [pc, #228]	; (80429ec <EE_Init+0x3b4>)
 8042906:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 804290a:	429a      	cmp	r2, r3
 804290c:	d101      	bne.n	8042912 <EE_Init+0x2da>
          {
            x = VarIdx;
 804290e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042910:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8042912:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8042914:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8042918:	429a      	cmp	r2, r3
 804291a:	d01d      	beq.n	8042958 <EE_Init+0x320>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 804291c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804291e:	4a33      	ldr	r2, [pc, #204]	; (80429ec <EE_Init+0x3b4>)
 8042920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042924:	4932      	ldr	r1, [pc, #200]	; (80429f0 <EE_Init+0x3b8>)
 8042926:	4618      	mov	r0, r3
 8042928:	f000 f88e 	bl	8042a48 <EE_ReadVariable>
 804292c:	4603      	mov	r3, r0
 804292e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8042930:	8bbb      	ldrh	r3, [r7, #28]
 8042932:	2b01      	cmp	r3, #1
 8042934:	d010      	beq.n	8042958 <EE_Init+0x320>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8042936:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042938:	4a2c      	ldr	r2, [pc, #176]	; (80429ec <EE_Init+0x3b4>)
 804293a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804293e:	4a2c      	ldr	r2, [pc, #176]	; (80429f0 <EE_Init+0x3b8>)
 8042940:	8812      	ldrh	r2, [r2, #0]
 8042942:	4611      	mov	r1, r2
 8042944:	4618      	mov	r0, r3
 8042946:	f000 f983 	bl	8042c50 <EE_VerifyPageFullWriteVariable>
 804294a:	4603      	mov	r3, r0
 804294c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 804294e:	8bfb      	ldrh	r3, [r7, #30]
 8042950:	2b00      	cmp	r3, #0
 8042952:	d001      	beq.n	8042958 <EE_Init+0x320>
              {
                return EepromStatus;
 8042954:	8bfb      	ldrh	r3, [r7, #30]
 8042956:	e042      	b.n	80429de <EE_Init+0x3a6>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8042958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804295a:	3301      	adds	r3, #1
 804295c:	84fb      	strh	r3, [r7, #38]	; 0x26
 804295e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042960:	2b02      	cmp	r3, #2
 8042962:	d9cb      	bls.n	80428fc <EE_Init+0x2c4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8042964:	f04f 0200 	mov.w	r2, #0
 8042968:	f04f 0300 	mov.w	r3, #0
 804296c:	4921      	ldr	r1, [pc, #132]	; (80429f4 <EE_Init+0x3bc>)
 804296e:	2001      	movs	r0, #1
 8042970:	f001 fdee 	bl	8044550 <HAL_FLASH_Program>
 8042974:	4603      	mov	r3, r0
 8042976:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8042978:	7efb      	ldrb	r3, [r7, #27]
 804297a:	2b00      	cmp	r3, #0
 804297c:	d002      	beq.n	8042984 <EE_Init+0x34c>
        {
          return FlashStatus;
 804297e:	7efb      	ldrb	r3, [r7, #27]
 8042980:	b29b      	uxth	r3, r3
 8042982:	e02c      	b.n	80429de <EE_Init+0x3a6>
        }
        pEraseInit.Sector = PAGE0_ID;
 8042984:	2309      	movs	r3, #9
 8042986:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8042988:	2301      	movs	r3, #1
 804298a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 804298c:	2301      	movs	r3, #1
 804298e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042990:	4819      	ldr	r0, [pc, #100]	; (80429f8 <EE_Init+0x3c0>)
 8042992:	f000 f833 	bl	80429fc <EE_VerifyPageFullyErased>
 8042996:	4603      	mov	r3, r0
 8042998:	2b00      	cmp	r3, #0
 804299a:	d11c      	bne.n	80429d6 <EE_Init+0x39e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 804299c:	f107 0214 	add.w	r2, r7, #20
 80429a0:	463b      	mov	r3, r7
 80429a2:	4611      	mov	r1, r2
 80429a4:	4618      	mov	r0, r3
 80429a6:	f001 ff89 	bl	80448bc <HAL_FLASHEx_Erase>
 80429aa:	4603      	mov	r3, r0
 80429ac:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80429ae:	7efb      	ldrb	r3, [r7, #27]
 80429b0:	2b00      	cmp	r3, #0
 80429b2:	d010      	beq.n	80429d6 <EE_Init+0x39e>
          {
            return FlashStatus;
 80429b4:	7efb      	ldrb	r3, [r7, #27]
 80429b6:	b29b      	uxth	r3, r3
 80429b8:	e011      	b.n	80429de <EE_Init+0x3a6>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80429ba:	f000 f8b1 	bl	8042b20 <EE_Format>
 80429be:	4603      	mov	r3, r0
 80429c0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80429c2:	7efb      	ldrb	r3, [r7, #27]
 80429c4:	2b00      	cmp	r3, #0
 80429c6:	d008      	beq.n	80429da <EE_Init+0x3a2>
      {
        return FlashStatus;
 80429c8:	7efb      	ldrb	r3, [r7, #27]
 80429ca:	b29b      	uxth	r3, r3
 80429cc:	e007      	b.n	80429de <EE_Init+0x3a6>
      break;
 80429ce:	bf00      	nop
 80429d0:	e004      	b.n	80429dc <EE_Init+0x3a4>
      break;
 80429d2:	bf00      	nop
 80429d4:	e002      	b.n	80429dc <EE_Init+0x3a4>
      break;
 80429d6:	bf00      	nop
 80429d8:	e000      	b.n	80429dc <EE_Init+0x3a4>
      }
      break;
 80429da:	bf00      	nop
  }

  return HAL_OK;
 80429dc:	2300      	movs	r3, #0
}
 80429de:	4618      	mov	r0, r3
 80429e0:	3728      	adds	r7, #40	; 0x28
 80429e2:	46bd      	mov	sp, r7
 80429e4:	bd80      	pop	{r7, pc}
 80429e6:	bf00      	nop
 80429e8:	080c0006 	.word	0x080c0006
 80429ec:	20000004 	.word	0x20000004
 80429f0:	20007756 	.word	0x20007756
 80429f4:	080c0000 	.word	0x080c0000
 80429f8:	080a0000 	.word	0x080a0000

080429fc <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80429fc:	b480      	push	{r7}
 80429fe:	b085      	sub	sp, #20
 8042a00:	af00      	add	r7, sp, #0
 8042a02:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8042a04:	2301      	movs	r3, #1
 8042a06:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8042a08:	f245 5355 	movw	r3, #21845	; 0x5555
 8042a0c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8042a0e:	e00d      	b.n	8042a2c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8042a10:	687b      	ldr	r3, [r7, #4]
 8042a12:	881b      	ldrh	r3, [r3, #0]
 8042a14:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8042a16:	897b      	ldrh	r3, [r7, #10]
 8042a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042a1c:	4293      	cmp	r3, r2
 8042a1e:	d002      	beq.n	8042a26 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8042a20:	2300      	movs	r3, #0
 8042a22:	60fb      	str	r3, [r7, #12]

      break;
 8042a24:	e006      	b.n	8042a34 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	3304      	adds	r3, #4
 8042a2a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8042a2c:	687b      	ldr	r3, [r7, #4]
 8042a2e:	4a05      	ldr	r2, [pc, #20]	; (8042a44 <EE_VerifyPageFullyErased+0x48>)
 8042a30:	4293      	cmp	r3, r2
 8042a32:	d9ed      	bls.n	8042a10 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8042a34:	68fb      	ldr	r3, [r7, #12]
 8042a36:	b29b      	uxth	r3, r3
}
 8042a38:	4618      	mov	r0, r3
 8042a3a:	3714      	adds	r7, #20
 8042a3c:	46bd      	mov	sp, r7
 8042a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a42:	4770      	bx	lr
 8042a44:	080bffff 	.word	0x080bffff

08042a48 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8042a48:	b580      	push	{r7, lr}
 8042a4a:	b086      	sub	sp, #24
 8042a4c:	af00      	add	r7, sp, #0
 8042a4e:	4603      	mov	r3, r0
 8042a50:	6039      	str	r1, [r7, #0]
 8042a52:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8042a54:	2300      	movs	r3, #0
 8042a56:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8042a58:	f245 5355 	movw	r3, #21845	; 0x5555
 8042a5c:	81bb      	strh	r3, [r7, #12]
 8042a5e:	2301      	movs	r3, #1
 8042a60:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8042a62:	4b1b      	ldr	r3, [pc, #108]	; (8042ad0 <EE_ReadVariable+0x88>)
 8042a64:	613b      	str	r3, [r7, #16]
 8042a66:	4b1a      	ldr	r3, [pc, #104]	; (8042ad0 <EE_ReadVariable+0x88>)
 8042a68:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8042a6a:	2000      	movs	r0, #0
 8042a6c:	f000 f8aa 	bl	8042bc4 <EE_FindValidPage>
 8042a70:	4603      	mov	r3, r0
 8042a72:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8042a74:	89fb      	ldrh	r3, [r7, #14]
 8042a76:	2bab      	cmp	r3, #171	; 0xab
 8042a78:	d101      	bne.n	8042a7e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8042a7a:	23ab      	movs	r3, #171	; 0xab
 8042a7c:	e024      	b.n	8042ac8 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8042a7e:	89fb      	ldrh	r3, [r7, #14]
 8042a80:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8042a84:	045b      	lsls	r3, r3, #17
 8042a86:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8042a88:	89fb      	ldrh	r3, [r7, #14]
 8042a8a:	3301      	adds	r3, #1
 8042a8c:	045a      	lsls	r2, r3, #17
 8042a8e:	4b11      	ldr	r3, [pc, #68]	; (8042ad4 <EE_ReadVariable+0x8c>)
 8042a90:	4413      	add	r3, r2
 8042a92:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8042a94:	e012      	b.n	8042abc <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8042a96:	693b      	ldr	r3, [r7, #16]
 8042a98:	881b      	ldrh	r3, [r3, #0]
 8042a9a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8042a9c:	89ba      	ldrh	r2, [r7, #12]
 8042a9e:	88fb      	ldrh	r3, [r7, #6]
 8042aa0:	429a      	cmp	r2, r3
 8042aa2:	d108      	bne.n	8042ab6 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8042aa4:	693b      	ldr	r3, [r7, #16]
 8042aa6:	3b02      	subs	r3, #2
 8042aa8:	881b      	ldrh	r3, [r3, #0]
 8042aaa:	b29a      	uxth	r2, r3
 8042aac:	683b      	ldr	r3, [r7, #0]
 8042aae:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8042ab0:	2300      	movs	r3, #0
 8042ab2:	82fb      	strh	r3, [r7, #22]

      break;
 8042ab4:	e007      	b.n	8042ac6 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8042ab6:	693b      	ldr	r3, [r7, #16]
 8042ab8:	3b04      	subs	r3, #4
 8042aba:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8042abc:	68bb      	ldr	r3, [r7, #8]
 8042abe:	3302      	adds	r3, #2
 8042ac0:	693a      	ldr	r2, [r7, #16]
 8042ac2:	429a      	cmp	r2, r3
 8042ac4:	d8e7      	bhi.n	8042a96 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8042ac6:	8afb      	ldrh	r3, [r7, #22]
}
 8042ac8:	4618      	mov	r0, r3
 8042aca:	3718      	adds	r7, #24
 8042acc:	46bd      	mov	sp, r7
 8042ace:	bd80      	pop	{r7, pc}
 8042ad0:	080a0000 	.word	0x080a0000
 8042ad4:	0809fffe 	.word	0x0809fffe

08042ad8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8042ad8:	b580      	push	{r7, lr}
 8042ada:	b084      	sub	sp, #16
 8042adc:	af00      	add	r7, sp, #0
 8042ade:	4603      	mov	r3, r0
 8042ae0:	460a      	mov	r2, r1
 8042ae2:	80fb      	strh	r3, [r7, #6]
 8042ae4:	4613      	mov	r3, r2
 8042ae6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8042ae8:	2300      	movs	r3, #0
 8042aea:	81fb      	strh	r3, [r7, #14]
  uint16_t PageTransferStatus=0;
 8042aec:	2300      	movs	r3, #0
 8042aee:	81bb      	strh	r3, [r7, #12]
  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8042af0:	88ba      	ldrh	r2, [r7, #4]
 8042af2:	88fb      	ldrh	r3, [r7, #6]
 8042af4:	4611      	mov	r1, r2
 8042af6:	4618      	mov	r0, r3
 8042af8:	f000 f8aa 	bl	8042c50 <EE_VerifyPageFullWriteVariable>
 8042afc:	4603      	mov	r3, r0
 8042afe:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8042b00:	89fb      	ldrh	r3, [r7, #14]
 8042b02:	2b80      	cmp	r3, #128	; 0x80
 8042b04:	d107      	bne.n	8042b16 <EE_WriteVariable+0x3e>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8042b06:	88ba      	ldrh	r2, [r7, #4]
 8042b08:	88fb      	ldrh	r3, [r7, #6]
 8042b0a:	4611      	mov	r1, r2
 8042b0c:	4618      	mov	r0, r3
 8042b0e:	f000 f8f9 	bl	8042d04 <EE_PageTransfer>
 8042b12:	4603      	mov	r3, r0
 8042b14:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8042b16:	89fb      	ldrh	r3, [r7, #14]
}
 8042b18:	4618      	mov	r0, r3
 8042b1a:	3710      	adds	r7, #16
 8042b1c:	46bd      	mov	sp, r7
 8042b1e:	bd80      	pop	{r7, pc}

08042b20 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8042b20:	b580      	push	{r7, lr}
 8042b22:	b088      	sub	sp, #32
 8042b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8042b26:	2300      	movs	r3, #0
 8042b28:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8042b2a:	2300      	movs	r3, #0
 8042b2c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8042b2e:	2300      	movs	r3, #0
 8042b30:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8042b32:	2309      	movs	r3, #9
 8042b34:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8042b36:	2301      	movs	r3, #1
 8042b38:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042b3a:	2301      	movs	r3, #1
 8042b3c:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8042b3e:	481f      	ldr	r0, [pc, #124]	; (8042bbc <EE_Format+0x9c>)
 8042b40:	f7ff ff5c 	bl	80429fc <EE_VerifyPageFullyErased>
 8042b44:	4603      	mov	r3, r0
 8042b46:	2b00      	cmp	r3, #0
 8042b48:	d10d      	bne.n	8042b66 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8042b4a:	f107 0218 	add.w	r2, r7, #24
 8042b4e:	1d3b      	adds	r3, r7, #4
 8042b50:	4611      	mov	r1, r2
 8042b52:	4618      	mov	r0, r3
 8042b54:	f001 feb2 	bl	80448bc <HAL_FLASHEx_Erase>
 8042b58:	4603      	mov	r3, r0
 8042b5a:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8042b5c:	7ffb      	ldrb	r3, [r7, #31]
 8042b5e:	2b00      	cmp	r3, #0
 8042b60:	d001      	beq.n	8042b66 <EE_Format+0x46>
    {
      return FlashStatus;
 8042b62:	7ffb      	ldrb	r3, [r7, #31]
 8042b64:	e025      	b.n	8042bb2 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8042b66:	f04f 0200 	mov.w	r2, #0
 8042b6a:	f04f 0300 	mov.w	r3, #0
 8042b6e:	4913      	ldr	r1, [pc, #76]	; (8042bbc <EE_Format+0x9c>)
 8042b70:	2001      	movs	r0, #1
 8042b72:	f001 fced 	bl	8044550 <HAL_FLASH_Program>
 8042b76:	4603      	mov	r3, r0
 8042b78:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8042b7a:	7ffb      	ldrb	r3, [r7, #31]
 8042b7c:	2b00      	cmp	r3, #0
 8042b7e:	d001      	beq.n	8042b84 <EE_Format+0x64>
  {
    return FlashStatus;
 8042b80:	7ffb      	ldrb	r3, [r7, #31]
 8042b82:	e016      	b.n	8042bb2 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8042b84:	230a      	movs	r3, #10
 8042b86:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8042b88:	480d      	ldr	r0, [pc, #52]	; (8042bc0 <EE_Format+0xa0>)
 8042b8a:	f7ff ff37 	bl	80429fc <EE_VerifyPageFullyErased>
 8042b8e:	4603      	mov	r3, r0
 8042b90:	2b00      	cmp	r3, #0
 8042b92:	d10d      	bne.n	8042bb0 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8042b94:	f107 0218 	add.w	r2, r7, #24
 8042b98:	1d3b      	adds	r3, r7, #4
 8042b9a:	4611      	mov	r1, r2
 8042b9c:	4618      	mov	r0, r3
 8042b9e:	f001 fe8d 	bl	80448bc <HAL_FLASHEx_Erase>
 8042ba2:	4603      	mov	r3, r0
 8042ba4:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8042ba6:	7ffb      	ldrb	r3, [r7, #31]
 8042ba8:	2b00      	cmp	r3, #0
 8042baa:	d001      	beq.n	8042bb0 <EE_Format+0x90>
    {
      return FlashStatus;
 8042bac:	7ffb      	ldrb	r3, [r7, #31]
 8042bae:	e000      	b.n	8042bb2 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8042bb0:	2300      	movs	r3, #0
}
 8042bb2:	4618      	mov	r0, r3
 8042bb4:	3720      	adds	r7, #32
 8042bb6:	46bd      	mov	sp, r7
 8042bb8:	bd80      	pop	{r7, pc}
 8042bba:	bf00      	nop
 8042bbc:	080a0000 	.word	0x080a0000
 8042bc0:	080c0000 	.word	0x080c0000

08042bc4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8042bc4:	b480      	push	{r7}
 8042bc6:	b085      	sub	sp, #20
 8042bc8:	af00      	add	r7, sp, #0
 8042bca:	4603      	mov	r3, r0
 8042bcc:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8042bce:	2306      	movs	r3, #6
 8042bd0:	81fb      	strh	r3, [r7, #14]
 8042bd2:	2306      	movs	r3, #6
 8042bd4:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8042bd6:	4b1c      	ldr	r3, [pc, #112]	; (8042c48 <EE_FindValidPage+0x84>)
 8042bd8:	881b      	ldrh	r3, [r3, #0]
 8042bda:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8042bdc:	4b1b      	ldr	r3, [pc, #108]	; (8042c4c <EE_FindValidPage+0x88>)
 8042bde:	881b      	ldrh	r3, [r3, #0]
 8042be0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8042be2:	79fb      	ldrb	r3, [r7, #7]
 8042be4:	2b00      	cmp	r3, #0
 8042be6:	d01b      	beq.n	8042c20 <EE_FindValidPage+0x5c>
 8042be8:	2b01      	cmp	r3, #1
 8042bea:	d125      	bne.n	8042c38 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8042bec:	89bb      	ldrh	r3, [r7, #12]
 8042bee:	2b00      	cmp	r3, #0
 8042bf0:	d108      	bne.n	8042c04 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8042bf2:	89fb      	ldrh	r3, [r7, #14]
 8042bf4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042bf8:	4293      	cmp	r3, r2
 8042bfa:	d101      	bne.n	8042c00 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8042bfc:	2300      	movs	r3, #0
 8042bfe:	e01c      	b.n	8042c3a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8042c00:	2301      	movs	r3, #1
 8042c02:	e01a      	b.n	8042c3a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8042c04:	89fb      	ldrh	r3, [r7, #14]
 8042c06:	2b00      	cmp	r3, #0
 8042c08:	d108      	bne.n	8042c1c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8042c0a:	89bb      	ldrh	r3, [r7, #12]
 8042c0c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042c10:	4293      	cmp	r3, r2
 8042c12:	d101      	bne.n	8042c18 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8042c14:	2301      	movs	r3, #1
 8042c16:	e010      	b.n	8042c3a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8042c18:	2300      	movs	r3, #0
 8042c1a:	e00e      	b.n	8042c3a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8042c1c:	23ab      	movs	r3, #171	; 0xab
 8042c1e:	e00c      	b.n	8042c3a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8042c20:	89fb      	ldrh	r3, [r7, #14]
 8042c22:	2b00      	cmp	r3, #0
 8042c24:	d101      	bne.n	8042c2a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8042c26:	2300      	movs	r3, #0
 8042c28:	e007      	b.n	8042c3a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8042c2a:	89bb      	ldrh	r3, [r7, #12]
 8042c2c:	2b00      	cmp	r3, #0
 8042c2e:	d101      	bne.n	8042c34 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8042c30:	2301      	movs	r3, #1
 8042c32:	e002      	b.n	8042c3a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8042c34:	23ab      	movs	r3, #171	; 0xab
 8042c36:	e000      	b.n	8042c3a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8042c38:	2300      	movs	r3, #0
  }
}
 8042c3a:	4618      	mov	r0, r3
 8042c3c:	3714      	adds	r7, #20
 8042c3e:	46bd      	mov	sp, r7
 8042c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c44:	4770      	bx	lr
 8042c46:	bf00      	nop
 8042c48:	080a0000 	.word	0x080a0000
 8042c4c:	080c0000 	.word	0x080c0000

08042c50 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8042c50:	b580      	push	{r7, lr}
 8042c52:	b086      	sub	sp, #24
 8042c54:	af00      	add	r7, sp, #0
 8042c56:	4603      	mov	r3, r0
 8042c58:	460a      	mov	r2, r1
 8042c5a:	80fb      	strh	r3, [r7, #6]
 8042c5c:	4613      	mov	r3, r2
 8042c5e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8042c60:	2300      	movs	r3, #0
 8042c62:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8042c64:	2300      	movs	r3, #0
 8042c66:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8042c68:	4b23      	ldr	r3, [pc, #140]	; (8042cf8 <EE_VerifyPageFullWriteVariable+0xa8>)
 8042c6a:	617b      	str	r3, [r7, #20]
 8042c6c:	4b23      	ldr	r3, [pc, #140]	; (8042cfc <EE_VerifyPageFullWriteVariable+0xac>)
 8042c6e:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8042c70:	2001      	movs	r0, #1
 8042c72:	f7ff ffa7 	bl	8042bc4 <EE_FindValidPage>
 8042c76:	4603      	mov	r3, r0
 8042c78:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8042c7a:	8a3b      	ldrh	r3, [r7, #16]
 8042c7c:	2bab      	cmp	r3, #171	; 0xab
 8042c7e:	d101      	bne.n	8042c84 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8042c80:	23ab      	movs	r3, #171	; 0xab
 8042c82:	e034      	b.n	8042cee <EE_VerifyPageFullWriteVariable+0x9e>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8042c84:	8a3b      	ldrh	r3, [r7, #16]
 8042c86:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8042c8a:	045b      	lsls	r3, r3, #17
 8042c8c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8042c8e:	8a3b      	ldrh	r3, [r7, #16]
 8042c90:	3301      	adds	r3, #1
 8042c92:	045a      	lsls	r2, r3, #17
 8042c94:	4b1a      	ldr	r3, [pc, #104]	; (8042d00 <EE_VerifyPageFullWriteVariable+0xb0>)
 8042c96:	4413      	add	r3, r2
 8042c98:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8042c9a:	e023      	b.n	8042ce4 <EE_VerifyPageFullWriteVariable+0x94>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8042c9c:	697b      	ldr	r3, [r7, #20]
 8042c9e:	681b      	ldr	r3, [r3, #0]
 8042ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042ca4:	d11b      	bne.n	8042cde <EE_VerifyPageFullWriteVariable+0x8e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8042ca6:	88ba      	ldrh	r2, [r7, #4]
 8042ca8:	f04f 0300 	mov.w	r3, #0
 8042cac:	6979      	ldr	r1, [r7, #20]
 8042cae:	2001      	movs	r0, #1
 8042cb0:	f001 fc4e 	bl	8044550 <HAL_FLASH_Program>
 8042cb4:	4603      	mov	r3, r0
 8042cb6:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8042cb8:	7cfb      	ldrb	r3, [r7, #19]
 8042cba:	2b00      	cmp	r3, #0
 8042cbc:	d002      	beq.n	8042cc4 <EE_VerifyPageFullWriteVariable+0x74>
      {
        return FlashStatus;
 8042cbe:	7cfb      	ldrb	r3, [r7, #19]
 8042cc0:	b29b      	uxth	r3, r3
 8042cc2:	e014      	b.n	8042cee <EE_VerifyPageFullWriteVariable+0x9e>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8042cc4:	697b      	ldr	r3, [r7, #20]
 8042cc6:	1c99      	adds	r1, r3, #2
 8042cc8:	88fa      	ldrh	r2, [r7, #6]
 8042cca:	f04f 0300 	mov.w	r3, #0
 8042cce:	2001      	movs	r0, #1
 8042cd0:	f001 fc3e 	bl	8044550 <HAL_FLASH_Program>
 8042cd4:	4603      	mov	r3, r0
 8042cd6:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8042cd8:	7cfb      	ldrb	r3, [r7, #19]
 8042cda:	b29b      	uxth	r3, r3
 8042cdc:	e007      	b.n	8042cee <EE_VerifyPageFullWriteVariable+0x9e>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8042cde:	697b      	ldr	r3, [r7, #20]
 8042ce0:	3304      	adds	r3, #4
 8042ce2:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8042ce4:	697a      	ldr	r2, [r7, #20]
 8042ce6:	68fb      	ldr	r3, [r7, #12]
 8042ce8:	429a      	cmp	r2, r3
 8042cea:	d3d7      	bcc.n	8042c9c <EE_VerifyPageFullWriteVariable+0x4c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8042cec:	2380      	movs	r3, #128	; 0x80
}
 8042cee:	4618      	mov	r0, r3
 8042cf0:	3718      	adds	r7, #24
 8042cf2:	46bd      	mov	sp, r7
 8042cf4:	bd80      	pop	{r7, pc}
 8042cf6:	bf00      	nop
 8042cf8:	080a0000 	.word	0x080a0000
 8042cfc:	080c0000 	.word	0x080c0000
 8042d00:	0809ffff 	.word	0x0809ffff

08042d04 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8042d04:	b580      	push	{r7, lr}
 8042d06:	b08c      	sub	sp, #48	; 0x30
 8042d08:	af00      	add	r7, sp, #0
 8042d0a:	4603      	mov	r3, r0
 8042d0c:	460a      	mov	r2, r1
 8042d0e:	80fb      	strh	r3, [r7, #6]
 8042d10:	4613      	mov	r3, r2
 8042d12:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8042d14:	2300      	movs	r3, #0
 8042d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8042d1a:	4b55      	ldr	r3, [pc, #340]	; (8042e70 <EE_PageTransfer+0x16c>)
 8042d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8042d1e:	2300      	movs	r3, #0
 8042d20:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8042d22:	2300      	movs	r3, #0
 8042d24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8042d26:	2300      	movs	r3, #0
 8042d28:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8042d2a:	2300      	movs	r3, #0
 8042d2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8042d2e:	2300      	movs	r3, #0
 8042d30:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8042d32:	2300      	movs	r3, #0
 8042d34:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8042d36:	2000      	movs	r0, #0
 8042d38:	f7ff ff44 	bl	8042bc4 <EE_FindValidPage>
 8042d3c:	4603      	mov	r3, r0
 8042d3e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8042d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8042d42:	2b01      	cmp	r3, #1
 8042d44:	d104      	bne.n	8042d50 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8042d46:	4b4a      	ldr	r3, [pc, #296]	; (8042e70 <EE_PageTransfer+0x16c>)
 8042d48:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8042d4a:	230a      	movs	r3, #10
 8042d4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8042d4e:	e009      	b.n	8042d64 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8042d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8042d52:	2b00      	cmp	r3, #0
 8042d54:	d104      	bne.n	8042d60 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8042d56:	4b47      	ldr	r3, [pc, #284]	; (8042e74 <EE_PageTransfer+0x170>)
 8042d58:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8042d5a:	2309      	movs	r3, #9
 8042d5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8042d5e:	e001      	b.n	8042d64 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8042d60:	23ab      	movs	r3, #171	; 0xab
 8042d62:	e080      	b.n	8042e66 <EE_PageTransfer+0x162>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8042d64:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8042d68:	f04f 0300 	mov.w	r3, #0
 8042d6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042d6e:	2001      	movs	r0, #1
 8042d70:	f001 fbee 	bl	8044550 <HAL_FLASH_Program>
 8042d74:	4603      	mov	r3, r0
 8042d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8042d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042d7e:	2b00      	cmp	r3, #0
 8042d80:	d003      	beq.n	8042d8a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8042d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042d86:	b29b      	uxth	r3, r3
 8042d88:	e06d      	b.n	8042e66 <EE_PageTransfer+0x162>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8042d8a:	88ba      	ldrh	r2, [r7, #4]
 8042d8c:	88fb      	ldrh	r3, [r7, #6]
 8042d8e:	4611      	mov	r1, r2
 8042d90:	4618      	mov	r0, r3
 8042d92:	f7ff ff5d 	bl	8042c50 <EE_VerifyPageFullWriteVariable>
 8042d96:	4603      	mov	r3, r0
 8042d98:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8042d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042d9c:	2b00      	cmp	r3, #0
 8042d9e:	d001      	beq.n	8042da4 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8042da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042da2:	e060      	b.n	8042e66 <EE_PageTransfer+0x162>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042da4:	2300      	movs	r3, #0
 8042da6:	853b      	strh	r3, [r7, #40]	; 0x28
 8042da8:	e029      	b.n	8042dfe <EE_PageTransfer+0xfa>
  {
    if ( (KP_VirtAddr+VarIdx) != VirtAddress)  /* Check each variable except the one passed as parameter */
 8042daa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042dac:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8042db0:	33a0      	adds	r3, #160	; 0xa0
 8042db2:	88fa      	ldrh	r2, [r7, #6]
 8042db4:	4293      	cmp	r3, r2
 8042db6:	d01f      	beq.n	8042df8 <EE_PageTransfer+0xf4>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable( (KP_VirtAddr+VarIdx), &DataVar);
 8042db8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042dba:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8042dbe:	3b60      	subs	r3, #96	; 0x60
 8042dc0:	b29b      	uxth	r3, r3
 8042dc2:	492d      	ldr	r1, [pc, #180]	; (8042e78 <EE_PageTransfer+0x174>)
 8042dc4:	4618      	mov	r0, r3
 8042dc6:	f7ff fe3f 	bl	8042a48 <EE_ReadVariable>
 8042dca:	4603      	mov	r3, r0
 8042dcc:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8042dce:	8c3b      	ldrh	r3, [r7, #32]
 8042dd0:	2b01      	cmp	r3, #1
 8042dd2:	d011      	beq.n	8042df8 <EE_PageTransfer+0xf4>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable( (KP_VirtAddr+VarIdx), DataVar);
 8042dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042dd6:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8042dda:	3b60      	subs	r3, #96	; 0x60
 8042ddc:	b29b      	uxth	r3, r3
 8042dde:	4a26      	ldr	r2, [pc, #152]	; (8042e78 <EE_PageTransfer+0x174>)
 8042de0:	8812      	ldrh	r2, [r2, #0]
 8042de2:	4611      	mov	r1, r2
 8042de4:	4618      	mov	r0, r3
 8042de6:	f7ff ff33 	bl	8042c50 <EE_VerifyPageFullWriteVariable>
 8042dea:	4603      	mov	r3, r0
 8042dec:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8042dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042df0:	2b00      	cmp	r3, #0
 8042df2:	d001      	beq.n	8042df8 <EE_PageTransfer+0xf4>
        {
          return EepromStatus;
 8042df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8042df6:	e036      	b.n	8042e66 <EE_PageTransfer+0x162>
  for (VarIdx = 0; VarIdx < MaxNumOfVirtAddr; VarIdx++)
 8042df8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042dfa:	3301      	adds	r3, #1
 8042dfc:	853b      	strh	r3, [r7, #40]	; 0x28
 8042dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042e00:	2b09      	cmp	r3, #9
 8042e02:	d9d2      	bls.n	8042daa <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8042e04:	2300      	movs	r3, #0
 8042e06:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8042e08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8042e0a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8042e0c:	2301      	movs	r3, #1
 8042e0e:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8042e10:	2301      	movs	r3, #1
 8042e12:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8042e14:	f107 021c 	add.w	r2, r7, #28
 8042e18:	f107 0308 	add.w	r3, r7, #8
 8042e1c:	4611      	mov	r1, r2
 8042e1e:	4618      	mov	r0, r3
 8042e20:	f001 fd4c 	bl	80448bc <HAL_FLASHEx_Erase>
 8042e24:	4603      	mov	r3, r0
 8042e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8042e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042e2e:	2b00      	cmp	r3, #0
 8042e30:	d003      	beq.n	8042e3a <EE_PageTransfer+0x136>
  {
    return FlashStatus;
 8042e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042e36:	b29b      	uxth	r3, r3
 8042e38:	e015      	b.n	8042e66 <EE_PageTransfer+0x162>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8042e3a:	f04f 0200 	mov.w	r2, #0
 8042e3e:	f04f 0300 	mov.w	r3, #0
 8042e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042e44:	2001      	movs	r0, #1
 8042e46:	f001 fb83 	bl	8044550 <HAL_FLASH_Program>
 8042e4a:	4603      	mov	r3, r0
 8042e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8042e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042e54:	2b00      	cmp	r3, #0
 8042e56:	d003      	beq.n	8042e60 <EE_PageTransfer+0x15c>
  {
    return FlashStatus;
 8042e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042e5c:	b29b      	uxth	r3, r3
 8042e5e:	e002      	b.n	8042e66 <EE_PageTransfer+0x162>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8042e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042e64:	b29b      	uxth	r3, r3
}
 8042e66:	4618      	mov	r0, r3
 8042e68:	3730      	adds	r7, #48	; 0x30
 8042e6a:	46bd      	mov	sp, r7
 8042e6c:	bd80      	pop	{r7, pc}
 8042e6e:	bf00      	nop
 8042e70:	080a0000 	.word	0x080a0000
 8042e74:	080c0000 	.word	0x080c0000
 8042e78:	20007756 	.word	0x20007756

08042e7c <FEE_WriteCtrlParams>:
 HAL_FLASH_Lock();
}


HAL_StatusTypeDef FEE_WriteCtrlParams(msTempControlParams* CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 8042e7c:	b580      	push	{r7, lr}
 8042e7e:	b088      	sub	sp, #32
 8042e80:	af00      	add	r7, sp, #0
 8042e82:	6078      	str	r0, [r7, #4]
 8042e84:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result=HAL_OK;
 8042e86:	2300      	movs	r3, #0
 8042e88:	77fb      	strb	r3, [r7, #31]
	uint8_t ui8_bank1Percentage=CtrlParams->ui8_bank1Percentage;
 8042e8a:	687b      	ldr	r3, [r7, #4]
 8042e8c:	781b      	ldrb	r3, [r3, #0]
 8042e8e:	77bb      	strb	r3, [r7, #30]
	uint8_t ui8_bank2Percentage=CtrlParams->ui8_bank2Percentage;
 8042e90:	687b      	ldr	r3, [r7, #4]
 8042e92:	785b      	ldrb	r3, [r3, #1]
 8042e94:	777b      	strb	r3, [r7, #29]
	uint16_t u16_KP=(uint16_t)p_ReflowParameters->KP;
 8042e96:	683b      	ldr	r3, [r7, #0]
 8042e98:	edd3 7a00 	vldr	s15, [r3]
 8042e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8042ea0:	ee17 3a90 	vmov	r3, s15
 8042ea4:	837b      	strh	r3, [r7, #26]
	uint16_t u16_firstHeatUpRate=(uint16_t)(p_ReflowParameters->firstHeatUpRate * 100.0);
 8042ea6:	683b      	ldr	r3, [r7, #0]
 8042ea8:	68db      	ldr	r3, [r3, #12]
 8042eaa:	4618      	mov	r0, r3
 8042eac:	f7fd fb4c 	bl	8040548 <__aeabi_f2d>
 8042eb0:	f04f 0200 	mov.w	r2, #0
 8042eb4:	4b52      	ldr	r3, [pc, #328]	; (8043000 <FEE_WriteCtrlParams+0x184>)
 8042eb6:	f7fd fb9f 	bl	80405f8 <__aeabi_dmul>
 8042eba:	4602      	mov	r2, r0
 8042ebc:	460b      	mov	r3, r1
 8042ebe:	4610      	mov	r0, r2
 8042ec0:	4619      	mov	r1, r3
 8042ec2:	f7fd fe71 	bl	8040ba8 <__aeabi_d2uiz>
 8042ec6:	4603      	mov	r3, r0
 8042ec8:	833b      	strh	r3, [r7, #24]
	uint16_t u16_secondHeatUpRate=(uint16_t)(p_ReflowParameters->secondHeatUpRate * 100.0);
 8042eca:	683b      	ldr	r3, [r7, #0]
 8042ecc:	699b      	ldr	r3, [r3, #24]
 8042ece:	4618      	mov	r0, r3
 8042ed0:	f7fd fb3a 	bl	8040548 <__aeabi_f2d>
 8042ed4:	f04f 0200 	mov.w	r2, #0
 8042ed8:	4b49      	ldr	r3, [pc, #292]	; (8043000 <FEE_WriteCtrlParams+0x184>)
 8042eda:	f7fd fb8d 	bl	80405f8 <__aeabi_dmul>
 8042ede:	4602      	mov	r2, r0
 8042ee0:	460b      	mov	r3, r1
 8042ee2:	4610      	mov	r0, r2
 8042ee4:	4619      	mov	r1, r3
 8042ee6:	f7fd fe5f 	bl	8040ba8 <__aeabi_d2uiz>
 8042eea:	4603      	mov	r3, r0
 8042eec:	82fb      	strh	r3, [r7, #22]
	uint16_t u16_SoakTime= (uint16_t)p_ReflowParameters->SoakTime;
 8042eee:	683b      	ldr	r3, [r7, #0]
 8042ef0:	695b      	ldr	r3, [r3, #20]
 8042ef2:	82bb      	strh	r3, [r7, #20]
	uint16_t u16_SoakTemperature= (uint16_t)p_ReflowParameters->SoakTempeture;
 8042ef4:	683b      	ldr	r3, [r7, #0]
 8042ef6:	691b      	ldr	r3, [r3, #16]
 8042ef8:	827b      	strh	r3, [r7, #18]
	uint16_t u16_ReflowTime= (uint16_t)p_ReflowParameters->ReflowTime;
 8042efa:	683b      	ldr	r3, [r7, #0]
 8042efc:	6a1b      	ldr	r3, [r3, #32]
 8042efe:	823b      	strh	r3, [r7, #16]
	uint16_t u16_ReflowTemperature= (uint16_t)p_ReflowParameters->ReflowTempeture;
 8042f00:	683b      	ldr	r3, [r7, #0]
 8042f02:	69db      	ldr	r3, [r3, #28]
 8042f04:	81fb      	strh	r3, [r7, #14]


	if((EE_WriteVariable(ui8_bank1Percentage_VirtAddr,(uint16_t)ui8_bank1Percentage)) != HAL_OK)
 8042f06:	7fbb      	ldrb	r3, [r7, #30]
 8042f08:	b29b      	uxth	r3, r3
 8042f0a:	4619      	mov	r1, r3
 8042f0c:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 8042f10:	f7ff fde2 	bl	8042ad8 <EE_WriteVariable>
 8042f14:	4603      	mov	r3, r0
 8042f16:	2b00      	cmp	r3, #0
 8042f18:	d003      	beq.n	8042f22 <FEE_WriteCtrlParams+0xa6>
	{
		result=HAL_ERROR;
 8042f1a:	2301      	movs	r3, #1
 8042f1c:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042f1e:	f000 fe05 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(ui8_bank2Percentage_VirtAddr,  (uint16_t)ui8_bank2Percentage)) != HAL_OK)
 8042f22:	7f7b      	ldrb	r3, [r7, #29]
 8042f24:	b29b      	uxth	r3, r3
 8042f26:	4619      	mov	r1, r3
 8042f28:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 8042f2c:	f7ff fdd4 	bl	8042ad8 <EE_WriteVariable>
 8042f30:	4603      	mov	r3, r0
 8042f32:	2b00      	cmp	r3, #0
 8042f34:	d003      	beq.n	8042f3e <FEE_WriteCtrlParams+0xc2>
	{
		result=HAL_ERROR;
 8042f36:	2301      	movs	r3, #1
 8042f38:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042f3a:	f000 fdf7 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(KP_VirtAddr,  u16_KP)) != HAL_OK)
 8042f3e:	8b7b      	ldrh	r3, [r7, #26]
 8042f40:	4619      	mov	r1, r3
 8042f42:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 8042f46:	f7ff fdc7 	bl	8042ad8 <EE_WriteVariable>
 8042f4a:	4603      	mov	r3, r0
 8042f4c:	2b00      	cmp	r3, #0
 8042f4e:	d003      	beq.n	8042f58 <FEE_WriteCtrlParams+0xdc>
	{
		result=HAL_ERROR;
 8042f50:	2301      	movs	r3, #1
 8042f52:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042f54:	f000 fdea 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(firstHeatUpRate_VirtAddr,  (uint16_t)u16_firstHeatUpRate)) != HAL_OK)
 8042f58:	8b3b      	ldrh	r3, [r7, #24]
 8042f5a:	4619      	mov	r1, r3
 8042f5c:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 8042f60:	f7ff fdba 	bl	8042ad8 <EE_WriteVariable>
 8042f64:	4603      	mov	r3, r0
 8042f66:	2b00      	cmp	r3, #0
 8042f68:	d003      	beq.n	8042f72 <FEE_WriteCtrlParams+0xf6>
	{
		result=HAL_ERROR;
 8042f6a:	2301      	movs	r3, #1
 8042f6c:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042f6e:	f000 fddd 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(secondHeatUpRate_VirtAddr, (uint16_t) u16_secondHeatUpRate)) != HAL_OK)
 8042f72:	8afb      	ldrh	r3, [r7, #22]
 8042f74:	4619      	mov	r1, r3
 8042f76:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 8042f7a:	f7ff fdad 	bl	8042ad8 <EE_WriteVariable>
 8042f7e:	4603      	mov	r3, r0
 8042f80:	2b00      	cmp	r3, #0
 8042f82:	d003      	beq.n	8042f8c <FEE_WriteCtrlParams+0x110>
	{
		result=HAL_ERROR;
 8042f84:	2301      	movs	r3, #1
 8042f86:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042f88:	f000 fdd0 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(SoakTime_VirtAddr, (uint16_t) u16_SoakTime)) != HAL_OK)
 8042f8c:	8abb      	ldrh	r3, [r7, #20]
 8042f8e:	4619      	mov	r1, r3
 8042f90:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 8042f94:	f7ff fda0 	bl	8042ad8 <EE_WriteVariable>
 8042f98:	4603      	mov	r3, r0
 8042f9a:	2b00      	cmp	r3, #0
 8042f9c:	d003      	beq.n	8042fa6 <FEE_WriteCtrlParams+0x12a>
	{
		result=HAL_ERROR;
 8042f9e:	2301      	movs	r3, #1
 8042fa0:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042fa2:	f000 fdc3 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(SoakTempeture_VirtAddr, (uint16_t) u16_SoakTemperature)) != HAL_OK)
 8042fa6:	8a7b      	ldrh	r3, [r7, #18]
 8042fa8:	4619      	mov	r1, r3
 8042faa:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 8042fae:	f7ff fd93 	bl	8042ad8 <EE_WriteVariable>
 8042fb2:	4603      	mov	r3, r0
 8042fb4:	2b00      	cmp	r3, #0
 8042fb6:	d003      	beq.n	8042fc0 <FEE_WriteCtrlParams+0x144>
	{
		result=HAL_ERROR;
 8042fb8:	2301      	movs	r3, #1
 8042fba:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042fbc:	f000 fdb6 	bl	8043b2c <Error_Handler>
	}
	if((EE_WriteVariable(ReflowTime_VirtAddr, (uint16_t) u16_ReflowTime)) != HAL_OK)
 8042fc0:	8a3b      	ldrh	r3, [r7, #16]
 8042fc2:	4619      	mov	r1, r3
 8042fc4:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 8042fc8:	f7ff fd86 	bl	8042ad8 <EE_WriteVariable>
 8042fcc:	4603      	mov	r3, r0
 8042fce:	2b00      	cmp	r3, #0
 8042fd0:	d003      	beq.n	8042fda <FEE_WriteCtrlParams+0x15e>
	{
		result=HAL_ERROR;
 8042fd2:	2301      	movs	r3, #1
 8042fd4:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042fd6:	f000 fda9 	bl	8043b2c <Error_Handler>
	}

	if((EE_WriteVariable(ReflowTempeture_VirtAddr, (uint16_t) u16_ReflowTemperature)) != HAL_OK)
 8042fda:	89fb      	ldrh	r3, [r7, #14]
 8042fdc:	4619      	mov	r1, r3
 8042fde:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 8042fe2:	f7ff fd79 	bl	8042ad8 <EE_WriteVariable>
 8042fe6:	4603      	mov	r3, r0
 8042fe8:	2b00      	cmp	r3, #0
 8042fea:	d003      	beq.n	8042ff4 <FEE_WriteCtrlParams+0x178>
	{
		result=HAL_ERROR;
 8042fec:	2301      	movs	r3, #1
 8042fee:	77fb      	strb	r3, [r7, #31]
		Error_Handler();
 8042ff0:	f000 fd9c 	bl	8043b2c <Error_Handler>
	}

	return result;
 8042ff4:	7ffb      	ldrb	r3, [r7, #31]

}
 8042ff6:	4618      	mov	r0, r3
 8042ff8:	3720      	adds	r7, #32
 8042ffa:	46bd      	mov	sp, r7
 8042ffc:	bd80      	pop	{r7, pc}
 8042ffe:	bf00      	nop
 8043000:	40590000 	.word	0x40590000

08043004 <FEE_ReadCtrlParams>:

HAL_StatusTypeDef FEE_ReadCtrlParams(msTempControlParams* CtrlParams, ReflowTemplate *p_ReflowParameters)
{
 8043004:	b580      	push	{r7, lr}
 8043006:	b08c      	sub	sp, #48	; 0x30
 8043008:	af00      	add	r7, sp, #0
 804300a:	6078      	str	r0, [r7, #4]
 804300c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef result = HAL_OK;
 804300e:	2300      	movs	r3, #0
 8043010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t *p_bank1Percentage = (uint16_t*)&CtrlParams->ui8_bank1Percentage;
 8043014:	687b      	ldr	r3, [r7, #4]
 8043016:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t *p_bank2Percentage = (uint16_t*)&CtrlParams->ui8_bank2Percentage;
 8043018:	687b      	ldr	r3, [r7, #4]
 804301a:	3301      	adds	r3, #1
 804301c:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t *p_KP = (uint16_t*)&p_ReflowParameters->KP;
 804301e:	683b      	ldr	r3, [r7, #0]
 8043020:	623b      	str	r3, [r7, #32]
	uint16_t *p_firstHeatUpRate = (uint16_t*)&p_ReflowParameters->firstHeatUpRate;
 8043022:	683b      	ldr	r3, [r7, #0]
 8043024:	330c      	adds	r3, #12
 8043026:	61fb      	str	r3, [r7, #28]
	uint16_t *p_secondHeatUpRate = (uint16_t*)&p_ReflowParameters->secondHeatUpRate;
 8043028:	683b      	ldr	r3, [r7, #0]
 804302a:	3318      	adds	r3, #24
 804302c:	61bb      	str	r3, [r7, #24]
	uint16_t *p_SoakTime = (uint16_t*)&p_ReflowParameters->SoakTime;
 804302e:	683b      	ldr	r3, [r7, #0]
 8043030:	3314      	adds	r3, #20
 8043032:	617b      	str	r3, [r7, #20]
	uint16_t *p_SoakTemperature =(uint16_t*)&p_ReflowParameters->SoakTempeture ;
 8043034:	683b      	ldr	r3, [r7, #0]
 8043036:	3310      	adds	r3, #16
 8043038:	613b      	str	r3, [r7, #16]
	uint16_t *p_ReflowTime =(uint16_t*)&p_ReflowParameters->ReflowTime;
 804303a:	683b      	ldr	r3, [r7, #0]
 804303c:	3320      	adds	r3, #32
 804303e:	60fb      	str	r3, [r7, #12]
	uint16_t *p_ReflowTemperature =(uint16_t*)&p_ReflowParameters->ReflowTempeture ;
 8043040:	683b      	ldr	r3, [r7, #0]
 8043042:	331c      	adds	r3, #28
 8043044:	60bb      	str	r3, [r7, #8]


	/*NULL PTR Check*/
	if( (NULL==p_bank1Percentage) || (NULL==p_bank2Percentage) || (NULL==p_KP) || (NULL==p_firstHeatUpRate) || (NULL==p_secondHeatUpRate) ||
 8043046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043048:	2b00      	cmp	r3, #0
 804304a:	d017      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 804304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804304e:	2b00      	cmp	r3, #0
 8043050:	d014      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 8043052:	6a3b      	ldr	r3, [r7, #32]
 8043054:	2b00      	cmp	r3, #0
 8043056:	d011      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 8043058:	69fb      	ldr	r3, [r7, #28]
 804305a:	2b00      	cmp	r3, #0
 804305c:	d00e      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 804305e:	69bb      	ldr	r3, [r7, #24]
 8043060:	2b00      	cmp	r3, #0
 8043062:	d00b      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 8043064:	697b      	ldr	r3, [r7, #20]
 8043066:	2b00      	cmp	r3, #0
 8043068:	d008      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
			 (NULL==p_SoakTime) ||  (NULL==p_SoakTemperature) || (NULL==p_ReflowTime) || (NULL==p_ReflowTemperature) )
 804306a:	693b      	ldr	r3, [r7, #16]
 804306c:	2b00      	cmp	r3, #0
 804306e:	d005      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 8043070:	68fb      	ldr	r3, [r7, #12]
 8043072:	2b00      	cmp	r3, #0
 8043074:	d002      	beq.n	804307c <FEE_ReadCtrlParams+0x78>
 8043076:	68bb      	ldr	r3, [r7, #8]
 8043078:	2b00      	cmp	r3, #0
 804307a:	d100      	bne.n	804307e <FEE_ReadCtrlParams+0x7a>
	{
		while(1);
 804307c:	e7fe      	b.n	804307c <FEE_ReadCtrlParams+0x78>
	}




	 if((EE_ReadVariable(ui8_bank1Percentage_VirtAddr, p_bank1Percentage)) != HAL_OK)
 804307e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8043080:	f64a 20a7 	movw	r0, #43687	; 0xaaa7
 8043084:	f7ff fce0 	bl	8042a48 <EE_ReadVariable>
 8043088:	4603      	mov	r3, r0
 804308a:	2b00      	cmp	r3, #0
 804308c:	d002      	beq.n	8043094 <FEE_ReadCtrlParams+0x90>
	{
		result=HAL_ERROR;
 804308e:	2301      	movs	r3, #1
 8043090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(ui8_bank2Percentage_VirtAddr, p_bank2Percentage)) != HAL_OK)
 8043094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8043096:	f64a 20a8 	movw	r0, #43688	; 0xaaa8
 804309a:	f7ff fcd5 	bl	8042a48 <EE_ReadVariable>
 804309e:	4603      	mov	r3, r0
 80430a0:	2b00      	cmp	r3, #0
 80430a2:	d002      	beq.n	80430aa <FEE_ReadCtrlParams+0xa6>
	{
		result=HAL_ERROR;
 80430a4:	2301      	movs	r3, #1
 80430a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(KP_VirtAddr,  p_KP)) != HAL_OK)
 80430aa:	6a39      	ldr	r1, [r7, #32]
 80430ac:	f64a 20a0 	movw	r0, #43680	; 0xaaa0
 80430b0:	f7ff fcca 	bl	8042a48 <EE_ReadVariable>
 80430b4:	4603      	mov	r3, r0
 80430b6:	2b00      	cmp	r3, #0
 80430b8:	d002      	beq.n	80430c0 <FEE_ReadCtrlParams+0xbc>
	{
		result=HAL_ERROR;
 80430ba:	2301      	movs	r3, #1
 80430bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(firstHeatUpRate_VirtAddr,  p_firstHeatUpRate)) != HAL_OK)
 80430c0:	69f9      	ldr	r1, [r7, #28]
 80430c2:	f64a 20a1 	movw	r0, #43681	; 0xaaa1
 80430c6:	f7ff fcbf 	bl	8042a48 <EE_ReadVariable>
 80430ca:	4603      	mov	r3, r0
 80430cc:	2b00      	cmp	r3, #0
 80430ce:	d002      	beq.n	80430d6 <FEE_ReadCtrlParams+0xd2>
	{
		result=HAL_ERROR;
 80430d0:	2301      	movs	r3, #1
 80430d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(secondHeatUpRate_VirtAddr,  p_secondHeatUpRate)) != HAL_OK)
 80430d6:	69b9      	ldr	r1, [r7, #24]
 80430d8:	f64a 20a4 	movw	r0, #43684	; 0xaaa4
 80430dc:	f7ff fcb4 	bl	8042a48 <EE_ReadVariable>
 80430e0:	4603      	mov	r3, r0
 80430e2:	2b00      	cmp	r3, #0
 80430e4:	d002      	beq.n	80430ec <FEE_ReadCtrlParams+0xe8>
	{
		result=HAL_ERROR;
 80430e6:	2301      	movs	r3, #1
 80430e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(SoakTime_VirtAddr,  p_SoakTime)) != HAL_OK)
 80430ec:	6979      	ldr	r1, [r7, #20]
 80430ee:	f64a 20a3 	movw	r0, #43683	; 0xaaa3
 80430f2:	f7ff fca9 	bl	8042a48 <EE_ReadVariable>
 80430f6:	4603      	mov	r3, r0
 80430f8:	2b00      	cmp	r3, #0
 80430fa:	d002      	beq.n	8043102 <FEE_ReadCtrlParams+0xfe>
	{
		result=HAL_ERROR;
 80430fc:	2301      	movs	r3, #1
 80430fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(SoakTempeture_VirtAddr,  p_SoakTemperature)) != HAL_OK)
 8043102:	6939      	ldr	r1, [r7, #16]
 8043104:	f64a 20a2 	movw	r0, #43682	; 0xaaa2
 8043108:	f7ff fc9e 	bl	8042a48 <EE_ReadVariable>
 804310c:	4603      	mov	r3, r0
 804310e:	2b00      	cmp	r3, #0
 8043110:	d002      	beq.n	8043118 <FEE_ReadCtrlParams+0x114>
	{
		result=HAL_ERROR;
 8043112:	2301      	movs	r3, #1
 8043114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}
	if((EE_ReadVariable(ReflowTime_VirtAddr, p_ReflowTime )) != HAL_OK)
 8043118:	68f9      	ldr	r1, [r7, #12]
 804311a:	f64a 20a6 	movw	r0, #43686	; 0xaaa6
 804311e:	f7ff fc93 	bl	8042a48 <EE_ReadVariable>
 8043122:	4603      	mov	r3, r0
 8043124:	2b00      	cmp	r3, #0
 8043126:	d002      	beq.n	804312e <FEE_ReadCtrlParams+0x12a>
	{
		result=HAL_ERROR;
 8043128:	2301      	movs	r3, #1
 804312a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}

	if((EE_ReadVariable(ReflowTempeture_VirtAddr, p_ReflowTemperature)) != HAL_OK)
 804312e:	68b9      	ldr	r1, [r7, #8]
 8043130:	f64a 20a5 	movw	r0, #43685	; 0xaaa5
 8043134:	f7ff fc88 	bl	8042a48 <EE_ReadVariable>
 8043138:	4603      	mov	r3, r0
 804313a:	2b00      	cmp	r3, #0
 804313c:	d002      	beq.n	8043144 <FEE_ReadCtrlParams+0x140>
	{
		result=HAL_ERROR;
 804313e:	2301      	movs	r3, #1
 8043140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f





	if(HAL_OK==result)
 8043144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8043148:	2b00      	cmp	r3, #0
 804314a:	d14c      	bne.n	80431e6 <FEE_ReadCtrlParams+0x1e2>
	{
		CtrlParams->ui8_bank1Percentage = (uint8_t)*p_bank1Percentage;
 804314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804314e:	881b      	ldrh	r3, [r3, #0]
 8043150:	b2da      	uxtb	r2, r3
 8043152:	687b      	ldr	r3, [r7, #4]
 8043154:	701a      	strb	r2, [r3, #0]
		CtrlParams->ui8_bank2Percentage = (uint8_t)*p_bank2Percentage;
 8043156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043158:	881b      	ldrh	r3, [r3, #0]
 804315a:	b2da      	uxtb	r2, r3
 804315c:	687b      	ldr	r3, [r7, #4]
 804315e:	705a      	strb	r2, [r3, #1]
		p_ReflowParameters->KP = (float32_t)*p_KP;
 8043160:	6a3b      	ldr	r3, [r7, #32]
 8043162:	881b      	ldrh	r3, [r3, #0]
 8043164:	ee07 3a90 	vmov	s15, r3
 8043168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804316c:	683b      	ldr	r3, [r7, #0]
 804316e:	edc3 7a00 	vstr	s15, [r3]
		p_ReflowParameters->firstHeatUpRate = (float32_t) ( (*p_firstHeatUpRate)/100.0);
 8043172:	69fb      	ldr	r3, [r7, #28]
 8043174:	881b      	ldrh	r3, [r3, #0]
 8043176:	4618      	mov	r0, r3
 8043178:	f7fd f9d4 	bl	8040524 <__aeabi_i2d>
 804317c:	f04f 0200 	mov.w	r2, #0
 8043180:	4b1c      	ldr	r3, [pc, #112]	; (80431f4 <FEE_ReadCtrlParams+0x1f0>)
 8043182:	f7fd fb63 	bl	804084c <__aeabi_ddiv>
 8043186:	4602      	mov	r2, r0
 8043188:	460b      	mov	r3, r1
 804318a:	4610      	mov	r0, r2
 804318c:	4619      	mov	r1, r3
 804318e:	f7fd fd2b 	bl	8040be8 <__aeabi_d2f>
 8043192:	4602      	mov	r2, r0
 8043194:	683b      	ldr	r3, [r7, #0]
 8043196:	60da      	str	r2, [r3, #12]
		p_ReflowParameters->secondHeatUpRate= (float32_t) ( (*p_secondHeatUpRate)/100.0);
 8043198:	69bb      	ldr	r3, [r7, #24]
 804319a:	881b      	ldrh	r3, [r3, #0]
 804319c:	4618      	mov	r0, r3
 804319e:	f7fd f9c1 	bl	8040524 <__aeabi_i2d>
 80431a2:	f04f 0200 	mov.w	r2, #0
 80431a6:	4b13      	ldr	r3, [pc, #76]	; (80431f4 <FEE_ReadCtrlParams+0x1f0>)
 80431a8:	f7fd fb50 	bl	804084c <__aeabi_ddiv>
 80431ac:	4602      	mov	r2, r0
 80431ae:	460b      	mov	r3, r1
 80431b0:	4610      	mov	r0, r2
 80431b2:	4619      	mov	r1, r3
 80431b4:	f7fd fd18 	bl	8040be8 <__aeabi_d2f>
 80431b8:	4602      	mov	r2, r0
 80431ba:	683b      	ldr	r3, [r7, #0]
 80431bc:	619a      	str	r2, [r3, #24]
		p_ReflowParameters->SoakTime = (uint32_t)*p_SoakTime;
 80431be:	697b      	ldr	r3, [r7, #20]
 80431c0:	881b      	ldrh	r3, [r3, #0]
 80431c2:	461a      	mov	r2, r3
 80431c4:	683b      	ldr	r3, [r7, #0]
 80431c6:	615a      	str	r2, [r3, #20]
		p_ReflowParameters->SoakTempeture = (uint32_t)*p_SoakTemperature;
 80431c8:	693b      	ldr	r3, [r7, #16]
 80431ca:	881b      	ldrh	r3, [r3, #0]
 80431cc:	461a      	mov	r2, r3
 80431ce:	683b      	ldr	r3, [r7, #0]
 80431d0:	611a      	str	r2, [r3, #16]
		p_ReflowParameters->ReflowTime = (uint32_t)*p_ReflowTime;
 80431d2:	68fb      	ldr	r3, [r7, #12]
 80431d4:	881b      	ldrh	r3, [r3, #0]
 80431d6:	461a      	mov	r2, r3
 80431d8:	683b      	ldr	r3, [r7, #0]
 80431da:	621a      	str	r2, [r3, #32]
		p_ReflowParameters->ReflowTempeture = (uint32_t)*p_ReflowTemperature;
 80431dc:	68bb      	ldr	r3, [r7, #8]
 80431de:	881b      	ldrh	r3, [r3, #0]
 80431e0:	461a      	mov	r2, r3
 80431e2:	683b      	ldr	r3, [r7, #0]
 80431e4:	61da      	str	r2, [r3, #28]
	}


	return result;
 80431e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f


}
 80431ea:	4618      	mov	r0, r3
 80431ec:	3730      	adds	r7, #48	; 0x30
 80431ee:	46bd      	mov	sp, r7
 80431f0:	bd80      	pop	{r7, pc}
 80431f2:	bf00      	nop
 80431f4:	40590000 	.word	0x40590000

080431f8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define  SLAVE_ADDRESS_LCD 0x4EU // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80431f8:	b580      	push	{r7, lr}
 80431fa:	b086      	sub	sp, #24
 80431fc:	af02      	add	r7, sp, #8
 80431fe:	4603      	mov	r3, r0
 8043200:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8043202:	79fb      	ldrb	r3, [r7, #7]
 8043204:	f023 030f 	bic.w	r3, r3, #15
 8043208:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 804320a:	79fb      	ldrb	r3, [r7, #7]
 804320c:	011b      	lsls	r3, r3, #4
 804320e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8043210:	7bfb      	ldrb	r3, [r7, #15]
 8043212:	f043 030c 	orr.w	r3, r3, #12
 8043216:	b2db      	uxtb	r3, r3
 8043218:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 804321a:	7bfb      	ldrb	r3, [r7, #15]
 804321c:	f043 0308 	orr.w	r3, r3, #8
 8043220:	b2db      	uxtb	r3, r3
 8043222:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8043224:	7bbb      	ldrb	r3, [r7, #14]
 8043226:	f043 030c 	orr.w	r3, r3, #12
 804322a:	b2db      	uxtb	r3, r3
 804322c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 804322e:	7bbb      	ldrb	r3, [r7, #14]
 8043230:	f043 0308 	orr.w	r3, r3, #8
 8043234:	b2db      	uxtb	r3, r3
 8043236:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043238:	f107 0208 	add.w	r2, r7, #8
 804323c:	2364      	movs	r3, #100	; 0x64
 804323e:	9300      	str	r3, [sp, #0]
 8043240:	2304      	movs	r3, #4
 8043242:	214e      	movs	r1, #78	; 0x4e
 8043244:	4803      	ldr	r0, [pc, #12]	; (8043254 <lcd_send_cmd+0x5c>)
 8043246:	f001 ff93 	bl	8045170 <HAL_I2C_Master_Transmit>
}
 804324a:	bf00      	nop
 804324c:	3710      	adds	r7, #16
 804324e:	46bd      	mov	sp, r7
 8043250:	bd80      	pop	{r7, pc}
 8043252:	bf00      	nop
 8043254:	2000eee4 	.word	0x2000eee4

08043258 <lcd_send_data>:

void lcd_send_data (char data)
{
 8043258:	b580      	push	{r7, lr}
 804325a:	b086      	sub	sp, #24
 804325c:	af02      	add	r7, sp, #8
 804325e:	4603      	mov	r3, r0
 8043260:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8043262:	79fb      	ldrb	r3, [r7, #7]
 8043264:	f023 030f 	bic.w	r3, r3, #15
 8043268:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 804326a:	79fb      	ldrb	r3, [r7, #7]
 804326c:	011b      	lsls	r3, r3, #4
 804326e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8043270:	7bfb      	ldrb	r3, [r7, #15]
 8043272:	f043 030d 	orr.w	r3, r3, #13
 8043276:	b2db      	uxtb	r3, r3
 8043278:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 804327a:	7bfb      	ldrb	r3, [r7, #15]
 804327c:	f043 0309 	orr.w	r3, r3, #9
 8043280:	b2db      	uxtb	r3, r3
 8043282:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8043284:	7bbb      	ldrb	r3, [r7, #14]
 8043286:	f043 030d 	orr.w	r3, r3, #13
 804328a:	b2db      	uxtb	r3, r3
 804328c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 804328e:	7bbb      	ldrb	r3, [r7, #14]
 8043290:	f043 0309 	orr.w	r3, r3, #9
 8043294:	b2db      	uxtb	r3, r3
 8043296:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8043298:	f107 0208 	add.w	r2, r7, #8
 804329c:	2364      	movs	r3, #100	; 0x64
 804329e:	9300      	str	r3, [sp, #0]
 80432a0:	2304      	movs	r3, #4
 80432a2:	214e      	movs	r1, #78	; 0x4e
 80432a4:	4803      	ldr	r0, [pc, #12]	; (80432b4 <lcd_send_data+0x5c>)
 80432a6:	f001 ff63 	bl	8045170 <HAL_I2C_Master_Transmit>
}
 80432aa:	bf00      	nop
 80432ac:	3710      	adds	r7, #16
 80432ae:	46bd      	mov	sp, r7
 80432b0:	bd80      	pop	{r7, pc}
 80432b2:	bf00      	nop
 80432b4:	2000eee4 	.word	0x2000eee4

080432b8 <lcd_clear>:

void lcd_clear (void)
{
 80432b8:	b580      	push	{r7, lr}
 80432ba:	b082      	sub	sp, #8
 80432bc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80432be:	2080      	movs	r0, #128	; 0x80
 80432c0:	f7ff ff9a 	bl	80431f8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80432c4:	2300      	movs	r3, #0
 80432c6:	607b      	str	r3, [r7, #4]
 80432c8:	e005      	b.n	80432d6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80432ca:	2020      	movs	r0, #32
 80432cc:	f7ff ffc4 	bl	8043258 <lcd_send_data>
	for (int i=0; i<70; i++)
 80432d0:	687b      	ldr	r3, [r7, #4]
 80432d2:	3301      	adds	r3, #1
 80432d4:	607b      	str	r3, [r7, #4]
 80432d6:	687b      	ldr	r3, [r7, #4]
 80432d8:	2b45      	cmp	r3, #69	; 0x45
 80432da:	ddf6      	ble.n	80432ca <lcd_clear+0x12>
	}
}
 80432dc:	bf00      	nop
 80432de:	bf00      	nop
 80432e0:	3708      	adds	r7, #8
 80432e2:	46bd      	mov	sp, r7
 80432e4:	bd80      	pop	{r7, pc}

080432e6 <lcd_clear_cmd>:

void lcd_clear_cmd(void)
{
 80432e6:	b580      	push	{r7, lr}
 80432e8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x0);
 80432ea:	2000      	movs	r0, #0
 80432ec:	f7ff ff84 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(1);
 80432f0:	2001      	movs	r0, #1
 80432f2:	f000 ffc5 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x1);
 80432f6:	2001      	movs	r0, #1
 80432f8:	f7ff ff7e 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(1);
 80432fc:	2001      	movs	r0, #1
 80432fe:	f000 ffbf 	bl	8044280 <HAL_Delay>
}
 8043302:	bf00      	nop
 8043304:	bd80      	pop	{r7, pc}

08043306 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8043306:	b580      	push	{r7, lr}
 8043308:	b082      	sub	sp, #8
 804330a:	af00      	add	r7, sp, #0
 804330c:	6078      	str	r0, [r7, #4]
 804330e:	6039      	str	r1, [r7, #0]
    switch (row)
 8043310:	687b      	ldr	r3, [r7, #4]
 8043312:	2b00      	cmp	r3, #0
 8043314:	d003      	beq.n	804331e <lcd_put_cur+0x18>
 8043316:	687b      	ldr	r3, [r7, #4]
 8043318:	2b01      	cmp	r3, #1
 804331a:	d005      	beq.n	8043328 <lcd_put_cur+0x22>
 804331c:	e009      	b.n	8043332 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 804331e:	683b      	ldr	r3, [r7, #0]
 8043320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043324:	603b      	str	r3, [r7, #0]
            break;
 8043326:	e004      	b.n	8043332 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8043328:	683b      	ldr	r3, [r7, #0]
 804332a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 804332e:	603b      	str	r3, [r7, #0]
            break;
 8043330:	bf00      	nop
    }

    lcd_send_cmd (col);
 8043332:	683b      	ldr	r3, [r7, #0]
 8043334:	b2db      	uxtb	r3, r3
 8043336:	4618      	mov	r0, r3
 8043338:	f7ff ff5e 	bl	80431f8 <lcd_send_cmd>
}
 804333c:	bf00      	nop
 804333e:	3708      	adds	r7, #8
 8043340:	46bd      	mov	sp, r7
 8043342:	bd80      	pop	{r7, pc}

08043344 <lcd_init>:
}



void lcd_init (void)
{
 8043344:	b580      	push	{r7, lr}
 8043346:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8043348:	2032      	movs	r0, #50	; 0x32
 804334a:	f000 ff99 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x30);
 804334e:	2030      	movs	r0, #48	; 0x30
 8043350:	f7ff ff52 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8043354:	2005      	movs	r0, #5
 8043356:	f000 ff93 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x30);
 804335a:	2030      	movs	r0, #48	; 0x30
 804335c:	f7ff ff4c 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8043360:	2001      	movs	r0, #1
 8043362:	f000 ff8d 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x30);
 8043366:	2030      	movs	r0, #48	; 0x30
 8043368:	f7ff ff46 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 804336c:	2032      	movs	r0, #50	; 0x32
 804336e:	f000 ff87 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8043372:	2020      	movs	r0, #32
 8043374:	f7ff ff40 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 8043378:	2032      	movs	r0, #50	; 0x32
 804337a:	f000 ff81 	bl	8044280 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 804337e:	2028      	movs	r0, #40	; 0x28
 8043380:	f7ff ff3a 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 8043384:	2032      	movs	r0, #50	; 0x32
 8043386:	f000 ff7b 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 804338a:	2008      	movs	r0, #8
 804338c:	f7ff ff34 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 8043390:	2032      	movs	r0, #50	; 0x32
 8043392:	f000 ff75 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8043396:	2001      	movs	r0, #1
 8043398:	f7ff ff2e 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 804339c:	2032      	movs	r0, #50	; 0x32
 804339e:	f000 ff6f 	bl	8044280 <HAL_Delay>
	HAL_Delay(50);
 80433a2:	2032      	movs	r0, #50	; 0x32
 80433a4:	f000 ff6c 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80433a8:	2006      	movs	r0, #6
 80433aa:	f7ff ff25 	bl	80431f8 <lcd_send_cmd>
	HAL_Delay(50);
 80433ae:	2032      	movs	r0, #50	; 0x32
 80433b0:	f000 ff66 	bl	8044280 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80433b4:	200c      	movs	r0, #12
 80433b6:	f7ff ff1f 	bl	80431f8 <lcd_send_cmd>
}
 80433ba:	bf00      	nop
 80433bc:	bd80      	pop	{r7, pc}

080433be <lcd_send_string>:

void lcd_send_string (char *str)
{
 80433be:	b580      	push	{r7, lr}
 80433c0:	b082      	sub	sp, #8
 80433c2:	af00      	add	r7, sp, #0
 80433c4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80433c6:	e006      	b.n	80433d6 <lcd_send_string+0x18>
 80433c8:	687b      	ldr	r3, [r7, #4]
 80433ca:	1c5a      	adds	r2, r3, #1
 80433cc:	607a      	str	r2, [r7, #4]
 80433ce:	781b      	ldrb	r3, [r3, #0]
 80433d0:	4618      	mov	r0, r3
 80433d2:	f7ff ff41 	bl	8043258 <lcd_send_data>
 80433d6:	687b      	ldr	r3, [r7, #4]
 80433d8:	781b      	ldrb	r3, [r3, #0]
 80433da:	2b00      	cmp	r3, #0
 80433dc:	d1f4      	bne.n	80433c8 <lcd_send_string+0xa>
}
 80433de:	bf00      	nop
 80433e0:	bf00      	nop
 80433e2:	3708      	adds	r7, #8
 80433e4:	46bd      	mov	sp, r7
 80433e6:	bd80      	pop	{r7, pc}

080433e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80433e8:	b580      	push	{r7, lr}
 80433ea:	b082      	sub	sp, #8
 80433ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80433ee:	f000 fed5 	bl	804419c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80433f2:	f000 f8d9 	bl	80435a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80433f6:	f000 facb 	bl	8043990 <MX_GPIO_Init>
  MX_I2C1_Init();
 80433fa:	f000 f93f 	bl	804367c <MX_I2C1_Init>
  MX_TIM1_Init();
 80433fe:	f000 f9a1 	bl	8043744 <MX_TIM1_Init>
  MX_SPI1_Init();
 8043402:	f000 f969 	bl	80436d8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8043406:	f000 f9f5 	bl	80437f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 804340a:	f000 fa3f 	bl	804388c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ReflowParameters.KD=0;
 804340e:	4b57      	ldr	r3, [pc, #348]	; (804356c <main+0x184>)
 8043410:	f04f 0200 	mov.w	r2, #0
 8043414:	609a      	str	r2, [r3, #8]
  ReflowParameters.KP=200;
 8043416:	4b55      	ldr	r3, [pc, #340]	; (804356c <main+0x184>)
 8043418:	4a55      	ldr	r2, [pc, #340]	; (8043570 <main+0x188>)
 804341a:	601a      	str	r2, [r3, #0]
  ReflowParameters.Ki=0;
 804341c:	4b53      	ldr	r3, [pc, #332]	; (804356c <main+0x184>)
 804341e:	f04f 0200 	mov.w	r2, #0
 8043422:	605a      	str	r2, [r3, #4]
  ReflowParameters.ReflowTempeture=250;
 8043424:	4b51      	ldr	r3, [pc, #324]	; (804356c <main+0x184>)
 8043426:	22fa      	movs	r2, #250	; 0xfa
 8043428:	61da      	str	r2, [r3, #28]
  ReflowParameters.ReflowTime=100;
 804342a:	4b50      	ldr	r3, [pc, #320]	; (804356c <main+0x184>)
 804342c:	2264      	movs	r2, #100	; 0x64
 804342e:	621a      	str	r2, [r3, #32]
  ReflowParameters.SoakTempeture=100;
 8043430:	4b4e      	ldr	r3, [pc, #312]	; (804356c <main+0x184>)
 8043432:	2264      	movs	r2, #100	; 0x64
 8043434:	611a      	str	r2, [r3, #16]
  ReflowParameters.SoakTime=100;
 8043436:	4b4d      	ldr	r3, [pc, #308]	; (804356c <main+0x184>)
 8043438:	2264      	movs	r2, #100	; 0x64
 804343a:	615a      	str	r2, [r3, #20]
  ReflowParameters.firstHeatUpRate=2;
 804343c:	4b4b      	ldr	r3, [pc, #300]	; (804356c <main+0x184>)
 804343e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043442:	60da      	str	r2, [r3, #12]
  ReflowParameters.secondHeatUpRate=2;
 8043444:	4b49      	ldr	r3, [pc, #292]	; (804356c <main+0x184>)
 8043446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 804344a:	619a      	str	r2, [r3, #24]
  PID.Kp = ReflowParameters.KP;
 804344c:	4b47      	ldr	r3, [pc, #284]	; (804356c <main+0x184>)
 804344e:	681b      	ldr	r3, [r3, #0]
 8043450:	4a48      	ldr	r2, [pc, #288]	; (8043574 <main+0x18c>)
 8043452:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.Ki;
 8043454:	4b45      	ldr	r3, [pc, #276]	; (804356c <main+0x184>)
 8043456:	685b      	ldr	r3, [r3, #4]
 8043458:	4a46      	ldr	r2, [pc, #280]	; (8043574 <main+0x18c>)
 804345a:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 804345c:	4b43      	ldr	r3, [pc, #268]	; (804356c <main+0x184>)
 804345e:	689b      	ldr	r3, [r3, #8]
 8043460:	4a44      	ldr	r2, [pc, #272]	; (8043574 <main+0x18c>)
 8043462:	6213      	str	r3, [r2, #32]
  for(int i=0;i<5;i++)
 8043464:	2300      	movs	r3, #0
 8043466:	607b      	str	r3, [r7, #4]
 8043468:	e007      	b.n	804347a <main+0x92>
{
	PhaseIndex_main[i]=0;
 804346a:	4a43      	ldr	r2, [pc, #268]	; (8043578 <main+0x190>)
 804346c:	687b      	ldr	r3, [r7, #4]
 804346e:	2100      	movs	r1, #0
 8043470:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<5;i++)
 8043474:	687b      	ldr	r3, [r7, #4]
 8043476:	3301      	adds	r3, #1
 8043478:	607b      	str	r3, [r7, #4]
 804347a:	687b      	ldr	r3, [r7, #4]
 804347c:	2b04      	cmp	r3, #4
 804347e:	ddf4      	ble.n	804346a <main+0x82>
}

  p_ReflowParameters=&ReflowParameters;
 8043480:	4b3e      	ldr	r3, [pc, #248]	; (804357c <main+0x194>)
 8043482:	4a3a      	ldr	r2, [pc, #232]	; (804356c <main+0x184>)
 8043484:	601a      	str	r2, [r3, #0]
  p_ReflowCurve=ReflowCurve_main;
 8043486:	4b3e      	ldr	r3, [pc, #248]	; (8043580 <main+0x198>)
 8043488:	4a3e      	ldr	r2, [pc, #248]	; (8043584 <main+0x19c>)
 804348a:	601a      	str	r2, [r3, #0]
  p_PhaseIndex=PhaseIndex_main;
 804348c:	4b3e      	ldr	r3, [pc, #248]	; (8043588 <main+0x1a0>)
 804348e:	4a3a      	ldr	r2, [pc, #232]	; (8043578 <main+0x190>)
 8043490:	601a      	str	r2, [r3, #0]


 // address=find_I2C_deviceAddress();
 // HAL_Delay(2000);

  HAL_Delay(500);
 8043492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8043496:	f000 fef3 	bl	8044280 <HAL_Delay>
  lcd_init();
 804349a:	f7ff ff53 	bl	8043344 <lcd_init>
  HAL_Delay(20);
 804349e:	2014      	movs	r0, #20
 80434a0:	f000 feee 	bl	8044280 <HAL_Delay>
  lcd_clear();
 80434a4:	f7ff ff08 	bl	80432b8 <lcd_clear>
  HAL_Delay(100);
 80434a8:	2064      	movs	r0, #100	; 0x64
 80434aa:	f000 fee9 	bl	8044280 <HAL_Delay>
  lcd_put_cur(0, 0);
 80434ae:	2100      	movs	r1, #0
 80434b0:	2000      	movs	r0, #0
 80434b2:	f7ff ff28 	bl	8043306 <lcd_put_cur>
  lcd_send_string("Yakamooda");
 80434b6:	4835      	ldr	r0, [pc, #212]	; (804358c <main+0x1a4>)
 80434b8:	f7ff ff81 	bl	80433be <lcd_send_string>
  lcd_put_cur(1, 0);
 80434bc:	2100      	movs	r1, #0
 80434be:	2001      	movs	r0, #1
 80434c0:	f7ff ff21 	bl	8043306 <lcd_put_cur>
  lcd_send_string("Electronics GmBH");
 80434c4:	4832      	ldr	r0, [pc, #200]	; (8043590 <main+0x1a8>)
 80434c6:	f7ff ff7a 	bl	80433be <lcd_send_string>
  HAL_Delay(5000);
 80434ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80434ce:	f000 fed7 	bl	8044280 <HAL_Delay>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80434d2:	213c      	movs	r1, #60	; 0x3c
 80434d4:	482f      	ldr	r0, [pc, #188]	; (8043594 <main+0x1ac>)
 80434d6:	f003 fd17 	bl	8046f08 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80434da:	482f      	ldr	r0, [pc, #188]	; (8043598 <main+0x1b0>)
 80434dc:	f003 fa6c 	bl	80469b8 <HAL_TIM_Base_Start_IT>

  HAL_Delay(500);
 80434e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80434e4:	f000 fecc 	bl	8044280 <HAL_Delay>
  /*GUI for data entry*/
  HandleGui();
 80434e8:	f7fe f814 	bl	8041514 <HandleGui>

  if(false == b_dataEnter)
 80434ec:	4b2b      	ldr	r3, [pc, #172]	; (804359c <main+0x1b4>)
 80434ee:	781b      	ldrb	r3, [r3, #0]
 80434f0:	f083 0301 	eor.w	r3, r3, #1
 80434f4:	b2db      	uxtb	r3, r3
 80434f6:	2b00      	cmp	r3, #0
 80434f8:	d012      	beq.n	8043520 <main+0x138>
  {
	  b_dataEnter = true;
 80434fa:	4b28      	ldr	r3, [pc, #160]	; (804359c <main+0x1b4>)
 80434fc:	2201      	movs	r2, #1
 80434fe:	701a      	strb	r2, [r3, #0]
	  calculateReflowCurve(p_ReflowParameters, p_ReflowCurve, p_PhaseIndex);
 8043500:	4b1e      	ldr	r3, [pc, #120]	; (804357c <main+0x194>)
 8043502:	681b      	ldr	r3, [r3, #0]
 8043504:	4a1e      	ldr	r2, [pc, #120]	; (8043580 <main+0x198>)
 8043506:	6811      	ldr	r1, [r2, #0]
 8043508:	4a1f      	ldr	r2, [pc, #124]	; (8043588 <main+0x1a0>)
 804350a:	6812      	ldr	r2, [r2, #0]
 804350c:	4618      	mov	r0, r3
 804350e:	f7fd fe93 	bl	8041238 <calculateReflowCurve>
	  arm_pid_init_f32(&PID, 1);
 8043512:	2101      	movs	r1, #1
 8043514:	4817      	ldr	r0, [pc, #92]	; (8043574 <main+0x18c>)
 8043516:	f004 fbe9 	bl	8047cec <arm_pid_init_f32>
	  /*set Reflow Enable Flag */
	  ReflowEnable = 1;
 804351a:	4b21      	ldr	r3, [pc, #132]	; (80435a0 <main+0x1b8>)
 804351c:	2201      	movs	r2, #1
 804351e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(250 <= CtrlParams.counter_250ms)
 8043520:	4b20      	ldr	r3, [pc, #128]	; (80435a4 <main+0x1bc>)
 8043522:	68db      	ldr	r3, [r3, #12]
 8043524:	2bf9      	cmp	r3, #249	; 0xf9
 8043526:	d9fb      	bls.n	8043520 <main+0x138>
	  {
		  CtrlParams.counter_250ms=0;
 8043528:	4b1e      	ldr	r3, [pc, #120]	; (80435a4 <main+0x1bc>)
 804352a:	2200      	movs	r2, #0
 804352c:	60da      	str	r2, [r3, #12]
		  CtrlParams.u16_ReflowIndexCurrent++;
 804352e:	4b1d      	ldr	r3, [pc, #116]	; (80435a4 <main+0x1bc>)
 8043530:	885b      	ldrh	r3, [r3, #2]
 8043532:	3301      	adds	r3, #1
 8043534:	b29a      	uxth	r2, r3
 8043536:	4b1b      	ldr	r3, [pc, #108]	; (80435a4 <main+0x1bc>)
 8043538:	805a      	strh	r2, [r3, #2]
		 // HAL_Delay(1);
		  msTempControlHandler(&CtrlParams, p_ReflowCurve,p_ReflowParameters);
 804353a:	4b11      	ldr	r3, [pc, #68]	; (8043580 <main+0x198>)
 804353c:	681b      	ldr	r3, [r3, #0]
 804353e:	4a0f      	ldr	r2, [pc, #60]	; (804357c <main+0x194>)
 8043540:	6812      	ldr	r2, [r2, #0]
 8043542:	4619      	mov	r1, r3
 8043544:	4817      	ldr	r0, [pc, #92]	; (80435a4 <main+0x1bc>)
 8043546:	f7fe fc0b 	bl	8041d60 <msTempControlHandler>
		  updateGuiVal(&CtrlParams, p_ReflowParameters, p_PhaseIndex);
 804354a:	4b0c      	ldr	r3, [pc, #48]	; (804357c <main+0x194>)
 804354c:	681b      	ldr	r3, [r3, #0]
 804354e:	4a0e      	ldr	r2, [pc, #56]	; (8043588 <main+0x1a0>)
 8043550:	6812      	ldr	r2, [r2, #0]
 8043552:	4619      	mov	r1, r3
 8043554:	4813      	ldr	r0, [pc, #76]	; (80435a4 <main+0x1bc>)
 8043556:	f7fe fd6b 	bl	8042030 <updateGuiVal>

		  if( true == (CtrlParams.p_StatusFlags->cooldownComplete) )
 804355a:	4b12      	ldr	r3, [pc, #72]	; (80435a4 <main+0x1bc>)
 804355c:	699b      	ldr	r3, [r3, #24]
 804355e:	799b      	ldrb	r3, [r3, #6]
 8043560:	2b00      	cmp	r3, #0
 8043562:	d0dd      	beq.n	8043520 <main+0x138>
		  {
		  RefloWConditionsUpdate();
 8043564:	f7ff f800 	bl	8042568 <RefloWConditionsUpdate>
	  if(250 <= CtrlParams.counter_250ms)
 8043568:	e7da      	b.n	8043520 <main+0x138>
 804356a:	bf00      	nop
 804356c:	2000ef40 	.word	0x2000ef40
 8043570:	43480000 	.word	0x43480000
 8043574:	2000ee34 	.word	0x2000ee34
 8043578:	2000ec90 	.word	0x2000ec90
 804357c:	2000eee0 	.word	0x2000eee0
 8043580:	2000eedc 	.word	0x2000eedc
 8043584:	20007760 	.word	0x20007760
 8043588:	2000ef3c 	.word	0x2000ef3c
 804358c:	0804d738 	.word	0x0804d738
 8043590:	0804d744 	.word	0x0804d744
 8043594:	2000ed44 	.word	0x2000ed44
 8043598:	2000ede4 	.word	0x2000ede4
 804359c:	20007758 	.word	0x20007758
 80435a0:	2000eeb7 	.word	0x2000eeb7
 80435a4:	2000eebc 	.word	0x2000eebc

080435a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80435a8:	b580      	push	{r7, lr}
 80435aa:	b094      	sub	sp, #80	; 0x50
 80435ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80435ae:	f107 0320 	add.w	r3, r7, #32
 80435b2:	2230      	movs	r2, #48	; 0x30
 80435b4:	2100      	movs	r1, #0
 80435b6:	4618      	mov	r0, r3
 80435b8:	f004 fbf6 	bl	8047da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80435bc:	f107 030c 	add.w	r3, r7, #12
 80435c0:	2200      	movs	r2, #0
 80435c2:	601a      	str	r2, [r3, #0]
 80435c4:	605a      	str	r2, [r3, #4]
 80435c6:	609a      	str	r2, [r3, #8]
 80435c8:	60da      	str	r2, [r3, #12]
 80435ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80435cc:	2300      	movs	r3, #0
 80435ce:	60bb      	str	r3, [r7, #8]
 80435d0:	4b28      	ldr	r3, [pc, #160]	; (8043674 <SystemClock_Config+0xcc>)
 80435d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80435d4:	4a27      	ldr	r2, [pc, #156]	; (8043674 <SystemClock_Config+0xcc>)
 80435d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80435da:	6413      	str	r3, [r2, #64]	; 0x40
 80435dc:	4b25      	ldr	r3, [pc, #148]	; (8043674 <SystemClock_Config+0xcc>)
 80435de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80435e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80435e4:	60bb      	str	r3, [r7, #8]
 80435e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80435e8:	2300      	movs	r3, #0
 80435ea:	607b      	str	r3, [r7, #4]
 80435ec:	4b22      	ldr	r3, [pc, #136]	; (8043678 <SystemClock_Config+0xd0>)
 80435ee:	681b      	ldr	r3, [r3, #0]
 80435f0:	4a21      	ldr	r2, [pc, #132]	; (8043678 <SystemClock_Config+0xd0>)
 80435f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80435f6:	6013      	str	r3, [r2, #0]
 80435f8:	4b1f      	ldr	r3, [pc, #124]	; (8043678 <SystemClock_Config+0xd0>)
 80435fa:	681b      	ldr	r3, [r3, #0]
 80435fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043600:	607b      	str	r3, [r7, #4]
 8043602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8043604:	2301      	movs	r3, #1
 8043606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8043608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 804360c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804360e:	2302      	movs	r3, #2
 8043610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8043612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8043618:	2304      	movs	r3, #4
 804361a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 804361c:	233c      	movs	r3, #60	; 0x3c
 804361e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8043620:	2302      	movs	r3, #2
 8043622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8043624:	2307      	movs	r3, #7
 8043626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8043628:	f107 0320 	add.w	r3, r7, #32
 804362c:	4618      	mov	r0, r3
 804362e:	f002 f8a7 	bl	8045780 <HAL_RCC_OscConfig>
 8043632:	4603      	mov	r3, r0
 8043634:	2b00      	cmp	r3, #0
 8043636:	d001      	beq.n	804363c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8043638:	f000 fa78 	bl	8043b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804363c:	230f      	movs	r3, #15
 804363e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8043640:	2302      	movs	r3, #2
 8043642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8043644:	2300      	movs	r3, #0
 8043646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8043648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804364c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 804364e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8043652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8043654:	f107 030c 	add.w	r3, r7, #12
 8043658:	2101      	movs	r1, #1
 804365a:	4618      	mov	r0, r3
 804365c:	f002 fb08 	bl	8045c70 <HAL_RCC_ClockConfig>
 8043660:	4603      	mov	r3, r0
 8043662:	2b00      	cmp	r3, #0
 8043664:	d001      	beq.n	804366a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8043666:	f000 fa61 	bl	8043b2c <Error_Handler>
  }
}
 804366a:	bf00      	nop
 804366c:	3750      	adds	r7, #80	; 0x50
 804366e:	46bd      	mov	sp, r7
 8043670:	bd80      	pop	{r7, pc}
 8043672:	bf00      	nop
 8043674:	40023800 	.word	0x40023800
 8043678:	40007000 	.word	0x40007000

0804367c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 804367c:	b580      	push	{r7, lr}
 804367e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8043680:	4b12      	ldr	r3, [pc, #72]	; (80436cc <MX_I2C1_Init+0x50>)
 8043682:	4a13      	ldr	r2, [pc, #76]	; (80436d0 <MX_I2C1_Init+0x54>)
 8043684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8043686:	4b11      	ldr	r3, [pc, #68]	; (80436cc <MX_I2C1_Init+0x50>)
 8043688:	4a12      	ldr	r2, [pc, #72]	; (80436d4 <MX_I2C1_Init+0x58>)
 804368a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 804368c:	4b0f      	ldr	r3, [pc, #60]	; (80436cc <MX_I2C1_Init+0x50>)
 804368e:	2200      	movs	r2, #0
 8043690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8043692:	4b0e      	ldr	r3, [pc, #56]	; (80436cc <MX_I2C1_Init+0x50>)
 8043694:	2200      	movs	r2, #0
 8043696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8043698:	4b0c      	ldr	r3, [pc, #48]	; (80436cc <MX_I2C1_Init+0x50>)
 804369a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804369e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80436a0:	4b0a      	ldr	r3, [pc, #40]	; (80436cc <MX_I2C1_Init+0x50>)
 80436a2:	2200      	movs	r2, #0
 80436a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80436a6:	4b09      	ldr	r3, [pc, #36]	; (80436cc <MX_I2C1_Init+0x50>)
 80436a8:	2200      	movs	r2, #0
 80436aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80436ac:	4b07      	ldr	r3, [pc, #28]	; (80436cc <MX_I2C1_Init+0x50>)
 80436ae:	2200      	movs	r2, #0
 80436b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80436b2:	4b06      	ldr	r3, [pc, #24]	; (80436cc <MX_I2C1_Init+0x50>)
 80436b4:	2200      	movs	r2, #0
 80436b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80436b8:	4804      	ldr	r0, [pc, #16]	; (80436cc <MX_I2C1_Init+0x50>)
 80436ba:	f001 fc15 	bl	8044ee8 <HAL_I2C_Init>
 80436be:	4603      	mov	r3, r0
 80436c0:	2b00      	cmp	r3, #0
 80436c2:	d001      	beq.n	80436c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80436c4:	f000 fa32 	bl	8043b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80436c8:	bf00      	nop
 80436ca:	bd80      	pop	{r7, pc}
 80436cc:	2000eee4 	.word	0x2000eee4
 80436d0:	40005400 	.word	0x40005400
 80436d4:	000186a0 	.word	0x000186a0

080436d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80436d8:	b580      	push	{r7, lr}
 80436da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80436dc:	4b17      	ldr	r3, [pc, #92]	; (804373c <MX_SPI1_Init+0x64>)
 80436de:	4a18      	ldr	r2, [pc, #96]	; (8043740 <MX_SPI1_Init+0x68>)
 80436e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80436e2:	4b16      	ldr	r3, [pc, #88]	; (804373c <MX_SPI1_Init+0x64>)
 80436e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80436e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80436ea:	4b14      	ldr	r3, [pc, #80]	; (804373c <MX_SPI1_Init+0x64>)
 80436ec:	2200      	movs	r2, #0
 80436ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80436f0:	4b12      	ldr	r3, [pc, #72]	; (804373c <MX_SPI1_Init+0x64>)
 80436f2:	2200      	movs	r2, #0
 80436f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80436f6:	4b11      	ldr	r3, [pc, #68]	; (804373c <MX_SPI1_Init+0x64>)
 80436f8:	2200      	movs	r2, #0
 80436fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80436fc:	4b0f      	ldr	r3, [pc, #60]	; (804373c <MX_SPI1_Init+0x64>)
 80436fe:	2200      	movs	r2, #0
 8043700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8043702:	4b0e      	ldr	r3, [pc, #56]	; (804373c <MX_SPI1_Init+0x64>)
 8043704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 804370a:	4b0c      	ldr	r3, [pc, #48]	; (804373c <MX_SPI1_Init+0x64>)
 804370c:	2238      	movs	r2, #56	; 0x38
 804370e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8043710:	4b0a      	ldr	r3, [pc, #40]	; (804373c <MX_SPI1_Init+0x64>)
 8043712:	2200      	movs	r2, #0
 8043714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8043716:	4b09      	ldr	r3, [pc, #36]	; (804373c <MX_SPI1_Init+0x64>)
 8043718:	2200      	movs	r2, #0
 804371a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804371c:	4b07      	ldr	r3, [pc, #28]	; (804373c <MX_SPI1_Init+0x64>)
 804371e:	2200      	movs	r2, #0
 8043720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8043722:	4b06      	ldr	r3, [pc, #24]	; (804373c <MX_SPI1_Init+0x64>)
 8043724:	220a      	movs	r2, #10
 8043726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8043728:	4804      	ldr	r0, [pc, #16]	; (804373c <MX_SPI1_Init+0x64>)
 804372a:	f002 fc89 	bl	8046040 <HAL_SPI_Init>
 804372e:	4603      	mov	r3, r0
 8043730:	2b00      	cmp	r3, #0
 8043732:	d001      	beq.n	8043738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8043734:	f000 f9fa 	bl	8043b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8043738:	bf00      	nop
 804373a:	bd80      	pop	{r7, pc}
 804373c:	2000ed8c 	.word	0x2000ed8c
 8043740:	40013000 	.word	0x40013000

08043744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8043744:	b580      	push	{r7, lr}
 8043746:	b08c      	sub	sp, #48	; 0x30
 8043748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 804374a:	f107 030c 	add.w	r3, r7, #12
 804374e:	2224      	movs	r2, #36	; 0x24
 8043750:	2100      	movs	r1, #0
 8043752:	4618      	mov	r0, r3
 8043754:	f004 fb28 	bl	8047da8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8043758:	1d3b      	adds	r3, r7, #4
 804375a:	2200      	movs	r2, #0
 804375c:	601a      	str	r2, [r3, #0]
 804375e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8043760:	4b22      	ldr	r3, [pc, #136]	; (80437ec <MX_TIM1_Init+0xa8>)
 8043762:	4a23      	ldr	r2, [pc, #140]	; (80437f0 <MX_TIM1_Init+0xac>)
 8043764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8043766:	4b21      	ldr	r3, [pc, #132]	; (80437ec <MX_TIM1_Init+0xa8>)
 8043768:	2200      	movs	r2, #0
 804376a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 804376c:	4b1f      	ldr	r3, [pc, #124]	; (80437ec <MX_TIM1_Init+0xa8>)
 804376e:	2200      	movs	r2, #0
 8043770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8043772:	4b1e      	ldr	r3, [pc, #120]	; (80437ec <MX_TIM1_Init+0xa8>)
 8043774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804377a:	4b1c      	ldr	r3, [pc, #112]	; (80437ec <MX_TIM1_Init+0xa8>)
 804377c:	2200      	movs	r2, #0
 804377e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8043780:	4b1a      	ldr	r3, [pc, #104]	; (80437ec <MX_TIM1_Init+0xa8>)
 8043782:	2200      	movs	r2, #0
 8043784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8043786:	4b19      	ldr	r3, [pc, #100]	; (80437ec <MX_TIM1_Init+0xa8>)
 8043788:	2280      	movs	r2, #128	; 0x80
 804378a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 804378c:	2303      	movs	r3, #3
 804378e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8043790:	2300      	movs	r3, #0
 8043792:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8043794:	2301      	movs	r3, #1
 8043796:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8043798:	2300      	movs	r3, #0
 804379a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 804379c:	230a      	movs	r3, #10
 804379e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80437a0:	2302      	movs	r3, #2
 80437a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80437a4:	2301      	movs	r3, #1
 80437a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80437a8:	2300      	movs	r3, #0
 80437aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80437ac:	230a      	movs	r3, #10
 80437ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80437b0:	f107 030c 	add.w	r3, r7, #12
 80437b4:	4619      	mov	r1, r3
 80437b6:	480d      	ldr	r0, [pc, #52]	; (80437ec <MX_TIM1_Init+0xa8>)
 80437b8:	f003 fb00 	bl	8046dbc <HAL_TIM_Encoder_Init>
 80437bc:	4603      	mov	r3, r0
 80437be:	2b00      	cmp	r3, #0
 80437c0:	d001      	beq.n	80437c6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80437c2:	f000 f9b3 	bl	8043b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80437c6:	2300      	movs	r3, #0
 80437c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80437ca:	2300      	movs	r3, #0
 80437cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80437ce:	1d3b      	adds	r3, r7, #4
 80437d0:	4619      	mov	r1, r3
 80437d2:	4806      	ldr	r0, [pc, #24]	; (80437ec <MX_TIM1_Init+0xa8>)
 80437d4:	f004 f9fa 	bl	8047bcc <HAL_TIMEx_MasterConfigSynchronization>
 80437d8:	4603      	mov	r3, r0
 80437da:	2b00      	cmp	r3, #0
 80437dc:	d001      	beq.n	80437e2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80437de:	f000 f9a5 	bl	8043b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80437e2:	bf00      	nop
 80437e4:	3730      	adds	r7, #48	; 0x30
 80437e6:	46bd      	mov	sp, r7
 80437e8:	bd80      	pop	{r7, pc}
 80437ea:	bf00      	nop
 80437ec:	2000ed44 	.word	0x2000ed44
 80437f0:	40010000 	.word	0x40010000

080437f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80437f4:	b580      	push	{r7, lr}
 80437f6:	b086      	sub	sp, #24
 80437f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80437fa:	f107 0308 	add.w	r3, r7, #8
 80437fe:	2200      	movs	r2, #0
 8043800:	601a      	str	r2, [r3, #0]
 8043802:	605a      	str	r2, [r3, #4]
 8043804:	609a      	str	r2, [r3, #8]
 8043806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8043808:	463b      	mov	r3, r7
 804380a:	2200      	movs	r2, #0
 804380c:	601a      	str	r2, [r3, #0]
 804380e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8043810:	4b1d      	ldr	r3, [pc, #116]	; (8043888 <MX_TIM2_Init+0x94>)
 8043812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8043816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8043818:	4b1b      	ldr	r3, [pc, #108]	; (8043888 <MX_TIM2_Init+0x94>)
 804381a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 804381e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8043820:	4b19      	ldr	r3, [pc, #100]	; (8043888 <MX_TIM2_Init+0x94>)
 8043822:	2200      	movs	r2, #0
 8043824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8043826:	4b18      	ldr	r3, [pc, #96]	; (8043888 <MX_TIM2_Init+0x94>)
 8043828:	2201      	movs	r2, #1
 804382a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804382c:	4b16      	ldr	r3, [pc, #88]	; (8043888 <MX_TIM2_Init+0x94>)
 804382e:	2200      	movs	r2, #0
 8043830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8043832:	4b15      	ldr	r3, [pc, #84]	; (8043888 <MX_TIM2_Init+0x94>)
 8043834:	2200      	movs	r2, #0
 8043836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8043838:	4813      	ldr	r0, [pc, #76]	; (8043888 <MX_TIM2_Init+0x94>)
 804383a:	f003 f86d 	bl	8046918 <HAL_TIM_Base_Init>
 804383e:	4603      	mov	r3, r0
 8043840:	2b00      	cmp	r3, #0
 8043842:	d001      	beq.n	8043848 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8043844:	f000 f972 	bl	8043b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8043848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804384c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 804384e:	f107 0308 	add.w	r3, r7, #8
 8043852:	4619      	mov	r1, r3
 8043854:	480c      	ldr	r0, [pc, #48]	; (8043888 <MX_TIM2_Init+0x94>)
 8043856:	f003 fdaf 	bl	80473b8 <HAL_TIM_ConfigClockSource>
 804385a:	4603      	mov	r3, r0
 804385c:	2b00      	cmp	r3, #0
 804385e:	d001      	beq.n	8043864 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8043860:	f000 f964 	bl	8043b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8043864:	2320      	movs	r3, #32
 8043866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8043868:	2300      	movs	r3, #0
 804386a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 804386c:	463b      	mov	r3, r7
 804386e:	4619      	mov	r1, r3
 8043870:	4805      	ldr	r0, [pc, #20]	; (8043888 <MX_TIM2_Init+0x94>)
 8043872:	f004 f9ab 	bl	8047bcc <HAL_TIMEx_MasterConfigSynchronization>
 8043876:	4603      	mov	r3, r0
 8043878:	2b00      	cmp	r3, #0
 804387a:	d001      	beq.n	8043880 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 804387c:	f000 f956 	bl	8043b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8043880:	bf00      	nop
 8043882:	3718      	adds	r7, #24
 8043884:	46bd      	mov	sp, r7
 8043886:	bd80      	pop	{r7, pc}
 8043888:	2000ede4 	.word	0x2000ede4

0804388c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 804388c:	b580      	push	{r7, lr}
 804388e:	b08e      	sub	sp, #56	; 0x38
 8043890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8043892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8043896:	2200      	movs	r2, #0
 8043898:	601a      	str	r2, [r3, #0]
 804389a:	605a      	str	r2, [r3, #4]
 804389c:	609a      	str	r2, [r3, #8]
 804389e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80438a0:	f107 0320 	add.w	r3, r7, #32
 80438a4:	2200      	movs	r2, #0
 80438a6:	601a      	str	r2, [r3, #0]
 80438a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80438aa:	1d3b      	adds	r3, r7, #4
 80438ac:	2200      	movs	r2, #0
 80438ae:	601a      	str	r2, [r3, #0]
 80438b0:	605a      	str	r2, [r3, #4]
 80438b2:	609a      	str	r2, [r3, #8]
 80438b4:	60da      	str	r2, [r3, #12]
 80438b6:	611a      	str	r2, [r3, #16]
 80438b8:	615a      	str	r2, [r3, #20]
 80438ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80438bc:	4b32      	ldr	r3, [pc, #200]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438be:	4a33      	ldr	r2, [pc, #204]	; (804398c <MX_TIM3_Init+0x100>)
 80438c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 80438c2:	4b31      	ldr	r3, [pc, #196]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438c4:	f240 2257 	movw	r2, #599	; 0x257
 80438c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80438ca:	4b2f      	ldr	r3, [pc, #188]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438cc:	2200      	movs	r2, #0
 80438ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80438d0:	4b2d      	ldr	r3, [pc, #180]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80438d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80438d8:	4b2b      	ldr	r3, [pc, #172]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438da:	2200      	movs	r2, #0
 80438dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80438de:	4b2a      	ldr	r3, [pc, #168]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438e0:	2200      	movs	r2, #0
 80438e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80438e4:	4828      	ldr	r0, [pc, #160]	; (8043988 <MX_TIM3_Init+0xfc>)
 80438e6:	f003 f817 	bl	8046918 <HAL_TIM_Base_Init>
 80438ea:	4603      	mov	r3, r0
 80438ec:	2b00      	cmp	r3, #0
 80438ee:	d001      	beq.n	80438f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80438f0:	f000 f91c 	bl	8043b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80438f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80438f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80438fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80438fe:	4619      	mov	r1, r3
 8043900:	4821      	ldr	r0, [pc, #132]	; (8043988 <MX_TIM3_Init+0xfc>)
 8043902:	f003 fd59 	bl	80473b8 <HAL_TIM_ConfigClockSource>
 8043906:	4603      	mov	r3, r0
 8043908:	2b00      	cmp	r3, #0
 804390a:	d001      	beq.n	8043910 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 804390c:	f000 f90e 	bl	8043b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8043910:	481d      	ldr	r0, [pc, #116]	; (8043988 <MX_TIM3_Init+0xfc>)
 8043912:	f003 f8c1 	bl	8046a98 <HAL_TIM_PWM_Init>
 8043916:	4603      	mov	r3, r0
 8043918:	2b00      	cmp	r3, #0
 804391a:	d001      	beq.n	8043920 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 804391c:	f000 f906 	bl	8043b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8043920:	2320      	movs	r3, #32
 8043922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8043924:	2300      	movs	r3, #0
 8043926:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8043928:	f107 0320 	add.w	r3, r7, #32
 804392c:	4619      	mov	r1, r3
 804392e:	4816      	ldr	r0, [pc, #88]	; (8043988 <MX_TIM3_Init+0xfc>)
 8043930:	f004 f94c 	bl	8047bcc <HAL_TIMEx_MasterConfigSynchronization>
 8043934:	4603      	mov	r3, r0
 8043936:	2b00      	cmp	r3, #0
 8043938:	d001      	beq.n	804393e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 804393a:	f000 f8f7 	bl	8043b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 804393e:	2360      	movs	r3, #96	; 0x60
 8043940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8043942:	2300      	movs	r3, #0
 8043944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8043946:	2300      	movs	r3, #0
 8043948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 804394a:	2300      	movs	r3, #0
 804394c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 804394e:	1d3b      	adds	r3, r7, #4
 8043950:	2204      	movs	r2, #4
 8043952:	4619      	mov	r1, r3
 8043954:	480c      	ldr	r0, [pc, #48]	; (8043988 <MX_TIM3_Init+0xfc>)
 8043956:	f003 fc6d 	bl	8047234 <HAL_TIM_PWM_ConfigChannel>
 804395a:	4603      	mov	r3, r0
 804395c:	2b00      	cmp	r3, #0
 804395e:	d001      	beq.n	8043964 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8043960:	f000 f8e4 	bl	8043b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8043964:	1d3b      	adds	r3, r7, #4
 8043966:	2208      	movs	r2, #8
 8043968:	4619      	mov	r1, r3
 804396a:	4807      	ldr	r0, [pc, #28]	; (8043988 <MX_TIM3_Init+0xfc>)
 804396c:	f003 fc62 	bl	8047234 <HAL_TIM_PWM_ConfigChannel>
 8043970:	4603      	mov	r3, r0
 8043972:	2b00      	cmp	r3, #0
 8043974:	d001      	beq.n	804397a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8043976:	f000 f8d9 	bl	8043b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 804397a:	4803      	ldr	r0, [pc, #12]	; (8043988 <MX_TIM3_Init+0xfc>)
 804397c:	f000 fa18 	bl	8043db0 <HAL_TIM_MspPostInit>

}
 8043980:	bf00      	nop
 8043982:	3738      	adds	r7, #56	; 0x38
 8043984:	46bd      	mov	sp, r7
 8043986:	bd80      	pop	{r7, pc}
 8043988:	2000ecfc 	.word	0x2000ecfc
 804398c:	40000400 	.word	0x40000400

08043990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8043990:	b580      	push	{r7, lr}
 8043992:	b08c      	sub	sp, #48	; 0x30
 8043994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043996:	f107 031c 	add.w	r3, r7, #28
 804399a:	2200      	movs	r2, #0
 804399c:	601a      	str	r2, [r3, #0]
 804399e:	605a      	str	r2, [r3, #4]
 80439a0:	609a      	str	r2, [r3, #8]
 80439a2:	60da      	str	r2, [r3, #12]
 80439a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80439a6:	2300      	movs	r3, #0
 80439a8:	61bb      	str	r3, [r7, #24]
 80439aa:	4b5b      	ldr	r3, [pc, #364]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439ae:	4a5a      	ldr	r2, [pc, #360]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439b0:	f043 0304 	orr.w	r3, r3, #4
 80439b4:	6313      	str	r3, [r2, #48]	; 0x30
 80439b6:	4b58      	ldr	r3, [pc, #352]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439ba:	f003 0304 	and.w	r3, r3, #4
 80439be:	61bb      	str	r3, [r7, #24]
 80439c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80439c2:	2300      	movs	r3, #0
 80439c4:	617b      	str	r3, [r7, #20]
 80439c6:	4b54      	ldr	r3, [pc, #336]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439ca:	4a53      	ldr	r2, [pc, #332]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80439d0:	6313      	str	r3, [r2, #48]	; 0x30
 80439d2:	4b51      	ldr	r3, [pc, #324]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80439da:	617b      	str	r3, [r7, #20]
 80439dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80439de:	2300      	movs	r3, #0
 80439e0:	613b      	str	r3, [r7, #16]
 80439e2:	4b4d      	ldr	r3, [pc, #308]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439e6:	4a4c      	ldr	r2, [pc, #304]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439e8:	f043 0301 	orr.w	r3, r3, #1
 80439ec:	6313      	str	r3, [r2, #48]	; 0x30
 80439ee:	4b4a      	ldr	r3, [pc, #296]	; (8043b18 <MX_GPIO_Init+0x188>)
 80439f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80439f2:	f003 0301 	and.w	r3, r3, #1
 80439f6:	613b      	str	r3, [r7, #16]
 80439f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80439fa:	2300      	movs	r3, #0
 80439fc:	60fb      	str	r3, [r7, #12]
 80439fe:	4b46      	ldr	r3, [pc, #280]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a02:	4a45      	ldr	r2, [pc, #276]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a04:	f043 0310 	orr.w	r3, r3, #16
 8043a08:	6313      	str	r3, [r2, #48]	; 0x30
 8043a0a:	4b43      	ldr	r3, [pc, #268]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a0e:	f003 0310 	and.w	r3, r3, #16
 8043a12:	60fb      	str	r3, [r7, #12]
 8043a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8043a16:	2300      	movs	r3, #0
 8043a18:	60bb      	str	r3, [r7, #8]
 8043a1a:	4b3f      	ldr	r3, [pc, #252]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a1e:	4a3e      	ldr	r2, [pc, #248]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a20:	f043 0308 	orr.w	r3, r3, #8
 8043a24:	6313      	str	r3, [r2, #48]	; 0x30
 8043a26:	4b3c      	ldr	r3, [pc, #240]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a2a:	f003 0308 	and.w	r3, r3, #8
 8043a2e:	60bb      	str	r3, [r7, #8]
 8043a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8043a32:	2300      	movs	r3, #0
 8043a34:	607b      	str	r3, [r7, #4]
 8043a36:	4b38      	ldr	r3, [pc, #224]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a3a:	4a37      	ldr	r2, [pc, #220]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a3c:	f043 0302 	orr.w	r3, r3, #2
 8043a40:	6313      	str	r3, [r2, #48]	; 0x30
 8043a42:	4b35      	ldr	r3, [pc, #212]	; (8043b18 <MX_GPIO_Init+0x188>)
 8043a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043a46:	f003 0302 	and.w	r3, r3, #2
 8043a4a:	607b      	str	r3, [r7, #4]
 8043a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8043a4e:	2200      	movs	r2, #0
 8043a50:	2110      	movs	r1, #16
 8043a52:	4832      	ldr	r0, [pc, #200]	; (8043b1c <MX_GPIO_Init+0x18c>)
 8043a54:	f001 f9f0 	bl	8044e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8043a58:	2200      	movs	r2, #0
 8043a5a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8043a5e:	4830      	ldr	r0, [pc, #192]	; (8043b20 <MX_GPIO_Init+0x190>)
 8043a60:	f001 f9ea 	bl	8044e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8043a64:	2301      	movs	r3, #1
 8043a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8043a68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8043a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043a6e:	2300      	movs	r3, #0
 8043a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8043a72:	f107 031c 	add.w	r3, r7, #28
 8043a76:	4619      	mov	r1, r3
 8043a78:	4828      	ldr	r0, [pc, #160]	; (8043b1c <MX_GPIO_Init+0x18c>)
 8043a7a:	f001 f841 	bl	8044b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8043a7e:	2310      	movs	r3, #16
 8043a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8043a82:	2301      	movs	r3, #1
 8043a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043a86:	2300      	movs	r3, #0
 8043a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043a8a:	2300      	movs	r3, #0
 8043a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8043a8e:	f107 031c 	add.w	r3, r7, #28
 8043a92:	4619      	mov	r1, r3
 8043a94:	4821      	ldr	r0, [pc, #132]	; (8043b1c <MX_GPIO_Init+0x18c>)
 8043a96:	f001 f833 	bl	8044b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8043a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8043a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8043aa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8043aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8043aa6:	2301      	movs	r3, #1
 8043aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8043aaa:	f107 031c 	add.w	r3, r7, #28
 8043aae:	4619      	mov	r1, r3
 8043ab0:	481c      	ldr	r0, [pc, #112]	; (8043b24 <MX_GPIO_Init+0x194>)
 8043ab2:	f001 f825 	bl	8044b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8043ab6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8043aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8043abc:	2301      	movs	r3, #1
 8043abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043ac0:	2300      	movs	r3, #0
 8043ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043ac4:	2300      	movs	r3, #0
 8043ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8043ac8:	f107 031c 	add.w	r3, r7, #28
 8043acc:	4619      	mov	r1, r3
 8043ace:	4814      	ldr	r0, [pc, #80]	; (8043b20 <MX_GPIO_Init+0x190>)
 8043ad0:	f001 f816 	bl	8044b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 8043ad4:	2340      	movs	r3, #64	; 0x40
 8043ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8043ad8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8043adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043ade:	2300      	movs	r3, #0
 8043ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 8043ae2:	f107 031c 	add.w	r3, r7, #28
 8043ae6:	4619      	mov	r1, r3
 8043ae8:	480f      	ldr	r0, [pc, #60]	; (8043b28 <MX_GPIO_Init+0x198>)
 8043aea:	f001 f809 	bl	8044b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8043aee:	2201      	movs	r2, #1
 8043af0:	2100      	movs	r1, #0
 8043af2:	2017      	movs	r0, #23
 8043af4:	f000 fce7 	bl	80444c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8043af8:	2017      	movs	r0, #23
 8043afa:	f000 fd00 	bl	80444fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8043afe:	2201      	movs	r2, #1
 8043b00:	2100      	movs	r1, #0
 8043b02:	2028      	movs	r0, #40	; 0x28
 8043b04:	f000 fcdf 	bl	80444c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8043b08:	2028      	movs	r0, #40	; 0x28
 8043b0a:	f000 fcf8 	bl	80444fe <HAL_NVIC_EnableIRQ>

}
 8043b0e:	bf00      	nop
 8043b10:	3730      	adds	r7, #48	; 0x30
 8043b12:	46bd      	mov	sp, r7
 8043b14:	bd80      	pop	{r7, pc}
 8043b16:	bf00      	nop
 8043b18:	40023800 	.word	0x40023800
 8043b1c:	40020000 	.word	0x40020000
 8043b20:	40020c00 	.word	0x40020c00
 8043b24:	40021000 	.word	0x40021000
 8043b28:	40020800 	.word	0x40020800

08043b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8043b2c:	b480      	push	{r7}
 8043b2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8043b30:	b672      	cpsid	i
}
 8043b32:	bf00      	nop
//	   u32_EEPromErrCnt++;
//   }
//


  while (1)
 8043b34:	e7fe      	b.n	8043b34 <Error_Handler+0x8>
	...

08043b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8043b38:	b580      	push	{r7, lr}
 8043b3a:	b082      	sub	sp, #8
 8043b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043b3e:	2300      	movs	r3, #0
 8043b40:	607b      	str	r3, [r7, #4]
 8043b42:	4b10      	ldr	r3, [pc, #64]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043b46:	4a0f      	ldr	r2, [pc, #60]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8043b4e:	4b0d      	ldr	r3, [pc, #52]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043b56:	607b      	str	r3, [r7, #4]
 8043b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8043b5a:	2300      	movs	r3, #0
 8043b5c:	603b      	str	r3, [r7, #0]
 8043b5e:	4b09      	ldr	r3, [pc, #36]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043b62:	4a08      	ldr	r2, [pc, #32]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043b68:	6413      	str	r3, [r2, #64]	; 0x40
 8043b6a:	4b06      	ldr	r3, [pc, #24]	; (8043b84 <HAL_MspInit+0x4c>)
 8043b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043b72:	603b      	str	r3, [r7, #0]
 8043b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8043b76:	2007      	movs	r0, #7
 8043b78:	f000 fc9a 	bl	80444b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8043b7c:	bf00      	nop
 8043b7e:	3708      	adds	r7, #8
 8043b80:	46bd      	mov	sp, r7
 8043b82:	bd80      	pop	{r7, pc}
 8043b84:	40023800 	.word	0x40023800

08043b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8043b88:	b580      	push	{r7, lr}
 8043b8a:	b08a      	sub	sp, #40	; 0x28
 8043b8c:	af00      	add	r7, sp, #0
 8043b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043b90:	f107 0314 	add.w	r3, r7, #20
 8043b94:	2200      	movs	r2, #0
 8043b96:	601a      	str	r2, [r3, #0]
 8043b98:	605a      	str	r2, [r3, #4]
 8043b9a:	609a      	str	r2, [r3, #8]
 8043b9c:	60da      	str	r2, [r3, #12]
 8043b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8043ba0:	687b      	ldr	r3, [r7, #4]
 8043ba2:	681b      	ldr	r3, [r3, #0]
 8043ba4:	4a19      	ldr	r2, [pc, #100]	; (8043c0c <HAL_I2C_MspInit+0x84>)
 8043ba6:	4293      	cmp	r3, r2
 8043ba8:	d12b      	bne.n	8043c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8043baa:	2300      	movs	r3, #0
 8043bac:	613b      	str	r3, [r7, #16]
 8043bae:	4b18      	ldr	r3, [pc, #96]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043bb2:	4a17      	ldr	r2, [pc, #92]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bb4:	f043 0302 	orr.w	r3, r3, #2
 8043bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8043bba:	4b15      	ldr	r3, [pc, #84]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043bbe:	f003 0302 	and.w	r3, r3, #2
 8043bc2:	613b      	str	r3, [r7, #16]
 8043bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8043bc6:	23c0      	movs	r3, #192	; 0xc0
 8043bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8043bca:	2312      	movs	r3, #18
 8043bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043bce:	2300      	movs	r3, #0
 8043bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043bd2:	2303      	movs	r3, #3
 8043bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8043bd6:	2304      	movs	r3, #4
 8043bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8043bda:	f107 0314 	add.w	r3, r7, #20
 8043bde:	4619      	mov	r1, r3
 8043be0:	480c      	ldr	r0, [pc, #48]	; (8043c14 <HAL_I2C_MspInit+0x8c>)
 8043be2:	f000 ff8d 	bl	8044b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8043be6:	2300      	movs	r3, #0
 8043be8:	60fb      	str	r3, [r7, #12]
 8043bea:	4b09      	ldr	r3, [pc, #36]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043bee:	4a08      	ldr	r2, [pc, #32]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8043bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8043bf6:	4b06      	ldr	r3, [pc, #24]	; (8043c10 <HAL_I2C_MspInit+0x88>)
 8043bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043bfe:	60fb      	str	r3, [r7, #12]
 8043c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8043c02:	bf00      	nop
 8043c04:	3728      	adds	r7, #40	; 0x28
 8043c06:	46bd      	mov	sp, r7
 8043c08:	bd80      	pop	{r7, pc}
 8043c0a:	bf00      	nop
 8043c0c:	40005400 	.word	0x40005400
 8043c10:	40023800 	.word	0x40023800
 8043c14:	40020400 	.word	0x40020400

08043c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8043c18:	b580      	push	{r7, lr}
 8043c1a:	b08a      	sub	sp, #40	; 0x28
 8043c1c:	af00      	add	r7, sp, #0
 8043c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043c20:	f107 0314 	add.w	r3, r7, #20
 8043c24:	2200      	movs	r2, #0
 8043c26:	601a      	str	r2, [r3, #0]
 8043c28:	605a      	str	r2, [r3, #4]
 8043c2a:	609a      	str	r2, [r3, #8]
 8043c2c:	60da      	str	r2, [r3, #12]
 8043c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8043c30:	687b      	ldr	r3, [r7, #4]
 8043c32:	681b      	ldr	r3, [r3, #0]
 8043c34:	4a19      	ldr	r2, [pc, #100]	; (8043c9c <HAL_SPI_MspInit+0x84>)
 8043c36:	4293      	cmp	r3, r2
 8043c38:	d12b      	bne.n	8043c92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8043c3a:	2300      	movs	r3, #0
 8043c3c:	613b      	str	r3, [r7, #16]
 8043c3e:	4b18      	ldr	r3, [pc, #96]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043c42:	4a17      	ldr	r2, [pc, #92]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8043c48:	6453      	str	r3, [r2, #68]	; 0x44
 8043c4a:	4b15      	ldr	r3, [pc, #84]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043c52:	613b      	str	r3, [r7, #16]
 8043c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8043c56:	2300      	movs	r3, #0
 8043c58:	60fb      	str	r3, [r7, #12]
 8043c5a:	4b11      	ldr	r3, [pc, #68]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043c5e:	4a10      	ldr	r2, [pc, #64]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c60:	f043 0301 	orr.w	r3, r3, #1
 8043c64:	6313      	str	r3, [r2, #48]	; 0x30
 8043c66:	4b0e      	ldr	r3, [pc, #56]	; (8043ca0 <HAL_SPI_MspInit+0x88>)
 8043c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043c6a:	f003 0301 	and.w	r3, r3, #1
 8043c6e:	60fb      	str	r3, [r7, #12]
 8043c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8043c72:	23e0      	movs	r3, #224	; 0xe0
 8043c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043c76:	2302      	movs	r3, #2
 8043c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043c7a:	2300      	movs	r3, #0
 8043c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043c7e:	2303      	movs	r3, #3
 8043c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8043c82:	2305      	movs	r3, #5
 8043c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8043c86:	f107 0314 	add.w	r3, r7, #20
 8043c8a:	4619      	mov	r1, r3
 8043c8c:	4805      	ldr	r0, [pc, #20]	; (8043ca4 <HAL_SPI_MspInit+0x8c>)
 8043c8e:	f000 ff37 	bl	8044b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8043c92:	bf00      	nop
 8043c94:	3728      	adds	r7, #40	; 0x28
 8043c96:	46bd      	mov	sp, r7
 8043c98:	bd80      	pop	{r7, pc}
 8043c9a:	bf00      	nop
 8043c9c:	40013000 	.word	0x40013000
 8043ca0:	40023800 	.word	0x40023800
 8043ca4:	40020000 	.word	0x40020000

08043ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8043ca8:	b580      	push	{r7, lr}
 8043caa:	b08a      	sub	sp, #40	; 0x28
 8043cac:	af00      	add	r7, sp, #0
 8043cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043cb0:	f107 0314 	add.w	r3, r7, #20
 8043cb4:	2200      	movs	r2, #0
 8043cb6:	601a      	str	r2, [r3, #0]
 8043cb8:	605a      	str	r2, [r3, #4]
 8043cba:	609a      	str	r2, [r3, #8]
 8043cbc:	60da      	str	r2, [r3, #12]
 8043cbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8043cc0:	687b      	ldr	r3, [r7, #4]
 8043cc2:	681b      	ldr	r3, [r3, #0]
 8043cc4:	4a19      	ldr	r2, [pc, #100]	; (8043d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8043cc6:	4293      	cmp	r3, r2
 8043cc8:	d12c      	bne.n	8043d24 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8043cca:	2300      	movs	r3, #0
 8043ccc:	613b      	str	r3, [r7, #16]
 8043cce:	4b18      	ldr	r3, [pc, #96]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043cd2:	4a17      	ldr	r2, [pc, #92]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cd4:	f043 0301 	orr.w	r3, r3, #1
 8043cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8043cda:	4b15      	ldr	r3, [pc, #84]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043cde:	f003 0301 	and.w	r3, r3, #1
 8043ce2:	613b      	str	r3, [r7, #16]
 8043ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8043ce6:	2300      	movs	r3, #0
 8043ce8:	60fb      	str	r3, [r7, #12]
 8043cea:	4b11      	ldr	r3, [pc, #68]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043cee:	4a10      	ldr	r2, [pc, #64]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cf0:	f043 0310 	orr.w	r3, r3, #16
 8043cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8043cf6:	4b0e      	ldr	r3, [pc, #56]	; (8043d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8043cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043cfa:	f003 0310 	and.w	r3, r3, #16
 8043cfe:	60fb      	str	r3, [r7, #12]
 8043d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderLeftPin_Pin|EncoderRightPin_Pin;
 8043d02:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8043d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043d08:	2302      	movs	r3, #2
 8043d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8043d0c:	2301      	movs	r3, #1
 8043d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043d10:	2300      	movs	r3, #0
 8043d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8043d14:	2301      	movs	r3, #1
 8043d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8043d18:	f107 0314 	add.w	r3, r7, #20
 8043d1c:	4619      	mov	r1, r3
 8043d1e:	4805      	ldr	r0, [pc, #20]	; (8043d34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8043d20:	f000 feee 	bl	8044b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8043d24:	bf00      	nop
 8043d26:	3728      	adds	r7, #40	; 0x28
 8043d28:	46bd      	mov	sp, r7
 8043d2a:	bd80      	pop	{r7, pc}
 8043d2c:	40010000 	.word	0x40010000
 8043d30:	40023800 	.word	0x40023800
 8043d34:	40021000 	.word	0x40021000

08043d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8043d38:	b580      	push	{r7, lr}
 8043d3a:	b084      	sub	sp, #16
 8043d3c:	af00      	add	r7, sp, #0
 8043d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8043d40:	687b      	ldr	r3, [r7, #4]
 8043d42:	681b      	ldr	r3, [r3, #0]
 8043d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043d48:	d116      	bne.n	8043d78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8043d4a:	2300      	movs	r3, #0
 8043d4c:	60fb      	str	r3, [r7, #12]
 8043d4e:	4b16      	ldr	r3, [pc, #88]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d52:	4a15      	ldr	r2, [pc, #84]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d54:	f043 0301 	orr.w	r3, r3, #1
 8043d58:	6413      	str	r3, [r2, #64]	; 0x40
 8043d5a:	4b13      	ldr	r3, [pc, #76]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d5e:	f003 0301 	and.w	r3, r3, #1
 8043d62:	60fb      	str	r3, [r7, #12]
 8043d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8043d66:	2200      	movs	r2, #0
 8043d68:	2100      	movs	r1, #0
 8043d6a:	201c      	movs	r0, #28
 8043d6c:	f000 fbab 	bl	80444c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8043d70:	201c      	movs	r0, #28
 8043d72:	f000 fbc4 	bl	80444fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8043d76:	e012      	b.n	8043d9e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8043d78:	687b      	ldr	r3, [r7, #4]
 8043d7a:	681b      	ldr	r3, [r3, #0]
 8043d7c:	4a0b      	ldr	r2, [pc, #44]	; (8043dac <HAL_TIM_Base_MspInit+0x74>)
 8043d7e:	4293      	cmp	r3, r2
 8043d80:	d10d      	bne.n	8043d9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8043d82:	2300      	movs	r3, #0
 8043d84:	60bb      	str	r3, [r7, #8]
 8043d86:	4b08      	ldr	r3, [pc, #32]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d8a:	4a07      	ldr	r2, [pc, #28]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d8c:	f043 0302 	orr.w	r3, r3, #2
 8043d90:	6413      	str	r3, [r2, #64]	; 0x40
 8043d92:	4b05      	ldr	r3, [pc, #20]	; (8043da8 <HAL_TIM_Base_MspInit+0x70>)
 8043d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d96:	f003 0302 	and.w	r3, r3, #2
 8043d9a:	60bb      	str	r3, [r7, #8]
 8043d9c:	68bb      	ldr	r3, [r7, #8]
}
 8043d9e:	bf00      	nop
 8043da0:	3710      	adds	r7, #16
 8043da2:	46bd      	mov	sp, r7
 8043da4:	bd80      	pop	{r7, pc}
 8043da6:	bf00      	nop
 8043da8:	40023800 	.word	0x40023800
 8043dac:	40000400 	.word	0x40000400

08043db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8043db0:	b580      	push	{r7, lr}
 8043db2:	b088      	sub	sp, #32
 8043db4:	af00      	add	r7, sp, #0
 8043db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043db8:	f107 030c 	add.w	r3, r7, #12
 8043dbc:	2200      	movs	r2, #0
 8043dbe:	601a      	str	r2, [r3, #0]
 8043dc0:	605a      	str	r2, [r3, #4]
 8043dc2:	609a      	str	r2, [r3, #8]
 8043dc4:	60da      	str	r2, [r3, #12]
 8043dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8043dc8:	687b      	ldr	r3, [r7, #4]
 8043dca:	681b      	ldr	r3, [r3, #0]
 8043dcc:	4a12      	ldr	r2, [pc, #72]	; (8043e18 <HAL_TIM_MspPostInit+0x68>)
 8043dce:	4293      	cmp	r3, r2
 8043dd0:	d11e      	bne.n	8043e10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8043dd2:	2300      	movs	r3, #0
 8043dd4:	60bb      	str	r3, [r7, #8]
 8043dd6:	4b11      	ldr	r3, [pc, #68]	; (8043e1c <HAL_TIM_MspPostInit+0x6c>)
 8043dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043dda:	4a10      	ldr	r2, [pc, #64]	; (8043e1c <HAL_TIM_MspPostInit+0x6c>)
 8043ddc:	f043 0304 	orr.w	r3, r3, #4
 8043de0:	6313      	str	r3, [r2, #48]	; 0x30
 8043de2:	4b0e      	ldr	r3, [pc, #56]	; (8043e1c <HAL_TIM_MspPostInit+0x6c>)
 8043de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043de6:	f003 0304 	and.w	r3, r3, #4
 8043dea:	60bb      	str	r3, [r7, #8]
 8043dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringBankPin1_Pin|FiringBankPin2_Pin;
 8043dee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8043df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043df4:	2302      	movs	r3, #2
 8043df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043df8:	2300      	movs	r3, #0
 8043dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043dfc:	2300      	movs	r3, #0
 8043dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8043e00:	2302      	movs	r3, #2
 8043e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8043e04:	f107 030c 	add.w	r3, r7, #12
 8043e08:	4619      	mov	r1, r3
 8043e0a:	4805      	ldr	r0, [pc, #20]	; (8043e20 <HAL_TIM_MspPostInit+0x70>)
 8043e0c:	f000 fe78 	bl	8044b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8043e10:	bf00      	nop
 8043e12:	3720      	adds	r7, #32
 8043e14:	46bd      	mov	sp, r7
 8043e16:	bd80      	pop	{r7, pc}
 8043e18:	40000400 	.word	0x40000400
 8043e1c:	40023800 	.word	0x40023800
 8043e20:	40020800 	.word	0x40020800

08043e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8043e24:	b480      	push	{r7}
 8043e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8043e28:	e7fe      	b.n	8043e28 <NMI_Handler+0x4>

08043e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8043e2a:	b480      	push	{r7}
 8043e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8043e2e:	e7fe      	b.n	8043e2e <HardFault_Handler+0x4>

08043e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8043e30:	b480      	push	{r7}
 8043e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8043e34:	e7fe      	b.n	8043e34 <MemManage_Handler+0x4>

08043e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8043e36:	b480      	push	{r7}
 8043e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8043e3a:	e7fe      	b.n	8043e3a <BusFault_Handler+0x4>

08043e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8043e3c:	b480      	push	{r7}
 8043e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8043e40:	e7fe      	b.n	8043e40 <UsageFault_Handler+0x4>

08043e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8043e42:	b480      	push	{r7}
 8043e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8043e46:	bf00      	nop
 8043e48:	46bd      	mov	sp, r7
 8043e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e4e:	4770      	bx	lr

08043e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8043e50:	b480      	push	{r7}
 8043e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8043e54:	bf00      	nop
 8043e56:	46bd      	mov	sp, r7
 8043e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e5c:	4770      	bx	lr

08043e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8043e5e:	b480      	push	{r7}
 8043e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8043e62:	bf00      	nop
 8043e64:	46bd      	mov	sp, r7
 8043e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e6a:	4770      	bx	lr

08043e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8043e6c:	b580      	push	{r7, lr}
 8043e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8043e70:	f000 f9e6 	bl	8044240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8043e74:	bf00      	nop
 8043e76:	bd80      	pop	{r7, pc}

08043e78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8043e78:	b580      	push	{r7, lr}
 8043e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 8043e7c:	4b0f      	ldr	r3, [pc, #60]	; (8043ebc <EXTI9_5_IRQHandler+0x44>)
 8043e7e:	695b      	ldr	r3, [r3, #20]
 8043e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043e84:	2b00      	cmp	r3, #0
 8043e86:	d00b      	beq.n	8043ea0 <EXTI9_5_IRQHandler+0x28>
	{
		//Test output pin for zero crossing
		//HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8043e88:	2104      	movs	r1, #4
 8043e8a:	480d      	ldr	r0, [pc, #52]	; (8043ec0 <EXTI9_5_IRQHandler+0x48>)
 8043e8c:	f002 fe5e 	bl	8046b4c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8043e90:	2108      	movs	r1, #8
 8043e92:	480b      	ldr	r0, [pc, #44]	; (8043ec0 <EXTI9_5_IRQHandler+0x48>)
 8043e94:	f002 fe5a 	bl	8046b4c <HAL_TIM_PWM_Start>
		PIDFlag = 1;
 8043e98:	4b0a      	ldr	r3, [pc, #40]	; (8043ec4 <EXTI9_5_IRQHandler+0x4c>)
 8043e9a:	2201      	movs	r2, #1
 8043e9c:	701a      	strb	r2, [r3, #0]
 8043e9e:	e007      	b.n	8043eb0 <EXTI9_5_IRQHandler+0x38>
	}
	else
	{
		//Do nothing
			//FlagBank1=0;
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8043ea0:	2104      	movs	r1, #4
 8043ea2:	4807      	ldr	r0, [pc, #28]	; (8043ec0 <EXTI9_5_IRQHandler+0x48>)
 8043ea4:	f002 ff1a 	bl	8046cdc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8043ea8:	2108      	movs	r1, #8
 8043eaa:	4805      	ldr	r0, [pc, #20]	; (8043ec0 <EXTI9_5_IRQHandler+0x48>)
 8043eac:	f002 ff16 	bl	8046cdc <HAL_TIM_PWM_Stop>
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8043eb0:	2040      	movs	r0, #64	; 0x40
 8043eb2:	f000 fff5 	bl	8044ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8043eb6:	bf00      	nop
 8043eb8:	bd80      	pop	{r7, pc}
 8043eba:	bf00      	nop
 8043ebc:	40013c00 	.word	0x40013c00
 8043ec0:	2000ecfc 	.word	0x2000ecfc
 8043ec4:	2000ee94 	.word	0x2000ee94

08043ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8043ec8:	b580      	push	{r7, lr}
 8043eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ms_counterEncButton++;
 8043ecc:	4b16      	ldr	r3, [pc, #88]	; (8043f28 <TIM2_IRQHandler+0x60>)
 8043ece:	881b      	ldrh	r3, [r3, #0]
 8043ed0:	b29b      	uxth	r3, r3
 8043ed2:	3301      	adds	r3, #1
 8043ed4:	b29a      	uxth	r2, r3
 8043ed6:	4b14      	ldr	r3, [pc, #80]	; (8043f28 <TIM2_IRQHandler+0x60>)
 8043ed8:	801a      	strh	r2, [r3, #0]
	ms_counter++;
 8043eda:	4b14      	ldr	r3, [pc, #80]	; (8043f2c <TIM2_IRQHandler+0x64>)
 8043edc:	681b      	ldr	r3, [r3, #0]
 8043ede:	3301      	adds	r3, #1
 8043ee0:	4a12      	ldr	r2, [pc, #72]	; (8043f2c <TIM2_IRQHandler+0x64>)
 8043ee2:	6013      	str	r3, [r2, #0]
	CtrlParams.counter_200ms++;
 8043ee4:	4b12      	ldr	r3, [pc, #72]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043ee6:	685b      	ldr	r3, [r3, #4]
 8043ee8:	3301      	adds	r3, #1
 8043eea:	4a11      	ldr	r2, [pc, #68]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043eec:	6053      	str	r3, [r2, #4]
	CtrlParams.counter_1000ms++;
 8043eee:	4b10      	ldr	r3, [pc, #64]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043ef0:	689b      	ldr	r3, [r3, #8]
 8043ef2:	3301      	adds	r3, #1
 8043ef4:	4a0e      	ldr	r2, [pc, #56]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043ef6:	6093      	str	r3, [r2, #8]
	CtrlParams.counter_250ms++;
 8043ef8:	4b0d      	ldr	r3, [pc, #52]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043efa:	68db      	ldr	r3, [r3, #12]
 8043efc:	3301      	adds	r3, #1
 8043efe:	4a0c      	ldr	r2, [pc, #48]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043f00:	60d3      	str	r3, [r2, #12]

	if(1 == ms_counter)
 8043f02:	4b0a      	ldr	r3, [pc, #40]	; (8043f2c <TIM2_IRQHandler+0x64>)
 8043f04:	681b      	ldr	r3, [r3, #0]
 8043f06:	2b01      	cmp	r3, #1
 8043f08:	d108      	bne.n	8043f1c <TIM2_IRQHandler+0x54>
	{
		CtrlParams.p_temperature = &temperature;
 8043f0a:	4b09      	ldr	r3, [pc, #36]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043f0c:	4a09      	ldr	r2, [pc, #36]	; (8043f34 <TIM2_IRQHandler+0x6c>)
 8043f0e:	611a      	str	r2, [r3, #16]
		CtrlParams.p_StatusFlags = &Flags;
 8043f10:	4b07      	ldr	r3, [pc, #28]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043f12:	4a09      	ldr	r2, [pc, #36]	; (8043f38 <TIM2_IRQHandler+0x70>)
 8043f14:	619a      	str	r2, [r3, #24]
		CtrlParams.p_PIDError    = &PIDerror;
 8043f16:	4b06      	ldr	r3, [pc, #24]	; (8043f30 <TIM2_IRQHandler+0x68>)
 8043f18:	4a08      	ldr	r2, [pc, #32]	; (8043f3c <TIM2_IRQHandler+0x74>)
 8043f1a:	615a      	str	r2, [r3, #20]
	{
		/*Do nothing*/
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8043f1c:	4808      	ldr	r0, [pc, #32]	; (8043f40 <TIM2_IRQHandler+0x78>)
 8043f1e:	f003 f881 	bl	8047024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8043f22:	bf00      	nop
 8043f24:	bd80      	pop	{r7, pc}
 8043f26:	bf00      	nop
 8043f28:	2000ef68 	.word	0x2000ef68
 8043f2c:	2000ec9c 	.word	0x2000ec9c
 8043f30:	2000eebc 	.word	0x2000eebc
 8043f34:	2000eca0 	.word	0x2000eca0
 8043f38:	2000eeb0 	.word	0x2000eeb0
 8043f3c:	2000eca4 	.word	0x2000eca4
 8043f40:	2000ede4 	.word	0x2000ede4

08043f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8043f44:	b580      	push	{r7, lr}
 8043f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8043f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8043f4c:	f000 ffa8 	bl	8044ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  if(ms_counterEncButton > 80)
 8043f50:	4b0b      	ldr	r3, [pc, #44]	; (8043f80 <EXTI15_10_IRQHandler+0x3c>)
 8043f52:	881b      	ldrh	r3, [r3, #0]
 8043f54:	b29b      	uxth	r3, r3
 8043f56:	2b50      	cmp	r3, #80	; 0x50
 8043f58:	d90f      	bls.n	8043f7a <EXTI15_10_IRQHandler+0x36>
  {

		  interruptCnt++;
 8043f5a:	4b0a      	ldr	r3, [pc, #40]	; (8043f84 <EXTI15_10_IRQHandler+0x40>)
 8043f5c:	681b      	ldr	r3, [r3, #0]
 8043f5e:	3301      	adds	r3, #1
 8043f60:	4a08      	ldr	r2, [pc, #32]	; (8043f84 <EXTI15_10_IRQHandler+0x40>)
 8043f62:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8043f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8043f68:	4807      	ldr	r0, [pc, #28]	; (8043f88 <EXTI15_10_IRQHandler+0x44>)
 8043f6a:	f000 ff7e 	bl	8044e6a <HAL_GPIO_TogglePin>
		  ui8_encButtonPressed = true;
 8043f6e:	4b07      	ldr	r3, [pc, #28]	; (8043f8c <EXTI15_10_IRQHandler+0x48>)
 8043f70:	2201      	movs	r2, #1
 8043f72:	701a      	strb	r2, [r3, #0]

		  ms_counterEncButton = 0;
 8043f74:	4b02      	ldr	r3, [pc, #8]	; (8043f80 <EXTI15_10_IRQHandler+0x3c>)
 8043f76:	2200      	movs	r2, #0
 8043f78:	801a      	strh	r2, [r3, #0]
  }



  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8043f7a:	bf00      	nop
 8043f7c:	bd80      	pop	{r7, pc}
 8043f7e:	bf00      	nop
 8043f80:	2000ef68 	.word	0x2000ef68
 8043f84:	2000020c 	.word	0x2000020c
 8043f88:	40020c00 	.word	0x40020c00
 8043f8c:	2000ee7d 	.word	0x2000ee7d

08043f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8043f90:	b480      	push	{r7}
 8043f92:	af00      	add	r7, sp, #0
	return 1;
 8043f94:	2301      	movs	r3, #1
}
 8043f96:	4618      	mov	r0, r3
 8043f98:	46bd      	mov	sp, r7
 8043f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f9e:	4770      	bx	lr

08043fa0 <_kill>:

int _kill(int pid, int sig)
{
 8043fa0:	b580      	push	{r7, lr}
 8043fa2:	b082      	sub	sp, #8
 8043fa4:	af00      	add	r7, sp, #0
 8043fa6:	6078      	str	r0, [r7, #4]
 8043fa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8043faa:	f003 fec5 	bl	8047d38 <__errno>
 8043fae:	4603      	mov	r3, r0
 8043fb0:	2216      	movs	r2, #22
 8043fb2:	601a      	str	r2, [r3, #0]
	return -1;
 8043fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8043fb8:	4618      	mov	r0, r3
 8043fba:	3708      	adds	r7, #8
 8043fbc:	46bd      	mov	sp, r7
 8043fbe:	bd80      	pop	{r7, pc}

08043fc0 <_exit>:

void _exit (int status)
{
 8043fc0:	b580      	push	{r7, lr}
 8043fc2:	b082      	sub	sp, #8
 8043fc4:	af00      	add	r7, sp, #0
 8043fc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8043fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8043fcc:	6878      	ldr	r0, [r7, #4]
 8043fce:	f7ff ffe7 	bl	8043fa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8043fd2:	e7fe      	b.n	8043fd2 <_exit+0x12>

08043fd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8043fd4:	b580      	push	{r7, lr}
 8043fd6:	b086      	sub	sp, #24
 8043fd8:	af00      	add	r7, sp, #0
 8043fda:	60f8      	str	r0, [r7, #12]
 8043fdc:	60b9      	str	r1, [r7, #8]
 8043fde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043fe0:	2300      	movs	r3, #0
 8043fe2:	617b      	str	r3, [r7, #20]
 8043fe4:	e00a      	b.n	8043ffc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8043fe6:	f3af 8000 	nop.w
 8043fea:	4601      	mov	r1, r0
 8043fec:	68bb      	ldr	r3, [r7, #8]
 8043fee:	1c5a      	adds	r2, r3, #1
 8043ff0:	60ba      	str	r2, [r7, #8]
 8043ff2:	b2ca      	uxtb	r2, r1
 8043ff4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043ff6:	697b      	ldr	r3, [r7, #20]
 8043ff8:	3301      	adds	r3, #1
 8043ffa:	617b      	str	r3, [r7, #20]
 8043ffc:	697a      	ldr	r2, [r7, #20]
 8043ffe:	687b      	ldr	r3, [r7, #4]
 8044000:	429a      	cmp	r2, r3
 8044002:	dbf0      	blt.n	8043fe6 <_read+0x12>
	}

return len;
 8044004:	687b      	ldr	r3, [r7, #4]
}
 8044006:	4618      	mov	r0, r3
 8044008:	3718      	adds	r7, #24
 804400a:	46bd      	mov	sp, r7
 804400c:	bd80      	pop	{r7, pc}

0804400e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804400e:	b580      	push	{r7, lr}
 8044010:	b086      	sub	sp, #24
 8044012:	af00      	add	r7, sp, #0
 8044014:	60f8      	str	r0, [r7, #12]
 8044016:	60b9      	str	r1, [r7, #8]
 8044018:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804401a:	2300      	movs	r3, #0
 804401c:	617b      	str	r3, [r7, #20]
 804401e:	e009      	b.n	8044034 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8044020:	68bb      	ldr	r3, [r7, #8]
 8044022:	1c5a      	adds	r2, r3, #1
 8044024:	60ba      	str	r2, [r7, #8]
 8044026:	781b      	ldrb	r3, [r3, #0]
 8044028:	4618      	mov	r0, r3
 804402a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804402e:	697b      	ldr	r3, [r7, #20]
 8044030:	3301      	adds	r3, #1
 8044032:	617b      	str	r3, [r7, #20]
 8044034:	697a      	ldr	r2, [r7, #20]
 8044036:	687b      	ldr	r3, [r7, #4]
 8044038:	429a      	cmp	r2, r3
 804403a:	dbf1      	blt.n	8044020 <_write+0x12>
	}
	return len;
 804403c:	687b      	ldr	r3, [r7, #4]
}
 804403e:	4618      	mov	r0, r3
 8044040:	3718      	adds	r7, #24
 8044042:	46bd      	mov	sp, r7
 8044044:	bd80      	pop	{r7, pc}

08044046 <_close>:

int _close(int file)
{
 8044046:	b480      	push	{r7}
 8044048:	b083      	sub	sp, #12
 804404a:	af00      	add	r7, sp, #0
 804404c:	6078      	str	r0, [r7, #4]
	return -1;
 804404e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8044052:	4618      	mov	r0, r3
 8044054:	370c      	adds	r7, #12
 8044056:	46bd      	mov	sp, r7
 8044058:	f85d 7b04 	ldr.w	r7, [sp], #4
 804405c:	4770      	bx	lr

0804405e <_fstat>:


int _fstat(int file, struct stat *st)
{
 804405e:	b480      	push	{r7}
 8044060:	b083      	sub	sp, #12
 8044062:	af00      	add	r7, sp, #0
 8044064:	6078      	str	r0, [r7, #4]
 8044066:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8044068:	683b      	ldr	r3, [r7, #0]
 804406a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804406e:	605a      	str	r2, [r3, #4]
	return 0;
 8044070:	2300      	movs	r3, #0
}
 8044072:	4618      	mov	r0, r3
 8044074:	370c      	adds	r7, #12
 8044076:	46bd      	mov	sp, r7
 8044078:	f85d 7b04 	ldr.w	r7, [sp], #4
 804407c:	4770      	bx	lr

0804407e <_isatty>:

int _isatty(int file)
{
 804407e:	b480      	push	{r7}
 8044080:	b083      	sub	sp, #12
 8044082:	af00      	add	r7, sp, #0
 8044084:	6078      	str	r0, [r7, #4]
	return 1;
 8044086:	2301      	movs	r3, #1
}
 8044088:	4618      	mov	r0, r3
 804408a:	370c      	adds	r7, #12
 804408c:	46bd      	mov	sp, r7
 804408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044092:	4770      	bx	lr

08044094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8044094:	b480      	push	{r7}
 8044096:	b085      	sub	sp, #20
 8044098:	af00      	add	r7, sp, #0
 804409a:	60f8      	str	r0, [r7, #12]
 804409c:	60b9      	str	r1, [r7, #8]
 804409e:	607a      	str	r2, [r7, #4]
	return 0;
 80440a0:	2300      	movs	r3, #0
}
 80440a2:	4618      	mov	r0, r3
 80440a4:	3714      	adds	r7, #20
 80440a6:	46bd      	mov	sp, r7
 80440a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440ac:	4770      	bx	lr
	...

080440b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80440b0:	b580      	push	{r7, lr}
 80440b2:	b086      	sub	sp, #24
 80440b4:	af00      	add	r7, sp, #0
 80440b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80440b8:	4a14      	ldr	r2, [pc, #80]	; (804410c <_sbrk+0x5c>)
 80440ba:	4b15      	ldr	r3, [pc, #84]	; (8044110 <_sbrk+0x60>)
 80440bc:	1ad3      	subs	r3, r2, r3
 80440be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80440c0:	697b      	ldr	r3, [r7, #20]
 80440c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80440c4:	4b13      	ldr	r3, [pc, #76]	; (8044114 <_sbrk+0x64>)
 80440c6:	681b      	ldr	r3, [r3, #0]
 80440c8:	2b00      	cmp	r3, #0
 80440ca:	d102      	bne.n	80440d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80440cc:	4b11      	ldr	r3, [pc, #68]	; (8044114 <_sbrk+0x64>)
 80440ce:	4a12      	ldr	r2, [pc, #72]	; (8044118 <_sbrk+0x68>)
 80440d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80440d2:	4b10      	ldr	r3, [pc, #64]	; (8044114 <_sbrk+0x64>)
 80440d4:	681a      	ldr	r2, [r3, #0]
 80440d6:	687b      	ldr	r3, [r7, #4]
 80440d8:	4413      	add	r3, r2
 80440da:	693a      	ldr	r2, [r7, #16]
 80440dc:	429a      	cmp	r2, r3
 80440de:	d207      	bcs.n	80440f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80440e0:	f003 fe2a 	bl	8047d38 <__errno>
 80440e4:	4603      	mov	r3, r0
 80440e6:	220c      	movs	r2, #12
 80440e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80440ea:	f04f 33ff 	mov.w	r3, #4294967295
 80440ee:	e009      	b.n	8044104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80440f0:	4b08      	ldr	r3, [pc, #32]	; (8044114 <_sbrk+0x64>)
 80440f2:	681b      	ldr	r3, [r3, #0]
 80440f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80440f6:	4b07      	ldr	r3, [pc, #28]	; (8044114 <_sbrk+0x64>)
 80440f8:	681a      	ldr	r2, [r3, #0]
 80440fa:	687b      	ldr	r3, [r7, #4]
 80440fc:	4413      	add	r3, r2
 80440fe:	4a05      	ldr	r2, [pc, #20]	; (8044114 <_sbrk+0x64>)
 8044100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8044102:	68fb      	ldr	r3, [r7, #12]
}
 8044104:	4618      	mov	r0, r3
 8044106:	3718      	adds	r7, #24
 8044108:	46bd      	mov	sp, r7
 804410a:	bd80      	pop	{r7, pc}
 804410c:	20020000 	.word	0x20020000
 8044110:	00000400 	.word	0x00000400
 8044114:	2000eca8 	.word	0x2000eca8
 8044118:	2000efa0 	.word	0x2000efa0

0804411c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804411c:	b480      	push	{r7}
 804411e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8044120:	4b07      	ldr	r3, [pc, #28]	; (8044140 <SystemInit+0x24>)
 8044122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044126:	4a06      	ldr	r2, [pc, #24]	; (8044140 <SystemInit+0x24>)
 8044128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804412c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8044130:	4b03      	ldr	r3, [pc, #12]	; (8044140 <SystemInit+0x24>)
 8044132:	4a04      	ldr	r2, [pc, #16]	; (8044144 <SystemInit+0x28>)
 8044134:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8044136:	bf00      	nop
 8044138:	46bd      	mov	sp, r7
 804413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804413e:	4770      	bx	lr
 8044140:	e000ed00 	.word	0xe000ed00
 8044144:	08040000 	.word	0x08040000

08044148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8044148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8044180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 804414c:	480d      	ldr	r0, [pc, #52]	; (8044184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 804414e:	490e      	ldr	r1, [pc, #56]	; (8044188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8044150:	4a0e      	ldr	r2, [pc, #56]	; (804418c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8044152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8044154:	e002      	b.n	804415c <LoopCopyDataInit>

08044156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8044156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8044158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804415a:	3304      	adds	r3, #4

0804415c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 804415c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804415e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8044160:	d3f9      	bcc.n	8044156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8044162:	4a0b      	ldr	r2, [pc, #44]	; (8044190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8044164:	4c0b      	ldr	r4, [pc, #44]	; (8044194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8044166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8044168:	e001      	b.n	804416e <LoopFillZerobss>

0804416a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804416a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 804416c:	3204      	adds	r2, #4

0804416e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804416e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8044170:	d3fb      	bcc.n	804416a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8044172:	f7ff ffd3 	bl	804411c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8044176:	f003 fde5 	bl	8047d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804417a:	f7ff f935 	bl	80433e8 <main>
  bx  lr    
 804417e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8044180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8044184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8044188:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 804418c:	0804dc98 	.word	0x0804dc98
  ldr r2, =_sbss
 8044190:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8044194:	2000efa0 	.word	0x2000efa0

08044198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8044198:	e7fe      	b.n	8044198 <ADC_IRQHandler>
	...

0804419c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804419c:	b580      	push	{r7, lr}
 804419e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80441a0:	4b0e      	ldr	r3, [pc, #56]	; (80441dc <HAL_Init+0x40>)
 80441a2:	681b      	ldr	r3, [r3, #0]
 80441a4:	4a0d      	ldr	r2, [pc, #52]	; (80441dc <HAL_Init+0x40>)
 80441a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80441aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80441ac:	4b0b      	ldr	r3, [pc, #44]	; (80441dc <HAL_Init+0x40>)
 80441ae:	681b      	ldr	r3, [r3, #0]
 80441b0:	4a0a      	ldr	r2, [pc, #40]	; (80441dc <HAL_Init+0x40>)
 80441b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80441b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80441b8:	4b08      	ldr	r3, [pc, #32]	; (80441dc <HAL_Init+0x40>)
 80441ba:	681b      	ldr	r3, [r3, #0]
 80441bc:	4a07      	ldr	r2, [pc, #28]	; (80441dc <HAL_Init+0x40>)
 80441be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80441c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80441c4:	2003      	movs	r0, #3
 80441c6:	f000 f973 	bl	80444b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80441ca:	2000      	movs	r0, #0
 80441cc:	f000 f808 	bl	80441e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80441d0:	f7ff fcb2 	bl	8043b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80441d4:	2300      	movs	r3, #0
}
 80441d6:	4618      	mov	r0, r3
 80441d8:	bd80      	pop	{r7, pc}
 80441da:	bf00      	nop
 80441dc:	40023c00 	.word	0x40023c00

080441e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80441e0:	b580      	push	{r7, lr}
 80441e2:	b082      	sub	sp, #8
 80441e4:	af00      	add	r7, sp, #0
 80441e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80441e8:	4b12      	ldr	r3, [pc, #72]	; (8044234 <HAL_InitTick+0x54>)
 80441ea:	681a      	ldr	r2, [r3, #0]
 80441ec:	4b12      	ldr	r3, [pc, #72]	; (8044238 <HAL_InitTick+0x58>)
 80441ee:	781b      	ldrb	r3, [r3, #0]
 80441f0:	4619      	mov	r1, r3
 80441f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80441f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80441fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80441fe:	4618      	mov	r0, r3
 8044200:	f000 f999 	bl	8044536 <HAL_SYSTICK_Config>
 8044204:	4603      	mov	r3, r0
 8044206:	2b00      	cmp	r3, #0
 8044208:	d001      	beq.n	804420e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 804420a:	2301      	movs	r3, #1
 804420c:	e00e      	b.n	804422c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804420e:	687b      	ldr	r3, [r7, #4]
 8044210:	2b0f      	cmp	r3, #15
 8044212:	d80a      	bhi.n	804422a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8044214:	2200      	movs	r2, #0
 8044216:	6879      	ldr	r1, [r7, #4]
 8044218:	f04f 30ff 	mov.w	r0, #4294967295
 804421c:	f000 f953 	bl	80444c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8044220:	4a06      	ldr	r2, [pc, #24]	; (804423c <HAL_InitTick+0x5c>)
 8044222:	687b      	ldr	r3, [r7, #4]
 8044224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8044226:	2300      	movs	r3, #0
 8044228:	e000      	b.n	804422c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 804422a:	2301      	movs	r3, #1
}
 804422c:	4618      	mov	r0, r3
 804422e:	3708      	adds	r7, #8
 8044230:	46bd      	mov	sp, r7
 8044232:	bd80      	pop	{r7, pc}
 8044234:	2000000c 	.word	0x2000000c
 8044238:	20000014 	.word	0x20000014
 804423c:	20000010 	.word	0x20000010

08044240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8044240:	b480      	push	{r7}
 8044242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8044244:	4b06      	ldr	r3, [pc, #24]	; (8044260 <HAL_IncTick+0x20>)
 8044246:	781b      	ldrb	r3, [r3, #0]
 8044248:	461a      	mov	r2, r3
 804424a:	4b06      	ldr	r3, [pc, #24]	; (8044264 <HAL_IncTick+0x24>)
 804424c:	681b      	ldr	r3, [r3, #0]
 804424e:	4413      	add	r3, r2
 8044250:	4a04      	ldr	r2, [pc, #16]	; (8044264 <HAL_IncTick+0x24>)
 8044252:	6013      	str	r3, [r2, #0]
}
 8044254:	bf00      	nop
 8044256:	46bd      	mov	sp, r7
 8044258:	f85d 7b04 	ldr.w	r7, [sp], #4
 804425c:	4770      	bx	lr
 804425e:	bf00      	nop
 8044260:	20000014 	.word	0x20000014
 8044264:	2000ef6c 	.word	0x2000ef6c

08044268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8044268:	b480      	push	{r7}
 804426a:	af00      	add	r7, sp, #0
  return uwTick;
 804426c:	4b03      	ldr	r3, [pc, #12]	; (804427c <HAL_GetTick+0x14>)
 804426e:	681b      	ldr	r3, [r3, #0]
}
 8044270:	4618      	mov	r0, r3
 8044272:	46bd      	mov	sp, r7
 8044274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044278:	4770      	bx	lr
 804427a:	bf00      	nop
 804427c:	2000ef6c 	.word	0x2000ef6c

08044280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8044280:	b580      	push	{r7, lr}
 8044282:	b084      	sub	sp, #16
 8044284:	af00      	add	r7, sp, #0
 8044286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8044288:	f7ff ffee 	bl	8044268 <HAL_GetTick>
 804428c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804428e:	687b      	ldr	r3, [r7, #4]
 8044290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8044292:	68fb      	ldr	r3, [r7, #12]
 8044294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044298:	d005      	beq.n	80442a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804429a:	4b0a      	ldr	r3, [pc, #40]	; (80442c4 <HAL_Delay+0x44>)
 804429c:	781b      	ldrb	r3, [r3, #0]
 804429e:	461a      	mov	r2, r3
 80442a0:	68fb      	ldr	r3, [r7, #12]
 80442a2:	4413      	add	r3, r2
 80442a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80442a6:	bf00      	nop
 80442a8:	f7ff ffde 	bl	8044268 <HAL_GetTick>
 80442ac:	4602      	mov	r2, r0
 80442ae:	68bb      	ldr	r3, [r7, #8]
 80442b0:	1ad3      	subs	r3, r2, r3
 80442b2:	68fa      	ldr	r2, [r7, #12]
 80442b4:	429a      	cmp	r2, r3
 80442b6:	d8f7      	bhi.n	80442a8 <HAL_Delay+0x28>
  {
  }
}
 80442b8:	bf00      	nop
 80442ba:	bf00      	nop
 80442bc:	3710      	adds	r7, #16
 80442be:	46bd      	mov	sp, r7
 80442c0:	bd80      	pop	{r7, pc}
 80442c2:	bf00      	nop
 80442c4:	20000014 	.word	0x20000014

080442c8 <__NVIC_SetPriorityGrouping>:
{
 80442c8:	b480      	push	{r7}
 80442ca:	b085      	sub	sp, #20
 80442cc:	af00      	add	r7, sp, #0
 80442ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80442d0:	687b      	ldr	r3, [r7, #4]
 80442d2:	f003 0307 	and.w	r3, r3, #7
 80442d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80442d8:	4b0c      	ldr	r3, [pc, #48]	; (804430c <__NVIC_SetPriorityGrouping+0x44>)
 80442da:	68db      	ldr	r3, [r3, #12]
 80442dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80442de:	68ba      	ldr	r2, [r7, #8]
 80442e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80442e4:	4013      	ands	r3, r2
 80442e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80442e8:	68fb      	ldr	r3, [r7, #12]
 80442ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80442ec:	68bb      	ldr	r3, [r7, #8]
 80442ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80442f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80442f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80442f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80442fa:	4a04      	ldr	r2, [pc, #16]	; (804430c <__NVIC_SetPriorityGrouping+0x44>)
 80442fc:	68bb      	ldr	r3, [r7, #8]
 80442fe:	60d3      	str	r3, [r2, #12]
}
 8044300:	bf00      	nop
 8044302:	3714      	adds	r7, #20
 8044304:	46bd      	mov	sp, r7
 8044306:	f85d 7b04 	ldr.w	r7, [sp], #4
 804430a:	4770      	bx	lr
 804430c:	e000ed00 	.word	0xe000ed00

08044310 <__NVIC_GetPriorityGrouping>:
{
 8044310:	b480      	push	{r7}
 8044312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8044314:	4b04      	ldr	r3, [pc, #16]	; (8044328 <__NVIC_GetPriorityGrouping+0x18>)
 8044316:	68db      	ldr	r3, [r3, #12]
 8044318:	0a1b      	lsrs	r3, r3, #8
 804431a:	f003 0307 	and.w	r3, r3, #7
}
 804431e:	4618      	mov	r0, r3
 8044320:	46bd      	mov	sp, r7
 8044322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044326:	4770      	bx	lr
 8044328:	e000ed00 	.word	0xe000ed00

0804432c <__NVIC_EnableIRQ>:
{
 804432c:	b480      	push	{r7}
 804432e:	b083      	sub	sp, #12
 8044330:	af00      	add	r7, sp, #0
 8044332:	4603      	mov	r3, r0
 8044334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804433a:	2b00      	cmp	r3, #0
 804433c:	db0b      	blt.n	8044356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804433e:	79fb      	ldrb	r3, [r7, #7]
 8044340:	f003 021f 	and.w	r2, r3, #31
 8044344:	4907      	ldr	r1, [pc, #28]	; (8044364 <__NVIC_EnableIRQ+0x38>)
 8044346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804434a:	095b      	lsrs	r3, r3, #5
 804434c:	2001      	movs	r0, #1
 804434e:	fa00 f202 	lsl.w	r2, r0, r2
 8044352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8044356:	bf00      	nop
 8044358:	370c      	adds	r7, #12
 804435a:	46bd      	mov	sp, r7
 804435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044360:	4770      	bx	lr
 8044362:	bf00      	nop
 8044364:	e000e100 	.word	0xe000e100

08044368 <__NVIC_DisableIRQ>:
{
 8044368:	b480      	push	{r7}
 804436a:	b083      	sub	sp, #12
 804436c:	af00      	add	r7, sp, #0
 804436e:	4603      	mov	r3, r0
 8044370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044376:	2b00      	cmp	r3, #0
 8044378:	db12      	blt.n	80443a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804437a:	79fb      	ldrb	r3, [r7, #7]
 804437c:	f003 021f 	and.w	r2, r3, #31
 8044380:	490a      	ldr	r1, [pc, #40]	; (80443ac <__NVIC_DisableIRQ+0x44>)
 8044382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044386:	095b      	lsrs	r3, r3, #5
 8044388:	2001      	movs	r0, #1
 804438a:	fa00 f202 	lsl.w	r2, r0, r2
 804438e:	3320      	adds	r3, #32
 8044390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8044394:	f3bf 8f4f 	dsb	sy
}
 8044398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 804439a:	f3bf 8f6f 	isb	sy
}
 804439e:	bf00      	nop
}
 80443a0:	bf00      	nop
 80443a2:	370c      	adds	r7, #12
 80443a4:	46bd      	mov	sp, r7
 80443a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443aa:	4770      	bx	lr
 80443ac:	e000e100 	.word	0xe000e100

080443b0 <__NVIC_SetPriority>:
{
 80443b0:	b480      	push	{r7}
 80443b2:	b083      	sub	sp, #12
 80443b4:	af00      	add	r7, sp, #0
 80443b6:	4603      	mov	r3, r0
 80443b8:	6039      	str	r1, [r7, #0]
 80443ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80443bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80443c0:	2b00      	cmp	r3, #0
 80443c2:	db0a      	blt.n	80443da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80443c4:	683b      	ldr	r3, [r7, #0]
 80443c6:	b2da      	uxtb	r2, r3
 80443c8:	490c      	ldr	r1, [pc, #48]	; (80443fc <__NVIC_SetPriority+0x4c>)
 80443ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80443ce:	0112      	lsls	r2, r2, #4
 80443d0:	b2d2      	uxtb	r2, r2
 80443d2:	440b      	add	r3, r1
 80443d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80443d8:	e00a      	b.n	80443f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80443da:	683b      	ldr	r3, [r7, #0]
 80443dc:	b2da      	uxtb	r2, r3
 80443de:	4908      	ldr	r1, [pc, #32]	; (8044400 <__NVIC_SetPriority+0x50>)
 80443e0:	79fb      	ldrb	r3, [r7, #7]
 80443e2:	f003 030f 	and.w	r3, r3, #15
 80443e6:	3b04      	subs	r3, #4
 80443e8:	0112      	lsls	r2, r2, #4
 80443ea:	b2d2      	uxtb	r2, r2
 80443ec:	440b      	add	r3, r1
 80443ee:	761a      	strb	r2, [r3, #24]
}
 80443f0:	bf00      	nop
 80443f2:	370c      	adds	r7, #12
 80443f4:	46bd      	mov	sp, r7
 80443f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443fa:	4770      	bx	lr
 80443fc:	e000e100 	.word	0xe000e100
 8044400:	e000ed00 	.word	0xe000ed00

08044404 <NVIC_EncodePriority>:
{
 8044404:	b480      	push	{r7}
 8044406:	b089      	sub	sp, #36	; 0x24
 8044408:	af00      	add	r7, sp, #0
 804440a:	60f8      	str	r0, [r7, #12]
 804440c:	60b9      	str	r1, [r7, #8]
 804440e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8044410:	68fb      	ldr	r3, [r7, #12]
 8044412:	f003 0307 	and.w	r3, r3, #7
 8044416:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8044418:	69fb      	ldr	r3, [r7, #28]
 804441a:	f1c3 0307 	rsb	r3, r3, #7
 804441e:	2b04      	cmp	r3, #4
 8044420:	bf28      	it	cs
 8044422:	2304      	movcs	r3, #4
 8044424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8044426:	69fb      	ldr	r3, [r7, #28]
 8044428:	3304      	adds	r3, #4
 804442a:	2b06      	cmp	r3, #6
 804442c:	d902      	bls.n	8044434 <NVIC_EncodePriority+0x30>
 804442e:	69fb      	ldr	r3, [r7, #28]
 8044430:	3b03      	subs	r3, #3
 8044432:	e000      	b.n	8044436 <NVIC_EncodePriority+0x32>
 8044434:	2300      	movs	r3, #0
 8044436:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044438:	f04f 32ff 	mov.w	r2, #4294967295
 804443c:	69bb      	ldr	r3, [r7, #24]
 804443e:	fa02 f303 	lsl.w	r3, r2, r3
 8044442:	43da      	mvns	r2, r3
 8044444:	68bb      	ldr	r3, [r7, #8]
 8044446:	401a      	ands	r2, r3
 8044448:	697b      	ldr	r3, [r7, #20]
 804444a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804444c:	f04f 31ff 	mov.w	r1, #4294967295
 8044450:	697b      	ldr	r3, [r7, #20]
 8044452:	fa01 f303 	lsl.w	r3, r1, r3
 8044456:	43d9      	mvns	r1, r3
 8044458:	687b      	ldr	r3, [r7, #4]
 804445a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804445c:	4313      	orrs	r3, r2
}
 804445e:	4618      	mov	r0, r3
 8044460:	3724      	adds	r7, #36	; 0x24
 8044462:	46bd      	mov	sp, r7
 8044464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044468:	4770      	bx	lr
	...

0804446c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 804446c:	b580      	push	{r7, lr}
 804446e:	b082      	sub	sp, #8
 8044470:	af00      	add	r7, sp, #0
 8044472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8044474:	687b      	ldr	r3, [r7, #4]
 8044476:	3b01      	subs	r3, #1
 8044478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804447c:	d301      	bcc.n	8044482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 804447e:	2301      	movs	r3, #1
 8044480:	e00f      	b.n	80444a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8044482:	4a0a      	ldr	r2, [pc, #40]	; (80444ac <SysTick_Config+0x40>)
 8044484:	687b      	ldr	r3, [r7, #4]
 8044486:	3b01      	subs	r3, #1
 8044488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804448a:	210f      	movs	r1, #15
 804448c:	f04f 30ff 	mov.w	r0, #4294967295
 8044490:	f7ff ff8e 	bl	80443b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8044494:	4b05      	ldr	r3, [pc, #20]	; (80444ac <SysTick_Config+0x40>)
 8044496:	2200      	movs	r2, #0
 8044498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804449a:	4b04      	ldr	r3, [pc, #16]	; (80444ac <SysTick_Config+0x40>)
 804449c:	2207      	movs	r2, #7
 804449e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80444a0:	2300      	movs	r3, #0
}
 80444a2:	4618      	mov	r0, r3
 80444a4:	3708      	adds	r7, #8
 80444a6:	46bd      	mov	sp, r7
 80444a8:	bd80      	pop	{r7, pc}
 80444aa:	bf00      	nop
 80444ac:	e000e010 	.word	0xe000e010

080444b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80444b0:	b580      	push	{r7, lr}
 80444b2:	b082      	sub	sp, #8
 80444b4:	af00      	add	r7, sp, #0
 80444b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80444b8:	6878      	ldr	r0, [r7, #4]
 80444ba:	f7ff ff05 	bl	80442c8 <__NVIC_SetPriorityGrouping>
}
 80444be:	bf00      	nop
 80444c0:	3708      	adds	r7, #8
 80444c2:	46bd      	mov	sp, r7
 80444c4:	bd80      	pop	{r7, pc}

080444c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80444c6:	b580      	push	{r7, lr}
 80444c8:	b086      	sub	sp, #24
 80444ca:	af00      	add	r7, sp, #0
 80444cc:	4603      	mov	r3, r0
 80444ce:	60b9      	str	r1, [r7, #8]
 80444d0:	607a      	str	r2, [r7, #4]
 80444d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80444d4:	2300      	movs	r3, #0
 80444d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80444d8:	f7ff ff1a 	bl	8044310 <__NVIC_GetPriorityGrouping>
 80444dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80444de:	687a      	ldr	r2, [r7, #4]
 80444e0:	68b9      	ldr	r1, [r7, #8]
 80444e2:	6978      	ldr	r0, [r7, #20]
 80444e4:	f7ff ff8e 	bl	8044404 <NVIC_EncodePriority>
 80444e8:	4602      	mov	r2, r0
 80444ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80444ee:	4611      	mov	r1, r2
 80444f0:	4618      	mov	r0, r3
 80444f2:	f7ff ff5d 	bl	80443b0 <__NVIC_SetPriority>
}
 80444f6:	bf00      	nop
 80444f8:	3718      	adds	r7, #24
 80444fa:	46bd      	mov	sp, r7
 80444fc:	bd80      	pop	{r7, pc}

080444fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80444fe:	b580      	push	{r7, lr}
 8044500:	b082      	sub	sp, #8
 8044502:	af00      	add	r7, sp, #0
 8044504:	4603      	mov	r3, r0
 8044506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8044508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804450c:	4618      	mov	r0, r3
 804450e:	f7ff ff0d 	bl	804432c <__NVIC_EnableIRQ>
}
 8044512:	bf00      	nop
 8044514:	3708      	adds	r7, #8
 8044516:	46bd      	mov	sp, r7
 8044518:	bd80      	pop	{r7, pc}

0804451a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 804451a:	b580      	push	{r7, lr}
 804451c:	b082      	sub	sp, #8
 804451e:	af00      	add	r7, sp, #0
 8044520:	4603      	mov	r3, r0
 8044522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8044524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044528:	4618      	mov	r0, r3
 804452a:	f7ff ff1d 	bl	8044368 <__NVIC_DisableIRQ>
}
 804452e:	bf00      	nop
 8044530:	3708      	adds	r7, #8
 8044532:	46bd      	mov	sp, r7
 8044534:	bd80      	pop	{r7, pc}

08044536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8044536:	b580      	push	{r7, lr}
 8044538:	b082      	sub	sp, #8
 804453a:	af00      	add	r7, sp, #0
 804453c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804453e:	6878      	ldr	r0, [r7, #4]
 8044540:	f7ff ff94 	bl	804446c <SysTick_Config>
 8044544:	4603      	mov	r3, r0
}
 8044546:	4618      	mov	r0, r3
 8044548:	3708      	adds	r7, #8
 804454a:	46bd      	mov	sp, r7
 804454c:	bd80      	pop	{r7, pc}
	...

08044550 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8044550:	b580      	push	{r7, lr}
 8044552:	b086      	sub	sp, #24
 8044554:	af00      	add	r7, sp, #0
 8044556:	60f8      	str	r0, [r7, #12]
 8044558:	60b9      	str	r1, [r7, #8]
 804455a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 804455e:	2301      	movs	r3, #1
 8044560:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8044562:	4b23      	ldr	r3, [pc, #140]	; (80445f0 <HAL_FLASH_Program+0xa0>)
 8044564:	7e1b      	ldrb	r3, [r3, #24]
 8044566:	2b01      	cmp	r3, #1
 8044568:	d101      	bne.n	804456e <HAL_FLASH_Program+0x1e>
 804456a:	2302      	movs	r3, #2
 804456c:	e03b      	b.n	80445e6 <HAL_FLASH_Program+0x96>
 804456e:	4b20      	ldr	r3, [pc, #128]	; (80445f0 <HAL_FLASH_Program+0xa0>)
 8044570:	2201      	movs	r2, #1
 8044572:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044574:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044578:	f000 f870 	bl	804465c <FLASH_WaitForLastOperation>
 804457c:	4603      	mov	r3, r0
 804457e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8044580:	7dfb      	ldrb	r3, [r7, #23]
 8044582:	2b00      	cmp	r3, #0
 8044584:	d12b      	bne.n	80445de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8044586:	68fb      	ldr	r3, [r7, #12]
 8044588:	2b00      	cmp	r3, #0
 804458a:	d105      	bne.n	8044598 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 804458c:	783b      	ldrb	r3, [r7, #0]
 804458e:	4619      	mov	r1, r3
 8044590:	68b8      	ldr	r0, [r7, #8]
 8044592:	f000 f91b 	bl	80447cc <FLASH_Program_Byte>
 8044596:	e016      	b.n	80445c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8044598:	68fb      	ldr	r3, [r7, #12]
 804459a:	2b01      	cmp	r3, #1
 804459c:	d105      	bne.n	80445aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 804459e:	883b      	ldrh	r3, [r7, #0]
 80445a0:	4619      	mov	r1, r3
 80445a2:	68b8      	ldr	r0, [r7, #8]
 80445a4:	f000 f8ee 	bl	8044784 <FLASH_Program_HalfWord>
 80445a8:	e00d      	b.n	80445c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80445aa:	68fb      	ldr	r3, [r7, #12]
 80445ac:	2b02      	cmp	r3, #2
 80445ae:	d105      	bne.n	80445bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80445b0:	683b      	ldr	r3, [r7, #0]
 80445b2:	4619      	mov	r1, r3
 80445b4:	68b8      	ldr	r0, [r7, #8]
 80445b6:	f000 f8c3 	bl	8044740 <FLASH_Program_Word>
 80445ba:	e004      	b.n	80445c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80445bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80445c0:	68b8      	ldr	r0, [r7, #8]
 80445c2:	f000 f88b 	bl	80446dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80445c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80445ca:	f000 f847 	bl	804465c <FLASH_WaitForLastOperation>
 80445ce:	4603      	mov	r3, r0
 80445d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80445d2:	4b08      	ldr	r3, [pc, #32]	; (80445f4 <HAL_FLASH_Program+0xa4>)
 80445d4:	691b      	ldr	r3, [r3, #16]
 80445d6:	4a07      	ldr	r2, [pc, #28]	; (80445f4 <HAL_FLASH_Program+0xa4>)
 80445d8:	f023 0301 	bic.w	r3, r3, #1
 80445dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80445de:	4b04      	ldr	r3, [pc, #16]	; (80445f0 <HAL_FLASH_Program+0xa0>)
 80445e0:	2200      	movs	r2, #0
 80445e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80445e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80445e6:	4618      	mov	r0, r3
 80445e8:	3718      	adds	r7, #24
 80445ea:	46bd      	mov	sp, r7
 80445ec:	bd80      	pop	{r7, pc}
 80445ee:	bf00      	nop
 80445f0:	2000ef70 	.word	0x2000ef70
 80445f4:	40023c00 	.word	0x40023c00

080445f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80445f8:	b480      	push	{r7}
 80445fa:	b083      	sub	sp, #12
 80445fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80445fe:	2300      	movs	r3, #0
 8044600:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8044602:	4b0b      	ldr	r3, [pc, #44]	; (8044630 <HAL_FLASH_Unlock+0x38>)
 8044604:	691b      	ldr	r3, [r3, #16]
 8044606:	2b00      	cmp	r3, #0
 8044608:	da0b      	bge.n	8044622 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 804460a:	4b09      	ldr	r3, [pc, #36]	; (8044630 <HAL_FLASH_Unlock+0x38>)
 804460c:	4a09      	ldr	r2, [pc, #36]	; (8044634 <HAL_FLASH_Unlock+0x3c>)
 804460e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8044610:	4b07      	ldr	r3, [pc, #28]	; (8044630 <HAL_FLASH_Unlock+0x38>)
 8044612:	4a09      	ldr	r2, [pc, #36]	; (8044638 <HAL_FLASH_Unlock+0x40>)
 8044614:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8044616:	4b06      	ldr	r3, [pc, #24]	; (8044630 <HAL_FLASH_Unlock+0x38>)
 8044618:	691b      	ldr	r3, [r3, #16]
 804461a:	2b00      	cmp	r3, #0
 804461c:	da01      	bge.n	8044622 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 804461e:	2301      	movs	r3, #1
 8044620:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8044622:	79fb      	ldrb	r3, [r7, #7]
}
 8044624:	4618      	mov	r0, r3
 8044626:	370c      	adds	r7, #12
 8044628:	46bd      	mov	sp, r7
 804462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804462e:	4770      	bx	lr
 8044630:	40023c00 	.word	0x40023c00
 8044634:	45670123 	.word	0x45670123
 8044638:	cdef89ab 	.word	0xcdef89ab

0804463c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 804463c:	b480      	push	{r7}
 804463e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8044640:	4b05      	ldr	r3, [pc, #20]	; (8044658 <HAL_FLASH_Lock+0x1c>)
 8044642:	691b      	ldr	r3, [r3, #16]
 8044644:	4a04      	ldr	r2, [pc, #16]	; (8044658 <HAL_FLASH_Lock+0x1c>)
 8044646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804464a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 804464c:	2300      	movs	r3, #0
}
 804464e:	4618      	mov	r0, r3
 8044650:	46bd      	mov	sp, r7
 8044652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044656:	4770      	bx	lr
 8044658:	40023c00 	.word	0x40023c00

0804465c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 804465c:	b580      	push	{r7, lr}
 804465e:	b084      	sub	sp, #16
 8044660:	af00      	add	r7, sp, #0
 8044662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8044664:	2300      	movs	r3, #0
 8044666:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8044668:	4b1a      	ldr	r3, [pc, #104]	; (80446d4 <FLASH_WaitForLastOperation+0x78>)
 804466a:	2200      	movs	r2, #0
 804466c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 804466e:	f7ff fdfb 	bl	8044268 <HAL_GetTick>
 8044672:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044674:	e010      	b.n	8044698 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8044676:	687b      	ldr	r3, [r7, #4]
 8044678:	f1b3 3fff 	cmp.w	r3, #4294967295
 804467c:	d00c      	beq.n	8044698 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 804467e:	687b      	ldr	r3, [r7, #4]
 8044680:	2b00      	cmp	r3, #0
 8044682:	d007      	beq.n	8044694 <FLASH_WaitForLastOperation+0x38>
 8044684:	f7ff fdf0 	bl	8044268 <HAL_GetTick>
 8044688:	4602      	mov	r2, r0
 804468a:	68fb      	ldr	r3, [r7, #12]
 804468c:	1ad3      	subs	r3, r2, r3
 804468e:	687a      	ldr	r2, [r7, #4]
 8044690:	429a      	cmp	r2, r3
 8044692:	d201      	bcs.n	8044698 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8044694:	2303      	movs	r3, #3
 8044696:	e019      	b.n	80446cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044698:	4b0f      	ldr	r3, [pc, #60]	; (80446d8 <FLASH_WaitForLastOperation+0x7c>)
 804469a:	68db      	ldr	r3, [r3, #12]
 804469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80446a0:	2b00      	cmp	r3, #0
 80446a2:	d1e8      	bne.n	8044676 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80446a4:	4b0c      	ldr	r3, [pc, #48]	; (80446d8 <FLASH_WaitForLastOperation+0x7c>)
 80446a6:	68db      	ldr	r3, [r3, #12]
 80446a8:	f003 0301 	and.w	r3, r3, #1
 80446ac:	2b00      	cmp	r3, #0
 80446ae:	d002      	beq.n	80446b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80446b0:	4b09      	ldr	r3, [pc, #36]	; (80446d8 <FLASH_WaitForLastOperation+0x7c>)
 80446b2:	2201      	movs	r2, #1
 80446b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80446b6:	4b08      	ldr	r3, [pc, #32]	; (80446d8 <FLASH_WaitForLastOperation+0x7c>)
 80446b8:	68db      	ldr	r3, [r3, #12]
 80446ba:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80446be:	2b00      	cmp	r3, #0
 80446c0:	d003      	beq.n	80446ca <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80446c2:	f000 f8a5 	bl	8044810 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80446c6:	2301      	movs	r3, #1
 80446c8:	e000      	b.n	80446cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80446ca:	2300      	movs	r3, #0
  
}  
 80446cc:	4618      	mov	r0, r3
 80446ce:	3710      	adds	r7, #16
 80446d0:	46bd      	mov	sp, r7
 80446d2:	bd80      	pop	{r7, pc}
 80446d4:	2000ef70 	.word	0x2000ef70
 80446d8:	40023c00 	.word	0x40023c00

080446dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80446dc:	b480      	push	{r7}
 80446de:	b085      	sub	sp, #20
 80446e0:	af00      	add	r7, sp, #0
 80446e2:	60f8      	str	r0, [r7, #12]
 80446e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80446e8:	4b14      	ldr	r3, [pc, #80]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 80446ea:	691b      	ldr	r3, [r3, #16]
 80446ec:	4a13      	ldr	r2, [pc, #76]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 80446ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80446f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80446f4:	4b11      	ldr	r3, [pc, #68]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 80446f6:	691b      	ldr	r3, [r3, #16]
 80446f8:	4a10      	ldr	r2, [pc, #64]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 80446fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80446fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044700:	4b0e      	ldr	r3, [pc, #56]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 8044702:	691b      	ldr	r3, [r3, #16]
 8044704:	4a0d      	ldr	r2, [pc, #52]	; (804473c <FLASH_Program_DoubleWord+0x60>)
 8044706:	f043 0301 	orr.w	r3, r3, #1
 804470a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 804470c:	68fb      	ldr	r3, [r7, #12]
 804470e:	683a      	ldr	r2, [r7, #0]
 8044710:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8044712:	f3bf 8f6f 	isb	sy
}
 8044716:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8044718:	e9d7 0100 	ldrd	r0, r1, [r7]
 804471c:	f04f 0200 	mov.w	r2, #0
 8044720:	f04f 0300 	mov.w	r3, #0
 8044724:	000a      	movs	r2, r1
 8044726:	2300      	movs	r3, #0
 8044728:	68f9      	ldr	r1, [r7, #12]
 804472a:	3104      	adds	r1, #4
 804472c:	4613      	mov	r3, r2
 804472e:	600b      	str	r3, [r1, #0]
}
 8044730:	bf00      	nop
 8044732:	3714      	adds	r7, #20
 8044734:	46bd      	mov	sp, r7
 8044736:	f85d 7b04 	ldr.w	r7, [sp], #4
 804473a:	4770      	bx	lr
 804473c:	40023c00 	.word	0x40023c00

08044740 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8044740:	b480      	push	{r7}
 8044742:	b083      	sub	sp, #12
 8044744:	af00      	add	r7, sp, #0
 8044746:	6078      	str	r0, [r7, #4]
 8044748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804474a:	4b0d      	ldr	r3, [pc, #52]	; (8044780 <FLASH_Program_Word+0x40>)
 804474c:	691b      	ldr	r3, [r3, #16]
 804474e:	4a0c      	ldr	r2, [pc, #48]	; (8044780 <FLASH_Program_Word+0x40>)
 8044750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8044756:	4b0a      	ldr	r3, [pc, #40]	; (8044780 <FLASH_Program_Word+0x40>)
 8044758:	691b      	ldr	r3, [r3, #16]
 804475a:	4a09      	ldr	r2, [pc, #36]	; (8044780 <FLASH_Program_Word+0x40>)
 804475c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044760:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044762:	4b07      	ldr	r3, [pc, #28]	; (8044780 <FLASH_Program_Word+0x40>)
 8044764:	691b      	ldr	r3, [r3, #16]
 8044766:	4a06      	ldr	r2, [pc, #24]	; (8044780 <FLASH_Program_Word+0x40>)
 8044768:	f043 0301 	orr.w	r3, r3, #1
 804476c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	683a      	ldr	r2, [r7, #0]
 8044772:	601a      	str	r2, [r3, #0]
}
 8044774:	bf00      	nop
 8044776:	370c      	adds	r7, #12
 8044778:	46bd      	mov	sp, r7
 804477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804477e:	4770      	bx	lr
 8044780:	40023c00 	.word	0x40023c00

08044784 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8044784:	b480      	push	{r7}
 8044786:	b083      	sub	sp, #12
 8044788:	af00      	add	r7, sp, #0
 804478a:	6078      	str	r0, [r7, #4]
 804478c:	460b      	mov	r3, r1
 804478e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044790:	4b0d      	ldr	r3, [pc, #52]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 8044792:	691b      	ldr	r3, [r3, #16]
 8044794:	4a0c      	ldr	r2, [pc, #48]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 8044796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804479a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 804479c:	4b0a      	ldr	r3, [pc, #40]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 804479e:	691b      	ldr	r3, [r3, #16]
 80447a0:	4a09      	ldr	r2, [pc, #36]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 80447a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80447a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80447a8:	4b07      	ldr	r3, [pc, #28]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 80447aa:	691b      	ldr	r3, [r3, #16]
 80447ac:	4a06      	ldr	r2, [pc, #24]	; (80447c8 <FLASH_Program_HalfWord+0x44>)
 80447ae:	f043 0301 	orr.w	r3, r3, #1
 80447b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80447b4:	687b      	ldr	r3, [r7, #4]
 80447b6:	887a      	ldrh	r2, [r7, #2]
 80447b8:	801a      	strh	r2, [r3, #0]
}
 80447ba:	bf00      	nop
 80447bc:	370c      	adds	r7, #12
 80447be:	46bd      	mov	sp, r7
 80447c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80447c4:	4770      	bx	lr
 80447c6:	bf00      	nop
 80447c8:	40023c00 	.word	0x40023c00

080447cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80447cc:	b480      	push	{r7}
 80447ce:	b083      	sub	sp, #12
 80447d0:	af00      	add	r7, sp, #0
 80447d2:	6078      	str	r0, [r7, #4]
 80447d4:	460b      	mov	r3, r1
 80447d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80447d8:	4b0c      	ldr	r3, [pc, #48]	; (804480c <FLASH_Program_Byte+0x40>)
 80447da:	691b      	ldr	r3, [r3, #16]
 80447dc:	4a0b      	ldr	r2, [pc, #44]	; (804480c <FLASH_Program_Byte+0x40>)
 80447de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80447e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80447e4:	4b09      	ldr	r3, [pc, #36]	; (804480c <FLASH_Program_Byte+0x40>)
 80447e6:	4a09      	ldr	r2, [pc, #36]	; (804480c <FLASH_Program_Byte+0x40>)
 80447e8:	691b      	ldr	r3, [r3, #16]
 80447ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80447ec:	4b07      	ldr	r3, [pc, #28]	; (804480c <FLASH_Program_Byte+0x40>)
 80447ee:	691b      	ldr	r3, [r3, #16]
 80447f0:	4a06      	ldr	r2, [pc, #24]	; (804480c <FLASH_Program_Byte+0x40>)
 80447f2:	f043 0301 	orr.w	r3, r3, #1
 80447f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80447f8:	687b      	ldr	r3, [r7, #4]
 80447fa:	78fa      	ldrb	r2, [r7, #3]
 80447fc:	701a      	strb	r2, [r3, #0]
}
 80447fe:	bf00      	nop
 8044800:	370c      	adds	r7, #12
 8044802:	46bd      	mov	sp, r7
 8044804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044808:	4770      	bx	lr
 804480a:	bf00      	nop
 804480c:	40023c00 	.word	0x40023c00

08044810 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8044810:	b480      	push	{r7}
 8044812:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8044814:	4b27      	ldr	r3, [pc, #156]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 8044816:	68db      	ldr	r3, [r3, #12]
 8044818:	f003 0310 	and.w	r3, r3, #16
 804481c:	2b00      	cmp	r3, #0
 804481e:	d008      	beq.n	8044832 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8044820:	4b25      	ldr	r3, [pc, #148]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 8044822:	69db      	ldr	r3, [r3, #28]
 8044824:	f043 0310 	orr.w	r3, r3, #16
 8044828:	4a23      	ldr	r2, [pc, #140]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 804482a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 804482c:	4b21      	ldr	r3, [pc, #132]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 804482e:	2210      	movs	r2, #16
 8044830:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8044832:	4b20      	ldr	r3, [pc, #128]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 8044834:	68db      	ldr	r3, [r3, #12]
 8044836:	f003 0320 	and.w	r3, r3, #32
 804483a:	2b00      	cmp	r3, #0
 804483c:	d008      	beq.n	8044850 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 804483e:	4b1e      	ldr	r3, [pc, #120]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 8044840:	69db      	ldr	r3, [r3, #28]
 8044842:	f043 0308 	orr.w	r3, r3, #8
 8044846:	4a1c      	ldr	r2, [pc, #112]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 8044848:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 804484a:	4b1a      	ldr	r3, [pc, #104]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 804484c:	2220      	movs	r2, #32
 804484e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8044850:	4b18      	ldr	r3, [pc, #96]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 8044852:	68db      	ldr	r3, [r3, #12]
 8044854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044858:	2b00      	cmp	r3, #0
 804485a:	d008      	beq.n	804486e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 804485c:	4b16      	ldr	r3, [pc, #88]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 804485e:	69db      	ldr	r3, [r3, #28]
 8044860:	f043 0304 	orr.w	r3, r3, #4
 8044864:	4a14      	ldr	r2, [pc, #80]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 8044866:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8044868:	4b12      	ldr	r3, [pc, #72]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 804486a:	2240      	movs	r2, #64	; 0x40
 804486c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 804486e:	4b11      	ldr	r3, [pc, #68]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 8044870:	68db      	ldr	r3, [r3, #12]
 8044872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044876:	2b00      	cmp	r3, #0
 8044878:	d008      	beq.n	804488c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 804487a:	4b0f      	ldr	r3, [pc, #60]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 804487c:	69db      	ldr	r3, [r3, #28]
 804487e:	f043 0302 	orr.w	r3, r3, #2
 8044882:	4a0d      	ldr	r2, [pc, #52]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 8044884:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8044886:	4b0b      	ldr	r3, [pc, #44]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 8044888:	2280      	movs	r2, #128	; 0x80
 804488a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 804488c:	4b09      	ldr	r3, [pc, #36]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 804488e:	68db      	ldr	r3, [r3, #12]
 8044890:	f003 0302 	and.w	r3, r3, #2
 8044894:	2b00      	cmp	r3, #0
 8044896:	d008      	beq.n	80448aa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8044898:	4b07      	ldr	r3, [pc, #28]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 804489a:	69db      	ldr	r3, [r3, #28]
 804489c:	f043 0320 	orr.w	r3, r3, #32
 80448a0:	4a05      	ldr	r2, [pc, #20]	; (80448b8 <FLASH_SetErrorCode+0xa8>)
 80448a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80448a4:	4b03      	ldr	r3, [pc, #12]	; (80448b4 <FLASH_SetErrorCode+0xa4>)
 80448a6:	2202      	movs	r2, #2
 80448a8:	60da      	str	r2, [r3, #12]
  }
}
 80448aa:	bf00      	nop
 80448ac:	46bd      	mov	sp, r7
 80448ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80448b2:	4770      	bx	lr
 80448b4:	40023c00 	.word	0x40023c00
 80448b8:	2000ef70 	.word	0x2000ef70

080448bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80448bc:	b580      	push	{r7, lr}
 80448be:	b084      	sub	sp, #16
 80448c0:	af00      	add	r7, sp, #0
 80448c2:	6078      	str	r0, [r7, #4]
 80448c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80448c6:	2301      	movs	r3, #1
 80448c8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80448ca:	2300      	movs	r3, #0
 80448cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80448ce:	4b31      	ldr	r3, [pc, #196]	; (8044994 <HAL_FLASHEx_Erase+0xd8>)
 80448d0:	7e1b      	ldrb	r3, [r3, #24]
 80448d2:	2b01      	cmp	r3, #1
 80448d4:	d101      	bne.n	80448da <HAL_FLASHEx_Erase+0x1e>
 80448d6:	2302      	movs	r3, #2
 80448d8:	e058      	b.n	804498c <HAL_FLASHEx_Erase+0xd0>
 80448da:	4b2e      	ldr	r3, [pc, #184]	; (8044994 <HAL_FLASHEx_Erase+0xd8>)
 80448dc:	2201      	movs	r2, #1
 80448de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80448e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80448e4:	f7ff feba 	bl	804465c <FLASH_WaitForLastOperation>
 80448e8:	4603      	mov	r3, r0
 80448ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80448ec:	7bfb      	ldrb	r3, [r7, #15]
 80448ee:	2b00      	cmp	r3, #0
 80448f0:	d148      	bne.n	8044984 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80448f2:	683b      	ldr	r3, [r7, #0]
 80448f4:	f04f 32ff 	mov.w	r2, #4294967295
 80448f8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80448fa:	687b      	ldr	r3, [r7, #4]
 80448fc:	681b      	ldr	r3, [r3, #0]
 80448fe:	2b01      	cmp	r3, #1
 8044900:	d115      	bne.n	804492e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8044902:	687b      	ldr	r3, [r7, #4]
 8044904:	691b      	ldr	r3, [r3, #16]
 8044906:	b2da      	uxtb	r2, r3
 8044908:	687b      	ldr	r3, [r7, #4]
 804490a:	685b      	ldr	r3, [r3, #4]
 804490c:	4619      	mov	r1, r3
 804490e:	4610      	mov	r0, r2
 8044910:	f000 f844 	bl	804499c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044918:	f7ff fea0 	bl	804465c <FLASH_WaitForLastOperation>
 804491c:	4603      	mov	r3, r0
 804491e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8044920:	4b1d      	ldr	r3, [pc, #116]	; (8044998 <HAL_FLASHEx_Erase+0xdc>)
 8044922:	691b      	ldr	r3, [r3, #16]
 8044924:	4a1c      	ldr	r2, [pc, #112]	; (8044998 <HAL_FLASHEx_Erase+0xdc>)
 8044926:	f023 0304 	bic.w	r3, r3, #4
 804492a:	6113      	str	r3, [r2, #16]
 804492c:	e028      	b.n	8044980 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804492e:	687b      	ldr	r3, [r7, #4]
 8044930:	689b      	ldr	r3, [r3, #8]
 8044932:	60bb      	str	r3, [r7, #8]
 8044934:	e01c      	b.n	8044970 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8044936:	687b      	ldr	r3, [r7, #4]
 8044938:	691b      	ldr	r3, [r3, #16]
 804493a:	b2db      	uxtb	r3, r3
 804493c:	4619      	mov	r1, r3
 804493e:	68b8      	ldr	r0, [r7, #8]
 8044940:	f000 f850 	bl	80449e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044944:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044948:	f7ff fe88 	bl	804465c <FLASH_WaitForLastOperation>
 804494c:	4603      	mov	r3, r0
 804494e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044950:	4b11      	ldr	r3, [pc, #68]	; (8044998 <HAL_FLASHEx_Erase+0xdc>)
 8044952:	691b      	ldr	r3, [r3, #16]
 8044954:	4a10      	ldr	r2, [pc, #64]	; (8044998 <HAL_FLASHEx_Erase+0xdc>)
 8044956:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804495a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 804495c:	7bfb      	ldrb	r3, [r7, #15]
 804495e:	2b00      	cmp	r3, #0
 8044960:	d003      	beq.n	804496a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8044962:	683b      	ldr	r3, [r7, #0]
 8044964:	68ba      	ldr	r2, [r7, #8]
 8044966:	601a      	str	r2, [r3, #0]
          break;
 8044968:	e00a      	b.n	8044980 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804496a:	68bb      	ldr	r3, [r7, #8]
 804496c:	3301      	adds	r3, #1
 804496e:	60bb      	str	r3, [r7, #8]
 8044970:	687b      	ldr	r3, [r7, #4]
 8044972:	68da      	ldr	r2, [r3, #12]
 8044974:	687b      	ldr	r3, [r7, #4]
 8044976:	689b      	ldr	r3, [r3, #8]
 8044978:	4413      	add	r3, r2
 804497a:	68ba      	ldr	r2, [r7, #8]
 804497c:	429a      	cmp	r2, r3
 804497e:	d3da      	bcc.n	8044936 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8044980:	f000 f878 	bl	8044a74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8044984:	4b03      	ldr	r3, [pc, #12]	; (8044994 <HAL_FLASHEx_Erase+0xd8>)
 8044986:	2200      	movs	r2, #0
 8044988:	761a      	strb	r2, [r3, #24]

  return status;
 804498a:	7bfb      	ldrb	r3, [r7, #15]
}
 804498c:	4618      	mov	r0, r3
 804498e:	3710      	adds	r7, #16
 8044990:	46bd      	mov	sp, r7
 8044992:	bd80      	pop	{r7, pc}
 8044994:	2000ef70 	.word	0x2000ef70
 8044998:	40023c00 	.word	0x40023c00

0804499c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 804499c:	b480      	push	{r7}
 804499e:	b083      	sub	sp, #12
 80449a0:	af00      	add	r7, sp, #0
 80449a2:	4603      	mov	r3, r0
 80449a4:	6039      	str	r1, [r7, #0]
 80449a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80449a8:	4b0d      	ldr	r3, [pc, #52]	; (80449e0 <FLASH_MassErase+0x44>)
 80449aa:	691b      	ldr	r3, [r3, #16]
 80449ac:	4a0c      	ldr	r2, [pc, #48]	; (80449e0 <FLASH_MassErase+0x44>)
 80449ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80449b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80449b4:	4b0a      	ldr	r3, [pc, #40]	; (80449e0 <FLASH_MassErase+0x44>)
 80449b6:	691b      	ldr	r3, [r3, #16]
 80449b8:	4a09      	ldr	r2, [pc, #36]	; (80449e0 <FLASH_MassErase+0x44>)
 80449ba:	f043 0304 	orr.w	r3, r3, #4
 80449be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80449c0:	4b07      	ldr	r3, [pc, #28]	; (80449e0 <FLASH_MassErase+0x44>)
 80449c2:	691a      	ldr	r2, [r3, #16]
 80449c4:	79fb      	ldrb	r3, [r7, #7]
 80449c6:	021b      	lsls	r3, r3, #8
 80449c8:	4313      	orrs	r3, r2
 80449ca:	4a05      	ldr	r2, [pc, #20]	; (80449e0 <FLASH_MassErase+0x44>)
 80449cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80449d0:	6113      	str	r3, [r2, #16]
}
 80449d2:	bf00      	nop
 80449d4:	370c      	adds	r7, #12
 80449d6:	46bd      	mov	sp, r7
 80449d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449dc:	4770      	bx	lr
 80449de:	bf00      	nop
 80449e0:	40023c00 	.word	0x40023c00

080449e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80449e4:	b480      	push	{r7}
 80449e6:	b085      	sub	sp, #20
 80449e8:	af00      	add	r7, sp, #0
 80449ea:	6078      	str	r0, [r7, #4]
 80449ec:	460b      	mov	r3, r1
 80449ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80449f0:	2300      	movs	r3, #0
 80449f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80449f4:	78fb      	ldrb	r3, [r7, #3]
 80449f6:	2b00      	cmp	r3, #0
 80449f8:	d102      	bne.n	8044a00 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80449fa:	2300      	movs	r3, #0
 80449fc:	60fb      	str	r3, [r7, #12]
 80449fe:	e010      	b.n	8044a22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8044a00:	78fb      	ldrb	r3, [r7, #3]
 8044a02:	2b01      	cmp	r3, #1
 8044a04:	d103      	bne.n	8044a0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8044a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044a0a:	60fb      	str	r3, [r7, #12]
 8044a0c:	e009      	b.n	8044a22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8044a0e:	78fb      	ldrb	r3, [r7, #3]
 8044a10:	2b02      	cmp	r3, #2
 8044a12:	d103      	bne.n	8044a1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8044a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044a18:	60fb      	str	r3, [r7, #12]
 8044a1a:	e002      	b.n	8044a22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8044a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8044a20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044a22:	4b13      	ldr	r3, [pc, #76]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a24:	691b      	ldr	r3, [r3, #16]
 8044a26:	4a12      	ldr	r2, [pc, #72]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8044a2e:	4b10      	ldr	r3, [pc, #64]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a30:	691a      	ldr	r2, [r3, #16]
 8044a32:	490f      	ldr	r1, [pc, #60]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a34:	68fb      	ldr	r3, [r7, #12]
 8044a36:	4313      	orrs	r3, r2
 8044a38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8044a3a:	4b0d      	ldr	r3, [pc, #52]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a3c:	691b      	ldr	r3, [r3, #16]
 8044a3e:	4a0c      	ldr	r2, [pc, #48]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8044a44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8044a46:	4b0a      	ldr	r3, [pc, #40]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a48:	691a      	ldr	r2, [r3, #16]
 8044a4a:	687b      	ldr	r3, [r7, #4]
 8044a4c:	00db      	lsls	r3, r3, #3
 8044a4e:	4313      	orrs	r3, r2
 8044a50:	4a07      	ldr	r2, [pc, #28]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a52:	f043 0302 	orr.w	r3, r3, #2
 8044a56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8044a58:	4b05      	ldr	r3, [pc, #20]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a5a:	691b      	ldr	r3, [r3, #16]
 8044a5c:	4a04      	ldr	r2, [pc, #16]	; (8044a70 <FLASH_Erase_Sector+0x8c>)
 8044a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044a62:	6113      	str	r3, [r2, #16]
}
 8044a64:	bf00      	nop
 8044a66:	3714      	adds	r7, #20
 8044a68:	46bd      	mov	sp, r7
 8044a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a6e:	4770      	bx	lr
 8044a70:	40023c00 	.word	0x40023c00

08044a74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8044a74:	b480      	push	{r7}
 8044a76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8044a78:	4b20      	ldr	r3, [pc, #128]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a7a:	681b      	ldr	r3, [r3, #0]
 8044a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044a80:	2b00      	cmp	r3, #0
 8044a82:	d017      	beq.n	8044ab4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8044a84:	4b1d      	ldr	r3, [pc, #116]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a86:	681b      	ldr	r3, [r3, #0]
 8044a88:	4a1c      	ldr	r2, [pc, #112]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8044a8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8044a90:	4b1a      	ldr	r3, [pc, #104]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a92:	681b      	ldr	r3, [r3, #0]
 8044a94:	4a19      	ldr	r2, [pc, #100]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8044a9a:	6013      	str	r3, [r2, #0]
 8044a9c:	4b17      	ldr	r3, [pc, #92]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044a9e:	681b      	ldr	r3, [r3, #0]
 8044aa0:	4a16      	ldr	r2, [pc, #88]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8044aa6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044aa8:	4b14      	ldr	r3, [pc, #80]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044aaa:	681b      	ldr	r3, [r3, #0]
 8044aac:	4a13      	ldr	r2, [pc, #76]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044ab2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8044ab4:	4b11      	ldr	r3, [pc, #68]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ab6:	681b      	ldr	r3, [r3, #0]
 8044ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044abc:	2b00      	cmp	r3, #0
 8044abe:	d017      	beq.n	8044af0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8044ac0:	4b0e      	ldr	r3, [pc, #56]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ac2:	681b      	ldr	r3, [r3, #0]
 8044ac4:	4a0d      	ldr	r2, [pc, #52]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8044aca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8044acc:	4b0b      	ldr	r3, [pc, #44]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ace:	681b      	ldr	r3, [r3, #0]
 8044ad0:	4a0a      	ldr	r2, [pc, #40]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8044ad6:	6013      	str	r3, [r2, #0]
 8044ad8:	4b08      	ldr	r3, [pc, #32]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ada:	681b      	ldr	r3, [r3, #0]
 8044adc:	4a07      	ldr	r2, [pc, #28]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8044ae2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8044ae4:	4b05      	ldr	r3, [pc, #20]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044ae6:	681b      	ldr	r3, [r3, #0]
 8044ae8:	4a04      	ldr	r2, [pc, #16]	; (8044afc <FLASH_FlushCaches+0x88>)
 8044aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8044aee:	6013      	str	r3, [r2, #0]
  }
}
 8044af0:	bf00      	nop
 8044af2:	46bd      	mov	sp, r7
 8044af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044af8:	4770      	bx	lr
 8044afa:	bf00      	nop
 8044afc:	40023c00 	.word	0x40023c00

08044b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044b00:	b480      	push	{r7}
 8044b02:	b089      	sub	sp, #36	; 0x24
 8044b04:	af00      	add	r7, sp, #0
 8044b06:	6078      	str	r0, [r7, #4]
 8044b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8044b0a:	2300      	movs	r3, #0
 8044b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8044b0e:	2300      	movs	r3, #0
 8044b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8044b12:	2300      	movs	r3, #0
 8044b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044b16:	2300      	movs	r3, #0
 8044b18:	61fb      	str	r3, [r7, #28]
 8044b1a:	e16b      	b.n	8044df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044b1c:	2201      	movs	r2, #1
 8044b1e:	69fb      	ldr	r3, [r7, #28]
 8044b20:	fa02 f303 	lsl.w	r3, r2, r3
 8044b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044b26:	683b      	ldr	r3, [r7, #0]
 8044b28:	681b      	ldr	r3, [r3, #0]
 8044b2a:	697a      	ldr	r2, [r7, #20]
 8044b2c:	4013      	ands	r3, r2
 8044b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8044b30:	693a      	ldr	r2, [r7, #16]
 8044b32:	697b      	ldr	r3, [r7, #20]
 8044b34:	429a      	cmp	r2, r3
 8044b36:	f040 815a 	bne.w	8044dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044b3a:	683b      	ldr	r3, [r7, #0]
 8044b3c:	685b      	ldr	r3, [r3, #4]
 8044b3e:	f003 0303 	and.w	r3, r3, #3
 8044b42:	2b01      	cmp	r3, #1
 8044b44:	d005      	beq.n	8044b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8044b46:	683b      	ldr	r3, [r7, #0]
 8044b48:	685b      	ldr	r3, [r3, #4]
 8044b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044b4e:	2b02      	cmp	r3, #2
 8044b50:	d130      	bne.n	8044bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8044b52:	687b      	ldr	r3, [r7, #4]
 8044b54:	689b      	ldr	r3, [r3, #8]
 8044b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044b58:	69fb      	ldr	r3, [r7, #28]
 8044b5a:	005b      	lsls	r3, r3, #1
 8044b5c:	2203      	movs	r2, #3
 8044b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8044b62:	43db      	mvns	r3, r3
 8044b64:	69ba      	ldr	r2, [r7, #24]
 8044b66:	4013      	ands	r3, r2
 8044b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8044b6a:	683b      	ldr	r3, [r7, #0]
 8044b6c:	68da      	ldr	r2, [r3, #12]
 8044b6e:	69fb      	ldr	r3, [r7, #28]
 8044b70:	005b      	lsls	r3, r3, #1
 8044b72:	fa02 f303 	lsl.w	r3, r2, r3
 8044b76:	69ba      	ldr	r2, [r7, #24]
 8044b78:	4313      	orrs	r3, r2
 8044b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8044b7c:	687b      	ldr	r3, [r7, #4]
 8044b7e:	69ba      	ldr	r2, [r7, #24]
 8044b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8044b82:	687b      	ldr	r3, [r7, #4]
 8044b84:	685b      	ldr	r3, [r3, #4]
 8044b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8044b88:	2201      	movs	r2, #1
 8044b8a:	69fb      	ldr	r3, [r7, #28]
 8044b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8044b90:	43db      	mvns	r3, r3
 8044b92:	69ba      	ldr	r2, [r7, #24]
 8044b94:	4013      	ands	r3, r2
 8044b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8044b98:	683b      	ldr	r3, [r7, #0]
 8044b9a:	685b      	ldr	r3, [r3, #4]
 8044b9c:	091b      	lsrs	r3, r3, #4
 8044b9e:	f003 0201 	and.w	r2, r3, #1
 8044ba2:	69fb      	ldr	r3, [r7, #28]
 8044ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8044ba8:	69ba      	ldr	r2, [r7, #24]
 8044baa:	4313      	orrs	r3, r2
 8044bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8044bae:	687b      	ldr	r3, [r7, #4]
 8044bb0:	69ba      	ldr	r2, [r7, #24]
 8044bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8044bb4:	683b      	ldr	r3, [r7, #0]
 8044bb6:	685b      	ldr	r3, [r3, #4]
 8044bb8:	f003 0303 	and.w	r3, r3, #3
 8044bbc:	2b03      	cmp	r3, #3
 8044bbe:	d017      	beq.n	8044bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8044bc0:	687b      	ldr	r3, [r7, #4]
 8044bc2:	68db      	ldr	r3, [r3, #12]
 8044bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8044bc6:	69fb      	ldr	r3, [r7, #28]
 8044bc8:	005b      	lsls	r3, r3, #1
 8044bca:	2203      	movs	r2, #3
 8044bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8044bd0:	43db      	mvns	r3, r3
 8044bd2:	69ba      	ldr	r2, [r7, #24]
 8044bd4:	4013      	ands	r3, r2
 8044bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8044bd8:	683b      	ldr	r3, [r7, #0]
 8044bda:	689a      	ldr	r2, [r3, #8]
 8044bdc:	69fb      	ldr	r3, [r7, #28]
 8044bde:	005b      	lsls	r3, r3, #1
 8044be0:	fa02 f303 	lsl.w	r3, r2, r3
 8044be4:	69ba      	ldr	r2, [r7, #24]
 8044be6:	4313      	orrs	r3, r2
 8044be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8044bea:	687b      	ldr	r3, [r7, #4]
 8044bec:	69ba      	ldr	r2, [r7, #24]
 8044bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8044bf0:	683b      	ldr	r3, [r7, #0]
 8044bf2:	685b      	ldr	r3, [r3, #4]
 8044bf4:	f003 0303 	and.w	r3, r3, #3
 8044bf8:	2b02      	cmp	r3, #2
 8044bfa:	d123      	bne.n	8044c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8044bfc:	69fb      	ldr	r3, [r7, #28]
 8044bfe:	08da      	lsrs	r2, r3, #3
 8044c00:	687b      	ldr	r3, [r7, #4]
 8044c02:	3208      	adds	r2, #8
 8044c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8044c0a:	69fb      	ldr	r3, [r7, #28]
 8044c0c:	f003 0307 	and.w	r3, r3, #7
 8044c10:	009b      	lsls	r3, r3, #2
 8044c12:	220f      	movs	r2, #15
 8044c14:	fa02 f303 	lsl.w	r3, r2, r3
 8044c18:	43db      	mvns	r3, r3
 8044c1a:	69ba      	ldr	r2, [r7, #24]
 8044c1c:	4013      	ands	r3, r2
 8044c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8044c20:	683b      	ldr	r3, [r7, #0]
 8044c22:	691a      	ldr	r2, [r3, #16]
 8044c24:	69fb      	ldr	r3, [r7, #28]
 8044c26:	f003 0307 	and.w	r3, r3, #7
 8044c2a:	009b      	lsls	r3, r3, #2
 8044c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8044c30:	69ba      	ldr	r2, [r7, #24]
 8044c32:	4313      	orrs	r3, r2
 8044c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8044c36:	69fb      	ldr	r3, [r7, #28]
 8044c38:	08da      	lsrs	r2, r3, #3
 8044c3a:	687b      	ldr	r3, [r7, #4]
 8044c3c:	3208      	adds	r2, #8
 8044c3e:	69b9      	ldr	r1, [r7, #24]
 8044c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044c44:	687b      	ldr	r3, [r7, #4]
 8044c46:	681b      	ldr	r3, [r3, #0]
 8044c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8044c4a:	69fb      	ldr	r3, [r7, #28]
 8044c4c:	005b      	lsls	r3, r3, #1
 8044c4e:	2203      	movs	r2, #3
 8044c50:	fa02 f303 	lsl.w	r3, r2, r3
 8044c54:	43db      	mvns	r3, r3
 8044c56:	69ba      	ldr	r2, [r7, #24]
 8044c58:	4013      	ands	r3, r2
 8044c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044c5c:	683b      	ldr	r3, [r7, #0]
 8044c5e:	685b      	ldr	r3, [r3, #4]
 8044c60:	f003 0203 	and.w	r2, r3, #3
 8044c64:	69fb      	ldr	r3, [r7, #28]
 8044c66:	005b      	lsls	r3, r3, #1
 8044c68:	fa02 f303 	lsl.w	r3, r2, r3
 8044c6c:	69ba      	ldr	r2, [r7, #24]
 8044c6e:	4313      	orrs	r3, r2
 8044c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8044c72:	687b      	ldr	r3, [r7, #4]
 8044c74:	69ba      	ldr	r2, [r7, #24]
 8044c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8044c78:	683b      	ldr	r3, [r7, #0]
 8044c7a:	685b      	ldr	r3, [r3, #4]
 8044c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8044c80:	2b00      	cmp	r3, #0
 8044c82:	f000 80b4 	beq.w	8044dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044c86:	2300      	movs	r3, #0
 8044c88:	60fb      	str	r3, [r7, #12]
 8044c8a:	4b60      	ldr	r3, [pc, #384]	; (8044e0c <HAL_GPIO_Init+0x30c>)
 8044c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044c8e:	4a5f      	ldr	r2, [pc, #380]	; (8044e0c <HAL_GPIO_Init+0x30c>)
 8044c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8044c94:	6453      	str	r3, [r2, #68]	; 0x44
 8044c96:	4b5d      	ldr	r3, [pc, #372]	; (8044e0c <HAL_GPIO_Init+0x30c>)
 8044c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044c9e:	60fb      	str	r3, [r7, #12]
 8044ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8044ca2:	4a5b      	ldr	r2, [pc, #364]	; (8044e10 <HAL_GPIO_Init+0x310>)
 8044ca4:	69fb      	ldr	r3, [r7, #28]
 8044ca6:	089b      	lsrs	r3, r3, #2
 8044ca8:	3302      	adds	r3, #2
 8044caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8044cb0:	69fb      	ldr	r3, [r7, #28]
 8044cb2:	f003 0303 	and.w	r3, r3, #3
 8044cb6:	009b      	lsls	r3, r3, #2
 8044cb8:	220f      	movs	r2, #15
 8044cba:	fa02 f303 	lsl.w	r3, r2, r3
 8044cbe:	43db      	mvns	r3, r3
 8044cc0:	69ba      	ldr	r2, [r7, #24]
 8044cc2:	4013      	ands	r3, r2
 8044cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044cc6:	687b      	ldr	r3, [r7, #4]
 8044cc8:	4a52      	ldr	r2, [pc, #328]	; (8044e14 <HAL_GPIO_Init+0x314>)
 8044cca:	4293      	cmp	r3, r2
 8044ccc:	d02b      	beq.n	8044d26 <HAL_GPIO_Init+0x226>
 8044cce:	687b      	ldr	r3, [r7, #4]
 8044cd0:	4a51      	ldr	r2, [pc, #324]	; (8044e18 <HAL_GPIO_Init+0x318>)
 8044cd2:	4293      	cmp	r3, r2
 8044cd4:	d025      	beq.n	8044d22 <HAL_GPIO_Init+0x222>
 8044cd6:	687b      	ldr	r3, [r7, #4]
 8044cd8:	4a50      	ldr	r2, [pc, #320]	; (8044e1c <HAL_GPIO_Init+0x31c>)
 8044cda:	4293      	cmp	r3, r2
 8044cdc:	d01f      	beq.n	8044d1e <HAL_GPIO_Init+0x21e>
 8044cde:	687b      	ldr	r3, [r7, #4]
 8044ce0:	4a4f      	ldr	r2, [pc, #316]	; (8044e20 <HAL_GPIO_Init+0x320>)
 8044ce2:	4293      	cmp	r3, r2
 8044ce4:	d019      	beq.n	8044d1a <HAL_GPIO_Init+0x21a>
 8044ce6:	687b      	ldr	r3, [r7, #4]
 8044ce8:	4a4e      	ldr	r2, [pc, #312]	; (8044e24 <HAL_GPIO_Init+0x324>)
 8044cea:	4293      	cmp	r3, r2
 8044cec:	d013      	beq.n	8044d16 <HAL_GPIO_Init+0x216>
 8044cee:	687b      	ldr	r3, [r7, #4]
 8044cf0:	4a4d      	ldr	r2, [pc, #308]	; (8044e28 <HAL_GPIO_Init+0x328>)
 8044cf2:	4293      	cmp	r3, r2
 8044cf4:	d00d      	beq.n	8044d12 <HAL_GPIO_Init+0x212>
 8044cf6:	687b      	ldr	r3, [r7, #4]
 8044cf8:	4a4c      	ldr	r2, [pc, #304]	; (8044e2c <HAL_GPIO_Init+0x32c>)
 8044cfa:	4293      	cmp	r3, r2
 8044cfc:	d007      	beq.n	8044d0e <HAL_GPIO_Init+0x20e>
 8044cfe:	687b      	ldr	r3, [r7, #4]
 8044d00:	4a4b      	ldr	r2, [pc, #300]	; (8044e30 <HAL_GPIO_Init+0x330>)
 8044d02:	4293      	cmp	r3, r2
 8044d04:	d101      	bne.n	8044d0a <HAL_GPIO_Init+0x20a>
 8044d06:	2307      	movs	r3, #7
 8044d08:	e00e      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d0a:	2308      	movs	r3, #8
 8044d0c:	e00c      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d0e:	2306      	movs	r3, #6
 8044d10:	e00a      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d12:	2305      	movs	r3, #5
 8044d14:	e008      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d16:	2304      	movs	r3, #4
 8044d18:	e006      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d1a:	2303      	movs	r3, #3
 8044d1c:	e004      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d1e:	2302      	movs	r3, #2
 8044d20:	e002      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d22:	2301      	movs	r3, #1
 8044d24:	e000      	b.n	8044d28 <HAL_GPIO_Init+0x228>
 8044d26:	2300      	movs	r3, #0
 8044d28:	69fa      	ldr	r2, [r7, #28]
 8044d2a:	f002 0203 	and.w	r2, r2, #3
 8044d2e:	0092      	lsls	r2, r2, #2
 8044d30:	4093      	lsls	r3, r2
 8044d32:	69ba      	ldr	r2, [r7, #24]
 8044d34:	4313      	orrs	r3, r2
 8044d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8044d38:	4935      	ldr	r1, [pc, #212]	; (8044e10 <HAL_GPIO_Init+0x310>)
 8044d3a:	69fb      	ldr	r3, [r7, #28]
 8044d3c:	089b      	lsrs	r3, r3, #2
 8044d3e:	3302      	adds	r3, #2
 8044d40:	69ba      	ldr	r2, [r7, #24]
 8044d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044d46:	4b3b      	ldr	r3, [pc, #236]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044d48:	681b      	ldr	r3, [r3, #0]
 8044d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044d4c:	693b      	ldr	r3, [r7, #16]
 8044d4e:	43db      	mvns	r3, r3
 8044d50:	69ba      	ldr	r2, [r7, #24]
 8044d52:	4013      	ands	r3, r2
 8044d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8044d56:	683b      	ldr	r3, [r7, #0]
 8044d58:	685b      	ldr	r3, [r3, #4]
 8044d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044d5e:	2b00      	cmp	r3, #0
 8044d60:	d003      	beq.n	8044d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8044d62:	69ba      	ldr	r2, [r7, #24]
 8044d64:	693b      	ldr	r3, [r7, #16]
 8044d66:	4313      	orrs	r3, r2
 8044d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8044d6a:	4a32      	ldr	r2, [pc, #200]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044d6c:	69bb      	ldr	r3, [r7, #24]
 8044d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8044d70:	4b30      	ldr	r3, [pc, #192]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044d72:	685b      	ldr	r3, [r3, #4]
 8044d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044d76:	693b      	ldr	r3, [r7, #16]
 8044d78:	43db      	mvns	r3, r3
 8044d7a:	69ba      	ldr	r2, [r7, #24]
 8044d7c:	4013      	ands	r3, r2
 8044d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8044d80:	683b      	ldr	r3, [r7, #0]
 8044d82:	685b      	ldr	r3, [r3, #4]
 8044d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044d88:	2b00      	cmp	r3, #0
 8044d8a:	d003      	beq.n	8044d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8044d8c:	69ba      	ldr	r2, [r7, #24]
 8044d8e:	693b      	ldr	r3, [r7, #16]
 8044d90:	4313      	orrs	r3, r2
 8044d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8044d94:	4a27      	ldr	r2, [pc, #156]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044d96:	69bb      	ldr	r3, [r7, #24]
 8044d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8044d9a:	4b26      	ldr	r3, [pc, #152]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044d9c:	689b      	ldr	r3, [r3, #8]
 8044d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044da0:	693b      	ldr	r3, [r7, #16]
 8044da2:	43db      	mvns	r3, r3
 8044da4:	69ba      	ldr	r2, [r7, #24]
 8044da6:	4013      	ands	r3, r2
 8044da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8044daa:	683b      	ldr	r3, [r7, #0]
 8044dac:	685b      	ldr	r3, [r3, #4]
 8044dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044db2:	2b00      	cmp	r3, #0
 8044db4:	d003      	beq.n	8044dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8044db6:	69ba      	ldr	r2, [r7, #24]
 8044db8:	693b      	ldr	r3, [r7, #16]
 8044dba:	4313      	orrs	r3, r2
 8044dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8044dbe:	4a1d      	ldr	r2, [pc, #116]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044dc0:	69bb      	ldr	r3, [r7, #24]
 8044dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8044dc4:	4b1b      	ldr	r3, [pc, #108]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044dc6:	68db      	ldr	r3, [r3, #12]
 8044dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044dca:	693b      	ldr	r3, [r7, #16]
 8044dcc:	43db      	mvns	r3, r3
 8044dce:	69ba      	ldr	r2, [r7, #24]
 8044dd0:	4013      	ands	r3, r2
 8044dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8044dd4:	683b      	ldr	r3, [r7, #0]
 8044dd6:	685b      	ldr	r3, [r3, #4]
 8044dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044ddc:	2b00      	cmp	r3, #0
 8044dde:	d003      	beq.n	8044de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8044de0:	69ba      	ldr	r2, [r7, #24]
 8044de2:	693b      	ldr	r3, [r7, #16]
 8044de4:	4313      	orrs	r3, r2
 8044de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8044de8:	4a12      	ldr	r2, [pc, #72]	; (8044e34 <HAL_GPIO_Init+0x334>)
 8044dea:	69bb      	ldr	r3, [r7, #24]
 8044dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044dee:	69fb      	ldr	r3, [r7, #28]
 8044df0:	3301      	adds	r3, #1
 8044df2:	61fb      	str	r3, [r7, #28]
 8044df4:	69fb      	ldr	r3, [r7, #28]
 8044df6:	2b0f      	cmp	r3, #15
 8044df8:	f67f ae90 	bls.w	8044b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8044dfc:	bf00      	nop
 8044dfe:	bf00      	nop
 8044e00:	3724      	adds	r7, #36	; 0x24
 8044e02:	46bd      	mov	sp, r7
 8044e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e08:	4770      	bx	lr
 8044e0a:	bf00      	nop
 8044e0c:	40023800 	.word	0x40023800
 8044e10:	40013800 	.word	0x40013800
 8044e14:	40020000 	.word	0x40020000
 8044e18:	40020400 	.word	0x40020400
 8044e1c:	40020800 	.word	0x40020800
 8044e20:	40020c00 	.word	0x40020c00
 8044e24:	40021000 	.word	0x40021000
 8044e28:	40021400 	.word	0x40021400
 8044e2c:	40021800 	.word	0x40021800
 8044e30:	40021c00 	.word	0x40021c00
 8044e34:	40013c00 	.word	0x40013c00

08044e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044e38:	b480      	push	{r7}
 8044e3a:	b083      	sub	sp, #12
 8044e3c:	af00      	add	r7, sp, #0
 8044e3e:	6078      	str	r0, [r7, #4]
 8044e40:	460b      	mov	r3, r1
 8044e42:	807b      	strh	r3, [r7, #2]
 8044e44:	4613      	mov	r3, r2
 8044e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044e48:	787b      	ldrb	r3, [r7, #1]
 8044e4a:	2b00      	cmp	r3, #0
 8044e4c:	d003      	beq.n	8044e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8044e4e:	887a      	ldrh	r2, [r7, #2]
 8044e50:	687b      	ldr	r3, [r7, #4]
 8044e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044e54:	e003      	b.n	8044e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044e56:	887b      	ldrh	r3, [r7, #2]
 8044e58:	041a      	lsls	r2, r3, #16
 8044e5a:	687b      	ldr	r3, [r7, #4]
 8044e5c:	619a      	str	r2, [r3, #24]
}
 8044e5e:	bf00      	nop
 8044e60:	370c      	adds	r7, #12
 8044e62:	46bd      	mov	sp, r7
 8044e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e68:	4770      	bx	lr

08044e6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8044e6a:	b480      	push	{r7}
 8044e6c:	b085      	sub	sp, #20
 8044e6e:	af00      	add	r7, sp, #0
 8044e70:	6078      	str	r0, [r7, #4]
 8044e72:	460b      	mov	r3, r1
 8044e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8044e76:	687b      	ldr	r3, [r7, #4]
 8044e78:	695b      	ldr	r3, [r3, #20]
 8044e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8044e7c:	887a      	ldrh	r2, [r7, #2]
 8044e7e:	68fb      	ldr	r3, [r7, #12]
 8044e80:	4013      	ands	r3, r2
 8044e82:	041a      	lsls	r2, r3, #16
 8044e84:	68fb      	ldr	r3, [r7, #12]
 8044e86:	43d9      	mvns	r1, r3
 8044e88:	887b      	ldrh	r3, [r7, #2]
 8044e8a:	400b      	ands	r3, r1
 8044e8c:	431a      	orrs	r2, r3
 8044e8e:	687b      	ldr	r3, [r7, #4]
 8044e90:	619a      	str	r2, [r3, #24]
}
 8044e92:	bf00      	nop
 8044e94:	3714      	adds	r7, #20
 8044e96:	46bd      	mov	sp, r7
 8044e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e9c:	4770      	bx	lr
	...

08044ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8044ea0:	b580      	push	{r7, lr}
 8044ea2:	b082      	sub	sp, #8
 8044ea4:	af00      	add	r7, sp, #0
 8044ea6:	4603      	mov	r3, r0
 8044ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8044eaa:	4b08      	ldr	r3, [pc, #32]	; (8044ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044eac:	695a      	ldr	r2, [r3, #20]
 8044eae:	88fb      	ldrh	r3, [r7, #6]
 8044eb0:	4013      	ands	r3, r2
 8044eb2:	2b00      	cmp	r3, #0
 8044eb4:	d006      	beq.n	8044ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8044eb6:	4a05      	ldr	r2, [pc, #20]	; (8044ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044eb8:	88fb      	ldrh	r3, [r7, #6]
 8044eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8044ebc:	88fb      	ldrh	r3, [r7, #6]
 8044ebe:	4618      	mov	r0, r3
 8044ec0:	f000 f806 	bl	8044ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8044ec4:	bf00      	nop
 8044ec6:	3708      	adds	r7, #8
 8044ec8:	46bd      	mov	sp, r7
 8044eca:	bd80      	pop	{r7, pc}
 8044ecc:	40013c00 	.word	0x40013c00

08044ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8044ed0:	b480      	push	{r7}
 8044ed2:	b083      	sub	sp, #12
 8044ed4:	af00      	add	r7, sp, #0
 8044ed6:	4603      	mov	r3, r0
 8044ed8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8044eda:	bf00      	nop
 8044edc:	370c      	adds	r7, #12
 8044ede:	46bd      	mov	sp, r7
 8044ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ee4:	4770      	bx	lr
	...

08044ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8044ee8:	b580      	push	{r7, lr}
 8044eea:	b084      	sub	sp, #16
 8044eec:	af00      	add	r7, sp, #0
 8044eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8044ef0:	687b      	ldr	r3, [r7, #4]
 8044ef2:	2b00      	cmp	r3, #0
 8044ef4:	d101      	bne.n	8044efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8044ef6:	2301      	movs	r3, #1
 8044ef8:	e12b      	b.n	8045152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8044efa:	687b      	ldr	r3, [r7, #4]
 8044efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044f00:	b2db      	uxtb	r3, r3
 8044f02:	2b00      	cmp	r3, #0
 8044f04:	d106      	bne.n	8044f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8044f06:	687b      	ldr	r3, [r7, #4]
 8044f08:	2200      	movs	r2, #0
 8044f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8044f0e:	6878      	ldr	r0, [r7, #4]
 8044f10:	f7fe fe3a 	bl	8043b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8044f14:	687b      	ldr	r3, [r7, #4]
 8044f16:	2224      	movs	r2, #36	; 0x24
 8044f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8044f1c:	687b      	ldr	r3, [r7, #4]
 8044f1e:	681b      	ldr	r3, [r3, #0]
 8044f20:	681a      	ldr	r2, [r3, #0]
 8044f22:	687b      	ldr	r3, [r7, #4]
 8044f24:	681b      	ldr	r3, [r3, #0]
 8044f26:	f022 0201 	bic.w	r2, r2, #1
 8044f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8044f2c:	687b      	ldr	r3, [r7, #4]
 8044f2e:	681b      	ldr	r3, [r3, #0]
 8044f30:	681a      	ldr	r2, [r3, #0]
 8044f32:	687b      	ldr	r3, [r7, #4]
 8044f34:	681b      	ldr	r3, [r3, #0]
 8044f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8044f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8044f3c:	687b      	ldr	r3, [r7, #4]
 8044f3e:	681b      	ldr	r3, [r3, #0]
 8044f40:	681a      	ldr	r2, [r3, #0]
 8044f42:	687b      	ldr	r3, [r7, #4]
 8044f44:	681b      	ldr	r3, [r3, #0]
 8044f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8044f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8044f4c:	f001 f864 	bl	8046018 <HAL_RCC_GetPCLK1Freq>
 8044f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044f52:	687b      	ldr	r3, [r7, #4]
 8044f54:	685b      	ldr	r3, [r3, #4]
 8044f56:	4a81      	ldr	r2, [pc, #516]	; (804515c <HAL_I2C_Init+0x274>)
 8044f58:	4293      	cmp	r3, r2
 8044f5a:	d807      	bhi.n	8044f6c <HAL_I2C_Init+0x84>
 8044f5c:	68fb      	ldr	r3, [r7, #12]
 8044f5e:	4a80      	ldr	r2, [pc, #512]	; (8045160 <HAL_I2C_Init+0x278>)
 8044f60:	4293      	cmp	r3, r2
 8044f62:	bf94      	ite	ls
 8044f64:	2301      	movls	r3, #1
 8044f66:	2300      	movhi	r3, #0
 8044f68:	b2db      	uxtb	r3, r3
 8044f6a:	e006      	b.n	8044f7a <HAL_I2C_Init+0x92>
 8044f6c:	68fb      	ldr	r3, [r7, #12]
 8044f6e:	4a7d      	ldr	r2, [pc, #500]	; (8045164 <HAL_I2C_Init+0x27c>)
 8044f70:	4293      	cmp	r3, r2
 8044f72:	bf94      	ite	ls
 8044f74:	2301      	movls	r3, #1
 8044f76:	2300      	movhi	r3, #0
 8044f78:	b2db      	uxtb	r3, r3
 8044f7a:	2b00      	cmp	r3, #0
 8044f7c:	d001      	beq.n	8044f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8044f7e:	2301      	movs	r3, #1
 8044f80:	e0e7      	b.n	8045152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8044f82:	68fb      	ldr	r3, [r7, #12]
 8044f84:	4a78      	ldr	r2, [pc, #480]	; (8045168 <HAL_I2C_Init+0x280>)
 8044f86:	fba2 2303 	umull	r2, r3, r2, r3
 8044f8a:	0c9b      	lsrs	r3, r3, #18
 8044f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044f8e:	687b      	ldr	r3, [r7, #4]
 8044f90:	681b      	ldr	r3, [r3, #0]
 8044f92:	685b      	ldr	r3, [r3, #4]
 8044f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8044f98:	687b      	ldr	r3, [r7, #4]
 8044f9a:	681b      	ldr	r3, [r3, #0]
 8044f9c:	68ba      	ldr	r2, [r7, #8]
 8044f9e:	430a      	orrs	r2, r1
 8044fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044fa2:	687b      	ldr	r3, [r7, #4]
 8044fa4:	681b      	ldr	r3, [r3, #0]
 8044fa6:	6a1b      	ldr	r3, [r3, #32]
 8044fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8044fac:	687b      	ldr	r3, [r7, #4]
 8044fae:	685b      	ldr	r3, [r3, #4]
 8044fb0:	4a6a      	ldr	r2, [pc, #424]	; (804515c <HAL_I2C_Init+0x274>)
 8044fb2:	4293      	cmp	r3, r2
 8044fb4:	d802      	bhi.n	8044fbc <HAL_I2C_Init+0xd4>
 8044fb6:	68bb      	ldr	r3, [r7, #8]
 8044fb8:	3301      	adds	r3, #1
 8044fba:	e009      	b.n	8044fd0 <HAL_I2C_Init+0xe8>
 8044fbc:	68bb      	ldr	r3, [r7, #8]
 8044fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8044fc2:	fb02 f303 	mul.w	r3, r2, r3
 8044fc6:	4a69      	ldr	r2, [pc, #420]	; (804516c <HAL_I2C_Init+0x284>)
 8044fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8044fcc:	099b      	lsrs	r3, r3, #6
 8044fce:	3301      	adds	r3, #1
 8044fd0:	687a      	ldr	r2, [r7, #4]
 8044fd2:	6812      	ldr	r2, [r2, #0]
 8044fd4:	430b      	orrs	r3, r1
 8044fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044fd8:	687b      	ldr	r3, [r7, #4]
 8044fda:	681b      	ldr	r3, [r3, #0]
 8044fdc:	69db      	ldr	r3, [r3, #28]
 8044fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8044fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8044fe6:	687b      	ldr	r3, [r7, #4]
 8044fe8:	685b      	ldr	r3, [r3, #4]
 8044fea:	495c      	ldr	r1, [pc, #368]	; (804515c <HAL_I2C_Init+0x274>)
 8044fec:	428b      	cmp	r3, r1
 8044fee:	d819      	bhi.n	8045024 <HAL_I2C_Init+0x13c>
 8044ff0:	68fb      	ldr	r3, [r7, #12]
 8044ff2:	1e59      	subs	r1, r3, #1
 8044ff4:	687b      	ldr	r3, [r7, #4]
 8044ff6:	685b      	ldr	r3, [r3, #4]
 8044ff8:	005b      	lsls	r3, r3, #1
 8044ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8044ffe:	1c59      	adds	r1, r3, #1
 8045000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8045004:	400b      	ands	r3, r1
 8045006:	2b00      	cmp	r3, #0
 8045008:	d00a      	beq.n	8045020 <HAL_I2C_Init+0x138>
 804500a:	68fb      	ldr	r3, [r7, #12]
 804500c:	1e59      	subs	r1, r3, #1
 804500e:	687b      	ldr	r3, [r7, #4]
 8045010:	685b      	ldr	r3, [r3, #4]
 8045012:	005b      	lsls	r3, r3, #1
 8045014:	fbb1 f3f3 	udiv	r3, r1, r3
 8045018:	3301      	adds	r3, #1
 804501a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804501e:	e051      	b.n	80450c4 <HAL_I2C_Init+0x1dc>
 8045020:	2304      	movs	r3, #4
 8045022:	e04f      	b.n	80450c4 <HAL_I2C_Init+0x1dc>
 8045024:	687b      	ldr	r3, [r7, #4]
 8045026:	689b      	ldr	r3, [r3, #8]
 8045028:	2b00      	cmp	r3, #0
 804502a:	d111      	bne.n	8045050 <HAL_I2C_Init+0x168>
 804502c:	68fb      	ldr	r3, [r7, #12]
 804502e:	1e58      	subs	r0, r3, #1
 8045030:	687b      	ldr	r3, [r7, #4]
 8045032:	6859      	ldr	r1, [r3, #4]
 8045034:	460b      	mov	r3, r1
 8045036:	005b      	lsls	r3, r3, #1
 8045038:	440b      	add	r3, r1
 804503a:	fbb0 f3f3 	udiv	r3, r0, r3
 804503e:	3301      	adds	r3, #1
 8045040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045044:	2b00      	cmp	r3, #0
 8045046:	bf0c      	ite	eq
 8045048:	2301      	moveq	r3, #1
 804504a:	2300      	movne	r3, #0
 804504c:	b2db      	uxtb	r3, r3
 804504e:	e012      	b.n	8045076 <HAL_I2C_Init+0x18e>
 8045050:	68fb      	ldr	r3, [r7, #12]
 8045052:	1e58      	subs	r0, r3, #1
 8045054:	687b      	ldr	r3, [r7, #4]
 8045056:	6859      	ldr	r1, [r3, #4]
 8045058:	460b      	mov	r3, r1
 804505a:	009b      	lsls	r3, r3, #2
 804505c:	440b      	add	r3, r1
 804505e:	0099      	lsls	r1, r3, #2
 8045060:	440b      	add	r3, r1
 8045062:	fbb0 f3f3 	udiv	r3, r0, r3
 8045066:	3301      	adds	r3, #1
 8045068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804506c:	2b00      	cmp	r3, #0
 804506e:	bf0c      	ite	eq
 8045070:	2301      	moveq	r3, #1
 8045072:	2300      	movne	r3, #0
 8045074:	b2db      	uxtb	r3, r3
 8045076:	2b00      	cmp	r3, #0
 8045078:	d001      	beq.n	804507e <HAL_I2C_Init+0x196>
 804507a:	2301      	movs	r3, #1
 804507c:	e022      	b.n	80450c4 <HAL_I2C_Init+0x1dc>
 804507e:	687b      	ldr	r3, [r7, #4]
 8045080:	689b      	ldr	r3, [r3, #8]
 8045082:	2b00      	cmp	r3, #0
 8045084:	d10e      	bne.n	80450a4 <HAL_I2C_Init+0x1bc>
 8045086:	68fb      	ldr	r3, [r7, #12]
 8045088:	1e58      	subs	r0, r3, #1
 804508a:	687b      	ldr	r3, [r7, #4]
 804508c:	6859      	ldr	r1, [r3, #4]
 804508e:	460b      	mov	r3, r1
 8045090:	005b      	lsls	r3, r3, #1
 8045092:	440b      	add	r3, r1
 8045094:	fbb0 f3f3 	udiv	r3, r0, r3
 8045098:	3301      	adds	r3, #1
 804509a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80450a2:	e00f      	b.n	80450c4 <HAL_I2C_Init+0x1dc>
 80450a4:	68fb      	ldr	r3, [r7, #12]
 80450a6:	1e58      	subs	r0, r3, #1
 80450a8:	687b      	ldr	r3, [r7, #4]
 80450aa:	6859      	ldr	r1, [r3, #4]
 80450ac:	460b      	mov	r3, r1
 80450ae:	009b      	lsls	r3, r3, #2
 80450b0:	440b      	add	r3, r1
 80450b2:	0099      	lsls	r1, r3, #2
 80450b4:	440b      	add	r3, r1
 80450b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80450ba:	3301      	adds	r3, #1
 80450bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80450c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80450c4:	6879      	ldr	r1, [r7, #4]
 80450c6:	6809      	ldr	r1, [r1, #0]
 80450c8:	4313      	orrs	r3, r2
 80450ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80450cc:	687b      	ldr	r3, [r7, #4]
 80450ce:	681b      	ldr	r3, [r3, #0]
 80450d0:	681b      	ldr	r3, [r3, #0]
 80450d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80450d6:	687b      	ldr	r3, [r7, #4]
 80450d8:	69da      	ldr	r2, [r3, #28]
 80450da:	687b      	ldr	r3, [r7, #4]
 80450dc:	6a1b      	ldr	r3, [r3, #32]
 80450de:	431a      	orrs	r2, r3
 80450e0:	687b      	ldr	r3, [r7, #4]
 80450e2:	681b      	ldr	r3, [r3, #0]
 80450e4:	430a      	orrs	r2, r1
 80450e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80450e8:	687b      	ldr	r3, [r7, #4]
 80450ea:	681b      	ldr	r3, [r3, #0]
 80450ec:	689b      	ldr	r3, [r3, #8]
 80450ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80450f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80450f6:	687a      	ldr	r2, [r7, #4]
 80450f8:	6911      	ldr	r1, [r2, #16]
 80450fa:	687a      	ldr	r2, [r7, #4]
 80450fc:	68d2      	ldr	r2, [r2, #12]
 80450fe:	4311      	orrs	r1, r2
 8045100:	687a      	ldr	r2, [r7, #4]
 8045102:	6812      	ldr	r2, [r2, #0]
 8045104:	430b      	orrs	r3, r1
 8045106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	681b      	ldr	r3, [r3, #0]
 804510c:	68db      	ldr	r3, [r3, #12]
 804510e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045112:	687b      	ldr	r3, [r7, #4]
 8045114:	695a      	ldr	r2, [r3, #20]
 8045116:	687b      	ldr	r3, [r7, #4]
 8045118:	699b      	ldr	r3, [r3, #24]
 804511a:	431a      	orrs	r2, r3
 804511c:	687b      	ldr	r3, [r7, #4]
 804511e:	681b      	ldr	r3, [r3, #0]
 8045120:	430a      	orrs	r2, r1
 8045122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045124:	687b      	ldr	r3, [r7, #4]
 8045126:	681b      	ldr	r3, [r3, #0]
 8045128:	681a      	ldr	r2, [r3, #0]
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	681b      	ldr	r3, [r3, #0]
 804512e:	f042 0201 	orr.w	r2, r2, #1
 8045132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045134:	687b      	ldr	r3, [r7, #4]
 8045136:	2200      	movs	r2, #0
 8045138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 804513a:	687b      	ldr	r3, [r7, #4]
 804513c:	2220      	movs	r2, #32
 804513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045142:	687b      	ldr	r3, [r7, #4]
 8045144:	2200      	movs	r2, #0
 8045146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045148:	687b      	ldr	r3, [r7, #4]
 804514a:	2200      	movs	r2, #0
 804514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045150:	2300      	movs	r3, #0
}
 8045152:	4618      	mov	r0, r3
 8045154:	3710      	adds	r7, #16
 8045156:	46bd      	mov	sp, r7
 8045158:	bd80      	pop	{r7, pc}
 804515a:	bf00      	nop
 804515c:	000186a0 	.word	0x000186a0
 8045160:	001e847f 	.word	0x001e847f
 8045164:	003d08ff 	.word	0x003d08ff
 8045168:	431bde83 	.word	0x431bde83
 804516c:	10624dd3 	.word	0x10624dd3

08045170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8045170:	b580      	push	{r7, lr}
 8045172:	b088      	sub	sp, #32
 8045174:	af02      	add	r7, sp, #8
 8045176:	60f8      	str	r0, [r7, #12]
 8045178:	607a      	str	r2, [r7, #4]
 804517a:	461a      	mov	r2, r3
 804517c:	460b      	mov	r3, r1
 804517e:	817b      	strh	r3, [r7, #10]
 8045180:	4613      	mov	r3, r2
 8045182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8045184:	f7ff f870 	bl	8044268 <HAL_GetTick>
 8045188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 804518a:	68fb      	ldr	r3, [r7, #12]
 804518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045190:	b2db      	uxtb	r3, r3
 8045192:	2b20      	cmp	r3, #32
 8045194:	f040 80e0 	bne.w	8045358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8045198:	697b      	ldr	r3, [r7, #20]
 804519a:	9300      	str	r3, [sp, #0]
 804519c:	2319      	movs	r3, #25
 804519e:	2201      	movs	r2, #1
 80451a0:	4970      	ldr	r1, [pc, #448]	; (8045364 <HAL_I2C_Master_Transmit+0x1f4>)
 80451a2:	68f8      	ldr	r0, [r7, #12]
 80451a4:	f000 f964 	bl	8045470 <I2C_WaitOnFlagUntilTimeout>
 80451a8:	4603      	mov	r3, r0
 80451aa:	2b00      	cmp	r3, #0
 80451ac:	d001      	beq.n	80451b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80451ae:	2302      	movs	r3, #2
 80451b0:	e0d3      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80451b2:	68fb      	ldr	r3, [r7, #12]
 80451b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80451b8:	2b01      	cmp	r3, #1
 80451ba:	d101      	bne.n	80451c0 <HAL_I2C_Master_Transmit+0x50>
 80451bc:	2302      	movs	r3, #2
 80451be:	e0cc      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
 80451c0:	68fb      	ldr	r3, [r7, #12]
 80451c2:	2201      	movs	r2, #1
 80451c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80451c8:	68fb      	ldr	r3, [r7, #12]
 80451ca:	681b      	ldr	r3, [r3, #0]
 80451cc:	681b      	ldr	r3, [r3, #0]
 80451ce:	f003 0301 	and.w	r3, r3, #1
 80451d2:	2b01      	cmp	r3, #1
 80451d4:	d007      	beq.n	80451e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80451d6:	68fb      	ldr	r3, [r7, #12]
 80451d8:	681b      	ldr	r3, [r3, #0]
 80451da:	681a      	ldr	r2, [r3, #0]
 80451dc:	68fb      	ldr	r3, [r7, #12]
 80451de:	681b      	ldr	r3, [r3, #0]
 80451e0:	f042 0201 	orr.w	r2, r2, #1
 80451e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80451e6:	68fb      	ldr	r3, [r7, #12]
 80451e8:	681b      	ldr	r3, [r3, #0]
 80451ea:	681a      	ldr	r2, [r3, #0]
 80451ec:	68fb      	ldr	r3, [r7, #12]
 80451ee:	681b      	ldr	r3, [r3, #0]
 80451f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80451f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80451f6:	68fb      	ldr	r3, [r7, #12]
 80451f8:	2221      	movs	r2, #33	; 0x21
 80451fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80451fe:	68fb      	ldr	r3, [r7, #12]
 8045200:	2210      	movs	r2, #16
 8045202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8045206:	68fb      	ldr	r3, [r7, #12]
 8045208:	2200      	movs	r2, #0
 804520a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 804520c:	68fb      	ldr	r3, [r7, #12]
 804520e:	687a      	ldr	r2, [r7, #4]
 8045210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8045212:	68fb      	ldr	r3, [r7, #12]
 8045214:	893a      	ldrh	r2, [r7, #8]
 8045216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8045218:	68fb      	ldr	r3, [r7, #12]
 804521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804521c:	b29a      	uxth	r2, r3
 804521e:	68fb      	ldr	r3, [r7, #12]
 8045220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8045222:	68fb      	ldr	r3, [r7, #12]
 8045224:	4a50      	ldr	r2, [pc, #320]	; (8045368 <HAL_I2C_Master_Transmit+0x1f8>)
 8045226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8045228:	8979      	ldrh	r1, [r7, #10]
 804522a:	697b      	ldr	r3, [r7, #20]
 804522c:	6a3a      	ldr	r2, [r7, #32]
 804522e:	68f8      	ldr	r0, [r7, #12]
 8045230:	f000 f89c 	bl	804536c <I2C_MasterRequestWrite>
 8045234:	4603      	mov	r3, r0
 8045236:	2b00      	cmp	r3, #0
 8045238:	d001      	beq.n	804523e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 804523a:	2301      	movs	r3, #1
 804523c:	e08d      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804523e:	2300      	movs	r3, #0
 8045240:	613b      	str	r3, [r7, #16]
 8045242:	68fb      	ldr	r3, [r7, #12]
 8045244:	681b      	ldr	r3, [r3, #0]
 8045246:	695b      	ldr	r3, [r3, #20]
 8045248:	613b      	str	r3, [r7, #16]
 804524a:	68fb      	ldr	r3, [r7, #12]
 804524c:	681b      	ldr	r3, [r3, #0]
 804524e:	699b      	ldr	r3, [r3, #24]
 8045250:	613b      	str	r3, [r7, #16]
 8045252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8045254:	e066      	b.n	8045324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8045256:	697a      	ldr	r2, [r7, #20]
 8045258:	6a39      	ldr	r1, [r7, #32]
 804525a:	68f8      	ldr	r0, [r7, #12]
 804525c:	f000 f9de 	bl	804561c <I2C_WaitOnTXEFlagUntilTimeout>
 8045260:	4603      	mov	r3, r0
 8045262:	2b00      	cmp	r3, #0
 8045264:	d00d      	beq.n	8045282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8045266:	68fb      	ldr	r3, [r7, #12]
 8045268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804526a:	2b04      	cmp	r3, #4
 804526c:	d107      	bne.n	804527e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804526e:	68fb      	ldr	r3, [r7, #12]
 8045270:	681b      	ldr	r3, [r3, #0]
 8045272:	681a      	ldr	r2, [r3, #0]
 8045274:	68fb      	ldr	r3, [r7, #12]
 8045276:	681b      	ldr	r3, [r3, #0]
 8045278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804527c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 804527e:	2301      	movs	r3, #1
 8045280:	e06b      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8045282:	68fb      	ldr	r3, [r7, #12]
 8045284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045286:	781a      	ldrb	r2, [r3, #0]
 8045288:	68fb      	ldr	r3, [r7, #12]
 804528a:	681b      	ldr	r3, [r3, #0]
 804528c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 804528e:	68fb      	ldr	r3, [r7, #12]
 8045290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045292:	1c5a      	adds	r2, r3, #1
 8045294:	68fb      	ldr	r3, [r7, #12]
 8045296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8045298:	68fb      	ldr	r3, [r7, #12]
 804529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804529c:	b29b      	uxth	r3, r3
 804529e:	3b01      	subs	r3, #1
 80452a0:	b29a      	uxth	r2, r3
 80452a2:	68fb      	ldr	r3, [r7, #12]
 80452a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80452a6:	68fb      	ldr	r3, [r7, #12]
 80452a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80452aa:	3b01      	subs	r3, #1
 80452ac:	b29a      	uxth	r2, r3
 80452ae:	68fb      	ldr	r3, [r7, #12]
 80452b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80452b2:	68fb      	ldr	r3, [r7, #12]
 80452b4:	681b      	ldr	r3, [r3, #0]
 80452b6:	695b      	ldr	r3, [r3, #20]
 80452b8:	f003 0304 	and.w	r3, r3, #4
 80452bc:	2b04      	cmp	r3, #4
 80452be:	d11b      	bne.n	80452f8 <HAL_I2C_Master_Transmit+0x188>
 80452c0:	68fb      	ldr	r3, [r7, #12]
 80452c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80452c4:	2b00      	cmp	r3, #0
 80452c6:	d017      	beq.n	80452f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80452c8:	68fb      	ldr	r3, [r7, #12]
 80452ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80452cc:	781a      	ldrb	r2, [r3, #0]
 80452ce:	68fb      	ldr	r3, [r7, #12]
 80452d0:	681b      	ldr	r3, [r3, #0]
 80452d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80452d4:	68fb      	ldr	r3, [r7, #12]
 80452d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80452d8:	1c5a      	adds	r2, r3, #1
 80452da:	68fb      	ldr	r3, [r7, #12]
 80452dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80452de:	68fb      	ldr	r3, [r7, #12]
 80452e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80452e2:	b29b      	uxth	r3, r3
 80452e4:	3b01      	subs	r3, #1
 80452e6:	b29a      	uxth	r2, r3
 80452e8:	68fb      	ldr	r3, [r7, #12]
 80452ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80452ec:	68fb      	ldr	r3, [r7, #12]
 80452ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80452f0:	3b01      	subs	r3, #1
 80452f2:	b29a      	uxth	r2, r3
 80452f4:	68fb      	ldr	r3, [r7, #12]
 80452f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80452f8:	697a      	ldr	r2, [r7, #20]
 80452fa:	6a39      	ldr	r1, [r7, #32]
 80452fc:	68f8      	ldr	r0, [r7, #12]
 80452fe:	f000 f9ce 	bl	804569e <I2C_WaitOnBTFFlagUntilTimeout>
 8045302:	4603      	mov	r3, r0
 8045304:	2b00      	cmp	r3, #0
 8045306:	d00d      	beq.n	8045324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8045308:	68fb      	ldr	r3, [r7, #12]
 804530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804530c:	2b04      	cmp	r3, #4
 804530e:	d107      	bne.n	8045320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8045310:	68fb      	ldr	r3, [r7, #12]
 8045312:	681b      	ldr	r3, [r3, #0]
 8045314:	681a      	ldr	r2, [r3, #0]
 8045316:	68fb      	ldr	r3, [r7, #12]
 8045318:	681b      	ldr	r3, [r3, #0]
 804531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804531e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8045320:	2301      	movs	r3, #1
 8045322:	e01a      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8045324:	68fb      	ldr	r3, [r7, #12]
 8045326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045328:	2b00      	cmp	r3, #0
 804532a:	d194      	bne.n	8045256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804532c:	68fb      	ldr	r3, [r7, #12]
 804532e:	681b      	ldr	r3, [r3, #0]
 8045330:	681a      	ldr	r2, [r3, #0]
 8045332:	68fb      	ldr	r3, [r7, #12]
 8045334:	681b      	ldr	r3, [r3, #0]
 8045336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804533a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804533c:	68fb      	ldr	r3, [r7, #12]
 804533e:	2220      	movs	r2, #32
 8045340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8045344:	68fb      	ldr	r3, [r7, #12]
 8045346:	2200      	movs	r2, #0
 8045348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804534c:	68fb      	ldr	r3, [r7, #12]
 804534e:	2200      	movs	r2, #0
 8045350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8045354:	2300      	movs	r3, #0
 8045356:	e000      	b.n	804535a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8045358:	2302      	movs	r3, #2
  }
}
 804535a:	4618      	mov	r0, r3
 804535c:	3718      	adds	r7, #24
 804535e:	46bd      	mov	sp, r7
 8045360:	bd80      	pop	{r7, pc}
 8045362:	bf00      	nop
 8045364:	00100002 	.word	0x00100002
 8045368:	ffff0000 	.word	0xffff0000

0804536c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 804536c:	b580      	push	{r7, lr}
 804536e:	b088      	sub	sp, #32
 8045370:	af02      	add	r7, sp, #8
 8045372:	60f8      	str	r0, [r7, #12]
 8045374:	607a      	str	r2, [r7, #4]
 8045376:	603b      	str	r3, [r7, #0]
 8045378:	460b      	mov	r3, r1
 804537a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 804537c:	68fb      	ldr	r3, [r7, #12]
 804537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8045382:	697b      	ldr	r3, [r7, #20]
 8045384:	2b08      	cmp	r3, #8
 8045386:	d006      	beq.n	8045396 <I2C_MasterRequestWrite+0x2a>
 8045388:	697b      	ldr	r3, [r7, #20]
 804538a:	2b01      	cmp	r3, #1
 804538c:	d003      	beq.n	8045396 <I2C_MasterRequestWrite+0x2a>
 804538e:	697b      	ldr	r3, [r7, #20]
 8045390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8045394:	d108      	bne.n	80453a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8045396:	68fb      	ldr	r3, [r7, #12]
 8045398:	681b      	ldr	r3, [r3, #0]
 804539a:	681a      	ldr	r2, [r3, #0]
 804539c:	68fb      	ldr	r3, [r7, #12]
 804539e:	681b      	ldr	r3, [r3, #0]
 80453a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80453a4:	601a      	str	r2, [r3, #0]
 80453a6:	e00b      	b.n	80453c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80453a8:	68fb      	ldr	r3, [r7, #12]
 80453aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80453ac:	2b12      	cmp	r3, #18
 80453ae:	d107      	bne.n	80453c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80453b0:	68fb      	ldr	r3, [r7, #12]
 80453b2:	681b      	ldr	r3, [r3, #0]
 80453b4:	681a      	ldr	r2, [r3, #0]
 80453b6:	68fb      	ldr	r3, [r7, #12]
 80453b8:	681b      	ldr	r3, [r3, #0]
 80453ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80453be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80453c0:	683b      	ldr	r3, [r7, #0]
 80453c2:	9300      	str	r3, [sp, #0]
 80453c4:	687b      	ldr	r3, [r7, #4]
 80453c6:	2200      	movs	r2, #0
 80453c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80453cc:	68f8      	ldr	r0, [r7, #12]
 80453ce:	f000 f84f 	bl	8045470 <I2C_WaitOnFlagUntilTimeout>
 80453d2:	4603      	mov	r3, r0
 80453d4:	2b00      	cmp	r3, #0
 80453d6:	d00d      	beq.n	80453f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80453d8:	68fb      	ldr	r3, [r7, #12]
 80453da:	681b      	ldr	r3, [r3, #0]
 80453dc:	681b      	ldr	r3, [r3, #0]
 80453de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80453e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80453e6:	d103      	bne.n	80453f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80453e8:	68fb      	ldr	r3, [r7, #12]
 80453ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80453ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80453f0:	2303      	movs	r3, #3
 80453f2:	e035      	b.n	8045460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80453f4:	68fb      	ldr	r3, [r7, #12]
 80453f6:	691b      	ldr	r3, [r3, #16]
 80453f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80453fc:	d108      	bne.n	8045410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80453fe:	897b      	ldrh	r3, [r7, #10]
 8045400:	b2db      	uxtb	r3, r3
 8045402:	461a      	mov	r2, r3
 8045404:	68fb      	ldr	r3, [r7, #12]
 8045406:	681b      	ldr	r3, [r3, #0]
 8045408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 804540c:	611a      	str	r2, [r3, #16]
 804540e:	e01b      	b.n	8045448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8045410:	897b      	ldrh	r3, [r7, #10]
 8045412:	11db      	asrs	r3, r3, #7
 8045414:	b2db      	uxtb	r3, r3
 8045416:	f003 0306 	and.w	r3, r3, #6
 804541a:	b2db      	uxtb	r3, r3
 804541c:	f063 030f 	orn	r3, r3, #15
 8045420:	b2da      	uxtb	r2, r3
 8045422:	68fb      	ldr	r3, [r7, #12]
 8045424:	681b      	ldr	r3, [r3, #0]
 8045426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8045428:	683b      	ldr	r3, [r7, #0]
 804542a:	687a      	ldr	r2, [r7, #4]
 804542c:	490e      	ldr	r1, [pc, #56]	; (8045468 <I2C_MasterRequestWrite+0xfc>)
 804542e:	68f8      	ldr	r0, [r7, #12]
 8045430:	f000 f875 	bl	804551e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8045434:	4603      	mov	r3, r0
 8045436:	2b00      	cmp	r3, #0
 8045438:	d001      	beq.n	804543e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 804543a:	2301      	movs	r3, #1
 804543c:	e010      	b.n	8045460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 804543e:	897b      	ldrh	r3, [r7, #10]
 8045440:	b2da      	uxtb	r2, r3
 8045442:	68fb      	ldr	r3, [r7, #12]
 8045444:	681b      	ldr	r3, [r3, #0]
 8045446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8045448:	683b      	ldr	r3, [r7, #0]
 804544a:	687a      	ldr	r2, [r7, #4]
 804544c:	4907      	ldr	r1, [pc, #28]	; (804546c <I2C_MasterRequestWrite+0x100>)
 804544e:	68f8      	ldr	r0, [r7, #12]
 8045450:	f000 f865 	bl	804551e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8045454:	4603      	mov	r3, r0
 8045456:	2b00      	cmp	r3, #0
 8045458:	d001      	beq.n	804545e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 804545a:	2301      	movs	r3, #1
 804545c:	e000      	b.n	8045460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 804545e:	2300      	movs	r3, #0
}
 8045460:	4618      	mov	r0, r3
 8045462:	3718      	adds	r7, #24
 8045464:	46bd      	mov	sp, r7
 8045466:	bd80      	pop	{r7, pc}
 8045468:	00010008 	.word	0x00010008
 804546c:	00010002 	.word	0x00010002

08045470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8045470:	b580      	push	{r7, lr}
 8045472:	b084      	sub	sp, #16
 8045474:	af00      	add	r7, sp, #0
 8045476:	60f8      	str	r0, [r7, #12]
 8045478:	60b9      	str	r1, [r7, #8]
 804547a:	603b      	str	r3, [r7, #0]
 804547c:	4613      	mov	r3, r2
 804547e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8045480:	e025      	b.n	80454ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045482:	683b      	ldr	r3, [r7, #0]
 8045484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045488:	d021      	beq.n	80454ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804548a:	f7fe feed 	bl	8044268 <HAL_GetTick>
 804548e:	4602      	mov	r2, r0
 8045490:	69bb      	ldr	r3, [r7, #24]
 8045492:	1ad3      	subs	r3, r2, r3
 8045494:	683a      	ldr	r2, [r7, #0]
 8045496:	429a      	cmp	r2, r3
 8045498:	d302      	bcc.n	80454a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 804549a:	683b      	ldr	r3, [r7, #0]
 804549c:	2b00      	cmp	r3, #0
 804549e:	d116      	bne.n	80454ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80454a0:	68fb      	ldr	r3, [r7, #12]
 80454a2:	2200      	movs	r2, #0
 80454a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80454a6:	68fb      	ldr	r3, [r7, #12]
 80454a8:	2220      	movs	r2, #32
 80454aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80454ae:	68fb      	ldr	r3, [r7, #12]
 80454b0:	2200      	movs	r2, #0
 80454b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80454b6:	68fb      	ldr	r3, [r7, #12]
 80454b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80454ba:	f043 0220 	orr.w	r2, r3, #32
 80454be:	68fb      	ldr	r3, [r7, #12]
 80454c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80454c2:	68fb      	ldr	r3, [r7, #12]
 80454c4:	2200      	movs	r2, #0
 80454c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80454ca:	2301      	movs	r3, #1
 80454cc:	e023      	b.n	8045516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80454ce:	68bb      	ldr	r3, [r7, #8]
 80454d0:	0c1b      	lsrs	r3, r3, #16
 80454d2:	b2db      	uxtb	r3, r3
 80454d4:	2b01      	cmp	r3, #1
 80454d6:	d10d      	bne.n	80454f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80454d8:	68fb      	ldr	r3, [r7, #12]
 80454da:	681b      	ldr	r3, [r3, #0]
 80454dc:	695b      	ldr	r3, [r3, #20]
 80454de:	43da      	mvns	r2, r3
 80454e0:	68bb      	ldr	r3, [r7, #8]
 80454e2:	4013      	ands	r3, r2
 80454e4:	b29b      	uxth	r3, r3
 80454e6:	2b00      	cmp	r3, #0
 80454e8:	bf0c      	ite	eq
 80454ea:	2301      	moveq	r3, #1
 80454ec:	2300      	movne	r3, #0
 80454ee:	b2db      	uxtb	r3, r3
 80454f0:	461a      	mov	r2, r3
 80454f2:	e00c      	b.n	804550e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80454f4:	68fb      	ldr	r3, [r7, #12]
 80454f6:	681b      	ldr	r3, [r3, #0]
 80454f8:	699b      	ldr	r3, [r3, #24]
 80454fa:	43da      	mvns	r2, r3
 80454fc:	68bb      	ldr	r3, [r7, #8]
 80454fe:	4013      	ands	r3, r2
 8045500:	b29b      	uxth	r3, r3
 8045502:	2b00      	cmp	r3, #0
 8045504:	bf0c      	ite	eq
 8045506:	2301      	moveq	r3, #1
 8045508:	2300      	movne	r3, #0
 804550a:	b2db      	uxtb	r3, r3
 804550c:	461a      	mov	r2, r3
 804550e:	79fb      	ldrb	r3, [r7, #7]
 8045510:	429a      	cmp	r2, r3
 8045512:	d0b6      	beq.n	8045482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8045514:	2300      	movs	r3, #0
}
 8045516:	4618      	mov	r0, r3
 8045518:	3710      	adds	r7, #16
 804551a:	46bd      	mov	sp, r7
 804551c:	bd80      	pop	{r7, pc}

0804551e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 804551e:	b580      	push	{r7, lr}
 8045520:	b084      	sub	sp, #16
 8045522:	af00      	add	r7, sp, #0
 8045524:	60f8      	str	r0, [r7, #12]
 8045526:	60b9      	str	r1, [r7, #8]
 8045528:	607a      	str	r2, [r7, #4]
 804552a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 804552c:	e051      	b.n	80455d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 804552e:	68fb      	ldr	r3, [r7, #12]
 8045530:	681b      	ldr	r3, [r3, #0]
 8045532:	695b      	ldr	r3, [r3, #20]
 8045534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804553c:	d123      	bne.n	8045586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804553e:	68fb      	ldr	r3, [r7, #12]
 8045540:	681b      	ldr	r3, [r3, #0]
 8045542:	681a      	ldr	r2, [r3, #0]
 8045544:	68fb      	ldr	r3, [r7, #12]
 8045546:	681b      	ldr	r3, [r3, #0]
 8045548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 804554c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804554e:	68fb      	ldr	r3, [r7, #12]
 8045550:	681b      	ldr	r3, [r3, #0]
 8045552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8045556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8045558:	68fb      	ldr	r3, [r7, #12]
 804555a:	2200      	movs	r2, #0
 804555c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 804555e:	68fb      	ldr	r3, [r7, #12]
 8045560:	2220      	movs	r2, #32
 8045562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8045566:	68fb      	ldr	r3, [r7, #12]
 8045568:	2200      	movs	r2, #0
 804556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 804556e:	68fb      	ldr	r3, [r7, #12]
 8045570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045572:	f043 0204 	orr.w	r2, r3, #4
 8045576:	68fb      	ldr	r3, [r7, #12]
 8045578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804557a:	68fb      	ldr	r3, [r7, #12]
 804557c:	2200      	movs	r2, #0
 804557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8045582:	2301      	movs	r3, #1
 8045584:	e046      	b.n	8045614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045586:	687b      	ldr	r3, [r7, #4]
 8045588:	f1b3 3fff 	cmp.w	r3, #4294967295
 804558c:	d021      	beq.n	80455d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804558e:	f7fe fe6b 	bl	8044268 <HAL_GetTick>
 8045592:	4602      	mov	r2, r0
 8045594:	683b      	ldr	r3, [r7, #0]
 8045596:	1ad3      	subs	r3, r2, r3
 8045598:	687a      	ldr	r2, [r7, #4]
 804559a:	429a      	cmp	r2, r3
 804559c:	d302      	bcc.n	80455a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 804559e:	687b      	ldr	r3, [r7, #4]
 80455a0:	2b00      	cmp	r3, #0
 80455a2:	d116      	bne.n	80455d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80455a4:	68fb      	ldr	r3, [r7, #12]
 80455a6:	2200      	movs	r2, #0
 80455a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80455aa:	68fb      	ldr	r3, [r7, #12]
 80455ac:	2220      	movs	r2, #32
 80455ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80455b2:	68fb      	ldr	r3, [r7, #12]
 80455b4:	2200      	movs	r2, #0
 80455b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80455ba:	68fb      	ldr	r3, [r7, #12]
 80455bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80455be:	f043 0220 	orr.w	r2, r3, #32
 80455c2:	68fb      	ldr	r3, [r7, #12]
 80455c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80455c6:	68fb      	ldr	r3, [r7, #12]
 80455c8:	2200      	movs	r2, #0
 80455ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80455ce:	2301      	movs	r3, #1
 80455d0:	e020      	b.n	8045614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80455d2:	68bb      	ldr	r3, [r7, #8]
 80455d4:	0c1b      	lsrs	r3, r3, #16
 80455d6:	b2db      	uxtb	r3, r3
 80455d8:	2b01      	cmp	r3, #1
 80455da:	d10c      	bne.n	80455f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80455dc:	68fb      	ldr	r3, [r7, #12]
 80455de:	681b      	ldr	r3, [r3, #0]
 80455e0:	695b      	ldr	r3, [r3, #20]
 80455e2:	43da      	mvns	r2, r3
 80455e4:	68bb      	ldr	r3, [r7, #8]
 80455e6:	4013      	ands	r3, r2
 80455e8:	b29b      	uxth	r3, r3
 80455ea:	2b00      	cmp	r3, #0
 80455ec:	bf14      	ite	ne
 80455ee:	2301      	movne	r3, #1
 80455f0:	2300      	moveq	r3, #0
 80455f2:	b2db      	uxtb	r3, r3
 80455f4:	e00b      	b.n	804560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80455f6:	68fb      	ldr	r3, [r7, #12]
 80455f8:	681b      	ldr	r3, [r3, #0]
 80455fa:	699b      	ldr	r3, [r3, #24]
 80455fc:	43da      	mvns	r2, r3
 80455fe:	68bb      	ldr	r3, [r7, #8]
 8045600:	4013      	ands	r3, r2
 8045602:	b29b      	uxth	r3, r3
 8045604:	2b00      	cmp	r3, #0
 8045606:	bf14      	ite	ne
 8045608:	2301      	movne	r3, #1
 804560a:	2300      	moveq	r3, #0
 804560c:	b2db      	uxtb	r3, r3
 804560e:	2b00      	cmp	r3, #0
 8045610:	d18d      	bne.n	804552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8045612:	2300      	movs	r3, #0
}
 8045614:	4618      	mov	r0, r3
 8045616:	3710      	adds	r7, #16
 8045618:	46bd      	mov	sp, r7
 804561a:	bd80      	pop	{r7, pc}

0804561c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804561c:	b580      	push	{r7, lr}
 804561e:	b084      	sub	sp, #16
 8045620:	af00      	add	r7, sp, #0
 8045622:	60f8      	str	r0, [r7, #12]
 8045624:	60b9      	str	r1, [r7, #8]
 8045626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8045628:	e02d      	b.n	8045686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 804562a:	68f8      	ldr	r0, [r7, #12]
 804562c:	f000 f878 	bl	8045720 <I2C_IsAcknowledgeFailed>
 8045630:	4603      	mov	r3, r0
 8045632:	2b00      	cmp	r3, #0
 8045634:	d001      	beq.n	804563a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8045636:	2301      	movs	r3, #1
 8045638:	e02d      	b.n	8045696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804563a:	68bb      	ldr	r3, [r7, #8]
 804563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045640:	d021      	beq.n	8045686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8045642:	f7fe fe11 	bl	8044268 <HAL_GetTick>
 8045646:	4602      	mov	r2, r0
 8045648:	687b      	ldr	r3, [r7, #4]
 804564a:	1ad3      	subs	r3, r2, r3
 804564c:	68ba      	ldr	r2, [r7, #8]
 804564e:	429a      	cmp	r2, r3
 8045650:	d302      	bcc.n	8045658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8045652:	68bb      	ldr	r3, [r7, #8]
 8045654:	2b00      	cmp	r3, #0
 8045656:	d116      	bne.n	8045686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8045658:	68fb      	ldr	r3, [r7, #12]
 804565a:	2200      	movs	r2, #0
 804565c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 804565e:	68fb      	ldr	r3, [r7, #12]
 8045660:	2220      	movs	r2, #32
 8045662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8045666:	68fb      	ldr	r3, [r7, #12]
 8045668:	2200      	movs	r2, #0
 804566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804566e:	68fb      	ldr	r3, [r7, #12]
 8045670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045672:	f043 0220 	orr.w	r2, r3, #32
 8045676:	68fb      	ldr	r3, [r7, #12]
 8045678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804567a:	68fb      	ldr	r3, [r7, #12]
 804567c:	2200      	movs	r2, #0
 804567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8045682:	2301      	movs	r3, #1
 8045684:	e007      	b.n	8045696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8045686:	68fb      	ldr	r3, [r7, #12]
 8045688:	681b      	ldr	r3, [r3, #0]
 804568a:	695b      	ldr	r3, [r3, #20]
 804568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045690:	2b80      	cmp	r3, #128	; 0x80
 8045692:	d1ca      	bne.n	804562a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8045694:	2300      	movs	r3, #0
}
 8045696:	4618      	mov	r0, r3
 8045698:	3710      	adds	r7, #16
 804569a:	46bd      	mov	sp, r7
 804569c:	bd80      	pop	{r7, pc}

0804569e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804569e:	b580      	push	{r7, lr}
 80456a0:	b084      	sub	sp, #16
 80456a2:	af00      	add	r7, sp, #0
 80456a4:	60f8      	str	r0, [r7, #12]
 80456a6:	60b9      	str	r1, [r7, #8]
 80456a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80456aa:	e02d      	b.n	8045708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80456ac:	68f8      	ldr	r0, [r7, #12]
 80456ae:	f000 f837 	bl	8045720 <I2C_IsAcknowledgeFailed>
 80456b2:	4603      	mov	r3, r0
 80456b4:	2b00      	cmp	r3, #0
 80456b6:	d001      	beq.n	80456bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80456b8:	2301      	movs	r3, #1
 80456ba:	e02d      	b.n	8045718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80456bc:	68bb      	ldr	r3, [r7, #8]
 80456be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80456c2:	d021      	beq.n	8045708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80456c4:	f7fe fdd0 	bl	8044268 <HAL_GetTick>
 80456c8:	4602      	mov	r2, r0
 80456ca:	687b      	ldr	r3, [r7, #4]
 80456cc:	1ad3      	subs	r3, r2, r3
 80456ce:	68ba      	ldr	r2, [r7, #8]
 80456d0:	429a      	cmp	r2, r3
 80456d2:	d302      	bcc.n	80456da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80456d4:	68bb      	ldr	r3, [r7, #8]
 80456d6:	2b00      	cmp	r3, #0
 80456d8:	d116      	bne.n	8045708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80456da:	68fb      	ldr	r3, [r7, #12]
 80456dc:	2200      	movs	r2, #0
 80456de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80456e0:	68fb      	ldr	r3, [r7, #12]
 80456e2:	2220      	movs	r2, #32
 80456e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80456e8:	68fb      	ldr	r3, [r7, #12]
 80456ea:	2200      	movs	r2, #0
 80456ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80456f0:	68fb      	ldr	r3, [r7, #12]
 80456f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80456f4:	f043 0220 	orr.w	r2, r3, #32
 80456f8:	68fb      	ldr	r3, [r7, #12]
 80456fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80456fc:	68fb      	ldr	r3, [r7, #12]
 80456fe:	2200      	movs	r2, #0
 8045700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8045704:	2301      	movs	r3, #1
 8045706:	e007      	b.n	8045718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8045708:	68fb      	ldr	r3, [r7, #12]
 804570a:	681b      	ldr	r3, [r3, #0]
 804570c:	695b      	ldr	r3, [r3, #20]
 804570e:	f003 0304 	and.w	r3, r3, #4
 8045712:	2b04      	cmp	r3, #4
 8045714:	d1ca      	bne.n	80456ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8045716:	2300      	movs	r3, #0
}
 8045718:	4618      	mov	r0, r3
 804571a:	3710      	adds	r7, #16
 804571c:	46bd      	mov	sp, r7
 804571e:	bd80      	pop	{r7, pc}

08045720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8045720:	b480      	push	{r7}
 8045722:	b083      	sub	sp, #12
 8045724:	af00      	add	r7, sp, #0
 8045726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8045728:	687b      	ldr	r3, [r7, #4]
 804572a:	681b      	ldr	r3, [r3, #0]
 804572c:	695b      	ldr	r3, [r3, #20]
 804572e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045736:	d11b      	bne.n	8045770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8045738:	687b      	ldr	r3, [r7, #4]
 804573a:	681b      	ldr	r3, [r3, #0]
 804573c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8045740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8045742:	687b      	ldr	r3, [r7, #4]
 8045744:	2200      	movs	r2, #0
 8045746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8045748:	687b      	ldr	r3, [r7, #4]
 804574a:	2220      	movs	r2, #32
 804574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8045750:	687b      	ldr	r3, [r7, #4]
 8045752:	2200      	movs	r2, #0
 8045754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8045758:	687b      	ldr	r3, [r7, #4]
 804575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804575c:	f043 0204 	orr.w	r2, r3, #4
 8045760:	687b      	ldr	r3, [r7, #4]
 8045762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8045764:	687b      	ldr	r3, [r7, #4]
 8045766:	2200      	movs	r2, #0
 8045768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 804576c:	2301      	movs	r3, #1
 804576e:	e000      	b.n	8045772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8045770:	2300      	movs	r3, #0
}
 8045772:	4618      	mov	r0, r3
 8045774:	370c      	adds	r7, #12
 8045776:	46bd      	mov	sp, r7
 8045778:	f85d 7b04 	ldr.w	r7, [sp], #4
 804577c:	4770      	bx	lr
	...

08045780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8045780:	b580      	push	{r7, lr}
 8045782:	b086      	sub	sp, #24
 8045784:	af00      	add	r7, sp, #0
 8045786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8045788:	687b      	ldr	r3, [r7, #4]
 804578a:	2b00      	cmp	r3, #0
 804578c:	d101      	bne.n	8045792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804578e:	2301      	movs	r3, #1
 8045790:	e264      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8045792:	687b      	ldr	r3, [r7, #4]
 8045794:	681b      	ldr	r3, [r3, #0]
 8045796:	f003 0301 	and.w	r3, r3, #1
 804579a:	2b00      	cmp	r3, #0
 804579c:	d075      	beq.n	804588a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804579e:	4ba3      	ldr	r3, [pc, #652]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457a0:	689b      	ldr	r3, [r3, #8]
 80457a2:	f003 030c 	and.w	r3, r3, #12
 80457a6:	2b04      	cmp	r3, #4
 80457a8:	d00c      	beq.n	80457c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80457aa:	4ba0      	ldr	r3, [pc, #640]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457ac:	689b      	ldr	r3, [r3, #8]
 80457ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80457b2:	2b08      	cmp	r3, #8
 80457b4:	d112      	bne.n	80457dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80457b6:	4b9d      	ldr	r3, [pc, #628]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457b8:	685b      	ldr	r3, [r3, #4]
 80457ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80457be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80457c2:	d10b      	bne.n	80457dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80457c4:	4b99      	ldr	r3, [pc, #612]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457c6:	681b      	ldr	r3, [r3, #0]
 80457c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80457cc:	2b00      	cmp	r3, #0
 80457ce:	d05b      	beq.n	8045888 <HAL_RCC_OscConfig+0x108>
 80457d0:	687b      	ldr	r3, [r7, #4]
 80457d2:	685b      	ldr	r3, [r3, #4]
 80457d4:	2b00      	cmp	r3, #0
 80457d6:	d157      	bne.n	8045888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80457d8:	2301      	movs	r3, #1
 80457da:	e23f      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80457dc:	687b      	ldr	r3, [r7, #4]
 80457de:	685b      	ldr	r3, [r3, #4]
 80457e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80457e4:	d106      	bne.n	80457f4 <HAL_RCC_OscConfig+0x74>
 80457e6:	4b91      	ldr	r3, [pc, #580]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457e8:	681b      	ldr	r3, [r3, #0]
 80457ea:	4a90      	ldr	r2, [pc, #576]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80457ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80457f0:	6013      	str	r3, [r2, #0]
 80457f2:	e01d      	b.n	8045830 <HAL_RCC_OscConfig+0xb0>
 80457f4:	687b      	ldr	r3, [r7, #4]
 80457f6:	685b      	ldr	r3, [r3, #4]
 80457f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80457fc:	d10c      	bne.n	8045818 <HAL_RCC_OscConfig+0x98>
 80457fe:	4b8b      	ldr	r3, [pc, #556]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045800:	681b      	ldr	r3, [r3, #0]
 8045802:	4a8a      	ldr	r2, [pc, #552]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8045808:	6013      	str	r3, [r2, #0]
 804580a:	4b88      	ldr	r3, [pc, #544]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804580c:	681b      	ldr	r3, [r3, #0]
 804580e:	4a87      	ldr	r2, [pc, #540]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8045814:	6013      	str	r3, [r2, #0]
 8045816:	e00b      	b.n	8045830 <HAL_RCC_OscConfig+0xb0>
 8045818:	4b84      	ldr	r3, [pc, #528]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804581a:	681b      	ldr	r3, [r3, #0]
 804581c:	4a83      	ldr	r2, [pc, #524]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8045822:	6013      	str	r3, [r2, #0]
 8045824:	4b81      	ldr	r3, [pc, #516]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045826:	681b      	ldr	r3, [r3, #0]
 8045828:	4a80      	ldr	r2, [pc, #512]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8045830:	687b      	ldr	r3, [r7, #4]
 8045832:	685b      	ldr	r3, [r3, #4]
 8045834:	2b00      	cmp	r3, #0
 8045836:	d013      	beq.n	8045860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8045838:	f7fe fd16 	bl	8044268 <HAL_GetTick>
 804583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804583e:	e008      	b.n	8045852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8045840:	f7fe fd12 	bl	8044268 <HAL_GetTick>
 8045844:	4602      	mov	r2, r0
 8045846:	693b      	ldr	r3, [r7, #16]
 8045848:	1ad3      	subs	r3, r2, r3
 804584a:	2b64      	cmp	r3, #100	; 0x64
 804584c:	d901      	bls.n	8045852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804584e:	2303      	movs	r3, #3
 8045850:	e204      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045852:	4b76      	ldr	r3, [pc, #472]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045854:	681b      	ldr	r3, [r3, #0]
 8045856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804585a:	2b00      	cmp	r3, #0
 804585c:	d0f0      	beq.n	8045840 <HAL_RCC_OscConfig+0xc0>
 804585e:	e014      	b.n	804588a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8045860:	f7fe fd02 	bl	8044268 <HAL_GetTick>
 8045864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8045866:	e008      	b.n	804587a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8045868:	f7fe fcfe 	bl	8044268 <HAL_GetTick>
 804586c:	4602      	mov	r2, r0
 804586e:	693b      	ldr	r3, [r7, #16]
 8045870:	1ad3      	subs	r3, r2, r3
 8045872:	2b64      	cmp	r3, #100	; 0x64
 8045874:	d901      	bls.n	804587a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8045876:	2303      	movs	r3, #3
 8045878:	e1f0      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804587a:	4b6c      	ldr	r3, [pc, #432]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804587c:	681b      	ldr	r3, [r3, #0]
 804587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045882:	2b00      	cmp	r3, #0
 8045884:	d1f0      	bne.n	8045868 <HAL_RCC_OscConfig+0xe8>
 8045886:	e000      	b.n	804588a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8045888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804588a:	687b      	ldr	r3, [r7, #4]
 804588c:	681b      	ldr	r3, [r3, #0]
 804588e:	f003 0302 	and.w	r3, r3, #2
 8045892:	2b00      	cmp	r3, #0
 8045894:	d063      	beq.n	804595e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8045896:	4b65      	ldr	r3, [pc, #404]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045898:	689b      	ldr	r3, [r3, #8]
 804589a:	f003 030c 	and.w	r3, r3, #12
 804589e:	2b00      	cmp	r3, #0
 80458a0:	d00b      	beq.n	80458ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80458a2:	4b62      	ldr	r3, [pc, #392]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80458a4:	689b      	ldr	r3, [r3, #8]
 80458a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80458aa:	2b08      	cmp	r3, #8
 80458ac:	d11c      	bne.n	80458e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80458ae:	4b5f      	ldr	r3, [pc, #380]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80458b0:	685b      	ldr	r3, [r3, #4]
 80458b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80458b6:	2b00      	cmp	r3, #0
 80458b8:	d116      	bne.n	80458e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80458ba:	4b5c      	ldr	r3, [pc, #368]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80458bc:	681b      	ldr	r3, [r3, #0]
 80458be:	f003 0302 	and.w	r3, r3, #2
 80458c2:	2b00      	cmp	r3, #0
 80458c4:	d005      	beq.n	80458d2 <HAL_RCC_OscConfig+0x152>
 80458c6:	687b      	ldr	r3, [r7, #4]
 80458c8:	68db      	ldr	r3, [r3, #12]
 80458ca:	2b01      	cmp	r3, #1
 80458cc:	d001      	beq.n	80458d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80458ce:	2301      	movs	r3, #1
 80458d0:	e1c4      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80458d2:	4b56      	ldr	r3, [pc, #344]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80458d4:	681b      	ldr	r3, [r3, #0]
 80458d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80458da:	687b      	ldr	r3, [r7, #4]
 80458dc:	691b      	ldr	r3, [r3, #16]
 80458de:	00db      	lsls	r3, r3, #3
 80458e0:	4952      	ldr	r1, [pc, #328]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80458e2:	4313      	orrs	r3, r2
 80458e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80458e6:	e03a      	b.n	804595e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80458e8:	687b      	ldr	r3, [r7, #4]
 80458ea:	68db      	ldr	r3, [r3, #12]
 80458ec:	2b00      	cmp	r3, #0
 80458ee:	d020      	beq.n	8045932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80458f0:	4b4f      	ldr	r3, [pc, #316]	; (8045a30 <HAL_RCC_OscConfig+0x2b0>)
 80458f2:	2201      	movs	r2, #1
 80458f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80458f6:	f7fe fcb7 	bl	8044268 <HAL_GetTick>
 80458fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80458fc:	e008      	b.n	8045910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80458fe:	f7fe fcb3 	bl	8044268 <HAL_GetTick>
 8045902:	4602      	mov	r2, r0
 8045904:	693b      	ldr	r3, [r7, #16]
 8045906:	1ad3      	subs	r3, r2, r3
 8045908:	2b02      	cmp	r3, #2
 804590a:	d901      	bls.n	8045910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 804590c:	2303      	movs	r3, #3
 804590e:	e1a5      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045910:	4b46      	ldr	r3, [pc, #280]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045912:	681b      	ldr	r3, [r3, #0]
 8045914:	f003 0302 	and.w	r3, r3, #2
 8045918:	2b00      	cmp	r3, #0
 804591a:	d0f0      	beq.n	80458fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804591c:	4b43      	ldr	r3, [pc, #268]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804591e:	681b      	ldr	r3, [r3, #0]
 8045920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8045924:	687b      	ldr	r3, [r7, #4]
 8045926:	691b      	ldr	r3, [r3, #16]
 8045928:	00db      	lsls	r3, r3, #3
 804592a:	4940      	ldr	r1, [pc, #256]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 804592c:	4313      	orrs	r3, r2
 804592e:	600b      	str	r3, [r1, #0]
 8045930:	e015      	b.n	804595e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8045932:	4b3f      	ldr	r3, [pc, #252]	; (8045a30 <HAL_RCC_OscConfig+0x2b0>)
 8045934:	2200      	movs	r2, #0
 8045936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8045938:	f7fe fc96 	bl	8044268 <HAL_GetTick>
 804593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804593e:	e008      	b.n	8045952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8045940:	f7fe fc92 	bl	8044268 <HAL_GetTick>
 8045944:	4602      	mov	r2, r0
 8045946:	693b      	ldr	r3, [r7, #16]
 8045948:	1ad3      	subs	r3, r2, r3
 804594a:	2b02      	cmp	r3, #2
 804594c:	d901      	bls.n	8045952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804594e:	2303      	movs	r3, #3
 8045950:	e184      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8045952:	4b36      	ldr	r3, [pc, #216]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045954:	681b      	ldr	r3, [r3, #0]
 8045956:	f003 0302 	and.w	r3, r3, #2
 804595a:	2b00      	cmp	r3, #0
 804595c:	d1f0      	bne.n	8045940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804595e:	687b      	ldr	r3, [r7, #4]
 8045960:	681b      	ldr	r3, [r3, #0]
 8045962:	f003 0308 	and.w	r3, r3, #8
 8045966:	2b00      	cmp	r3, #0
 8045968:	d030      	beq.n	80459cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 804596a:	687b      	ldr	r3, [r7, #4]
 804596c:	695b      	ldr	r3, [r3, #20]
 804596e:	2b00      	cmp	r3, #0
 8045970:	d016      	beq.n	80459a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8045972:	4b30      	ldr	r3, [pc, #192]	; (8045a34 <HAL_RCC_OscConfig+0x2b4>)
 8045974:	2201      	movs	r2, #1
 8045976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8045978:	f7fe fc76 	bl	8044268 <HAL_GetTick>
 804597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804597e:	e008      	b.n	8045992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8045980:	f7fe fc72 	bl	8044268 <HAL_GetTick>
 8045984:	4602      	mov	r2, r0
 8045986:	693b      	ldr	r3, [r7, #16]
 8045988:	1ad3      	subs	r3, r2, r3
 804598a:	2b02      	cmp	r3, #2
 804598c:	d901      	bls.n	8045992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804598e:	2303      	movs	r3, #3
 8045990:	e164      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8045992:	4b26      	ldr	r3, [pc, #152]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 8045994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8045996:	f003 0302 	and.w	r3, r3, #2
 804599a:	2b00      	cmp	r3, #0
 804599c:	d0f0      	beq.n	8045980 <HAL_RCC_OscConfig+0x200>
 804599e:	e015      	b.n	80459cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80459a0:	4b24      	ldr	r3, [pc, #144]	; (8045a34 <HAL_RCC_OscConfig+0x2b4>)
 80459a2:	2200      	movs	r2, #0
 80459a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80459a6:	f7fe fc5f 	bl	8044268 <HAL_GetTick>
 80459aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80459ac:	e008      	b.n	80459c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80459ae:	f7fe fc5b 	bl	8044268 <HAL_GetTick>
 80459b2:	4602      	mov	r2, r0
 80459b4:	693b      	ldr	r3, [r7, #16]
 80459b6:	1ad3      	subs	r3, r2, r3
 80459b8:	2b02      	cmp	r3, #2
 80459ba:	d901      	bls.n	80459c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80459bc:	2303      	movs	r3, #3
 80459be:	e14d      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80459c0:	4b1a      	ldr	r3, [pc, #104]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80459c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80459c4:	f003 0302 	and.w	r3, r3, #2
 80459c8:	2b00      	cmp	r3, #0
 80459ca:	d1f0      	bne.n	80459ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80459cc:	687b      	ldr	r3, [r7, #4]
 80459ce:	681b      	ldr	r3, [r3, #0]
 80459d0:	f003 0304 	and.w	r3, r3, #4
 80459d4:	2b00      	cmp	r3, #0
 80459d6:	f000 80a0 	beq.w	8045b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80459da:	2300      	movs	r3, #0
 80459dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80459de:	4b13      	ldr	r3, [pc, #76]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80459e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80459e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80459e6:	2b00      	cmp	r3, #0
 80459e8:	d10f      	bne.n	8045a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80459ea:	2300      	movs	r3, #0
 80459ec:	60bb      	str	r3, [r7, #8]
 80459ee:	4b0f      	ldr	r3, [pc, #60]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80459f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80459f2:	4a0e      	ldr	r2, [pc, #56]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80459f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80459f8:	6413      	str	r3, [r2, #64]	; 0x40
 80459fa:	4b0c      	ldr	r3, [pc, #48]	; (8045a2c <HAL_RCC_OscConfig+0x2ac>)
 80459fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80459fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8045a02:	60bb      	str	r3, [r7, #8]
 8045a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8045a06:	2301      	movs	r3, #1
 8045a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8045a0a:	4b0b      	ldr	r3, [pc, #44]	; (8045a38 <HAL_RCC_OscConfig+0x2b8>)
 8045a0c:	681b      	ldr	r3, [r3, #0]
 8045a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045a12:	2b00      	cmp	r3, #0
 8045a14:	d121      	bne.n	8045a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8045a16:	4b08      	ldr	r3, [pc, #32]	; (8045a38 <HAL_RCC_OscConfig+0x2b8>)
 8045a18:	681b      	ldr	r3, [r3, #0]
 8045a1a:	4a07      	ldr	r2, [pc, #28]	; (8045a38 <HAL_RCC_OscConfig+0x2b8>)
 8045a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8045a22:	f7fe fc21 	bl	8044268 <HAL_GetTick>
 8045a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8045a28:	e011      	b.n	8045a4e <HAL_RCC_OscConfig+0x2ce>
 8045a2a:	bf00      	nop
 8045a2c:	40023800 	.word	0x40023800
 8045a30:	42470000 	.word	0x42470000
 8045a34:	42470e80 	.word	0x42470e80
 8045a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8045a3c:	f7fe fc14 	bl	8044268 <HAL_GetTick>
 8045a40:	4602      	mov	r2, r0
 8045a42:	693b      	ldr	r3, [r7, #16]
 8045a44:	1ad3      	subs	r3, r2, r3
 8045a46:	2b02      	cmp	r3, #2
 8045a48:	d901      	bls.n	8045a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8045a4a:	2303      	movs	r3, #3
 8045a4c:	e106      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8045a4e:	4b85      	ldr	r3, [pc, #532]	; (8045c64 <HAL_RCC_OscConfig+0x4e4>)
 8045a50:	681b      	ldr	r3, [r3, #0]
 8045a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045a56:	2b00      	cmp	r3, #0
 8045a58:	d0f0      	beq.n	8045a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8045a5a:	687b      	ldr	r3, [r7, #4]
 8045a5c:	689b      	ldr	r3, [r3, #8]
 8045a5e:	2b01      	cmp	r3, #1
 8045a60:	d106      	bne.n	8045a70 <HAL_RCC_OscConfig+0x2f0>
 8045a62:	4b81      	ldr	r3, [pc, #516]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045a66:	4a80      	ldr	r2, [pc, #512]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a68:	f043 0301 	orr.w	r3, r3, #1
 8045a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8045a6e:	e01c      	b.n	8045aaa <HAL_RCC_OscConfig+0x32a>
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	689b      	ldr	r3, [r3, #8]
 8045a74:	2b05      	cmp	r3, #5
 8045a76:	d10c      	bne.n	8045a92 <HAL_RCC_OscConfig+0x312>
 8045a78:	4b7b      	ldr	r3, [pc, #492]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045a7c:	4a7a      	ldr	r2, [pc, #488]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a7e:	f043 0304 	orr.w	r3, r3, #4
 8045a82:	6713      	str	r3, [r2, #112]	; 0x70
 8045a84:	4b78      	ldr	r3, [pc, #480]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045a88:	4a77      	ldr	r2, [pc, #476]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a8a:	f043 0301 	orr.w	r3, r3, #1
 8045a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8045a90:	e00b      	b.n	8045aaa <HAL_RCC_OscConfig+0x32a>
 8045a92:	4b75      	ldr	r3, [pc, #468]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045a96:	4a74      	ldr	r2, [pc, #464]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045a98:	f023 0301 	bic.w	r3, r3, #1
 8045a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8045a9e:	4b72      	ldr	r3, [pc, #456]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045aa2:	4a71      	ldr	r2, [pc, #452]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045aa4:	f023 0304 	bic.w	r3, r3, #4
 8045aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8045aaa:	687b      	ldr	r3, [r7, #4]
 8045aac:	689b      	ldr	r3, [r3, #8]
 8045aae:	2b00      	cmp	r3, #0
 8045ab0:	d015      	beq.n	8045ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8045ab2:	f7fe fbd9 	bl	8044268 <HAL_GetTick>
 8045ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8045ab8:	e00a      	b.n	8045ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045aba:	f7fe fbd5 	bl	8044268 <HAL_GetTick>
 8045abe:	4602      	mov	r2, r0
 8045ac0:	693b      	ldr	r3, [r7, #16]
 8045ac2:	1ad3      	subs	r3, r2, r3
 8045ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8045ac8:	4293      	cmp	r3, r2
 8045aca:	d901      	bls.n	8045ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8045acc:	2303      	movs	r3, #3
 8045ace:	e0c5      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8045ad0:	4b65      	ldr	r3, [pc, #404]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045ad4:	f003 0302 	and.w	r3, r3, #2
 8045ad8:	2b00      	cmp	r3, #0
 8045ada:	d0ee      	beq.n	8045aba <HAL_RCC_OscConfig+0x33a>
 8045adc:	e014      	b.n	8045b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8045ade:	f7fe fbc3 	bl	8044268 <HAL_GetTick>
 8045ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8045ae4:	e00a      	b.n	8045afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045ae6:	f7fe fbbf 	bl	8044268 <HAL_GetTick>
 8045aea:	4602      	mov	r2, r0
 8045aec:	693b      	ldr	r3, [r7, #16]
 8045aee:	1ad3      	subs	r3, r2, r3
 8045af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8045af4:	4293      	cmp	r3, r2
 8045af6:	d901      	bls.n	8045afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8045af8:	2303      	movs	r3, #3
 8045afa:	e0af      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8045afc:	4b5a      	ldr	r3, [pc, #360]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045b00:	f003 0302 	and.w	r3, r3, #2
 8045b04:	2b00      	cmp	r3, #0
 8045b06:	d1ee      	bne.n	8045ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8045b08:	7dfb      	ldrb	r3, [r7, #23]
 8045b0a:	2b01      	cmp	r3, #1
 8045b0c:	d105      	bne.n	8045b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8045b0e:	4b56      	ldr	r3, [pc, #344]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045b12:	4a55      	ldr	r2, [pc, #340]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8045b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8045b1a:	687b      	ldr	r3, [r7, #4]
 8045b1c:	699b      	ldr	r3, [r3, #24]
 8045b1e:	2b00      	cmp	r3, #0
 8045b20:	f000 809b 	beq.w	8045c5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8045b24:	4b50      	ldr	r3, [pc, #320]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045b26:	689b      	ldr	r3, [r3, #8]
 8045b28:	f003 030c 	and.w	r3, r3, #12
 8045b2c:	2b08      	cmp	r3, #8
 8045b2e:	d05c      	beq.n	8045bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8045b30:	687b      	ldr	r3, [r7, #4]
 8045b32:	699b      	ldr	r3, [r3, #24]
 8045b34:	2b02      	cmp	r3, #2
 8045b36:	d141      	bne.n	8045bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8045b38:	4b4c      	ldr	r3, [pc, #304]	; (8045c6c <HAL_RCC_OscConfig+0x4ec>)
 8045b3a:	2200      	movs	r2, #0
 8045b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8045b3e:	f7fe fb93 	bl	8044268 <HAL_GetTick>
 8045b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045b44:	e008      	b.n	8045b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8045b46:	f7fe fb8f 	bl	8044268 <HAL_GetTick>
 8045b4a:	4602      	mov	r2, r0
 8045b4c:	693b      	ldr	r3, [r7, #16]
 8045b4e:	1ad3      	subs	r3, r2, r3
 8045b50:	2b02      	cmp	r3, #2
 8045b52:	d901      	bls.n	8045b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8045b54:	2303      	movs	r3, #3
 8045b56:	e081      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045b58:	4b43      	ldr	r3, [pc, #268]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045b5a:	681b      	ldr	r3, [r3, #0]
 8045b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045b60:	2b00      	cmp	r3, #0
 8045b62:	d1f0      	bne.n	8045b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8045b64:	687b      	ldr	r3, [r7, #4]
 8045b66:	69da      	ldr	r2, [r3, #28]
 8045b68:	687b      	ldr	r3, [r7, #4]
 8045b6a:	6a1b      	ldr	r3, [r3, #32]
 8045b6c:	431a      	orrs	r2, r3
 8045b6e:	687b      	ldr	r3, [r7, #4]
 8045b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045b72:	019b      	lsls	r3, r3, #6
 8045b74:	431a      	orrs	r2, r3
 8045b76:	687b      	ldr	r3, [r7, #4]
 8045b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045b7a:	085b      	lsrs	r3, r3, #1
 8045b7c:	3b01      	subs	r3, #1
 8045b7e:	041b      	lsls	r3, r3, #16
 8045b80:	431a      	orrs	r2, r3
 8045b82:	687b      	ldr	r3, [r7, #4]
 8045b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045b86:	061b      	lsls	r3, r3, #24
 8045b88:	4937      	ldr	r1, [pc, #220]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045b8a:	4313      	orrs	r3, r2
 8045b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8045b8e:	4b37      	ldr	r3, [pc, #220]	; (8045c6c <HAL_RCC_OscConfig+0x4ec>)
 8045b90:	2201      	movs	r2, #1
 8045b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8045b94:	f7fe fb68 	bl	8044268 <HAL_GetTick>
 8045b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045b9a:	e008      	b.n	8045bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8045b9c:	f7fe fb64 	bl	8044268 <HAL_GetTick>
 8045ba0:	4602      	mov	r2, r0
 8045ba2:	693b      	ldr	r3, [r7, #16]
 8045ba4:	1ad3      	subs	r3, r2, r3
 8045ba6:	2b02      	cmp	r3, #2
 8045ba8:	d901      	bls.n	8045bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8045baa:	2303      	movs	r3, #3
 8045bac:	e056      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045bae:	4b2e      	ldr	r3, [pc, #184]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045bb0:	681b      	ldr	r3, [r3, #0]
 8045bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045bb6:	2b00      	cmp	r3, #0
 8045bb8:	d0f0      	beq.n	8045b9c <HAL_RCC_OscConfig+0x41c>
 8045bba:	e04e      	b.n	8045c5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8045bbc:	4b2b      	ldr	r3, [pc, #172]	; (8045c6c <HAL_RCC_OscConfig+0x4ec>)
 8045bbe:	2200      	movs	r2, #0
 8045bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8045bc2:	f7fe fb51 	bl	8044268 <HAL_GetTick>
 8045bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045bc8:	e008      	b.n	8045bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8045bca:	f7fe fb4d 	bl	8044268 <HAL_GetTick>
 8045bce:	4602      	mov	r2, r0
 8045bd0:	693b      	ldr	r3, [r7, #16]
 8045bd2:	1ad3      	subs	r3, r2, r3
 8045bd4:	2b02      	cmp	r3, #2
 8045bd6:	d901      	bls.n	8045bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8045bd8:	2303      	movs	r3, #3
 8045bda:	e03f      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045bdc:	4b22      	ldr	r3, [pc, #136]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045bde:	681b      	ldr	r3, [r3, #0]
 8045be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045be4:	2b00      	cmp	r3, #0
 8045be6:	d1f0      	bne.n	8045bca <HAL_RCC_OscConfig+0x44a>
 8045be8:	e037      	b.n	8045c5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8045bea:	687b      	ldr	r3, [r7, #4]
 8045bec:	699b      	ldr	r3, [r3, #24]
 8045bee:	2b01      	cmp	r3, #1
 8045bf0:	d101      	bne.n	8045bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8045bf2:	2301      	movs	r3, #1
 8045bf4:	e032      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8045bf6:	4b1c      	ldr	r3, [pc, #112]	; (8045c68 <HAL_RCC_OscConfig+0x4e8>)
 8045bf8:	685b      	ldr	r3, [r3, #4]
 8045bfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8045bfc:	687b      	ldr	r3, [r7, #4]
 8045bfe:	699b      	ldr	r3, [r3, #24]
 8045c00:	2b01      	cmp	r3, #1
 8045c02:	d028      	beq.n	8045c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045c04:	68fb      	ldr	r3, [r7, #12]
 8045c06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8045c0a:	687b      	ldr	r3, [r7, #4]
 8045c0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8045c0e:	429a      	cmp	r2, r3
 8045c10:	d121      	bne.n	8045c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8045c12:	68fb      	ldr	r3, [r7, #12]
 8045c14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8045c18:	687b      	ldr	r3, [r7, #4]
 8045c1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045c1c:	429a      	cmp	r2, r3
 8045c1e:	d11a      	bne.n	8045c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8045c20:	68fa      	ldr	r2, [r7, #12]
 8045c22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8045c26:	4013      	ands	r3, r2
 8045c28:	687a      	ldr	r2, [r7, #4]
 8045c2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8045c2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8045c2e:	4293      	cmp	r3, r2
 8045c30:	d111      	bne.n	8045c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8045c32:	68fb      	ldr	r3, [r7, #12]
 8045c34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8045c38:	687b      	ldr	r3, [r7, #4]
 8045c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045c3c:	085b      	lsrs	r3, r3, #1
 8045c3e:	3b01      	subs	r3, #1
 8045c40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8045c42:	429a      	cmp	r2, r3
 8045c44:	d107      	bne.n	8045c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8045c46:	68fb      	ldr	r3, [r7, #12]
 8045c48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8045c4c:	687b      	ldr	r3, [r7, #4]
 8045c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045c50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8045c52:	429a      	cmp	r2, r3
 8045c54:	d001      	beq.n	8045c5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8045c56:	2301      	movs	r3, #1
 8045c58:	e000      	b.n	8045c5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8045c5a:	2300      	movs	r3, #0
}
 8045c5c:	4618      	mov	r0, r3
 8045c5e:	3718      	adds	r7, #24
 8045c60:	46bd      	mov	sp, r7
 8045c62:	bd80      	pop	{r7, pc}
 8045c64:	40007000 	.word	0x40007000
 8045c68:	40023800 	.word	0x40023800
 8045c6c:	42470060 	.word	0x42470060

08045c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8045c70:	b580      	push	{r7, lr}
 8045c72:	b084      	sub	sp, #16
 8045c74:	af00      	add	r7, sp, #0
 8045c76:	6078      	str	r0, [r7, #4]
 8045c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8045c7a:	687b      	ldr	r3, [r7, #4]
 8045c7c:	2b00      	cmp	r3, #0
 8045c7e:	d101      	bne.n	8045c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8045c80:	2301      	movs	r3, #1
 8045c82:	e0cc      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8045c84:	4b68      	ldr	r3, [pc, #416]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045c86:	681b      	ldr	r3, [r3, #0]
 8045c88:	f003 0307 	and.w	r3, r3, #7
 8045c8c:	683a      	ldr	r2, [r7, #0]
 8045c8e:	429a      	cmp	r2, r3
 8045c90:	d90c      	bls.n	8045cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8045c92:	4b65      	ldr	r3, [pc, #404]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045c94:	683a      	ldr	r2, [r7, #0]
 8045c96:	b2d2      	uxtb	r2, r2
 8045c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8045c9a:	4b63      	ldr	r3, [pc, #396]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045c9c:	681b      	ldr	r3, [r3, #0]
 8045c9e:	f003 0307 	and.w	r3, r3, #7
 8045ca2:	683a      	ldr	r2, [r7, #0]
 8045ca4:	429a      	cmp	r2, r3
 8045ca6:	d001      	beq.n	8045cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8045ca8:	2301      	movs	r3, #1
 8045caa:	e0b8      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8045cac:	687b      	ldr	r3, [r7, #4]
 8045cae:	681b      	ldr	r3, [r3, #0]
 8045cb0:	f003 0302 	and.w	r3, r3, #2
 8045cb4:	2b00      	cmp	r3, #0
 8045cb6:	d020      	beq.n	8045cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8045cb8:	687b      	ldr	r3, [r7, #4]
 8045cba:	681b      	ldr	r3, [r3, #0]
 8045cbc:	f003 0304 	and.w	r3, r3, #4
 8045cc0:	2b00      	cmp	r3, #0
 8045cc2:	d005      	beq.n	8045cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8045cc4:	4b59      	ldr	r3, [pc, #356]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045cc6:	689b      	ldr	r3, [r3, #8]
 8045cc8:	4a58      	ldr	r2, [pc, #352]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8045cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8045cd0:	687b      	ldr	r3, [r7, #4]
 8045cd2:	681b      	ldr	r3, [r3, #0]
 8045cd4:	f003 0308 	and.w	r3, r3, #8
 8045cd8:	2b00      	cmp	r3, #0
 8045cda:	d005      	beq.n	8045ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8045cdc:	4b53      	ldr	r3, [pc, #332]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045cde:	689b      	ldr	r3, [r3, #8]
 8045ce0:	4a52      	ldr	r2, [pc, #328]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8045ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8045ce8:	4b50      	ldr	r3, [pc, #320]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045cea:	689b      	ldr	r3, [r3, #8]
 8045cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8045cf0:	687b      	ldr	r3, [r7, #4]
 8045cf2:	689b      	ldr	r3, [r3, #8]
 8045cf4:	494d      	ldr	r1, [pc, #308]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045cf6:	4313      	orrs	r3, r2
 8045cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8045cfa:	687b      	ldr	r3, [r7, #4]
 8045cfc:	681b      	ldr	r3, [r3, #0]
 8045cfe:	f003 0301 	and.w	r3, r3, #1
 8045d02:	2b00      	cmp	r3, #0
 8045d04:	d044      	beq.n	8045d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8045d06:	687b      	ldr	r3, [r7, #4]
 8045d08:	685b      	ldr	r3, [r3, #4]
 8045d0a:	2b01      	cmp	r3, #1
 8045d0c:	d107      	bne.n	8045d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045d0e:	4b47      	ldr	r3, [pc, #284]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d10:	681b      	ldr	r3, [r3, #0]
 8045d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045d16:	2b00      	cmp	r3, #0
 8045d18:	d119      	bne.n	8045d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8045d1a:	2301      	movs	r3, #1
 8045d1c:	e07f      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8045d1e:	687b      	ldr	r3, [r7, #4]
 8045d20:	685b      	ldr	r3, [r3, #4]
 8045d22:	2b02      	cmp	r3, #2
 8045d24:	d003      	beq.n	8045d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8045d26:	687b      	ldr	r3, [r7, #4]
 8045d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8045d2a:	2b03      	cmp	r3, #3
 8045d2c:	d107      	bne.n	8045d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045d2e:	4b3f      	ldr	r3, [pc, #252]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d30:	681b      	ldr	r3, [r3, #0]
 8045d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045d36:	2b00      	cmp	r3, #0
 8045d38:	d109      	bne.n	8045d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8045d3a:	2301      	movs	r3, #1
 8045d3c:	e06f      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045d3e:	4b3b      	ldr	r3, [pc, #236]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d40:	681b      	ldr	r3, [r3, #0]
 8045d42:	f003 0302 	and.w	r3, r3, #2
 8045d46:	2b00      	cmp	r3, #0
 8045d48:	d101      	bne.n	8045d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8045d4a:	2301      	movs	r3, #1
 8045d4c:	e067      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8045d4e:	4b37      	ldr	r3, [pc, #220]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d50:	689b      	ldr	r3, [r3, #8]
 8045d52:	f023 0203 	bic.w	r2, r3, #3
 8045d56:	687b      	ldr	r3, [r7, #4]
 8045d58:	685b      	ldr	r3, [r3, #4]
 8045d5a:	4934      	ldr	r1, [pc, #208]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d5c:	4313      	orrs	r3, r2
 8045d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8045d60:	f7fe fa82 	bl	8044268 <HAL_GetTick>
 8045d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8045d66:	e00a      	b.n	8045d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8045d68:	f7fe fa7e 	bl	8044268 <HAL_GetTick>
 8045d6c:	4602      	mov	r2, r0
 8045d6e:	68fb      	ldr	r3, [r7, #12]
 8045d70:	1ad3      	subs	r3, r2, r3
 8045d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8045d76:	4293      	cmp	r3, r2
 8045d78:	d901      	bls.n	8045d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8045d7a:	2303      	movs	r3, #3
 8045d7c:	e04f      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8045d7e:	4b2b      	ldr	r3, [pc, #172]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045d80:	689b      	ldr	r3, [r3, #8]
 8045d82:	f003 020c 	and.w	r2, r3, #12
 8045d86:	687b      	ldr	r3, [r7, #4]
 8045d88:	685b      	ldr	r3, [r3, #4]
 8045d8a:	009b      	lsls	r3, r3, #2
 8045d8c:	429a      	cmp	r2, r3
 8045d8e:	d1eb      	bne.n	8045d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8045d90:	4b25      	ldr	r3, [pc, #148]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045d92:	681b      	ldr	r3, [r3, #0]
 8045d94:	f003 0307 	and.w	r3, r3, #7
 8045d98:	683a      	ldr	r2, [r7, #0]
 8045d9a:	429a      	cmp	r2, r3
 8045d9c:	d20c      	bcs.n	8045db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8045d9e:	4b22      	ldr	r3, [pc, #136]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045da0:	683a      	ldr	r2, [r7, #0]
 8045da2:	b2d2      	uxtb	r2, r2
 8045da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8045da6:	4b20      	ldr	r3, [pc, #128]	; (8045e28 <HAL_RCC_ClockConfig+0x1b8>)
 8045da8:	681b      	ldr	r3, [r3, #0]
 8045daa:	f003 0307 	and.w	r3, r3, #7
 8045dae:	683a      	ldr	r2, [r7, #0]
 8045db0:	429a      	cmp	r2, r3
 8045db2:	d001      	beq.n	8045db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8045db4:	2301      	movs	r3, #1
 8045db6:	e032      	b.n	8045e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8045db8:	687b      	ldr	r3, [r7, #4]
 8045dba:	681b      	ldr	r3, [r3, #0]
 8045dbc:	f003 0304 	and.w	r3, r3, #4
 8045dc0:	2b00      	cmp	r3, #0
 8045dc2:	d008      	beq.n	8045dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8045dc4:	4b19      	ldr	r3, [pc, #100]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045dc6:	689b      	ldr	r3, [r3, #8]
 8045dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8045dcc:	687b      	ldr	r3, [r7, #4]
 8045dce:	68db      	ldr	r3, [r3, #12]
 8045dd0:	4916      	ldr	r1, [pc, #88]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045dd2:	4313      	orrs	r3, r2
 8045dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8045dd6:	687b      	ldr	r3, [r7, #4]
 8045dd8:	681b      	ldr	r3, [r3, #0]
 8045dda:	f003 0308 	and.w	r3, r3, #8
 8045dde:	2b00      	cmp	r3, #0
 8045de0:	d009      	beq.n	8045df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8045de2:	4b12      	ldr	r3, [pc, #72]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045de4:	689b      	ldr	r3, [r3, #8]
 8045de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8045dea:	687b      	ldr	r3, [r7, #4]
 8045dec:	691b      	ldr	r3, [r3, #16]
 8045dee:	00db      	lsls	r3, r3, #3
 8045df0:	490e      	ldr	r1, [pc, #56]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045df2:	4313      	orrs	r3, r2
 8045df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8045df6:	f000 f821 	bl	8045e3c <HAL_RCC_GetSysClockFreq>
 8045dfa:	4602      	mov	r2, r0
 8045dfc:	4b0b      	ldr	r3, [pc, #44]	; (8045e2c <HAL_RCC_ClockConfig+0x1bc>)
 8045dfe:	689b      	ldr	r3, [r3, #8]
 8045e00:	091b      	lsrs	r3, r3, #4
 8045e02:	f003 030f 	and.w	r3, r3, #15
 8045e06:	490a      	ldr	r1, [pc, #40]	; (8045e30 <HAL_RCC_ClockConfig+0x1c0>)
 8045e08:	5ccb      	ldrb	r3, [r1, r3]
 8045e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8045e0e:	4a09      	ldr	r2, [pc, #36]	; (8045e34 <HAL_RCC_ClockConfig+0x1c4>)
 8045e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8045e12:	4b09      	ldr	r3, [pc, #36]	; (8045e38 <HAL_RCC_ClockConfig+0x1c8>)
 8045e14:	681b      	ldr	r3, [r3, #0]
 8045e16:	4618      	mov	r0, r3
 8045e18:	f7fe f9e2 	bl	80441e0 <HAL_InitTick>

  return HAL_OK;
 8045e1c:	2300      	movs	r3, #0
}
 8045e1e:	4618      	mov	r0, r3
 8045e20:	3710      	adds	r7, #16
 8045e22:	46bd      	mov	sp, r7
 8045e24:	bd80      	pop	{r7, pc}
 8045e26:	bf00      	nop
 8045e28:	40023c00 	.word	0x40023c00
 8045e2c:	40023800 	.word	0x40023800
 8045e30:	0804d758 	.word	0x0804d758
 8045e34:	2000000c 	.word	0x2000000c
 8045e38:	20000010 	.word	0x20000010

08045e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8045e3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8045e40:	b084      	sub	sp, #16
 8045e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8045e44:	2300      	movs	r3, #0
 8045e46:	607b      	str	r3, [r7, #4]
 8045e48:	2300      	movs	r3, #0
 8045e4a:	60fb      	str	r3, [r7, #12]
 8045e4c:	2300      	movs	r3, #0
 8045e4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8045e50:	2300      	movs	r3, #0
 8045e52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8045e54:	4b67      	ldr	r3, [pc, #412]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045e56:	689b      	ldr	r3, [r3, #8]
 8045e58:	f003 030c 	and.w	r3, r3, #12
 8045e5c:	2b08      	cmp	r3, #8
 8045e5e:	d00d      	beq.n	8045e7c <HAL_RCC_GetSysClockFreq+0x40>
 8045e60:	2b08      	cmp	r3, #8
 8045e62:	f200 80bd 	bhi.w	8045fe0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8045e66:	2b00      	cmp	r3, #0
 8045e68:	d002      	beq.n	8045e70 <HAL_RCC_GetSysClockFreq+0x34>
 8045e6a:	2b04      	cmp	r3, #4
 8045e6c:	d003      	beq.n	8045e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8045e6e:	e0b7      	b.n	8045fe0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8045e70:	4b61      	ldr	r3, [pc, #388]	; (8045ff8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8045e72:	60bb      	str	r3, [r7, #8]
       break;
 8045e74:	e0b7      	b.n	8045fe6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8045e76:	4b61      	ldr	r3, [pc, #388]	; (8045ffc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8045e78:	60bb      	str	r3, [r7, #8]
      break;
 8045e7a:	e0b4      	b.n	8045fe6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8045e7c:	4b5d      	ldr	r3, [pc, #372]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045e7e:	685b      	ldr	r3, [r3, #4]
 8045e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8045e84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8045e86:	4b5b      	ldr	r3, [pc, #364]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045e88:	685b      	ldr	r3, [r3, #4]
 8045e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8045e8e:	2b00      	cmp	r3, #0
 8045e90:	d04d      	beq.n	8045f2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045e92:	4b58      	ldr	r3, [pc, #352]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045e94:	685b      	ldr	r3, [r3, #4]
 8045e96:	099b      	lsrs	r3, r3, #6
 8045e98:	461a      	mov	r2, r3
 8045e9a:	f04f 0300 	mov.w	r3, #0
 8045e9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8045ea2:	f04f 0100 	mov.w	r1, #0
 8045ea6:	ea02 0800 	and.w	r8, r2, r0
 8045eaa:	ea03 0901 	and.w	r9, r3, r1
 8045eae:	4640      	mov	r0, r8
 8045eb0:	4649      	mov	r1, r9
 8045eb2:	f04f 0200 	mov.w	r2, #0
 8045eb6:	f04f 0300 	mov.w	r3, #0
 8045eba:	014b      	lsls	r3, r1, #5
 8045ebc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8045ec0:	0142      	lsls	r2, r0, #5
 8045ec2:	4610      	mov	r0, r2
 8045ec4:	4619      	mov	r1, r3
 8045ec6:	ebb0 0008 	subs.w	r0, r0, r8
 8045eca:	eb61 0109 	sbc.w	r1, r1, r9
 8045ece:	f04f 0200 	mov.w	r2, #0
 8045ed2:	f04f 0300 	mov.w	r3, #0
 8045ed6:	018b      	lsls	r3, r1, #6
 8045ed8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8045edc:	0182      	lsls	r2, r0, #6
 8045ede:	1a12      	subs	r2, r2, r0
 8045ee0:	eb63 0301 	sbc.w	r3, r3, r1
 8045ee4:	f04f 0000 	mov.w	r0, #0
 8045ee8:	f04f 0100 	mov.w	r1, #0
 8045eec:	00d9      	lsls	r1, r3, #3
 8045eee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8045ef2:	00d0      	lsls	r0, r2, #3
 8045ef4:	4602      	mov	r2, r0
 8045ef6:	460b      	mov	r3, r1
 8045ef8:	eb12 0208 	adds.w	r2, r2, r8
 8045efc:	eb43 0309 	adc.w	r3, r3, r9
 8045f00:	f04f 0000 	mov.w	r0, #0
 8045f04:	f04f 0100 	mov.w	r1, #0
 8045f08:	0259      	lsls	r1, r3, #9
 8045f0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8045f0e:	0250      	lsls	r0, r2, #9
 8045f10:	4602      	mov	r2, r0
 8045f12:	460b      	mov	r3, r1
 8045f14:	4610      	mov	r0, r2
 8045f16:	4619      	mov	r1, r3
 8045f18:	687b      	ldr	r3, [r7, #4]
 8045f1a:	461a      	mov	r2, r3
 8045f1c:	f04f 0300 	mov.w	r3, #0
 8045f20:	f7fa feb2 	bl	8040c88 <__aeabi_uldivmod>
 8045f24:	4602      	mov	r2, r0
 8045f26:	460b      	mov	r3, r1
 8045f28:	4613      	mov	r3, r2
 8045f2a:	60fb      	str	r3, [r7, #12]
 8045f2c:	e04a      	b.n	8045fc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8045f2e:	4b31      	ldr	r3, [pc, #196]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045f30:	685b      	ldr	r3, [r3, #4]
 8045f32:	099b      	lsrs	r3, r3, #6
 8045f34:	461a      	mov	r2, r3
 8045f36:	f04f 0300 	mov.w	r3, #0
 8045f3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8045f3e:	f04f 0100 	mov.w	r1, #0
 8045f42:	ea02 0400 	and.w	r4, r2, r0
 8045f46:	ea03 0501 	and.w	r5, r3, r1
 8045f4a:	4620      	mov	r0, r4
 8045f4c:	4629      	mov	r1, r5
 8045f4e:	f04f 0200 	mov.w	r2, #0
 8045f52:	f04f 0300 	mov.w	r3, #0
 8045f56:	014b      	lsls	r3, r1, #5
 8045f58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8045f5c:	0142      	lsls	r2, r0, #5
 8045f5e:	4610      	mov	r0, r2
 8045f60:	4619      	mov	r1, r3
 8045f62:	1b00      	subs	r0, r0, r4
 8045f64:	eb61 0105 	sbc.w	r1, r1, r5
 8045f68:	f04f 0200 	mov.w	r2, #0
 8045f6c:	f04f 0300 	mov.w	r3, #0
 8045f70:	018b      	lsls	r3, r1, #6
 8045f72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8045f76:	0182      	lsls	r2, r0, #6
 8045f78:	1a12      	subs	r2, r2, r0
 8045f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8045f7e:	f04f 0000 	mov.w	r0, #0
 8045f82:	f04f 0100 	mov.w	r1, #0
 8045f86:	00d9      	lsls	r1, r3, #3
 8045f88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8045f8c:	00d0      	lsls	r0, r2, #3
 8045f8e:	4602      	mov	r2, r0
 8045f90:	460b      	mov	r3, r1
 8045f92:	1912      	adds	r2, r2, r4
 8045f94:	eb45 0303 	adc.w	r3, r5, r3
 8045f98:	f04f 0000 	mov.w	r0, #0
 8045f9c:	f04f 0100 	mov.w	r1, #0
 8045fa0:	0299      	lsls	r1, r3, #10
 8045fa2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8045fa6:	0290      	lsls	r0, r2, #10
 8045fa8:	4602      	mov	r2, r0
 8045faa:	460b      	mov	r3, r1
 8045fac:	4610      	mov	r0, r2
 8045fae:	4619      	mov	r1, r3
 8045fb0:	687b      	ldr	r3, [r7, #4]
 8045fb2:	461a      	mov	r2, r3
 8045fb4:	f04f 0300 	mov.w	r3, #0
 8045fb8:	f7fa fe66 	bl	8040c88 <__aeabi_uldivmod>
 8045fbc:	4602      	mov	r2, r0
 8045fbe:	460b      	mov	r3, r1
 8045fc0:	4613      	mov	r3, r2
 8045fc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8045fc4:	4b0b      	ldr	r3, [pc, #44]	; (8045ff4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8045fc6:	685b      	ldr	r3, [r3, #4]
 8045fc8:	0c1b      	lsrs	r3, r3, #16
 8045fca:	f003 0303 	and.w	r3, r3, #3
 8045fce:	3301      	adds	r3, #1
 8045fd0:	005b      	lsls	r3, r3, #1
 8045fd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8045fd4:	68fa      	ldr	r2, [r7, #12]
 8045fd6:	683b      	ldr	r3, [r7, #0]
 8045fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8045fdc:	60bb      	str	r3, [r7, #8]
      break;
 8045fde:	e002      	b.n	8045fe6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8045fe0:	4b05      	ldr	r3, [pc, #20]	; (8045ff8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8045fe2:	60bb      	str	r3, [r7, #8]
      break;
 8045fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8045fe6:	68bb      	ldr	r3, [r7, #8]
}
 8045fe8:	4618      	mov	r0, r3
 8045fea:	3710      	adds	r7, #16
 8045fec:	46bd      	mov	sp, r7
 8045fee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8045ff2:	bf00      	nop
 8045ff4:	40023800 	.word	0x40023800
 8045ff8:	00f42400 	.word	0x00f42400
 8045ffc:	007a1200 	.word	0x007a1200

08046000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046000:	b480      	push	{r7}
 8046002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046004:	4b03      	ldr	r3, [pc, #12]	; (8046014 <HAL_RCC_GetHCLKFreq+0x14>)
 8046006:	681b      	ldr	r3, [r3, #0]
}
 8046008:	4618      	mov	r0, r3
 804600a:	46bd      	mov	sp, r7
 804600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046010:	4770      	bx	lr
 8046012:	bf00      	nop
 8046014:	2000000c 	.word	0x2000000c

08046018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046018:	b580      	push	{r7, lr}
 804601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 804601c:	f7ff fff0 	bl	8046000 <HAL_RCC_GetHCLKFreq>
 8046020:	4602      	mov	r2, r0
 8046022:	4b05      	ldr	r3, [pc, #20]	; (8046038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8046024:	689b      	ldr	r3, [r3, #8]
 8046026:	0a9b      	lsrs	r3, r3, #10
 8046028:	f003 0307 	and.w	r3, r3, #7
 804602c:	4903      	ldr	r1, [pc, #12]	; (804603c <HAL_RCC_GetPCLK1Freq+0x24>)
 804602e:	5ccb      	ldrb	r3, [r1, r3]
 8046030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046034:	4618      	mov	r0, r3
 8046036:	bd80      	pop	{r7, pc}
 8046038:	40023800 	.word	0x40023800
 804603c:	0804d768 	.word	0x0804d768

08046040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8046040:	b580      	push	{r7, lr}
 8046042:	b082      	sub	sp, #8
 8046044:	af00      	add	r7, sp, #0
 8046046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8046048:	687b      	ldr	r3, [r7, #4]
 804604a:	2b00      	cmp	r3, #0
 804604c:	d101      	bne.n	8046052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 804604e:	2301      	movs	r3, #1
 8046050:	e07b      	b.n	804614a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8046052:	687b      	ldr	r3, [r7, #4]
 8046054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046056:	2b00      	cmp	r3, #0
 8046058:	d108      	bne.n	804606c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 804605a:	687b      	ldr	r3, [r7, #4]
 804605c:	685b      	ldr	r3, [r3, #4]
 804605e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046062:	d009      	beq.n	8046078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8046064:	687b      	ldr	r3, [r7, #4]
 8046066:	2200      	movs	r2, #0
 8046068:	61da      	str	r2, [r3, #28]
 804606a:	e005      	b.n	8046078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804606c:	687b      	ldr	r3, [r7, #4]
 804606e:	2200      	movs	r2, #0
 8046070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8046072:	687b      	ldr	r3, [r7, #4]
 8046074:	2200      	movs	r2, #0
 8046076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8046078:	687b      	ldr	r3, [r7, #4]
 804607a:	2200      	movs	r2, #0
 804607c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 804607e:	687b      	ldr	r3, [r7, #4]
 8046080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046084:	b2db      	uxtb	r3, r3
 8046086:	2b00      	cmp	r3, #0
 8046088:	d106      	bne.n	8046098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804608a:	687b      	ldr	r3, [r7, #4]
 804608c:	2200      	movs	r2, #0
 804608e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8046092:	6878      	ldr	r0, [r7, #4]
 8046094:	f7fd fdc0 	bl	8043c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8046098:	687b      	ldr	r3, [r7, #4]
 804609a:	2202      	movs	r2, #2
 804609c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80460a0:	687b      	ldr	r3, [r7, #4]
 80460a2:	681b      	ldr	r3, [r3, #0]
 80460a4:	681a      	ldr	r2, [r3, #0]
 80460a6:	687b      	ldr	r3, [r7, #4]
 80460a8:	681b      	ldr	r3, [r3, #0]
 80460aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80460ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80460b0:	687b      	ldr	r3, [r7, #4]
 80460b2:	685b      	ldr	r3, [r3, #4]
 80460b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80460b8:	687b      	ldr	r3, [r7, #4]
 80460ba:	689b      	ldr	r3, [r3, #8]
 80460bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80460c0:	431a      	orrs	r2, r3
 80460c2:	687b      	ldr	r3, [r7, #4]
 80460c4:	68db      	ldr	r3, [r3, #12]
 80460c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80460ca:	431a      	orrs	r2, r3
 80460cc:	687b      	ldr	r3, [r7, #4]
 80460ce:	691b      	ldr	r3, [r3, #16]
 80460d0:	f003 0302 	and.w	r3, r3, #2
 80460d4:	431a      	orrs	r2, r3
 80460d6:	687b      	ldr	r3, [r7, #4]
 80460d8:	695b      	ldr	r3, [r3, #20]
 80460da:	f003 0301 	and.w	r3, r3, #1
 80460de:	431a      	orrs	r2, r3
 80460e0:	687b      	ldr	r3, [r7, #4]
 80460e2:	699b      	ldr	r3, [r3, #24]
 80460e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80460e8:	431a      	orrs	r2, r3
 80460ea:	687b      	ldr	r3, [r7, #4]
 80460ec:	69db      	ldr	r3, [r3, #28]
 80460ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80460f2:	431a      	orrs	r2, r3
 80460f4:	687b      	ldr	r3, [r7, #4]
 80460f6:	6a1b      	ldr	r3, [r3, #32]
 80460f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80460fc:	ea42 0103 	orr.w	r1, r2, r3
 8046100:	687b      	ldr	r3, [r7, #4]
 8046102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8046108:	687b      	ldr	r3, [r7, #4]
 804610a:	681b      	ldr	r3, [r3, #0]
 804610c:	430a      	orrs	r2, r1
 804610e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8046110:	687b      	ldr	r3, [r7, #4]
 8046112:	699b      	ldr	r3, [r3, #24]
 8046114:	0c1b      	lsrs	r3, r3, #16
 8046116:	f003 0104 	and.w	r1, r3, #4
 804611a:	687b      	ldr	r3, [r7, #4]
 804611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804611e:	f003 0210 	and.w	r2, r3, #16
 8046122:	687b      	ldr	r3, [r7, #4]
 8046124:	681b      	ldr	r3, [r3, #0]
 8046126:	430a      	orrs	r2, r1
 8046128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 804612a:	687b      	ldr	r3, [r7, #4]
 804612c:	681b      	ldr	r3, [r3, #0]
 804612e:	69da      	ldr	r2, [r3, #28]
 8046130:	687b      	ldr	r3, [r7, #4]
 8046132:	681b      	ldr	r3, [r3, #0]
 8046134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8046138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804613a:	687b      	ldr	r3, [r7, #4]
 804613c:	2200      	movs	r2, #0
 804613e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8046140:	687b      	ldr	r3, [r7, #4]
 8046142:	2201      	movs	r2, #1
 8046144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8046148:	2300      	movs	r3, #0
}
 804614a:	4618      	mov	r0, r3
 804614c:	3708      	adds	r7, #8
 804614e:	46bd      	mov	sp, r7
 8046150:	bd80      	pop	{r7, pc}

08046152 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8046152:	b580      	push	{r7, lr}
 8046154:	b088      	sub	sp, #32
 8046156:	af02      	add	r7, sp, #8
 8046158:	60f8      	str	r0, [r7, #12]
 804615a:	60b9      	str	r1, [r7, #8]
 804615c:	603b      	str	r3, [r7, #0]
 804615e:	4613      	mov	r3, r2
 8046160:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8046162:	2300      	movs	r3, #0
 8046164:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8046166:	68fb      	ldr	r3, [r7, #12]
 8046168:	685b      	ldr	r3, [r3, #4]
 804616a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804616e:	d112      	bne.n	8046196 <HAL_SPI_Receive+0x44>
 8046170:	68fb      	ldr	r3, [r7, #12]
 8046172:	689b      	ldr	r3, [r3, #8]
 8046174:	2b00      	cmp	r3, #0
 8046176:	d10e      	bne.n	8046196 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8046178:	68fb      	ldr	r3, [r7, #12]
 804617a:	2204      	movs	r2, #4
 804617c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8046180:	88fa      	ldrh	r2, [r7, #6]
 8046182:	683b      	ldr	r3, [r7, #0]
 8046184:	9300      	str	r3, [sp, #0]
 8046186:	4613      	mov	r3, r2
 8046188:	68ba      	ldr	r2, [r7, #8]
 804618a:	68b9      	ldr	r1, [r7, #8]
 804618c:	68f8      	ldr	r0, [r7, #12]
 804618e:	f000 f8f1 	bl	8046374 <HAL_SPI_TransmitReceive>
 8046192:	4603      	mov	r3, r0
 8046194:	e0ea      	b.n	804636c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8046196:	68fb      	ldr	r3, [r7, #12]
 8046198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804619c:	2b01      	cmp	r3, #1
 804619e:	d101      	bne.n	80461a4 <HAL_SPI_Receive+0x52>
 80461a0:	2302      	movs	r3, #2
 80461a2:	e0e3      	b.n	804636c <HAL_SPI_Receive+0x21a>
 80461a4:	68fb      	ldr	r3, [r7, #12]
 80461a6:	2201      	movs	r2, #1
 80461a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80461ac:	f7fe f85c 	bl	8044268 <HAL_GetTick>
 80461b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80461b2:	68fb      	ldr	r3, [r7, #12]
 80461b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80461b8:	b2db      	uxtb	r3, r3
 80461ba:	2b01      	cmp	r3, #1
 80461bc:	d002      	beq.n	80461c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80461be:	2302      	movs	r3, #2
 80461c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80461c2:	e0ca      	b.n	804635a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80461c4:	68bb      	ldr	r3, [r7, #8]
 80461c6:	2b00      	cmp	r3, #0
 80461c8:	d002      	beq.n	80461d0 <HAL_SPI_Receive+0x7e>
 80461ca:	88fb      	ldrh	r3, [r7, #6]
 80461cc:	2b00      	cmp	r3, #0
 80461ce:	d102      	bne.n	80461d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80461d0:	2301      	movs	r3, #1
 80461d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80461d4:	e0c1      	b.n	804635a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80461d6:	68fb      	ldr	r3, [r7, #12]
 80461d8:	2204      	movs	r2, #4
 80461da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80461de:	68fb      	ldr	r3, [r7, #12]
 80461e0:	2200      	movs	r2, #0
 80461e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80461e4:	68fb      	ldr	r3, [r7, #12]
 80461e6:	68ba      	ldr	r2, [r7, #8]
 80461e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80461ea:	68fb      	ldr	r3, [r7, #12]
 80461ec:	88fa      	ldrh	r2, [r7, #6]
 80461ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80461f0:	68fb      	ldr	r3, [r7, #12]
 80461f2:	88fa      	ldrh	r2, [r7, #6]
 80461f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80461f6:	68fb      	ldr	r3, [r7, #12]
 80461f8:	2200      	movs	r2, #0
 80461fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80461fc:	68fb      	ldr	r3, [r7, #12]
 80461fe:	2200      	movs	r2, #0
 8046200:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8046202:	68fb      	ldr	r3, [r7, #12]
 8046204:	2200      	movs	r2, #0
 8046206:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8046208:	68fb      	ldr	r3, [r7, #12]
 804620a:	2200      	movs	r2, #0
 804620c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 804620e:	68fb      	ldr	r3, [r7, #12]
 8046210:	2200      	movs	r2, #0
 8046212:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8046214:	68fb      	ldr	r3, [r7, #12]
 8046216:	689b      	ldr	r3, [r3, #8]
 8046218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804621c:	d10f      	bne.n	804623e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 804621e:	68fb      	ldr	r3, [r7, #12]
 8046220:	681b      	ldr	r3, [r3, #0]
 8046222:	681a      	ldr	r2, [r3, #0]
 8046224:	68fb      	ldr	r3, [r7, #12]
 8046226:	681b      	ldr	r3, [r3, #0]
 8046228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804622c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 804622e:	68fb      	ldr	r3, [r7, #12]
 8046230:	681b      	ldr	r3, [r3, #0]
 8046232:	681a      	ldr	r2, [r3, #0]
 8046234:	68fb      	ldr	r3, [r7, #12]
 8046236:	681b      	ldr	r3, [r3, #0]
 8046238:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804623c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804623e:	68fb      	ldr	r3, [r7, #12]
 8046240:	681b      	ldr	r3, [r3, #0]
 8046242:	681b      	ldr	r3, [r3, #0]
 8046244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046248:	2b40      	cmp	r3, #64	; 0x40
 804624a:	d007      	beq.n	804625c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804624c:	68fb      	ldr	r3, [r7, #12]
 804624e:	681b      	ldr	r3, [r3, #0]
 8046250:	681a      	ldr	r2, [r3, #0]
 8046252:	68fb      	ldr	r3, [r7, #12]
 8046254:	681b      	ldr	r3, [r3, #0]
 8046256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804625a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 804625c:	68fb      	ldr	r3, [r7, #12]
 804625e:	68db      	ldr	r3, [r3, #12]
 8046260:	2b00      	cmp	r3, #0
 8046262:	d162      	bne.n	804632a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8046264:	e02e      	b.n	80462c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8046266:	68fb      	ldr	r3, [r7, #12]
 8046268:	681b      	ldr	r3, [r3, #0]
 804626a:	689b      	ldr	r3, [r3, #8]
 804626c:	f003 0301 	and.w	r3, r3, #1
 8046270:	2b01      	cmp	r3, #1
 8046272:	d115      	bne.n	80462a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8046274:	68fb      	ldr	r3, [r7, #12]
 8046276:	681b      	ldr	r3, [r3, #0]
 8046278:	f103 020c 	add.w	r2, r3, #12
 804627c:	68fb      	ldr	r3, [r7, #12]
 804627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046280:	7812      	ldrb	r2, [r2, #0]
 8046282:	b2d2      	uxtb	r2, r2
 8046284:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8046286:	68fb      	ldr	r3, [r7, #12]
 8046288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804628a:	1c5a      	adds	r2, r3, #1
 804628c:	68fb      	ldr	r3, [r7, #12]
 804628e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8046290:	68fb      	ldr	r3, [r7, #12]
 8046292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046294:	b29b      	uxth	r3, r3
 8046296:	3b01      	subs	r3, #1
 8046298:	b29a      	uxth	r2, r3
 804629a:	68fb      	ldr	r3, [r7, #12]
 804629c:	87da      	strh	r2, [r3, #62]	; 0x3e
 804629e:	e011      	b.n	80462c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80462a0:	f7fd ffe2 	bl	8044268 <HAL_GetTick>
 80462a4:	4602      	mov	r2, r0
 80462a6:	693b      	ldr	r3, [r7, #16]
 80462a8:	1ad3      	subs	r3, r2, r3
 80462aa:	683a      	ldr	r2, [r7, #0]
 80462ac:	429a      	cmp	r2, r3
 80462ae:	d803      	bhi.n	80462b8 <HAL_SPI_Receive+0x166>
 80462b0:	683b      	ldr	r3, [r7, #0]
 80462b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80462b6:	d102      	bne.n	80462be <HAL_SPI_Receive+0x16c>
 80462b8:	683b      	ldr	r3, [r7, #0]
 80462ba:	2b00      	cmp	r3, #0
 80462bc:	d102      	bne.n	80462c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80462be:	2303      	movs	r3, #3
 80462c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80462c2:	e04a      	b.n	804635a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80462c4:	68fb      	ldr	r3, [r7, #12]
 80462c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80462c8:	b29b      	uxth	r3, r3
 80462ca:	2b00      	cmp	r3, #0
 80462cc:	d1cb      	bne.n	8046266 <HAL_SPI_Receive+0x114>
 80462ce:	e031      	b.n	8046334 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80462d0:	68fb      	ldr	r3, [r7, #12]
 80462d2:	681b      	ldr	r3, [r3, #0]
 80462d4:	689b      	ldr	r3, [r3, #8]
 80462d6:	f003 0301 	and.w	r3, r3, #1
 80462da:	2b01      	cmp	r3, #1
 80462dc:	d113      	bne.n	8046306 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80462de:	68fb      	ldr	r3, [r7, #12]
 80462e0:	681b      	ldr	r3, [r3, #0]
 80462e2:	68da      	ldr	r2, [r3, #12]
 80462e4:	68fb      	ldr	r3, [r7, #12]
 80462e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80462e8:	b292      	uxth	r2, r2
 80462ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80462ec:	68fb      	ldr	r3, [r7, #12]
 80462ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80462f0:	1c9a      	adds	r2, r3, #2
 80462f2:	68fb      	ldr	r3, [r7, #12]
 80462f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80462f6:	68fb      	ldr	r3, [r7, #12]
 80462f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80462fa:	b29b      	uxth	r3, r3
 80462fc:	3b01      	subs	r3, #1
 80462fe:	b29a      	uxth	r2, r3
 8046300:	68fb      	ldr	r3, [r7, #12]
 8046302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8046304:	e011      	b.n	804632a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8046306:	f7fd ffaf 	bl	8044268 <HAL_GetTick>
 804630a:	4602      	mov	r2, r0
 804630c:	693b      	ldr	r3, [r7, #16]
 804630e:	1ad3      	subs	r3, r2, r3
 8046310:	683a      	ldr	r2, [r7, #0]
 8046312:	429a      	cmp	r2, r3
 8046314:	d803      	bhi.n	804631e <HAL_SPI_Receive+0x1cc>
 8046316:	683b      	ldr	r3, [r7, #0]
 8046318:	f1b3 3fff 	cmp.w	r3, #4294967295
 804631c:	d102      	bne.n	8046324 <HAL_SPI_Receive+0x1d2>
 804631e:	683b      	ldr	r3, [r7, #0]
 8046320:	2b00      	cmp	r3, #0
 8046322:	d102      	bne.n	804632a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8046324:	2303      	movs	r3, #3
 8046326:	75fb      	strb	r3, [r7, #23]
          goto error;
 8046328:	e017      	b.n	804635a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 804632a:	68fb      	ldr	r3, [r7, #12]
 804632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804632e:	b29b      	uxth	r3, r3
 8046330:	2b00      	cmp	r3, #0
 8046332:	d1cd      	bne.n	80462d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8046334:	693a      	ldr	r2, [r7, #16]
 8046336:	6839      	ldr	r1, [r7, #0]
 8046338:	68f8      	ldr	r0, [r7, #12]
 804633a:	f000 fa45 	bl	80467c8 <SPI_EndRxTransaction>
 804633e:	4603      	mov	r3, r0
 8046340:	2b00      	cmp	r3, #0
 8046342:	d002      	beq.n	804634a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8046344:	68fb      	ldr	r3, [r7, #12]
 8046346:	2220      	movs	r2, #32
 8046348:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804634a:	68fb      	ldr	r3, [r7, #12]
 804634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804634e:	2b00      	cmp	r3, #0
 8046350:	d002      	beq.n	8046358 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8046352:	2301      	movs	r3, #1
 8046354:	75fb      	strb	r3, [r7, #23]
 8046356:	e000      	b.n	804635a <HAL_SPI_Receive+0x208>
  }

error :
 8046358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804635a:	68fb      	ldr	r3, [r7, #12]
 804635c:	2201      	movs	r2, #1
 804635e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8046362:	68fb      	ldr	r3, [r7, #12]
 8046364:	2200      	movs	r2, #0
 8046366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 804636a:	7dfb      	ldrb	r3, [r7, #23]
}
 804636c:	4618      	mov	r0, r3
 804636e:	3718      	adds	r7, #24
 8046370:	46bd      	mov	sp, r7
 8046372:	bd80      	pop	{r7, pc}

08046374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8046374:	b580      	push	{r7, lr}
 8046376:	b08c      	sub	sp, #48	; 0x30
 8046378:	af00      	add	r7, sp, #0
 804637a:	60f8      	str	r0, [r7, #12]
 804637c:	60b9      	str	r1, [r7, #8]
 804637e:	607a      	str	r2, [r7, #4]
 8046380:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8046382:	2301      	movs	r3, #1
 8046384:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8046386:	2300      	movs	r3, #0
 8046388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804638c:	68fb      	ldr	r3, [r7, #12]
 804638e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8046392:	2b01      	cmp	r3, #1
 8046394:	d101      	bne.n	804639a <HAL_SPI_TransmitReceive+0x26>
 8046396:	2302      	movs	r3, #2
 8046398:	e18a      	b.n	80466b0 <HAL_SPI_TransmitReceive+0x33c>
 804639a:	68fb      	ldr	r3, [r7, #12]
 804639c:	2201      	movs	r2, #1
 804639e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80463a2:	f7fd ff61 	bl	8044268 <HAL_GetTick>
 80463a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80463a8:	68fb      	ldr	r3, [r7, #12]
 80463aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80463ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80463b2:	68fb      	ldr	r3, [r7, #12]
 80463b4:	685b      	ldr	r3, [r3, #4]
 80463b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80463b8:	887b      	ldrh	r3, [r7, #2]
 80463ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80463bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80463c0:	2b01      	cmp	r3, #1
 80463c2:	d00f      	beq.n	80463e4 <HAL_SPI_TransmitReceive+0x70>
 80463c4:	69fb      	ldr	r3, [r7, #28]
 80463c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80463ca:	d107      	bne.n	80463dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80463cc:	68fb      	ldr	r3, [r7, #12]
 80463ce:	689b      	ldr	r3, [r3, #8]
 80463d0:	2b00      	cmp	r3, #0
 80463d2:	d103      	bne.n	80463dc <HAL_SPI_TransmitReceive+0x68>
 80463d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80463d8:	2b04      	cmp	r3, #4
 80463da:	d003      	beq.n	80463e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80463dc:	2302      	movs	r3, #2
 80463de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80463e2:	e15b      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80463e4:	68bb      	ldr	r3, [r7, #8]
 80463e6:	2b00      	cmp	r3, #0
 80463e8:	d005      	beq.n	80463f6 <HAL_SPI_TransmitReceive+0x82>
 80463ea:	687b      	ldr	r3, [r7, #4]
 80463ec:	2b00      	cmp	r3, #0
 80463ee:	d002      	beq.n	80463f6 <HAL_SPI_TransmitReceive+0x82>
 80463f0:	887b      	ldrh	r3, [r7, #2]
 80463f2:	2b00      	cmp	r3, #0
 80463f4:	d103      	bne.n	80463fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80463f6:	2301      	movs	r3, #1
 80463f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80463fc:	e14e      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80463fe:	68fb      	ldr	r3, [r7, #12]
 8046400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8046404:	b2db      	uxtb	r3, r3
 8046406:	2b04      	cmp	r3, #4
 8046408:	d003      	beq.n	8046412 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 804640a:	68fb      	ldr	r3, [r7, #12]
 804640c:	2205      	movs	r2, #5
 804640e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8046412:	68fb      	ldr	r3, [r7, #12]
 8046414:	2200      	movs	r2, #0
 8046416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8046418:	68fb      	ldr	r3, [r7, #12]
 804641a:	687a      	ldr	r2, [r7, #4]
 804641c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 804641e:	68fb      	ldr	r3, [r7, #12]
 8046420:	887a      	ldrh	r2, [r7, #2]
 8046422:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8046424:	68fb      	ldr	r3, [r7, #12]
 8046426:	887a      	ldrh	r2, [r7, #2]
 8046428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804642a:	68fb      	ldr	r3, [r7, #12]
 804642c:	68ba      	ldr	r2, [r7, #8]
 804642e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8046430:	68fb      	ldr	r3, [r7, #12]
 8046432:	887a      	ldrh	r2, [r7, #2]
 8046434:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8046436:	68fb      	ldr	r3, [r7, #12]
 8046438:	887a      	ldrh	r2, [r7, #2]
 804643a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 804643c:	68fb      	ldr	r3, [r7, #12]
 804643e:	2200      	movs	r2, #0
 8046440:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8046442:	68fb      	ldr	r3, [r7, #12]
 8046444:	2200      	movs	r2, #0
 8046446:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8046448:	68fb      	ldr	r3, [r7, #12]
 804644a:	681b      	ldr	r3, [r3, #0]
 804644c:	681b      	ldr	r3, [r3, #0]
 804644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046452:	2b40      	cmp	r3, #64	; 0x40
 8046454:	d007      	beq.n	8046466 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8046456:	68fb      	ldr	r3, [r7, #12]
 8046458:	681b      	ldr	r3, [r3, #0]
 804645a:	681a      	ldr	r2, [r3, #0]
 804645c:	68fb      	ldr	r3, [r7, #12]
 804645e:	681b      	ldr	r3, [r3, #0]
 8046460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046464:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8046466:	68fb      	ldr	r3, [r7, #12]
 8046468:	68db      	ldr	r3, [r3, #12]
 804646a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804646e:	d178      	bne.n	8046562 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8046470:	68fb      	ldr	r3, [r7, #12]
 8046472:	685b      	ldr	r3, [r3, #4]
 8046474:	2b00      	cmp	r3, #0
 8046476:	d002      	beq.n	804647e <HAL_SPI_TransmitReceive+0x10a>
 8046478:	8b7b      	ldrh	r3, [r7, #26]
 804647a:	2b01      	cmp	r3, #1
 804647c:	d166      	bne.n	804654c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804647e:	68fb      	ldr	r3, [r7, #12]
 8046480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046482:	881a      	ldrh	r2, [r3, #0]
 8046484:	68fb      	ldr	r3, [r7, #12]
 8046486:	681b      	ldr	r3, [r3, #0]
 8046488:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804648a:	68fb      	ldr	r3, [r7, #12]
 804648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804648e:	1c9a      	adds	r2, r3, #2
 8046490:	68fb      	ldr	r3, [r7, #12]
 8046492:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8046494:	68fb      	ldr	r3, [r7, #12]
 8046496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8046498:	b29b      	uxth	r3, r3
 804649a:	3b01      	subs	r3, #1
 804649c:	b29a      	uxth	r2, r3
 804649e:	68fb      	ldr	r3, [r7, #12]
 80464a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80464a2:	e053      	b.n	804654c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80464a4:	68fb      	ldr	r3, [r7, #12]
 80464a6:	681b      	ldr	r3, [r3, #0]
 80464a8:	689b      	ldr	r3, [r3, #8]
 80464aa:	f003 0302 	and.w	r3, r3, #2
 80464ae:	2b02      	cmp	r3, #2
 80464b0:	d11b      	bne.n	80464ea <HAL_SPI_TransmitReceive+0x176>
 80464b2:	68fb      	ldr	r3, [r7, #12]
 80464b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80464b6:	b29b      	uxth	r3, r3
 80464b8:	2b00      	cmp	r3, #0
 80464ba:	d016      	beq.n	80464ea <HAL_SPI_TransmitReceive+0x176>
 80464bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80464be:	2b01      	cmp	r3, #1
 80464c0:	d113      	bne.n	80464ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80464c2:	68fb      	ldr	r3, [r7, #12]
 80464c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80464c6:	881a      	ldrh	r2, [r3, #0]
 80464c8:	68fb      	ldr	r3, [r7, #12]
 80464ca:	681b      	ldr	r3, [r3, #0]
 80464cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80464ce:	68fb      	ldr	r3, [r7, #12]
 80464d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80464d2:	1c9a      	adds	r2, r3, #2
 80464d4:	68fb      	ldr	r3, [r7, #12]
 80464d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80464d8:	68fb      	ldr	r3, [r7, #12]
 80464da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80464dc:	b29b      	uxth	r3, r3
 80464de:	3b01      	subs	r3, #1
 80464e0:	b29a      	uxth	r2, r3
 80464e2:	68fb      	ldr	r3, [r7, #12]
 80464e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80464e6:	2300      	movs	r3, #0
 80464e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80464ea:	68fb      	ldr	r3, [r7, #12]
 80464ec:	681b      	ldr	r3, [r3, #0]
 80464ee:	689b      	ldr	r3, [r3, #8]
 80464f0:	f003 0301 	and.w	r3, r3, #1
 80464f4:	2b01      	cmp	r3, #1
 80464f6:	d119      	bne.n	804652c <HAL_SPI_TransmitReceive+0x1b8>
 80464f8:	68fb      	ldr	r3, [r7, #12]
 80464fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80464fc:	b29b      	uxth	r3, r3
 80464fe:	2b00      	cmp	r3, #0
 8046500:	d014      	beq.n	804652c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8046502:	68fb      	ldr	r3, [r7, #12]
 8046504:	681b      	ldr	r3, [r3, #0]
 8046506:	68da      	ldr	r2, [r3, #12]
 8046508:	68fb      	ldr	r3, [r7, #12]
 804650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804650c:	b292      	uxth	r2, r2
 804650e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8046510:	68fb      	ldr	r3, [r7, #12]
 8046512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046514:	1c9a      	adds	r2, r3, #2
 8046516:	68fb      	ldr	r3, [r7, #12]
 8046518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804651a:	68fb      	ldr	r3, [r7, #12]
 804651c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804651e:	b29b      	uxth	r3, r3
 8046520:	3b01      	subs	r3, #1
 8046522:	b29a      	uxth	r2, r3
 8046524:	68fb      	ldr	r3, [r7, #12]
 8046526:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8046528:	2301      	movs	r3, #1
 804652a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 804652c:	f7fd fe9c 	bl	8044268 <HAL_GetTick>
 8046530:	4602      	mov	r2, r0
 8046532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046534:	1ad3      	subs	r3, r2, r3
 8046536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8046538:	429a      	cmp	r2, r3
 804653a:	d807      	bhi.n	804654c <HAL_SPI_TransmitReceive+0x1d8>
 804653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046542:	d003      	beq.n	804654c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8046544:	2303      	movs	r3, #3
 8046546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 804654a:	e0a7      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804654c:	68fb      	ldr	r3, [r7, #12]
 804654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8046550:	b29b      	uxth	r3, r3
 8046552:	2b00      	cmp	r3, #0
 8046554:	d1a6      	bne.n	80464a4 <HAL_SPI_TransmitReceive+0x130>
 8046556:	68fb      	ldr	r3, [r7, #12]
 8046558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804655a:	b29b      	uxth	r3, r3
 804655c:	2b00      	cmp	r3, #0
 804655e:	d1a1      	bne.n	80464a4 <HAL_SPI_TransmitReceive+0x130>
 8046560:	e07c      	b.n	804665c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8046562:	68fb      	ldr	r3, [r7, #12]
 8046564:	685b      	ldr	r3, [r3, #4]
 8046566:	2b00      	cmp	r3, #0
 8046568:	d002      	beq.n	8046570 <HAL_SPI_TransmitReceive+0x1fc>
 804656a:	8b7b      	ldrh	r3, [r7, #26]
 804656c:	2b01      	cmp	r3, #1
 804656e:	d16b      	bne.n	8046648 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8046570:	68fb      	ldr	r3, [r7, #12]
 8046572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046574:	68fb      	ldr	r3, [r7, #12]
 8046576:	681b      	ldr	r3, [r3, #0]
 8046578:	330c      	adds	r3, #12
 804657a:	7812      	ldrb	r2, [r2, #0]
 804657c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 804657e:	68fb      	ldr	r3, [r7, #12]
 8046580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046582:	1c5a      	adds	r2, r3, #1
 8046584:	68fb      	ldr	r3, [r7, #12]
 8046586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8046588:	68fb      	ldr	r3, [r7, #12]
 804658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804658c:	b29b      	uxth	r3, r3
 804658e:	3b01      	subs	r3, #1
 8046590:	b29a      	uxth	r2, r3
 8046592:	68fb      	ldr	r3, [r7, #12]
 8046594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046596:	e057      	b.n	8046648 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8046598:	68fb      	ldr	r3, [r7, #12]
 804659a:	681b      	ldr	r3, [r3, #0]
 804659c:	689b      	ldr	r3, [r3, #8]
 804659e:	f003 0302 	and.w	r3, r3, #2
 80465a2:	2b02      	cmp	r3, #2
 80465a4:	d11c      	bne.n	80465e0 <HAL_SPI_TransmitReceive+0x26c>
 80465a6:	68fb      	ldr	r3, [r7, #12]
 80465a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80465aa:	b29b      	uxth	r3, r3
 80465ac:	2b00      	cmp	r3, #0
 80465ae:	d017      	beq.n	80465e0 <HAL_SPI_TransmitReceive+0x26c>
 80465b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80465b2:	2b01      	cmp	r3, #1
 80465b4:	d114      	bne.n	80465e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80465b6:	68fb      	ldr	r3, [r7, #12]
 80465b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80465ba:	68fb      	ldr	r3, [r7, #12]
 80465bc:	681b      	ldr	r3, [r3, #0]
 80465be:	330c      	adds	r3, #12
 80465c0:	7812      	ldrb	r2, [r2, #0]
 80465c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80465c4:	68fb      	ldr	r3, [r7, #12]
 80465c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80465c8:	1c5a      	adds	r2, r3, #1
 80465ca:	68fb      	ldr	r3, [r7, #12]
 80465cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80465ce:	68fb      	ldr	r3, [r7, #12]
 80465d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80465d2:	b29b      	uxth	r3, r3
 80465d4:	3b01      	subs	r3, #1
 80465d6:	b29a      	uxth	r2, r3
 80465d8:	68fb      	ldr	r3, [r7, #12]
 80465da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80465dc:	2300      	movs	r3, #0
 80465de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80465e0:	68fb      	ldr	r3, [r7, #12]
 80465e2:	681b      	ldr	r3, [r3, #0]
 80465e4:	689b      	ldr	r3, [r3, #8]
 80465e6:	f003 0301 	and.w	r3, r3, #1
 80465ea:	2b01      	cmp	r3, #1
 80465ec:	d119      	bne.n	8046622 <HAL_SPI_TransmitReceive+0x2ae>
 80465ee:	68fb      	ldr	r3, [r7, #12]
 80465f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80465f2:	b29b      	uxth	r3, r3
 80465f4:	2b00      	cmp	r3, #0
 80465f6:	d014      	beq.n	8046622 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80465f8:	68fb      	ldr	r3, [r7, #12]
 80465fa:	681b      	ldr	r3, [r3, #0]
 80465fc:	68da      	ldr	r2, [r3, #12]
 80465fe:	68fb      	ldr	r3, [r7, #12]
 8046600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046602:	b2d2      	uxtb	r2, r2
 8046604:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8046606:	68fb      	ldr	r3, [r7, #12]
 8046608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804660a:	1c5a      	adds	r2, r3, #1
 804660c:	68fb      	ldr	r3, [r7, #12]
 804660e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8046610:	68fb      	ldr	r3, [r7, #12]
 8046612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046614:	b29b      	uxth	r3, r3
 8046616:	3b01      	subs	r3, #1
 8046618:	b29a      	uxth	r2, r3
 804661a:	68fb      	ldr	r3, [r7, #12]
 804661c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804661e:	2301      	movs	r3, #1
 8046620:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8046622:	f7fd fe21 	bl	8044268 <HAL_GetTick>
 8046626:	4602      	mov	r2, r0
 8046628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804662a:	1ad3      	subs	r3, r2, r3
 804662c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804662e:	429a      	cmp	r2, r3
 8046630:	d803      	bhi.n	804663a <HAL_SPI_TransmitReceive+0x2c6>
 8046632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046638:	d102      	bne.n	8046640 <HAL_SPI_TransmitReceive+0x2cc>
 804663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804663c:	2b00      	cmp	r3, #0
 804663e:	d103      	bne.n	8046648 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8046640:	2303      	movs	r3, #3
 8046642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8046646:	e029      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8046648:	68fb      	ldr	r3, [r7, #12]
 804664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804664c:	b29b      	uxth	r3, r3
 804664e:	2b00      	cmp	r3, #0
 8046650:	d1a2      	bne.n	8046598 <HAL_SPI_TransmitReceive+0x224>
 8046652:	68fb      	ldr	r3, [r7, #12]
 8046654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8046656:	b29b      	uxth	r3, r3
 8046658:	2b00      	cmp	r3, #0
 804665a:	d19d      	bne.n	8046598 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804665e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8046660:	68f8      	ldr	r0, [r7, #12]
 8046662:	f000 f917 	bl	8046894 <SPI_EndRxTxTransaction>
 8046666:	4603      	mov	r3, r0
 8046668:	2b00      	cmp	r3, #0
 804666a:	d006      	beq.n	804667a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 804666c:	2301      	movs	r3, #1
 804666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8046672:	68fb      	ldr	r3, [r7, #12]
 8046674:	2220      	movs	r2, #32
 8046676:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8046678:	e010      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 804667a:	68fb      	ldr	r3, [r7, #12]
 804667c:	689b      	ldr	r3, [r3, #8]
 804667e:	2b00      	cmp	r3, #0
 8046680:	d10b      	bne.n	804669a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8046682:	2300      	movs	r3, #0
 8046684:	617b      	str	r3, [r7, #20]
 8046686:	68fb      	ldr	r3, [r7, #12]
 8046688:	681b      	ldr	r3, [r3, #0]
 804668a:	68db      	ldr	r3, [r3, #12]
 804668c:	617b      	str	r3, [r7, #20]
 804668e:	68fb      	ldr	r3, [r7, #12]
 8046690:	681b      	ldr	r3, [r3, #0]
 8046692:	689b      	ldr	r3, [r3, #8]
 8046694:	617b      	str	r3, [r7, #20]
 8046696:	697b      	ldr	r3, [r7, #20]
 8046698:	e000      	b.n	804669c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 804669a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804669c:	68fb      	ldr	r3, [r7, #12]
 804669e:	2201      	movs	r2, #1
 80466a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80466a4:	68fb      	ldr	r3, [r7, #12]
 80466a6:	2200      	movs	r2, #0
 80466a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80466ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80466b0:	4618      	mov	r0, r3
 80466b2:	3730      	adds	r7, #48	; 0x30
 80466b4:	46bd      	mov	sp, r7
 80466b6:	bd80      	pop	{r7, pc}

080466b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80466b8:	b580      	push	{r7, lr}
 80466ba:	b088      	sub	sp, #32
 80466bc:	af00      	add	r7, sp, #0
 80466be:	60f8      	str	r0, [r7, #12]
 80466c0:	60b9      	str	r1, [r7, #8]
 80466c2:	603b      	str	r3, [r7, #0]
 80466c4:	4613      	mov	r3, r2
 80466c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80466c8:	f7fd fdce 	bl	8044268 <HAL_GetTick>
 80466cc:	4602      	mov	r2, r0
 80466ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80466d0:	1a9b      	subs	r3, r3, r2
 80466d2:	683a      	ldr	r2, [r7, #0]
 80466d4:	4413      	add	r3, r2
 80466d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80466d8:	f7fd fdc6 	bl	8044268 <HAL_GetTick>
 80466dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80466de:	4b39      	ldr	r3, [pc, #228]	; (80467c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80466e0:	681b      	ldr	r3, [r3, #0]
 80466e2:	015b      	lsls	r3, r3, #5
 80466e4:	0d1b      	lsrs	r3, r3, #20
 80466e6:	69fa      	ldr	r2, [r7, #28]
 80466e8:	fb02 f303 	mul.w	r3, r2, r3
 80466ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80466ee:	e054      	b.n	804679a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80466f0:	683b      	ldr	r3, [r7, #0]
 80466f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80466f6:	d050      	beq.n	804679a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80466f8:	f7fd fdb6 	bl	8044268 <HAL_GetTick>
 80466fc:	4602      	mov	r2, r0
 80466fe:	69bb      	ldr	r3, [r7, #24]
 8046700:	1ad3      	subs	r3, r2, r3
 8046702:	69fa      	ldr	r2, [r7, #28]
 8046704:	429a      	cmp	r2, r3
 8046706:	d902      	bls.n	804670e <SPI_WaitFlagStateUntilTimeout+0x56>
 8046708:	69fb      	ldr	r3, [r7, #28]
 804670a:	2b00      	cmp	r3, #0
 804670c:	d13d      	bne.n	804678a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804670e:	68fb      	ldr	r3, [r7, #12]
 8046710:	681b      	ldr	r3, [r3, #0]
 8046712:	685a      	ldr	r2, [r3, #4]
 8046714:	68fb      	ldr	r3, [r7, #12]
 8046716:	681b      	ldr	r3, [r3, #0]
 8046718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804671c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804671e:	68fb      	ldr	r3, [r7, #12]
 8046720:	685b      	ldr	r3, [r3, #4]
 8046722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8046726:	d111      	bne.n	804674c <SPI_WaitFlagStateUntilTimeout+0x94>
 8046728:	68fb      	ldr	r3, [r7, #12]
 804672a:	689b      	ldr	r3, [r3, #8]
 804672c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046730:	d004      	beq.n	804673c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8046732:	68fb      	ldr	r3, [r7, #12]
 8046734:	689b      	ldr	r3, [r3, #8]
 8046736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804673a:	d107      	bne.n	804674c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 804673c:	68fb      	ldr	r3, [r7, #12]
 804673e:	681b      	ldr	r3, [r3, #0]
 8046740:	681a      	ldr	r2, [r3, #0]
 8046742:	68fb      	ldr	r3, [r7, #12]
 8046744:	681b      	ldr	r3, [r3, #0]
 8046746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804674a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804674c:	68fb      	ldr	r3, [r7, #12]
 804674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046754:	d10f      	bne.n	8046776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8046756:	68fb      	ldr	r3, [r7, #12]
 8046758:	681b      	ldr	r3, [r3, #0]
 804675a:	681a      	ldr	r2, [r3, #0]
 804675c:	68fb      	ldr	r3, [r7, #12]
 804675e:	681b      	ldr	r3, [r3, #0]
 8046760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8046764:	601a      	str	r2, [r3, #0]
 8046766:	68fb      	ldr	r3, [r7, #12]
 8046768:	681b      	ldr	r3, [r3, #0]
 804676a:	681a      	ldr	r2, [r3, #0]
 804676c:	68fb      	ldr	r3, [r7, #12]
 804676e:	681b      	ldr	r3, [r3, #0]
 8046770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8046774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8046776:	68fb      	ldr	r3, [r7, #12]
 8046778:	2201      	movs	r2, #1
 804677a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804677e:	68fb      	ldr	r3, [r7, #12]
 8046780:	2200      	movs	r2, #0
 8046782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8046786:	2303      	movs	r3, #3
 8046788:	e017      	b.n	80467ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 804678a:	697b      	ldr	r3, [r7, #20]
 804678c:	2b00      	cmp	r3, #0
 804678e:	d101      	bne.n	8046794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8046790:	2300      	movs	r3, #0
 8046792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8046794:	697b      	ldr	r3, [r7, #20]
 8046796:	3b01      	subs	r3, #1
 8046798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804679a:	68fb      	ldr	r3, [r7, #12]
 804679c:	681b      	ldr	r3, [r3, #0]
 804679e:	689a      	ldr	r2, [r3, #8]
 80467a0:	68bb      	ldr	r3, [r7, #8]
 80467a2:	4013      	ands	r3, r2
 80467a4:	68ba      	ldr	r2, [r7, #8]
 80467a6:	429a      	cmp	r2, r3
 80467a8:	bf0c      	ite	eq
 80467aa:	2301      	moveq	r3, #1
 80467ac:	2300      	movne	r3, #0
 80467ae:	b2db      	uxtb	r3, r3
 80467b0:	461a      	mov	r2, r3
 80467b2:	79fb      	ldrb	r3, [r7, #7]
 80467b4:	429a      	cmp	r2, r3
 80467b6:	d19b      	bne.n	80466f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80467b8:	2300      	movs	r3, #0
}
 80467ba:	4618      	mov	r0, r3
 80467bc:	3720      	adds	r7, #32
 80467be:	46bd      	mov	sp, r7
 80467c0:	bd80      	pop	{r7, pc}
 80467c2:	bf00      	nop
 80467c4:	2000000c 	.word	0x2000000c

080467c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80467c8:	b580      	push	{r7, lr}
 80467ca:	b086      	sub	sp, #24
 80467cc:	af02      	add	r7, sp, #8
 80467ce:	60f8      	str	r0, [r7, #12]
 80467d0:	60b9      	str	r1, [r7, #8]
 80467d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80467d4:	68fb      	ldr	r3, [r7, #12]
 80467d6:	685b      	ldr	r3, [r3, #4]
 80467d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80467dc:	d111      	bne.n	8046802 <SPI_EndRxTransaction+0x3a>
 80467de:	68fb      	ldr	r3, [r7, #12]
 80467e0:	689b      	ldr	r3, [r3, #8]
 80467e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80467e6:	d004      	beq.n	80467f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80467e8:	68fb      	ldr	r3, [r7, #12]
 80467ea:	689b      	ldr	r3, [r3, #8]
 80467ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80467f0:	d107      	bne.n	8046802 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80467f2:	68fb      	ldr	r3, [r7, #12]
 80467f4:	681b      	ldr	r3, [r3, #0]
 80467f6:	681a      	ldr	r2, [r3, #0]
 80467f8:	68fb      	ldr	r3, [r7, #12]
 80467fa:	681b      	ldr	r3, [r3, #0]
 80467fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8046800:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8046802:	68fb      	ldr	r3, [r7, #12]
 8046804:	685b      	ldr	r3, [r3, #4]
 8046806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804680a:	d12a      	bne.n	8046862 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 804680c:	68fb      	ldr	r3, [r7, #12]
 804680e:	689b      	ldr	r3, [r3, #8]
 8046810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046814:	d012      	beq.n	804683c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8046816:	687b      	ldr	r3, [r7, #4]
 8046818:	9300      	str	r3, [sp, #0]
 804681a:	68bb      	ldr	r3, [r7, #8]
 804681c:	2200      	movs	r2, #0
 804681e:	2180      	movs	r1, #128	; 0x80
 8046820:	68f8      	ldr	r0, [r7, #12]
 8046822:	f7ff ff49 	bl	80466b8 <SPI_WaitFlagStateUntilTimeout>
 8046826:	4603      	mov	r3, r0
 8046828:	2b00      	cmp	r3, #0
 804682a:	d02d      	beq.n	8046888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804682c:	68fb      	ldr	r3, [r7, #12]
 804682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8046830:	f043 0220 	orr.w	r2, r3, #32
 8046834:	68fb      	ldr	r3, [r7, #12]
 8046836:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8046838:	2303      	movs	r3, #3
 804683a:	e026      	b.n	804688a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 804683c:	687b      	ldr	r3, [r7, #4]
 804683e:	9300      	str	r3, [sp, #0]
 8046840:	68bb      	ldr	r3, [r7, #8]
 8046842:	2200      	movs	r2, #0
 8046844:	2101      	movs	r1, #1
 8046846:	68f8      	ldr	r0, [r7, #12]
 8046848:	f7ff ff36 	bl	80466b8 <SPI_WaitFlagStateUntilTimeout>
 804684c:	4603      	mov	r3, r0
 804684e:	2b00      	cmp	r3, #0
 8046850:	d01a      	beq.n	8046888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8046852:	68fb      	ldr	r3, [r7, #12]
 8046854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8046856:	f043 0220 	orr.w	r2, r3, #32
 804685a:	68fb      	ldr	r3, [r7, #12]
 804685c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 804685e:	2303      	movs	r3, #3
 8046860:	e013      	b.n	804688a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8046862:	687b      	ldr	r3, [r7, #4]
 8046864:	9300      	str	r3, [sp, #0]
 8046866:	68bb      	ldr	r3, [r7, #8]
 8046868:	2200      	movs	r2, #0
 804686a:	2101      	movs	r1, #1
 804686c:	68f8      	ldr	r0, [r7, #12]
 804686e:	f7ff ff23 	bl	80466b8 <SPI_WaitFlagStateUntilTimeout>
 8046872:	4603      	mov	r3, r0
 8046874:	2b00      	cmp	r3, #0
 8046876:	d007      	beq.n	8046888 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8046878:	68fb      	ldr	r3, [r7, #12]
 804687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804687c:	f043 0220 	orr.w	r2, r3, #32
 8046880:	68fb      	ldr	r3, [r7, #12]
 8046882:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8046884:	2303      	movs	r3, #3
 8046886:	e000      	b.n	804688a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8046888:	2300      	movs	r3, #0
}
 804688a:	4618      	mov	r0, r3
 804688c:	3710      	adds	r7, #16
 804688e:	46bd      	mov	sp, r7
 8046890:	bd80      	pop	{r7, pc}
	...

08046894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8046894:	b580      	push	{r7, lr}
 8046896:	b088      	sub	sp, #32
 8046898:	af02      	add	r7, sp, #8
 804689a:	60f8      	str	r0, [r7, #12]
 804689c:	60b9      	str	r1, [r7, #8]
 804689e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80468a0:	4b1b      	ldr	r3, [pc, #108]	; (8046910 <SPI_EndRxTxTransaction+0x7c>)
 80468a2:	681b      	ldr	r3, [r3, #0]
 80468a4:	4a1b      	ldr	r2, [pc, #108]	; (8046914 <SPI_EndRxTxTransaction+0x80>)
 80468a6:	fba2 2303 	umull	r2, r3, r2, r3
 80468aa:	0d5b      	lsrs	r3, r3, #21
 80468ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80468b0:	fb02 f303 	mul.w	r3, r2, r3
 80468b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80468b6:	68fb      	ldr	r3, [r7, #12]
 80468b8:	685b      	ldr	r3, [r3, #4]
 80468ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80468be:	d112      	bne.n	80468e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80468c0:	687b      	ldr	r3, [r7, #4]
 80468c2:	9300      	str	r3, [sp, #0]
 80468c4:	68bb      	ldr	r3, [r7, #8]
 80468c6:	2200      	movs	r2, #0
 80468c8:	2180      	movs	r1, #128	; 0x80
 80468ca:	68f8      	ldr	r0, [r7, #12]
 80468cc:	f7ff fef4 	bl	80466b8 <SPI_WaitFlagStateUntilTimeout>
 80468d0:	4603      	mov	r3, r0
 80468d2:	2b00      	cmp	r3, #0
 80468d4:	d016      	beq.n	8046904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80468d6:	68fb      	ldr	r3, [r7, #12]
 80468d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80468da:	f043 0220 	orr.w	r2, r3, #32
 80468de:	68fb      	ldr	r3, [r7, #12]
 80468e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80468e2:	2303      	movs	r3, #3
 80468e4:	e00f      	b.n	8046906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80468e6:	697b      	ldr	r3, [r7, #20]
 80468e8:	2b00      	cmp	r3, #0
 80468ea:	d00a      	beq.n	8046902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80468ec:	697b      	ldr	r3, [r7, #20]
 80468ee:	3b01      	subs	r3, #1
 80468f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80468f2:	68fb      	ldr	r3, [r7, #12]
 80468f4:	681b      	ldr	r3, [r3, #0]
 80468f6:	689b      	ldr	r3, [r3, #8]
 80468f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80468fc:	2b80      	cmp	r3, #128	; 0x80
 80468fe:	d0f2      	beq.n	80468e6 <SPI_EndRxTxTransaction+0x52>
 8046900:	e000      	b.n	8046904 <SPI_EndRxTxTransaction+0x70>
        break;
 8046902:	bf00      	nop
  }

  return HAL_OK;
 8046904:	2300      	movs	r3, #0
}
 8046906:	4618      	mov	r0, r3
 8046908:	3718      	adds	r7, #24
 804690a:	46bd      	mov	sp, r7
 804690c:	bd80      	pop	{r7, pc}
 804690e:	bf00      	nop
 8046910:	2000000c 	.word	0x2000000c
 8046914:	165e9f81 	.word	0x165e9f81

08046918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8046918:	b580      	push	{r7, lr}
 804691a:	b082      	sub	sp, #8
 804691c:	af00      	add	r7, sp, #0
 804691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8046920:	687b      	ldr	r3, [r7, #4]
 8046922:	2b00      	cmp	r3, #0
 8046924:	d101      	bne.n	804692a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8046926:	2301      	movs	r3, #1
 8046928:	e041      	b.n	80469ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804692a:	687b      	ldr	r3, [r7, #4]
 804692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046930:	b2db      	uxtb	r3, r3
 8046932:	2b00      	cmp	r3, #0
 8046934:	d106      	bne.n	8046944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8046936:	687b      	ldr	r3, [r7, #4]
 8046938:	2200      	movs	r2, #0
 804693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 804693e:	6878      	ldr	r0, [r7, #4]
 8046940:	f7fd f9fa 	bl	8043d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046944:	687b      	ldr	r3, [r7, #4]
 8046946:	2202      	movs	r2, #2
 8046948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804694c:	687b      	ldr	r3, [r7, #4]
 804694e:	681a      	ldr	r2, [r3, #0]
 8046950:	687b      	ldr	r3, [r7, #4]
 8046952:	3304      	adds	r3, #4
 8046954:	4619      	mov	r1, r3
 8046956:	4610      	mov	r0, r2
 8046958:	f000 fe28 	bl	80475ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804695c:	687b      	ldr	r3, [r7, #4]
 804695e:	2201      	movs	r2, #1
 8046960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8046964:	687b      	ldr	r3, [r7, #4]
 8046966:	2201      	movs	r2, #1
 8046968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804696c:	687b      	ldr	r3, [r7, #4]
 804696e:	2201      	movs	r2, #1
 8046970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8046974:	687b      	ldr	r3, [r7, #4]
 8046976:	2201      	movs	r2, #1
 8046978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804697c:	687b      	ldr	r3, [r7, #4]
 804697e:	2201      	movs	r2, #1
 8046980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8046984:	687b      	ldr	r3, [r7, #4]
 8046986:	2201      	movs	r2, #1
 8046988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804698c:	687b      	ldr	r3, [r7, #4]
 804698e:	2201      	movs	r2, #1
 8046990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8046994:	687b      	ldr	r3, [r7, #4]
 8046996:	2201      	movs	r2, #1
 8046998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804699c:	687b      	ldr	r3, [r7, #4]
 804699e:	2201      	movs	r2, #1
 80469a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80469a4:	687b      	ldr	r3, [r7, #4]
 80469a6:	2201      	movs	r2, #1
 80469a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80469ac:	2300      	movs	r3, #0
}
 80469ae:	4618      	mov	r0, r3
 80469b0:	3708      	adds	r7, #8
 80469b2:	46bd      	mov	sp, r7
 80469b4:	bd80      	pop	{r7, pc}
	...

080469b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80469b8:	b480      	push	{r7}
 80469ba:	b085      	sub	sp, #20
 80469bc:	af00      	add	r7, sp, #0
 80469be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80469c0:	687b      	ldr	r3, [r7, #4]
 80469c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80469c6:	b2db      	uxtb	r3, r3
 80469c8:	2b01      	cmp	r3, #1
 80469ca:	d001      	beq.n	80469d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80469cc:	2301      	movs	r3, #1
 80469ce:	e04e      	b.n	8046a6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80469d0:	687b      	ldr	r3, [r7, #4]
 80469d2:	2202      	movs	r2, #2
 80469d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80469d8:	687b      	ldr	r3, [r7, #4]
 80469da:	681b      	ldr	r3, [r3, #0]
 80469dc:	68da      	ldr	r2, [r3, #12]
 80469de:	687b      	ldr	r3, [r7, #4]
 80469e0:	681b      	ldr	r3, [r3, #0]
 80469e2:	f042 0201 	orr.w	r2, r2, #1
 80469e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80469e8:	687b      	ldr	r3, [r7, #4]
 80469ea:	681b      	ldr	r3, [r3, #0]
 80469ec:	4a23      	ldr	r2, [pc, #140]	; (8046a7c <HAL_TIM_Base_Start_IT+0xc4>)
 80469ee:	4293      	cmp	r3, r2
 80469f0:	d022      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 80469f2:	687b      	ldr	r3, [r7, #4]
 80469f4:	681b      	ldr	r3, [r3, #0]
 80469f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80469fa:	d01d      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 80469fc:	687b      	ldr	r3, [r7, #4]
 80469fe:	681b      	ldr	r3, [r3, #0]
 8046a00:	4a1f      	ldr	r2, [pc, #124]	; (8046a80 <HAL_TIM_Base_Start_IT+0xc8>)
 8046a02:	4293      	cmp	r3, r2
 8046a04:	d018      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 8046a06:	687b      	ldr	r3, [r7, #4]
 8046a08:	681b      	ldr	r3, [r3, #0]
 8046a0a:	4a1e      	ldr	r2, [pc, #120]	; (8046a84 <HAL_TIM_Base_Start_IT+0xcc>)
 8046a0c:	4293      	cmp	r3, r2
 8046a0e:	d013      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 8046a10:	687b      	ldr	r3, [r7, #4]
 8046a12:	681b      	ldr	r3, [r3, #0]
 8046a14:	4a1c      	ldr	r2, [pc, #112]	; (8046a88 <HAL_TIM_Base_Start_IT+0xd0>)
 8046a16:	4293      	cmp	r3, r2
 8046a18:	d00e      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 8046a1a:	687b      	ldr	r3, [r7, #4]
 8046a1c:	681b      	ldr	r3, [r3, #0]
 8046a1e:	4a1b      	ldr	r2, [pc, #108]	; (8046a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8046a20:	4293      	cmp	r3, r2
 8046a22:	d009      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 8046a24:	687b      	ldr	r3, [r7, #4]
 8046a26:	681b      	ldr	r3, [r3, #0]
 8046a28:	4a19      	ldr	r2, [pc, #100]	; (8046a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8046a2a:	4293      	cmp	r3, r2
 8046a2c:	d004      	beq.n	8046a38 <HAL_TIM_Base_Start_IT+0x80>
 8046a2e:	687b      	ldr	r3, [r7, #4]
 8046a30:	681b      	ldr	r3, [r3, #0]
 8046a32:	4a18      	ldr	r2, [pc, #96]	; (8046a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8046a34:	4293      	cmp	r3, r2
 8046a36:	d111      	bne.n	8046a5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046a38:	687b      	ldr	r3, [r7, #4]
 8046a3a:	681b      	ldr	r3, [r3, #0]
 8046a3c:	689b      	ldr	r3, [r3, #8]
 8046a3e:	f003 0307 	and.w	r3, r3, #7
 8046a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046a44:	68fb      	ldr	r3, [r7, #12]
 8046a46:	2b06      	cmp	r3, #6
 8046a48:	d010      	beq.n	8046a6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	681b      	ldr	r3, [r3, #0]
 8046a4e:	681a      	ldr	r2, [r3, #0]
 8046a50:	687b      	ldr	r3, [r7, #4]
 8046a52:	681b      	ldr	r3, [r3, #0]
 8046a54:	f042 0201 	orr.w	r2, r2, #1
 8046a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046a5a:	e007      	b.n	8046a6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8046a5c:	687b      	ldr	r3, [r7, #4]
 8046a5e:	681b      	ldr	r3, [r3, #0]
 8046a60:	681a      	ldr	r2, [r3, #0]
 8046a62:	687b      	ldr	r3, [r7, #4]
 8046a64:	681b      	ldr	r3, [r3, #0]
 8046a66:	f042 0201 	orr.w	r2, r2, #1
 8046a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8046a6c:	2300      	movs	r3, #0
}
 8046a6e:	4618      	mov	r0, r3
 8046a70:	3714      	adds	r7, #20
 8046a72:	46bd      	mov	sp, r7
 8046a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a78:	4770      	bx	lr
 8046a7a:	bf00      	nop
 8046a7c:	40010000 	.word	0x40010000
 8046a80:	40000400 	.word	0x40000400
 8046a84:	40000800 	.word	0x40000800
 8046a88:	40000c00 	.word	0x40000c00
 8046a8c:	40010400 	.word	0x40010400
 8046a90:	40014000 	.word	0x40014000
 8046a94:	40001800 	.word	0x40001800

08046a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8046a98:	b580      	push	{r7, lr}
 8046a9a:	b082      	sub	sp, #8
 8046a9c:	af00      	add	r7, sp, #0
 8046a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8046aa0:	687b      	ldr	r3, [r7, #4]
 8046aa2:	2b00      	cmp	r3, #0
 8046aa4:	d101      	bne.n	8046aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8046aa6:	2301      	movs	r3, #1
 8046aa8:	e041      	b.n	8046b2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8046aaa:	687b      	ldr	r3, [r7, #4]
 8046aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046ab0:	b2db      	uxtb	r3, r3
 8046ab2:	2b00      	cmp	r3, #0
 8046ab4:	d106      	bne.n	8046ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8046ab6:	687b      	ldr	r3, [r7, #4]
 8046ab8:	2200      	movs	r2, #0
 8046aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8046abe:	6878      	ldr	r0, [r7, #4]
 8046ac0:	f000 f839 	bl	8046b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046ac4:	687b      	ldr	r3, [r7, #4]
 8046ac6:	2202      	movs	r2, #2
 8046ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8046acc:	687b      	ldr	r3, [r7, #4]
 8046ace:	681a      	ldr	r2, [r3, #0]
 8046ad0:	687b      	ldr	r3, [r7, #4]
 8046ad2:	3304      	adds	r3, #4
 8046ad4:	4619      	mov	r1, r3
 8046ad6:	4610      	mov	r0, r2
 8046ad8:	f000 fd68 	bl	80475ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8046adc:	687b      	ldr	r3, [r7, #4]
 8046ade:	2201      	movs	r2, #1
 8046ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8046ae4:	687b      	ldr	r3, [r7, #4]
 8046ae6:	2201      	movs	r2, #1
 8046ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8046aec:	687b      	ldr	r3, [r7, #4]
 8046aee:	2201      	movs	r2, #1
 8046af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8046af4:	687b      	ldr	r3, [r7, #4]
 8046af6:	2201      	movs	r2, #1
 8046af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8046afc:	687b      	ldr	r3, [r7, #4]
 8046afe:	2201      	movs	r2, #1
 8046b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8046b04:	687b      	ldr	r3, [r7, #4]
 8046b06:	2201      	movs	r2, #1
 8046b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8046b0c:	687b      	ldr	r3, [r7, #4]
 8046b0e:	2201      	movs	r2, #1
 8046b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8046b14:	687b      	ldr	r3, [r7, #4]
 8046b16:	2201      	movs	r2, #1
 8046b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8046b1c:	687b      	ldr	r3, [r7, #4]
 8046b1e:	2201      	movs	r2, #1
 8046b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046b24:	687b      	ldr	r3, [r7, #4]
 8046b26:	2201      	movs	r2, #1
 8046b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8046b2c:	2300      	movs	r3, #0
}
 8046b2e:	4618      	mov	r0, r3
 8046b30:	3708      	adds	r7, #8
 8046b32:	46bd      	mov	sp, r7
 8046b34:	bd80      	pop	{r7, pc}

08046b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8046b36:	b480      	push	{r7}
 8046b38:	b083      	sub	sp, #12
 8046b3a:	af00      	add	r7, sp, #0
 8046b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8046b3e:	bf00      	nop
 8046b40:	370c      	adds	r7, #12
 8046b42:	46bd      	mov	sp, r7
 8046b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b48:	4770      	bx	lr
	...

08046b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8046b4c:	b580      	push	{r7, lr}
 8046b4e:	b084      	sub	sp, #16
 8046b50:	af00      	add	r7, sp, #0
 8046b52:	6078      	str	r0, [r7, #4]
 8046b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8046b56:	683b      	ldr	r3, [r7, #0]
 8046b58:	2b00      	cmp	r3, #0
 8046b5a:	d109      	bne.n	8046b70 <HAL_TIM_PWM_Start+0x24>
 8046b5c:	687b      	ldr	r3, [r7, #4]
 8046b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8046b62:	b2db      	uxtb	r3, r3
 8046b64:	2b01      	cmp	r3, #1
 8046b66:	bf14      	ite	ne
 8046b68:	2301      	movne	r3, #1
 8046b6a:	2300      	moveq	r3, #0
 8046b6c:	b2db      	uxtb	r3, r3
 8046b6e:	e022      	b.n	8046bb6 <HAL_TIM_PWM_Start+0x6a>
 8046b70:	683b      	ldr	r3, [r7, #0]
 8046b72:	2b04      	cmp	r3, #4
 8046b74:	d109      	bne.n	8046b8a <HAL_TIM_PWM_Start+0x3e>
 8046b76:	687b      	ldr	r3, [r7, #4]
 8046b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8046b7c:	b2db      	uxtb	r3, r3
 8046b7e:	2b01      	cmp	r3, #1
 8046b80:	bf14      	ite	ne
 8046b82:	2301      	movne	r3, #1
 8046b84:	2300      	moveq	r3, #0
 8046b86:	b2db      	uxtb	r3, r3
 8046b88:	e015      	b.n	8046bb6 <HAL_TIM_PWM_Start+0x6a>
 8046b8a:	683b      	ldr	r3, [r7, #0]
 8046b8c:	2b08      	cmp	r3, #8
 8046b8e:	d109      	bne.n	8046ba4 <HAL_TIM_PWM_Start+0x58>
 8046b90:	687b      	ldr	r3, [r7, #4]
 8046b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8046b96:	b2db      	uxtb	r3, r3
 8046b98:	2b01      	cmp	r3, #1
 8046b9a:	bf14      	ite	ne
 8046b9c:	2301      	movne	r3, #1
 8046b9e:	2300      	moveq	r3, #0
 8046ba0:	b2db      	uxtb	r3, r3
 8046ba2:	e008      	b.n	8046bb6 <HAL_TIM_PWM_Start+0x6a>
 8046ba4:	687b      	ldr	r3, [r7, #4]
 8046ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8046baa:	b2db      	uxtb	r3, r3
 8046bac:	2b01      	cmp	r3, #1
 8046bae:	bf14      	ite	ne
 8046bb0:	2301      	movne	r3, #1
 8046bb2:	2300      	moveq	r3, #0
 8046bb4:	b2db      	uxtb	r3, r3
 8046bb6:	2b00      	cmp	r3, #0
 8046bb8:	d001      	beq.n	8046bbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8046bba:	2301      	movs	r3, #1
 8046bbc:	e07c      	b.n	8046cb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8046bbe:	683b      	ldr	r3, [r7, #0]
 8046bc0:	2b00      	cmp	r3, #0
 8046bc2:	d104      	bne.n	8046bce <HAL_TIM_PWM_Start+0x82>
 8046bc4:	687b      	ldr	r3, [r7, #4]
 8046bc6:	2202      	movs	r2, #2
 8046bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8046bcc:	e013      	b.n	8046bf6 <HAL_TIM_PWM_Start+0xaa>
 8046bce:	683b      	ldr	r3, [r7, #0]
 8046bd0:	2b04      	cmp	r3, #4
 8046bd2:	d104      	bne.n	8046bde <HAL_TIM_PWM_Start+0x92>
 8046bd4:	687b      	ldr	r3, [r7, #4]
 8046bd6:	2202      	movs	r2, #2
 8046bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8046bdc:	e00b      	b.n	8046bf6 <HAL_TIM_PWM_Start+0xaa>
 8046bde:	683b      	ldr	r3, [r7, #0]
 8046be0:	2b08      	cmp	r3, #8
 8046be2:	d104      	bne.n	8046bee <HAL_TIM_PWM_Start+0xa2>
 8046be4:	687b      	ldr	r3, [r7, #4]
 8046be6:	2202      	movs	r2, #2
 8046be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8046bec:	e003      	b.n	8046bf6 <HAL_TIM_PWM_Start+0xaa>
 8046bee:	687b      	ldr	r3, [r7, #4]
 8046bf0:	2202      	movs	r2, #2
 8046bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8046bf6:	687b      	ldr	r3, [r7, #4]
 8046bf8:	681b      	ldr	r3, [r3, #0]
 8046bfa:	2201      	movs	r2, #1
 8046bfc:	6839      	ldr	r1, [r7, #0]
 8046bfe:	4618      	mov	r0, r3
 8046c00:	f000 ffbe 	bl	8047b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8046c04:	687b      	ldr	r3, [r7, #4]
 8046c06:	681b      	ldr	r3, [r3, #0]
 8046c08:	4a2d      	ldr	r2, [pc, #180]	; (8046cc0 <HAL_TIM_PWM_Start+0x174>)
 8046c0a:	4293      	cmp	r3, r2
 8046c0c:	d004      	beq.n	8046c18 <HAL_TIM_PWM_Start+0xcc>
 8046c0e:	687b      	ldr	r3, [r7, #4]
 8046c10:	681b      	ldr	r3, [r3, #0]
 8046c12:	4a2c      	ldr	r2, [pc, #176]	; (8046cc4 <HAL_TIM_PWM_Start+0x178>)
 8046c14:	4293      	cmp	r3, r2
 8046c16:	d101      	bne.n	8046c1c <HAL_TIM_PWM_Start+0xd0>
 8046c18:	2301      	movs	r3, #1
 8046c1a:	e000      	b.n	8046c1e <HAL_TIM_PWM_Start+0xd2>
 8046c1c:	2300      	movs	r3, #0
 8046c1e:	2b00      	cmp	r3, #0
 8046c20:	d007      	beq.n	8046c32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8046c22:	687b      	ldr	r3, [r7, #4]
 8046c24:	681b      	ldr	r3, [r3, #0]
 8046c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8046c28:	687b      	ldr	r3, [r7, #4]
 8046c2a:	681b      	ldr	r3, [r3, #0]
 8046c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8046c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8046c32:	687b      	ldr	r3, [r7, #4]
 8046c34:	681b      	ldr	r3, [r3, #0]
 8046c36:	4a22      	ldr	r2, [pc, #136]	; (8046cc0 <HAL_TIM_PWM_Start+0x174>)
 8046c38:	4293      	cmp	r3, r2
 8046c3a:	d022      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c3c:	687b      	ldr	r3, [r7, #4]
 8046c3e:	681b      	ldr	r3, [r3, #0]
 8046c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8046c44:	d01d      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c46:	687b      	ldr	r3, [r7, #4]
 8046c48:	681b      	ldr	r3, [r3, #0]
 8046c4a:	4a1f      	ldr	r2, [pc, #124]	; (8046cc8 <HAL_TIM_PWM_Start+0x17c>)
 8046c4c:	4293      	cmp	r3, r2
 8046c4e:	d018      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c50:	687b      	ldr	r3, [r7, #4]
 8046c52:	681b      	ldr	r3, [r3, #0]
 8046c54:	4a1d      	ldr	r2, [pc, #116]	; (8046ccc <HAL_TIM_PWM_Start+0x180>)
 8046c56:	4293      	cmp	r3, r2
 8046c58:	d013      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c5a:	687b      	ldr	r3, [r7, #4]
 8046c5c:	681b      	ldr	r3, [r3, #0]
 8046c5e:	4a1c      	ldr	r2, [pc, #112]	; (8046cd0 <HAL_TIM_PWM_Start+0x184>)
 8046c60:	4293      	cmp	r3, r2
 8046c62:	d00e      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c64:	687b      	ldr	r3, [r7, #4]
 8046c66:	681b      	ldr	r3, [r3, #0]
 8046c68:	4a16      	ldr	r2, [pc, #88]	; (8046cc4 <HAL_TIM_PWM_Start+0x178>)
 8046c6a:	4293      	cmp	r3, r2
 8046c6c:	d009      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c6e:	687b      	ldr	r3, [r7, #4]
 8046c70:	681b      	ldr	r3, [r3, #0]
 8046c72:	4a18      	ldr	r2, [pc, #96]	; (8046cd4 <HAL_TIM_PWM_Start+0x188>)
 8046c74:	4293      	cmp	r3, r2
 8046c76:	d004      	beq.n	8046c82 <HAL_TIM_PWM_Start+0x136>
 8046c78:	687b      	ldr	r3, [r7, #4]
 8046c7a:	681b      	ldr	r3, [r3, #0]
 8046c7c:	4a16      	ldr	r2, [pc, #88]	; (8046cd8 <HAL_TIM_PWM_Start+0x18c>)
 8046c7e:	4293      	cmp	r3, r2
 8046c80:	d111      	bne.n	8046ca6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8046c82:	687b      	ldr	r3, [r7, #4]
 8046c84:	681b      	ldr	r3, [r3, #0]
 8046c86:	689b      	ldr	r3, [r3, #8]
 8046c88:	f003 0307 	and.w	r3, r3, #7
 8046c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046c8e:	68fb      	ldr	r3, [r7, #12]
 8046c90:	2b06      	cmp	r3, #6
 8046c92:	d010      	beq.n	8046cb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8046c94:	687b      	ldr	r3, [r7, #4]
 8046c96:	681b      	ldr	r3, [r3, #0]
 8046c98:	681a      	ldr	r2, [r3, #0]
 8046c9a:	687b      	ldr	r3, [r7, #4]
 8046c9c:	681b      	ldr	r3, [r3, #0]
 8046c9e:	f042 0201 	orr.w	r2, r2, #1
 8046ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8046ca4:	e007      	b.n	8046cb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8046ca6:	687b      	ldr	r3, [r7, #4]
 8046ca8:	681b      	ldr	r3, [r3, #0]
 8046caa:	681a      	ldr	r2, [r3, #0]
 8046cac:	687b      	ldr	r3, [r7, #4]
 8046cae:	681b      	ldr	r3, [r3, #0]
 8046cb0:	f042 0201 	orr.w	r2, r2, #1
 8046cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8046cb6:	2300      	movs	r3, #0
}
 8046cb8:	4618      	mov	r0, r3
 8046cba:	3710      	adds	r7, #16
 8046cbc:	46bd      	mov	sp, r7
 8046cbe:	bd80      	pop	{r7, pc}
 8046cc0:	40010000 	.word	0x40010000
 8046cc4:	40010400 	.word	0x40010400
 8046cc8:	40000400 	.word	0x40000400
 8046ccc:	40000800 	.word	0x40000800
 8046cd0:	40000c00 	.word	0x40000c00
 8046cd4:	40014000 	.word	0x40014000
 8046cd8:	40001800 	.word	0x40001800

08046cdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8046cdc:	b580      	push	{r7, lr}
 8046cde:	b082      	sub	sp, #8
 8046ce0:	af00      	add	r7, sp, #0
 8046ce2:	6078      	str	r0, [r7, #4]
 8046ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8046ce6:	687b      	ldr	r3, [r7, #4]
 8046ce8:	681b      	ldr	r3, [r3, #0]
 8046cea:	2200      	movs	r2, #0
 8046cec:	6839      	ldr	r1, [r7, #0]
 8046cee:	4618      	mov	r0, r3
 8046cf0:	f000 ff46 	bl	8047b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8046cf4:	687b      	ldr	r3, [r7, #4]
 8046cf6:	681b      	ldr	r3, [r3, #0]
 8046cf8:	4a2e      	ldr	r2, [pc, #184]	; (8046db4 <HAL_TIM_PWM_Stop+0xd8>)
 8046cfa:	4293      	cmp	r3, r2
 8046cfc:	d004      	beq.n	8046d08 <HAL_TIM_PWM_Stop+0x2c>
 8046cfe:	687b      	ldr	r3, [r7, #4]
 8046d00:	681b      	ldr	r3, [r3, #0]
 8046d02:	4a2d      	ldr	r2, [pc, #180]	; (8046db8 <HAL_TIM_PWM_Stop+0xdc>)
 8046d04:	4293      	cmp	r3, r2
 8046d06:	d101      	bne.n	8046d0c <HAL_TIM_PWM_Stop+0x30>
 8046d08:	2301      	movs	r3, #1
 8046d0a:	e000      	b.n	8046d0e <HAL_TIM_PWM_Stop+0x32>
 8046d0c:	2300      	movs	r3, #0
 8046d0e:	2b00      	cmp	r3, #0
 8046d10:	d017      	beq.n	8046d42 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8046d12:	687b      	ldr	r3, [r7, #4]
 8046d14:	681b      	ldr	r3, [r3, #0]
 8046d16:	6a1a      	ldr	r2, [r3, #32]
 8046d18:	f241 1311 	movw	r3, #4369	; 0x1111
 8046d1c:	4013      	ands	r3, r2
 8046d1e:	2b00      	cmp	r3, #0
 8046d20:	d10f      	bne.n	8046d42 <HAL_TIM_PWM_Stop+0x66>
 8046d22:	687b      	ldr	r3, [r7, #4]
 8046d24:	681b      	ldr	r3, [r3, #0]
 8046d26:	6a1a      	ldr	r2, [r3, #32]
 8046d28:	f240 4344 	movw	r3, #1092	; 0x444
 8046d2c:	4013      	ands	r3, r2
 8046d2e:	2b00      	cmp	r3, #0
 8046d30:	d107      	bne.n	8046d42 <HAL_TIM_PWM_Stop+0x66>
 8046d32:	687b      	ldr	r3, [r7, #4]
 8046d34:	681b      	ldr	r3, [r3, #0]
 8046d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8046d38:	687b      	ldr	r3, [r7, #4]
 8046d3a:	681b      	ldr	r3, [r3, #0]
 8046d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8046d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8046d42:	687b      	ldr	r3, [r7, #4]
 8046d44:	681b      	ldr	r3, [r3, #0]
 8046d46:	6a1a      	ldr	r2, [r3, #32]
 8046d48:	f241 1311 	movw	r3, #4369	; 0x1111
 8046d4c:	4013      	ands	r3, r2
 8046d4e:	2b00      	cmp	r3, #0
 8046d50:	d10f      	bne.n	8046d72 <HAL_TIM_PWM_Stop+0x96>
 8046d52:	687b      	ldr	r3, [r7, #4]
 8046d54:	681b      	ldr	r3, [r3, #0]
 8046d56:	6a1a      	ldr	r2, [r3, #32]
 8046d58:	f240 4344 	movw	r3, #1092	; 0x444
 8046d5c:	4013      	ands	r3, r2
 8046d5e:	2b00      	cmp	r3, #0
 8046d60:	d107      	bne.n	8046d72 <HAL_TIM_PWM_Stop+0x96>
 8046d62:	687b      	ldr	r3, [r7, #4]
 8046d64:	681b      	ldr	r3, [r3, #0]
 8046d66:	681a      	ldr	r2, [r3, #0]
 8046d68:	687b      	ldr	r3, [r7, #4]
 8046d6a:	681b      	ldr	r3, [r3, #0]
 8046d6c:	f022 0201 	bic.w	r2, r2, #1
 8046d70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8046d72:	683b      	ldr	r3, [r7, #0]
 8046d74:	2b00      	cmp	r3, #0
 8046d76:	d104      	bne.n	8046d82 <HAL_TIM_PWM_Stop+0xa6>
 8046d78:	687b      	ldr	r3, [r7, #4]
 8046d7a:	2201      	movs	r2, #1
 8046d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8046d80:	e013      	b.n	8046daa <HAL_TIM_PWM_Stop+0xce>
 8046d82:	683b      	ldr	r3, [r7, #0]
 8046d84:	2b04      	cmp	r3, #4
 8046d86:	d104      	bne.n	8046d92 <HAL_TIM_PWM_Stop+0xb6>
 8046d88:	687b      	ldr	r3, [r7, #4]
 8046d8a:	2201      	movs	r2, #1
 8046d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8046d90:	e00b      	b.n	8046daa <HAL_TIM_PWM_Stop+0xce>
 8046d92:	683b      	ldr	r3, [r7, #0]
 8046d94:	2b08      	cmp	r3, #8
 8046d96:	d104      	bne.n	8046da2 <HAL_TIM_PWM_Stop+0xc6>
 8046d98:	687b      	ldr	r3, [r7, #4]
 8046d9a:	2201      	movs	r2, #1
 8046d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8046da0:	e003      	b.n	8046daa <HAL_TIM_PWM_Stop+0xce>
 8046da2:	687b      	ldr	r3, [r7, #4]
 8046da4:	2201      	movs	r2, #1
 8046da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8046daa:	2300      	movs	r3, #0
}
 8046dac:	4618      	mov	r0, r3
 8046dae:	3708      	adds	r7, #8
 8046db0:	46bd      	mov	sp, r7
 8046db2:	bd80      	pop	{r7, pc}
 8046db4:	40010000 	.word	0x40010000
 8046db8:	40010400 	.word	0x40010400

08046dbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8046dbc:	b580      	push	{r7, lr}
 8046dbe:	b086      	sub	sp, #24
 8046dc0:	af00      	add	r7, sp, #0
 8046dc2:	6078      	str	r0, [r7, #4]
 8046dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8046dc6:	687b      	ldr	r3, [r7, #4]
 8046dc8:	2b00      	cmp	r3, #0
 8046dca:	d101      	bne.n	8046dd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8046dcc:	2301      	movs	r3, #1
 8046dce:	e097      	b.n	8046f00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8046dd0:	687b      	ldr	r3, [r7, #4]
 8046dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046dd6:	b2db      	uxtb	r3, r3
 8046dd8:	2b00      	cmp	r3, #0
 8046dda:	d106      	bne.n	8046dea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	2200      	movs	r2, #0
 8046de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8046de4:	6878      	ldr	r0, [r7, #4]
 8046de6:	f7fc ff5f 	bl	8043ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8046dea:	687b      	ldr	r3, [r7, #4]
 8046dec:	2202      	movs	r2, #2
 8046dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8046df2:	687b      	ldr	r3, [r7, #4]
 8046df4:	681b      	ldr	r3, [r3, #0]
 8046df6:	689b      	ldr	r3, [r3, #8]
 8046df8:	687a      	ldr	r2, [r7, #4]
 8046dfa:	6812      	ldr	r2, [r2, #0]
 8046dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8046e00:	f023 0307 	bic.w	r3, r3, #7
 8046e04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8046e06:	687b      	ldr	r3, [r7, #4]
 8046e08:	681a      	ldr	r2, [r3, #0]
 8046e0a:	687b      	ldr	r3, [r7, #4]
 8046e0c:	3304      	adds	r3, #4
 8046e0e:	4619      	mov	r1, r3
 8046e10:	4610      	mov	r0, r2
 8046e12:	f000 fbcb 	bl	80475ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8046e16:	687b      	ldr	r3, [r7, #4]
 8046e18:	681b      	ldr	r3, [r3, #0]
 8046e1a:	689b      	ldr	r3, [r3, #8]
 8046e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8046e1e:	687b      	ldr	r3, [r7, #4]
 8046e20:	681b      	ldr	r3, [r3, #0]
 8046e22:	699b      	ldr	r3, [r3, #24]
 8046e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8046e26:	687b      	ldr	r3, [r7, #4]
 8046e28:	681b      	ldr	r3, [r3, #0]
 8046e2a:	6a1b      	ldr	r3, [r3, #32]
 8046e2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8046e2e:	683b      	ldr	r3, [r7, #0]
 8046e30:	681b      	ldr	r3, [r3, #0]
 8046e32:	697a      	ldr	r2, [r7, #20]
 8046e34:	4313      	orrs	r3, r2
 8046e36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8046e38:	693b      	ldr	r3, [r7, #16]
 8046e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8046e3e:	f023 0303 	bic.w	r3, r3, #3
 8046e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8046e44:	683b      	ldr	r3, [r7, #0]
 8046e46:	689a      	ldr	r2, [r3, #8]
 8046e48:	683b      	ldr	r3, [r7, #0]
 8046e4a:	699b      	ldr	r3, [r3, #24]
 8046e4c:	021b      	lsls	r3, r3, #8
 8046e4e:	4313      	orrs	r3, r2
 8046e50:	693a      	ldr	r2, [r7, #16]
 8046e52:	4313      	orrs	r3, r2
 8046e54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8046e56:	693b      	ldr	r3, [r7, #16]
 8046e58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8046e5c:	f023 030c 	bic.w	r3, r3, #12
 8046e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8046e62:	693b      	ldr	r3, [r7, #16]
 8046e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8046e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8046e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8046e6e:	683b      	ldr	r3, [r7, #0]
 8046e70:	68da      	ldr	r2, [r3, #12]
 8046e72:	683b      	ldr	r3, [r7, #0]
 8046e74:	69db      	ldr	r3, [r3, #28]
 8046e76:	021b      	lsls	r3, r3, #8
 8046e78:	4313      	orrs	r3, r2
 8046e7a:	693a      	ldr	r2, [r7, #16]
 8046e7c:	4313      	orrs	r3, r2
 8046e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8046e80:	683b      	ldr	r3, [r7, #0]
 8046e82:	691b      	ldr	r3, [r3, #16]
 8046e84:	011a      	lsls	r2, r3, #4
 8046e86:	683b      	ldr	r3, [r7, #0]
 8046e88:	6a1b      	ldr	r3, [r3, #32]
 8046e8a:	031b      	lsls	r3, r3, #12
 8046e8c:	4313      	orrs	r3, r2
 8046e8e:	693a      	ldr	r2, [r7, #16]
 8046e90:	4313      	orrs	r3, r2
 8046e92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8046e94:	68fb      	ldr	r3, [r7, #12]
 8046e96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8046e9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8046e9c:	68fb      	ldr	r3, [r7, #12]
 8046e9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8046ea2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8046ea4:	683b      	ldr	r3, [r7, #0]
 8046ea6:	685a      	ldr	r2, [r3, #4]
 8046ea8:	683b      	ldr	r3, [r7, #0]
 8046eaa:	695b      	ldr	r3, [r3, #20]
 8046eac:	011b      	lsls	r3, r3, #4
 8046eae:	4313      	orrs	r3, r2
 8046eb0:	68fa      	ldr	r2, [r7, #12]
 8046eb2:	4313      	orrs	r3, r2
 8046eb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8046eb6:	687b      	ldr	r3, [r7, #4]
 8046eb8:	681b      	ldr	r3, [r3, #0]
 8046eba:	697a      	ldr	r2, [r7, #20]
 8046ebc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	681b      	ldr	r3, [r3, #0]
 8046ec2:	693a      	ldr	r2, [r7, #16]
 8046ec4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8046ec6:	687b      	ldr	r3, [r7, #4]
 8046ec8:	681b      	ldr	r3, [r3, #0]
 8046eca:	68fa      	ldr	r2, [r7, #12]
 8046ecc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8046ece:	687b      	ldr	r3, [r7, #4]
 8046ed0:	2201      	movs	r2, #1
 8046ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8046ed6:	687b      	ldr	r3, [r7, #4]
 8046ed8:	2201      	movs	r2, #1
 8046eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8046ede:	687b      	ldr	r3, [r7, #4]
 8046ee0:	2201      	movs	r2, #1
 8046ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8046ee6:	687b      	ldr	r3, [r7, #4]
 8046ee8:	2201      	movs	r2, #1
 8046eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8046eee:	687b      	ldr	r3, [r7, #4]
 8046ef0:	2201      	movs	r2, #1
 8046ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8046ef6:	687b      	ldr	r3, [r7, #4]
 8046ef8:	2201      	movs	r2, #1
 8046efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8046efe:	2300      	movs	r3, #0
}
 8046f00:	4618      	mov	r0, r3
 8046f02:	3718      	adds	r7, #24
 8046f04:	46bd      	mov	sp, r7
 8046f06:	bd80      	pop	{r7, pc}

08046f08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8046f08:	b580      	push	{r7, lr}
 8046f0a:	b084      	sub	sp, #16
 8046f0c:	af00      	add	r7, sp, #0
 8046f0e:	6078      	str	r0, [r7, #4]
 8046f10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8046f12:	687b      	ldr	r3, [r7, #4]
 8046f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8046f18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8046f1a:	687b      	ldr	r3, [r7, #4]
 8046f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8046f20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8046f22:	687b      	ldr	r3, [r7, #4]
 8046f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8046f28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8046f2a:	687b      	ldr	r3, [r7, #4]
 8046f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8046f30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8046f32:	683b      	ldr	r3, [r7, #0]
 8046f34:	2b00      	cmp	r3, #0
 8046f36:	d110      	bne.n	8046f5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8046f38:	7bfb      	ldrb	r3, [r7, #15]
 8046f3a:	2b01      	cmp	r3, #1
 8046f3c:	d102      	bne.n	8046f44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8046f3e:	7b7b      	ldrb	r3, [r7, #13]
 8046f40:	2b01      	cmp	r3, #1
 8046f42:	d001      	beq.n	8046f48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8046f44:	2301      	movs	r3, #1
 8046f46:	e069      	b.n	804701c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8046f48:	687b      	ldr	r3, [r7, #4]
 8046f4a:	2202      	movs	r2, #2
 8046f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8046f50:	687b      	ldr	r3, [r7, #4]
 8046f52:	2202      	movs	r2, #2
 8046f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8046f58:	e031      	b.n	8046fbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8046f5a:	683b      	ldr	r3, [r7, #0]
 8046f5c:	2b04      	cmp	r3, #4
 8046f5e:	d110      	bne.n	8046f82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8046f60:	7bbb      	ldrb	r3, [r7, #14]
 8046f62:	2b01      	cmp	r3, #1
 8046f64:	d102      	bne.n	8046f6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8046f66:	7b3b      	ldrb	r3, [r7, #12]
 8046f68:	2b01      	cmp	r3, #1
 8046f6a:	d001      	beq.n	8046f70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8046f6c:	2301      	movs	r3, #1
 8046f6e:	e055      	b.n	804701c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8046f70:	687b      	ldr	r3, [r7, #4]
 8046f72:	2202      	movs	r2, #2
 8046f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8046f78:	687b      	ldr	r3, [r7, #4]
 8046f7a:	2202      	movs	r2, #2
 8046f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8046f80:	e01d      	b.n	8046fbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8046f82:	7bfb      	ldrb	r3, [r7, #15]
 8046f84:	2b01      	cmp	r3, #1
 8046f86:	d108      	bne.n	8046f9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8046f88:	7bbb      	ldrb	r3, [r7, #14]
 8046f8a:	2b01      	cmp	r3, #1
 8046f8c:	d105      	bne.n	8046f9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8046f8e:	7b7b      	ldrb	r3, [r7, #13]
 8046f90:	2b01      	cmp	r3, #1
 8046f92:	d102      	bne.n	8046f9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8046f94:	7b3b      	ldrb	r3, [r7, #12]
 8046f96:	2b01      	cmp	r3, #1
 8046f98:	d001      	beq.n	8046f9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8046f9a:	2301      	movs	r3, #1
 8046f9c:	e03e      	b.n	804701c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8046f9e:	687b      	ldr	r3, [r7, #4]
 8046fa0:	2202      	movs	r2, #2
 8046fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8046fa6:	687b      	ldr	r3, [r7, #4]
 8046fa8:	2202      	movs	r2, #2
 8046faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8046fae:	687b      	ldr	r3, [r7, #4]
 8046fb0:	2202      	movs	r2, #2
 8046fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8046fb6:	687b      	ldr	r3, [r7, #4]
 8046fb8:	2202      	movs	r2, #2
 8046fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8046fbe:	683b      	ldr	r3, [r7, #0]
 8046fc0:	2b00      	cmp	r3, #0
 8046fc2:	d003      	beq.n	8046fcc <HAL_TIM_Encoder_Start+0xc4>
 8046fc4:	683b      	ldr	r3, [r7, #0]
 8046fc6:	2b04      	cmp	r3, #4
 8046fc8:	d008      	beq.n	8046fdc <HAL_TIM_Encoder_Start+0xd4>
 8046fca:	e00f      	b.n	8046fec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8046fcc:	687b      	ldr	r3, [r7, #4]
 8046fce:	681b      	ldr	r3, [r3, #0]
 8046fd0:	2201      	movs	r2, #1
 8046fd2:	2100      	movs	r1, #0
 8046fd4:	4618      	mov	r0, r3
 8046fd6:	f000 fdd3 	bl	8047b80 <TIM_CCxChannelCmd>
      break;
 8046fda:	e016      	b.n	804700a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8046fdc:	687b      	ldr	r3, [r7, #4]
 8046fde:	681b      	ldr	r3, [r3, #0]
 8046fe0:	2201      	movs	r2, #1
 8046fe2:	2104      	movs	r1, #4
 8046fe4:	4618      	mov	r0, r3
 8046fe6:	f000 fdcb 	bl	8047b80 <TIM_CCxChannelCmd>
      break;
 8046fea:	e00e      	b.n	804700a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8046fec:	687b      	ldr	r3, [r7, #4]
 8046fee:	681b      	ldr	r3, [r3, #0]
 8046ff0:	2201      	movs	r2, #1
 8046ff2:	2100      	movs	r1, #0
 8046ff4:	4618      	mov	r0, r3
 8046ff6:	f000 fdc3 	bl	8047b80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	681b      	ldr	r3, [r3, #0]
 8046ffe:	2201      	movs	r2, #1
 8047000:	2104      	movs	r1, #4
 8047002:	4618      	mov	r0, r3
 8047004:	f000 fdbc 	bl	8047b80 <TIM_CCxChannelCmd>
      break;
 8047008:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 804700a:	687b      	ldr	r3, [r7, #4]
 804700c:	681b      	ldr	r3, [r3, #0]
 804700e:	681a      	ldr	r2, [r3, #0]
 8047010:	687b      	ldr	r3, [r7, #4]
 8047012:	681b      	ldr	r3, [r3, #0]
 8047014:	f042 0201 	orr.w	r2, r2, #1
 8047018:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 804701a:	2300      	movs	r3, #0
}
 804701c:	4618      	mov	r0, r3
 804701e:	3710      	adds	r7, #16
 8047020:	46bd      	mov	sp, r7
 8047022:	bd80      	pop	{r7, pc}

08047024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8047024:	b580      	push	{r7, lr}
 8047026:	b082      	sub	sp, #8
 8047028:	af00      	add	r7, sp, #0
 804702a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804702c:	687b      	ldr	r3, [r7, #4]
 804702e:	681b      	ldr	r3, [r3, #0]
 8047030:	691b      	ldr	r3, [r3, #16]
 8047032:	f003 0302 	and.w	r3, r3, #2
 8047036:	2b02      	cmp	r3, #2
 8047038:	d122      	bne.n	8047080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804703a:	687b      	ldr	r3, [r7, #4]
 804703c:	681b      	ldr	r3, [r3, #0]
 804703e:	68db      	ldr	r3, [r3, #12]
 8047040:	f003 0302 	and.w	r3, r3, #2
 8047044:	2b02      	cmp	r3, #2
 8047046:	d11b      	bne.n	8047080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8047048:	687b      	ldr	r3, [r7, #4]
 804704a:	681b      	ldr	r3, [r3, #0]
 804704c:	f06f 0202 	mvn.w	r2, #2
 8047050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8047052:	687b      	ldr	r3, [r7, #4]
 8047054:	2201      	movs	r2, #1
 8047056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8047058:	687b      	ldr	r3, [r7, #4]
 804705a:	681b      	ldr	r3, [r3, #0]
 804705c:	699b      	ldr	r3, [r3, #24]
 804705e:	f003 0303 	and.w	r3, r3, #3
 8047062:	2b00      	cmp	r3, #0
 8047064:	d003      	beq.n	804706e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8047066:	6878      	ldr	r0, [r7, #4]
 8047068:	f000 fa81 	bl	804756e <HAL_TIM_IC_CaptureCallback>
 804706c:	e005      	b.n	804707a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804706e:	6878      	ldr	r0, [r7, #4]
 8047070:	f000 fa73 	bl	804755a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047074:	6878      	ldr	r0, [r7, #4]
 8047076:	f000 fa84 	bl	8047582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804707a:	687b      	ldr	r3, [r7, #4]
 804707c:	2200      	movs	r2, #0
 804707e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8047080:	687b      	ldr	r3, [r7, #4]
 8047082:	681b      	ldr	r3, [r3, #0]
 8047084:	691b      	ldr	r3, [r3, #16]
 8047086:	f003 0304 	and.w	r3, r3, #4
 804708a:	2b04      	cmp	r3, #4
 804708c:	d122      	bne.n	80470d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804708e:	687b      	ldr	r3, [r7, #4]
 8047090:	681b      	ldr	r3, [r3, #0]
 8047092:	68db      	ldr	r3, [r3, #12]
 8047094:	f003 0304 	and.w	r3, r3, #4
 8047098:	2b04      	cmp	r3, #4
 804709a:	d11b      	bne.n	80470d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804709c:	687b      	ldr	r3, [r7, #4]
 804709e:	681b      	ldr	r3, [r3, #0]
 80470a0:	f06f 0204 	mvn.w	r2, #4
 80470a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80470a6:	687b      	ldr	r3, [r7, #4]
 80470a8:	2202      	movs	r2, #2
 80470aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80470ac:	687b      	ldr	r3, [r7, #4]
 80470ae:	681b      	ldr	r3, [r3, #0]
 80470b0:	699b      	ldr	r3, [r3, #24]
 80470b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80470b6:	2b00      	cmp	r3, #0
 80470b8:	d003      	beq.n	80470c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80470ba:	6878      	ldr	r0, [r7, #4]
 80470bc:	f000 fa57 	bl	804756e <HAL_TIM_IC_CaptureCallback>
 80470c0:	e005      	b.n	80470ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80470c2:	6878      	ldr	r0, [r7, #4]
 80470c4:	f000 fa49 	bl	804755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80470c8:	6878      	ldr	r0, [r7, #4]
 80470ca:	f000 fa5a 	bl	8047582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80470ce:	687b      	ldr	r3, [r7, #4]
 80470d0:	2200      	movs	r2, #0
 80470d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80470d4:	687b      	ldr	r3, [r7, #4]
 80470d6:	681b      	ldr	r3, [r3, #0]
 80470d8:	691b      	ldr	r3, [r3, #16]
 80470da:	f003 0308 	and.w	r3, r3, #8
 80470de:	2b08      	cmp	r3, #8
 80470e0:	d122      	bne.n	8047128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80470e2:	687b      	ldr	r3, [r7, #4]
 80470e4:	681b      	ldr	r3, [r3, #0]
 80470e6:	68db      	ldr	r3, [r3, #12]
 80470e8:	f003 0308 	and.w	r3, r3, #8
 80470ec:	2b08      	cmp	r3, #8
 80470ee:	d11b      	bne.n	8047128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80470f0:	687b      	ldr	r3, [r7, #4]
 80470f2:	681b      	ldr	r3, [r3, #0]
 80470f4:	f06f 0208 	mvn.w	r2, #8
 80470f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80470fa:	687b      	ldr	r3, [r7, #4]
 80470fc:	2204      	movs	r2, #4
 80470fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8047100:	687b      	ldr	r3, [r7, #4]
 8047102:	681b      	ldr	r3, [r3, #0]
 8047104:	69db      	ldr	r3, [r3, #28]
 8047106:	f003 0303 	and.w	r3, r3, #3
 804710a:	2b00      	cmp	r3, #0
 804710c:	d003      	beq.n	8047116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804710e:	6878      	ldr	r0, [r7, #4]
 8047110:	f000 fa2d 	bl	804756e <HAL_TIM_IC_CaptureCallback>
 8047114:	e005      	b.n	8047122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047116:	6878      	ldr	r0, [r7, #4]
 8047118:	f000 fa1f 	bl	804755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804711c:	6878      	ldr	r0, [r7, #4]
 804711e:	f000 fa30 	bl	8047582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047122:	687b      	ldr	r3, [r7, #4]
 8047124:	2200      	movs	r2, #0
 8047126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8047128:	687b      	ldr	r3, [r7, #4]
 804712a:	681b      	ldr	r3, [r3, #0]
 804712c:	691b      	ldr	r3, [r3, #16]
 804712e:	f003 0310 	and.w	r3, r3, #16
 8047132:	2b10      	cmp	r3, #16
 8047134:	d122      	bne.n	804717c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8047136:	687b      	ldr	r3, [r7, #4]
 8047138:	681b      	ldr	r3, [r3, #0]
 804713a:	68db      	ldr	r3, [r3, #12]
 804713c:	f003 0310 	and.w	r3, r3, #16
 8047140:	2b10      	cmp	r3, #16
 8047142:	d11b      	bne.n	804717c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8047144:	687b      	ldr	r3, [r7, #4]
 8047146:	681b      	ldr	r3, [r3, #0]
 8047148:	f06f 0210 	mvn.w	r2, #16
 804714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804714e:	687b      	ldr	r3, [r7, #4]
 8047150:	2208      	movs	r2, #8
 8047152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8047154:	687b      	ldr	r3, [r7, #4]
 8047156:	681b      	ldr	r3, [r3, #0]
 8047158:	69db      	ldr	r3, [r3, #28]
 804715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804715e:	2b00      	cmp	r3, #0
 8047160:	d003      	beq.n	804716a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047162:	6878      	ldr	r0, [r7, #4]
 8047164:	f000 fa03 	bl	804756e <HAL_TIM_IC_CaptureCallback>
 8047168:	e005      	b.n	8047176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804716a:	6878      	ldr	r0, [r7, #4]
 804716c:	f000 f9f5 	bl	804755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047170:	6878      	ldr	r0, [r7, #4]
 8047172:	f000 fa06 	bl	8047582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047176:	687b      	ldr	r3, [r7, #4]
 8047178:	2200      	movs	r2, #0
 804717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804717c:	687b      	ldr	r3, [r7, #4]
 804717e:	681b      	ldr	r3, [r3, #0]
 8047180:	691b      	ldr	r3, [r3, #16]
 8047182:	f003 0301 	and.w	r3, r3, #1
 8047186:	2b01      	cmp	r3, #1
 8047188:	d10e      	bne.n	80471a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804718a:	687b      	ldr	r3, [r7, #4]
 804718c:	681b      	ldr	r3, [r3, #0]
 804718e:	68db      	ldr	r3, [r3, #12]
 8047190:	f003 0301 	and.w	r3, r3, #1
 8047194:	2b01      	cmp	r3, #1
 8047196:	d107      	bne.n	80471a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8047198:	687b      	ldr	r3, [r7, #4]
 804719a:	681b      	ldr	r3, [r3, #0]
 804719c:	f06f 0201 	mvn.w	r2, #1
 80471a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80471a2:	6878      	ldr	r0, [r7, #4]
 80471a4:	f000 f9cf 	bl	8047546 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80471a8:	687b      	ldr	r3, [r7, #4]
 80471aa:	681b      	ldr	r3, [r3, #0]
 80471ac:	691b      	ldr	r3, [r3, #16]
 80471ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80471b2:	2b80      	cmp	r3, #128	; 0x80
 80471b4:	d10e      	bne.n	80471d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80471b6:	687b      	ldr	r3, [r7, #4]
 80471b8:	681b      	ldr	r3, [r3, #0]
 80471ba:	68db      	ldr	r3, [r3, #12]
 80471bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80471c0:	2b80      	cmp	r3, #128	; 0x80
 80471c2:	d107      	bne.n	80471d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80471c4:	687b      	ldr	r3, [r7, #4]
 80471c6:	681b      	ldr	r3, [r3, #0]
 80471c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80471cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80471ce:	6878      	ldr	r0, [r7, #4]
 80471d0:	f000 fd82 	bl	8047cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80471d4:	687b      	ldr	r3, [r7, #4]
 80471d6:	681b      	ldr	r3, [r3, #0]
 80471d8:	691b      	ldr	r3, [r3, #16]
 80471da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80471de:	2b40      	cmp	r3, #64	; 0x40
 80471e0:	d10e      	bne.n	8047200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80471e2:	687b      	ldr	r3, [r7, #4]
 80471e4:	681b      	ldr	r3, [r3, #0]
 80471e6:	68db      	ldr	r3, [r3, #12]
 80471e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80471ec:	2b40      	cmp	r3, #64	; 0x40
 80471ee:	d107      	bne.n	8047200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80471f0:	687b      	ldr	r3, [r7, #4]
 80471f2:	681b      	ldr	r3, [r3, #0]
 80471f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80471f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80471fa:	6878      	ldr	r0, [r7, #4]
 80471fc:	f000 f9cb 	bl	8047596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8047200:	687b      	ldr	r3, [r7, #4]
 8047202:	681b      	ldr	r3, [r3, #0]
 8047204:	691b      	ldr	r3, [r3, #16]
 8047206:	f003 0320 	and.w	r3, r3, #32
 804720a:	2b20      	cmp	r3, #32
 804720c:	d10e      	bne.n	804722c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804720e:	687b      	ldr	r3, [r7, #4]
 8047210:	681b      	ldr	r3, [r3, #0]
 8047212:	68db      	ldr	r3, [r3, #12]
 8047214:	f003 0320 	and.w	r3, r3, #32
 8047218:	2b20      	cmp	r3, #32
 804721a:	d107      	bne.n	804722c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804721c:	687b      	ldr	r3, [r7, #4]
 804721e:	681b      	ldr	r3, [r3, #0]
 8047220:	f06f 0220 	mvn.w	r2, #32
 8047224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8047226:	6878      	ldr	r0, [r7, #4]
 8047228:	f000 fd4c 	bl	8047cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804722c:	bf00      	nop
 804722e:	3708      	adds	r7, #8
 8047230:	46bd      	mov	sp, r7
 8047232:	bd80      	pop	{r7, pc}

08047234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8047234:	b580      	push	{r7, lr}
 8047236:	b086      	sub	sp, #24
 8047238:	af00      	add	r7, sp, #0
 804723a:	60f8      	str	r0, [r7, #12]
 804723c:	60b9      	str	r1, [r7, #8]
 804723e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8047240:	2300      	movs	r3, #0
 8047242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8047244:	68fb      	ldr	r3, [r7, #12]
 8047246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804724a:	2b01      	cmp	r3, #1
 804724c:	d101      	bne.n	8047252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 804724e:	2302      	movs	r3, #2
 8047250:	e0ae      	b.n	80473b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8047252:	68fb      	ldr	r3, [r7, #12]
 8047254:	2201      	movs	r2, #1
 8047256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 804725a:	687b      	ldr	r3, [r7, #4]
 804725c:	2b0c      	cmp	r3, #12
 804725e:	f200 809f 	bhi.w	80473a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8047262:	a201      	add	r2, pc, #4	; (adr r2, 8047268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8047264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047268:	0804729d 	.word	0x0804729d
 804726c:	080473a1 	.word	0x080473a1
 8047270:	080473a1 	.word	0x080473a1
 8047274:	080473a1 	.word	0x080473a1
 8047278:	080472dd 	.word	0x080472dd
 804727c:	080473a1 	.word	0x080473a1
 8047280:	080473a1 	.word	0x080473a1
 8047284:	080473a1 	.word	0x080473a1
 8047288:	0804731f 	.word	0x0804731f
 804728c:	080473a1 	.word	0x080473a1
 8047290:	080473a1 	.word	0x080473a1
 8047294:	080473a1 	.word	0x080473a1
 8047298:	0804735f 	.word	0x0804735f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 804729c:	68fb      	ldr	r3, [r7, #12]
 804729e:	681b      	ldr	r3, [r3, #0]
 80472a0:	68b9      	ldr	r1, [r7, #8]
 80472a2:	4618      	mov	r0, r3
 80472a4:	f000 fa22 	bl	80476ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80472a8:	68fb      	ldr	r3, [r7, #12]
 80472aa:	681b      	ldr	r3, [r3, #0]
 80472ac:	699a      	ldr	r2, [r3, #24]
 80472ae:	68fb      	ldr	r3, [r7, #12]
 80472b0:	681b      	ldr	r3, [r3, #0]
 80472b2:	f042 0208 	orr.w	r2, r2, #8
 80472b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80472b8:	68fb      	ldr	r3, [r7, #12]
 80472ba:	681b      	ldr	r3, [r3, #0]
 80472bc:	699a      	ldr	r2, [r3, #24]
 80472be:	68fb      	ldr	r3, [r7, #12]
 80472c0:	681b      	ldr	r3, [r3, #0]
 80472c2:	f022 0204 	bic.w	r2, r2, #4
 80472c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80472c8:	68fb      	ldr	r3, [r7, #12]
 80472ca:	681b      	ldr	r3, [r3, #0]
 80472cc:	6999      	ldr	r1, [r3, #24]
 80472ce:	68bb      	ldr	r3, [r7, #8]
 80472d0:	691a      	ldr	r2, [r3, #16]
 80472d2:	68fb      	ldr	r3, [r7, #12]
 80472d4:	681b      	ldr	r3, [r3, #0]
 80472d6:	430a      	orrs	r2, r1
 80472d8:	619a      	str	r2, [r3, #24]
      break;
 80472da:	e064      	b.n	80473a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80472dc:	68fb      	ldr	r3, [r7, #12]
 80472de:	681b      	ldr	r3, [r3, #0]
 80472e0:	68b9      	ldr	r1, [r7, #8]
 80472e2:	4618      	mov	r0, r3
 80472e4:	f000 fa72 	bl	80477cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80472e8:	68fb      	ldr	r3, [r7, #12]
 80472ea:	681b      	ldr	r3, [r3, #0]
 80472ec:	699a      	ldr	r2, [r3, #24]
 80472ee:	68fb      	ldr	r3, [r7, #12]
 80472f0:	681b      	ldr	r3, [r3, #0]
 80472f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80472f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80472f8:	68fb      	ldr	r3, [r7, #12]
 80472fa:	681b      	ldr	r3, [r3, #0]
 80472fc:	699a      	ldr	r2, [r3, #24]
 80472fe:	68fb      	ldr	r3, [r7, #12]
 8047300:	681b      	ldr	r3, [r3, #0]
 8047302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8047306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8047308:	68fb      	ldr	r3, [r7, #12]
 804730a:	681b      	ldr	r3, [r3, #0]
 804730c:	6999      	ldr	r1, [r3, #24]
 804730e:	68bb      	ldr	r3, [r7, #8]
 8047310:	691b      	ldr	r3, [r3, #16]
 8047312:	021a      	lsls	r2, r3, #8
 8047314:	68fb      	ldr	r3, [r7, #12]
 8047316:	681b      	ldr	r3, [r3, #0]
 8047318:	430a      	orrs	r2, r1
 804731a:	619a      	str	r2, [r3, #24]
      break;
 804731c:	e043      	b.n	80473a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 804731e:	68fb      	ldr	r3, [r7, #12]
 8047320:	681b      	ldr	r3, [r3, #0]
 8047322:	68b9      	ldr	r1, [r7, #8]
 8047324:	4618      	mov	r0, r3
 8047326:	f000 fac7 	bl	80478b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 804732a:	68fb      	ldr	r3, [r7, #12]
 804732c:	681b      	ldr	r3, [r3, #0]
 804732e:	69da      	ldr	r2, [r3, #28]
 8047330:	68fb      	ldr	r3, [r7, #12]
 8047332:	681b      	ldr	r3, [r3, #0]
 8047334:	f042 0208 	orr.w	r2, r2, #8
 8047338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 804733a:	68fb      	ldr	r3, [r7, #12]
 804733c:	681b      	ldr	r3, [r3, #0]
 804733e:	69da      	ldr	r2, [r3, #28]
 8047340:	68fb      	ldr	r3, [r7, #12]
 8047342:	681b      	ldr	r3, [r3, #0]
 8047344:	f022 0204 	bic.w	r2, r2, #4
 8047348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 804734a:	68fb      	ldr	r3, [r7, #12]
 804734c:	681b      	ldr	r3, [r3, #0]
 804734e:	69d9      	ldr	r1, [r3, #28]
 8047350:	68bb      	ldr	r3, [r7, #8]
 8047352:	691a      	ldr	r2, [r3, #16]
 8047354:	68fb      	ldr	r3, [r7, #12]
 8047356:	681b      	ldr	r3, [r3, #0]
 8047358:	430a      	orrs	r2, r1
 804735a:	61da      	str	r2, [r3, #28]
      break;
 804735c:	e023      	b.n	80473a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 804735e:	68fb      	ldr	r3, [r7, #12]
 8047360:	681b      	ldr	r3, [r3, #0]
 8047362:	68b9      	ldr	r1, [r7, #8]
 8047364:	4618      	mov	r0, r3
 8047366:	f000 fb1b 	bl	80479a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 804736a:	68fb      	ldr	r3, [r7, #12]
 804736c:	681b      	ldr	r3, [r3, #0]
 804736e:	69da      	ldr	r2, [r3, #28]
 8047370:	68fb      	ldr	r3, [r7, #12]
 8047372:	681b      	ldr	r3, [r3, #0]
 8047374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8047378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 804737a:	68fb      	ldr	r3, [r7, #12]
 804737c:	681b      	ldr	r3, [r3, #0]
 804737e:	69da      	ldr	r2, [r3, #28]
 8047380:	68fb      	ldr	r3, [r7, #12]
 8047382:	681b      	ldr	r3, [r3, #0]
 8047384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8047388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 804738a:	68fb      	ldr	r3, [r7, #12]
 804738c:	681b      	ldr	r3, [r3, #0]
 804738e:	69d9      	ldr	r1, [r3, #28]
 8047390:	68bb      	ldr	r3, [r7, #8]
 8047392:	691b      	ldr	r3, [r3, #16]
 8047394:	021a      	lsls	r2, r3, #8
 8047396:	68fb      	ldr	r3, [r7, #12]
 8047398:	681b      	ldr	r3, [r3, #0]
 804739a:	430a      	orrs	r2, r1
 804739c:	61da      	str	r2, [r3, #28]
      break;
 804739e:	e002      	b.n	80473a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80473a0:	2301      	movs	r3, #1
 80473a2:	75fb      	strb	r3, [r7, #23]
      break;
 80473a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80473a6:	68fb      	ldr	r3, [r7, #12]
 80473a8:	2200      	movs	r2, #0
 80473aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80473ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80473b0:	4618      	mov	r0, r3
 80473b2:	3718      	adds	r7, #24
 80473b4:	46bd      	mov	sp, r7
 80473b6:	bd80      	pop	{r7, pc}

080473b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80473b8:	b580      	push	{r7, lr}
 80473ba:	b084      	sub	sp, #16
 80473bc:	af00      	add	r7, sp, #0
 80473be:	6078      	str	r0, [r7, #4]
 80473c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80473c2:	2300      	movs	r3, #0
 80473c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80473c6:	687b      	ldr	r3, [r7, #4]
 80473c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80473cc:	2b01      	cmp	r3, #1
 80473ce:	d101      	bne.n	80473d4 <HAL_TIM_ConfigClockSource+0x1c>
 80473d0:	2302      	movs	r3, #2
 80473d2:	e0b4      	b.n	804753e <HAL_TIM_ConfigClockSource+0x186>
 80473d4:	687b      	ldr	r3, [r7, #4]
 80473d6:	2201      	movs	r2, #1
 80473d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80473dc:	687b      	ldr	r3, [r7, #4]
 80473de:	2202      	movs	r2, #2
 80473e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80473e4:	687b      	ldr	r3, [r7, #4]
 80473e6:	681b      	ldr	r3, [r3, #0]
 80473e8:	689b      	ldr	r3, [r3, #8]
 80473ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80473ec:	68bb      	ldr	r3, [r7, #8]
 80473ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80473f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80473f4:	68bb      	ldr	r3, [r7, #8]
 80473f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80473fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80473fc:	687b      	ldr	r3, [r7, #4]
 80473fe:	681b      	ldr	r3, [r3, #0]
 8047400:	68ba      	ldr	r2, [r7, #8]
 8047402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8047404:	683b      	ldr	r3, [r7, #0]
 8047406:	681b      	ldr	r3, [r3, #0]
 8047408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804740c:	d03e      	beq.n	804748c <HAL_TIM_ConfigClockSource+0xd4>
 804740e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047412:	f200 8087 	bhi.w	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 8047416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804741a:	f000 8086 	beq.w	804752a <HAL_TIM_ConfigClockSource+0x172>
 804741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8047422:	d87f      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 8047424:	2b70      	cmp	r3, #112	; 0x70
 8047426:	d01a      	beq.n	804745e <HAL_TIM_ConfigClockSource+0xa6>
 8047428:	2b70      	cmp	r3, #112	; 0x70
 804742a:	d87b      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 804742c:	2b60      	cmp	r3, #96	; 0x60
 804742e:	d050      	beq.n	80474d2 <HAL_TIM_ConfigClockSource+0x11a>
 8047430:	2b60      	cmp	r3, #96	; 0x60
 8047432:	d877      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 8047434:	2b50      	cmp	r3, #80	; 0x50
 8047436:	d03c      	beq.n	80474b2 <HAL_TIM_ConfigClockSource+0xfa>
 8047438:	2b50      	cmp	r3, #80	; 0x50
 804743a:	d873      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 804743c:	2b40      	cmp	r3, #64	; 0x40
 804743e:	d058      	beq.n	80474f2 <HAL_TIM_ConfigClockSource+0x13a>
 8047440:	2b40      	cmp	r3, #64	; 0x40
 8047442:	d86f      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 8047444:	2b30      	cmp	r3, #48	; 0x30
 8047446:	d064      	beq.n	8047512 <HAL_TIM_ConfigClockSource+0x15a>
 8047448:	2b30      	cmp	r3, #48	; 0x30
 804744a:	d86b      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 804744c:	2b20      	cmp	r3, #32
 804744e:	d060      	beq.n	8047512 <HAL_TIM_ConfigClockSource+0x15a>
 8047450:	2b20      	cmp	r3, #32
 8047452:	d867      	bhi.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
 8047454:	2b00      	cmp	r3, #0
 8047456:	d05c      	beq.n	8047512 <HAL_TIM_ConfigClockSource+0x15a>
 8047458:	2b10      	cmp	r3, #16
 804745a:	d05a      	beq.n	8047512 <HAL_TIM_ConfigClockSource+0x15a>
 804745c:	e062      	b.n	8047524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804745e:	687b      	ldr	r3, [r7, #4]
 8047460:	6818      	ldr	r0, [r3, #0]
 8047462:	683b      	ldr	r3, [r7, #0]
 8047464:	6899      	ldr	r1, [r3, #8]
 8047466:	683b      	ldr	r3, [r7, #0]
 8047468:	685a      	ldr	r2, [r3, #4]
 804746a:	683b      	ldr	r3, [r7, #0]
 804746c:	68db      	ldr	r3, [r3, #12]
 804746e:	f000 fb67 	bl	8047b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8047472:	687b      	ldr	r3, [r7, #4]
 8047474:	681b      	ldr	r3, [r3, #0]
 8047476:	689b      	ldr	r3, [r3, #8]
 8047478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 804747a:	68bb      	ldr	r3, [r7, #8]
 804747c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8047480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8047482:	687b      	ldr	r3, [r7, #4]
 8047484:	681b      	ldr	r3, [r3, #0]
 8047486:	68ba      	ldr	r2, [r7, #8]
 8047488:	609a      	str	r2, [r3, #8]
      break;
 804748a:	e04f      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804748c:	687b      	ldr	r3, [r7, #4]
 804748e:	6818      	ldr	r0, [r3, #0]
 8047490:	683b      	ldr	r3, [r7, #0]
 8047492:	6899      	ldr	r1, [r3, #8]
 8047494:	683b      	ldr	r3, [r7, #0]
 8047496:	685a      	ldr	r2, [r3, #4]
 8047498:	683b      	ldr	r3, [r7, #0]
 804749a:	68db      	ldr	r3, [r3, #12]
 804749c:	f000 fb50 	bl	8047b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80474a0:	687b      	ldr	r3, [r7, #4]
 80474a2:	681b      	ldr	r3, [r3, #0]
 80474a4:	689a      	ldr	r2, [r3, #8]
 80474a6:	687b      	ldr	r3, [r7, #4]
 80474a8:	681b      	ldr	r3, [r3, #0]
 80474aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80474ae:	609a      	str	r2, [r3, #8]
      break;
 80474b0:	e03c      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80474b2:	687b      	ldr	r3, [r7, #4]
 80474b4:	6818      	ldr	r0, [r3, #0]
 80474b6:	683b      	ldr	r3, [r7, #0]
 80474b8:	6859      	ldr	r1, [r3, #4]
 80474ba:	683b      	ldr	r3, [r7, #0]
 80474bc:	68db      	ldr	r3, [r3, #12]
 80474be:	461a      	mov	r2, r3
 80474c0:	f000 fac4 	bl	8047a4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80474c4:	687b      	ldr	r3, [r7, #4]
 80474c6:	681b      	ldr	r3, [r3, #0]
 80474c8:	2150      	movs	r1, #80	; 0x50
 80474ca:	4618      	mov	r0, r3
 80474cc:	f000 fb1d 	bl	8047b0a <TIM_ITRx_SetConfig>
      break;
 80474d0:	e02c      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80474d2:	687b      	ldr	r3, [r7, #4]
 80474d4:	6818      	ldr	r0, [r3, #0]
 80474d6:	683b      	ldr	r3, [r7, #0]
 80474d8:	6859      	ldr	r1, [r3, #4]
 80474da:	683b      	ldr	r3, [r7, #0]
 80474dc:	68db      	ldr	r3, [r3, #12]
 80474de:	461a      	mov	r2, r3
 80474e0:	f000 fae3 	bl	8047aaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80474e4:	687b      	ldr	r3, [r7, #4]
 80474e6:	681b      	ldr	r3, [r3, #0]
 80474e8:	2160      	movs	r1, #96	; 0x60
 80474ea:	4618      	mov	r0, r3
 80474ec:	f000 fb0d 	bl	8047b0a <TIM_ITRx_SetConfig>
      break;
 80474f0:	e01c      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80474f2:	687b      	ldr	r3, [r7, #4]
 80474f4:	6818      	ldr	r0, [r3, #0]
 80474f6:	683b      	ldr	r3, [r7, #0]
 80474f8:	6859      	ldr	r1, [r3, #4]
 80474fa:	683b      	ldr	r3, [r7, #0]
 80474fc:	68db      	ldr	r3, [r3, #12]
 80474fe:	461a      	mov	r2, r3
 8047500:	f000 faa4 	bl	8047a4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8047504:	687b      	ldr	r3, [r7, #4]
 8047506:	681b      	ldr	r3, [r3, #0]
 8047508:	2140      	movs	r1, #64	; 0x40
 804750a:	4618      	mov	r0, r3
 804750c:	f000 fafd 	bl	8047b0a <TIM_ITRx_SetConfig>
      break;
 8047510:	e00c      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8047512:	687b      	ldr	r3, [r7, #4]
 8047514:	681a      	ldr	r2, [r3, #0]
 8047516:	683b      	ldr	r3, [r7, #0]
 8047518:	681b      	ldr	r3, [r3, #0]
 804751a:	4619      	mov	r1, r3
 804751c:	4610      	mov	r0, r2
 804751e:	f000 faf4 	bl	8047b0a <TIM_ITRx_SetConfig>
      break;
 8047522:	e003      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8047524:	2301      	movs	r3, #1
 8047526:	73fb      	strb	r3, [r7, #15]
      break;
 8047528:	e000      	b.n	804752c <HAL_TIM_ConfigClockSource+0x174>
      break;
 804752a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 804752c:	687b      	ldr	r3, [r7, #4]
 804752e:	2201      	movs	r2, #1
 8047530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8047534:	687b      	ldr	r3, [r7, #4]
 8047536:	2200      	movs	r2, #0
 8047538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 804753c:	7bfb      	ldrb	r3, [r7, #15]
}
 804753e:	4618      	mov	r0, r3
 8047540:	3710      	adds	r7, #16
 8047542:	46bd      	mov	sp, r7
 8047544:	bd80      	pop	{r7, pc}

08047546 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8047546:	b480      	push	{r7}
 8047548:	b083      	sub	sp, #12
 804754a:	af00      	add	r7, sp, #0
 804754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 804754e:	bf00      	nop
 8047550:	370c      	adds	r7, #12
 8047552:	46bd      	mov	sp, r7
 8047554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047558:	4770      	bx	lr

0804755a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804755a:	b480      	push	{r7}
 804755c:	b083      	sub	sp, #12
 804755e:	af00      	add	r7, sp, #0
 8047560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8047562:	bf00      	nop
 8047564:	370c      	adds	r7, #12
 8047566:	46bd      	mov	sp, r7
 8047568:	f85d 7b04 	ldr.w	r7, [sp], #4
 804756c:	4770      	bx	lr

0804756e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804756e:	b480      	push	{r7}
 8047570:	b083      	sub	sp, #12
 8047572:	af00      	add	r7, sp, #0
 8047574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8047576:	bf00      	nop
 8047578:	370c      	adds	r7, #12
 804757a:	46bd      	mov	sp, r7
 804757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047580:	4770      	bx	lr

08047582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8047582:	b480      	push	{r7}
 8047584:	b083      	sub	sp, #12
 8047586:	af00      	add	r7, sp, #0
 8047588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804758a:	bf00      	nop
 804758c:	370c      	adds	r7, #12
 804758e:	46bd      	mov	sp, r7
 8047590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047594:	4770      	bx	lr

08047596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8047596:	b480      	push	{r7}
 8047598:	b083      	sub	sp, #12
 804759a:	af00      	add	r7, sp, #0
 804759c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804759e:	bf00      	nop
 80475a0:	370c      	adds	r7, #12
 80475a2:	46bd      	mov	sp, r7
 80475a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80475a8:	4770      	bx	lr
	...

080475ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80475ac:	b480      	push	{r7}
 80475ae:	b085      	sub	sp, #20
 80475b0:	af00      	add	r7, sp, #0
 80475b2:	6078      	str	r0, [r7, #4]
 80475b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80475b6:	687b      	ldr	r3, [r7, #4]
 80475b8:	681b      	ldr	r3, [r3, #0]
 80475ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80475bc:	687b      	ldr	r3, [r7, #4]
 80475be:	4a40      	ldr	r2, [pc, #256]	; (80476c0 <TIM_Base_SetConfig+0x114>)
 80475c0:	4293      	cmp	r3, r2
 80475c2:	d013      	beq.n	80475ec <TIM_Base_SetConfig+0x40>
 80475c4:	687b      	ldr	r3, [r7, #4]
 80475c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80475ca:	d00f      	beq.n	80475ec <TIM_Base_SetConfig+0x40>
 80475cc:	687b      	ldr	r3, [r7, #4]
 80475ce:	4a3d      	ldr	r2, [pc, #244]	; (80476c4 <TIM_Base_SetConfig+0x118>)
 80475d0:	4293      	cmp	r3, r2
 80475d2:	d00b      	beq.n	80475ec <TIM_Base_SetConfig+0x40>
 80475d4:	687b      	ldr	r3, [r7, #4]
 80475d6:	4a3c      	ldr	r2, [pc, #240]	; (80476c8 <TIM_Base_SetConfig+0x11c>)
 80475d8:	4293      	cmp	r3, r2
 80475da:	d007      	beq.n	80475ec <TIM_Base_SetConfig+0x40>
 80475dc:	687b      	ldr	r3, [r7, #4]
 80475de:	4a3b      	ldr	r2, [pc, #236]	; (80476cc <TIM_Base_SetConfig+0x120>)
 80475e0:	4293      	cmp	r3, r2
 80475e2:	d003      	beq.n	80475ec <TIM_Base_SetConfig+0x40>
 80475e4:	687b      	ldr	r3, [r7, #4]
 80475e6:	4a3a      	ldr	r2, [pc, #232]	; (80476d0 <TIM_Base_SetConfig+0x124>)
 80475e8:	4293      	cmp	r3, r2
 80475ea:	d108      	bne.n	80475fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80475ec:	68fb      	ldr	r3, [r7, #12]
 80475ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80475f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80475f4:	683b      	ldr	r3, [r7, #0]
 80475f6:	685b      	ldr	r3, [r3, #4]
 80475f8:	68fa      	ldr	r2, [r7, #12]
 80475fa:	4313      	orrs	r3, r2
 80475fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80475fe:	687b      	ldr	r3, [r7, #4]
 8047600:	4a2f      	ldr	r2, [pc, #188]	; (80476c0 <TIM_Base_SetConfig+0x114>)
 8047602:	4293      	cmp	r3, r2
 8047604:	d02b      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047606:	687b      	ldr	r3, [r7, #4]
 8047608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804760c:	d027      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 804760e:	687b      	ldr	r3, [r7, #4]
 8047610:	4a2c      	ldr	r2, [pc, #176]	; (80476c4 <TIM_Base_SetConfig+0x118>)
 8047612:	4293      	cmp	r3, r2
 8047614:	d023      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047616:	687b      	ldr	r3, [r7, #4]
 8047618:	4a2b      	ldr	r2, [pc, #172]	; (80476c8 <TIM_Base_SetConfig+0x11c>)
 804761a:	4293      	cmp	r3, r2
 804761c:	d01f      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 804761e:	687b      	ldr	r3, [r7, #4]
 8047620:	4a2a      	ldr	r2, [pc, #168]	; (80476cc <TIM_Base_SetConfig+0x120>)
 8047622:	4293      	cmp	r3, r2
 8047624:	d01b      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047626:	687b      	ldr	r3, [r7, #4]
 8047628:	4a29      	ldr	r2, [pc, #164]	; (80476d0 <TIM_Base_SetConfig+0x124>)
 804762a:	4293      	cmp	r3, r2
 804762c:	d017      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 804762e:	687b      	ldr	r3, [r7, #4]
 8047630:	4a28      	ldr	r2, [pc, #160]	; (80476d4 <TIM_Base_SetConfig+0x128>)
 8047632:	4293      	cmp	r3, r2
 8047634:	d013      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047636:	687b      	ldr	r3, [r7, #4]
 8047638:	4a27      	ldr	r2, [pc, #156]	; (80476d8 <TIM_Base_SetConfig+0x12c>)
 804763a:	4293      	cmp	r3, r2
 804763c:	d00f      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 804763e:	687b      	ldr	r3, [r7, #4]
 8047640:	4a26      	ldr	r2, [pc, #152]	; (80476dc <TIM_Base_SetConfig+0x130>)
 8047642:	4293      	cmp	r3, r2
 8047644:	d00b      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047646:	687b      	ldr	r3, [r7, #4]
 8047648:	4a25      	ldr	r2, [pc, #148]	; (80476e0 <TIM_Base_SetConfig+0x134>)
 804764a:	4293      	cmp	r3, r2
 804764c:	d007      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 804764e:	687b      	ldr	r3, [r7, #4]
 8047650:	4a24      	ldr	r2, [pc, #144]	; (80476e4 <TIM_Base_SetConfig+0x138>)
 8047652:	4293      	cmp	r3, r2
 8047654:	d003      	beq.n	804765e <TIM_Base_SetConfig+0xb2>
 8047656:	687b      	ldr	r3, [r7, #4]
 8047658:	4a23      	ldr	r2, [pc, #140]	; (80476e8 <TIM_Base_SetConfig+0x13c>)
 804765a:	4293      	cmp	r3, r2
 804765c:	d108      	bne.n	8047670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804765e:	68fb      	ldr	r3, [r7, #12]
 8047660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8047666:	683b      	ldr	r3, [r7, #0]
 8047668:	68db      	ldr	r3, [r3, #12]
 804766a:	68fa      	ldr	r2, [r7, #12]
 804766c:	4313      	orrs	r3, r2
 804766e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8047670:	68fb      	ldr	r3, [r7, #12]
 8047672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8047676:	683b      	ldr	r3, [r7, #0]
 8047678:	695b      	ldr	r3, [r3, #20]
 804767a:	4313      	orrs	r3, r2
 804767c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804767e:	687b      	ldr	r3, [r7, #4]
 8047680:	68fa      	ldr	r2, [r7, #12]
 8047682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8047684:	683b      	ldr	r3, [r7, #0]
 8047686:	689a      	ldr	r2, [r3, #8]
 8047688:	687b      	ldr	r3, [r7, #4]
 804768a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804768c:	683b      	ldr	r3, [r7, #0]
 804768e:	681a      	ldr	r2, [r3, #0]
 8047690:	687b      	ldr	r3, [r7, #4]
 8047692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8047694:	687b      	ldr	r3, [r7, #4]
 8047696:	4a0a      	ldr	r2, [pc, #40]	; (80476c0 <TIM_Base_SetConfig+0x114>)
 8047698:	4293      	cmp	r3, r2
 804769a:	d003      	beq.n	80476a4 <TIM_Base_SetConfig+0xf8>
 804769c:	687b      	ldr	r3, [r7, #4]
 804769e:	4a0c      	ldr	r2, [pc, #48]	; (80476d0 <TIM_Base_SetConfig+0x124>)
 80476a0:	4293      	cmp	r3, r2
 80476a2:	d103      	bne.n	80476ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80476a4:	683b      	ldr	r3, [r7, #0]
 80476a6:	691a      	ldr	r2, [r3, #16]
 80476a8:	687b      	ldr	r3, [r7, #4]
 80476aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80476ac:	687b      	ldr	r3, [r7, #4]
 80476ae:	2201      	movs	r2, #1
 80476b0:	615a      	str	r2, [r3, #20]
}
 80476b2:	bf00      	nop
 80476b4:	3714      	adds	r7, #20
 80476b6:	46bd      	mov	sp, r7
 80476b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80476bc:	4770      	bx	lr
 80476be:	bf00      	nop
 80476c0:	40010000 	.word	0x40010000
 80476c4:	40000400 	.word	0x40000400
 80476c8:	40000800 	.word	0x40000800
 80476cc:	40000c00 	.word	0x40000c00
 80476d0:	40010400 	.word	0x40010400
 80476d4:	40014000 	.word	0x40014000
 80476d8:	40014400 	.word	0x40014400
 80476dc:	40014800 	.word	0x40014800
 80476e0:	40001800 	.word	0x40001800
 80476e4:	40001c00 	.word	0x40001c00
 80476e8:	40002000 	.word	0x40002000

080476ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80476ec:	b480      	push	{r7}
 80476ee:	b087      	sub	sp, #28
 80476f0:	af00      	add	r7, sp, #0
 80476f2:	6078      	str	r0, [r7, #4]
 80476f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80476f6:	687b      	ldr	r3, [r7, #4]
 80476f8:	6a1b      	ldr	r3, [r3, #32]
 80476fa:	f023 0201 	bic.w	r2, r3, #1
 80476fe:	687b      	ldr	r3, [r7, #4]
 8047700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8047702:	687b      	ldr	r3, [r7, #4]
 8047704:	6a1b      	ldr	r3, [r3, #32]
 8047706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8047708:	687b      	ldr	r3, [r7, #4]
 804770a:	685b      	ldr	r3, [r3, #4]
 804770c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 804770e:	687b      	ldr	r3, [r7, #4]
 8047710:	699b      	ldr	r3, [r3, #24]
 8047712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8047714:	68fb      	ldr	r3, [r7, #12]
 8047716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 804771c:	68fb      	ldr	r3, [r7, #12]
 804771e:	f023 0303 	bic.w	r3, r3, #3
 8047722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8047724:	683b      	ldr	r3, [r7, #0]
 8047726:	681b      	ldr	r3, [r3, #0]
 8047728:	68fa      	ldr	r2, [r7, #12]
 804772a:	4313      	orrs	r3, r2
 804772c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 804772e:	697b      	ldr	r3, [r7, #20]
 8047730:	f023 0302 	bic.w	r3, r3, #2
 8047734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8047736:	683b      	ldr	r3, [r7, #0]
 8047738:	689b      	ldr	r3, [r3, #8]
 804773a:	697a      	ldr	r2, [r7, #20]
 804773c:	4313      	orrs	r3, r2
 804773e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8047740:	687b      	ldr	r3, [r7, #4]
 8047742:	4a20      	ldr	r2, [pc, #128]	; (80477c4 <TIM_OC1_SetConfig+0xd8>)
 8047744:	4293      	cmp	r3, r2
 8047746:	d003      	beq.n	8047750 <TIM_OC1_SetConfig+0x64>
 8047748:	687b      	ldr	r3, [r7, #4]
 804774a:	4a1f      	ldr	r2, [pc, #124]	; (80477c8 <TIM_OC1_SetConfig+0xdc>)
 804774c:	4293      	cmp	r3, r2
 804774e:	d10c      	bne.n	804776a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8047750:	697b      	ldr	r3, [r7, #20]
 8047752:	f023 0308 	bic.w	r3, r3, #8
 8047756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8047758:	683b      	ldr	r3, [r7, #0]
 804775a:	68db      	ldr	r3, [r3, #12]
 804775c:	697a      	ldr	r2, [r7, #20]
 804775e:	4313      	orrs	r3, r2
 8047760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8047762:	697b      	ldr	r3, [r7, #20]
 8047764:	f023 0304 	bic.w	r3, r3, #4
 8047768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 804776a:	687b      	ldr	r3, [r7, #4]
 804776c:	4a15      	ldr	r2, [pc, #84]	; (80477c4 <TIM_OC1_SetConfig+0xd8>)
 804776e:	4293      	cmp	r3, r2
 8047770:	d003      	beq.n	804777a <TIM_OC1_SetConfig+0x8e>
 8047772:	687b      	ldr	r3, [r7, #4]
 8047774:	4a14      	ldr	r2, [pc, #80]	; (80477c8 <TIM_OC1_SetConfig+0xdc>)
 8047776:	4293      	cmp	r3, r2
 8047778:	d111      	bne.n	804779e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 804777a:	693b      	ldr	r3, [r7, #16]
 804777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8047780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8047782:	693b      	ldr	r3, [r7, #16]
 8047784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8047788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 804778a:	683b      	ldr	r3, [r7, #0]
 804778c:	695b      	ldr	r3, [r3, #20]
 804778e:	693a      	ldr	r2, [r7, #16]
 8047790:	4313      	orrs	r3, r2
 8047792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8047794:	683b      	ldr	r3, [r7, #0]
 8047796:	699b      	ldr	r3, [r3, #24]
 8047798:	693a      	ldr	r2, [r7, #16]
 804779a:	4313      	orrs	r3, r2
 804779c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 804779e:	687b      	ldr	r3, [r7, #4]
 80477a0:	693a      	ldr	r2, [r7, #16]
 80477a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80477a4:	687b      	ldr	r3, [r7, #4]
 80477a6:	68fa      	ldr	r2, [r7, #12]
 80477a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80477aa:	683b      	ldr	r3, [r7, #0]
 80477ac:	685a      	ldr	r2, [r3, #4]
 80477ae:	687b      	ldr	r3, [r7, #4]
 80477b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80477b2:	687b      	ldr	r3, [r7, #4]
 80477b4:	697a      	ldr	r2, [r7, #20]
 80477b6:	621a      	str	r2, [r3, #32]
}
 80477b8:	bf00      	nop
 80477ba:	371c      	adds	r7, #28
 80477bc:	46bd      	mov	sp, r7
 80477be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477c2:	4770      	bx	lr
 80477c4:	40010000 	.word	0x40010000
 80477c8:	40010400 	.word	0x40010400

080477cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80477cc:	b480      	push	{r7}
 80477ce:	b087      	sub	sp, #28
 80477d0:	af00      	add	r7, sp, #0
 80477d2:	6078      	str	r0, [r7, #4]
 80477d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80477d6:	687b      	ldr	r3, [r7, #4]
 80477d8:	6a1b      	ldr	r3, [r3, #32]
 80477da:	f023 0210 	bic.w	r2, r3, #16
 80477de:	687b      	ldr	r3, [r7, #4]
 80477e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80477e2:	687b      	ldr	r3, [r7, #4]
 80477e4:	6a1b      	ldr	r3, [r3, #32]
 80477e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80477e8:	687b      	ldr	r3, [r7, #4]
 80477ea:	685b      	ldr	r3, [r3, #4]
 80477ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80477ee:	687b      	ldr	r3, [r7, #4]
 80477f0:	699b      	ldr	r3, [r3, #24]
 80477f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80477f4:	68fb      	ldr	r3, [r7, #12]
 80477f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80477fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80477fc:	68fb      	ldr	r3, [r7, #12]
 80477fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8047804:	683b      	ldr	r3, [r7, #0]
 8047806:	681b      	ldr	r3, [r3, #0]
 8047808:	021b      	lsls	r3, r3, #8
 804780a:	68fa      	ldr	r2, [r7, #12]
 804780c:	4313      	orrs	r3, r2
 804780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8047810:	697b      	ldr	r3, [r7, #20]
 8047812:	f023 0320 	bic.w	r3, r3, #32
 8047816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8047818:	683b      	ldr	r3, [r7, #0]
 804781a:	689b      	ldr	r3, [r3, #8]
 804781c:	011b      	lsls	r3, r3, #4
 804781e:	697a      	ldr	r2, [r7, #20]
 8047820:	4313      	orrs	r3, r2
 8047822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8047824:	687b      	ldr	r3, [r7, #4]
 8047826:	4a22      	ldr	r2, [pc, #136]	; (80478b0 <TIM_OC2_SetConfig+0xe4>)
 8047828:	4293      	cmp	r3, r2
 804782a:	d003      	beq.n	8047834 <TIM_OC2_SetConfig+0x68>
 804782c:	687b      	ldr	r3, [r7, #4]
 804782e:	4a21      	ldr	r2, [pc, #132]	; (80478b4 <TIM_OC2_SetConfig+0xe8>)
 8047830:	4293      	cmp	r3, r2
 8047832:	d10d      	bne.n	8047850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8047834:	697b      	ldr	r3, [r7, #20]
 8047836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804783a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 804783c:	683b      	ldr	r3, [r7, #0]
 804783e:	68db      	ldr	r3, [r3, #12]
 8047840:	011b      	lsls	r3, r3, #4
 8047842:	697a      	ldr	r2, [r7, #20]
 8047844:	4313      	orrs	r3, r2
 8047846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8047848:	697b      	ldr	r3, [r7, #20]
 804784a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804784e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8047850:	687b      	ldr	r3, [r7, #4]
 8047852:	4a17      	ldr	r2, [pc, #92]	; (80478b0 <TIM_OC2_SetConfig+0xe4>)
 8047854:	4293      	cmp	r3, r2
 8047856:	d003      	beq.n	8047860 <TIM_OC2_SetConfig+0x94>
 8047858:	687b      	ldr	r3, [r7, #4]
 804785a:	4a16      	ldr	r2, [pc, #88]	; (80478b4 <TIM_OC2_SetConfig+0xe8>)
 804785c:	4293      	cmp	r3, r2
 804785e:	d113      	bne.n	8047888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8047860:	693b      	ldr	r3, [r7, #16]
 8047862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8047866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8047868:	693b      	ldr	r3, [r7, #16]
 804786a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804786e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8047870:	683b      	ldr	r3, [r7, #0]
 8047872:	695b      	ldr	r3, [r3, #20]
 8047874:	009b      	lsls	r3, r3, #2
 8047876:	693a      	ldr	r2, [r7, #16]
 8047878:	4313      	orrs	r3, r2
 804787a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 804787c:	683b      	ldr	r3, [r7, #0]
 804787e:	699b      	ldr	r3, [r3, #24]
 8047880:	009b      	lsls	r3, r3, #2
 8047882:	693a      	ldr	r2, [r7, #16]
 8047884:	4313      	orrs	r3, r2
 8047886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8047888:	687b      	ldr	r3, [r7, #4]
 804788a:	693a      	ldr	r2, [r7, #16]
 804788c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 804788e:	687b      	ldr	r3, [r7, #4]
 8047890:	68fa      	ldr	r2, [r7, #12]
 8047892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8047894:	683b      	ldr	r3, [r7, #0]
 8047896:	685a      	ldr	r2, [r3, #4]
 8047898:	687b      	ldr	r3, [r7, #4]
 804789a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 804789c:	687b      	ldr	r3, [r7, #4]
 804789e:	697a      	ldr	r2, [r7, #20]
 80478a0:	621a      	str	r2, [r3, #32]
}
 80478a2:	bf00      	nop
 80478a4:	371c      	adds	r7, #28
 80478a6:	46bd      	mov	sp, r7
 80478a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80478ac:	4770      	bx	lr
 80478ae:	bf00      	nop
 80478b0:	40010000 	.word	0x40010000
 80478b4:	40010400 	.word	0x40010400

080478b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80478b8:	b480      	push	{r7}
 80478ba:	b087      	sub	sp, #28
 80478bc:	af00      	add	r7, sp, #0
 80478be:	6078      	str	r0, [r7, #4]
 80478c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80478c2:	687b      	ldr	r3, [r7, #4]
 80478c4:	6a1b      	ldr	r3, [r3, #32]
 80478c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80478ce:	687b      	ldr	r3, [r7, #4]
 80478d0:	6a1b      	ldr	r3, [r3, #32]
 80478d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80478d4:	687b      	ldr	r3, [r7, #4]
 80478d6:	685b      	ldr	r3, [r3, #4]
 80478d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80478da:	687b      	ldr	r3, [r7, #4]
 80478dc:	69db      	ldr	r3, [r3, #28]
 80478de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80478e0:	68fb      	ldr	r3, [r7, #12]
 80478e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80478e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80478e8:	68fb      	ldr	r3, [r7, #12]
 80478ea:	f023 0303 	bic.w	r3, r3, #3
 80478ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80478f0:	683b      	ldr	r3, [r7, #0]
 80478f2:	681b      	ldr	r3, [r3, #0]
 80478f4:	68fa      	ldr	r2, [r7, #12]
 80478f6:	4313      	orrs	r3, r2
 80478f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80478fa:	697b      	ldr	r3, [r7, #20]
 80478fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8047900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8047902:	683b      	ldr	r3, [r7, #0]
 8047904:	689b      	ldr	r3, [r3, #8]
 8047906:	021b      	lsls	r3, r3, #8
 8047908:	697a      	ldr	r2, [r7, #20]
 804790a:	4313      	orrs	r3, r2
 804790c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 804790e:	687b      	ldr	r3, [r7, #4]
 8047910:	4a21      	ldr	r2, [pc, #132]	; (8047998 <TIM_OC3_SetConfig+0xe0>)
 8047912:	4293      	cmp	r3, r2
 8047914:	d003      	beq.n	804791e <TIM_OC3_SetConfig+0x66>
 8047916:	687b      	ldr	r3, [r7, #4]
 8047918:	4a20      	ldr	r2, [pc, #128]	; (804799c <TIM_OC3_SetConfig+0xe4>)
 804791a:	4293      	cmp	r3, r2
 804791c:	d10d      	bne.n	804793a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 804791e:	697b      	ldr	r3, [r7, #20]
 8047920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8047924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8047926:	683b      	ldr	r3, [r7, #0]
 8047928:	68db      	ldr	r3, [r3, #12]
 804792a:	021b      	lsls	r3, r3, #8
 804792c:	697a      	ldr	r2, [r7, #20]
 804792e:	4313      	orrs	r3, r2
 8047930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8047932:	697b      	ldr	r3, [r7, #20]
 8047934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8047938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 804793a:	687b      	ldr	r3, [r7, #4]
 804793c:	4a16      	ldr	r2, [pc, #88]	; (8047998 <TIM_OC3_SetConfig+0xe0>)
 804793e:	4293      	cmp	r3, r2
 8047940:	d003      	beq.n	804794a <TIM_OC3_SetConfig+0x92>
 8047942:	687b      	ldr	r3, [r7, #4]
 8047944:	4a15      	ldr	r2, [pc, #84]	; (804799c <TIM_OC3_SetConfig+0xe4>)
 8047946:	4293      	cmp	r3, r2
 8047948:	d113      	bne.n	8047972 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 804794a:	693b      	ldr	r3, [r7, #16]
 804794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8047950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8047952:	693b      	ldr	r3, [r7, #16]
 8047954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8047958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 804795a:	683b      	ldr	r3, [r7, #0]
 804795c:	695b      	ldr	r3, [r3, #20]
 804795e:	011b      	lsls	r3, r3, #4
 8047960:	693a      	ldr	r2, [r7, #16]
 8047962:	4313      	orrs	r3, r2
 8047964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8047966:	683b      	ldr	r3, [r7, #0]
 8047968:	699b      	ldr	r3, [r3, #24]
 804796a:	011b      	lsls	r3, r3, #4
 804796c:	693a      	ldr	r2, [r7, #16]
 804796e:	4313      	orrs	r3, r2
 8047970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8047972:	687b      	ldr	r3, [r7, #4]
 8047974:	693a      	ldr	r2, [r7, #16]
 8047976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8047978:	687b      	ldr	r3, [r7, #4]
 804797a:	68fa      	ldr	r2, [r7, #12]
 804797c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 804797e:	683b      	ldr	r3, [r7, #0]
 8047980:	685a      	ldr	r2, [r3, #4]
 8047982:	687b      	ldr	r3, [r7, #4]
 8047984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8047986:	687b      	ldr	r3, [r7, #4]
 8047988:	697a      	ldr	r2, [r7, #20]
 804798a:	621a      	str	r2, [r3, #32]
}
 804798c:	bf00      	nop
 804798e:	371c      	adds	r7, #28
 8047990:	46bd      	mov	sp, r7
 8047992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047996:	4770      	bx	lr
 8047998:	40010000 	.word	0x40010000
 804799c:	40010400 	.word	0x40010400

080479a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80479a0:	b480      	push	{r7}
 80479a2:	b087      	sub	sp, #28
 80479a4:	af00      	add	r7, sp, #0
 80479a6:	6078      	str	r0, [r7, #4]
 80479a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80479aa:	687b      	ldr	r3, [r7, #4]
 80479ac:	6a1b      	ldr	r3, [r3, #32]
 80479ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80479b2:	687b      	ldr	r3, [r7, #4]
 80479b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80479b6:	687b      	ldr	r3, [r7, #4]
 80479b8:	6a1b      	ldr	r3, [r3, #32]
 80479ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80479bc:	687b      	ldr	r3, [r7, #4]
 80479be:	685b      	ldr	r3, [r3, #4]
 80479c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80479c2:	687b      	ldr	r3, [r7, #4]
 80479c4:	69db      	ldr	r3, [r3, #28]
 80479c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80479c8:	68fb      	ldr	r3, [r7, #12]
 80479ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80479ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80479d0:	68fb      	ldr	r3, [r7, #12]
 80479d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80479d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80479d8:	683b      	ldr	r3, [r7, #0]
 80479da:	681b      	ldr	r3, [r3, #0]
 80479dc:	021b      	lsls	r3, r3, #8
 80479de:	68fa      	ldr	r2, [r7, #12]
 80479e0:	4313      	orrs	r3, r2
 80479e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80479e4:	693b      	ldr	r3, [r7, #16]
 80479e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80479ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80479ec:	683b      	ldr	r3, [r7, #0]
 80479ee:	689b      	ldr	r3, [r3, #8]
 80479f0:	031b      	lsls	r3, r3, #12
 80479f2:	693a      	ldr	r2, [r7, #16]
 80479f4:	4313      	orrs	r3, r2
 80479f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80479f8:	687b      	ldr	r3, [r7, #4]
 80479fa:	4a12      	ldr	r2, [pc, #72]	; (8047a44 <TIM_OC4_SetConfig+0xa4>)
 80479fc:	4293      	cmp	r3, r2
 80479fe:	d003      	beq.n	8047a08 <TIM_OC4_SetConfig+0x68>
 8047a00:	687b      	ldr	r3, [r7, #4]
 8047a02:	4a11      	ldr	r2, [pc, #68]	; (8047a48 <TIM_OC4_SetConfig+0xa8>)
 8047a04:	4293      	cmp	r3, r2
 8047a06:	d109      	bne.n	8047a1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8047a08:	697b      	ldr	r3, [r7, #20]
 8047a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8047a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8047a10:	683b      	ldr	r3, [r7, #0]
 8047a12:	695b      	ldr	r3, [r3, #20]
 8047a14:	019b      	lsls	r3, r3, #6
 8047a16:	697a      	ldr	r2, [r7, #20]
 8047a18:	4313      	orrs	r3, r2
 8047a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8047a1c:	687b      	ldr	r3, [r7, #4]
 8047a1e:	697a      	ldr	r2, [r7, #20]
 8047a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8047a22:	687b      	ldr	r3, [r7, #4]
 8047a24:	68fa      	ldr	r2, [r7, #12]
 8047a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8047a28:	683b      	ldr	r3, [r7, #0]
 8047a2a:	685a      	ldr	r2, [r3, #4]
 8047a2c:	687b      	ldr	r3, [r7, #4]
 8047a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8047a30:	687b      	ldr	r3, [r7, #4]
 8047a32:	693a      	ldr	r2, [r7, #16]
 8047a34:	621a      	str	r2, [r3, #32]
}
 8047a36:	bf00      	nop
 8047a38:	371c      	adds	r7, #28
 8047a3a:	46bd      	mov	sp, r7
 8047a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a40:	4770      	bx	lr
 8047a42:	bf00      	nop
 8047a44:	40010000 	.word	0x40010000
 8047a48:	40010400 	.word	0x40010400

08047a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8047a4c:	b480      	push	{r7}
 8047a4e:	b087      	sub	sp, #28
 8047a50:	af00      	add	r7, sp, #0
 8047a52:	60f8      	str	r0, [r7, #12]
 8047a54:	60b9      	str	r1, [r7, #8]
 8047a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8047a58:	68fb      	ldr	r3, [r7, #12]
 8047a5a:	6a1b      	ldr	r3, [r3, #32]
 8047a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8047a5e:	68fb      	ldr	r3, [r7, #12]
 8047a60:	6a1b      	ldr	r3, [r3, #32]
 8047a62:	f023 0201 	bic.w	r2, r3, #1
 8047a66:	68fb      	ldr	r3, [r7, #12]
 8047a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8047a6a:	68fb      	ldr	r3, [r7, #12]
 8047a6c:	699b      	ldr	r3, [r3, #24]
 8047a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8047a70:	693b      	ldr	r3, [r7, #16]
 8047a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8047a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8047a78:	687b      	ldr	r3, [r7, #4]
 8047a7a:	011b      	lsls	r3, r3, #4
 8047a7c:	693a      	ldr	r2, [r7, #16]
 8047a7e:	4313      	orrs	r3, r2
 8047a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8047a82:	697b      	ldr	r3, [r7, #20]
 8047a84:	f023 030a 	bic.w	r3, r3, #10
 8047a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8047a8a:	697a      	ldr	r2, [r7, #20]
 8047a8c:	68bb      	ldr	r3, [r7, #8]
 8047a8e:	4313      	orrs	r3, r2
 8047a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8047a92:	68fb      	ldr	r3, [r7, #12]
 8047a94:	693a      	ldr	r2, [r7, #16]
 8047a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8047a98:	68fb      	ldr	r3, [r7, #12]
 8047a9a:	697a      	ldr	r2, [r7, #20]
 8047a9c:	621a      	str	r2, [r3, #32]
}
 8047a9e:	bf00      	nop
 8047aa0:	371c      	adds	r7, #28
 8047aa2:	46bd      	mov	sp, r7
 8047aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047aa8:	4770      	bx	lr

08047aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8047aaa:	b480      	push	{r7}
 8047aac:	b087      	sub	sp, #28
 8047aae:	af00      	add	r7, sp, #0
 8047ab0:	60f8      	str	r0, [r7, #12]
 8047ab2:	60b9      	str	r1, [r7, #8]
 8047ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8047ab6:	68fb      	ldr	r3, [r7, #12]
 8047ab8:	6a1b      	ldr	r3, [r3, #32]
 8047aba:	f023 0210 	bic.w	r2, r3, #16
 8047abe:	68fb      	ldr	r3, [r7, #12]
 8047ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8047ac2:	68fb      	ldr	r3, [r7, #12]
 8047ac4:	699b      	ldr	r3, [r3, #24]
 8047ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8047ac8:	68fb      	ldr	r3, [r7, #12]
 8047aca:	6a1b      	ldr	r3, [r3, #32]
 8047acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8047ace:	697b      	ldr	r3, [r7, #20]
 8047ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8047ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8047ad6:	687b      	ldr	r3, [r7, #4]
 8047ad8:	031b      	lsls	r3, r3, #12
 8047ada:	697a      	ldr	r2, [r7, #20]
 8047adc:	4313      	orrs	r3, r2
 8047ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8047ae0:	693b      	ldr	r3, [r7, #16]
 8047ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8047ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8047ae8:	68bb      	ldr	r3, [r7, #8]
 8047aea:	011b      	lsls	r3, r3, #4
 8047aec:	693a      	ldr	r2, [r7, #16]
 8047aee:	4313      	orrs	r3, r2
 8047af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8047af2:	68fb      	ldr	r3, [r7, #12]
 8047af4:	697a      	ldr	r2, [r7, #20]
 8047af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8047af8:	68fb      	ldr	r3, [r7, #12]
 8047afa:	693a      	ldr	r2, [r7, #16]
 8047afc:	621a      	str	r2, [r3, #32]
}
 8047afe:	bf00      	nop
 8047b00:	371c      	adds	r7, #28
 8047b02:	46bd      	mov	sp, r7
 8047b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b08:	4770      	bx	lr

08047b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8047b0a:	b480      	push	{r7}
 8047b0c:	b085      	sub	sp, #20
 8047b0e:	af00      	add	r7, sp, #0
 8047b10:	6078      	str	r0, [r7, #4]
 8047b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8047b14:	687b      	ldr	r3, [r7, #4]
 8047b16:	689b      	ldr	r3, [r3, #8]
 8047b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8047b1a:	68fb      	ldr	r3, [r7, #12]
 8047b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8047b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8047b22:	683a      	ldr	r2, [r7, #0]
 8047b24:	68fb      	ldr	r3, [r7, #12]
 8047b26:	4313      	orrs	r3, r2
 8047b28:	f043 0307 	orr.w	r3, r3, #7
 8047b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8047b2e:	687b      	ldr	r3, [r7, #4]
 8047b30:	68fa      	ldr	r2, [r7, #12]
 8047b32:	609a      	str	r2, [r3, #8]
}
 8047b34:	bf00      	nop
 8047b36:	3714      	adds	r7, #20
 8047b38:	46bd      	mov	sp, r7
 8047b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b3e:	4770      	bx	lr

08047b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8047b40:	b480      	push	{r7}
 8047b42:	b087      	sub	sp, #28
 8047b44:	af00      	add	r7, sp, #0
 8047b46:	60f8      	str	r0, [r7, #12]
 8047b48:	60b9      	str	r1, [r7, #8]
 8047b4a:	607a      	str	r2, [r7, #4]
 8047b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8047b4e:	68fb      	ldr	r3, [r7, #12]
 8047b50:	689b      	ldr	r3, [r3, #8]
 8047b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8047b54:	697b      	ldr	r3, [r7, #20]
 8047b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8047b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8047b5c:	683b      	ldr	r3, [r7, #0]
 8047b5e:	021a      	lsls	r2, r3, #8
 8047b60:	687b      	ldr	r3, [r7, #4]
 8047b62:	431a      	orrs	r2, r3
 8047b64:	68bb      	ldr	r3, [r7, #8]
 8047b66:	4313      	orrs	r3, r2
 8047b68:	697a      	ldr	r2, [r7, #20]
 8047b6a:	4313      	orrs	r3, r2
 8047b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8047b6e:	68fb      	ldr	r3, [r7, #12]
 8047b70:	697a      	ldr	r2, [r7, #20]
 8047b72:	609a      	str	r2, [r3, #8]
}
 8047b74:	bf00      	nop
 8047b76:	371c      	adds	r7, #28
 8047b78:	46bd      	mov	sp, r7
 8047b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b7e:	4770      	bx	lr

08047b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8047b80:	b480      	push	{r7}
 8047b82:	b087      	sub	sp, #28
 8047b84:	af00      	add	r7, sp, #0
 8047b86:	60f8      	str	r0, [r7, #12]
 8047b88:	60b9      	str	r1, [r7, #8]
 8047b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8047b8c:	68bb      	ldr	r3, [r7, #8]
 8047b8e:	f003 031f 	and.w	r3, r3, #31
 8047b92:	2201      	movs	r2, #1
 8047b94:	fa02 f303 	lsl.w	r3, r2, r3
 8047b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8047b9a:	68fb      	ldr	r3, [r7, #12]
 8047b9c:	6a1a      	ldr	r2, [r3, #32]
 8047b9e:	697b      	ldr	r3, [r7, #20]
 8047ba0:	43db      	mvns	r3, r3
 8047ba2:	401a      	ands	r2, r3
 8047ba4:	68fb      	ldr	r3, [r7, #12]
 8047ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8047ba8:	68fb      	ldr	r3, [r7, #12]
 8047baa:	6a1a      	ldr	r2, [r3, #32]
 8047bac:	68bb      	ldr	r3, [r7, #8]
 8047bae:	f003 031f 	and.w	r3, r3, #31
 8047bb2:	6879      	ldr	r1, [r7, #4]
 8047bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8047bb8:	431a      	orrs	r2, r3
 8047bba:	68fb      	ldr	r3, [r7, #12]
 8047bbc:	621a      	str	r2, [r3, #32]
}
 8047bbe:	bf00      	nop
 8047bc0:	371c      	adds	r7, #28
 8047bc2:	46bd      	mov	sp, r7
 8047bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047bc8:	4770      	bx	lr
	...

08047bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8047bcc:	b480      	push	{r7}
 8047bce:	b085      	sub	sp, #20
 8047bd0:	af00      	add	r7, sp, #0
 8047bd2:	6078      	str	r0, [r7, #4]
 8047bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8047bd6:	687b      	ldr	r3, [r7, #4]
 8047bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8047bdc:	2b01      	cmp	r3, #1
 8047bde:	d101      	bne.n	8047be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8047be0:	2302      	movs	r3, #2
 8047be2:	e05a      	b.n	8047c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8047be4:	687b      	ldr	r3, [r7, #4]
 8047be6:	2201      	movs	r2, #1
 8047be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047bec:	687b      	ldr	r3, [r7, #4]
 8047bee:	2202      	movs	r2, #2
 8047bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8047bf4:	687b      	ldr	r3, [r7, #4]
 8047bf6:	681b      	ldr	r3, [r3, #0]
 8047bf8:	685b      	ldr	r3, [r3, #4]
 8047bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8047bfc:	687b      	ldr	r3, [r7, #4]
 8047bfe:	681b      	ldr	r3, [r3, #0]
 8047c00:	689b      	ldr	r3, [r3, #8]
 8047c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8047c04:	68fb      	ldr	r3, [r7, #12]
 8047c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8047c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8047c0c:	683b      	ldr	r3, [r7, #0]
 8047c0e:	681b      	ldr	r3, [r3, #0]
 8047c10:	68fa      	ldr	r2, [r7, #12]
 8047c12:	4313      	orrs	r3, r2
 8047c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8047c16:	687b      	ldr	r3, [r7, #4]
 8047c18:	681b      	ldr	r3, [r3, #0]
 8047c1a:	68fa      	ldr	r2, [r7, #12]
 8047c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047c1e:	687b      	ldr	r3, [r7, #4]
 8047c20:	681b      	ldr	r3, [r3, #0]
 8047c22:	4a21      	ldr	r2, [pc, #132]	; (8047ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8047c24:	4293      	cmp	r3, r2
 8047c26:	d022      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c28:	687b      	ldr	r3, [r7, #4]
 8047c2a:	681b      	ldr	r3, [r3, #0]
 8047c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047c30:	d01d      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c32:	687b      	ldr	r3, [r7, #4]
 8047c34:	681b      	ldr	r3, [r3, #0]
 8047c36:	4a1d      	ldr	r2, [pc, #116]	; (8047cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8047c38:	4293      	cmp	r3, r2
 8047c3a:	d018      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c3c:	687b      	ldr	r3, [r7, #4]
 8047c3e:	681b      	ldr	r3, [r3, #0]
 8047c40:	4a1b      	ldr	r2, [pc, #108]	; (8047cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8047c42:	4293      	cmp	r3, r2
 8047c44:	d013      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c46:	687b      	ldr	r3, [r7, #4]
 8047c48:	681b      	ldr	r3, [r3, #0]
 8047c4a:	4a1a      	ldr	r2, [pc, #104]	; (8047cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8047c4c:	4293      	cmp	r3, r2
 8047c4e:	d00e      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c50:	687b      	ldr	r3, [r7, #4]
 8047c52:	681b      	ldr	r3, [r3, #0]
 8047c54:	4a18      	ldr	r2, [pc, #96]	; (8047cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8047c56:	4293      	cmp	r3, r2
 8047c58:	d009      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c5a:	687b      	ldr	r3, [r7, #4]
 8047c5c:	681b      	ldr	r3, [r3, #0]
 8047c5e:	4a17      	ldr	r2, [pc, #92]	; (8047cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8047c60:	4293      	cmp	r3, r2
 8047c62:	d004      	beq.n	8047c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8047c64:	687b      	ldr	r3, [r7, #4]
 8047c66:	681b      	ldr	r3, [r3, #0]
 8047c68:	4a15      	ldr	r2, [pc, #84]	; (8047cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8047c6a:	4293      	cmp	r3, r2
 8047c6c:	d10c      	bne.n	8047c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8047c6e:	68bb      	ldr	r3, [r7, #8]
 8047c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8047c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8047c76:	683b      	ldr	r3, [r7, #0]
 8047c78:	685b      	ldr	r3, [r3, #4]
 8047c7a:	68ba      	ldr	r2, [r7, #8]
 8047c7c:	4313      	orrs	r3, r2
 8047c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8047c80:	687b      	ldr	r3, [r7, #4]
 8047c82:	681b      	ldr	r3, [r3, #0]
 8047c84:	68ba      	ldr	r2, [r7, #8]
 8047c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8047c88:	687b      	ldr	r3, [r7, #4]
 8047c8a:	2201      	movs	r2, #1
 8047c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8047c90:	687b      	ldr	r3, [r7, #4]
 8047c92:	2200      	movs	r2, #0
 8047c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8047c98:	2300      	movs	r3, #0
}
 8047c9a:	4618      	mov	r0, r3
 8047c9c:	3714      	adds	r7, #20
 8047c9e:	46bd      	mov	sp, r7
 8047ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ca4:	4770      	bx	lr
 8047ca6:	bf00      	nop
 8047ca8:	40010000 	.word	0x40010000
 8047cac:	40000400 	.word	0x40000400
 8047cb0:	40000800 	.word	0x40000800
 8047cb4:	40000c00 	.word	0x40000c00
 8047cb8:	40010400 	.word	0x40010400
 8047cbc:	40014000 	.word	0x40014000
 8047cc0:	40001800 	.word	0x40001800

08047cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8047cc4:	b480      	push	{r7}
 8047cc6:	b083      	sub	sp, #12
 8047cc8:	af00      	add	r7, sp, #0
 8047cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8047ccc:	bf00      	nop
 8047cce:	370c      	adds	r7, #12
 8047cd0:	46bd      	mov	sp, r7
 8047cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047cd6:	4770      	bx	lr

08047cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8047cd8:	b480      	push	{r7}
 8047cda:	b083      	sub	sp, #12
 8047cdc:	af00      	add	r7, sp, #0
 8047cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8047ce0:	bf00      	nop
 8047ce2:	370c      	adds	r7, #12
 8047ce4:	46bd      	mov	sp, r7
 8047ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047cea:	4770      	bx	lr

08047cec <arm_pid_init_f32>:
 8047cec:	edd0 6a08 	vldr	s13, [r0, #32]
 8047cf0:	edd0 7a06 	vldr	s15, [r0, #24]
 8047cf4:	ed90 7a07 	vldr	s14, [r0, #28]
 8047cf8:	edc0 6a02 	vstr	s13, [r0, #8]
 8047cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8047d00:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8047d04:	eef1 7a67 	vneg.f32	s15, s15
 8047d08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8047d0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8047d10:	ed80 7a00 	vstr	s14, [r0]
 8047d14:	edc0 7a01 	vstr	s15, [r0, #4]
 8047d18:	b161      	cbz	r1, 8047d34 <arm_pid_init_f32+0x48>
 8047d1a:	2300      	movs	r3, #0
 8047d1c:	7303      	strb	r3, [r0, #12]
 8047d1e:	7343      	strb	r3, [r0, #13]
 8047d20:	7383      	strb	r3, [r0, #14]
 8047d22:	73c3      	strb	r3, [r0, #15]
 8047d24:	7403      	strb	r3, [r0, #16]
 8047d26:	7443      	strb	r3, [r0, #17]
 8047d28:	7483      	strb	r3, [r0, #18]
 8047d2a:	74c3      	strb	r3, [r0, #19]
 8047d2c:	7503      	strb	r3, [r0, #20]
 8047d2e:	7543      	strb	r3, [r0, #21]
 8047d30:	7583      	strb	r3, [r0, #22]
 8047d32:	75c3      	strb	r3, [r0, #23]
 8047d34:	4770      	bx	lr
 8047d36:	bf00      	nop

08047d38 <__errno>:
 8047d38:	4b01      	ldr	r3, [pc, #4]	; (8047d40 <__errno+0x8>)
 8047d3a:	6818      	ldr	r0, [r3, #0]
 8047d3c:	4770      	bx	lr
 8047d3e:	bf00      	nop
 8047d40:	20000018 	.word	0x20000018

08047d44 <__libc_init_array>:
 8047d44:	b570      	push	{r4, r5, r6, lr}
 8047d46:	4d0d      	ldr	r5, [pc, #52]	; (8047d7c <__libc_init_array+0x38>)
 8047d48:	4c0d      	ldr	r4, [pc, #52]	; (8047d80 <__libc_init_array+0x3c>)
 8047d4a:	1b64      	subs	r4, r4, r5
 8047d4c:	10a4      	asrs	r4, r4, #2
 8047d4e:	2600      	movs	r6, #0
 8047d50:	42a6      	cmp	r6, r4
 8047d52:	d109      	bne.n	8047d68 <__libc_init_array+0x24>
 8047d54:	4d0b      	ldr	r5, [pc, #44]	; (8047d84 <__libc_init_array+0x40>)
 8047d56:	4c0c      	ldr	r4, [pc, #48]	; (8047d88 <__libc_init_array+0x44>)
 8047d58:	f005 fc34 	bl	804d5c4 <_init>
 8047d5c:	1b64      	subs	r4, r4, r5
 8047d5e:	10a4      	asrs	r4, r4, #2
 8047d60:	2600      	movs	r6, #0
 8047d62:	42a6      	cmp	r6, r4
 8047d64:	d105      	bne.n	8047d72 <__libc_init_array+0x2e>
 8047d66:	bd70      	pop	{r4, r5, r6, pc}
 8047d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8047d6c:	4798      	blx	r3
 8047d6e:	3601      	adds	r6, #1
 8047d70:	e7ee      	b.n	8047d50 <__libc_init_array+0xc>
 8047d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8047d76:	4798      	blx	r3
 8047d78:	3601      	adds	r6, #1
 8047d7a:	e7f2      	b.n	8047d62 <__libc_init_array+0x1e>
 8047d7c:	0804dc90 	.word	0x0804dc90
 8047d80:	0804dc90 	.word	0x0804dc90
 8047d84:	0804dc90 	.word	0x0804dc90
 8047d88:	0804dc94 	.word	0x0804dc94

08047d8c <memcpy>:
 8047d8c:	440a      	add	r2, r1
 8047d8e:	4291      	cmp	r1, r2
 8047d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8047d94:	d100      	bne.n	8047d98 <memcpy+0xc>
 8047d96:	4770      	bx	lr
 8047d98:	b510      	push	{r4, lr}
 8047d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8047d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8047da2:	4291      	cmp	r1, r2
 8047da4:	d1f9      	bne.n	8047d9a <memcpy+0xe>
 8047da6:	bd10      	pop	{r4, pc}

08047da8 <memset>:
 8047da8:	4402      	add	r2, r0
 8047daa:	4603      	mov	r3, r0
 8047dac:	4293      	cmp	r3, r2
 8047dae:	d100      	bne.n	8047db2 <memset+0xa>
 8047db0:	4770      	bx	lr
 8047db2:	f803 1b01 	strb.w	r1, [r3], #1
 8047db6:	e7f9      	b.n	8047dac <memset+0x4>

08047db8 <__cvt>:
 8047db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8047dbc:	ec55 4b10 	vmov	r4, r5, d0
 8047dc0:	2d00      	cmp	r5, #0
 8047dc2:	460e      	mov	r6, r1
 8047dc4:	4619      	mov	r1, r3
 8047dc6:	462b      	mov	r3, r5
 8047dc8:	bfbb      	ittet	lt
 8047dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8047dce:	461d      	movlt	r5, r3
 8047dd0:	2300      	movge	r3, #0
 8047dd2:	232d      	movlt	r3, #45	; 0x2d
 8047dd4:	700b      	strb	r3, [r1, #0]
 8047dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8047dd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8047ddc:	4691      	mov	r9, r2
 8047dde:	f023 0820 	bic.w	r8, r3, #32
 8047de2:	bfbc      	itt	lt
 8047de4:	4622      	movlt	r2, r4
 8047de6:	4614      	movlt	r4, r2
 8047de8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8047dec:	d005      	beq.n	8047dfa <__cvt+0x42>
 8047dee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8047df2:	d100      	bne.n	8047df6 <__cvt+0x3e>
 8047df4:	3601      	adds	r6, #1
 8047df6:	2102      	movs	r1, #2
 8047df8:	e000      	b.n	8047dfc <__cvt+0x44>
 8047dfa:	2103      	movs	r1, #3
 8047dfc:	ab03      	add	r3, sp, #12
 8047dfe:	9301      	str	r3, [sp, #4]
 8047e00:	ab02      	add	r3, sp, #8
 8047e02:	9300      	str	r3, [sp, #0]
 8047e04:	ec45 4b10 	vmov	d0, r4, r5
 8047e08:	4653      	mov	r3, sl
 8047e0a:	4632      	mov	r2, r6
 8047e0c:	f001 fdf8 	bl	8049a00 <_dtoa_r>
 8047e10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8047e14:	4607      	mov	r7, r0
 8047e16:	d102      	bne.n	8047e1e <__cvt+0x66>
 8047e18:	f019 0f01 	tst.w	r9, #1
 8047e1c:	d022      	beq.n	8047e64 <__cvt+0xac>
 8047e1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8047e22:	eb07 0906 	add.w	r9, r7, r6
 8047e26:	d110      	bne.n	8047e4a <__cvt+0x92>
 8047e28:	783b      	ldrb	r3, [r7, #0]
 8047e2a:	2b30      	cmp	r3, #48	; 0x30
 8047e2c:	d10a      	bne.n	8047e44 <__cvt+0x8c>
 8047e2e:	2200      	movs	r2, #0
 8047e30:	2300      	movs	r3, #0
 8047e32:	4620      	mov	r0, r4
 8047e34:	4629      	mov	r1, r5
 8047e36:	f7f8 fe47 	bl	8040ac8 <__aeabi_dcmpeq>
 8047e3a:	b918      	cbnz	r0, 8047e44 <__cvt+0x8c>
 8047e3c:	f1c6 0601 	rsb	r6, r6, #1
 8047e40:	f8ca 6000 	str.w	r6, [sl]
 8047e44:	f8da 3000 	ldr.w	r3, [sl]
 8047e48:	4499      	add	r9, r3
 8047e4a:	2200      	movs	r2, #0
 8047e4c:	2300      	movs	r3, #0
 8047e4e:	4620      	mov	r0, r4
 8047e50:	4629      	mov	r1, r5
 8047e52:	f7f8 fe39 	bl	8040ac8 <__aeabi_dcmpeq>
 8047e56:	b108      	cbz	r0, 8047e5c <__cvt+0xa4>
 8047e58:	f8cd 900c 	str.w	r9, [sp, #12]
 8047e5c:	2230      	movs	r2, #48	; 0x30
 8047e5e:	9b03      	ldr	r3, [sp, #12]
 8047e60:	454b      	cmp	r3, r9
 8047e62:	d307      	bcc.n	8047e74 <__cvt+0xbc>
 8047e64:	9b03      	ldr	r3, [sp, #12]
 8047e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8047e68:	1bdb      	subs	r3, r3, r7
 8047e6a:	4638      	mov	r0, r7
 8047e6c:	6013      	str	r3, [r2, #0]
 8047e6e:	b004      	add	sp, #16
 8047e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047e74:	1c59      	adds	r1, r3, #1
 8047e76:	9103      	str	r1, [sp, #12]
 8047e78:	701a      	strb	r2, [r3, #0]
 8047e7a:	e7f0      	b.n	8047e5e <__cvt+0xa6>

08047e7c <__exponent>:
 8047e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8047e7e:	4603      	mov	r3, r0
 8047e80:	2900      	cmp	r1, #0
 8047e82:	bfb8      	it	lt
 8047e84:	4249      	neglt	r1, r1
 8047e86:	f803 2b02 	strb.w	r2, [r3], #2
 8047e8a:	bfb4      	ite	lt
 8047e8c:	222d      	movlt	r2, #45	; 0x2d
 8047e8e:	222b      	movge	r2, #43	; 0x2b
 8047e90:	2909      	cmp	r1, #9
 8047e92:	7042      	strb	r2, [r0, #1]
 8047e94:	dd2a      	ble.n	8047eec <__exponent+0x70>
 8047e96:	f10d 0407 	add.w	r4, sp, #7
 8047e9a:	46a4      	mov	ip, r4
 8047e9c:	270a      	movs	r7, #10
 8047e9e:	46a6      	mov	lr, r4
 8047ea0:	460a      	mov	r2, r1
 8047ea2:	fb91 f6f7 	sdiv	r6, r1, r7
 8047ea6:	fb07 1516 	mls	r5, r7, r6, r1
 8047eaa:	3530      	adds	r5, #48	; 0x30
 8047eac:	2a63      	cmp	r2, #99	; 0x63
 8047eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8047eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8047eb6:	4631      	mov	r1, r6
 8047eb8:	dcf1      	bgt.n	8047e9e <__exponent+0x22>
 8047eba:	3130      	adds	r1, #48	; 0x30
 8047ebc:	f1ae 0502 	sub.w	r5, lr, #2
 8047ec0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8047ec4:	1c44      	adds	r4, r0, #1
 8047ec6:	4629      	mov	r1, r5
 8047ec8:	4561      	cmp	r1, ip
 8047eca:	d30a      	bcc.n	8047ee2 <__exponent+0x66>
 8047ecc:	f10d 0209 	add.w	r2, sp, #9
 8047ed0:	eba2 020e 	sub.w	r2, r2, lr
 8047ed4:	4565      	cmp	r5, ip
 8047ed6:	bf88      	it	hi
 8047ed8:	2200      	movhi	r2, #0
 8047eda:	4413      	add	r3, r2
 8047edc:	1a18      	subs	r0, r3, r0
 8047ede:	b003      	add	sp, #12
 8047ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8047ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8047ee6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8047eea:	e7ed      	b.n	8047ec8 <__exponent+0x4c>
 8047eec:	2330      	movs	r3, #48	; 0x30
 8047eee:	3130      	adds	r1, #48	; 0x30
 8047ef0:	7083      	strb	r3, [r0, #2]
 8047ef2:	70c1      	strb	r1, [r0, #3]
 8047ef4:	1d03      	adds	r3, r0, #4
 8047ef6:	e7f1      	b.n	8047edc <__exponent+0x60>

08047ef8 <_printf_float>:
 8047ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047efc:	ed2d 8b02 	vpush	{d8}
 8047f00:	b08d      	sub	sp, #52	; 0x34
 8047f02:	460c      	mov	r4, r1
 8047f04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8047f08:	4616      	mov	r6, r2
 8047f0a:	461f      	mov	r7, r3
 8047f0c:	4605      	mov	r5, r0
 8047f0e:	f002 fed3 	bl	804acb8 <_localeconv_r>
 8047f12:	f8d0 a000 	ldr.w	sl, [r0]
 8047f16:	4650      	mov	r0, sl
 8047f18:	f7f8 f95a 	bl	80401d0 <strlen>
 8047f1c:	2300      	movs	r3, #0
 8047f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8047f20:	6823      	ldr	r3, [r4, #0]
 8047f22:	9305      	str	r3, [sp, #20]
 8047f24:	f8d8 3000 	ldr.w	r3, [r8]
 8047f28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8047f2c:	3307      	adds	r3, #7
 8047f2e:	f023 0307 	bic.w	r3, r3, #7
 8047f32:	f103 0208 	add.w	r2, r3, #8
 8047f36:	f8c8 2000 	str.w	r2, [r8]
 8047f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8047f3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8047f42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8047f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8047f4a:	9307      	str	r3, [sp, #28]
 8047f4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8047f50:	ee08 0a10 	vmov	s16, r0
 8047f54:	4b9f      	ldr	r3, [pc, #636]	; (80481d4 <_printf_float+0x2dc>)
 8047f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8047f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8047f5e:	f7f8 fde5 	bl	8040b2c <__aeabi_dcmpun>
 8047f62:	bb88      	cbnz	r0, 8047fc8 <_printf_float+0xd0>
 8047f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8047f68:	4b9a      	ldr	r3, [pc, #616]	; (80481d4 <_printf_float+0x2dc>)
 8047f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8047f6e:	f7f8 fdbf 	bl	8040af0 <__aeabi_dcmple>
 8047f72:	bb48      	cbnz	r0, 8047fc8 <_printf_float+0xd0>
 8047f74:	2200      	movs	r2, #0
 8047f76:	2300      	movs	r3, #0
 8047f78:	4640      	mov	r0, r8
 8047f7a:	4649      	mov	r1, r9
 8047f7c:	f7f8 fdae 	bl	8040adc <__aeabi_dcmplt>
 8047f80:	b110      	cbz	r0, 8047f88 <_printf_float+0x90>
 8047f82:	232d      	movs	r3, #45	; 0x2d
 8047f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047f88:	4b93      	ldr	r3, [pc, #588]	; (80481d8 <_printf_float+0x2e0>)
 8047f8a:	4894      	ldr	r0, [pc, #592]	; (80481dc <_printf_float+0x2e4>)
 8047f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8047f90:	bf94      	ite	ls
 8047f92:	4698      	movls	r8, r3
 8047f94:	4680      	movhi	r8, r0
 8047f96:	2303      	movs	r3, #3
 8047f98:	6123      	str	r3, [r4, #16]
 8047f9a:	9b05      	ldr	r3, [sp, #20]
 8047f9c:	f023 0204 	bic.w	r2, r3, #4
 8047fa0:	6022      	str	r2, [r4, #0]
 8047fa2:	f04f 0900 	mov.w	r9, #0
 8047fa6:	9700      	str	r7, [sp, #0]
 8047fa8:	4633      	mov	r3, r6
 8047faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8047fac:	4621      	mov	r1, r4
 8047fae:	4628      	mov	r0, r5
 8047fb0:	f000 f9d8 	bl	8048364 <_printf_common>
 8047fb4:	3001      	adds	r0, #1
 8047fb6:	f040 8090 	bne.w	80480da <_printf_float+0x1e2>
 8047fba:	f04f 30ff 	mov.w	r0, #4294967295
 8047fbe:	b00d      	add	sp, #52	; 0x34
 8047fc0:	ecbd 8b02 	vpop	{d8}
 8047fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8047fc8:	4642      	mov	r2, r8
 8047fca:	464b      	mov	r3, r9
 8047fcc:	4640      	mov	r0, r8
 8047fce:	4649      	mov	r1, r9
 8047fd0:	f7f8 fdac 	bl	8040b2c <__aeabi_dcmpun>
 8047fd4:	b140      	cbz	r0, 8047fe8 <_printf_float+0xf0>
 8047fd6:	464b      	mov	r3, r9
 8047fd8:	2b00      	cmp	r3, #0
 8047fda:	bfbc      	itt	lt
 8047fdc:	232d      	movlt	r3, #45	; 0x2d
 8047fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8047fe2:	487f      	ldr	r0, [pc, #508]	; (80481e0 <_printf_float+0x2e8>)
 8047fe4:	4b7f      	ldr	r3, [pc, #508]	; (80481e4 <_printf_float+0x2ec>)
 8047fe6:	e7d1      	b.n	8047f8c <_printf_float+0x94>
 8047fe8:	6863      	ldr	r3, [r4, #4]
 8047fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8047fee:	9206      	str	r2, [sp, #24]
 8047ff0:	1c5a      	adds	r2, r3, #1
 8047ff2:	d13f      	bne.n	8048074 <_printf_float+0x17c>
 8047ff4:	2306      	movs	r3, #6
 8047ff6:	6063      	str	r3, [r4, #4]
 8047ff8:	9b05      	ldr	r3, [sp, #20]
 8047ffa:	6861      	ldr	r1, [r4, #4]
 8047ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8048000:	2300      	movs	r3, #0
 8048002:	9303      	str	r3, [sp, #12]
 8048004:	ab0a      	add	r3, sp, #40	; 0x28
 8048006:	e9cd b301 	strd	fp, r3, [sp, #4]
 804800a:	ab09      	add	r3, sp, #36	; 0x24
 804800c:	ec49 8b10 	vmov	d0, r8, r9
 8048010:	9300      	str	r3, [sp, #0]
 8048012:	6022      	str	r2, [r4, #0]
 8048014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8048018:	4628      	mov	r0, r5
 804801a:	f7ff fecd 	bl	8047db8 <__cvt>
 804801e:	9b06      	ldr	r3, [sp, #24]
 8048020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048022:	2b47      	cmp	r3, #71	; 0x47
 8048024:	4680      	mov	r8, r0
 8048026:	d108      	bne.n	804803a <_printf_float+0x142>
 8048028:	1cc8      	adds	r0, r1, #3
 804802a:	db02      	blt.n	8048032 <_printf_float+0x13a>
 804802c:	6863      	ldr	r3, [r4, #4]
 804802e:	4299      	cmp	r1, r3
 8048030:	dd41      	ble.n	80480b6 <_printf_float+0x1be>
 8048032:	f1ab 0b02 	sub.w	fp, fp, #2
 8048036:	fa5f fb8b 	uxtb.w	fp, fp
 804803a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 804803e:	d820      	bhi.n	8048082 <_printf_float+0x18a>
 8048040:	3901      	subs	r1, #1
 8048042:	465a      	mov	r2, fp
 8048044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8048048:	9109      	str	r1, [sp, #36]	; 0x24
 804804a:	f7ff ff17 	bl	8047e7c <__exponent>
 804804e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048050:	1813      	adds	r3, r2, r0
 8048052:	2a01      	cmp	r2, #1
 8048054:	4681      	mov	r9, r0
 8048056:	6123      	str	r3, [r4, #16]
 8048058:	dc02      	bgt.n	8048060 <_printf_float+0x168>
 804805a:	6822      	ldr	r2, [r4, #0]
 804805c:	07d2      	lsls	r2, r2, #31
 804805e:	d501      	bpl.n	8048064 <_printf_float+0x16c>
 8048060:	3301      	adds	r3, #1
 8048062:	6123      	str	r3, [r4, #16]
 8048064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8048068:	2b00      	cmp	r3, #0
 804806a:	d09c      	beq.n	8047fa6 <_printf_float+0xae>
 804806c:	232d      	movs	r3, #45	; 0x2d
 804806e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048072:	e798      	b.n	8047fa6 <_printf_float+0xae>
 8048074:	9a06      	ldr	r2, [sp, #24]
 8048076:	2a47      	cmp	r2, #71	; 0x47
 8048078:	d1be      	bne.n	8047ff8 <_printf_float+0x100>
 804807a:	2b00      	cmp	r3, #0
 804807c:	d1bc      	bne.n	8047ff8 <_printf_float+0x100>
 804807e:	2301      	movs	r3, #1
 8048080:	e7b9      	b.n	8047ff6 <_printf_float+0xfe>
 8048082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8048086:	d118      	bne.n	80480ba <_printf_float+0x1c2>
 8048088:	2900      	cmp	r1, #0
 804808a:	6863      	ldr	r3, [r4, #4]
 804808c:	dd0b      	ble.n	80480a6 <_printf_float+0x1ae>
 804808e:	6121      	str	r1, [r4, #16]
 8048090:	b913      	cbnz	r3, 8048098 <_printf_float+0x1a0>
 8048092:	6822      	ldr	r2, [r4, #0]
 8048094:	07d0      	lsls	r0, r2, #31
 8048096:	d502      	bpl.n	804809e <_printf_float+0x1a6>
 8048098:	3301      	adds	r3, #1
 804809a:	440b      	add	r3, r1
 804809c:	6123      	str	r3, [r4, #16]
 804809e:	65a1      	str	r1, [r4, #88]	; 0x58
 80480a0:	f04f 0900 	mov.w	r9, #0
 80480a4:	e7de      	b.n	8048064 <_printf_float+0x16c>
 80480a6:	b913      	cbnz	r3, 80480ae <_printf_float+0x1b6>
 80480a8:	6822      	ldr	r2, [r4, #0]
 80480aa:	07d2      	lsls	r2, r2, #31
 80480ac:	d501      	bpl.n	80480b2 <_printf_float+0x1ba>
 80480ae:	3302      	adds	r3, #2
 80480b0:	e7f4      	b.n	804809c <_printf_float+0x1a4>
 80480b2:	2301      	movs	r3, #1
 80480b4:	e7f2      	b.n	804809c <_printf_float+0x1a4>
 80480b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80480ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80480bc:	4299      	cmp	r1, r3
 80480be:	db05      	blt.n	80480cc <_printf_float+0x1d4>
 80480c0:	6823      	ldr	r3, [r4, #0]
 80480c2:	6121      	str	r1, [r4, #16]
 80480c4:	07d8      	lsls	r0, r3, #31
 80480c6:	d5ea      	bpl.n	804809e <_printf_float+0x1a6>
 80480c8:	1c4b      	adds	r3, r1, #1
 80480ca:	e7e7      	b.n	804809c <_printf_float+0x1a4>
 80480cc:	2900      	cmp	r1, #0
 80480ce:	bfd4      	ite	le
 80480d0:	f1c1 0202 	rsble	r2, r1, #2
 80480d4:	2201      	movgt	r2, #1
 80480d6:	4413      	add	r3, r2
 80480d8:	e7e0      	b.n	804809c <_printf_float+0x1a4>
 80480da:	6823      	ldr	r3, [r4, #0]
 80480dc:	055a      	lsls	r2, r3, #21
 80480de:	d407      	bmi.n	80480f0 <_printf_float+0x1f8>
 80480e0:	6923      	ldr	r3, [r4, #16]
 80480e2:	4642      	mov	r2, r8
 80480e4:	4631      	mov	r1, r6
 80480e6:	4628      	mov	r0, r5
 80480e8:	47b8      	blx	r7
 80480ea:	3001      	adds	r0, #1
 80480ec:	d12c      	bne.n	8048148 <_printf_float+0x250>
 80480ee:	e764      	b.n	8047fba <_printf_float+0xc2>
 80480f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80480f4:	f240 80e0 	bls.w	80482b8 <_printf_float+0x3c0>
 80480f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80480fc:	2200      	movs	r2, #0
 80480fe:	2300      	movs	r3, #0
 8048100:	f7f8 fce2 	bl	8040ac8 <__aeabi_dcmpeq>
 8048104:	2800      	cmp	r0, #0
 8048106:	d034      	beq.n	8048172 <_printf_float+0x27a>
 8048108:	4a37      	ldr	r2, [pc, #220]	; (80481e8 <_printf_float+0x2f0>)
 804810a:	2301      	movs	r3, #1
 804810c:	4631      	mov	r1, r6
 804810e:	4628      	mov	r0, r5
 8048110:	47b8      	blx	r7
 8048112:	3001      	adds	r0, #1
 8048114:	f43f af51 	beq.w	8047fba <_printf_float+0xc2>
 8048118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804811c:	429a      	cmp	r2, r3
 804811e:	db02      	blt.n	8048126 <_printf_float+0x22e>
 8048120:	6823      	ldr	r3, [r4, #0]
 8048122:	07d8      	lsls	r0, r3, #31
 8048124:	d510      	bpl.n	8048148 <_printf_float+0x250>
 8048126:	ee18 3a10 	vmov	r3, s16
 804812a:	4652      	mov	r2, sl
 804812c:	4631      	mov	r1, r6
 804812e:	4628      	mov	r0, r5
 8048130:	47b8      	blx	r7
 8048132:	3001      	adds	r0, #1
 8048134:	f43f af41 	beq.w	8047fba <_printf_float+0xc2>
 8048138:	f04f 0800 	mov.w	r8, #0
 804813c:	f104 091a 	add.w	r9, r4, #26
 8048140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048142:	3b01      	subs	r3, #1
 8048144:	4543      	cmp	r3, r8
 8048146:	dc09      	bgt.n	804815c <_printf_float+0x264>
 8048148:	6823      	ldr	r3, [r4, #0]
 804814a:	079b      	lsls	r3, r3, #30
 804814c:	f100 8105 	bmi.w	804835a <_printf_float+0x462>
 8048150:	68e0      	ldr	r0, [r4, #12]
 8048152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048154:	4298      	cmp	r0, r3
 8048156:	bfb8      	it	lt
 8048158:	4618      	movlt	r0, r3
 804815a:	e730      	b.n	8047fbe <_printf_float+0xc6>
 804815c:	2301      	movs	r3, #1
 804815e:	464a      	mov	r2, r9
 8048160:	4631      	mov	r1, r6
 8048162:	4628      	mov	r0, r5
 8048164:	47b8      	blx	r7
 8048166:	3001      	adds	r0, #1
 8048168:	f43f af27 	beq.w	8047fba <_printf_float+0xc2>
 804816c:	f108 0801 	add.w	r8, r8, #1
 8048170:	e7e6      	b.n	8048140 <_printf_float+0x248>
 8048172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048174:	2b00      	cmp	r3, #0
 8048176:	dc39      	bgt.n	80481ec <_printf_float+0x2f4>
 8048178:	4a1b      	ldr	r2, [pc, #108]	; (80481e8 <_printf_float+0x2f0>)
 804817a:	2301      	movs	r3, #1
 804817c:	4631      	mov	r1, r6
 804817e:	4628      	mov	r0, r5
 8048180:	47b8      	blx	r7
 8048182:	3001      	adds	r0, #1
 8048184:	f43f af19 	beq.w	8047fba <_printf_float+0xc2>
 8048188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804818c:	4313      	orrs	r3, r2
 804818e:	d102      	bne.n	8048196 <_printf_float+0x29e>
 8048190:	6823      	ldr	r3, [r4, #0]
 8048192:	07d9      	lsls	r1, r3, #31
 8048194:	d5d8      	bpl.n	8048148 <_printf_float+0x250>
 8048196:	ee18 3a10 	vmov	r3, s16
 804819a:	4652      	mov	r2, sl
 804819c:	4631      	mov	r1, r6
 804819e:	4628      	mov	r0, r5
 80481a0:	47b8      	blx	r7
 80481a2:	3001      	adds	r0, #1
 80481a4:	f43f af09 	beq.w	8047fba <_printf_float+0xc2>
 80481a8:	f04f 0900 	mov.w	r9, #0
 80481ac:	f104 0a1a 	add.w	sl, r4, #26
 80481b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80481b2:	425b      	negs	r3, r3
 80481b4:	454b      	cmp	r3, r9
 80481b6:	dc01      	bgt.n	80481bc <_printf_float+0x2c4>
 80481b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80481ba:	e792      	b.n	80480e2 <_printf_float+0x1ea>
 80481bc:	2301      	movs	r3, #1
 80481be:	4652      	mov	r2, sl
 80481c0:	4631      	mov	r1, r6
 80481c2:	4628      	mov	r0, r5
 80481c4:	47b8      	blx	r7
 80481c6:	3001      	adds	r0, #1
 80481c8:	f43f aef7 	beq.w	8047fba <_printf_float+0xc2>
 80481cc:	f109 0901 	add.w	r9, r9, #1
 80481d0:	e7ee      	b.n	80481b0 <_printf_float+0x2b8>
 80481d2:	bf00      	nop
 80481d4:	7fefffff 	.word	0x7fefffff
 80481d8:	0804d774 	.word	0x0804d774
 80481dc:	0804d778 	.word	0x0804d778
 80481e0:	0804d780 	.word	0x0804d780
 80481e4:	0804d77c 	.word	0x0804d77c
 80481e8:	0804d784 	.word	0x0804d784
 80481ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80481ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80481f0:	429a      	cmp	r2, r3
 80481f2:	bfa8      	it	ge
 80481f4:	461a      	movge	r2, r3
 80481f6:	2a00      	cmp	r2, #0
 80481f8:	4691      	mov	r9, r2
 80481fa:	dc37      	bgt.n	804826c <_printf_float+0x374>
 80481fc:	f04f 0b00 	mov.w	fp, #0
 8048200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8048204:	f104 021a 	add.w	r2, r4, #26
 8048208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804820a:	9305      	str	r3, [sp, #20]
 804820c:	eba3 0309 	sub.w	r3, r3, r9
 8048210:	455b      	cmp	r3, fp
 8048212:	dc33      	bgt.n	804827c <_printf_float+0x384>
 8048214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8048218:	429a      	cmp	r2, r3
 804821a:	db3b      	blt.n	8048294 <_printf_float+0x39c>
 804821c:	6823      	ldr	r3, [r4, #0]
 804821e:	07da      	lsls	r2, r3, #31
 8048220:	d438      	bmi.n	8048294 <_printf_float+0x39c>
 8048222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8048224:	9b05      	ldr	r3, [sp, #20]
 8048226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048228:	1ad3      	subs	r3, r2, r3
 804822a:	eba2 0901 	sub.w	r9, r2, r1
 804822e:	4599      	cmp	r9, r3
 8048230:	bfa8      	it	ge
 8048232:	4699      	movge	r9, r3
 8048234:	f1b9 0f00 	cmp.w	r9, #0
 8048238:	dc35      	bgt.n	80482a6 <_printf_float+0x3ae>
 804823a:	f04f 0800 	mov.w	r8, #0
 804823e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8048242:	f104 0a1a 	add.w	sl, r4, #26
 8048246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804824a:	1a9b      	subs	r3, r3, r2
 804824c:	eba3 0309 	sub.w	r3, r3, r9
 8048250:	4543      	cmp	r3, r8
 8048252:	f77f af79 	ble.w	8048148 <_printf_float+0x250>
 8048256:	2301      	movs	r3, #1
 8048258:	4652      	mov	r2, sl
 804825a:	4631      	mov	r1, r6
 804825c:	4628      	mov	r0, r5
 804825e:	47b8      	blx	r7
 8048260:	3001      	adds	r0, #1
 8048262:	f43f aeaa 	beq.w	8047fba <_printf_float+0xc2>
 8048266:	f108 0801 	add.w	r8, r8, #1
 804826a:	e7ec      	b.n	8048246 <_printf_float+0x34e>
 804826c:	4613      	mov	r3, r2
 804826e:	4631      	mov	r1, r6
 8048270:	4642      	mov	r2, r8
 8048272:	4628      	mov	r0, r5
 8048274:	47b8      	blx	r7
 8048276:	3001      	adds	r0, #1
 8048278:	d1c0      	bne.n	80481fc <_printf_float+0x304>
 804827a:	e69e      	b.n	8047fba <_printf_float+0xc2>
 804827c:	2301      	movs	r3, #1
 804827e:	4631      	mov	r1, r6
 8048280:	4628      	mov	r0, r5
 8048282:	9205      	str	r2, [sp, #20]
 8048284:	47b8      	blx	r7
 8048286:	3001      	adds	r0, #1
 8048288:	f43f ae97 	beq.w	8047fba <_printf_float+0xc2>
 804828c:	9a05      	ldr	r2, [sp, #20]
 804828e:	f10b 0b01 	add.w	fp, fp, #1
 8048292:	e7b9      	b.n	8048208 <_printf_float+0x310>
 8048294:	ee18 3a10 	vmov	r3, s16
 8048298:	4652      	mov	r2, sl
 804829a:	4631      	mov	r1, r6
 804829c:	4628      	mov	r0, r5
 804829e:	47b8      	blx	r7
 80482a0:	3001      	adds	r0, #1
 80482a2:	d1be      	bne.n	8048222 <_printf_float+0x32a>
 80482a4:	e689      	b.n	8047fba <_printf_float+0xc2>
 80482a6:	9a05      	ldr	r2, [sp, #20]
 80482a8:	464b      	mov	r3, r9
 80482aa:	4442      	add	r2, r8
 80482ac:	4631      	mov	r1, r6
 80482ae:	4628      	mov	r0, r5
 80482b0:	47b8      	blx	r7
 80482b2:	3001      	adds	r0, #1
 80482b4:	d1c1      	bne.n	804823a <_printf_float+0x342>
 80482b6:	e680      	b.n	8047fba <_printf_float+0xc2>
 80482b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80482ba:	2a01      	cmp	r2, #1
 80482bc:	dc01      	bgt.n	80482c2 <_printf_float+0x3ca>
 80482be:	07db      	lsls	r3, r3, #31
 80482c0:	d538      	bpl.n	8048334 <_printf_float+0x43c>
 80482c2:	2301      	movs	r3, #1
 80482c4:	4642      	mov	r2, r8
 80482c6:	4631      	mov	r1, r6
 80482c8:	4628      	mov	r0, r5
 80482ca:	47b8      	blx	r7
 80482cc:	3001      	adds	r0, #1
 80482ce:	f43f ae74 	beq.w	8047fba <_printf_float+0xc2>
 80482d2:	ee18 3a10 	vmov	r3, s16
 80482d6:	4652      	mov	r2, sl
 80482d8:	4631      	mov	r1, r6
 80482da:	4628      	mov	r0, r5
 80482dc:	47b8      	blx	r7
 80482de:	3001      	adds	r0, #1
 80482e0:	f43f ae6b 	beq.w	8047fba <_printf_float+0xc2>
 80482e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80482e8:	2200      	movs	r2, #0
 80482ea:	2300      	movs	r3, #0
 80482ec:	f7f8 fbec 	bl	8040ac8 <__aeabi_dcmpeq>
 80482f0:	b9d8      	cbnz	r0, 804832a <_printf_float+0x432>
 80482f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80482f4:	f108 0201 	add.w	r2, r8, #1
 80482f8:	3b01      	subs	r3, #1
 80482fa:	4631      	mov	r1, r6
 80482fc:	4628      	mov	r0, r5
 80482fe:	47b8      	blx	r7
 8048300:	3001      	adds	r0, #1
 8048302:	d10e      	bne.n	8048322 <_printf_float+0x42a>
 8048304:	e659      	b.n	8047fba <_printf_float+0xc2>
 8048306:	2301      	movs	r3, #1
 8048308:	4652      	mov	r2, sl
 804830a:	4631      	mov	r1, r6
 804830c:	4628      	mov	r0, r5
 804830e:	47b8      	blx	r7
 8048310:	3001      	adds	r0, #1
 8048312:	f43f ae52 	beq.w	8047fba <_printf_float+0xc2>
 8048316:	f108 0801 	add.w	r8, r8, #1
 804831a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804831c:	3b01      	subs	r3, #1
 804831e:	4543      	cmp	r3, r8
 8048320:	dcf1      	bgt.n	8048306 <_printf_float+0x40e>
 8048322:	464b      	mov	r3, r9
 8048324:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8048328:	e6dc      	b.n	80480e4 <_printf_float+0x1ec>
 804832a:	f04f 0800 	mov.w	r8, #0
 804832e:	f104 0a1a 	add.w	sl, r4, #26
 8048332:	e7f2      	b.n	804831a <_printf_float+0x422>
 8048334:	2301      	movs	r3, #1
 8048336:	4642      	mov	r2, r8
 8048338:	e7df      	b.n	80482fa <_printf_float+0x402>
 804833a:	2301      	movs	r3, #1
 804833c:	464a      	mov	r2, r9
 804833e:	4631      	mov	r1, r6
 8048340:	4628      	mov	r0, r5
 8048342:	47b8      	blx	r7
 8048344:	3001      	adds	r0, #1
 8048346:	f43f ae38 	beq.w	8047fba <_printf_float+0xc2>
 804834a:	f108 0801 	add.w	r8, r8, #1
 804834e:	68e3      	ldr	r3, [r4, #12]
 8048350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8048352:	1a5b      	subs	r3, r3, r1
 8048354:	4543      	cmp	r3, r8
 8048356:	dcf0      	bgt.n	804833a <_printf_float+0x442>
 8048358:	e6fa      	b.n	8048150 <_printf_float+0x258>
 804835a:	f04f 0800 	mov.w	r8, #0
 804835e:	f104 0919 	add.w	r9, r4, #25
 8048362:	e7f4      	b.n	804834e <_printf_float+0x456>

08048364 <_printf_common>:
 8048364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8048368:	4616      	mov	r6, r2
 804836a:	4699      	mov	r9, r3
 804836c:	688a      	ldr	r2, [r1, #8]
 804836e:	690b      	ldr	r3, [r1, #16]
 8048370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8048374:	4293      	cmp	r3, r2
 8048376:	bfb8      	it	lt
 8048378:	4613      	movlt	r3, r2
 804837a:	6033      	str	r3, [r6, #0]
 804837c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8048380:	4607      	mov	r7, r0
 8048382:	460c      	mov	r4, r1
 8048384:	b10a      	cbz	r2, 804838a <_printf_common+0x26>
 8048386:	3301      	adds	r3, #1
 8048388:	6033      	str	r3, [r6, #0]
 804838a:	6823      	ldr	r3, [r4, #0]
 804838c:	0699      	lsls	r1, r3, #26
 804838e:	bf42      	ittt	mi
 8048390:	6833      	ldrmi	r3, [r6, #0]
 8048392:	3302      	addmi	r3, #2
 8048394:	6033      	strmi	r3, [r6, #0]
 8048396:	6825      	ldr	r5, [r4, #0]
 8048398:	f015 0506 	ands.w	r5, r5, #6
 804839c:	d106      	bne.n	80483ac <_printf_common+0x48>
 804839e:	f104 0a19 	add.w	sl, r4, #25
 80483a2:	68e3      	ldr	r3, [r4, #12]
 80483a4:	6832      	ldr	r2, [r6, #0]
 80483a6:	1a9b      	subs	r3, r3, r2
 80483a8:	42ab      	cmp	r3, r5
 80483aa:	dc26      	bgt.n	80483fa <_printf_common+0x96>
 80483ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80483b0:	1e13      	subs	r3, r2, #0
 80483b2:	6822      	ldr	r2, [r4, #0]
 80483b4:	bf18      	it	ne
 80483b6:	2301      	movne	r3, #1
 80483b8:	0692      	lsls	r2, r2, #26
 80483ba:	d42b      	bmi.n	8048414 <_printf_common+0xb0>
 80483bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80483c0:	4649      	mov	r1, r9
 80483c2:	4638      	mov	r0, r7
 80483c4:	47c0      	blx	r8
 80483c6:	3001      	adds	r0, #1
 80483c8:	d01e      	beq.n	8048408 <_printf_common+0xa4>
 80483ca:	6823      	ldr	r3, [r4, #0]
 80483cc:	68e5      	ldr	r5, [r4, #12]
 80483ce:	6832      	ldr	r2, [r6, #0]
 80483d0:	f003 0306 	and.w	r3, r3, #6
 80483d4:	2b04      	cmp	r3, #4
 80483d6:	bf08      	it	eq
 80483d8:	1aad      	subeq	r5, r5, r2
 80483da:	68a3      	ldr	r3, [r4, #8]
 80483dc:	6922      	ldr	r2, [r4, #16]
 80483de:	bf0c      	ite	eq
 80483e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80483e4:	2500      	movne	r5, #0
 80483e6:	4293      	cmp	r3, r2
 80483e8:	bfc4      	itt	gt
 80483ea:	1a9b      	subgt	r3, r3, r2
 80483ec:	18ed      	addgt	r5, r5, r3
 80483ee:	2600      	movs	r6, #0
 80483f0:	341a      	adds	r4, #26
 80483f2:	42b5      	cmp	r5, r6
 80483f4:	d11a      	bne.n	804842c <_printf_common+0xc8>
 80483f6:	2000      	movs	r0, #0
 80483f8:	e008      	b.n	804840c <_printf_common+0xa8>
 80483fa:	2301      	movs	r3, #1
 80483fc:	4652      	mov	r2, sl
 80483fe:	4649      	mov	r1, r9
 8048400:	4638      	mov	r0, r7
 8048402:	47c0      	blx	r8
 8048404:	3001      	adds	r0, #1
 8048406:	d103      	bne.n	8048410 <_printf_common+0xac>
 8048408:	f04f 30ff 	mov.w	r0, #4294967295
 804840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8048410:	3501      	adds	r5, #1
 8048412:	e7c6      	b.n	80483a2 <_printf_common+0x3e>
 8048414:	18e1      	adds	r1, r4, r3
 8048416:	1c5a      	adds	r2, r3, #1
 8048418:	2030      	movs	r0, #48	; 0x30
 804841a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804841e:	4422      	add	r2, r4
 8048420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8048424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8048428:	3302      	adds	r3, #2
 804842a:	e7c7      	b.n	80483bc <_printf_common+0x58>
 804842c:	2301      	movs	r3, #1
 804842e:	4622      	mov	r2, r4
 8048430:	4649      	mov	r1, r9
 8048432:	4638      	mov	r0, r7
 8048434:	47c0      	blx	r8
 8048436:	3001      	adds	r0, #1
 8048438:	d0e6      	beq.n	8048408 <_printf_common+0xa4>
 804843a:	3601      	adds	r6, #1
 804843c:	e7d9      	b.n	80483f2 <_printf_common+0x8e>
	...

08048440 <_printf_i>:
 8048440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8048444:	460c      	mov	r4, r1
 8048446:	4691      	mov	r9, r2
 8048448:	7e27      	ldrb	r7, [r4, #24]
 804844a:	990c      	ldr	r1, [sp, #48]	; 0x30
 804844c:	2f78      	cmp	r7, #120	; 0x78
 804844e:	4680      	mov	r8, r0
 8048450:	469a      	mov	sl, r3
 8048452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8048456:	d807      	bhi.n	8048468 <_printf_i+0x28>
 8048458:	2f62      	cmp	r7, #98	; 0x62
 804845a:	d80a      	bhi.n	8048472 <_printf_i+0x32>
 804845c:	2f00      	cmp	r7, #0
 804845e:	f000 80d8 	beq.w	8048612 <_printf_i+0x1d2>
 8048462:	2f58      	cmp	r7, #88	; 0x58
 8048464:	f000 80a3 	beq.w	80485ae <_printf_i+0x16e>
 8048468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 804846c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8048470:	e03a      	b.n	80484e8 <_printf_i+0xa8>
 8048472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8048476:	2b15      	cmp	r3, #21
 8048478:	d8f6      	bhi.n	8048468 <_printf_i+0x28>
 804847a:	a001      	add	r0, pc, #4	; (adr r0, 8048480 <_printf_i+0x40>)
 804847c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8048480:	080484d9 	.word	0x080484d9
 8048484:	080484ed 	.word	0x080484ed
 8048488:	08048469 	.word	0x08048469
 804848c:	08048469 	.word	0x08048469
 8048490:	08048469 	.word	0x08048469
 8048494:	08048469 	.word	0x08048469
 8048498:	080484ed 	.word	0x080484ed
 804849c:	08048469 	.word	0x08048469
 80484a0:	08048469 	.word	0x08048469
 80484a4:	08048469 	.word	0x08048469
 80484a8:	08048469 	.word	0x08048469
 80484ac:	080485f9 	.word	0x080485f9
 80484b0:	0804851d 	.word	0x0804851d
 80484b4:	080485db 	.word	0x080485db
 80484b8:	08048469 	.word	0x08048469
 80484bc:	08048469 	.word	0x08048469
 80484c0:	0804861b 	.word	0x0804861b
 80484c4:	08048469 	.word	0x08048469
 80484c8:	0804851d 	.word	0x0804851d
 80484cc:	08048469 	.word	0x08048469
 80484d0:	08048469 	.word	0x08048469
 80484d4:	080485e3 	.word	0x080485e3
 80484d8:	680b      	ldr	r3, [r1, #0]
 80484da:	1d1a      	adds	r2, r3, #4
 80484dc:	681b      	ldr	r3, [r3, #0]
 80484de:	600a      	str	r2, [r1, #0]
 80484e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80484e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80484e8:	2301      	movs	r3, #1
 80484ea:	e0a3      	b.n	8048634 <_printf_i+0x1f4>
 80484ec:	6825      	ldr	r5, [r4, #0]
 80484ee:	6808      	ldr	r0, [r1, #0]
 80484f0:	062e      	lsls	r6, r5, #24
 80484f2:	f100 0304 	add.w	r3, r0, #4
 80484f6:	d50a      	bpl.n	804850e <_printf_i+0xce>
 80484f8:	6805      	ldr	r5, [r0, #0]
 80484fa:	600b      	str	r3, [r1, #0]
 80484fc:	2d00      	cmp	r5, #0
 80484fe:	da03      	bge.n	8048508 <_printf_i+0xc8>
 8048500:	232d      	movs	r3, #45	; 0x2d
 8048502:	426d      	negs	r5, r5
 8048504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8048508:	485e      	ldr	r0, [pc, #376]	; (8048684 <_printf_i+0x244>)
 804850a:	230a      	movs	r3, #10
 804850c:	e019      	b.n	8048542 <_printf_i+0x102>
 804850e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8048512:	6805      	ldr	r5, [r0, #0]
 8048514:	600b      	str	r3, [r1, #0]
 8048516:	bf18      	it	ne
 8048518:	b22d      	sxthne	r5, r5
 804851a:	e7ef      	b.n	80484fc <_printf_i+0xbc>
 804851c:	680b      	ldr	r3, [r1, #0]
 804851e:	6825      	ldr	r5, [r4, #0]
 8048520:	1d18      	adds	r0, r3, #4
 8048522:	6008      	str	r0, [r1, #0]
 8048524:	0628      	lsls	r0, r5, #24
 8048526:	d501      	bpl.n	804852c <_printf_i+0xec>
 8048528:	681d      	ldr	r5, [r3, #0]
 804852a:	e002      	b.n	8048532 <_printf_i+0xf2>
 804852c:	0669      	lsls	r1, r5, #25
 804852e:	d5fb      	bpl.n	8048528 <_printf_i+0xe8>
 8048530:	881d      	ldrh	r5, [r3, #0]
 8048532:	4854      	ldr	r0, [pc, #336]	; (8048684 <_printf_i+0x244>)
 8048534:	2f6f      	cmp	r7, #111	; 0x6f
 8048536:	bf0c      	ite	eq
 8048538:	2308      	moveq	r3, #8
 804853a:	230a      	movne	r3, #10
 804853c:	2100      	movs	r1, #0
 804853e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8048542:	6866      	ldr	r6, [r4, #4]
 8048544:	60a6      	str	r6, [r4, #8]
 8048546:	2e00      	cmp	r6, #0
 8048548:	bfa2      	ittt	ge
 804854a:	6821      	ldrge	r1, [r4, #0]
 804854c:	f021 0104 	bicge.w	r1, r1, #4
 8048550:	6021      	strge	r1, [r4, #0]
 8048552:	b90d      	cbnz	r5, 8048558 <_printf_i+0x118>
 8048554:	2e00      	cmp	r6, #0
 8048556:	d04d      	beq.n	80485f4 <_printf_i+0x1b4>
 8048558:	4616      	mov	r6, r2
 804855a:	fbb5 f1f3 	udiv	r1, r5, r3
 804855e:	fb03 5711 	mls	r7, r3, r1, r5
 8048562:	5dc7      	ldrb	r7, [r0, r7]
 8048564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8048568:	462f      	mov	r7, r5
 804856a:	42bb      	cmp	r3, r7
 804856c:	460d      	mov	r5, r1
 804856e:	d9f4      	bls.n	804855a <_printf_i+0x11a>
 8048570:	2b08      	cmp	r3, #8
 8048572:	d10b      	bne.n	804858c <_printf_i+0x14c>
 8048574:	6823      	ldr	r3, [r4, #0]
 8048576:	07df      	lsls	r7, r3, #31
 8048578:	d508      	bpl.n	804858c <_printf_i+0x14c>
 804857a:	6923      	ldr	r3, [r4, #16]
 804857c:	6861      	ldr	r1, [r4, #4]
 804857e:	4299      	cmp	r1, r3
 8048580:	bfde      	ittt	le
 8048582:	2330      	movle	r3, #48	; 0x30
 8048584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8048588:	f106 36ff 	addle.w	r6, r6, #4294967295
 804858c:	1b92      	subs	r2, r2, r6
 804858e:	6122      	str	r2, [r4, #16]
 8048590:	f8cd a000 	str.w	sl, [sp]
 8048594:	464b      	mov	r3, r9
 8048596:	aa03      	add	r2, sp, #12
 8048598:	4621      	mov	r1, r4
 804859a:	4640      	mov	r0, r8
 804859c:	f7ff fee2 	bl	8048364 <_printf_common>
 80485a0:	3001      	adds	r0, #1
 80485a2:	d14c      	bne.n	804863e <_printf_i+0x1fe>
 80485a4:	f04f 30ff 	mov.w	r0, #4294967295
 80485a8:	b004      	add	sp, #16
 80485aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80485ae:	4835      	ldr	r0, [pc, #212]	; (8048684 <_printf_i+0x244>)
 80485b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80485b4:	6823      	ldr	r3, [r4, #0]
 80485b6:	680e      	ldr	r6, [r1, #0]
 80485b8:	061f      	lsls	r7, r3, #24
 80485ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80485be:	600e      	str	r6, [r1, #0]
 80485c0:	d514      	bpl.n	80485ec <_printf_i+0x1ac>
 80485c2:	07d9      	lsls	r1, r3, #31
 80485c4:	bf44      	itt	mi
 80485c6:	f043 0320 	orrmi.w	r3, r3, #32
 80485ca:	6023      	strmi	r3, [r4, #0]
 80485cc:	b91d      	cbnz	r5, 80485d6 <_printf_i+0x196>
 80485ce:	6823      	ldr	r3, [r4, #0]
 80485d0:	f023 0320 	bic.w	r3, r3, #32
 80485d4:	6023      	str	r3, [r4, #0]
 80485d6:	2310      	movs	r3, #16
 80485d8:	e7b0      	b.n	804853c <_printf_i+0xfc>
 80485da:	6823      	ldr	r3, [r4, #0]
 80485dc:	f043 0320 	orr.w	r3, r3, #32
 80485e0:	6023      	str	r3, [r4, #0]
 80485e2:	2378      	movs	r3, #120	; 0x78
 80485e4:	4828      	ldr	r0, [pc, #160]	; (8048688 <_printf_i+0x248>)
 80485e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80485ea:	e7e3      	b.n	80485b4 <_printf_i+0x174>
 80485ec:	065e      	lsls	r6, r3, #25
 80485ee:	bf48      	it	mi
 80485f0:	b2ad      	uxthmi	r5, r5
 80485f2:	e7e6      	b.n	80485c2 <_printf_i+0x182>
 80485f4:	4616      	mov	r6, r2
 80485f6:	e7bb      	b.n	8048570 <_printf_i+0x130>
 80485f8:	680b      	ldr	r3, [r1, #0]
 80485fa:	6826      	ldr	r6, [r4, #0]
 80485fc:	6960      	ldr	r0, [r4, #20]
 80485fe:	1d1d      	adds	r5, r3, #4
 8048600:	600d      	str	r5, [r1, #0]
 8048602:	0635      	lsls	r5, r6, #24
 8048604:	681b      	ldr	r3, [r3, #0]
 8048606:	d501      	bpl.n	804860c <_printf_i+0x1cc>
 8048608:	6018      	str	r0, [r3, #0]
 804860a:	e002      	b.n	8048612 <_printf_i+0x1d2>
 804860c:	0671      	lsls	r1, r6, #25
 804860e:	d5fb      	bpl.n	8048608 <_printf_i+0x1c8>
 8048610:	8018      	strh	r0, [r3, #0]
 8048612:	2300      	movs	r3, #0
 8048614:	6123      	str	r3, [r4, #16]
 8048616:	4616      	mov	r6, r2
 8048618:	e7ba      	b.n	8048590 <_printf_i+0x150>
 804861a:	680b      	ldr	r3, [r1, #0]
 804861c:	1d1a      	adds	r2, r3, #4
 804861e:	600a      	str	r2, [r1, #0]
 8048620:	681e      	ldr	r6, [r3, #0]
 8048622:	6862      	ldr	r2, [r4, #4]
 8048624:	2100      	movs	r1, #0
 8048626:	4630      	mov	r0, r6
 8048628:	f7f7 fdda 	bl	80401e0 <memchr>
 804862c:	b108      	cbz	r0, 8048632 <_printf_i+0x1f2>
 804862e:	1b80      	subs	r0, r0, r6
 8048630:	6060      	str	r0, [r4, #4]
 8048632:	6863      	ldr	r3, [r4, #4]
 8048634:	6123      	str	r3, [r4, #16]
 8048636:	2300      	movs	r3, #0
 8048638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804863c:	e7a8      	b.n	8048590 <_printf_i+0x150>
 804863e:	6923      	ldr	r3, [r4, #16]
 8048640:	4632      	mov	r2, r6
 8048642:	4649      	mov	r1, r9
 8048644:	4640      	mov	r0, r8
 8048646:	47d0      	blx	sl
 8048648:	3001      	adds	r0, #1
 804864a:	d0ab      	beq.n	80485a4 <_printf_i+0x164>
 804864c:	6823      	ldr	r3, [r4, #0]
 804864e:	079b      	lsls	r3, r3, #30
 8048650:	d413      	bmi.n	804867a <_printf_i+0x23a>
 8048652:	68e0      	ldr	r0, [r4, #12]
 8048654:	9b03      	ldr	r3, [sp, #12]
 8048656:	4298      	cmp	r0, r3
 8048658:	bfb8      	it	lt
 804865a:	4618      	movlt	r0, r3
 804865c:	e7a4      	b.n	80485a8 <_printf_i+0x168>
 804865e:	2301      	movs	r3, #1
 8048660:	4632      	mov	r2, r6
 8048662:	4649      	mov	r1, r9
 8048664:	4640      	mov	r0, r8
 8048666:	47d0      	blx	sl
 8048668:	3001      	adds	r0, #1
 804866a:	d09b      	beq.n	80485a4 <_printf_i+0x164>
 804866c:	3501      	adds	r5, #1
 804866e:	68e3      	ldr	r3, [r4, #12]
 8048670:	9903      	ldr	r1, [sp, #12]
 8048672:	1a5b      	subs	r3, r3, r1
 8048674:	42ab      	cmp	r3, r5
 8048676:	dcf2      	bgt.n	804865e <_printf_i+0x21e>
 8048678:	e7eb      	b.n	8048652 <_printf_i+0x212>
 804867a:	2500      	movs	r5, #0
 804867c:	f104 0619 	add.w	r6, r4, #25
 8048680:	e7f5      	b.n	804866e <_printf_i+0x22e>
 8048682:	bf00      	nop
 8048684:	0804d786 	.word	0x0804d786
 8048688:	0804d797 	.word	0x0804d797

0804868c <_scanf_float>:
 804868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048690:	b087      	sub	sp, #28
 8048692:	4617      	mov	r7, r2
 8048694:	9303      	str	r3, [sp, #12]
 8048696:	688b      	ldr	r3, [r1, #8]
 8048698:	1e5a      	subs	r2, r3, #1
 804869a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 804869e:	bf83      	ittte	hi
 80486a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80486a4:	195b      	addhi	r3, r3, r5
 80486a6:	9302      	strhi	r3, [sp, #8]
 80486a8:	2300      	movls	r3, #0
 80486aa:	bf86      	itte	hi
 80486ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80486b0:	608b      	strhi	r3, [r1, #8]
 80486b2:	9302      	strls	r3, [sp, #8]
 80486b4:	680b      	ldr	r3, [r1, #0]
 80486b6:	468b      	mov	fp, r1
 80486b8:	2500      	movs	r5, #0
 80486ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80486be:	f84b 3b1c 	str.w	r3, [fp], #28
 80486c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80486c6:	4680      	mov	r8, r0
 80486c8:	460c      	mov	r4, r1
 80486ca:	465e      	mov	r6, fp
 80486cc:	46aa      	mov	sl, r5
 80486ce:	46a9      	mov	r9, r5
 80486d0:	9501      	str	r5, [sp, #4]
 80486d2:	68a2      	ldr	r2, [r4, #8]
 80486d4:	b152      	cbz	r2, 80486ec <_scanf_float+0x60>
 80486d6:	683b      	ldr	r3, [r7, #0]
 80486d8:	781b      	ldrb	r3, [r3, #0]
 80486da:	2b4e      	cmp	r3, #78	; 0x4e
 80486dc:	d864      	bhi.n	80487a8 <_scanf_float+0x11c>
 80486de:	2b40      	cmp	r3, #64	; 0x40
 80486e0:	d83c      	bhi.n	804875c <_scanf_float+0xd0>
 80486e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80486e6:	b2c8      	uxtb	r0, r1
 80486e8:	280e      	cmp	r0, #14
 80486ea:	d93a      	bls.n	8048762 <_scanf_float+0xd6>
 80486ec:	f1b9 0f00 	cmp.w	r9, #0
 80486f0:	d003      	beq.n	80486fa <_scanf_float+0x6e>
 80486f2:	6823      	ldr	r3, [r4, #0]
 80486f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80486f8:	6023      	str	r3, [r4, #0]
 80486fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80486fe:	f1ba 0f01 	cmp.w	sl, #1
 8048702:	f200 8113 	bhi.w	804892c <_scanf_float+0x2a0>
 8048706:	455e      	cmp	r6, fp
 8048708:	f200 8105 	bhi.w	8048916 <_scanf_float+0x28a>
 804870c:	2501      	movs	r5, #1
 804870e:	4628      	mov	r0, r5
 8048710:	b007      	add	sp, #28
 8048712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048716:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 804871a:	2a0d      	cmp	r2, #13
 804871c:	d8e6      	bhi.n	80486ec <_scanf_float+0x60>
 804871e:	a101      	add	r1, pc, #4	; (adr r1, 8048724 <_scanf_float+0x98>)
 8048720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8048724:	08048863 	.word	0x08048863
 8048728:	080486ed 	.word	0x080486ed
 804872c:	080486ed 	.word	0x080486ed
 8048730:	080486ed 	.word	0x080486ed
 8048734:	080488c3 	.word	0x080488c3
 8048738:	0804889b 	.word	0x0804889b
 804873c:	080486ed 	.word	0x080486ed
 8048740:	080486ed 	.word	0x080486ed
 8048744:	08048871 	.word	0x08048871
 8048748:	080486ed 	.word	0x080486ed
 804874c:	080486ed 	.word	0x080486ed
 8048750:	080486ed 	.word	0x080486ed
 8048754:	080486ed 	.word	0x080486ed
 8048758:	08048829 	.word	0x08048829
 804875c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8048760:	e7db      	b.n	804871a <_scanf_float+0x8e>
 8048762:	290e      	cmp	r1, #14
 8048764:	d8c2      	bhi.n	80486ec <_scanf_float+0x60>
 8048766:	a001      	add	r0, pc, #4	; (adr r0, 804876c <_scanf_float+0xe0>)
 8048768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 804876c:	0804881b 	.word	0x0804881b
 8048770:	080486ed 	.word	0x080486ed
 8048774:	0804881b 	.word	0x0804881b
 8048778:	080488af 	.word	0x080488af
 804877c:	080486ed 	.word	0x080486ed
 8048780:	080487c9 	.word	0x080487c9
 8048784:	08048805 	.word	0x08048805
 8048788:	08048805 	.word	0x08048805
 804878c:	08048805 	.word	0x08048805
 8048790:	08048805 	.word	0x08048805
 8048794:	08048805 	.word	0x08048805
 8048798:	08048805 	.word	0x08048805
 804879c:	08048805 	.word	0x08048805
 80487a0:	08048805 	.word	0x08048805
 80487a4:	08048805 	.word	0x08048805
 80487a8:	2b6e      	cmp	r3, #110	; 0x6e
 80487aa:	d809      	bhi.n	80487c0 <_scanf_float+0x134>
 80487ac:	2b60      	cmp	r3, #96	; 0x60
 80487ae:	d8b2      	bhi.n	8048716 <_scanf_float+0x8a>
 80487b0:	2b54      	cmp	r3, #84	; 0x54
 80487b2:	d077      	beq.n	80488a4 <_scanf_float+0x218>
 80487b4:	2b59      	cmp	r3, #89	; 0x59
 80487b6:	d199      	bne.n	80486ec <_scanf_float+0x60>
 80487b8:	2d07      	cmp	r5, #7
 80487ba:	d197      	bne.n	80486ec <_scanf_float+0x60>
 80487bc:	2508      	movs	r5, #8
 80487be:	e029      	b.n	8048814 <_scanf_float+0x188>
 80487c0:	2b74      	cmp	r3, #116	; 0x74
 80487c2:	d06f      	beq.n	80488a4 <_scanf_float+0x218>
 80487c4:	2b79      	cmp	r3, #121	; 0x79
 80487c6:	e7f6      	b.n	80487b6 <_scanf_float+0x12a>
 80487c8:	6821      	ldr	r1, [r4, #0]
 80487ca:	05c8      	lsls	r0, r1, #23
 80487cc:	d51a      	bpl.n	8048804 <_scanf_float+0x178>
 80487ce:	9b02      	ldr	r3, [sp, #8]
 80487d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80487d4:	6021      	str	r1, [r4, #0]
 80487d6:	f109 0901 	add.w	r9, r9, #1
 80487da:	b11b      	cbz	r3, 80487e4 <_scanf_float+0x158>
 80487dc:	3b01      	subs	r3, #1
 80487de:	3201      	adds	r2, #1
 80487e0:	9302      	str	r3, [sp, #8]
 80487e2:	60a2      	str	r2, [r4, #8]
 80487e4:	68a3      	ldr	r3, [r4, #8]
 80487e6:	3b01      	subs	r3, #1
 80487e8:	60a3      	str	r3, [r4, #8]
 80487ea:	6923      	ldr	r3, [r4, #16]
 80487ec:	3301      	adds	r3, #1
 80487ee:	6123      	str	r3, [r4, #16]
 80487f0:	687b      	ldr	r3, [r7, #4]
 80487f2:	3b01      	subs	r3, #1
 80487f4:	2b00      	cmp	r3, #0
 80487f6:	607b      	str	r3, [r7, #4]
 80487f8:	f340 8084 	ble.w	8048904 <_scanf_float+0x278>
 80487fc:	683b      	ldr	r3, [r7, #0]
 80487fe:	3301      	adds	r3, #1
 8048800:	603b      	str	r3, [r7, #0]
 8048802:	e766      	b.n	80486d2 <_scanf_float+0x46>
 8048804:	eb1a 0f05 	cmn.w	sl, r5
 8048808:	f47f af70 	bne.w	80486ec <_scanf_float+0x60>
 804880c:	6822      	ldr	r2, [r4, #0]
 804880e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8048812:	6022      	str	r2, [r4, #0]
 8048814:	f806 3b01 	strb.w	r3, [r6], #1
 8048818:	e7e4      	b.n	80487e4 <_scanf_float+0x158>
 804881a:	6822      	ldr	r2, [r4, #0]
 804881c:	0610      	lsls	r0, r2, #24
 804881e:	f57f af65 	bpl.w	80486ec <_scanf_float+0x60>
 8048822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8048826:	e7f4      	b.n	8048812 <_scanf_float+0x186>
 8048828:	f1ba 0f00 	cmp.w	sl, #0
 804882c:	d10e      	bne.n	804884c <_scanf_float+0x1c0>
 804882e:	f1b9 0f00 	cmp.w	r9, #0
 8048832:	d10e      	bne.n	8048852 <_scanf_float+0x1c6>
 8048834:	6822      	ldr	r2, [r4, #0]
 8048836:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 804883a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 804883e:	d108      	bne.n	8048852 <_scanf_float+0x1c6>
 8048840:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8048844:	6022      	str	r2, [r4, #0]
 8048846:	f04f 0a01 	mov.w	sl, #1
 804884a:	e7e3      	b.n	8048814 <_scanf_float+0x188>
 804884c:	f1ba 0f02 	cmp.w	sl, #2
 8048850:	d055      	beq.n	80488fe <_scanf_float+0x272>
 8048852:	2d01      	cmp	r5, #1
 8048854:	d002      	beq.n	804885c <_scanf_float+0x1d0>
 8048856:	2d04      	cmp	r5, #4
 8048858:	f47f af48 	bne.w	80486ec <_scanf_float+0x60>
 804885c:	3501      	adds	r5, #1
 804885e:	b2ed      	uxtb	r5, r5
 8048860:	e7d8      	b.n	8048814 <_scanf_float+0x188>
 8048862:	f1ba 0f01 	cmp.w	sl, #1
 8048866:	f47f af41 	bne.w	80486ec <_scanf_float+0x60>
 804886a:	f04f 0a02 	mov.w	sl, #2
 804886e:	e7d1      	b.n	8048814 <_scanf_float+0x188>
 8048870:	b97d      	cbnz	r5, 8048892 <_scanf_float+0x206>
 8048872:	f1b9 0f00 	cmp.w	r9, #0
 8048876:	f47f af3c 	bne.w	80486f2 <_scanf_float+0x66>
 804887a:	6822      	ldr	r2, [r4, #0]
 804887c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8048880:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8048884:	f47f af39 	bne.w	80486fa <_scanf_float+0x6e>
 8048888:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 804888c:	6022      	str	r2, [r4, #0]
 804888e:	2501      	movs	r5, #1
 8048890:	e7c0      	b.n	8048814 <_scanf_float+0x188>
 8048892:	2d03      	cmp	r5, #3
 8048894:	d0e2      	beq.n	804885c <_scanf_float+0x1d0>
 8048896:	2d05      	cmp	r5, #5
 8048898:	e7de      	b.n	8048858 <_scanf_float+0x1cc>
 804889a:	2d02      	cmp	r5, #2
 804889c:	f47f af26 	bne.w	80486ec <_scanf_float+0x60>
 80488a0:	2503      	movs	r5, #3
 80488a2:	e7b7      	b.n	8048814 <_scanf_float+0x188>
 80488a4:	2d06      	cmp	r5, #6
 80488a6:	f47f af21 	bne.w	80486ec <_scanf_float+0x60>
 80488aa:	2507      	movs	r5, #7
 80488ac:	e7b2      	b.n	8048814 <_scanf_float+0x188>
 80488ae:	6822      	ldr	r2, [r4, #0]
 80488b0:	0591      	lsls	r1, r2, #22
 80488b2:	f57f af1b 	bpl.w	80486ec <_scanf_float+0x60>
 80488b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80488ba:	6022      	str	r2, [r4, #0]
 80488bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80488c0:	e7a8      	b.n	8048814 <_scanf_float+0x188>
 80488c2:	6822      	ldr	r2, [r4, #0]
 80488c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80488c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80488cc:	d006      	beq.n	80488dc <_scanf_float+0x250>
 80488ce:	0550      	lsls	r0, r2, #21
 80488d0:	f57f af0c 	bpl.w	80486ec <_scanf_float+0x60>
 80488d4:	f1b9 0f00 	cmp.w	r9, #0
 80488d8:	f43f af0f 	beq.w	80486fa <_scanf_float+0x6e>
 80488dc:	0591      	lsls	r1, r2, #22
 80488de:	bf58      	it	pl
 80488e0:	9901      	ldrpl	r1, [sp, #4]
 80488e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80488e6:	bf58      	it	pl
 80488e8:	eba9 0101 	subpl.w	r1, r9, r1
 80488ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80488f0:	bf58      	it	pl
 80488f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80488f6:	6022      	str	r2, [r4, #0]
 80488f8:	f04f 0900 	mov.w	r9, #0
 80488fc:	e78a      	b.n	8048814 <_scanf_float+0x188>
 80488fe:	f04f 0a03 	mov.w	sl, #3
 8048902:	e787      	b.n	8048814 <_scanf_float+0x188>
 8048904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8048908:	4639      	mov	r1, r7
 804890a:	4640      	mov	r0, r8
 804890c:	4798      	blx	r3
 804890e:	2800      	cmp	r0, #0
 8048910:	f43f aedf 	beq.w	80486d2 <_scanf_float+0x46>
 8048914:	e6ea      	b.n	80486ec <_scanf_float+0x60>
 8048916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 804891a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 804891e:	463a      	mov	r2, r7
 8048920:	4640      	mov	r0, r8
 8048922:	4798      	blx	r3
 8048924:	6923      	ldr	r3, [r4, #16]
 8048926:	3b01      	subs	r3, #1
 8048928:	6123      	str	r3, [r4, #16]
 804892a:	e6ec      	b.n	8048706 <_scanf_float+0x7a>
 804892c:	1e6b      	subs	r3, r5, #1
 804892e:	2b06      	cmp	r3, #6
 8048930:	d825      	bhi.n	804897e <_scanf_float+0x2f2>
 8048932:	2d02      	cmp	r5, #2
 8048934:	d836      	bhi.n	80489a4 <_scanf_float+0x318>
 8048936:	455e      	cmp	r6, fp
 8048938:	f67f aee8 	bls.w	804870c <_scanf_float+0x80>
 804893c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8048940:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8048944:	463a      	mov	r2, r7
 8048946:	4640      	mov	r0, r8
 8048948:	4798      	blx	r3
 804894a:	6923      	ldr	r3, [r4, #16]
 804894c:	3b01      	subs	r3, #1
 804894e:	6123      	str	r3, [r4, #16]
 8048950:	e7f1      	b.n	8048936 <_scanf_float+0x2aa>
 8048952:	9802      	ldr	r0, [sp, #8]
 8048954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8048958:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 804895c:	9002      	str	r0, [sp, #8]
 804895e:	463a      	mov	r2, r7
 8048960:	4640      	mov	r0, r8
 8048962:	4798      	blx	r3
 8048964:	6923      	ldr	r3, [r4, #16]
 8048966:	3b01      	subs	r3, #1
 8048968:	6123      	str	r3, [r4, #16]
 804896a:	f10a 3aff 	add.w	sl, sl, #4294967295
 804896e:	fa5f fa8a 	uxtb.w	sl, sl
 8048972:	f1ba 0f02 	cmp.w	sl, #2
 8048976:	d1ec      	bne.n	8048952 <_scanf_float+0x2c6>
 8048978:	3d03      	subs	r5, #3
 804897a:	b2ed      	uxtb	r5, r5
 804897c:	1b76      	subs	r6, r6, r5
 804897e:	6823      	ldr	r3, [r4, #0]
 8048980:	05da      	lsls	r2, r3, #23
 8048982:	d52f      	bpl.n	80489e4 <_scanf_float+0x358>
 8048984:	055b      	lsls	r3, r3, #21
 8048986:	d510      	bpl.n	80489aa <_scanf_float+0x31e>
 8048988:	455e      	cmp	r6, fp
 804898a:	f67f aebf 	bls.w	804870c <_scanf_float+0x80>
 804898e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8048992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8048996:	463a      	mov	r2, r7
 8048998:	4640      	mov	r0, r8
 804899a:	4798      	blx	r3
 804899c:	6923      	ldr	r3, [r4, #16]
 804899e:	3b01      	subs	r3, #1
 80489a0:	6123      	str	r3, [r4, #16]
 80489a2:	e7f1      	b.n	8048988 <_scanf_float+0x2fc>
 80489a4:	46aa      	mov	sl, r5
 80489a6:	9602      	str	r6, [sp, #8]
 80489a8:	e7df      	b.n	804896a <_scanf_float+0x2de>
 80489aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80489ae:	6923      	ldr	r3, [r4, #16]
 80489b0:	2965      	cmp	r1, #101	; 0x65
 80489b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80489b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80489ba:	6123      	str	r3, [r4, #16]
 80489bc:	d00c      	beq.n	80489d8 <_scanf_float+0x34c>
 80489be:	2945      	cmp	r1, #69	; 0x45
 80489c0:	d00a      	beq.n	80489d8 <_scanf_float+0x34c>
 80489c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80489c6:	463a      	mov	r2, r7
 80489c8:	4640      	mov	r0, r8
 80489ca:	4798      	blx	r3
 80489cc:	6923      	ldr	r3, [r4, #16]
 80489ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80489d2:	3b01      	subs	r3, #1
 80489d4:	1eb5      	subs	r5, r6, #2
 80489d6:	6123      	str	r3, [r4, #16]
 80489d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80489dc:	463a      	mov	r2, r7
 80489de:	4640      	mov	r0, r8
 80489e0:	4798      	blx	r3
 80489e2:	462e      	mov	r6, r5
 80489e4:	6825      	ldr	r5, [r4, #0]
 80489e6:	f015 0510 	ands.w	r5, r5, #16
 80489ea:	d158      	bne.n	8048a9e <_scanf_float+0x412>
 80489ec:	7035      	strb	r5, [r6, #0]
 80489ee:	6823      	ldr	r3, [r4, #0]
 80489f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80489f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80489f8:	d11c      	bne.n	8048a34 <_scanf_float+0x3a8>
 80489fa:	9b01      	ldr	r3, [sp, #4]
 80489fc:	454b      	cmp	r3, r9
 80489fe:	eba3 0209 	sub.w	r2, r3, r9
 8048a02:	d124      	bne.n	8048a4e <_scanf_float+0x3c2>
 8048a04:	2200      	movs	r2, #0
 8048a06:	4659      	mov	r1, fp
 8048a08:	4640      	mov	r0, r8
 8048a0a:	f000 fe9b 	bl	8049744 <_strtod_r>
 8048a0e:	9b03      	ldr	r3, [sp, #12]
 8048a10:	6821      	ldr	r1, [r4, #0]
 8048a12:	681b      	ldr	r3, [r3, #0]
 8048a14:	f011 0f02 	tst.w	r1, #2
 8048a18:	ec57 6b10 	vmov	r6, r7, d0
 8048a1c:	f103 0204 	add.w	r2, r3, #4
 8048a20:	d020      	beq.n	8048a64 <_scanf_float+0x3d8>
 8048a22:	9903      	ldr	r1, [sp, #12]
 8048a24:	600a      	str	r2, [r1, #0]
 8048a26:	681b      	ldr	r3, [r3, #0]
 8048a28:	e9c3 6700 	strd	r6, r7, [r3]
 8048a2c:	68e3      	ldr	r3, [r4, #12]
 8048a2e:	3301      	adds	r3, #1
 8048a30:	60e3      	str	r3, [r4, #12]
 8048a32:	e66c      	b.n	804870e <_scanf_float+0x82>
 8048a34:	9b04      	ldr	r3, [sp, #16]
 8048a36:	2b00      	cmp	r3, #0
 8048a38:	d0e4      	beq.n	8048a04 <_scanf_float+0x378>
 8048a3a:	9905      	ldr	r1, [sp, #20]
 8048a3c:	230a      	movs	r3, #10
 8048a3e:	462a      	mov	r2, r5
 8048a40:	3101      	adds	r1, #1
 8048a42:	4640      	mov	r0, r8
 8048a44:	f000 ff08 	bl	8049858 <_strtol_r>
 8048a48:	9b04      	ldr	r3, [sp, #16]
 8048a4a:	9e05      	ldr	r6, [sp, #20]
 8048a4c:	1ac2      	subs	r2, r0, r3
 8048a4e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8048a52:	429e      	cmp	r6, r3
 8048a54:	bf28      	it	cs
 8048a56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8048a5a:	4912      	ldr	r1, [pc, #72]	; (8048aa4 <_scanf_float+0x418>)
 8048a5c:	4630      	mov	r0, r6
 8048a5e:	f000 f82b 	bl	8048ab8 <siprintf>
 8048a62:	e7cf      	b.n	8048a04 <_scanf_float+0x378>
 8048a64:	f011 0f04 	tst.w	r1, #4
 8048a68:	9903      	ldr	r1, [sp, #12]
 8048a6a:	600a      	str	r2, [r1, #0]
 8048a6c:	d1db      	bne.n	8048a26 <_scanf_float+0x39a>
 8048a6e:	f8d3 8000 	ldr.w	r8, [r3]
 8048a72:	ee10 2a10 	vmov	r2, s0
 8048a76:	ee10 0a10 	vmov	r0, s0
 8048a7a:	463b      	mov	r3, r7
 8048a7c:	4639      	mov	r1, r7
 8048a7e:	f7f8 f855 	bl	8040b2c <__aeabi_dcmpun>
 8048a82:	b128      	cbz	r0, 8048a90 <_scanf_float+0x404>
 8048a84:	4808      	ldr	r0, [pc, #32]	; (8048aa8 <_scanf_float+0x41c>)
 8048a86:	f000 f811 	bl	8048aac <nanf>
 8048a8a:	ed88 0a00 	vstr	s0, [r8]
 8048a8e:	e7cd      	b.n	8048a2c <_scanf_float+0x3a0>
 8048a90:	4630      	mov	r0, r6
 8048a92:	4639      	mov	r1, r7
 8048a94:	f7f8 f8a8 	bl	8040be8 <__aeabi_d2f>
 8048a98:	f8c8 0000 	str.w	r0, [r8]
 8048a9c:	e7c6      	b.n	8048a2c <_scanf_float+0x3a0>
 8048a9e:	2500      	movs	r5, #0
 8048aa0:	e635      	b.n	804870e <_scanf_float+0x82>
 8048aa2:	bf00      	nop
 8048aa4:	0804d7a8 	.word	0x0804d7a8
 8048aa8:	0804dbe0 	.word	0x0804dbe0

08048aac <nanf>:
 8048aac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8048ab4 <nanf+0x8>
 8048ab0:	4770      	bx	lr
 8048ab2:	bf00      	nop
 8048ab4:	7fc00000 	.word	0x7fc00000

08048ab8 <siprintf>:
 8048ab8:	b40e      	push	{r1, r2, r3}
 8048aba:	b500      	push	{lr}
 8048abc:	b09c      	sub	sp, #112	; 0x70
 8048abe:	ab1d      	add	r3, sp, #116	; 0x74
 8048ac0:	9002      	str	r0, [sp, #8]
 8048ac2:	9006      	str	r0, [sp, #24]
 8048ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8048ac8:	4809      	ldr	r0, [pc, #36]	; (8048af0 <siprintf+0x38>)
 8048aca:	9107      	str	r1, [sp, #28]
 8048acc:	9104      	str	r1, [sp, #16]
 8048ace:	4909      	ldr	r1, [pc, #36]	; (8048af4 <siprintf+0x3c>)
 8048ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8048ad4:	9105      	str	r1, [sp, #20]
 8048ad6:	6800      	ldr	r0, [r0, #0]
 8048ad8:	9301      	str	r3, [sp, #4]
 8048ada:	a902      	add	r1, sp, #8
 8048adc:	f002 feda 	bl	804b894 <_svfiprintf_r>
 8048ae0:	9b02      	ldr	r3, [sp, #8]
 8048ae2:	2200      	movs	r2, #0
 8048ae4:	701a      	strb	r2, [r3, #0]
 8048ae6:	b01c      	add	sp, #112	; 0x70
 8048ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8048aec:	b003      	add	sp, #12
 8048aee:	4770      	bx	lr
 8048af0:	20000018 	.word	0x20000018
 8048af4:	ffff0208 	.word	0xffff0208

08048af8 <sulp>:
 8048af8:	b570      	push	{r4, r5, r6, lr}
 8048afa:	4604      	mov	r4, r0
 8048afc:	460d      	mov	r5, r1
 8048afe:	ec45 4b10 	vmov	d0, r4, r5
 8048b02:	4616      	mov	r6, r2
 8048b04:	f002 fc62 	bl	804b3cc <__ulp>
 8048b08:	ec51 0b10 	vmov	r0, r1, d0
 8048b0c:	b17e      	cbz	r6, 8048b2e <sulp+0x36>
 8048b0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8048b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8048b16:	2b00      	cmp	r3, #0
 8048b18:	dd09      	ble.n	8048b2e <sulp+0x36>
 8048b1a:	051b      	lsls	r3, r3, #20
 8048b1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8048b20:	2400      	movs	r4, #0
 8048b22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8048b26:	4622      	mov	r2, r4
 8048b28:	462b      	mov	r3, r5
 8048b2a:	f7f7 fd65 	bl	80405f8 <__aeabi_dmul>
 8048b2e:	bd70      	pop	{r4, r5, r6, pc}

08048b30 <_strtod_l>:
 8048b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048b34:	b0a3      	sub	sp, #140	; 0x8c
 8048b36:	461f      	mov	r7, r3
 8048b38:	2300      	movs	r3, #0
 8048b3a:	931e      	str	r3, [sp, #120]	; 0x78
 8048b3c:	4ba4      	ldr	r3, [pc, #656]	; (8048dd0 <_strtod_l+0x2a0>)
 8048b3e:	9219      	str	r2, [sp, #100]	; 0x64
 8048b40:	681b      	ldr	r3, [r3, #0]
 8048b42:	9307      	str	r3, [sp, #28]
 8048b44:	4604      	mov	r4, r0
 8048b46:	4618      	mov	r0, r3
 8048b48:	4688      	mov	r8, r1
 8048b4a:	f7f7 fb41 	bl	80401d0 <strlen>
 8048b4e:	f04f 0a00 	mov.w	sl, #0
 8048b52:	4605      	mov	r5, r0
 8048b54:	f04f 0b00 	mov.w	fp, #0
 8048b58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8048b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048b5e:	781a      	ldrb	r2, [r3, #0]
 8048b60:	2a2b      	cmp	r2, #43	; 0x2b
 8048b62:	d04c      	beq.n	8048bfe <_strtod_l+0xce>
 8048b64:	d839      	bhi.n	8048bda <_strtod_l+0xaa>
 8048b66:	2a0d      	cmp	r2, #13
 8048b68:	d832      	bhi.n	8048bd0 <_strtod_l+0xa0>
 8048b6a:	2a08      	cmp	r2, #8
 8048b6c:	d832      	bhi.n	8048bd4 <_strtod_l+0xa4>
 8048b6e:	2a00      	cmp	r2, #0
 8048b70:	d03c      	beq.n	8048bec <_strtod_l+0xbc>
 8048b72:	2300      	movs	r3, #0
 8048b74:	930e      	str	r3, [sp, #56]	; 0x38
 8048b76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8048b78:	7833      	ldrb	r3, [r6, #0]
 8048b7a:	2b30      	cmp	r3, #48	; 0x30
 8048b7c:	f040 80b4 	bne.w	8048ce8 <_strtod_l+0x1b8>
 8048b80:	7873      	ldrb	r3, [r6, #1]
 8048b82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8048b86:	2b58      	cmp	r3, #88	; 0x58
 8048b88:	d16c      	bne.n	8048c64 <_strtod_l+0x134>
 8048b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8048b8c:	9301      	str	r3, [sp, #4]
 8048b8e:	ab1e      	add	r3, sp, #120	; 0x78
 8048b90:	9702      	str	r7, [sp, #8]
 8048b92:	9300      	str	r3, [sp, #0]
 8048b94:	4a8f      	ldr	r2, [pc, #572]	; (8048dd4 <_strtod_l+0x2a4>)
 8048b96:	ab1f      	add	r3, sp, #124	; 0x7c
 8048b98:	a91d      	add	r1, sp, #116	; 0x74
 8048b9a:	4620      	mov	r0, r4
 8048b9c:	f001 fd84 	bl	804a6a8 <__gethex>
 8048ba0:	f010 0707 	ands.w	r7, r0, #7
 8048ba4:	4605      	mov	r5, r0
 8048ba6:	d005      	beq.n	8048bb4 <_strtod_l+0x84>
 8048ba8:	2f06      	cmp	r7, #6
 8048baa:	d12a      	bne.n	8048c02 <_strtod_l+0xd2>
 8048bac:	3601      	adds	r6, #1
 8048bae:	2300      	movs	r3, #0
 8048bb0:	961d      	str	r6, [sp, #116]	; 0x74
 8048bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8048bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8048bb6:	2b00      	cmp	r3, #0
 8048bb8:	f040 8596 	bne.w	80496e8 <_strtod_l+0xbb8>
 8048bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8048bbe:	b1db      	cbz	r3, 8048bf8 <_strtod_l+0xc8>
 8048bc0:	4652      	mov	r2, sl
 8048bc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8048bc6:	ec43 2b10 	vmov	d0, r2, r3
 8048bca:	b023      	add	sp, #140	; 0x8c
 8048bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048bd0:	2a20      	cmp	r2, #32
 8048bd2:	d1ce      	bne.n	8048b72 <_strtod_l+0x42>
 8048bd4:	3301      	adds	r3, #1
 8048bd6:	931d      	str	r3, [sp, #116]	; 0x74
 8048bd8:	e7c0      	b.n	8048b5c <_strtod_l+0x2c>
 8048bda:	2a2d      	cmp	r2, #45	; 0x2d
 8048bdc:	d1c9      	bne.n	8048b72 <_strtod_l+0x42>
 8048bde:	2201      	movs	r2, #1
 8048be0:	920e      	str	r2, [sp, #56]	; 0x38
 8048be2:	1c5a      	adds	r2, r3, #1
 8048be4:	921d      	str	r2, [sp, #116]	; 0x74
 8048be6:	785b      	ldrb	r3, [r3, #1]
 8048be8:	2b00      	cmp	r3, #0
 8048bea:	d1c4      	bne.n	8048b76 <_strtod_l+0x46>
 8048bec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8048bee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8048bf2:	2b00      	cmp	r3, #0
 8048bf4:	f040 8576 	bne.w	80496e4 <_strtod_l+0xbb4>
 8048bf8:	4652      	mov	r2, sl
 8048bfa:	465b      	mov	r3, fp
 8048bfc:	e7e3      	b.n	8048bc6 <_strtod_l+0x96>
 8048bfe:	2200      	movs	r2, #0
 8048c00:	e7ee      	b.n	8048be0 <_strtod_l+0xb0>
 8048c02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8048c04:	b13a      	cbz	r2, 8048c16 <_strtod_l+0xe6>
 8048c06:	2135      	movs	r1, #53	; 0x35
 8048c08:	a820      	add	r0, sp, #128	; 0x80
 8048c0a:	f002 fcea 	bl	804b5e2 <__copybits>
 8048c0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8048c10:	4620      	mov	r0, r4
 8048c12:	f002 f8af 	bl	804ad74 <_Bfree>
 8048c16:	3f01      	subs	r7, #1
 8048c18:	2f05      	cmp	r7, #5
 8048c1a:	d807      	bhi.n	8048c2c <_strtod_l+0xfc>
 8048c1c:	e8df f007 	tbb	[pc, r7]
 8048c20:	1d180b0e 	.word	0x1d180b0e
 8048c24:	030e      	.short	0x030e
 8048c26:	f04f 0b00 	mov.w	fp, #0
 8048c2a:	46da      	mov	sl, fp
 8048c2c:	0728      	lsls	r0, r5, #28
 8048c2e:	d5c1      	bpl.n	8048bb4 <_strtod_l+0x84>
 8048c30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8048c34:	e7be      	b.n	8048bb4 <_strtod_l+0x84>
 8048c36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8048c3a:	e7f7      	b.n	8048c2c <_strtod_l+0xfc>
 8048c3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8048c40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8048c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8048c46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8048c4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8048c4e:	e7ed      	b.n	8048c2c <_strtod_l+0xfc>
 8048c50:	f8df b184 	ldr.w	fp, [pc, #388]	; 8048dd8 <_strtod_l+0x2a8>
 8048c54:	f04f 0a00 	mov.w	sl, #0
 8048c58:	e7e8      	b.n	8048c2c <_strtod_l+0xfc>
 8048c5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8048c5e:	f04f 3aff 	mov.w	sl, #4294967295
 8048c62:	e7e3      	b.n	8048c2c <_strtod_l+0xfc>
 8048c64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048c66:	1c5a      	adds	r2, r3, #1
 8048c68:	921d      	str	r2, [sp, #116]	; 0x74
 8048c6a:	785b      	ldrb	r3, [r3, #1]
 8048c6c:	2b30      	cmp	r3, #48	; 0x30
 8048c6e:	d0f9      	beq.n	8048c64 <_strtod_l+0x134>
 8048c70:	2b00      	cmp	r3, #0
 8048c72:	d09f      	beq.n	8048bb4 <_strtod_l+0x84>
 8048c74:	2301      	movs	r3, #1
 8048c76:	f04f 0900 	mov.w	r9, #0
 8048c7a:	9304      	str	r3, [sp, #16]
 8048c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8048c80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8048c84:	464f      	mov	r7, r9
 8048c86:	220a      	movs	r2, #10
 8048c88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8048c8a:	7806      	ldrb	r6, [r0, #0]
 8048c8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8048c90:	b2d9      	uxtb	r1, r3
 8048c92:	2909      	cmp	r1, #9
 8048c94:	d92a      	bls.n	8048cec <_strtod_l+0x1bc>
 8048c96:	9907      	ldr	r1, [sp, #28]
 8048c98:	462a      	mov	r2, r5
 8048c9a:	f002 ff15 	bl	804bac8 <strncmp>
 8048c9e:	b398      	cbz	r0, 8048d08 <_strtod_l+0x1d8>
 8048ca0:	2000      	movs	r0, #0
 8048ca2:	4633      	mov	r3, r6
 8048ca4:	463d      	mov	r5, r7
 8048ca6:	9007      	str	r0, [sp, #28]
 8048ca8:	4602      	mov	r2, r0
 8048caa:	2b65      	cmp	r3, #101	; 0x65
 8048cac:	d001      	beq.n	8048cb2 <_strtod_l+0x182>
 8048cae:	2b45      	cmp	r3, #69	; 0x45
 8048cb0:	d118      	bne.n	8048ce4 <_strtod_l+0x1b4>
 8048cb2:	b91d      	cbnz	r5, 8048cbc <_strtod_l+0x18c>
 8048cb4:	9b04      	ldr	r3, [sp, #16]
 8048cb6:	4303      	orrs	r3, r0
 8048cb8:	d098      	beq.n	8048bec <_strtod_l+0xbc>
 8048cba:	2500      	movs	r5, #0
 8048cbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8048cc0:	f108 0301 	add.w	r3, r8, #1
 8048cc4:	931d      	str	r3, [sp, #116]	; 0x74
 8048cc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8048cca:	2b2b      	cmp	r3, #43	; 0x2b
 8048ccc:	d075      	beq.n	8048dba <_strtod_l+0x28a>
 8048cce:	2b2d      	cmp	r3, #45	; 0x2d
 8048cd0:	d07b      	beq.n	8048dca <_strtod_l+0x29a>
 8048cd2:	f04f 0c00 	mov.w	ip, #0
 8048cd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8048cda:	2909      	cmp	r1, #9
 8048cdc:	f240 8082 	bls.w	8048de4 <_strtod_l+0x2b4>
 8048ce0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8048ce4:	2600      	movs	r6, #0
 8048ce6:	e09d      	b.n	8048e24 <_strtod_l+0x2f4>
 8048ce8:	2300      	movs	r3, #0
 8048cea:	e7c4      	b.n	8048c76 <_strtod_l+0x146>
 8048cec:	2f08      	cmp	r7, #8
 8048cee:	bfd8      	it	le
 8048cf0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8048cf2:	f100 0001 	add.w	r0, r0, #1
 8048cf6:	bfda      	itte	le
 8048cf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8048cfc:	9309      	strle	r3, [sp, #36]	; 0x24
 8048cfe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8048d02:	3701      	adds	r7, #1
 8048d04:	901d      	str	r0, [sp, #116]	; 0x74
 8048d06:	e7bf      	b.n	8048c88 <_strtod_l+0x158>
 8048d08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048d0a:	195a      	adds	r2, r3, r5
 8048d0c:	921d      	str	r2, [sp, #116]	; 0x74
 8048d0e:	5d5b      	ldrb	r3, [r3, r5]
 8048d10:	2f00      	cmp	r7, #0
 8048d12:	d037      	beq.n	8048d84 <_strtod_l+0x254>
 8048d14:	9007      	str	r0, [sp, #28]
 8048d16:	463d      	mov	r5, r7
 8048d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8048d1c:	2a09      	cmp	r2, #9
 8048d1e:	d912      	bls.n	8048d46 <_strtod_l+0x216>
 8048d20:	2201      	movs	r2, #1
 8048d22:	e7c2      	b.n	8048caa <_strtod_l+0x17a>
 8048d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048d26:	1c5a      	adds	r2, r3, #1
 8048d28:	921d      	str	r2, [sp, #116]	; 0x74
 8048d2a:	785b      	ldrb	r3, [r3, #1]
 8048d2c:	3001      	adds	r0, #1
 8048d2e:	2b30      	cmp	r3, #48	; 0x30
 8048d30:	d0f8      	beq.n	8048d24 <_strtod_l+0x1f4>
 8048d32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8048d36:	2a08      	cmp	r2, #8
 8048d38:	f200 84db 	bhi.w	80496f2 <_strtod_l+0xbc2>
 8048d3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8048d3e:	9007      	str	r0, [sp, #28]
 8048d40:	2000      	movs	r0, #0
 8048d42:	920a      	str	r2, [sp, #40]	; 0x28
 8048d44:	4605      	mov	r5, r0
 8048d46:	3b30      	subs	r3, #48	; 0x30
 8048d48:	f100 0201 	add.w	r2, r0, #1
 8048d4c:	d014      	beq.n	8048d78 <_strtod_l+0x248>
 8048d4e:	9907      	ldr	r1, [sp, #28]
 8048d50:	4411      	add	r1, r2
 8048d52:	9107      	str	r1, [sp, #28]
 8048d54:	462a      	mov	r2, r5
 8048d56:	eb00 0e05 	add.w	lr, r0, r5
 8048d5a:	210a      	movs	r1, #10
 8048d5c:	4572      	cmp	r2, lr
 8048d5e:	d113      	bne.n	8048d88 <_strtod_l+0x258>
 8048d60:	182a      	adds	r2, r5, r0
 8048d62:	2a08      	cmp	r2, #8
 8048d64:	f105 0501 	add.w	r5, r5, #1
 8048d68:	4405      	add	r5, r0
 8048d6a:	dc1c      	bgt.n	8048da6 <_strtod_l+0x276>
 8048d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048d6e:	220a      	movs	r2, #10
 8048d70:	fb02 3301 	mla	r3, r2, r1, r3
 8048d74:	9309      	str	r3, [sp, #36]	; 0x24
 8048d76:	2200      	movs	r2, #0
 8048d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048d7a:	1c59      	adds	r1, r3, #1
 8048d7c:	911d      	str	r1, [sp, #116]	; 0x74
 8048d7e:	785b      	ldrb	r3, [r3, #1]
 8048d80:	4610      	mov	r0, r2
 8048d82:	e7c9      	b.n	8048d18 <_strtod_l+0x1e8>
 8048d84:	4638      	mov	r0, r7
 8048d86:	e7d2      	b.n	8048d2e <_strtod_l+0x1fe>
 8048d88:	2a08      	cmp	r2, #8
 8048d8a:	dc04      	bgt.n	8048d96 <_strtod_l+0x266>
 8048d8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8048d8e:	434e      	muls	r6, r1
 8048d90:	9609      	str	r6, [sp, #36]	; 0x24
 8048d92:	3201      	adds	r2, #1
 8048d94:	e7e2      	b.n	8048d5c <_strtod_l+0x22c>
 8048d96:	f102 0c01 	add.w	ip, r2, #1
 8048d9a:	f1bc 0f10 	cmp.w	ip, #16
 8048d9e:	bfd8      	it	le
 8048da0:	fb01 f909 	mulle.w	r9, r1, r9
 8048da4:	e7f5      	b.n	8048d92 <_strtod_l+0x262>
 8048da6:	2d10      	cmp	r5, #16
 8048da8:	bfdc      	itt	le
 8048daa:	220a      	movle	r2, #10
 8048dac:	fb02 3909 	mlale	r9, r2, r9, r3
 8048db0:	e7e1      	b.n	8048d76 <_strtod_l+0x246>
 8048db2:	2300      	movs	r3, #0
 8048db4:	9307      	str	r3, [sp, #28]
 8048db6:	2201      	movs	r2, #1
 8048db8:	e77c      	b.n	8048cb4 <_strtod_l+0x184>
 8048dba:	f04f 0c00 	mov.w	ip, #0
 8048dbe:	f108 0302 	add.w	r3, r8, #2
 8048dc2:	931d      	str	r3, [sp, #116]	; 0x74
 8048dc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8048dc8:	e785      	b.n	8048cd6 <_strtod_l+0x1a6>
 8048dca:	f04f 0c01 	mov.w	ip, #1
 8048dce:	e7f6      	b.n	8048dbe <_strtod_l+0x28e>
 8048dd0:	0804da24 	.word	0x0804da24
 8048dd4:	0804d7b0 	.word	0x0804d7b0
 8048dd8:	7ff00000 	.word	0x7ff00000
 8048ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048dde:	1c59      	adds	r1, r3, #1
 8048de0:	911d      	str	r1, [sp, #116]	; 0x74
 8048de2:	785b      	ldrb	r3, [r3, #1]
 8048de4:	2b30      	cmp	r3, #48	; 0x30
 8048de6:	d0f9      	beq.n	8048ddc <_strtod_l+0x2ac>
 8048de8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8048dec:	2908      	cmp	r1, #8
 8048dee:	f63f af79 	bhi.w	8048ce4 <_strtod_l+0x1b4>
 8048df2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8048df6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048df8:	9308      	str	r3, [sp, #32]
 8048dfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048dfc:	1c59      	adds	r1, r3, #1
 8048dfe:	911d      	str	r1, [sp, #116]	; 0x74
 8048e00:	785b      	ldrb	r3, [r3, #1]
 8048e02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8048e06:	2e09      	cmp	r6, #9
 8048e08:	d937      	bls.n	8048e7a <_strtod_l+0x34a>
 8048e0a:	9e08      	ldr	r6, [sp, #32]
 8048e0c:	1b89      	subs	r1, r1, r6
 8048e0e:	2908      	cmp	r1, #8
 8048e10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8048e14:	dc02      	bgt.n	8048e1c <_strtod_l+0x2ec>
 8048e16:	4576      	cmp	r6, lr
 8048e18:	bfa8      	it	ge
 8048e1a:	4676      	movge	r6, lr
 8048e1c:	f1bc 0f00 	cmp.w	ip, #0
 8048e20:	d000      	beq.n	8048e24 <_strtod_l+0x2f4>
 8048e22:	4276      	negs	r6, r6
 8048e24:	2d00      	cmp	r5, #0
 8048e26:	d14f      	bne.n	8048ec8 <_strtod_l+0x398>
 8048e28:	9904      	ldr	r1, [sp, #16]
 8048e2a:	4301      	orrs	r1, r0
 8048e2c:	f47f aec2 	bne.w	8048bb4 <_strtod_l+0x84>
 8048e30:	2a00      	cmp	r2, #0
 8048e32:	f47f aedb 	bne.w	8048bec <_strtod_l+0xbc>
 8048e36:	2b69      	cmp	r3, #105	; 0x69
 8048e38:	d027      	beq.n	8048e8a <_strtod_l+0x35a>
 8048e3a:	dc24      	bgt.n	8048e86 <_strtod_l+0x356>
 8048e3c:	2b49      	cmp	r3, #73	; 0x49
 8048e3e:	d024      	beq.n	8048e8a <_strtod_l+0x35a>
 8048e40:	2b4e      	cmp	r3, #78	; 0x4e
 8048e42:	f47f aed3 	bne.w	8048bec <_strtod_l+0xbc>
 8048e46:	499e      	ldr	r1, [pc, #632]	; (80490c0 <_strtod_l+0x590>)
 8048e48:	a81d      	add	r0, sp, #116	; 0x74
 8048e4a:	f001 fe85 	bl	804ab58 <__match>
 8048e4e:	2800      	cmp	r0, #0
 8048e50:	f43f aecc 	beq.w	8048bec <_strtod_l+0xbc>
 8048e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048e56:	781b      	ldrb	r3, [r3, #0]
 8048e58:	2b28      	cmp	r3, #40	; 0x28
 8048e5a:	d12d      	bne.n	8048eb8 <_strtod_l+0x388>
 8048e5c:	4999      	ldr	r1, [pc, #612]	; (80490c4 <_strtod_l+0x594>)
 8048e5e:	aa20      	add	r2, sp, #128	; 0x80
 8048e60:	a81d      	add	r0, sp, #116	; 0x74
 8048e62:	f001 fe8d 	bl	804ab80 <__hexnan>
 8048e66:	2805      	cmp	r0, #5
 8048e68:	d126      	bne.n	8048eb8 <_strtod_l+0x388>
 8048e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8048e6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8048e70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8048e74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8048e78:	e69c      	b.n	8048bb4 <_strtod_l+0x84>
 8048e7a:	210a      	movs	r1, #10
 8048e7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8048e80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8048e84:	e7b9      	b.n	8048dfa <_strtod_l+0x2ca>
 8048e86:	2b6e      	cmp	r3, #110	; 0x6e
 8048e88:	e7db      	b.n	8048e42 <_strtod_l+0x312>
 8048e8a:	498f      	ldr	r1, [pc, #572]	; (80490c8 <_strtod_l+0x598>)
 8048e8c:	a81d      	add	r0, sp, #116	; 0x74
 8048e8e:	f001 fe63 	bl	804ab58 <__match>
 8048e92:	2800      	cmp	r0, #0
 8048e94:	f43f aeaa 	beq.w	8048bec <_strtod_l+0xbc>
 8048e98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048e9a:	498c      	ldr	r1, [pc, #560]	; (80490cc <_strtod_l+0x59c>)
 8048e9c:	3b01      	subs	r3, #1
 8048e9e:	a81d      	add	r0, sp, #116	; 0x74
 8048ea0:	931d      	str	r3, [sp, #116]	; 0x74
 8048ea2:	f001 fe59 	bl	804ab58 <__match>
 8048ea6:	b910      	cbnz	r0, 8048eae <_strtod_l+0x37e>
 8048ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8048eaa:	3301      	adds	r3, #1
 8048eac:	931d      	str	r3, [sp, #116]	; 0x74
 8048eae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80490dc <_strtod_l+0x5ac>
 8048eb2:	f04f 0a00 	mov.w	sl, #0
 8048eb6:	e67d      	b.n	8048bb4 <_strtod_l+0x84>
 8048eb8:	4885      	ldr	r0, [pc, #532]	; (80490d0 <_strtod_l+0x5a0>)
 8048eba:	f002 fded 	bl	804ba98 <nan>
 8048ebe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8048ec2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8048ec6:	e675      	b.n	8048bb4 <_strtod_l+0x84>
 8048ec8:	9b07      	ldr	r3, [sp, #28]
 8048eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8048ecc:	1af3      	subs	r3, r6, r3
 8048ece:	2f00      	cmp	r7, #0
 8048ed0:	bf08      	it	eq
 8048ed2:	462f      	moveq	r7, r5
 8048ed4:	2d10      	cmp	r5, #16
 8048ed6:	9308      	str	r3, [sp, #32]
 8048ed8:	46a8      	mov	r8, r5
 8048eda:	bfa8      	it	ge
 8048edc:	f04f 0810 	movge.w	r8, #16
 8048ee0:	f7f7 fb10 	bl	8040504 <__aeabi_ui2d>
 8048ee4:	2d09      	cmp	r5, #9
 8048ee6:	4682      	mov	sl, r0
 8048ee8:	468b      	mov	fp, r1
 8048eea:	dd13      	ble.n	8048f14 <_strtod_l+0x3e4>
 8048eec:	4b79      	ldr	r3, [pc, #484]	; (80490d4 <_strtod_l+0x5a4>)
 8048eee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8048ef2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8048ef6:	f7f7 fb7f 	bl	80405f8 <__aeabi_dmul>
 8048efa:	4682      	mov	sl, r0
 8048efc:	4648      	mov	r0, r9
 8048efe:	468b      	mov	fp, r1
 8048f00:	f7f7 fb00 	bl	8040504 <__aeabi_ui2d>
 8048f04:	4602      	mov	r2, r0
 8048f06:	460b      	mov	r3, r1
 8048f08:	4650      	mov	r0, sl
 8048f0a:	4659      	mov	r1, fp
 8048f0c:	f7f7 f9be 	bl	804028c <__adddf3>
 8048f10:	4682      	mov	sl, r0
 8048f12:	468b      	mov	fp, r1
 8048f14:	2d0f      	cmp	r5, #15
 8048f16:	dc38      	bgt.n	8048f8a <_strtod_l+0x45a>
 8048f18:	9b08      	ldr	r3, [sp, #32]
 8048f1a:	2b00      	cmp	r3, #0
 8048f1c:	f43f ae4a 	beq.w	8048bb4 <_strtod_l+0x84>
 8048f20:	dd24      	ble.n	8048f6c <_strtod_l+0x43c>
 8048f22:	2b16      	cmp	r3, #22
 8048f24:	dc0b      	bgt.n	8048f3e <_strtod_l+0x40e>
 8048f26:	4d6b      	ldr	r5, [pc, #428]	; (80490d4 <_strtod_l+0x5a4>)
 8048f28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8048f2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8048f30:	4652      	mov	r2, sl
 8048f32:	465b      	mov	r3, fp
 8048f34:	f7f7 fb60 	bl	80405f8 <__aeabi_dmul>
 8048f38:	4682      	mov	sl, r0
 8048f3a:	468b      	mov	fp, r1
 8048f3c:	e63a      	b.n	8048bb4 <_strtod_l+0x84>
 8048f3e:	9a08      	ldr	r2, [sp, #32]
 8048f40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8048f44:	4293      	cmp	r3, r2
 8048f46:	db20      	blt.n	8048f8a <_strtod_l+0x45a>
 8048f48:	4c62      	ldr	r4, [pc, #392]	; (80490d4 <_strtod_l+0x5a4>)
 8048f4a:	f1c5 050f 	rsb	r5, r5, #15
 8048f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8048f52:	4652      	mov	r2, sl
 8048f54:	465b      	mov	r3, fp
 8048f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8048f5a:	f7f7 fb4d 	bl	80405f8 <__aeabi_dmul>
 8048f5e:	9b08      	ldr	r3, [sp, #32]
 8048f60:	1b5d      	subs	r5, r3, r5
 8048f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8048f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8048f6a:	e7e3      	b.n	8048f34 <_strtod_l+0x404>
 8048f6c:	9b08      	ldr	r3, [sp, #32]
 8048f6e:	3316      	adds	r3, #22
 8048f70:	db0b      	blt.n	8048f8a <_strtod_l+0x45a>
 8048f72:	9b07      	ldr	r3, [sp, #28]
 8048f74:	4a57      	ldr	r2, [pc, #348]	; (80490d4 <_strtod_l+0x5a4>)
 8048f76:	1b9e      	subs	r6, r3, r6
 8048f78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8048f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8048f80:	4650      	mov	r0, sl
 8048f82:	4659      	mov	r1, fp
 8048f84:	f7f7 fc62 	bl	804084c <__aeabi_ddiv>
 8048f88:	e7d6      	b.n	8048f38 <_strtod_l+0x408>
 8048f8a:	9b08      	ldr	r3, [sp, #32]
 8048f8c:	eba5 0808 	sub.w	r8, r5, r8
 8048f90:	4498      	add	r8, r3
 8048f92:	f1b8 0f00 	cmp.w	r8, #0
 8048f96:	dd71      	ble.n	804907c <_strtod_l+0x54c>
 8048f98:	f018 030f 	ands.w	r3, r8, #15
 8048f9c:	d00a      	beq.n	8048fb4 <_strtod_l+0x484>
 8048f9e:	494d      	ldr	r1, [pc, #308]	; (80490d4 <_strtod_l+0x5a4>)
 8048fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8048fa4:	4652      	mov	r2, sl
 8048fa6:	465b      	mov	r3, fp
 8048fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8048fac:	f7f7 fb24 	bl	80405f8 <__aeabi_dmul>
 8048fb0:	4682      	mov	sl, r0
 8048fb2:	468b      	mov	fp, r1
 8048fb4:	f038 080f 	bics.w	r8, r8, #15
 8048fb8:	d04d      	beq.n	8049056 <_strtod_l+0x526>
 8048fba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8048fbe:	dd22      	ble.n	8049006 <_strtod_l+0x4d6>
 8048fc0:	2500      	movs	r5, #0
 8048fc2:	462e      	mov	r6, r5
 8048fc4:	9509      	str	r5, [sp, #36]	; 0x24
 8048fc6:	9507      	str	r5, [sp, #28]
 8048fc8:	2322      	movs	r3, #34	; 0x22
 8048fca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80490dc <_strtod_l+0x5ac>
 8048fce:	6023      	str	r3, [r4, #0]
 8048fd0:	f04f 0a00 	mov.w	sl, #0
 8048fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048fd6:	2b00      	cmp	r3, #0
 8048fd8:	f43f adec 	beq.w	8048bb4 <_strtod_l+0x84>
 8048fdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8048fde:	4620      	mov	r0, r4
 8048fe0:	f001 fec8 	bl	804ad74 <_Bfree>
 8048fe4:	9907      	ldr	r1, [sp, #28]
 8048fe6:	4620      	mov	r0, r4
 8048fe8:	f001 fec4 	bl	804ad74 <_Bfree>
 8048fec:	4631      	mov	r1, r6
 8048fee:	4620      	mov	r0, r4
 8048ff0:	f001 fec0 	bl	804ad74 <_Bfree>
 8048ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048ff6:	4620      	mov	r0, r4
 8048ff8:	f001 febc 	bl	804ad74 <_Bfree>
 8048ffc:	4629      	mov	r1, r5
 8048ffe:	4620      	mov	r0, r4
 8049000:	f001 feb8 	bl	804ad74 <_Bfree>
 8049004:	e5d6      	b.n	8048bb4 <_strtod_l+0x84>
 8049006:	2300      	movs	r3, #0
 8049008:	ea4f 1828 	mov.w	r8, r8, asr #4
 804900c:	4650      	mov	r0, sl
 804900e:	4659      	mov	r1, fp
 8049010:	4699      	mov	r9, r3
 8049012:	f1b8 0f01 	cmp.w	r8, #1
 8049016:	dc21      	bgt.n	804905c <_strtod_l+0x52c>
 8049018:	b10b      	cbz	r3, 804901e <_strtod_l+0x4ee>
 804901a:	4682      	mov	sl, r0
 804901c:	468b      	mov	fp, r1
 804901e:	4b2e      	ldr	r3, [pc, #184]	; (80490d8 <_strtod_l+0x5a8>)
 8049020:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8049024:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8049028:	4652      	mov	r2, sl
 804902a:	465b      	mov	r3, fp
 804902c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8049030:	f7f7 fae2 	bl	80405f8 <__aeabi_dmul>
 8049034:	4b29      	ldr	r3, [pc, #164]	; (80490dc <_strtod_l+0x5ac>)
 8049036:	460a      	mov	r2, r1
 8049038:	400b      	ands	r3, r1
 804903a:	4929      	ldr	r1, [pc, #164]	; (80490e0 <_strtod_l+0x5b0>)
 804903c:	428b      	cmp	r3, r1
 804903e:	4682      	mov	sl, r0
 8049040:	d8be      	bhi.n	8048fc0 <_strtod_l+0x490>
 8049042:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8049046:	428b      	cmp	r3, r1
 8049048:	bf86      	itte	hi
 804904a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80490e4 <_strtod_l+0x5b4>
 804904e:	f04f 3aff 	movhi.w	sl, #4294967295
 8049052:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8049056:	2300      	movs	r3, #0
 8049058:	9304      	str	r3, [sp, #16]
 804905a:	e081      	b.n	8049160 <_strtod_l+0x630>
 804905c:	f018 0f01 	tst.w	r8, #1
 8049060:	d007      	beq.n	8049072 <_strtod_l+0x542>
 8049062:	4b1d      	ldr	r3, [pc, #116]	; (80490d8 <_strtod_l+0x5a8>)
 8049064:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8049068:	e9d3 2300 	ldrd	r2, r3, [r3]
 804906c:	f7f7 fac4 	bl	80405f8 <__aeabi_dmul>
 8049070:	2301      	movs	r3, #1
 8049072:	f109 0901 	add.w	r9, r9, #1
 8049076:	ea4f 0868 	mov.w	r8, r8, asr #1
 804907a:	e7ca      	b.n	8049012 <_strtod_l+0x4e2>
 804907c:	d0eb      	beq.n	8049056 <_strtod_l+0x526>
 804907e:	f1c8 0800 	rsb	r8, r8, #0
 8049082:	f018 020f 	ands.w	r2, r8, #15
 8049086:	d00a      	beq.n	804909e <_strtod_l+0x56e>
 8049088:	4b12      	ldr	r3, [pc, #72]	; (80490d4 <_strtod_l+0x5a4>)
 804908a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804908e:	4650      	mov	r0, sl
 8049090:	4659      	mov	r1, fp
 8049092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049096:	f7f7 fbd9 	bl	804084c <__aeabi_ddiv>
 804909a:	4682      	mov	sl, r0
 804909c:	468b      	mov	fp, r1
 804909e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80490a2:	d0d8      	beq.n	8049056 <_strtod_l+0x526>
 80490a4:	f1b8 0f1f 	cmp.w	r8, #31
 80490a8:	dd1e      	ble.n	80490e8 <_strtod_l+0x5b8>
 80490aa:	2500      	movs	r5, #0
 80490ac:	462e      	mov	r6, r5
 80490ae:	9509      	str	r5, [sp, #36]	; 0x24
 80490b0:	9507      	str	r5, [sp, #28]
 80490b2:	2322      	movs	r3, #34	; 0x22
 80490b4:	f04f 0a00 	mov.w	sl, #0
 80490b8:	f04f 0b00 	mov.w	fp, #0
 80490bc:	6023      	str	r3, [r4, #0]
 80490be:	e789      	b.n	8048fd4 <_strtod_l+0x4a4>
 80490c0:	0804d781 	.word	0x0804d781
 80490c4:	0804d7c4 	.word	0x0804d7c4
 80490c8:	0804d779 	.word	0x0804d779
 80490cc:	0804d929 	.word	0x0804d929
 80490d0:	0804dbe0 	.word	0x0804dbe0
 80490d4:	0804dac0 	.word	0x0804dac0
 80490d8:	0804da98 	.word	0x0804da98
 80490dc:	7ff00000 	.word	0x7ff00000
 80490e0:	7ca00000 	.word	0x7ca00000
 80490e4:	7fefffff 	.word	0x7fefffff
 80490e8:	f018 0310 	ands.w	r3, r8, #16
 80490ec:	bf18      	it	ne
 80490ee:	236a      	movne	r3, #106	; 0x6a
 80490f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80494a8 <_strtod_l+0x978>
 80490f4:	9304      	str	r3, [sp, #16]
 80490f6:	4650      	mov	r0, sl
 80490f8:	4659      	mov	r1, fp
 80490fa:	2300      	movs	r3, #0
 80490fc:	f018 0f01 	tst.w	r8, #1
 8049100:	d004      	beq.n	804910c <_strtod_l+0x5dc>
 8049102:	e9d9 2300 	ldrd	r2, r3, [r9]
 8049106:	f7f7 fa77 	bl	80405f8 <__aeabi_dmul>
 804910a:	2301      	movs	r3, #1
 804910c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8049110:	f109 0908 	add.w	r9, r9, #8
 8049114:	d1f2      	bne.n	80490fc <_strtod_l+0x5cc>
 8049116:	b10b      	cbz	r3, 804911c <_strtod_l+0x5ec>
 8049118:	4682      	mov	sl, r0
 804911a:	468b      	mov	fp, r1
 804911c:	9b04      	ldr	r3, [sp, #16]
 804911e:	b1bb      	cbz	r3, 8049150 <_strtod_l+0x620>
 8049120:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8049124:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8049128:	2b00      	cmp	r3, #0
 804912a:	4659      	mov	r1, fp
 804912c:	dd10      	ble.n	8049150 <_strtod_l+0x620>
 804912e:	2b1f      	cmp	r3, #31
 8049130:	f340 8128 	ble.w	8049384 <_strtod_l+0x854>
 8049134:	2b34      	cmp	r3, #52	; 0x34
 8049136:	bfde      	ittt	le
 8049138:	3b20      	suble	r3, #32
 804913a:	f04f 32ff 	movle.w	r2, #4294967295
 804913e:	fa02 f303 	lslle.w	r3, r2, r3
 8049142:	f04f 0a00 	mov.w	sl, #0
 8049146:	bfcc      	ite	gt
 8049148:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 804914c:	ea03 0b01 	andle.w	fp, r3, r1
 8049150:	2200      	movs	r2, #0
 8049152:	2300      	movs	r3, #0
 8049154:	4650      	mov	r0, sl
 8049156:	4659      	mov	r1, fp
 8049158:	f7f7 fcb6 	bl	8040ac8 <__aeabi_dcmpeq>
 804915c:	2800      	cmp	r0, #0
 804915e:	d1a4      	bne.n	80490aa <_strtod_l+0x57a>
 8049160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049162:	9300      	str	r3, [sp, #0]
 8049164:	990a      	ldr	r1, [sp, #40]	; 0x28
 8049166:	462b      	mov	r3, r5
 8049168:	463a      	mov	r2, r7
 804916a:	4620      	mov	r0, r4
 804916c:	f001 fe6e 	bl	804ae4c <__s2b>
 8049170:	9009      	str	r0, [sp, #36]	; 0x24
 8049172:	2800      	cmp	r0, #0
 8049174:	f43f af24 	beq.w	8048fc0 <_strtod_l+0x490>
 8049178:	9b07      	ldr	r3, [sp, #28]
 804917a:	1b9e      	subs	r6, r3, r6
 804917c:	9b08      	ldr	r3, [sp, #32]
 804917e:	2b00      	cmp	r3, #0
 8049180:	bfb4      	ite	lt
 8049182:	4633      	movlt	r3, r6
 8049184:	2300      	movge	r3, #0
 8049186:	9310      	str	r3, [sp, #64]	; 0x40
 8049188:	9b08      	ldr	r3, [sp, #32]
 804918a:	2500      	movs	r5, #0
 804918c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8049190:	9318      	str	r3, [sp, #96]	; 0x60
 8049192:	462e      	mov	r6, r5
 8049194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049196:	4620      	mov	r0, r4
 8049198:	6859      	ldr	r1, [r3, #4]
 804919a:	f001 fdab 	bl	804acf4 <_Balloc>
 804919e:	9007      	str	r0, [sp, #28]
 80491a0:	2800      	cmp	r0, #0
 80491a2:	f43f af11 	beq.w	8048fc8 <_strtod_l+0x498>
 80491a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80491a8:	691a      	ldr	r2, [r3, #16]
 80491aa:	3202      	adds	r2, #2
 80491ac:	f103 010c 	add.w	r1, r3, #12
 80491b0:	0092      	lsls	r2, r2, #2
 80491b2:	300c      	adds	r0, #12
 80491b4:	f7fe fdea 	bl	8047d8c <memcpy>
 80491b8:	ec4b ab10 	vmov	d0, sl, fp
 80491bc:	aa20      	add	r2, sp, #128	; 0x80
 80491be:	a91f      	add	r1, sp, #124	; 0x7c
 80491c0:	4620      	mov	r0, r4
 80491c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80491c6:	f002 f97d 	bl	804b4c4 <__d2b>
 80491ca:	901e      	str	r0, [sp, #120]	; 0x78
 80491cc:	2800      	cmp	r0, #0
 80491ce:	f43f aefb 	beq.w	8048fc8 <_strtod_l+0x498>
 80491d2:	2101      	movs	r1, #1
 80491d4:	4620      	mov	r0, r4
 80491d6:	f001 fed3 	bl	804af80 <__i2b>
 80491da:	4606      	mov	r6, r0
 80491dc:	2800      	cmp	r0, #0
 80491de:	f43f aef3 	beq.w	8048fc8 <_strtod_l+0x498>
 80491e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80491e4:	9904      	ldr	r1, [sp, #16]
 80491e6:	2b00      	cmp	r3, #0
 80491e8:	bfab      	itete	ge
 80491ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80491ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80491ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80491f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80491f4:	bfac      	ite	ge
 80491f6:	eb03 0902 	addge.w	r9, r3, r2
 80491fa:	1ad7      	sublt	r7, r2, r3
 80491fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80491fe:	eba3 0801 	sub.w	r8, r3, r1
 8049202:	4490      	add	r8, r2
 8049204:	4ba3      	ldr	r3, [pc, #652]	; (8049494 <_strtod_l+0x964>)
 8049206:	f108 38ff 	add.w	r8, r8, #4294967295
 804920a:	4598      	cmp	r8, r3
 804920c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8049210:	f280 80cc 	bge.w	80493ac <_strtod_l+0x87c>
 8049214:	eba3 0308 	sub.w	r3, r3, r8
 8049218:	2b1f      	cmp	r3, #31
 804921a:	eba2 0203 	sub.w	r2, r2, r3
 804921e:	f04f 0101 	mov.w	r1, #1
 8049222:	f300 80b6 	bgt.w	8049392 <_strtod_l+0x862>
 8049226:	fa01 f303 	lsl.w	r3, r1, r3
 804922a:	9311      	str	r3, [sp, #68]	; 0x44
 804922c:	2300      	movs	r3, #0
 804922e:	930c      	str	r3, [sp, #48]	; 0x30
 8049230:	eb09 0802 	add.w	r8, r9, r2
 8049234:	9b04      	ldr	r3, [sp, #16]
 8049236:	45c1      	cmp	r9, r8
 8049238:	4417      	add	r7, r2
 804923a:	441f      	add	r7, r3
 804923c:	464b      	mov	r3, r9
 804923e:	bfa8      	it	ge
 8049240:	4643      	movge	r3, r8
 8049242:	42bb      	cmp	r3, r7
 8049244:	bfa8      	it	ge
 8049246:	463b      	movge	r3, r7
 8049248:	2b00      	cmp	r3, #0
 804924a:	bfc2      	ittt	gt
 804924c:	eba8 0803 	subgt.w	r8, r8, r3
 8049250:	1aff      	subgt	r7, r7, r3
 8049252:	eba9 0903 	subgt.w	r9, r9, r3
 8049256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8049258:	2b00      	cmp	r3, #0
 804925a:	dd17      	ble.n	804928c <_strtod_l+0x75c>
 804925c:	4631      	mov	r1, r6
 804925e:	461a      	mov	r2, r3
 8049260:	4620      	mov	r0, r4
 8049262:	f001 ff49 	bl	804b0f8 <__pow5mult>
 8049266:	4606      	mov	r6, r0
 8049268:	2800      	cmp	r0, #0
 804926a:	f43f aead 	beq.w	8048fc8 <_strtod_l+0x498>
 804926e:	4601      	mov	r1, r0
 8049270:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8049272:	4620      	mov	r0, r4
 8049274:	f001 fe9a 	bl	804afac <__multiply>
 8049278:	900f      	str	r0, [sp, #60]	; 0x3c
 804927a:	2800      	cmp	r0, #0
 804927c:	f43f aea4 	beq.w	8048fc8 <_strtod_l+0x498>
 8049280:	991e      	ldr	r1, [sp, #120]	; 0x78
 8049282:	4620      	mov	r0, r4
 8049284:	f001 fd76 	bl	804ad74 <_Bfree>
 8049288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 804928a:	931e      	str	r3, [sp, #120]	; 0x78
 804928c:	f1b8 0f00 	cmp.w	r8, #0
 8049290:	f300 8091 	bgt.w	80493b6 <_strtod_l+0x886>
 8049294:	9b08      	ldr	r3, [sp, #32]
 8049296:	2b00      	cmp	r3, #0
 8049298:	dd08      	ble.n	80492ac <_strtod_l+0x77c>
 804929a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 804929c:	9907      	ldr	r1, [sp, #28]
 804929e:	4620      	mov	r0, r4
 80492a0:	f001 ff2a 	bl	804b0f8 <__pow5mult>
 80492a4:	9007      	str	r0, [sp, #28]
 80492a6:	2800      	cmp	r0, #0
 80492a8:	f43f ae8e 	beq.w	8048fc8 <_strtod_l+0x498>
 80492ac:	2f00      	cmp	r7, #0
 80492ae:	dd08      	ble.n	80492c2 <_strtod_l+0x792>
 80492b0:	9907      	ldr	r1, [sp, #28]
 80492b2:	463a      	mov	r2, r7
 80492b4:	4620      	mov	r0, r4
 80492b6:	f001 ff79 	bl	804b1ac <__lshift>
 80492ba:	9007      	str	r0, [sp, #28]
 80492bc:	2800      	cmp	r0, #0
 80492be:	f43f ae83 	beq.w	8048fc8 <_strtod_l+0x498>
 80492c2:	f1b9 0f00 	cmp.w	r9, #0
 80492c6:	dd08      	ble.n	80492da <_strtod_l+0x7aa>
 80492c8:	4631      	mov	r1, r6
 80492ca:	464a      	mov	r2, r9
 80492cc:	4620      	mov	r0, r4
 80492ce:	f001 ff6d 	bl	804b1ac <__lshift>
 80492d2:	4606      	mov	r6, r0
 80492d4:	2800      	cmp	r0, #0
 80492d6:	f43f ae77 	beq.w	8048fc8 <_strtod_l+0x498>
 80492da:	9a07      	ldr	r2, [sp, #28]
 80492dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80492de:	4620      	mov	r0, r4
 80492e0:	f001 ffec 	bl	804b2bc <__mdiff>
 80492e4:	4605      	mov	r5, r0
 80492e6:	2800      	cmp	r0, #0
 80492e8:	f43f ae6e 	beq.w	8048fc8 <_strtod_l+0x498>
 80492ec:	68c3      	ldr	r3, [r0, #12]
 80492ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80492f0:	2300      	movs	r3, #0
 80492f2:	60c3      	str	r3, [r0, #12]
 80492f4:	4631      	mov	r1, r6
 80492f6:	f001 ffc5 	bl	804b284 <__mcmp>
 80492fa:	2800      	cmp	r0, #0
 80492fc:	da65      	bge.n	80493ca <_strtod_l+0x89a>
 80492fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8049300:	ea53 030a 	orrs.w	r3, r3, sl
 8049304:	f040 8087 	bne.w	8049416 <_strtod_l+0x8e6>
 8049308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 804930c:	2b00      	cmp	r3, #0
 804930e:	f040 8082 	bne.w	8049416 <_strtod_l+0x8e6>
 8049312:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8049316:	0d1b      	lsrs	r3, r3, #20
 8049318:	051b      	lsls	r3, r3, #20
 804931a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 804931e:	d97a      	bls.n	8049416 <_strtod_l+0x8e6>
 8049320:	696b      	ldr	r3, [r5, #20]
 8049322:	b913      	cbnz	r3, 804932a <_strtod_l+0x7fa>
 8049324:	692b      	ldr	r3, [r5, #16]
 8049326:	2b01      	cmp	r3, #1
 8049328:	dd75      	ble.n	8049416 <_strtod_l+0x8e6>
 804932a:	4629      	mov	r1, r5
 804932c:	2201      	movs	r2, #1
 804932e:	4620      	mov	r0, r4
 8049330:	f001 ff3c 	bl	804b1ac <__lshift>
 8049334:	4631      	mov	r1, r6
 8049336:	4605      	mov	r5, r0
 8049338:	f001 ffa4 	bl	804b284 <__mcmp>
 804933c:	2800      	cmp	r0, #0
 804933e:	dd6a      	ble.n	8049416 <_strtod_l+0x8e6>
 8049340:	9904      	ldr	r1, [sp, #16]
 8049342:	4a55      	ldr	r2, [pc, #340]	; (8049498 <_strtod_l+0x968>)
 8049344:	465b      	mov	r3, fp
 8049346:	2900      	cmp	r1, #0
 8049348:	f000 8085 	beq.w	8049456 <_strtod_l+0x926>
 804934c:	ea02 010b 	and.w	r1, r2, fp
 8049350:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8049354:	dc7f      	bgt.n	8049456 <_strtod_l+0x926>
 8049356:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 804935a:	f77f aeaa 	ble.w	80490b2 <_strtod_l+0x582>
 804935e:	4a4f      	ldr	r2, [pc, #316]	; (804949c <_strtod_l+0x96c>)
 8049360:	2300      	movs	r3, #0
 8049362:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8049366:	4650      	mov	r0, sl
 8049368:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 804936c:	4659      	mov	r1, fp
 804936e:	f7f7 f943 	bl	80405f8 <__aeabi_dmul>
 8049372:	460b      	mov	r3, r1
 8049374:	4303      	orrs	r3, r0
 8049376:	bf08      	it	eq
 8049378:	2322      	moveq	r3, #34	; 0x22
 804937a:	4682      	mov	sl, r0
 804937c:	468b      	mov	fp, r1
 804937e:	bf08      	it	eq
 8049380:	6023      	streq	r3, [r4, #0]
 8049382:	e62b      	b.n	8048fdc <_strtod_l+0x4ac>
 8049384:	f04f 32ff 	mov.w	r2, #4294967295
 8049388:	fa02 f303 	lsl.w	r3, r2, r3
 804938c:	ea03 0a0a 	and.w	sl, r3, sl
 8049390:	e6de      	b.n	8049150 <_strtod_l+0x620>
 8049392:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8049396:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 804939a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 804939e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80493a2:	fa01 f308 	lsl.w	r3, r1, r8
 80493a6:	930c      	str	r3, [sp, #48]	; 0x30
 80493a8:	9111      	str	r1, [sp, #68]	; 0x44
 80493aa:	e741      	b.n	8049230 <_strtod_l+0x700>
 80493ac:	2300      	movs	r3, #0
 80493ae:	930c      	str	r3, [sp, #48]	; 0x30
 80493b0:	2301      	movs	r3, #1
 80493b2:	9311      	str	r3, [sp, #68]	; 0x44
 80493b4:	e73c      	b.n	8049230 <_strtod_l+0x700>
 80493b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80493b8:	4642      	mov	r2, r8
 80493ba:	4620      	mov	r0, r4
 80493bc:	f001 fef6 	bl	804b1ac <__lshift>
 80493c0:	901e      	str	r0, [sp, #120]	; 0x78
 80493c2:	2800      	cmp	r0, #0
 80493c4:	f47f af66 	bne.w	8049294 <_strtod_l+0x764>
 80493c8:	e5fe      	b.n	8048fc8 <_strtod_l+0x498>
 80493ca:	465f      	mov	r7, fp
 80493cc:	d16e      	bne.n	80494ac <_strtod_l+0x97c>
 80493ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80493d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80493d4:	b342      	cbz	r2, 8049428 <_strtod_l+0x8f8>
 80493d6:	4a32      	ldr	r2, [pc, #200]	; (80494a0 <_strtod_l+0x970>)
 80493d8:	4293      	cmp	r3, r2
 80493da:	d128      	bne.n	804942e <_strtod_l+0x8fe>
 80493dc:	9b04      	ldr	r3, [sp, #16]
 80493de:	4650      	mov	r0, sl
 80493e0:	b1eb      	cbz	r3, 804941e <_strtod_l+0x8ee>
 80493e2:	4a2d      	ldr	r2, [pc, #180]	; (8049498 <_strtod_l+0x968>)
 80493e4:	403a      	ands	r2, r7
 80493e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80493ea:	f04f 31ff 	mov.w	r1, #4294967295
 80493ee:	d819      	bhi.n	8049424 <_strtod_l+0x8f4>
 80493f0:	0d12      	lsrs	r2, r2, #20
 80493f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80493f6:	fa01 f303 	lsl.w	r3, r1, r3
 80493fa:	4298      	cmp	r0, r3
 80493fc:	d117      	bne.n	804942e <_strtod_l+0x8fe>
 80493fe:	4b29      	ldr	r3, [pc, #164]	; (80494a4 <_strtod_l+0x974>)
 8049400:	429f      	cmp	r7, r3
 8049402:	d102      	bne.n	804940a <_strtod_l+0x8da>
 8049404:	3001      	adds	r0, #1
 8049406:	f43f addf 	beq.w	8048fc8 <_strtod_l+0x498>
 804940a:	4b23      	ldr	r3, [pc, #140]	; (8049498 <_strtod_l+0x968>)
 804940c:	403b      	ands	r3, r7
 804940e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8049412:	f04f 0a00 	mov.w	sl, #0
 8049416:	9b04      	ldr	r3, [sp, #16]
 8049418:	2b00      	cmp	r3, #0
 804941a:	d1a0      	bne.n	804935e <_strtod_l+0x82e>
 804941c:	e5de      	b.n	8048fdc <_strtod_l+0x4ac>
 804941e:	f04f 33ff 	mov.w	r3, #4294967295
 8049422:	e7ea      	b.n	80493fa <_strtod_l+0x8ca>
 8049424:	460b      	mov	r3, r1
 8049426:	e7e8      	b.n	80493fa <_strtod_l+0x8ca>
 8049428:	ea53 030a 	orrs.w	r3, r3, sl
 804942c:	d088      	beq.n	8049340 <_strtod_l+0x810>
 804942e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8049430:	b1db      	cbz	r3, 804946a <_strtod_l+0x93a>
 8049432:	423b      	tst	r3, r7
 8049434:	d0ef      	beq.n	8049416 <_strtod_l+0x8e6>
 8049436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8049438:	9a04      	ldr	r2, [sp, #16]
 804943a:	4650      	mov	r0, sl
 804943c:	4659      	mov	r1, fp
 804943e:	b1c3      	cbz	r3, 8049472 <_strtod_l+0x942>
 8049440:	f7ff fb5a 	bl	8048af8 <sulp>
 8049444:	4602      	mov	r2, r0
 8049446:	460b      	mov	r3, r1
 8049448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 804944c:	f7f6 ff1e 	bl	804028c <__adddf3>
 8049450:	4682      	mov	sl, r0
 8049452:	468b      	mov	fp, r1
 8049454:	e7df      	b.n	8049416 <_strtod_l+0x8e6>
 8049456:	4013      	ands	r3, r2
 8049458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 804945c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8049460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8049464:	f04f 3aff 	mov.w	sl, #4294967295
 8049468:	e7d5      	b.n	8049416 <_strtod_l+0x8e6>
 804946a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804946c:	ea13 0f0a 	tst.w	r3, sl
 8049470:	e7e0      	b.n	8049434 <_strtod_l+0x904>
 8049472:	f7ff fb41 	bl	8048af8 <sulp>
 8049476:	4602      	mov	r2, r0
 8049478:	460b      	mov	r3, r1
 804947a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 804947e:	f7f6 ff03 	bl	8040288 <__aeabi_dsub>
 8049482:	2200      	movs	r2, #0
 8049484:	2300      	movs	r3, #0
 8049486:	4682      	mov	sl, r0
 8049488:	468b      	mov	fp, r1
 804948a:	f7f7 fb1d 	bl	8040ac8 <__aeabi_dcmpeq>
 804948e:	2800      	cmp	r0, #0
 8049490:	d0c1      	beq.n	8049416 <_strtod_l+0x8e6>
 8049492:	e60e      	b.n	80490b2 <_strtod_l+0x582>
 8049494:	fffffc02 	.word	0xfffffc02
 8049498:	7ff00000 	.word	0x7ff00000
 804949c:	39500000 	.word	0x39500000
 80494a0:	000fffff 	.word	0x000fffff
 80494a4:	7fefffff 	.word	0x7fefffff
 80494a8:	0804d7d8 	.word	0x0804d7d8
 80494ac:	4631      	mov	r1, r6
 80494ae:	4628      	mov	r0, r5
 80494b0:	f002 f864 	bl	804b57c <__ratio>
 80494b4:	ec59 8b10 	vmov	r8, r9, d0
 80494b8:	ee10 0a10 	vmov	r0, s0
 80494bc:	2200      	movs	r2, #0
 80494be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80494c2:	4649      	mov	r1, r9
 80494c4:	f7f7 fb14 	bl	8040af0 <__aeabi_dcmple>
 80494c8:	2800      	cmp	r0, #0
 80494ca:	d07c      	beq.n	80495c6 <_strtod_l+0xa96>
 80494cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80494ce:	2b00      	cmp	r3, #0
 80494d0:	d04c      	beq.n	804956c <_strtod_l+0xa3c>
 80494d2:	4b95      	ldr	r3, [pc, #596]	; (8049728 <_strtod_l+0xbf8>)
 80494d4:	2200      	movs	r2, #0
 80494d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80494da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8049728 <_strtod_l+0xbf8>
 80494de:	f04f 0800 	mov.w	r8, #0
 80494e2:	4b92      	ldr	r3, [pc, #584]	; (804972c <_strtod_l+0xbfc>)
 80494e4:	403b      	ands	r3, r7
 80494e6:	9311      	str	r3, [sp, #68]	; 0x44
 80494e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80494ea:	4b91      	ldr	r3, [pc, #580]	; (8049730 <_strtod_l+0xc00>)
 80494ec:	429a      	cmp	r2, r3
 80494ee:	f040 80b2 	bne.w	8049656 <_strtod_l+0xb26>
 80494f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80494f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80494fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80494fe:	ec4b ab10 	vmov	d0, sl, fp
 8049502:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8049506:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 804950a:	f001 ff5f 	bl	804b3cc <__ulp>
 804950e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8049512:	ec53 2b10 	vmov	r2, r3, d0
 8049516:	f7f7 f86f 	bl	80405f8 <__aeabi_dmul>
 804951a:	4652      	mov	r2, sl
 804951c:	465b      	mov	r3, fp
 804951e:	f7f6 feb5 	bl	804028c <__adddf3>
 8049522:	460b      	mov	r3, r1
 8049524:	4981      	ldr	r1, [pc, #516]	; (804972c <_strtod_l+0xbfc>)
 8049526:	4a83      	ldr	r2, [pc, #524]	; (8049734 <_strtod_l+0xc04>)
 8049528:	4019      	ands	r1, r3
 804952a:	4291      	cmp	r1, r2
 804952c:	4682      	mov	sl, r0
 804952e:	d95e      	bls.n	80495ee <_strtod_l+0xabe>
 8049530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049532:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8049536:	4293      	cmp	r3, r2
 8049538:	d103      	bne.n	8049542 <_strtod_l+0xa12>
 804953a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804953c:	3301      	adds	r3, #1
 804953e:	f43f ad43 	beq.w	8048fc8 <_strtod_l+0x498>
 8049542:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8049740 <_strtod_l+0xc10>
 8049546:	f04f 3aff 	mov.w	sl, #4294967295
 804954a:	991e      	ldr	r1, [sp, #120]	; 0x78
 804954c:	4620      	mov	r0, r4
 804954e:	f001 fc11 	bl	804ad74 <_Bfree>
 8049552:	9907      	ldr	r1, [sp, #28]
 8049554:	4620      	mov	r0, r4
 8049556:	f001 fc0d 	bl	804ad74 <_Bfree>
 804955a:	4631      	mov	r1, r6
 804955c:	4620      	mov	r0, r4
 804955e:	f001 fc09 	bl	804ad74 <_Bfree>
 8049562:	4629      	mov	r1, r5
 8049564:	4620      	mov	r0, r4
 8049566:	f001 fc05 	bl	804ad74 <_Bfree>
 804956a:	e613      	b.n	8049194 <_strtod_l+0x664>
 804956c:	f1ba 0f00 	cmp.w	sl, #0
 8049570:	d11b      	bne.n	80495aa <_strtod_l+0xa7a>
 8049572:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8049576:	b9f3      	cbnz	r3, 80495b6 <_strtod_l+0xa86>
 8049578:	4b6b      	ldr	r3, [pc, #428]	; (8049728 <_strtod_l+0xbf8>)
 804957a:	2200      	movs	r2, #0
 804957c:	4640      	mov	r0, r8
 804957e:	4649      	mov	r1, r9
 8049580:	f7f7 faac 	bl	8040adc <__aeabi_dcmplt>
 8049584:	b9d0      	cbnz	r0, 80495bc <_strtod_l+0xa8c>
 8049586:	4640      	mov	r0, r8
 8049588:	4649      	mov	r1, r9
 804958a:	4b6b      	ldr	r3, [pc, #428]	; (8049738 <_strtod_l+0xc08>)
 804958c:	2200      	movs	r2, #0
 804958e:	f7f7 f833 	bl	80405f8 <__aeabi_dmul>
 8049592:	4680      	mov	r8, r0
 8049594:	4689      	mov	r9, r1
 8049596:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 804959a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 804959e:	931b      	str	r3, [sp, #108]	; 0x6c
 80495a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80495a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80495a8:	e79b      	b.n	80494e2 <_strtod_l+0x9b2>
 80495aa:	f1ba 0f01 	cmp.w	sl, #1
 80495ae:	d102      	bne.n	80495b6 <_strtod_l+0xa86>
 80495b0:	2f00      	cmp	r7, #0
 80495b2:	f43f ad7e 	beq.w	80490b2 <_strtod_l+0x582>
 80495b6:	4b61      	ldr	r3, [pc, #388]	; (804973c <_strtod_l+0xc0c>)
 80495b8:	2200      	movs	r2, #0
 80495ba:	e78c      	b.n	80494d6 <_strtod_l+0x9a6>
 80495bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8049738 <_strtod_l+0xc08>
 80495c0:	f04f 0800 	mov.w	r8, #0
 80495c4:	e7e7      	b.n	8049596 <_strtod_l+0xa66>
 80495c6:	4b5c      	ldr	r3, [pc, #368]	; (8049738 <_strtod_l+0xc08>)
 80495c8:	4640      	mov	r0, r8
 80495ca:	4649      	mov	r1, r9
 80495cc:	2200      	movs	r2, #0
 80495ce:	f7f7 f813 	bl	80405f8 <__aeabi_dmul>
 80495d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80495d4:	4680      	mov	r8, r0
 80495d6:	4689      	mov	r9, r1
 80495d8:	b933      	cbnz	r3, 80495e8 <_strtod_l+0xab8>
 80495da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80495de:	9012      	str	r0, [sp, #72]	; 0x48
 80495e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80495e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80495e6:	e7dd      	b.n	80495a4 <_strtod_l+0xa74>
 80495e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80495ec:	e7f9      	b.n	80495e2 <_strtod_l+0xab2>
 80495ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80495f2:	9b04      	ldr	r3, [sp, #16]
 80495f4:	2b00      	cmp	r3, #0
 80495f6:	d1a8      	bne.n	804954a <_strtod_l+0xa1a>
 80495f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80495fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80495fe:	0d1b      	lsrs	r3, r3, #20
 8049600:	051b      	lsls	r3, r3, #20
 8049602:	429a      	cmp	r2, r3
 8049604:	d1a1      	bne.n	804954a <_strtod_l+0xa1a>
 8049606:	4640      	mov	r0, r8
 8049608:	4649      	mov	r1, r9
 804960a:	f7f7 fb55 	bl	8040cb8 <__aeabi_d2lz>
 804960e:	f7f6 ffc5 	bl	804059c <__aeabi_l2d>
 8049612:	4602      	mov	r2, r0
 8049614:	460b      	mov	r3, r1
 8049616:	4640      	mov	r0, r8
 8049618:	4649      	mov	r1, r9
 804961a:	f7f6 fe35 	bl	8040288 <__aeabi_dsub>
 804961e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8049620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8049624:	ea43 030a 	orr.w	r3, r3, sl
 8049628:	4313      	orrs	r3, r2
 804962a:	4680      	mov	r8, r0
 804962c:	4689      	mov	r9, r1
 804962e:	d053      	beq.n	80496d8 <_strtod_l+0xba8>
 8049630:	a335      	add	r3, pc, #212	; (adr r3, 8049708 <_strtod_l+0xbd8>)
 8049632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049636:	f7f7 fa51 	bl	8040adc <__aeabi_dcmplt>
 804963a:	2800      	cmp	r0, #0
 804963c:	f47f acce 	bne.w	8048fdc <_strtod_l+0x4ac>
 8049640:	a333      	add	r3, pc, #204	; (adr r3, 8049710 <_strtod_l+0xbe0>)
 8049642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049646:	4640      	mov	r0, r8
 8049648:	4649      	mov	r1, r9
 804964a:	f7f7 fa65 	bl	8040b18 <__aeabi_dcmpgt>
 804964e:	2800      	cmp	r0, #0
 8049650:	f43f af7b 	beq.w	804954a <_strtod_l+0xa1a>
 8049654:	e4c2      	b.n	8048fdc <_strtod_l+0x4ac>
 8049656:	9b04      	ldr	r3, [sp, #16]
 8049658:	b333      	cbz	r3, 80496a8 <_strtod_l+0xb78>
 804965a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804965c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8049660:	d822      	bhi.n	80496a8 <_strtod_l+0xb78>
 8049662:	a32d      	add	r3, pc, #180	; (adr r3, 8049718 <_strtod_l+0xbe8>)
 8049664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049668:	4640      	mov	r0, r8
 804966a:	4649      	mov	r1, r9
 804966c:	f7f7 fa40 	bl	8040af0 <__aeabi_dcmple>
 8049670:	b1a0      	cbz	r0, 804969c <_strtod_l+0xb6c>
 8049672:	4649      	mov	r1, r9
 8049674:	4640      	mov	r0, r8
 8049676:	f7f7 fa97 	bl	8040ba8 <__aeabi_d2uiz>
 804967a:	2801      	cmp	r0, #1
 804967c:	bf38      	it	cc
 804967e:	2001      	movcc	r0, #1
 8049680:	f7f6 ff40 	bl	8040504 <__aeabi_ui2d>
 8049684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8049686:	4680      	mov	r8, r0
 8049688:	4689      	mov	r9, r1
 804968a:	bb13      	cbnz	r3, 80496d2 <_strtod_l+0xba2>
 804968c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8049690:	9014      	str	r0, [sp, #80]	; 0x50
 8049692:	9315      	str	r3, [sp, #84]	; 0x54
 8049694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8049698:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 804969c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804969e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80496a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80496a4:	1a9b      	subs	r3, r3, r2
 80496a6:	930d      	str	r3, [sp, #52]	; 0x34
 80496a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80496ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80496b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80496b4:	f001 fe8a 	bl	804b3cc <__ulp>
 80496b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80496bc:	ec53 2b10 	vmov	r2, r3, d0
 80496c0:	f7f6 ff9a 	bl	80405f8 <__aeabi_dmul>
 80496c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80496c8:	f7f6 fde0 	bl	804028c <__adddf3>
 80496cc:	4682      	mov	sl, r0
 80496ce:	468b      	mov	fp, r1
 80496d0:	e78f      	b.n	80495f2 <_strtod_l+0xac2>
 80496d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80496d6:	e7dd      	b.n	8049694 <_strtod_l+0xb64>
 80496d8:	a311      	add	r3, pc, #68	; (adr r3, 8049720 <_strtod_l+0xbf0>)
 80496da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80496de:	f7f7 f9fd 	bl	8040adc <__aeabi_dcmplt>
 80496e2:	e7b4      	b.n	804964e <_strtod_l+0xb1e>
 80496e4:	2300      	movs	r3, #0
 80496e6:	930e      	str	r3, [sp, #56]	; 0x38
 80496e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80496ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80496ec:	6013      	str	r3, [r2, #0]
 80496ee:	f7ff ba65 	b.w	8048bbc <_strtod_l+0x8c>
 80496f2:	2b65      	cmp	r3, #101	; 0x65
 80496f4:	f43f ab5d 	beq.w	8048db2 <_strtod_l+0x282>
 80496f8:	2b45      	cmp	r3, #69	; 0x45
 80496fa:	f43f ab5a 	beq.w	8048db2 <_strtod_l+0x282>
 80496fe:	2201      	movs	r2, #1
 8049700:	f7ff bb92 	b.w	8048e28 <_strtod_l+0x2f8>
 8049704:	f3af 8000 	nop.w
 8049708:	94a03595 	.word	0x94a03595
 804970c:	3fdfffff 	.word	0x3fdfffff
 8049710:	35afe535 	.word	0x35afe535
 8049714:	3fe00000 	.word	0x3fe00000
 8049718:	ffc00000 	.word	0xffc00000
 804971c:	41dfffff 	.word	0x41dfffff
 8049720:	94a03595 	.word	0x94a03595
 8049724:	3fcfffff 	.word	0x3fcfffff
 8049728:	3ff00000 	.word	0x3ff00000
 804972c:	7ff00000 	.word	0x7ff00000
 8049730:	7fe00000 	.word	0x7fe00000
 8049734:	7c9fffff 	.word	0x7c9fffff
 8049738:	3fe00000 	.word	0x3fe00000
 804973c:	bff00000 	.word	0xbff00000
 8049740:	7fefffff 	.word	0x7fefffff

08049744 <_strtod_r>:
 8049744:	4b01      	ldr	r3, [pc, #4]	; (804974c <_strtod_r+0x8>)
 8049746:	f7ff b9f3 	b.w	8048b30 <_strtod_l>
 804974a:	bf00      	nop
 804974c:	20000080 	.word	0x20000080

08049750 <_strtol_l.isra.0>:
 8049750:	2b01      	cmp	r3, #1
 8049752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049756:	d001      	beq.n	804975c <_strtol_l.isra.0+0xc>
 8049758:	2b24      	cmp	r3, #36	; 0x24
 804975a:	d906      	bls.n	804976a <_strtol_l.isra.0+0x1a>
 804975c:	f7fe faec 	bl	8047d38 <__errno>
 8049760:	2316      	movs	r3, #22
 8049762:	6003      	str	r3, [r0, #0]
 8049764:	2000      	movs	r0, #0
 8049766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804976a:	4f3a      	ldr	r7, [pc, #232]	; (8049854 <_strtol_l.isra.0+0x104>)
 804976c:	468e      	mov	lr, r1
 804976e:	4676      	mov	r6, lr
 8049770:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8049774:	5de5      	ldrb	r5, [r4, r7]
 8049776:	f015 0508 	ands.w	r5, r5, #8
 804977a:	d1f8      	bne.n	804976e <_strtol_l.isra.0+0x1e>
 804977c:	2c2d      	cmp	r4, #45	; 0x2d
 804977e:	d134      	bne.n	80497ea <_strtol_l.isra.0+0x9a>
 8049780:	f89e 4000 	ldrb.w	r4, [lr]
 8049784:	f04f 0801 	mov.w	r8, #1
 8049788:	f106 0e02 	add.w	lr, r6, #2
 804978c:	2b00      	cmp	r3, #0
 804978e:	d05c      	beq.n	804984a <_strtol_l.isra.0+0xfa>
 8049790:	2b10      	cmp	r3, #16
 8049792:	d10c      	bne.n	80497ae <_strtol_l.isra.0+0x5e>
 8049794:	2c30      	cmp	r4, #48	; 0x30
 8049796:	d10a      	bne.n	80497ae <_strtol_l.isra.0+0x5e>
 8049798:	f89e 4000 	ldrb.w	r4, [lr]
 804979c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80497a0:	2c58      	cmp	r4, #88	; 0x58
 80497a2:	d14d      	bne.n	8049840 <_strtol_l.isra.0+0xf0>
 80497a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80497a8:	2310      	movs	r3, #16
 80497aa:	f10e 0e02 	add.w	lr, lr, #2
 80497ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80497b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80497b6:	2600      	movs	r6, #0
 80497b8:	fbbc f9f3 	udiv	r9, ip, r3
 80497bc:	4635      	mov	r5, r6
 80497be:	fb03 ca19 	mls	sl, r3, r9, ip
 80497c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80497c6:	2f09      	cmp	r7, #9
 80497c8:	d818      	bhi.n	80497fc <_strtol_l.isra.0+0xac>
 80497ca:	463c      	mov	r4, r7
 80497cc:	42a3      	cmp	r3, r4
 80497ce:	dd24      	ble.n	804981a <_strtol_l.isra.0+0xca>
 80497d0:	2e00      	cmp	r6, #0
 80497d2:	db1f      	blt.n	8049814 <_strtol_l.isra.0+0xc4>
 80497d4:	45a9      	cmp	r9, r5
 80497d6:	d31d      	bcc.n	8049814 <_strtol_l.isra.0+0xc4>
 80497d8:	d101      	bne.n	80497de <_strtol_l.isra.0+0x8e>
 80497da:	45a2      	cmp	sl, r4
 80497dc:	db1a      	blt.n	8049814 <_strtol_l.isra.0+0xc4>
 80497de:	fb05 4503 	mla	r5, r5, r3, r4
 80497e2:	2601      	movs	r6, #1
 80497e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80497e8:	e7eb      	b.n	80497c2 <_strtol_l.isra.0+0x72>
 80497ea:	2c2b      	cmp	r4, #43	; 0x2b
 80497ec:	bf08      	it	eq
 80497ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80497f2:	46a8      	mov	r8, r5
 80497f4:	bf08      	it	eq
 80497f6:	f106 0e02 	addeq.w	lr, r6, #2
 80497fa:	e7c7      	b.n	804978c <_strtol_l.isra.0+0x3c>
 80497fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8049800:	2f19      	cmp	r7, #25
 8049802:	d801      	bhi.n	8049808 <_strtol_l.isra.0+0xb8>
 8049804:	3c37      	subs	r4, #55	; 0x37
 8049806:	e7e1      	b.n	80497cc <_strtol_l.isra.0+0x7c>
 8049808:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 804980c:	2f19      	cmp	r7, #25
 804980e:	d804      	bhi.n	804981a <_strtol_l.isra.0+0xca>
 8049810:	3c57      	subs	r4, #87	; 0x57
 8049812:	e7db      	b.n	80497cc <_strtol_l.isra.0+0x7c>
 8049814:	f04f 36ff 	mov.w	r6, #4294967295
 8049818:	e7e4      	b.n	80497e4 <_strtol_l.isra.0+0x94>
 804981a:	2e00      	cmp	r6, #0
 804981c:	da05      	bge.n	804982a <_strtol_l.isra.0+0xda>
 804981e:	2322      	movs	r3, #34	; 0x22
 8049820:	6003      	str	r3, [r0, #0]
 8049822:	4665      	mov	r5, ip
 8049824:	b942      	cbnz	r2, 8049838 <_strtol_l.isra.0+0xe8>
 8049826:	4628      	mov	r0, r5
 8049828:	e79d      	b.n	8049766 <_strtol_l.isra.0+0x16>
 804982a:	f1b8 0f00 	cmp.w	r8, #0
 804982e:	d000      	beq.n	8049832 <_strtol_l.isra.0+0xe2>
 8049830:	426d      	negs	r5, r5
 8049832:	2a00      	cmp	r2, #0
 8049834:	d0f7      	beq.n	8049826 <_strtol_l.isra.0+0xd6>
 8049836:	b10e      	cbz	r6, 804983c <_strtol_l.isra.0+0xec>
 8049838:	f10e 31ff 	add.w	r1, lr, #4294967295
 804983c:	6011      	str	r1, [r2, #0]
 804983e:	e7f2      	b.n	8049826 <_strtol_l.isra.0+0xd6>
 8049840:	2430      	movs	r4, #48	; 0x30
 8049842:	2b00      	cmp	r3, #0
 8049844:	d1b3      	bne.n	80497ae <_strtol_l.isra.0+0x5e>
 8049846:	2308      	movs	r3, #8
 8049848:	e7b1      	b.n	80497ae <_strtol_l.isra.0+0x5e>
 804984a:	2c30      	cmp	r4, #48	; 0x30
 804984c:	d0a4      	beq.n	8049798 <_strtol_l.isra.0+0x48>
 804984e:	230a      	movs	r3, #10
 8049850:	e7ad      	b.n	80497ae <_strtol_l.isra.0+0x5e>
 8049852:	bf00      	nop
 8049854:	0804d826 	.word	0x0804d826

08049858 <_strtol_r>:
 8049858:	f7ff bf7a 	b.w	8049750 <_strtol_l.isra.0>

0804985c <__utoa>:
 804985c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804985e:	4c1f      	ldr	r4, [pc, #124]	; (80498dc <__utoa+0x80>)
 8049860:	b08b      	sub	sp, #44	; 0x2c
 8049862:	4605      	mov	r5, r0
 8049864:	460b      	mov	r3, r1
 8049866:	466e      	mov	r6, sp
 8049868:	f104 0c20 	add.w	ip, r4, #32
 804986c:	6820      	ldr	r0, [r4, #0]
 804986e:	6861      	ldr	r1, [r4, #4]
 8049870:	4637      	mov	r7, r6
 8049872:	c703      	stmia	r7!, {r0, r1}
 8049874:	3408      	adds	r4, #8
 8049876:	4564      	cmp	r4, ip
 8049878:	463e      	mov	r6, r7
 804987a:	d1f7      	bne.n	804986c <__utoa+0x10>
 804987c:	7921      	ldrb	r1, [r4, #4]
 804987e:	7139      	strb	r1, [r7, #4]
 8049880:	1e91      	subs	r1, r2, #2
 8049882:	6820      	ldr	r0, [r4, #0]
 8049884:	6038      	str	r0, [r7, #0]
 8049886:	2922      	cmp	r1, #34	; 0x22
 8049888:	f04f 0100 	mov.w	r1, #0
 804988c:	d904      	bls.n	8049898 <__utoa+0x3c>
 804988e:	7019      	strb	r1, [r3, #0]
 8049890:	460b      	mov	r3, r1
 8049892:	4618      	mov	r0, r3
 8049894:	b00b      	add	sp, #44	; 0x2c
 8049896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8049898:	1e58      	subs	r0, r3, #1
 804989a:	4684      	mov	ip, r0
 804989c:	fbb5 f7f2 	udiv	r7, r5, r2
 80498a0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80498a4:	fb02 5617 	mls	r6, r2, r7, r5
 80498a8:	4476      	add	r6, lr
 80498aa:	460c      	mov	r4, r1
 80498ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80498b0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80498b4:	462e      	mov	r6, r5
 80498b6:	42b2      	cmp	r2, r6
 80498b8:	f101 0101 	add.w	r1, r1, #1
 80498bc:	463d      	mov	r5, r7
 80498be:	d9ed      	bls.n	804989c <__utoa+0x40>
 80498c0:	2200      	movs	r2, #0
 80498c2:	545a      	strb	r2, [r3, r1]
 80498c4:	1919      	adds	r1, r3, r4
 80498c6:	1aa5      	subs	r5, r4, r2
 80498c8:	42aa      	cmp	r2, r5
 80498ca:	dae2      	bge.n	8049892 <__utoa+0x36>
 80498cc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80498d0:	780e      	ldrb	r6, [r1, #0]
 80498d2:	7006      	strb	r6, [r0, #0]
 80498d4:	3201      	adds	r2, #1
 80498d6:	f801 5901 	strb.w	r5, [r1], #-1
 80498da:	e7f4      	b.n	80498c6 <__utoa+0x6a>
 80498dc:	0804d800 	.word	0x0804d800

080498e0 <utoa>:
 80498e0:	f7ff bfbc 	b.w	804985c <__utoa>

080498e4 <quorem>:
 80498e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80498e8:	6903      	ldr	r3, [r0, #16]
 80498ea:	690c      	ldr	r4, [r1, #16]
 80498ec:	42a3      	cmp	r3, r4
 80498ee:	4607      	mov	r7, r0
 80498f0:	f2c0 8081 	blt.w	80499f6 <quorem+0x112>
 80498f4:	3c01      	subs	r4, #1
 80498f6:	f101 0814 	add.w	r8, r1, #20
 80498fa:	f100 0514 	add.w	r5, r0, #20
 80498fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8049902:	9301      	str	r3, [sp, #4]
 8049904:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8049908:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 804990c:	3301      	adds	r3, #1
 804990e:	429a      	cmp	r2, r3
 8049910:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8049914:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8049918:	fbb2 f6f3 	udiv	r6, r2, r3
 804991c:	d331      	bcc.n	8049982 <quorem+0x9e>
 804991e:	f04f 0e00 	mov.w	lr, #0
 8049922:	4640      	mov	r0, r8
 8049924:	46ac      	mov	ip, r5
 8049926:	46f2      	mov	sl, lr
 8049928:	f850 2b04 	ldr.w	r2, [r0], #4
 804992c:	b293      	uxth	r3, r2
 804992e:	fb06 e303 	mla	r3, r6, r3, lr
 8049932:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8049936:	b29b      	uxth	r3, r3
 8049938:	ebaa 0303 	sub.w	r3, sl, r3
 804993c:	0c12      	lsrs	r2, r2, #16
 804993e:	f8dc a000 	ldr.w	sl, [ip]
 8049942:	fb06 e202 	mla	r2, r6, r2, lr
 8049946:	fa13 f38a 	uxtah	r3, r3, sl
 804994a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 804994e:	fa1f fa82 	uxth.w	sl, r2
 8049952:	f8dc 2000 	ldr.w	r2, [ip]
 8049956:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 804995a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 804995e:	b29b      	uxth	r3, r3
 8049960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8049964:	4581      	cmp	r9, r0
 8049966:	f84c 3b04 	str.w	r3, [ip], #4
 804996a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 804996e:	d2db      	bcs.n	8049928 <quorem+0x44>
 8049970:	f855 300b 	ldr.w	r3, [r5, fp]
 8049974:	b92b      	cbnz	r3, 8049982 <quorem+0x9e>
 8049976:	9b01      	ldr	r3, [sp, #4]
 8049978:	3b04      	subs	r3, #4
 804997a:	429d      	cmp	r5, r3
 804997c:	461a      	mov	r2, r3
 804997e:	d32e      	bcc.n	80499de <quorem+0xfa>
 8049980:	613c      	str	r4, [r7, #16]
 8049982:	4638      	mov	r0, r7
 8049984:	f001 fc7e 	bl	804b284 <__mcmp>
 8049988:	2800      	cmp	r0, #0
 804998a:	db24      	blt.n	80499d6 <quorem+0xf2>
 804998c:	3601      	adds	r6, #1
 804998e:	4628      	mov	r0, r5
 8049990:	f04f 0c00 	mov.w	ip, #0
 8049994:	f858 2b04 	ldr.w	r2, [r8], #4
 8049998:	f8d0 e000 	ldr.w	lr, [r0]
 804999c:	b293      	uxth	r3, r2
 804999e:	ebac 0303 	sub.w	r3, ip, r3
 80499a2:	0c12      	lsrs	r2, r2, #16
 80499a4:	fa13 f38e 	uxtah	r3, r3, lr
 80499a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80499ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80499b0:	b29b      	uxth	r3, r3
 80499b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80499b6:	45c1      	cmp	r9, r8
 80499b8:	f840 3b04 	str.w	r3, [r0], #4
 80499bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80499c0:	d2e8      	bcs.n	8049994 <quorem+0xb0>
 80499c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80499c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80499ca:	b922      	cbnz	r2, 80499d6 <quorem+0xf2>
 80499cc:	3b04      	subs	r3, #4
 80499ce:	429d      	cmp	r5, r3
 80499d0:	461a      	mov	r2, r3
 80499d2:	d30a      	bcc.n	80499ea <quorem+0x106>
 80499d4:	613c      	str	r4, [r7, #16]
 80499d6:	4630      	mov	r0, r6
 80499d8:	b003      	add	sp, #12
 80499da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80499de:	6812      	ldr	r2, [r2, #0]
 80499e0:	3b04      	subs	r3, #4
 80499e2:	2a00      	cmp	r2, #0
 80499e4:	d1cc      	bne.n	8049980 <quorem+0x9c>
 80499e6:	3c01      	subs	r4, #1
 80499e8:	e7c7      	b.n	804997a <quorem+0x96>
 80499ea:	6812      	ldr	r2, [r2, #0]
 80499ec:	3b04      	subs	r3, #4
 80499ee:	2a00      	cmp	r2, #0
 80499f0:	d1f0      	bne.n	80499d4 <quorem+0xf0>
 80499f2:	3c01      	subs	r4, #1
 80499f4:	e7eb      	b.n	80499ce <quorem+0xea>
 80499f6:	2000      	movs	r0, #0
 80499f8:	e7ee      	b.n	80499d8 <quorem+0xf4>
 80499fa:	0000      	movs	r0, r0
 80499fc:	0000      	movs	r0, r0
	...

08049a00 <_dtoa_r>:
 8049a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049a04:	ed2d 8b02 	vpush	{d8}
 8049a08:	ec57 6b10 	vmov	r6, r7, d0
 8049a0c:	b095      	sub	sp, #84	; 0x54
 8049a0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8049a10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8049a14:	9105      	str	r1, [sp, #20]
 8049a16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8049a1a:	4604      	mov	r4, r0
 8049a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8049a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8049a20:	b975      	cbnz	r5, 8049a40 <_dtoa_r+0x40>
 8049a22:	2010      	movs	r0, #16
 8049a24:	f001 f94c 	bl	804acc0 <malloc>
 8049a28:	4602      	mov	r2, r0
 8049a2a:	6260      	str	r0, [r4, #36]	; 0x24
 8049a2c:	b920      	cbnz	r0, 8049a38 <_dtoa_r+0x38>
 8049a2e:	4bb2      	ldr	r3, [pc, #712]	; (8049cf8 <_dtoa_r+0x2f8>)
 8049a30:	21ea      	movs	r1, #234	; 0xea
 8049a32:	48b2      	ldr	r0, [pc, #712]	; (8049cfc <_dtoa_r+0x2fc>)
 8049a34:	f002 f868 	bl	804bb08 <__assert_func>
 8049a38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8049a3c:	6005      	str	r5, [r0, #0]
 8049a3e:	60c5      	str	r5, [r0, #12]
 8049a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8049a42:	6819      	ldr	r1, [r3, #0]
 8049a44:	b151      	cbz	r1, 8049a5c <_dtoa_r+0x5c>
 8049a46:	685a      	ldr	r2, [r3, #4]
 8049a48:	604a      	str	r2, [r1, #4]
 8049a4a:	2301      	movs	r3, #1
 8049a4c:	4093      	lsls	r3, r2
 8049a4e:	608b      	str	r3, [r1, #8]
 8049a50:	4620      	mov	r0, r4
 8049a52:	f001 f98f 	bl	804ad74 <_Bfree>
 8049a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8049a58:	2200      	movs	r2, #0
 8049a5a:	601a      	str	r2, [r3, #0]
 8049a5c:	1e3b      	subs	r3, r7, #0
 8049a5e:	bfb9      	ittee	lt
 8049a60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8049a64:	9303      	strlt	r3, [sp, #12]
 8049a66:	2300      	movge	r3, #0
 8049a68:	f8c8 3000 	strge.w	r3, [r8]
 8049a6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8049a70:	4ba3      	ldr	r3, [pc, #652]	; (8049d00 <_dtoa_r+0x300>)
 8049a72:	bfbc      	itt	lt
 8049a74:	2201      	movlt	r2, #1
 8049a76:	f8c8 2000 	strlt.w	r2, [r8]
 8049a7a:	ea33 0309 	bics.w	r3, r3, r9
 8049a7e:	d11b      	bne.n	8049ab8 <_dtoa_r+0xb8>
 8049a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8049a82:	f242 730f 	movw	r3, #9999	; 0x270f
 8049a86:	6013      	str	r3, [r2, #0]
 8049a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8049a8c:	4333      	orrs	r3, r6
 8049a8e:	f000 857a 	beq.w	804a586 <_dtoa_r+0xb86>
 8049a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8049a94:	b963      	cbnz	r3, 8049ab0 <_dtoa_r+0xb0>
 8049a96:	4b9b      	ldr	r3, [pc, #620]	; (8049d04 <_dtoa_r+0x304>)
 8049a98:	e024      	b.n	8049ae4 <_dtoa_r+0xe4>
 8049a9a:	4b9b      	ldr	r3, [pc, #620]	; (8049d08 <_dtoa_r+0x308>)
 8049a9c:	9300      	str	r3, [sp, #0]
 8049a9e:	3308      	adds	r3, #8
 8049aa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8049aa2:	6013      	str	r3, [r2, #0]
 8049aa4:	9800      	ldr	r0, [sp, #0]
 8049aa6:	b015      	add	sp, #84	; 0x54
 8049aa8:	ecbd 8b02 	vpop	{d8}
 8049aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049ab0:	4b94      	ldr	r3, [pc, #592]	; (8049d04 <_dtoa_r+0x304>)
 8049ab2:	9300      	str	r3, [sp, #0]
 8049ab4:	3303      	adds	r3, #3
 8049ab6:	e7f3      	b.n	8049aa0 <_dtoa_r+0xa0>
 8049ab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8049abc:	2200      	movs	r2, #0
 8049abe:	ec51 0b17 	vmov	r0, r1, d7
 8049ac2:	2300      	movs	r3, #0
 8049ac4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8049ac8:	f7f6 fffe 	bl	8040ac8 <__aeabi_dcmpeq>
 8049acc:	4680      	mov	r8, r0
 8049ace:	b158      	cbz	r0, 8049ae8 <_dtoa_r+0xe8>
 8049ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8049ad2:	2301      	movs	r3, #1
 8049ad4:	6013      	str	r3, [r2, #0]
 8049ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8049ad8:	2b00      	cmp	r3, #0
 8049ada:	f000 8551 	beq.w	804a580 <_dtoa_r+0xb80>
 8049ade:	488b      	ldr	r0, [pc, #556]	; (8049d0c <_dtoa_r+0x30c>)
 8049ae0:	6018      	str	r0, [r3, #0]
 8049ae2:	1e43      	subs	r3, r0, #1
 8049ae4:	9300      	str	r3, [sp, #0]
 8049ae6:	e7dd      	b.n	8049aa4 <_dtoa_r+0xa4>
 8049ae8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8049aec:	aa12      	add	r2, sp, #72	; 0x48
 8049aee:	a913      	add	r1, sp, #76	; 0x4c
 8049af0:	4620      	mov	r0, r4
 8049af2:	f001 fce7 	bl	804b4c4 <__d2b>
 8049af6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8049afa:	4683      	mov	fp, r0
 8049afc:	2d00      	cmp	r5, #0
 8049afe:	d07c      	beq.n	8049bfa <_dtoa_r+0x1fa>
 8049b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8049b02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8049b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8049b0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8049b0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8049b12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8049b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8049b1a:	4b7d      	ldr	r3, [pc, #500]	; (8049d10 <_dtoa_r+0x310>)
 8049b1c:	2200      	movs	r2, #0
 8049b1e:	4630      	mov	r0, r6
 8049b20:	4639      	mov	r1, r7
 8049b22:	f7f6 fbb1 	bl	8040288 <__aeabi_dsub>
 8049b26:	a36e      	add	r3, pc, #440	; (adr r3, 8049ce0 <_dtoa_r+0x2e0>)
 8049b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b2c:	f7f6 fd64 	bl	80405f8 <__aeabi_dmul>
 8049b30:	a36d      	add	r3, pc, #436	; (adr r3, 8049ce8 <_dtoa_r+0x2e8>)
 8049b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b36:	f7f6 fba9 	bl	804028c <__adddf3>
 8049b3a:	4606      	mov	r6, r0
 8049b3c:	4628      	mov	r0, r5
 8049b3e:	460f      	mov	r7, r1
 8049b40:	f7f6 fcf0 	bl	8040524 <__aeabi_i2d>
 8049b44:	a36a      	add	r3, pc, #424	; (adr r3, 8049cf0 <_dtoa_r+0x2f0>)
 8049b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b4a:	f7f6 fd55 	bl	80405f8 <__aeabi_dmul>
 8049b4e:	4602      	mov	r2, r0
 8049b50:	460b      	mov	r3, r1
 8049b52:	4630      	mov	r0, r6
 8049b54:	4639      	mov	r1, r7
 8049b56:	f7f6 fb99 	bl	804028c <__adddf3>
 8049b5a:	4606      	mov	r6, r0
 8049b5c:	460f      	mov	r7, r1
 8049b5e:	f7f6 fffb 	bl	8040b58 <__aeabi_d2iz>
 8049b62:	2200      	movs	r2, #0
 8049b64:	4682      	mov	sl, r0
 8049b66:	2300      	movs	r3, #0
 8049b68:	4630      	mov	r0, r6
 8049b6a:	4639      	mov	r1, r7
 8049b6c:	f7f6 ffb6 	bl	8040adc <__aeabi_dcmplt>
 8049b70:	b148      	cbz	r0, 8049b86 <_dtoa_r+0x186>
 8049b72:	4650      	mov	r0, sl
 8049b74:	f7f6 fcd6 	bl	8040524 <__aeabi_i2d>
 8049b78:	4632      	mov	r2, r6
 8049b7a:	463b      	mov	r3, r7
 8049b7c:	f7f6 ffa4 	bl	8040ac8 <__aeabi_dcmpeq>
 8049b80:	b908      	cbnz	r0, 8049b86 <_dtoa_r+0x186>
 8049b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049b86:	f1ba 0f16 	cmp.w	sl, #22
 8049b8a:	d854      	bhi.n	8049c36 <_dtoa_r+0x236>
 8049b8c:	4b61      	ldr	r3, [pc, #388]	; (8049d14 <_dtoa_r+0x314>)
 8049b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8049b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8049b9a:	f7f6 ff9f 	bl	8040adc <__aeabi_dcmplt>
 8049b9e:	2800      	cmp	r0, #0
 8049ba0:	d04b      	beq.n	8049c3a <_dtoa_r+0x23a>
 8049ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8049ba6:	2300      	movs	r3, #0
 8049ba8:	930e      	str	r3, [sp, #56]	; 0x38
 8049baa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8049bac:	1b5d      	subs	r5, r3, r5
 8049bae:	1e6b      	subs	r3, r5, #1
 8049bb0:	9304      	str	r3, [sp, #16]
 8049bb2:	bf43      	ittte	mi
 8049bb4:	2300      	movmi	r3, #0
 8049bb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8049bba:	9304      	strmi	r3, [sp, #16]
 8049bbc:	f04f 0800 	movpl.w	r8, #0
 8049bc0:	f1ba 0f00 	cmp.w	sl, #0
 8049bc4:	db3b      	blt.n	8049c3e <_dtoa_r+0x23e>
 8049bc6:	9b04      	ldr	r3, [sp, #16]
 8049bc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8049bcc:	4453      	add	r3, sl
 8049bce:	9304      	str	r3, [sp, #16]
 8049bd0:	2300      	movs	r3, #0
 8049bd2:	9306      	str	r3, [sp, #24]
 8049bd4:	9b05      	ldr	r3, [sp, #20]
 8049bd6:	2b09      	cmp	r3, #9
 8049bd8:	d869      	bhi.n	8049cae <_dtoa_r+0x2ae>
 8049bda:	2b05      	cmp	r3, #5
 8049bdc:	bfc4      	itt	gt
 8049bde:	3b04      	subgt	r3, #4
 8049be0:	9305      	strgt	r3, [sp, #20]
 8049be2:	9b05      	ldr	r3, [sp, #20]
 8049be4:	f1a3 0302 	sub.w	r3, r3, #2
 8049be8:	bfcc      	ite	gt
 8049bea:	2500      	movgt	r5, #0
 8049bec:	2501      	movle	r5, #1
 8049bee:	2b03      	cmp	r3, #3
 8049bf0:	d869      	bhi.n	8049cc6 <_dtoa_r+0x2c6>
 8049bf2:	e8df f003 	tbb	[pc, r3]
 8049bf6:	4e2c      	.short	0x4e2c
 8049bf8:	5a4c      	.short	0x5a4c
 8049bfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8049bfe:	441d      	add	r5, r3
 8049c00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8049c04:	2b20      	cmp	r3, #32
 8049c06:	bfc1      	itttt	gt
 8049c08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8049c0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8049c10:	fa09 f303 	lslgt.w	r3, r9, r3
 8049c14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8049c18:	bfda      	itte	le
 8049c1a:	f1c3 0320 	rsble	r3, r3, #32
 8049c1e:	fa06 f003 	lslle.w	r0, r6, r3
 8049c22:	4318      	orrgt	r0, r3
 8049c24:	f7f6 fc6e 	bl	8040504 <__aeabi_ui2d>
 8049c28:	2301      	movs	r3, #1
 8049c2a:	4606      	mov	r6, r0
 8049c2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8049c30:	3d01      	subs	r5, #1
 8049c32:	9310      	str	r3, [sp, #64]	; 0x40
 8049c34:	e771      	b.n	8049b1a <_dtoa_r+0x11a>
 8049c36:	2301      	movs	r3, #1
 8049c38:	e7b6      	b.n	8049ba8 <_dtoa_r+0x1a8>
 8049c3a:	900e      	str	r0, [sp, #56]	; 0x38
 8049c3c:	e7b5      	b.n	8049baa <_dtoa_r+0x1aa>
 8049c3e:	f1ca 0300 	rsb	r3, sl, #0
 8049c42:	9306      	str	r3, [sp, #24]
 8049c44:	2300      	movs	r3, #0
 8049c46:	eba8 080a 	sub.w	r8, r8, sl
 8049c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8049c4c:	e7c2      	b.n	8049bd4 <_dtoa_r+0x1d4>
 8049c4e:	2300      	movs	r3, #0
 8049c50:	9308      	str	r3, [sp, #32]
 8049c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049c54:	2b00      	cmp	r3, #0
 8049c56:	dc39      	bgt.n	8049ccc <_dtoa_r+0x2cc>
 8049c58:	f04f 0901 	mov.w	r9, #1
 8049c5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8049c60:	464b      	mov	r3, r9
 8049c62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8049c66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8049c68:	2200      	movs	r2, #0
 8049c6a:	6042      	str	r2, [r0, #4]
 8049c6c:	2204      	movs	r2, #4
 8049c6e:	f102 0614 	add.w	r6, r2, #20
 8049c72:	429e      	cmp	r6, r3
 8049c74:	6841      	ldr	r1, [r0, #4]
 8049c76:	d92f      	bls.n	8049cd8 <_dtoa_r+0x2d8>
 8049c78:	4620      	mov	r0, r4
 8049c7a:	f001 f83b 	bl	804acf4 <_Balloc>
 8049c7e:	9000      	str	r0, [sp, #0]
 8049c80:	2800      	cmp	r0, #0
 8049c82:	d14b      	bne.n	8049d1c <_dtoa_r+0x31c>
 8049c84:	4b24      	ldr	r3, [pc, #144]	; (8049d18 <_dtoa_r+0x318>)
 8049c86:	4602      	mov	r2, r0
 8049c88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8049c8c:	e6d1      	b.n	8049a32 <_dtoa_r+0x32>
 8049c8e:	2301      	movs	r3, #1
 8049c90:	e7de      	b.n	8049c50 <_dtoa_r+0x250>
 8049c92:	2300      	movs	r3, #0
 8049c94:	9308      	str	r3, [sp, #32]
 8049c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049c98:	eb0a 0903 	add.w	r9, sl, r3
 8049c9c:	f109 0301 	add.w	r3, r9, #1
 8049ca0:	2b01      	cmp	r3, #1
 8049ca2:	9301      	str	r3, [sp, #4]
 8049ca4:	bfb8      	it	lt
 8049ca6:	2301      	movlt	r3, #1
 8049ca8:	e7dd      	b.n	8049c66 <_dtoa_r+0x266>
 8049caa:	2301      	movs	r3, #1
 8049cac:	e7f2      	b.n	8049c94 <_dtoa_r+0x294>
 8049cae:	2501      	movs	r5, #1
 8049cb0:	2300      	movs	r3, #0
 8049cb2:	9305      	str	r3, [sp, #20]
 8049cb4:	9508      	str	r5, [sp, #32]
 8049cb6:	f04f 39ff 	mov.w	r9, #4294967295
 8049cba:	2200      	movs	r2, #0
 8049cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8049cc0:	2312      	movs	r3, #18
 8049cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8049cc4:	e7cf      	b.n	8049c66 <_dtoa_r+0x266>
 8049cc6:	2301      	movs	r3, #1
 8049cc8:	9308      	str	r3, [sp, #32]
 8049cca:	e7f4      	b.n	8049cb6 <_dtoa_r+0x2b6>
 8049ccc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8049cd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8049cd4:	464b      	mov	r3, r9
 8049cd6:	e7c6      	b.n	8049c66 <_dtoa_r+0x266>
 8049cd8:	3101      	adds	r1, #1
 8049cda:	6041      	str	r1, [r0, #4]
 8049cdc:	0052      	lsls	r2, r2, #1
 8049cde:	e7c6      	b.n	8049c6e <_dtoa_r+0x26e>
 8049ce0:	636f4361 	.word	0x636f4361
 8049ce4:	3fd287a7 	.word	0x3fd287a7
 8049ce8:	8b60c8b3 	.word	0x8b60c8b3
 8049cec:	3fc68a28 	.word	0x3fc68a28
 8049cf0:	509f79fb 	.word	0x509f79fb
 8049cf4:	3fd34413 	.word	0x3fd34413
 8049cf8:	0804d933 	.word	0x0804d933
 8049cfc:	0804d94a 	.word	0x0804d94a
 8049d00:	7ff00000 	.word	0x7ff00000
 8049d04:	0804d92f 	.word	0x0804d92f
 8049d08:	0804d926 	.word	0x0804d926
 8049d0c:	0804d785 	.word	0x0804d785
 8049d10:	3ff80000 	.word	0x3ff80000
 8049d14:	0804dac0 	.word	0x0804dac0
 8049d18:	0804d9a9 	.word	0x0804d9a9
 8049d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8049d1e:	9a00      	ldr	r2, [sp, #0]
 8049d20:	601a      	str	r2, [r3, #0]
 8049d22:	9b01      	ldr	r3, [sp, #4]
 8049d24:	2b0e      	cmp	r3, #14
 8049d26:	f200 80ad 	bhi.w	8049e84 <_dtoa_r+0x484>
 8049d2a:	2d00      	cmp	r5, #0
 8049d2c:	f000 80aa 	beq.w	8049e84 <_dtoa_r+0x484>
 8049d30:	f1ba 0f00 	cmp.w	sl, #0
 8049d34:	dd36      	ble.n	8049da4 <_dtoa_r+0x3a4>
 8049d36:	4ac3      	ldr	r2, [pc, #780]	; (804a044 <_dtoa_r+0x644>)
 8049d38:	f00a 030f 	and.w	r3, sl, #15
 8049d3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8049d40:	ed93 7b00 	vldr	d7, [r3]
 8049d44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8049d48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8049d4c:	eeb0 8a47 	vmov.f32	s16, s14
 8049d50:	eef0 8a67 	vmov.f32	s17, s15
 8049d54:	d016      	beq.n	8049d84 <_dtoa_r+0x384>
 8049d56:	4bbc      	ldr	r3, [pc, #752]	; (804a048 <_dtoa_r+0x648>)
 8049d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8049d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8049d60:	f7f6 fd74 	bl	804084c <__aeabi_ddiv>
 8049d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049d68:	f007 070f 	and.w	r7, r7, #15
 8049d6c:	2503      	movs	r5, #3
 8049d6e:	4eb6      	ldr	r6, [pc, #728]	; (804a048 <_dtoa_r+0x648>)
 8049d70:	b957      	cbnz	r7, 8049d88 <_dtoa_r+0x388>
 8049d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8049d76:	ec53 2b18 	vmov	r2, r3, d8
 8049d7a:	f7f6 fd67 	bl	804084c <__aeabi_ddiv>
 8049d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049d82:	e029      	b.n	8049dd8 <_dtoa_r+0x3d8>
 8049d84:	2502      	movs	r5, #2
 8049d86:	e7f2      	b.n	8049d6e <_dtoa_r+0x36e>
 8049d88:	07f9      	lsls	r1, r7, #31
 8049d8a:	d508      	bpl.n	8049d9e <_dtoa_r+0x39e>
 8049d8c:	ec51 0b18 	vmov	r0, r1, d8
 8049d90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8049d94:	f7f6 fc30 	bl	80405f8 <__aeabi_dmul>
 8049d98:	ec41 0b18 	vmov	d8, r0, r1
 8049d9c:	3501      	adds	r5, #1
 8049d9e:	107f      	asrs	r7, r7, #1
 8049da0:	3608      	adds	r6, #8
 8049da2:	e7e5      	b.n	8049d70 <_dtoa_r+0x370>
 8049da4:	f000 80a6 	beq.w	8049ef4 <_dtoa_r+0x4f4>
 8049da8:	f1ca 0600 	rsb	r6, sl, #0
 8049dac:	4ba5      	ldr	r3, [pc, #660]	; (804a044 <_dtoa_r+0x644>)
 8049dae:	4fa6      	ldr	r7, [pc, #664]	; (804a048 <_dtoa_r+0x648>)
 8049db0:	f006 020f 	and.w	r2, r6, #15
 8049db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8049db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8049dbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8049dc0:	f7f6 fc1a 	bl	80405f8 <__aeabi_dmul>
 8049dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049dc8:	1136      	asrs	r6, r6, #4
 8049dca:	2300      	movs	r3, #0
 8049dcc:	2502      	movs	r5, #2
 8049dce:	2e00      	cmp	r6, #0
 8049dd0:	f040 8085 	bne.w	8049ede <_dtoa_r+0x4de>
 8049dd4:	2b00      	cmp	r3, #0
 8049dd6:	d1d2      	bne.n	8049d7e <_dtoa_r+0x37e>
 8049dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8049dda:	2b00      	cmp	r3, #0
 8049ddc:	f000 808c 	beq.w	8049ef8 <_dtoa_r+0x4f8>
 8049de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8049de4:	4b99      	ldr	r3, [pc, #612]	; (804a04c <_dtoa_r+0x64c>)
 8049de6:	2200      	movs	r2, #0
 8049de8:	4630      	mov	r0, r6
 8049dea:	4639      	mov	r1, r7
 8049dec:	f7f6 fe76 	bl	8040adc <__aeabi_dcmplt>
 8049df0:	2800      	cmp	r0, #0
 8049df2:	f000 8081 	beq.w	8049ef8 <_dtoa_r+0x4f8>
 8049df6:	9b01      	ldr	r3, [sp, #4]
 8049df8:	2b00      	cmp	r3, #0
 8049dfa:	d07d      	beq.n	8049ef8 <_dtoa_r+0x4f8>
 8049dfc:	f1b9 0f00 	cmp.w	r9, #0
 8049e00:	dd3c      	ble.n	8049e7c <_dtoa_r+0x47c>
 8049e02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8049e06:	9307      	str	r3, [sp, #28]
 8049e08:	2200      	movs	r2, #0
 8049e0a:	4b91      	ldr	r3, [pc, #580]	; (804a050 <_dtoa_r+0x650>)
 8049e0c:	4630      	mov	r0, r6
 8049e0e:	4639      	mov	r1, r7
 8049e10:	f7f6 fbf2 	bl	80405f8 <__aeabi_dmul>
 8049e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049e18:	3501      	adds	r5, #1
 8049e1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8049e1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8049e22:	4628      	mov	r0, r5
 8049e24:	f7f6 fb7e 	bl	8040524 <__aeabi_i2d>
 8049e28:	4632      	mov	r2, r6
 8049e2a:	463b      	mov	r3, r7
 8049e2c:	f7f6 fbe4 	bl	80405f8 <__aeabi_dmul>
 8049e30:	4b88      	ldr	r3, [pc, #544]	; (804a054 <_dtoa_r+0x654>)
 8049e32:	2200      	movs	r2, #0
 8049e34:	f7f6 fa2a 	bl	804028c <__adddf3>
 8049e38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8049e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8049e40:	9303      	str	r3, [sp, #12]
 8049e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8049e44:	2b00      	cmp	r3, #0
 8049e46:	d15c      	bne.n	8049f02 <_dtoa_r+0x502>
 8049e48:	4b83      	ldr	r3, [pc, #524]	; (804a058 <_dtoa_r+0x658>)
 8049e4a:	2200      	movs	r2, #0
 8049e4c:	4630      	mov	r0, r6
 8049e4e:	4639      	mov	r1, r7
 8049e50:	f7f6 fa1a 	bl	8040288 <__aeabi_dsub>
 8049e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8049e58:	4606      	mov	r6, r0
 8049e5a:	460f      	mov	r7, r1
 8049e5c:	f7f6 fe5c 	bl	8040b18 <__aeabi_dcmpgt>
 8049e60:	2800      	cmp	r0, #0
 8049e62:	f040 8296 	bne.w	804a392 <_dtoa_r+0x992>
 8049e66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8049e6a:	4630      	mov	r0, r6
 8049e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8049e70:	4639      	mov	r1, r7
 8049e72:	f7f6 fe33 	bl	8040adc <__aeabi_dcmplt>
 8049e76:	2800      	cmp	r0, #0
 8049e78:	f040 8288 	bne.w	804a38c <_dtoa_r+0x98c>
 8049e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8049e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8049e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8049e86:	2b00      	cmp	r3, #0
 8049e88:	f2c0 8158 	blt.w	804a13c <_dtoa_r+0x73c>
 8049e8c:	f1ba 0f0e 	cmp.w	sl, #14
 8049e90:	f300 8154 	bgt.w	804a13c <_dtoa_r+0x73c>
 8049e94:	4b6b      	ldr	r3, [pc, #428]	; (804a044 <_dtoa_r+0x644>)
 8049e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8049e9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8049e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8049ea0:	2b00      	cmp	r3, #0
 8049ea2:	f280 80e3 	bge.w	804a06c <_dtoa_r+0x66c>
 8049ea6:	9b01      	ldr	r3, [sp, #4]
 8049ea8:	2b00      	cmp	r3, #0
 8049eaa:	f300 80df 	bgt.w	804a06c <_dtoa_r+0x66c>
 8049eae:	f040 826d 	bne.w	804a38c <_dtoa_r+0x98c>
 8049eb2:	4b69      	ldr	r3, [pc, #420]	; (804a058 <_dtoa_r+0x658>)
 8049eb4:	2200      	movs	r2, #0
 8049eb6:	4640      	mov	r0, r8
 8049eb8:	4649      	mov	r1, r9
 8049eba:	f7f6 fb9d 	bl	80405f8 <__aeabi_dmul>
 8049ebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8049ec2:	f7f6 fe1f 	bl	8040b04 <__aeabi_dcmpge>
 8049ec6:	9e01      	ldr	r6, [sp, #4]
 8049ec8:	4637      	mov	r7, r6
 8049eca:	2800      	cmp	r0, #0
 8049ecc:	f040 8243 	bne.w	804a356 <_dtoa_r+0x956>
 8049ed0:	9d00      	ldr	r5, [sp, #0]
 8049ed2:	2331      	movs	r3, #49	; 0x31
 8049ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8049ed8:	f10a 0a01 	add.w	sl, sl, #1
 8049edc:	e23f      	b.n	804a35e <_dtoa_r+0x95e>
 8049ede:	07f2      	lsls	r2, r6, #31
 8049ee0:	d505      	bpl.n	8049eee <_dtoa_r+0x4ee>
 8049ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8049ee6:	f7f6 fb87 	bl	80405f8 <__aeabi_dmul>
 8049eea:	3501      	adds	r5, #1
 8049eec:	2301      	movs	r3, #1
 8049eee:	1076      	asrs	r6, r6, #1
 8049ef0:	3708      	adds	r7, #8
 8049ef2:	e76c      	b.n	8049dce <_dtoa_r+0x3ce>
 8049ef4:	2502      	movs	r5, #2
 8049ef6:	e76f      	b.n	8049dd8 <_dtoa_r+0x3d8>
 8049ef8:	9b01      	ldr	r3, [sp, #4]
 8049efa:	f8cd a01c 	str.w	sl, [sp, #28]
 8049efe:	930c      	str	r3, [sp, #48]	; 0x30
 8049f00:	e78d      	b.n	8049e1e <_dtoa_r+0x41e>
 8049f02:	9900      	ldr	r1, [sp, #0]
 8049f04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8049f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8049f08:	4b4e      	ldr	r3, [pc, #312]	; (804a044 <_dtoa_r+0x644>)
 8049f0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8049f0e:	4401      	add	r1, r0
 8049f10:	9102      	str	r1, [sp, #8]
 8049f12:	9908      	ldr	r1, [sp, #32]
 8049f14:	eeb0 8a47 	vmov.f32	s16, s14
 8049f18:	eef0 8a67 	vmov.f32	s17, s15
 8049f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8049f20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8049f24:	2900      	cmp	r1, #0
 8049f26:	d045      	beq.n	8049fb4 <_dtoa_r+0x5b4>
 8049f28:	494c      	ldr	r1, [pc, #304]	; (804a05c <_dtoa_r+0x65c>)
 8049f2a:	2000      	movs	r0, #0
 8049f2c:	f7f6 fc8e 	bl	804084c <__aeabi_ddiv>
 8049f30:	ec53 2b18 	vmov	r2, r3, d8
 8049f34:	f7f6 f9a8 	bl	8040288 <__aeabi_dsub>
 8049f38:	9d00      	ldr	r5, [sp, #0]
 8049f3a:	ec41 0b18 	vmov	d8, r0, r1
 8049f3e:	4639      	mov	r1, r7
 8049f40:	4630      	mov	r0, r6
 8049f42:	f7f6 fe09 	bl	8040b58 <__aeabi_d2iz>
 8049f46:	900c      	str	r0, [sp, #48]	; 0x30
 8049f48:	f7f6 faec 	bl	8040524 <__aeabi_i2d>
 8049f4c:	4602      	mov	r2, r0
 8049f4e:	460b      	mov	r3, r1
 8049f50:	4630      	mov	r0, r6
 8049f52:	4639      	mov	r1, r7
 8049f54:	f7f6 f998 	bl	8040288 <__aeabi_dsub>
 8049f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8049f5a:	3330      	adds	r3, #48	; 0x30
 8049f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8049f60:	ec53 2b18 	vmov	r2, r3, d8
 8049f64:	4606      	mov	r6, r0
 8049f66:	460f      	mov	r7, r1
 8049f68:	f7f6 fdb8 	bl	8040adc <__aeabi_dcmplt>
 8049f6c:	2800      	cmp	r0, #0
 8049f6e:	d165      	bne.n	804a03c <_dtoa_r+0x63c>
 8049f70:	4632      	mov	r2, r6
 8049f72:	463b      	mov	r3, r7
 8049f74:	4935      	ldr	r1, [pc, #212]	; (804a04c <_dtoa_r+0x64c>)
 8049f76:	2000      	movs	r0, #0
 8049f78:	f7f6 f986 	bl	8040288 <__aeabi_dsub>
 8049f7c:	ec53 2b18 	vmov	r2, r3, d8
 8049f80:	f7f6 fdac 	bl	8040adc <__aeabi_dcmplt>
 8049f84:	2800      	cmp	r0, #0
 8049f86:	f040 80b9 	bne.w	804a0fc <_dtoa_r+0x6fc>
 8049f8a:	9b02      	ldr	r3, [sp, #8]
 8049f8c:	429d      	cmp	r5, r3
 8049f8e:	f43f af75 	beq.w	8049e7c <_dtoa_r+0x47c>
 8049f92:	4b2f      	ldr	r3, [pc, #188]	; (804a050 <_dtoa_r+0x650>)
 8049f94:	ec51 0b18 	vmov	r0, r1, d8
 8049f98:	2200      	movs	r2, #0
 8049f9a:	f7f6 fb2d 	bl	80405f8 <__aeabi_dmul>
 8049f9e:	4b2c      	ldr	r3, [pc, #176]	; (804a050 <_dtoa_r+0x650>)
 8049fa0:	ec41 0b18 	vmov	d8, r0, r1
 8049fa4:	2200      	movs	r2, #0
 8049fa6:	4630      	mov	r0, r6
 8049fa8:	4639      	mov	r1, r7
 8049faa:	f7f6 fb25 	bl	80405f8 <__aeabi_dmul>
 8049fae:	4606      	mov	r6, r0
 8049fb0:	460f      	mov	r7, r1
 8049fb2:	e7c4      	b.n	8049f3e <_dtoa_r+0x53e>
 8049fb4:	ec51 0b17 	vmov	r0, r1, d7
 8049fb8:	f7f6 fb1e 	bl	80405f8 <__aeabi_dmul>
 8049fbc:	9b02      	ldr	r3, [sp, #8]
 8049fbe:	9d00      	ldr	r5, [sp, #0]
 8049fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8049fc2:	ec41 0b18 	vmov	d8, r0, r1
 8049fc6:	4639      	mov	r1, r7
 8049fc8:	4630      	mov	r0, r6
 8049fca:	f7f6 fdc5 	bl	8040b58 <__aeabi_d2iz>
 8049fce:	9011      	str	r0, [sp, #68]	; 0x44
 8049fd0:	f7f6 faa8 	bl	8040524 <__aeabi_i2d>
 8049fd4:	4602      	mov	r2, r0
 8049fd6:	460b      	mov	r3, r1
 8049fd8:	4630      	mov	r0, r6
 8049fda:	4639      	mov	r1, r7
 8049fdc:	f7f6 f954 	bl	8040288 <__aeabi_dsub>
 8049fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8049fe2:	3330      	adds	r3, #48	; 0x30
 8049fe4:	f805 3b01 	strb.w	r3, [r5], #1
 8049fe8:	9b02      	ldr	r3, [sp, #8]
 8049fea:	429d      	cmp	r5, r3
 8049fec:	4606      	mov	r6, r0
 8049fee:	460f      	mov	r7, r1
 8049ff0:	f04f 0200 	mov.w	r2, #0
 8049ff4:	d134      	bne.n	804a060 <_dtoa_r+0x660>
 8049ff6:	4b19      	ldr	r3, [pc, #100]	; (804a05c <_dtoa_r+0x65c>)
 8049ff8:	ec51 0b18 	vmov	r0, r1, d8
 8049ffc:	f7f6 f946 	bl	804028c <__adddf3>
 804a000:	4602      	mov	r2, r0
 804a002:	460b      	mov	r3, r1
 804a004:	4630      	mov	r0, r6
 804a006:	4639      	mov	r1, r7
 804a008:	f7f6 fd86 	bl	8040b18 <__aeabi_dcmpgt>
 804a00c:	2800      	cmp	r0, #0
 804a00e:	d175      	bne.n	804a0fc <_dtoa_r+0x6fc>
 804a010:	ec53 2b18 	vmov	r2, r3, d8
 804a014:	4911      	ldr	r1, [pc, #68]	; (804a05c <_dtoa_r+0x65c>)
 804a016:	2000      	movs	r0, #0
 804a018:	f7f6 f936 	bl	8040288 <__aeabi_dsub>
 804a01c:	4602      	mov	r2, r0
 804a01e:	460b      	mov	r3, r1
 804a020:	4630      	mov	r0, r6
 804a022:	4639      	mov	r1, r7
 804a024:	f7f6 fd5a 	bl	8040adc <__aeabi_dcmplt>
 804a028:	2800      	cmp	r0, #0
 804a02a:	f43f af27 	beq.w	8049e7c <_dtoa_r+0x47c>
 804a02e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804a030:	1e6b      	subs	r3, r5, #1
 804a032:	930c      	str	r3, [sp, #48]	; 0x30
 804a034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 804a038:	2b30      	cmp	r3, #48	; 0x30
 804a03a:	d0f8      	beq.n	804a02e <_dtoa_r+0x62e>
 804a03c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 804a040:	e04a      	b.n	804a0d8 <_dtoa_r+0x6d8>
 804a042:	bf00      	nop
 804a044:	0804dac0 	.word	0x0804dac0
 804a048:	0804da98 	.word	0x0804da98
 804a04c:	3ff00000 	.word	0x3ff00000
 804a050:	40240000 	.word	0x40240000
 804a054:	401c0000 	.word	0x401c0000
 804a058:	40140000 	.word	0x40140000
 804a05c:	3fe00000 	.word	0x3fe00000
 804a060:	4baf      	ldr	r3, [pc, #700]	; (804a320 <_dtoa_r+0x920>)
 804a062:	f7f6 fac9 	bl	80405f8 <__aeabi_dmul>
 804a066:	4606      	mov	r6, r0
 804a068:	460f      	mov	r7, r1
 804a06a:	e7ac      	b.n	8049fc6 <_dtoa_r+0x5c6>
 804a06c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 804a070:	9d00      	ldr	r5, [sp, #0]
 804a072:	4642      	mov	r2, r8
 804a074:	464b      	mov	r3, r9
 804a076:	4630      	mov	r0, r6
 804a078:	4639      	mov	r1, r7
 804a07a:	f7f6 fbe7 	bl	804084c <__aeabi_ddiv>
 804a07e:	f7f6 fd6b 	bl	8040b58 <__aeabi_d2iz>
 804a082:	9002      	str	r0, [sp, #8]
 804a084:	f7f6 fa4e 	bl	8040524 <__aeabi_i2d>
 804a088:	4642      	mov	r2, r8
 804a08a:	464b      	mov	r3, r9
 804a08c:	f7f6 fab4 	bl	80405f8 <__aeabi_dmul>
 804a090:	4602      	mov	r2, r0
 804a092:	460b      	mov	r3, r1
 804a094:	4630      	mov	r0, r6
 804a096:	4639      	mov	r1, r7
 804a098:	f7f6 f8f6 	bl	8040288 <__aeabi_dsub>
 804a09c:	9e02      	ldr	r6, [sp, #8]
 804a09e:	9f01      	ldr	r7, [sp, #4]
 804a0a0:	3630      	adds	r6, #48	; 0x30
 804a0a2:	f805 6b01 	strb.w	r6, [r5], #1
 804a0a6:	9e00      	ldr	r6, [sp, #0]
 804a0a8:	1bae      	subs	r6, r5, r6
 804a0aa:	42b7      	cmp	r7, r6
 804a0ac:	4602      	mov	r2, r0
 804a0ae:	460b      	mov	r3, r1
 804a0b0:	d137      	bne.n	804a122 <_dtoa_r+0x722>
 804a0b2:	f7f6 f8eb 	bl	804028c <__adddf3>
 804a0b6:	4642      	mov	r2, r8
 804a0b8:	464b      	mov	r3, r9
 804a0ba:	4606      	mov	r6, r0
 804a0bc:	460f      	mov	r7, r1
 804a0be:	f7f6 fd2b 	bl	8040b18 <__aeabi_dcmpgt>
 804a0c2:	b9c8      	cbnz	r0, 804a0f8 <_dtoa_r+0x6f8>
 804a0c4:	4642      	mov	r2, r8
 804a0c6:	464b      	mov	r3, r9
 804a0c8:	4630      	mov	r0, r6
 804a0ca:	4639      	mov	r1, r7
 804a0cc:	f7f6 fcfc 	bl	8040ac8 <__aeabi_dcmpeq>
 804a0d0:	b110      	cbz	r0, 804a0d8 <_dtoa_r+0x6d8>
 804a0d2:	9b02      	ldr	r3, [sp, #8]
 804a0d4:	07d9      	lsls	r1, r3, #31
 804a0d6:	d40f      	bmi.n	804a0f8 <_dtoa_r+0x6f8>
 804a0d8:	4620      	mov	r0, r4
 804a0da:	4659      	mov	r1, fp
 804a0dc:	f000 fe4a 	bl	804ad74 <_Bfree>
 804a0e0:	2300      	movs	r3, #0
 804a0e2:	702b      	strb	r3, [r5, #0]
 804a0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 804a0e6:	f10a 0001 	add.w	r0, sl, #1
 804a0ea:	6018      	str	r0, [r3, #0]
 804a0ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a0ee:	2b00      	cmp	r3, #0
 804a0f0:	f43f acd8 	beq.w	8049aa4 <_dtoa_r+0xa4>
 804a0f4:	601d      	str	r5, [r3, #0]
 804a0f6:	e4d5      	b.n	8049aa4 <_dtoa_r+0xa4>
 804a0f8:	f8cd a01c 	str.w	sl, [sp, #28]
 804a0fc:	462b      	mov	r3, r5
 804a0fe:	461d      	mov	r5, r3
 804a100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804a104:	2a39      	cmp	r2, #57	; 0x39
 804a106:	d108      	bne.n	804a11a <_dtoa_r+0x71a>
 804a108:	9a00      	ldr	r2, [sp, #0]
 804a10a:	429a      	cmp	r2, r3
 804a10c:	d1f7      	bne.n	804a0fe <_dtoa_r+0x6fe>
 804a10e:	9a07      	ldr	r2, [sp, #28]
 804a110:	9900      	ldr	r1, [sp, #0]
 804a112:	3201      	adds	r2, #1
 804a114:	9207      	str	r2, [sp, #28]
 804a116:	2230      	movs	r2, #48	; 0x30
 804a118:	700a      	strb	r2, [r1, #0]
 804a11a:	781a      	ldrb	r2, [r3, #0]
 804a11c:	3201      	adds	r2, #1
 804a11e:	701a      	strb	r2, [r3, #0]
 804a120:	e78c      	b.n	804a03c <_dtoa_r+0x63c>
 804a122:	4b7f      	ldr	r3, [pc, #508]	; (804a320 <_dtoa_r+0x920>)
 804a124:	2200      	movs	r2, #0
 804a126:	f7f6 fa67 	bl	80405f8 <__aeabi_dmul>
 804a12a:	2200      	movs	r2, #0
 804a12c:	2300      	movs	r3, #0
 804a12e:	4606      	mov	r6, r0
 804a130:	460f      	mov	r7, r1
 804a132:	f7f6 fcc9 	bl	8040ac8 <__aeabi_dcmpeq>
 804a136:	2800      	cmp	r0, #0
 804a138:	d09b      	beq.n	804a072 <_dtoa_r+0x672>
 804a13a:	e7cd      	b.n	804a0d8 <_dtoa_r+0x6d8>
 804a13c:	9a08      	ldr	r2, [sp, #32]
 804a13e:	2a00      	cmp	r2, #0
 804a140:	f000 80c4 	beq.w	804a2cc <_dtoa_r+0x8cc>
 804a144:	9a05      	ldr	r2, [sp, #20]
 804a146:	2a01      	cmp	r2, #1
 804a148:	f300 80a8 	bgt.w	804a29c <_dtoa_r+0x89c>
 804a14c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 804a14e:	2a00      	cmp	r2, #0
 804a150:	f000 80a0 	beq.w	804a294 <_dtoa_r+0x894>
 804a154:	f203 4333 	addw	r3, r3, #1075	; 0x433
 804a158:	9e06      	ldr	r6, [sp, #24]
 804a15a:	4645      	mov	r5, r8
 804a15c:	9a04      	ldr	r2, [sp, #16]
 804a15e:	2101      	movs	r1, #1
 804a160:	441a      	add	r2, r3
 804a162:	4620      	mov	r0, r4
 804a164:	4498      	add	r8, r3
 804a166:	9204      	str	r2, [sp, #16]
 804a168:	f000 ff0a 	bl	804af80 <__i2b>
 804a16c:	4607      	mov	r7, r0
 804a16e:	2d00      	cmp	r5, #0
 804a170:	dd0b      	ble.n	804a18a <_dtoa_r+0x78a>
 804a172:	9b04      	ldr	r3, [sp, #16]
 804a174:	2b00      	cmp	r3, #0
 804a176:	dd08      	ble.n	804a18a <_dtoa_r+0x78a>
 804a178:	42ab      	cmp	r3, r5
 804a17a:	9a04      	ldr	r2, [sp, #16]
 804a17c:	bfa8      	it	ge
 804a17e:	462b      	movge	r3, r5
 804a180:	eba8 0803 	sub.w	r8, r8, r3
 804a184:	1aed      	subs	r5, r5, r3
 804a186:	1ad3      	subs	r3, r2, r3
 804a188:	9304      	str	r3, [sp, #16]
 804a18a:	9b06      	ldr	r3, [sp, #24]
 804a18c:	b1fb      	cbz	r3, 804a1ce <_dtoa_r+0x7ce>
 804a18e:	9b08      	ldr	r3, [sp, #32]
 804a190:	2b00      	cmp	r3, #0
 804a192:	f000 809f 	beq.w	804a2d4 <_dtoa_r+0x8d4>
 804a196:	2e00      	cmp	r6, #0
 804a198:	dd11      	ble.n	804a1be <_dtoa_r+0x7be>
 804a19a:	4639      	mov	r1, r7
 804a19c:	4632      	mov	r2, r6
 804a19e:	4620      	mov	r0, r4
 804a1a0:	f000 ffaa 	bl	804b0f8 <__pow5mult>
 804a1a4:	465a      	mov	r2, fp
 804a1a6:	4601      	mov	r1, r0
 804a1a8:	4607      	mov	r7, r0
 804a1aa:	4620      	mov	r0, r4
 804a1ac:	f000 fefe 	bl	804afac <__multiply>
 804a1b0:	4659      	mov	r1, fp
 804a1b2:	9007      	str	r0, [sp, #28]
 804a1b4:	4620      	mov	r0, r4
 804a1b6:	f000 fddd 	bl	804ad74 <_Bfree>
 804a1ba:	9b07      	ldr	r3, [sp, #28]
 804a1bc:	469b      	mov	fp, r3
 804a1be:	9b06      	ldr	r3, [sp, #24]
 804a1c0:	1b9a      	subs	r2, r3, r6
 804a1c2:	d004      	beq.n	804a1ce <_dtoa_r+0x7ce>
 804a1c4:	4659      	mov	r1, fp
 804a1c6:	4620      	mov	r0, r4
 804a1c8:	f000 ff96 	bl	804b0f8 <__pow5mult>
 804a1cc:	4683      	mov	fp, r0
 804a1ce:	2101      	movs	r1, #1
 804a1d0:	4620      	mov	r0, r4
 804a1d2:	f000 fed5 	bl	804af80 <__i2b>
 804a1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804a1d8:	2b00      	cmp	r3, #0
 804a1da:	4606      	mov	r6, r0
 804a1dc:	dd7c      	ble.n	804a2d8 <_dtoa_r+0x8d8>
 804a1de:	461a      	mov	r2, r3
 804a1e0:	4601      	mov	r1, r0
 804a1e2:	4620      	mov	r0, r4
 804a1e4:	f000 ff88 	bl	804b0f8 <__pow5mult>
 804a1e8:	9b05      	ldr	r3, [sp, #20]
 804a1ea:	2b01      	cmp	r3, #1
 804a1ec:	4606      	mov	r6, r0
 804a1ee:	dd76      	ble.n	804a2de <_dtoa_r+0x8de>
 804a1f0:	2300      	movs	r3, #0
 804a1f2:	9306      	str	r3, [sp, #24]
 804a1f4:	6933      	ldr	r3, [r6, #16]
 804a1f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 804a1fa:	6918      	ldr	r0, [r3, #16]
 804a1fc:	f000 fe70 	bl	804aee0 <__hi0bits>
 804a200:	f1c0 0020 	rsb	r0, r0, #32
 804a204:	9b04      	ldr	r3, [sp, #16]
 804a206:	4418      	add	r0, r3
 804a208:	f010 001f 	ands.w	r0, r0, #31
 804a20c:	f000 8086 	beq.w	804a31c <_dtoa_r+0x91c>
 804a210:	f1c0 0320 	rsb	r3, r0, #32
 804a214:	2b04      	cmp	r3, #4
 804a216:	dd7f      	ble.n	804a318 <_dtoa_r+0x918>
 804a218:	f1c0 001c 	rsb	r0, r0, #28
 804a21c:	9b04      	ldr	r3, [sp, #16]
 804a21e:	4403      	add	r3, r0
 804a220:	4480      	add	r8, r0
 804a222:	4405      	add	r5, r0
 804a224:	9304      	str	r3, [sp, #16]
 804a226:	f1b8 0f00 	cmp.w	r8, #0
 804a22a:	dd05      	ble.n	804a238 <_dtoa_r+0x838>
 804a22c:	4659      	mov	r1, fp
 804a22e:	4642      	mov	r2, r8
 804a230:	4620      	mov	r0, r4
 804a232:	f000 ffbb 	bl	804b1ac <__lshift>
 804a236:	4683      	mov	fp, r0
 804a238:	9b04      	ldr	r3, [sp, #16]
 804a23a:	2b00      	cmp	r3, #0
 804a23c:	dd05      	ble.n	804a24a <_dtoa_r+0x84a>
 804a23e:	4631      	mov	r1, r6
 804a240:	461a      	mov	r2, r3
 804a242:	4620      	mov	r0, r4
 804a244:	f000 ffb2 	bl	804b1ac <__lshift>
 804a248:	4606      	mov	r6, r0
 804a24a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 804a24c:	2b00      	cmp	r3, #0
 804a24e:	d069      	beq.n	804a324 <_dtoa_r+0x924>
 804a250:	4631      	mov	r1, r6
 804a252:	4658      	mov	r0, fp
 804a254:	f001 f816 	bl	804b284 <__mcmp>
 804a258:	2800      	cmp	r0, #0
 804a25a:	da63      	bge.n	804a324 <_dtoa_r+0x924>
 804a25c:	2300      	movs	r3, #0
 804a25e:	4659      	mov	r1, fp
 804a260:	220a      	movs	r2, #10
 804a262:	4620      	mov	r0, r4
 804a264:	f000 fda8 	bl	804adb8 <__multadd>
 804a268:	9b08      	ldr	r3, [sp, #32]
 804a26a:	f10a 3aff 	add.w	sl, sl, #4294967295
 804a26e:	4683      	mov	fp, r0
 804a270:	2b00      	cmp	r3, #0
 804a272:	f000 818f 	beq.w	804a594 <_dtoa_r+0xb94>
 804a276:	4639      	mov	r1, r7
 804a278:	2300      	movs	r3, #0
 804a27a:	220a      	movs	r2, #10
 804a27c:	4620      	mov	r0, r4
 804a27e:	f000 fd9b 	bl	804adb8 <__multadd>
 804a282:	f1b9 0f00 	cmp.w	r9, #0
 804a286:	4607      	mov	r7, r0
 804a288:	f300 808e 	bgt.w	804a3a8 <_dtoa_r+0x9a8>
 804a28c:	9b05      	ldr	r3, [sp, #20]
 804a28e:	2b02      	cmp	r3, #2
 804a290:	dc50      	bgt.n	804a334 <_dtoa_r+0x934>
 804a292:	e089      	b.n	804a3a8 <_dtoa_r+0x9a8>
 804a294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 804a296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 804a29a:	e75d      	b.n	804a158 <_dtoa_r+0x758>
 804a29c:	9b01      	ldr	r3, [sp, #4]
 804a29e:	1e5e      	subs	r6, r3, #1
 804a2a0:	9b06      	ldr	r3, [sp, #24]
 804a2a2:	42b3      	cmp	r3, r6
 804a2a4:	bfbf      	itttt	lt
 804a2a6:	9b06      	ldrlt	r3, [sp, #24]
 804a2a8:	9606      	strlt	r6, [sp, #24]
 804a2aa:	1af2      	sublt	r2, r6, r3
 804a2ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 804a2ae:	bfb6      	itet	lt
 804a2b0:	189b      	addlt	r3, r3, r2
 804a2b2:	1b9e      	subge	r6, r3, r6
 804a2b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 804a2b6:	9b01      	ldr	r3, [sp, #4]
 804a2b8:	bfb8      	it	lt
 804a2ba:	2600      	movlt	r6, #0
 804a2bc:	2b00      	cmp	r3, #0
 804a2be:	bfb5      	itete	lt
 804a2c0:	eba8 0503 	sublt.w	r5, r8, r3
 804a2c4:	9b01      	ldrge	r3, [sp, #4]
 804a2c6:	2300      	movlt	r3, #0
 804a2c8:	4645      	movge	r5, r8
 804a2ca:	e747      	b.n	804a15c <_dtoa_r+0x75c>
 804a2cc:	9e06      	ldr	r6, [sp, #24]
 804a2ce:	9f08      	ldr	r7, [sp, #32]
 804a2d0:	4645      	mov	r5, r8
 804a2d2:	e74c      	b.n	804a16e <_dtoa_r+0x76e>
 804a2d4:	9a06      	ldr	r2, [sp, #24]
 804a2d6:	e775      	b.n	804a1c4 <_dtoa_r+0x7c4>
 804a2d8:	9b05      	ldr	r3, [sp, #20]
 804a2da:	2b01      	cmp	r3, #1
 804a2dc:	dc18      	bgt.n	804a310 <_dtoa_r+0x910>
 804a2de:	9b02      	ldr	r3, [sp, #8]
 804a2e0:	b9b3      	cbnz	r3, 804a310 <_dtoa_r+0x910>
 804a2e2:	9b03      	ldr	r3, [sp, #12]
 804a2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 804a2e8:	b9a3      	cbnz	r3, 804a314 <_dtoa_r+0x914>
 804a2ea:	9b03      	ldr	r3, [sp, #12]
 804a2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a2f0:	0d1b      	lsrs	r3, r3, #20
 804a2f2:	051b      	lsls	r3, r3, #20
 804a2f4:	b12b      	cbz	r3, 804a302 <_dtoa_r+0x902>
 804a2f6:	9b04      	ldr	r3, [sp, #16]
 804a2f8:	3301      	adds	r3, #1
 804a2fa:	9304      	str	r3, [sp, #16]
 804a2fc:	f108 0801 	add.w	r8, r8, #1
 804a300:	2301      	movs	r3, #1
 804a302:	9306      	str	r3, [sp, #24]
 804a304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 804a306:	2b00      	cmp	r3, #0
 804a308:	f47f af74 	bne.w	804a1f4 <_dtoa_r+0x7f4>
 804a30c:	2001      	movs	r0, #1
 804a30e:	e779      	b.n	804a204 <_dtoa_r+0x804>
 804a310:	2300      	movs	r3, #0
 804a312:	e7f6      	b.n	804a302 <_dtoa_r+0x902>
 804a314:	9b02      	ldr	r3, [sp, #8]
 804a316:	e7f4      	b.n	804a302 <_dtoa_r+0x902>
 804a318:	d085      	beq.n	804a226 <_dtoa_r+0x826>
 804a31a:	4618      	mov	r0, r3
 804a31c:	301c      	adds	r0, #28
 804a31e:	e77d      	b.n	804a21c <_dtoa_r+0x81c>
 804a320:	40240000 	.word	0x40240000
 804a324:	9b01      	ldr	r3, [sp, #4]
 804a326:	2b00      	cmp	r3, #0
 804a328:	dc38      	bgt.n	804a39c <_dtoa_r+0x99c>
 804a32a:	9b05      	ldr	r3, [sp, #20]
 804a32c:	2b02      	cmp	r3, #2
 804a32e:	dd35      	ble.n	804a39c <_dtoa_r+0x99c>
 804a330:	f8dd 9004 	ldr.w	r9, [sp, #4]
 804a334:	f1b9 0f00 	cmp.w	r9, #0
 804a338:	d10d      	bne.n	804a356 <_dtoa_r+0x956>
 804a33a:	4631      	mov	r1, r6
 804a33c:	464b      	mov	r3, r9
 804a33e:	2205      	movs	r2, #5
 804a340:	4620      	mov	r0, r4
 804a342:	f000 fd39 	bl	804adb8 <__multadd>
 804a346:	4601      	mov	r1, r0
 804a348:	4606      	mov	r6, r0
 804a34a:	4658      	mov	r0, fp
 804a34c:	f000 ff9a 	bl	804b284 <__mcmp>
 804a350:	2800      	cmp	r0, #0
 804a352:	f73f adbd 	bgt.w	8049ed0 <_dtoa_r+0x4d0>
 804a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a358:	9d00      	ldr	r5, [sp, #0]
 804a35a:	ea6f 0a03 	mvn.w	sl, r3
 804a35e:	f04f 0800 	mov.w	r8, #0
 804a362:	4631      	mov	r1, r6
 804a364:	4620      	mov	r0, r4
 804a366:	f000 fd05 	bl	804ad74 <_Bfree>
 804a36a:	2f00      	cmp	r7, #0
 804a36c:	f43f aeb4 	beq.w	804a0d8 <_dtoa_r+0x6d8>
 804a370:	f1b8 0f00 	cmp.w	r8, #0
 804a374:	d005      	beq.n	804a382 <_dtoa_r+0x982>
 804a376:	45b8      	cmp	r8, r7
 804a378:	d003      	beq.n	804a382 <_dtoa_r+0x982>
 804a37a:	4641      	mov	r1, r8
 804a37c:	4620      	mov	r0, r4
 804a37e:	f000 fcf9 	bl	804ad74 <_Bfree>
 804a382:	4639      	mov	r1, r7
 804a384:	4620      	mov	r0, r4
 804a386:	f000 fcf5 	bl	804ad74 <_Bfree>
 804a38a:	e6a5      	b.n	804a0d8 <_dtoa_r+0x6d8>
 804a38c:	2600      	movs	r6, #0
 804a38e:	4637      	mov	r7, r6
 804a390:	e7e1      	b.n	804a356 <_dtoa_r+0x956>
 804a392:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 804a394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 804a398:	4637      	mov	r7, r6
 804a39a:	e599      	b.n	8049ed0 <_dtoa_r+0x4d0>
 804a39c:	9b08      	ldr	r3, [sp, #32]
 804a39e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 804a3a2:	2b00      	cmp	r3, #0
 804a3a4:	f000 80fd 	beq.w	804a5a2 <_dtoa_r+0xba2>
 804a3a8:	2d00      	cmp	r5, #0
 804a3aa:	dd05      	ble.n	804a3b8 <_dtoa_r+0x9b8>
 804a3ac:	4639      	mov	r1, r7
 804a3ae:	462a      	mov	r2, r5
 804a3b0:	4620      	mov	r0, r4
 804a3b2:	f000 fefb 	bl	804b1ac <__lshift>
 804a3b6:	4607      	mov	r7, r0
 804a3b8:	9b06      	ldr	r3, [sp, #24]
 804a3ba:	2b00      	cmp	r3, #0
 804a3bc:	d05c      	beq.n	804a478 <_dtoa_r+0xa78>
 804a3be:	6879      	ldr	r1, [r7, #4]
 804a3c0:	4620      	mov	r0, r4
 804a3c2:	f000 fc97 	bl	804acf4 <_Balloc>
 804a3c6:	4605      	mov	r5, r0
 804a3c8:	b928      	cbnz	r0, 804a3d6 <_dtoa_r+0x9d6>
 804a3ca:	4b80      	ldr	r3, [pc, #512]	; (804a5cc <_dtoa_r+0xbcc>)
 804a3cc:	4602      	mov	r2, r0
 804a3ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 804a3d2:	f7ff bb2e 	b.w	8049a32 <_dtoa_r+0x32>
 804a3d6:	693a      	ldr	r2, [r7, #16]
 804a3d8:	3202      	adds	r2, #2
 804a3da:	0092      	lsls	r2, r2, #2
 804a3dc:	f107 010c 	add.w	r1, r7, #12
 804a3e0:	300c      	adds	r0, #12
 804a3e2:	f7fd fcd3 	bl	8047d8c <memcpy>
 804a3e6:	2201      	movs	r2, #1
 804a3e8:	4629      	mov	r1, r5
 804a3ea:	4620      	mov	r0, r4
 804a3ec:	f000 fede 	bl	804b1ac <__lshift>
 804a3f0:	9b00      	ldr	r3, [sp, #0]
 804a3f2:	3301      	adds	r3, #1
 804a3f4:	9301      	str	r3, [sp, #4]
 804a3f6:	9b00      	ldr	r3, [sp, #0]
 804a3f8:	444b      	add	r3, r9
 804a3fa:	9307      	str	r3, [sp, #28]
 804a3fc:	9b02      	ldr	r3, [sp, #8]
 804a3fe:	f003 0301 	and.w	r3, r3, #1
 804a402:	46b8      	mov	r8, r7
 804a404:	9306      	str	r3, [sp, #24]
 804a406:	4607      	mov	r7, r0
 804a408:	9b01      	ldr	r3, [sp, #4]
 804a40a:	4631      	mov	r1, r6
 804a40c:	3b01      	subs	r3, #1
 804a40e:	4658      	mov	r0, fp
 804a410:	9302      	str	r3, [sp, #8]
 804a412:	f7ff fa67 	bl	80498e4 <quorem>
 804a416:	4603      	mov	r3, r0
 804a418:	3330      	adds	r3, #48	; 0x30
 804a41a:	9004      	str	r0, [sp, #16]
 804a41c:	4641      	mov	r1, r8
 804a41e:	4658      	mov	r0, fp
 804a420:	9308      	str	r3, [sp, #32]
 804a422:	f000 ff2f 	bl	804b284 <__mcmp>
 804a426:	463a      	mov	r2, r7
 804a428:	4681      	mov	r9, r0
 804a42a:	4631      	mov	r1, r6
 804a42c:	4620      	mov	r0, r4
 804a42e:	f000 ff45 	bl	804b2bc <__mdiff>
 804a432:	68c2      	ldr	r2, [r0, #12]
 804a434:	9b08      	ldr	r3, [sp, #32]
 804a436:	4605      	mov	r5, r0
 804a438:	bb02      	cbnz	r2, 804a47c <_dtoa_r+0xa7c>
 804a43a:	4601      	mov	r1, r0
 804a43c:	4658      	mov	r0, fp
 804a43e:	f000 ff21 	bl	804b284 <__mcmp>
 804a442:	9b08      	ldr	r3, [sp, #32]
 804a444:	4602      	mov	r2, r0
 804a446:	4629      	mov	r1, r5
 804a448:	4620      	mov	r0, r4
 804a44a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 804a44e:	f000 fc91 	bl	804ad74 <_Bfree>
 804a452:	9b05      	ldr	r3, [sp, #20]
 804a454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804a456:	9d01      	ldr	r5, [sp, #4]
 804a458:	ea43 0102 	orr.w	r1, r3, r2
 804a45c:	9b06      	ldr	r3, [sp, #24]
 804a45e:	430b      	orrs	r3, r1
 804a460:	9b08      	ldr	r3, [sp, #32]
 804a462:	d10d      	bne.n	804a480 <_dtoa_r+0xa80>
 804a464:	2b39      	cmp	r3, #57	; 0x39
 804a466:	d029      	beq.n	804a4bc <_dtoa_r+0xabc>
 804a468:	f1b9 0f00 	cmp.w	r9, #0
 804a46c:	dd01      	ble.n	804a472 <_dtoa_r+0xa72>
 804a46e:	9b04      	ldr	r3, [sp, #16]
 804a470:	3331      	adds	r3, #49	; 0x31
 804a472:	9a02      	ldr	r2, [sp, #8]
 804a474:	7013      	strb	r3, [r2, #0]
 804a476:	e774      	b.n	804a362 <_dtoa_r+0x962>
 804a478:	4638      	mov	r0, r7
 804a47a:	e7b9      	b.n	804a3f0 <_dtoa_r+0x9f0>
 804a47c:	2201      	movs	r2, #1
 804a47e:	e7e2      	b.n	804a446 <_dtoa_r+0xa46>
 804a480:	f1b9 0f00 	cmp.w	r9, #0
 804a484:	db06      	blt.n	804a494 <_dtoa_r+0xa94>
 804a486:	9905      	ldr	r1, [sp, #20]
 804a488:	ea41 0909 	orr.w	r9, r1, r9
 804a48c:	9906      	ldr	r1, [sp, #24]
 804a48e:	ea59 0101 	orrs.w	r1, r9, r1
 804a492:	d120      	bne.n	804a4d6 <_dtoa_r+0xad6>
 804a494:	2a00      	cmp	r2, #0
 804a496:	ddec      	ble.n	804a472 <_dtoa_r+0xa72>
 804a498:	4659      	mov	r1, fp
 804a49a:	2201      	movs	r2, #1
 804a49c:	4620      	mov	r0, r4
 804a49e:	9301      	str	r3, [sp, #4]
 804a4a0:	f000 fe84 	bl	804b1ac <__lshift>
 804a4a4:	4631      	mov	r1, r6
 804a4a6:	4683      	mov	fp, r0
 804a4a8:	f000 feec 	bl	804b284 <__mcmp>
 804a4ac:	2800      	cmp	r0, #0
 804a4ae:	9b01      	ldr	r3, [sp, #4]
 804a4b0:	dc02      	bgt.n	804a4b8 <_dtoa_r+0xab8>
 804a4b2:	d1de      	bne.n	804a472 <_dtoa_r+0xa72>
 804a4b4:	07da      	lsls	r2, r3, #31
 804a4b6:	d5dc      	bpl.n	804a472 <_dtoa_r+0xa72>
 804a4b8:	2b39      	cmp	r3, #57	; 0x39
 804a4ba:	d1d8      	bne.n	804a46e <_dtoa_r+0xa6e>
 804a4bc:	9a02      	ldr	r2, [sp, #8]
 804a4be:	2339      	movs	r3, #57	; 0x39
 804a4c0:	7013      	strb	r3, [r2, #0]
 804a4c2:	462b      	mov	r3, r5
 804a4c4:	461d      	mov	r5, r3
 804a4c6:	3b01      	subs	r3, #1
 804a4c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 804a4cc:	2a39      	cmp	r2, #57	; 0x39
 804a4ce:	d050      	beq.n	804a572 <_dtoa_r+0xb72>
 804a4d0:	3201      	adds	r2, #1
 804a4d2:	701a      	strb	r2, [r3, #0]
 804a4d4:	e745      	b.n	804a362 <_dtoa_r+0x962>
 804a4d6:	2a00      	cmp	r2, #0
 804a4d8:	dd03      	ble.n	804a4e2 <_dtoa_r+0xae2>
 804a4da:	2b39      	cmp	r3, #57	; 0x39
 804a4dc:	d0ee      	beq.n	804a4bc <_dtoa_r+0xabc>
 804a4de:	3301      	adds	r3, #1
 804a4e0:	e7c7      	b.n	804a472 <_dtoa_r+0xa72>
 804a4e2:	9a01      	ldr	r2, [sp, #4]
 804a4e4:	9907      	ldr	r1, [sp, #28]
 804a4e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 804a4ea:	428a      	cmp	r2, r1
 804a4ec:	d02a      	beq.n	804a544 <_dtoa_r+0xb44>
 804a4ee:	4659      	mov	r1, fp
 804a4f0:	2300      	movs	r3, #0
 804a4f2:	220a      	movs	r2, #10
 804a4f4:	4620      	mov	r0, r4
 804a4f6:	f000 fc5f 	bl	804adb8 <__multadd>
 804a4fa:	45b8      	cmp	r8, r7
 804a4fc:	4683      	mov	fp, r0
 804a4fe:	f04f 0300 	mov.w	r3, #0
 804a502:	f04f 020a 	mov.w	r2, #10
 804a506:	4641      	mov	r1, r8
 804a508:	4620      	mov	r0, r4
 804a50a:	d107      	bne.n	804a51c <_dtoa_r+0xb1c>
 804a50c:	f000 fc54 	bl	804adb8 <__multadd>
 804a510:	4680      	mov	r8, r0
 804a512:	4607      	mov	r7, r0
 804a514:	9b01      	ldr	r3, [sp, #4]
 804a516:	3301      	adds	r3, #1
 804a518:	9301      	str	r3, [sp, #4]
 804a51a:	e775      	b.n	804a408 <_dtoa_r+0xa08>
 804a51c:	f000 fc4c 	bl	804adb8 <__multadd>
 804a520:	4639      	mov	r1, r7
 804a522:	4680      	mov	r8, r0
 804a524:	2300      	movs	r3, #0
 804a526:	220a      	movs	r2, #10
 804a528:	4620      	mov	r0, r4
 804a52a:	f000 fc45 	bl	804adb8 <__multadd>
 804a52e:	4607      	mov	r7, r0
 804a530:	e7f0      	b.n	804a514 <_dtoa_r+0xb14>
 804a532:	f1b9 0f00 	cmp.w	r9, #0
 804a536:	9a00      	ldr	r2, [sp, #0]
 804a538:	bfcc      	ite	gt
 804a53a:	464d      	movgt	r5, r9
 804a53c:	2501      	movle	r5, #1
 804a53e:	4415      	add	r5, r2
 804a540:	f04f 0800 	mov.w	r8, #0
 804a544:	4659      	mov	r1, fp
 804a546:	2201      	movs	r2, #1
 804a548:	4620      	mov	r0, r4
 804a54a:	9301      	str	r3, [sp, #4]
 804a54c:	f000 fe2e 	bl	804b1ac <__lshift>
 804a550:	4631      	mov	r1, r6
 804a552:	4683      	mov	fp, r0
 804a554:	f000 fe96 	bl	804b284 <__mcmp>
 804a558:	2800      	cmp	r0, #0
 804a55a:	dcb2      	bgt.n	804a4c2 <_dtoa_r+0xac2>
 804a55c:	d102      	bne.n	804a564 <_dtoa_r+0xb64>
 804a55e:	9b01      	ldr	r3, [sp, #4]
 804a560:	07db      	lsls	r3, r3, #31
 804a562:	d4ae      	bmi.n	804a4c2 <_dtoa_r+0xac2>
 804a564:	462b      	mov	r3, r5
 804a566:	461d      	mov	r5, r3
 804a568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 804a56c:	2a30      	cmp	r2, #48	; 0x30
 804a56e:	d0fa      	beq.n	804a566 <_dtoa_r+0xb66>
 804a570:	e6f7      	b.n	804a362 <_dtoa_r+0x962>
 804a572:	9a00      	ldr	r2, [sp, #0]
 804a574:	429a      	cmp	r2, r3
 804a576:	d1a5      	bne.n	804a4c4 <_dtoa_r+0xac4>
 804a578:	f10a 0a01 	add.w	sl, sl, #1
 804a57c:	2331      	movs	r3, #49	; 0x31
 804a57e:	e779      	b.n	804a474 <_dtoa_r+0xa74>
 804a580:	4b13      	ldr	r3, [pc, #76]	; (804a5d0 <_dtoa_r+0xbd0>)
 804a582:	f7ff baaf 	b.w	8049ae4 <_dtoa_r+0xe4>
 804a586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804a588:	2b00      	cmp	r3, #0
 804a58a:	f47f aa86 	bne.w	8049a9a <_dtoa_r+0x9a>
 804a58e:	4b11      	ldr	r3, [pc, #68]	; (804a5d4 <_dtoa_r+0xbd4>)
 804a590:	f7ff baa8 	b.w	8049ae4 <_dtoa_r+0xe4>
 804a594:	f1b9 0f00 	cmp.w	r9, #0
 804a598:	dc03      	bgt.n	804a5a2 <_dtoa_r+0xba2>
 804a59a:	9b05      	ldr	r3, [sp, #20]
 804a59c:	2b02      	cmp	r3, #2
 804a59e:	f73f aec9 	bgt.w	804a334 <_dtoa_r+0x934>
 804a5a2:	9d00      	ldr	r5, [sp, #0]
 804a5a4:	4631      	mov	r1, r6
 804a5a6:	4658      	mov	r0, fp
 804a5a8:	f7ff f99c 	bl	80498e4 <quorem>
 804a5ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 804a5b0:	f805 3b01 	strb.w	r3, [r5], #1
 804a5b4:	9a00      	ldr	r2, [sp, #0]
 804a5b6:	1aaa      	subs	r2, r5, r2
 804a5b8:	4591      	cmp	r9, r2
 804a5ba:	ddba      	ble.n	804a532 <_dtoa_r+0xb32>
 804a5bc:	4659      	mov	r1, fp
 804a5be:	2300      	movs	r3, #0
 804a5c0:	220a      	movs	r2, #10
 804a5c2:	4620      	mov	r0, r4
 804a5c4:	f000 fbf8 	bl	804adb8 <__multadd>
 804a5c8:	4683      	mov	fp, r0
 804a5ca:	e7eb      	b.n	804a5a4 <_dtoa_r+0xba4>
 804a5cc:	0804d9a9 	.word	0x0804d9a9
 804a5d0:	0804d784 	.word	0x0804d784
 804a5d4:	0804d926 	.word	0x0804d926

0804a5d8 <rshift>:
 804a5d8:	6903      	ldr	r3, [r0, #16]
 804a5da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 804a5de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804a5e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 804a5e6:	f100 0414 	add.w	r4, r0, #20
 804a5ea:	dd45      	ble.n	804a678 <rshift+0xa0>
 804a5ec:	f011 011f 	ands.w	r1, r1, #31
 804a5f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 804a5f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 804a5f8:	d10c      	bne.n	804a614 <rshift+0x3c>
 804a5fa:	f100 0710 	add.w	r7, r0, #16
 804a5fe:	4629      	mov	r1, r5
 804a600:	42b1      	cmp	r1, r6
 804a602:	d334      	bcc.n	804a66e <rshift+0x96>
 804a604:	1a9b      	subs	r3, r3, r2
 804a606:	009b      	lsls	r3, r3, #2
 804a608:	1eea      	subs	r2, r5, #3
 804a60a:	4296      	cmp	r6, r2
 804a60c:	bf38      	it	cc
 804a60e:	2300      	movcc	r3, #0
 804a610:	4423      	add	r3, r4
 804a612:	e015      	b.n	804a640 <rshift+0x68>
 804a614:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 804a618:	f1c1 0820 	rsb	r8, r1, #32
 804a61c:	40cf      	lsrs	r7, r1
 804a61e:	f105 0e04 	add.w	lr, r5, #4
 804a622:	46a1      	mov	r9, r4
 804a624:	4576      	cmp	r6, lr
 804a626:	46f4      	mov	ip, lr
 804a628:	d815      	bhi.n	804a656 <rshift+0x7e>
 804a62a:	1a9b      	subs	r3, r3, r2
 804a62c:	009a      	lsls	r2, r3, #2
 804a62e:	3a04      	subs	r2, #4
 804a630:	3501      	adds	r5, #1
 804a632:	42ae      	cmp	r6, r5
 804a634:	bf38      	it	cc
 804a636:	2200      	movcc	r2, #0
 804a638:	18a3      	adds	r3, r4, r2
 804a63a:	50a7      	str	r7, [r4, r2]
 804a63c:	b107      	cbz	r7, 804a640 <rshift+0x68>
 804a63e:	3304      	adds	r3, #4
 804a640:	1b1a      	subs	r2, r3, r4
 804a642:	42a3      	cmp	r3, r4
 804a644:	ea4f 02a2 	mov.w	r2, r2, asr #2
 804a648:	bf08      	it	eq
 804a64a:	2300      	moveq	r3, #0
 804a64c:	6102      	str	r2, [r0, #16]
 804a64e:	bf08      	it	eq
 804a650:	6143      	streq	r3, [r0, #20]
 804a652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804a656:	f8dc c000 	ldr.w	ip, [ip]
 804a65a:	fa0c fc08 	lsl.w	ip, ip, r8
 804a65e:	ea4c 0707 	orr.w	r7, ip, r7
 804a662:	f849 7b04 	str.w	r7, [r9], #4
 804a666:	f85e 7b04 	ldr.w	r7, [lr], #4
 804a66a:	40cf      	lsrs	r7, r1
 804a66c:	e7da      	b.n	804a624 <rshift+0x4c>
 804a66e:	f851 cb04 	ldr.w	ip, [r1], #4
 804a672:	f847 cf04 	str.w	ip, [r7, #4]!
 804a676:	e7c3      	b.n	804a600 <rshift+0x28>
 804a678:	4623      	mov	r3, r4
 804a67a:	e7e1      	b.n	804a640 <rshift+0x68>

0804a67c <__hexdig_fun>:
 804a67c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 804a680:	2b09      	cmp	r3, #9
 804a682:	d802      	bhi.n	804a68a <__hexdig_fun+0xe>
 804a684:	3820      	subs	r0, #32
 804a686:	b2c0      	uxtb	r0, r0
 804a688:	4770      	bx	lr
 804a68a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 804a68e:	2b05      	cmp	r3, #5
 804a690:	d801      	bhi.n	804a696 <__hexdig_fun+0x1a>
 804a692:	3847      	subs	r0, #71	; 0x47
 804a694:	e7f7      	b.n	804a686 <__hexdig_fun+0xa>
 804a696:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 804a69a:	2b05      	cmp	r3, #5
 804a69c:	d801      	bhi.n	804a6a2 <__hexdig_fun+0x26>
 804a69e:	3827      	subs	r0, #39	; 0x27
 804a6a0:	e7f1      	b.n	804a686 <__hexdig_fun+0xa>
 804a6a2:	2000      	movs	r0, #0
 804a6a4:	4770      	bx	lr
	...

0804a6a8 <__gethex>:
 804a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a6ac:	ed2d 8b02 	vpush	{d8}
 804a6b0:	b089      	sub	sp, #36	; 0x24
 804a6b2:	ee08 0a10 	vmov	s16, r0
 804a6b6:	9304      	str	r3, [sp, #16]
 804a6b8:	4bbc      	ldr	r3, [pc, #752]	; (804a9ac <__gethex+0x304>)
 804a6ba:	681b      	ldr	r3, [r3, #0]
 804a6bc:	9301      	str	r3, [sp, #4]
 804a6be:	4618      	mov	r0, r3
 804a6c0:	468b      	mov	fp, r1
 804a6c2:	4690      	mov	r8, r2
 804a6c4:	f7f5 fd84 	bl	80401d0 <strlen>
 804a6c8:	9b01      	ldr	r3, [sp, #4]
 804a6ca:	f8db 2000 	ldr.w	r2, [fp]
 804a6ce:	4403      	add	r3, r0
 804a6d0:	4682      	mov	sl, r0
 804a6d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 804a6d6:	9305      	str	r3, [sp, #20]
 804a6d8:	1c93      	adds	r3, r2, #2
 804a6da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 804a6de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 804a6e2:	32fe      	adds	r2, #254	; 0xfe
 804a6e4:	18d1      	adds	r1, r2, r3
 804a6e6:	461f      	mov	r7, r3
 804a6e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 804a6ec:	9100      	str	r1, [sp, #0]
 804a6ee:	2830      	cmp	r0, #48	; 0x30
 804a6f0:	d0f8      	beq.n	804a6e4 <__gethex+0x3c>
 804a6f2:	f7ff ffc3 	bl	804a67c <__hexdig_fun>
 804a6f6:	4604      	mov	r4, r0
 804a6f8:	2800      	cmp	r0, #0
 804a6fa:	d13a      	bne.n	804a772 <__gethex+0xca>
 804a6fc:	9901      	ldr	r1, [sp, #4]
 804a6fe:	4652      	mov	r2, sl
 804a700:	4638      	mov	r0, r7
 804a702:	f001 f9e1 	bl	804bac8 <strncmp>
 804a706:	4605      	mov	r5, r0
 804a708:	2800      	cmp	r0, #0
 804a70a:	d168      	bne.n	804a7de <__gethex+0x136>
 804a70c:	f817 000a 	ldrb.w	r0, [r7, sl]
 804a710:	eb07 060a 	add.w	r6, r7, sl
 804a714:	f7ff ffb2 	bl	804a67c <__hexdig_fun>
 804a718:	2800      	cmp	r0, #0
 804a71a:	d062      	beq.n	804a7e2 <__gethex+0x13a>
 804a71c:	4633      	mov	r3, r6
 804a71e:	7818      	ldrb	r0, [r3, #0]
 804a720:	2830      	cmp	r0, #48	; 0x30
 804a722:	461f      	mov	r7, r3
 804a724:	f103 0301 	add.w	r3, r3, #1
 804a728:	d0f9      	beq.n	804a71e <__gethex+0x76>
 804a72a:	f7ff ffa7 	bl	804a67c <__hexdig_fun>
 804a72e:	2301      	movs	r3, #1
 804a730:	fab0 f480 	clz	r4, r0
 804a734:	0964      	lsrs	r4, r4, #5
 804a736:	4635      	mov	r5, r6
 804a738:	9300      	str	r3, [sp, #0]
 804a73a:	463a      	mov	r2, r7
 804a73c:	4616      	mov	r6, r2
 804a73e:	3201      	adds	r2, #1
 804a740:	7830      	ldrb	r0, [r6, #0]
 804a742:	f7ff ff9b 	bl	804a67c <__hexdig_fun>
 804a746:	2800      	cmp	r0, #0
 804a748:	d1f8      	bne.n	804a73c <__gethex+0x94>
 804a74a:	9901      	ldr	r1, [sp, #4]
 804a74c:	4652      	mov	r2, sl
 804a74e:	4630      	mov	r0, r6
 804a750:	f001 f9ba 	bl	804bac8 <strncmp>
 804a754:	b980      	cbnz	r0, 804a778 <__gethex+0xd0>
 804a756:	b94d      	cbnz	r5, 804a76c <__gethex+0xc4>
 804a758:	eb06 050a 	add.w	r5, r6, sl
 804a75c:	462a      	mov	r2, r5
 804a75e:	4616      	mov	r6, r2
 804a760:	3201      	adds	r2, #1
 804a762:	7830      	ldrb	r0, [r6, #0]
 804a764:	f7ff ff8a 	bl	804a67c <__hexdig_fun>
 804a768:	2800      	cmp	r0, #0
 804a76a:	d1f8      	bne.n	804a75e <__gethex+0xb6>
 804a76c:	1bad      	subs	r5, r5, r6
 804a76e:	00ad      	lsls	r5, r5, #2
 804a770:	e004      	b.n	804a77c <__gethex+0xd4>
 804a772:	2400      	movs	r4, #0
 804a774:	4625      	mov	r5, r4
 804a776:	e7e0      	b.n	804a73a <__gethex+0x92>
 804a778:	2d00      	cmp	r5, #0
 804a77a:	d1f7      	bne.n	804a76c <__gethex+0xc4>
 804a77c:	7833      	ldrb	r3, [r6, #0]
 804a77e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 804a782:	2b50      	cmp	r3, #80	; 0x50
 804a784:	d13b      	bne.n	804a7fe <__gethex+0x156>
 804a786:	7873      	ldrb	r3, [r6, #1]
 804a788:	2b2b      	cmp	r3, #43	; 0x2b
 804a78a:	d02c      	beq.n	804a7e6 <__gethex+0x13e>
 804a78c:	2b2d      	cmp	r3, #45	; 0x2d
 804a78e:	d02e      	beq.n	804a7ee <__gethex+0x146>
 804a790:	1c71      	adds	r1, r6, #1
 804a792:	f04f 0900 	mov.w	r9, #0
 804a796:	7808      	ldrb	r0, [r1, #0]
 804a798:	f7ff ff70 	bl	804a67c <__hexdig_fun>
 804a79c:	1e43      	subs	r3, r0, #1
 804a79e:	b2db      	uxtb	r3, r3
 804a7a0:	2b18      	cmp	r3, #24
 804a7a2:	d82c      	bhi.n	804a7fe <__gethex+0x156>
 804a7a4:	f1a0 0210 	sub.w	r2, r0, #16
 804a7a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 804a7ac:	f7ff ff66 	bl	804a67c <__hexdig_fun>
 804a7b0:	1e43      	subs	r3, r0, #1
 804a7b2:	b2db      	uxtb	r3, r3
 804a7b4:	2b18      	cmp	r3, #24
 804a7b6:	d91d      	bls.n	804a7f4 <__gethex+0x14c>
 804a7b8:	f1b9 0f00 	cmp.w	r9, #0
 804a7bc:	d000      	beq.n	804a7c0 <__gethex+0x118>
 804a7be:	4252      	negs	r2, r2
 804a7c0:	4415      	add	r5, r2
 804a7c2:	f8cb 1000 	str.w	r1, [fp]
 804a7c6:	b1e4      	cbz	r4, 804a802 <__gethex+0x15a>
 804a7c8:	9b00      	ldr	r3, [sp, #0]
 804a7ca:	2b00      	cmp	r3, #0
 804a7cc:	bf14      	ite	ne
 804a7ce:	2700      	movne	r7, #0
 804a7d0:	2706      	moveq	r7, #6
 804a7d2:	4638      	mov	r0, r7
 804a7d4:	b009      	add	sp, #36	; 0x24
 804a7d6:	ecbd 8b02 	vpop	{d8}
 804a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a7de:	463e      	mov	r6, r7
 804a7e0:	4625      	mov	r5, r4
 804a7e2:	2401      	movs	r4, #1
 804a7e4:	e7ca      	b.n	804a77c <__gethex+0xd4>
 804a7e6:	f04f 0900 	mov.w	r9, #0
 804a7ea:	1cb1      	adds	r1, r6, #2
 804a7ec:	e7d3      	b.n	804a796 <__gethex+0xee>
 804a7ee:	f04f 0901 	mov.w	r9, #1
 804a7f2:	e7fa      	b.n	804a7ea <__gethex+0x142>
 804a7f4:	230a      	movs	r3, #10
 804a7f6:	fb03 0202 	mla	r2, r3, r2, r0
 804a7fa:	3a10      	subs	r2, #16
 804a7fc:	e7d4      	b.n	804a7a8 <__gethex+0x100>
 804a7fe:	4631      	mov	r1, r6
 804a800:	e7df      	b.n	804a7c2 <__gethex+0x11a>
 804a802:	1bf3      	subs	r3, r6, r7
 804a804:	3b01      	subs	r3, #1
 804a806:	4621      	mov	r1, r4
 804a808:	2b07      	cmp	r3, #7
 804a80a:	dc0b      	bgt.n	804a824 <__gethex+0x17c>
 804a80c:	ee18 0a10 	vmov	r0, s16
 804a810:	f000 fa70 	bl	804acf4 <_Balloc>
 804a814:	4604      	mov	r4, r0
 804a816:	b940      	cbnz	r0, 804a82a <__gethex+0x182>
 804a818:	4b65      	ldr	r3, [pc, #404]	; (804a9b0 <__gethex+0x308>)
 804a81a:	4602      	mov	r2, r0
 804a81c:	21de      	movs	r1, #222	; 0xde
 804a81e:	4865      	ldr	r0, [pc, #404]	; (804a9b4 <__gethex+0x30c>)
 804a820:	f001 f972 	bl	804bb08 <__assert_func>
 804a824:	3101      	adds	r1, #1
 804a826:	105b      	asrs	r3, r3, #1
 804a828:	e7ee      	b.n	804a808 <__gethex+0x160>
 804a82a:	f100 0914 	add.w	r9, r0, #20
 804a82e:	f04f 0b00 	mov.w	fp, #0
 804a832:	f1ca 0301 	rsb	r3, sl, #1
 804a836:	f8cd 9008 	str.w	r9, [sp, #8]
 804a83a:	f8cd b000 	str.w	fp, [sp]
 804a83e:	9306      	str	r3, [sp, #24]
 804a840:	42b7      	cmp	r7, r6
 804a842:	d340      	bcc.n	804a8c6 <__gethex+0x21e>
 804a844:	9802      	ldr	r0, [sp, #8]
 804a846:	9b00      	ldr	r3, [sp, #0]
 804a848:	f840 3b04 	str.w	r3, [r0], #4
 804a84c:	eba0 0009 	sub.w	r0, r0, r9
 804a850:	1080      	asrs	r0, r0, #2
 804a852:	0146      	lsls	r6, r0, #5
 804a854:	6120      	str	r0, [r4, #16]
 804a856:	4618      	mov	r0, r3
 804a858:	f000 fb42 	bl	804aee0 <__hi0bits>
 804a85c:	1a30      	subs	r0, r6, r0
 804a85e:	f8d8 6000 	ldr.w	r6, [r8]
 804a862:	42b0      	cmp	r0, r6
 804a864:	dd63      	ble.n	804a92e <__gethex+0x286>
 804a866:	1b87      	subs	r7, r0, r6
 804a868:	4639      	mov	r1, r7
 804a86a:	4620      	mov	r0, r4
 804a86c:	f000 fedc 	bl	804b628 <__any_on>
 804a870:	4682      	mov	sl, r0
 804a872:	b1a8      	cbz	r0, 804a8a0 <__gethex+0x1f8>
 804a874:	1e7b      	subs	r3, r7, #1
 804a876:	1159      	asrs	r1, r3, #5
 804a878:	f003 021f 	and.w	r2, r3, #31
 804a87c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 804a880:	f04f 0a01 	mov.w	sl, #1
 804a884:	fa0a f202 	lsl.w	r2, sl, r2
 804a888:	420a      	tst	r2, r1
 804a88a:	d009      	beq.n	804a8a0 <__gethex+0x1f8>
 804a88c:	4553      	cmp	r3, sl
 804a88e:	dd05      	ble.n	804a89c <__gethex+0x1f4>
 804a890:	1eb9      	subs	r1, r7, #2
 804a892:	4620      	mov	r0, r4
 804a894:	f000 fec8 	bl	804b628 <__any_on>
 804a898:	2800      	cmp	r0, #0
 804a89a:	d145      	bne.n	804a928 <__gethex+0x280>
 804a89c:	f04f 0a02 	mov.w	sl, #2
 804a8a0:	4639      	mov	r1, r7
 804a8a2:	4620      	mov	r0, r4
 804a8a4:	f7ff fe98 	bl	804a5d8 <rshift>
 804a8a8:	443d      	add	r5, r7
 804a8aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804a8ae:	42ab      	cmp	r3, r5
 804a8b0:	da4c      	bge.n	804a94c <__gethex+0x2a4>
 804a8b2:	ee18 0a10 	vmov	r0, s16
 804a8b6:	4621      	mov	r1, r4
 804a8b8:	f000 fa5c 	bl	804ad74 <_Bfree>
 804a8bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804a8be:	2300      	movs	r3, #0
 804a8c0:	6013      	str	r3, [r2, #0]
 804a8c2:	27a3      	movs	r7, #163	; 0xa3
 804a8c4:	e785      	b.n	804a7d2 <__gethex+0x12a>
 804a8c6:	1e73      	subs	r3, r6, #1
 804a8c8:	9a05      	ldr	r2, [sp, #20]
 804a8ca:	9303      	str	r3, [sp, #12]
 804a8cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 804a8d0:	4293      	cmp	r3, r2
 804a8d2:	d019      	beq.n	804a908 <__gethex+0x260>
 804a8d4:	f1bb 0f20 	cmp.w	fp, #32
 804a8d8:	d107      	bne.n	804a8ea <__gethex+0x242>
 804a8da:	9b02      	ldr	r3, [sp, #8]
 804a8dc:	9a00      	ldr	r2, [sp, #0]
 804a8de:	f843 2b04 	str.w	r2, [r3], #4
 804a8e2:	9302      	str	r3, [sp, #8]
 804a8e4:	2300      	movs	r3, #0
 804a8e6:	9300      	str	r3, [sp, #0]
 804a8e8:	469b      	mov	fp, r3
 804a8ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 804a8ee:	f7ff fec5 	bl	804a67c <__hexdig_fun>
 804a8f2:	9b00      	ldr	r3, [sp, #0]
 804a8f4:	f000 000f 	and.w	r0, r0, #15
 804a8f8:	fa00 f00b 	lsl.w	r0, r0, fp
 804a8fc:	4303      	orrs	r3, r0
 804a8fe:	9300      	str	r3, [sp, #0]
 804a900:	f10b 0b04 	add.w	fp, fp, #4
 804a904:	9b03      	ldr	r3, [sp, #12]
 804a906:	e00d      	b.n	804a924 <__gethex+0x27c>
 804a908:	9b03      	ldr	r3, [sp, #12]
 804a90a:	9a06      	ldr	r2, [sp, #24]
 804a90c:	4413      	add	r3, r2
 804a90e:	42bb      	cmp	r3, r7
 804a910:	d3e0      	bcc.n	804a8d4 <__gethex+0x22c>
 804a912:	4618      	mov	r0, r3
 804a914:	9901      	ldr	r1, [sp, #4]
 804a916:	9307      	str	r3, [sp, #28]
 804a918:	4652      	mov	r2, sl
 804a91a:	f001 f8d5 	bl	804bac8 <strncmp>
 804a91e:	9b07      	ldr	r3, [sp, #28]
 804a920:	2800      	cmp	r0, #0
 804a922:	d1d7      	bne.n	804a8d4 <__gethex+0x22c>
 804a924:	461e      	mov	r6, r3
 804a926:	e78b      	b.n	804a840 <__gethex+0x198>
 804a928:	f04f 0a03 	mov.w	sl, #3
 804a92c:	e7b8      	b.n	804a8a0 <__gethex+0x1f8>
 804a92e:	da0a      	bge.n	804a946 <__gethex+0x29e>
 804a930:	1a37      	subs	r7, r6, r0
 804a932:	4621      	mov	r1, r4
 804a934:	ee18 0a10 	vmov	r0, s16
 804a938:	463a      	mov	r2, r7
 804a93a:	f000 fc37 	bl	804b1ac <__lshift>
 804a93e:	1bed      	subs	r5, r5, r7
 804a940:	4604      	mov	r4, r0
 804a942:	f100 0914 	add.w	r9, r0, #20
 804a946:	f04f 0a00 	mov.w	sl, #0
 804a94a:	e7ae      	b.n	804a8aa <__gethex+0x202>
 804a94c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 804a950:	42a8      	cmp	r0, r5
 804a952:	dd72      	ble.n	804aa3a <__gethex+0x392>
 804a954:	1b45      	subs	r5, r0, r5
 804a956:	42ae      	cmp	r6, r5
 804a958:	dc36      	bgt.n	804a9c8 <__gethex+0x320>
 804a95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804a95e:	2b02      	cmp	r3, #2
 804a960:	d02a      	beq.n	804a9b8 <__gethex+0x310>
 804a962:	2b03      	cmp	r3, #3
 804a964:	d02c      	beq.n	804a9c0 <__gethex+0x318>
 804a966:	2b01      	cmp	r3, #1
 804a968:	d115      	bne.n	804a996 <__gethex+0x2ee>
 804a96a:	42ae      	cmp	r6, r5
 804a96c:	d113      	bne.n	804a996 <__gethex+0x2ee>
 804a96e:	2e01      	cmp	r6, #1
 804a970:	d10b      	bne.n	804a98a <__gethex+0x2e2>
 804a972:	9a04      	ldr	r2, [sp, #16]
 804a974:	f8d8 3004 	ldr.w	r3, [r8, #4]
 804a978:	6013      	str	r3, [r2, #0]
 804a97a:	2301      	movs	r3, #1
 804a97c:	6123      	str	r3, [r4, #16]
 804a97e:	f8c9 3000 	str.w	r3, [r9]
 804a982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804a984:	2762      	movs	r7, #98	; 0x62
 804a986:	601c      	str	r4, [r3, #0]
 804a988:	e723      	b.n	804a7d2 <__gethex+0x12a>
 804a98a:	1e71      	subs	r1, r6, #1
 804a98c:	4620      	mov	r0, r4
 804a98e:	f000 fe4b 	bl	804b628 <__any_on>
 804a992:	2800      	cmp	r0, #0
 804a994:	d1ed      	bne.n	804a972 <__gethex+0x2ca>
 804a996:	ee18 0a10 	vmov	r0, s16
 804a99a:	4621      	mov	r1, r4
 804a99c:	f000 f9ea 	bl	804ad74 <_Bfree>
 804a9a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 804a9a2:	2300      	movs	r3, #0
 804a9a4:	6013      	str	r3, [r2, #0]
 804a9a6:	2750      	movs	r7, #80	; 0x50
 804a9a8:	e713      	b.n	804a7d2 <__gethex+0x12a>
 804a9aa:	bf00      	nop
 804a9ac:	0804da24 	.word	0x0804da24
 804a9b0:	0804d9a9 	.word	0x0804d9a9
 804a9b4:	0804d9ba 	.word	0x0804d9ba
 804a9b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804a9ba:	2b00      	cmp	r3, #0
 804a9bc:	d1eb      	bne.n	804a996 <__gethex+0x2ee>
 804a9be:	e7d8      	b.n	804a972 <__gethex+0x2ca>
 804a9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804a9c2:	2b00      	cmp	r3, #0
 804a9c4:	d1d5      	bne.n	804a972 <__gethex+0x2ca>
 804a9c6:	e7e6      	b.n	804a996 <__gethex+0x2ee>
 804a9c8:	1e6f      	subs	r7, r5, #1
 804a9ca:	f1ba 0f00 	cmp.w	sl, #0
 804a9ce:	d131      	bne.n	804aa34 <__gethex+0x38c>
 804a9d0:	b127      	cbz	r7, 804a9dc <__gethex+0x334>
 804a9d2:	4639      	mov	r1, r7
 804a9d4:	4620      	mov	r0, r4
 804a9d6:	f000 fe27 	bl	804b628 <__any_on>
 804a9da:	4682      	mov	sl, r0
 804a9dc:	117b      	asrs	r3, r7, #5
 804a9de:	2101      	movs	r1, #1
 804a9e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 804a9e4:	f007 071f 	and.w	r7, r7, #31
 804a9e8:	fa01 f707 	lsl.w	r7, r1, r7
 804a9ec:	421f      	tst	r7, r3
 804a9ee:	4629      	mov	r1, r5
 804a9f0:	4620      	mov	r0, r4
 804a9f2:	bf18      	it	ne
 804a9f4:	f04a 0a02 	orrne.w	sl, sl, #2
 804a9f8:	1b76      	subs	r6, r6, r5
 804a9fa:	f7ff fded 	bl	804a5d8 <rshift>
 804a9fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 804aa02:	2702      	movs	r7, #2
 804aa04:	f1ba 0f00 	cmp.w	sl, #0
 804aa08:	d048      	beq.n	804aa9c <__gethex+0x3f4>
 804aa0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804aa0e:	2b02      	cmp	r3, #2
 804aa10:	d015      	beq.n	804aa3e <__gethex+0x396>
 804aa12:	2b03      	cmp	r3, #3
 804aa14:	d017      	beq.n	804aa46 <__gethex+0x39e>
 804aa16:	2b01      	cmp	r3, #1
 804aa18:	d109      	bne.n	804aa2e <__gethex+0x386>
 804aa1a:	f01a 0f02 	tst.w	sl, #2
 804aa1e:	d006      	beq.n	804aa2e <__gethex+0x386>
 804aa20:	f8d9 0000 	ldr.w	r0, [r9]
 804aa24:	ea4a 0a00 	orr.w	sl, sl, r0
 804aa28:	f01a 0f01 	tst.w	sl, #1
 804aa2c:	d10e      	bne.n	804aa4c <__gethex+0x3a4>
 804aa2e:	f047 0710 	orr.w	r7, r7, #16
 804aa32:	e033      	b.n	804aa9c <__gethex+0x3f4>
 804aa34:	f04f 0a01 	mov.w	sl, #1
 804aa38:	e7d0      	b.n	804a9dc <__gethex+0x334>
 804aa3a:	2701      	movs	r7, #1
 804aa3c:	e7e2      	b.n	804aa04 <__gethex+0x35c>
 804aa3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804aa40:	f1c3 0301 	rsb	r3, r3, #1
 804aa44:	9315      	str	r3, [sp, #84]	; 0x54
 804aa46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804aa48:	2b00      	cmp	r3, #0
 804aa4a:	d0f0      	beq.n	804aa2e <__gethex+0x386>
 804aa4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 804aa50:	f104 0314 	add.w	r3, r4, #20
 804aa54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 804aa58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 804aa5c:	f04f 0c00 	mov.w	ip, #0
 804aa60:	4618      	mov	r0, r3
 804aa62:	f853 2b04 	ldr.w	r2, [r3], #4
 804aa66:	f1b2 3fff 	cmp.w	r2, #4294967295
 804aa6a:	d01c      	beq.n	804aaa6 <__gethex+0x3fe>
 804aa6c:	3201      	adds	r2, #1
 804aa6e:	6002      	str	r2, [r0, #0]
 804aa70:	2f02      	cmp	r7, #2
 804aa72:	f104 0314 	add.w	r3, r4, #20
 804aa76:	d13f      	bne.n	804aaf8 <__gethex+0x450>
 804aa78:	f8d8 2000 	ldr.w	r2, [r8]
 804aa7c:	3a01      	subs	r2, #1
 804aa7e:	42b2      	cmp	r2, r6
 804aa80:	d10a      	bne.n	804aa98 <__gethex+0x3f0>
 804aa82:	1171      	asrs	r1, r6, #5
 804aa84:	2201      	movs	r2, #1
 804aa86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 804aa8a:	f006 061f 	and.w	r6, r6, #31
 804aa8e:	fa02 f606 	lsl.w	r6, r2, r6
 804aa92:	421e      	tst	r6, r3
 804aa94:	bf18      	it	ne
 804aa96:	4617      	movne	r7, r2
 804aa98:	f047 0720 	orr.w	r7, r7, #32
 804aa9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804aa9e:	601c      	str	r4, [r3, #0]
 804aaa0:	9b04      	ldr	r3, [sp, #16]
 804aaa2:	601d      	str	r5, [r3, #0]
 804aaa4:	e695      	b.n	804a7d2 <__gethex+0x12a>
 804aaa6:	4299      	cmp	r1, r3
 804aaa8:	f843 cc04 	str.w	ip, [r3, #-4]
 804aaac:	d8d8      	bhi.n	804aa60 <__gethex+0x3b8>
 804aaae:	68a3      	ldr	r3, [r4, #8]
 804aab0:	459b      	cmp	fp, r3
 804aab2:	db19      	blt.n	804aae8 <__gethex+0x440>
 804aab4:	6861      	ldr	r1, [r4, #4]
 804aab6:	ee18 0a10 	vmov	r0, s16
 804aaba:	3101      	adds	r1, #1
 804aabc:	f000 f91a 	bl	804acf4 <_Balloc>
 804aac0:	4681      	mov	r9, r0
 804aac2:	b918      	cbnz	r0, 804aacc <__gethex+0x424>
 804aac4:	4b1a      	ldr	r3, [pc, #104]	; (804ab30 <__gethex+0x488>)
 804aac6:	4602      	mov	r2, r0
 804aac8:	2184      	movs	r1, #132	; 0x84
 804aaca:	e6a8      	b.n	804a81e <__gethex+0x176>
 804aacc:	6922      	ldr	r2, [r4, #16]
 804aace:	3202      	adds	r2, #2
 804aad0:	f104 010c 	add.w	r1, r4, #12
 804aad4:	0092      	lsls	r2, r2, #2
 804aad6:	300c      	adds	r0, #12
 804aad8:	f7fd f958 	bl	8047d8c <memcpy>
 804aadc:	4621      	mov	r1, r4
 804aade:	ee18 0a10 	vmov	r0, s16
 804aae2:	f000 f947 	bl	804ad74 <_Bfree>
 804aae6:	464c      	mov	r4, r9
 804aae8:	6923      	ldr	r3, [r4, #16]
 804aaea:	1c5a      	adds	r2, r3, #1
 804aaec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 804aaf0:	6122      	str	r2, [r4, #16]
 804aaf2:	2201      	movs	r2, #1
 804aaf4:	615a      	str	r2, [r3, #20]
 804aaf6:	e7bb      	b.n	804aa70 <__gethex+0x3c8>
 804aaf8:	6922      	ldr	r2, [r4, #16]
 804aafa:	455a      	cmp	r2, fp
 804aafc:	dd0b      	ble.n	804ab16 <__gethex+0x46e>
 804aafe:	2101      	movs	r1, #1
 804ab00:	4620      	mov	r0, r4
 804ab02:	f7ff fd69 	bl	804a5d8 <rshift>
 804ab06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804ab0a:	3501      	adds	r5, #1
 804ab0c:	42ab      	cmp	r3, r5
 804ab0e:	f6ff aed0 	blt.w	804a8b2 <__gethex+0x20a>
 804ab12:	2701      	movs	r7, #1
 804ab14:	e7c0      	b.n	804aa98 <__gethex+0x3f0>
 804ab16:	f016 061f 	ands.w	r6, r6, #31
 804ab1a:	d0fa      	beq.n	804ab12 <__gethex+0x46a>
 804ab1c:	449a      	add	sl, r3
 804ab1e:	f1c6 0620 	rsb	r6, r6, #32
 804ab22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 804ab26:	f000 f9db 	bl	804aee0 <__hi0bits>
 804ab2a:	42b0      	cmp	r0, r6
 804ab2c:	dbe7      	blt.n	804aafe <__gethex+0x456>
 804ab2e:	e7f0      	b.n	804ab12 <__gethex+0x46a>
 804ab30:	0804d9a9 	.word	0x0804d9a9

0804ab34 <L_shift>:
 804ab34:	f1c2 0208 	rsb	r2, r2, #8
 804ab38:	0092      	lsls	r2, r2, #2
 804ab3a:	b570      	push	{r4, r5, r6, lr}
 804ab3c:	f1c2 0620 	rsb	r6, r2, #32
 804ab40:	6843      	ldr	r3, [r0, #4]
 804ab42:	6804      	ldr	r4, [r0, #0]
 804ab44:	fa03 f506 	lsl.w	r5, r3, r6
 804ab48:	432c      	orrs	r4, r5
 804ab4a:	40d3      	lsrs	r3, r2
 804ab4c:	6004      	str	r4, [r0, #0]
 804ab4e:	f840 3f04 	str.w	r3, [r0, #4]!
 804ab52:	4288      	cmp	r0, r1
 804ab54:	d3f4      	bcc.n	804ab40 <L_shift+0xc>
 804ab56:	bd70      	pop	{r4, r5, r6, pc}

0804ab58 <__match>:
 804ab58:	b530      	push	{r4, r5, lr}
 804ab5a:	6803      	ldr	r3, [r0, #0]
 804ab5c:	3301      	adds	r3, #1
 804ab5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 804ab62:	b914      	cbnz	r4, 804ab6a <__match+0x12>
 804ab64:	6003      	str	r3, [r0, #0]
 804ab66:	2001      	movs	r0, #1
 804ab68:	bd30      	pop	{r4, r5, pc}
 804ab6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804ab6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 804ab72:	2d19      	cmp	r5, #25
 804ab74:	bf98      	it	ls
 804ab76:	3220      	addls	r2, #32
 804ab78:	42a2      	cmp	r2, r4
 804ab7a:	d0f0      	beq.n	804ab5e <__match+0x6>
 804ab7c:	2000      	movs	r0, #0
 804ab7e:	e7f3      	b.n	804ab68 <__match+0x10>

0804ab80 <__hexnan>:
 804ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804ab84:	680b      	ldr	r3, [r1, #0]
 804ab86:	6801      	ldr	r1, [r0, #0]
 804ab88:	115e      	asrs	r6, r3, #5
 804ab8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 804ab8e:	f013 031f 	ands.w	r3, r3, #31
 804ab92:	b087      	sub	sp, #28
 804ab94:	bf18      	it	ne
 804ab96:	3604      	addne	r6, #4
 804ab98:	2500      	movs	r5, #0
 804ab9a:	1f37      	subs	r7, r6, #4
 804ab9c:	4682      	mov	sl, r0
 804ab9e:	4690      	mov	r8, r2
 804aba0:	9301      	str	r3, [sp, #4]
 804aba2:	f846 5c04 	str.w	r5, [r6, #-4]
 804aba6:	46b9      	mov	r9, r7
 804aba8:	463c      	mov	r4, r7
 804abaa:	9502      	str	r5, [sp, #8]
 804abac:	46ab      	mov	fp, r5
 804abae:	784a      	ldrb	r2, [r1, #1]
 804abb0:	1c4b      	adds	r3, r1, #1
 804abb2:	9303      	str	r3, [sp, #12]
 804abb4:	b342      	cbz	r2, 804ac08 <__hexnan+0x88>
 804abb6:	4610      	mov	r0, r2
 804abb8:	9105      	str	r1, [sp, #20]
 804abba:	9204      	str	r2, [sp, #16]
 804abbc:	f7ff fd5e 	bl	804a67c <__hexdig_fun>
 804abc0:	2800      	cmp	r0, #0
 804abc2:	d14f      	bne.n	804ac64 <__hexnan+0xe4>
 804abc4:	9a04      	ldr	r2, [sp, #16]
 804abc6:	9905      	ldr	r1, [sp, #20]
 804abc8:	2a20      	cmp	r2, #32
 804abca:	d818      	bhi.n	804abfe <__hexnan+0x7e>
 804abcc:	9b02      	ldr	r3, [sp, #8]
 804abce:	459b      	cmp	fp, r3
 804abd0:	dd13      	ble.n	804abfa <__hexnan+0x7a>
 804abd2:	454c      	cmp	r4, r9
 804abd4:	d206      	bcs.n	804abe4 <__hexnan+0x64>
 804abd6:	2d07      	cmp	r5, #7
 804abd8:	dc04      	bgt.n	804abe4 <__hexnan+0x64>
 804abda:	462a      	mov	r2, r5
 804abdc:	4649      	mov	r1, r9
 804abde:	4620      	mov	r0, r4
 804abe0:	f7ff ffa8 	bl	804ab34 <L_shift>
 804abe4:	4544      	cmp	r4, r8
 804abe6:	d950      	bls.n	804ac8a <__hexnan+0x10a>
 804abe8:	2300      	movs	r3, #0
 804abea:	f1a4 0904 	sub.w	r9, r4, #4
 804abee:	f844 3c04 	str.w	r3, [r4, #-4]
 804abf2:	f8cd b008 	str.w	fp, [sp, #8]
 804abf6:	464c      	mov	r4, r9
 804abf8:	461d      	mov	r5, r3
 804abfa:	9903      	ldr	r1, [sp, #12]
 804abfc:	e7d7      	b.n	804abae <__hexnan+0x2e>
 804abfe:	2a29      	cmp	r2, #41	; 0x29
 804ac00:	d156      	bne.n	804acb0 <__hexnan+0x130>
 804ac02:	3102      	adds	r1, #2
 804ac04:	f8ca 1000 	str.w	r1, [sl]
 804ac08:	f1bb 0f00 	cmp.w	fp, #0
 804ac0c:	d050      	beq.n	804acb0 <__hexnan+0x130>
 804ac0e:	454c      	cmp	r4, r9
 804ac10:	d206      	bcs.n	804ac20 <__hexnan+0xa0>
 804ac12:	2d07      	cmp	r5, #7
 804ac14:	dc04      	bgt.n	804ac20 <__hexnan+0xa0>
 804ac16:	462a      	mov	r2, r5
 804ac18:	4649      	mov	r1, r9
 804ac1a:	4620      	mov	r0, r4
 804ac1c:	f7ff ff8a 	bl	804ab34 <L_shift>
 804ac20:	4544      	cmp	r4, r8
 804ac22:	d934      	bls.n	804ac8e <__hexnan+0x10e>
 804ac24:	f1a8 0204 	sub.w	r2, r8, #4
 804ac28:	4623      	mov	r3, r4
 804ac2a:	f853 1b04 	ldr.w	r1, [r3], #4
 804ac2e:	f842 1f04 	str.w	r1, [r2, #4]!
 804ac32:	429f      	cmp	r7, r3
 804ac34:	d2f9      	bcs.n	804ac2a <__hexnan+0xaa>
 804ac36:	1b3b      	subs	r3, r7, r4
 804ac38:	f023 0303 	bic.w	r3, r3, #3
 804ac3c:	3304      	adds	r3, #4
 804ac3e:	3401      	adds	r4, #1
 804ac40:	3e03      	subs	r6, #3
 804ac42:	42b4      	cmp	r4, r6
 804ac44:	bf88      	it	hi
 804ac46:	2304      	movhi	r3, #4
 804ac48:	4443      	add	r3, r8
 804ac4a:	2200      	movs	r2, #0
 804ac4c:	f843 2b04 	str.w	r2, [r3], #4
 804ac50:	429f      	cmp	r7, r3
 804ac52:	d2fb      	bcs.n	804ac4c <__hexnan+0xcc>
 804ac54:	683b      	ldr	r3, [r7, #0]
 804ac56:	b91b      	cbnz	r3, 804ac60 <__hexnan+0xe0>
 804ac58:	4547      	cmp	r7, r8
 804ac5a:	d127      	bne.n	804acac <__hexnan+0x12c>
 804ac5c:	2301      	movs	r3, #1
 804ac5e:	603b      	str	r3, [r7, #0]
 804ac60:	2005      	movs	r0, #5
 804ac62:	e026      	b.n	804acb2 <__hexnan+0x132>
 804ac64:	3501      	adds	r5, #1
 804ac66:	2d08      	cmp	r5, #8
 804ac68:	f10b 0b01 	add.w	fp, fp, #1
 804ac6c:	dd06      	ble.n	804ac7c <__hexnan+0xfc>
 804ac6e:	4544      	cmp	r4, r8
 804ac70:	d9c3      	bls.n	804abfa <__hexnan+0x7a>
 804ac72:	2300      	movs	r3, #0
 804ac74:	f844 3c04 	str.w	r3, [r4, #-4]
 804ac78:	2501      	movs	r5, #1
 804ac7a:	3c04      	subs	r4, #4
 804ac7c:	6822      	ldr	r2, [r4, #0]
 804ac7e:	f000 000f 	and.w	r0, r0, #15
 804ac82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 804ac86:	6022      	str	r2, [r4, #0]
 804ac88:	e7b7      	b.n	804abfa <__hexnan+0x7a>
 804ac8a:	2508      	movs	r5, #8
 804ac8c:	e7b5      	b.n	804abfa <__hexnan+0x7a>
 804ac8e:	9b01      	ldr	r3, [sp, #4]
 804ac90:	2b00      	cmp	r3, #0
 804ac92:	d0df      	beq.n	804ac54 <__hexnan+0xd4>
 804ac94:	f04f 32ff 	mov.w	r2, #4294967295
 804ac98:	f1c3 0320 	rsb	r3, r3, #32
 804ac9c:	fa22 f303 	lsr.w	r3, r2, r3
 804aca0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 804aca4:	401a      	ands	r2, r3
 804aca6:	f846 2c04 	str.w	r2, [r6, #-4]
 804acaa:	e7d3      	b.n	804ac54 <__hexnan+0xd4>
 804acac:	3f04      	subs	r7, #4
 804acae:	e7d1      	b.n	804ac54 <__hexnan+0xd4>
 804acb0:	2004      	movs	r0, #4
 804acb2:	b007      	add	sp, #28
 804acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804acb8 <_localeconv_r>:
 804acb8:	4800      	ldr	r0, [pc, #0]	; (804acbc <_localeconv_r+0x4>)
 804acba:	4770      	bx	lr
 804acbc:	20000170 	.word	0x20000170

0804acc0 <malloc>:
 804acc0:	4b02      	ldr	r3, [pc, #8]	; (804accc <malloc+0xc>)
 804acc2:	4601      	mov	r1, r0
 804acc4:	6818      	ldr	r0, [r3, #0]
 804acc6:	f000 bd2f 	b.w	804b728 <_malloc_r>
 804acca:	bf00      	nop
 804accc:	20000018 	.word	0x20000018

0804acd0 <__ascii_mbtowc>:
 804acd0:	b082      	sub	sp, #8
 804acd2:	b901      	cbnz	r1, 804acd6 <__ascii_mbtowc+0x6>
 804acd4:	a901      	add	r1, sp, #4
 804acd6:	b142      	cbz	r2, 804acea <__ascii_mbtowc+0x1a>
 804acd8:	b14b      	cbz	r3, 804acee <__ascii_mbtowc+0x1e>
 804acda:	7813      	ldrb	r3, [r2, #0]
 804acdc:	600b      	str	r3, [r1, #0]
 804acde:	7812      	ldrb	r2, [r2, #0]
 804ace0:	1e10      	subs	r0, r2, #0
 804ace2:	bf18      	it	ne
 804ace4:	2001      	movne	r0, #1
 804ace6:	b002      	add	sp, #8
 804ace8:	4770      	bx	lr
 804acea:	4610      	mov	r0, r2
 804acec:	e7fb      	b.n	804ace6 <__ascii_mbtowc+0x16>
 804acee:	f06f 0001 	mvn.w	r0, #1
 804acf2:	e7f8      	b.n	804ace6 <__ascii_mbtowc+0x16>

0804acf4 <_Balloc>:
 804acf4:	b570      	push	{r4, r5, r6, lr}
 804acf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804acf8:	4604      	mov	r4, r0
 804acfa:	460d      	mov	r5, r1
 804acfc:	b976      	cbnz	r6, 804ad1c <_Balloc+0x28>
 804acfe:	2010      	movs	r0, #16
 804ad00:	f7ff ffde 	bl	804acc0 <malloc>
 804ad04:	4602      	mov	r2, r0
 804ad06:	6260      	str	r0, [r4, #36]	; 0x24
 804ad08:	b920      	cbnz	r0, 804ad14 <_Balloc+0x20>
 804ad0a:	4b18      	ldr	r3, [pc, #96]	; (804ad6c <_Balloc+0x78>)
 804ad0c:	4818      	ldr	r0, [pc, #96]	; (804ad70 <_Balloc+0x7c>)
 804ad0e:	2166      	movs	r1, #102	; 0x66
 804ad10:	f000 fefa 	bl	804bb08 <__assert_func>
 804ad14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804ad18:	6006      	str	r6, [r0, #0]
 804ad1a:	60c6      	str	r6, [r0, #12]
 804ad1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 804ad1e:	68f3      	ldr	r3, [r6, #12]
 804ad20:	b183      	cbz	r3, 804ad44 <_Balloc+0x50>
 804ad22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804ad24:	68db      	ldr	r3, [r3, #12]
 804ad26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 804ad2a:	b9b8      	cbnz	r0, 804ad5c <_Balloc+0x68>
 804ad2c:	2101      	movs	r1, #1
 804ad2e:	fa01 f605 	lsl.w	r6, r1, r5
 804ad32:	1d72      	adds	r2, r6, #5
 804ad34:	0092      	lsls	r2, r2, #2
 804ad36:	4620      	mov	r0, r4
 804ad38:	f000 fc97 	bl	804b66a <_calloc_r>
 804ad3c:	b160      	cbz	r0, 804ad58 <_Balloc+0x64>
 804ad3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804ad42:	e00e      	b.n	804ad62 <_Balloc+0x6e>
 804ad44:	2221      	movs	r2, #33	; 0x21
 804ad46:	2104      	movs	r1, #4
 804ad48:	4620      	mov	r0, r4
 804ad4a:	f000 fc8e 	bl	804b66a <_calloc_r>
 804ad4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804ad50:	60f0      	str	r0, [r6, #12]
 804ad52:	68db      	ldr	r3, [r3, #12]
 804ad54:	2b00      	cmp	r3, #0
 804ad56:	d1e4      	bne.n	804ad22 <_Balloc+0x2e>
 804ad58:	2000      	movs	r0, #0
 804ad5a:	bd70      	pop	{r4, r5, r6, pc}
 804ad5c:	6802      	ldr	r2, [r0, #0]
 804ad5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804ad62:	2300      	movs	r3, #0
 804ad64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 804ad68:	e7f7      	b.n	804ad5a <_Balloc+0x66>
 804ad6a:	bf00      	nop
 804ad6c:	0804d933 	.word	0x0804d933
 804ad70:	0804da38 	.word	0x0804da38

0804ad74 <_Bfree>:
 804ad74:	b570      	push	{r4, r5, r6, lr}
 804ad76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 804ad78:	4605      	mov	r5, r0
 804ad7a:	460c      	mov	r4, r1
 804ad7c:	b976      	cbnz	r6, 804ad9c <_Bfree+0x28>
 804ad7e:	2010      	movs	r0, #16
 804ad80:	f7ff ff9e 	bl	804acc0 <malloc>
 804ad84:	4602      	mov	r2, r0
 804ad86:	6268      	str	r0, [r5, #36]	; 0x24
 804ad88:	b920      	cbnz	r0, 804ad94 <_Bfree+0x20>
 804ad8a:	4b09      	ldr	r3, [pc, #36]	; (804adb0 <_Bfree+0x3c>)
 804ad8c:	4809      	ldr	r0, [pc, #36]	; (804adb4 <_Bfree+0x40>)
 804ad8e:	218a      	movs	r1, #138	; 0x8a
 804ad90:	f000 feba 	bl	804bb08 <__assert_func>
 804ad94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 804ad98:	6006      	str	r6, [r0, #0]
 804ad9a:	60c6      	str	r6, [r0, #12]
 804ad9c:	b13c      	cbz	r4, 804adae <_Bfree+0x3a>
 804ad9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 804ada0:	6862      	ldr	r2, [r4, #4]
 804ada2:	68db      	ldr	r3, [r3, #12]
 804ada4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804ada8:	6021      	str	r1, [r4, #0]
 804adaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804adae:	bd70      	pop	{r4, r5, r6, pc}
 804adb0:	0804d933 	.word	0x0804d933
 804adb4:	0804da38 	.word	0x0804da38

0804adb8 <__multadd>:
 804adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804adbc:	690e      	ldr	r6, [r1, #16]
 804adbe:	4607      	mov	r7, r0
 804adc0:	4698      	mov	r8, r3
 804adc2:	460c      	mov	r4, r1
 804adc4:	f101 0014 	add.w	r0, r1, #20
 804adc8:	2300      	movs	r3, #0
 804adca:	6805      	ldr	r5, [r0, #0]
 804adcc:	b2a9      	uxth	r1, r5
 804adce:	fb02 8101 	mla	r1, r2, r1, r8
 804add2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 804add6:	0c2d      	lsrs	r5, r5, #16
 804add8:	fb02 c505 	mla	r5, r2, r5, ip
 804addc:	b289      	uxth	r1, r1
 804adde:	3301      	adds	r3, #1
 804ade0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 804ade4:	429e      	cmp	r6, r3
 804ade6:	f840 1b04 	str.w	r1, [r0], #4
 804adea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 804adee:	dcec      	bgt.n	804adca <__multadd+0x12>
 804adf0:	f1b8 0f00 	cmp.w	r8, #0
 804adf4:	d022      	beq.n	804ae3c <__multadd+0x84>
 804adf6:	68a3      	ldr	r3, [r4, #8]
 804adf8:	42b3      	cmp	r3, r6
 804adfa:	dc19      	bgt.n	804ae30 <__multadd+0x78>
 804adfc:	6861      	ldr	r1, [r4, #4]
 804adfe:	4638      	mov	r0, r7
 804ae00:	3101      	adds	r1, #1
 804ae02:	f7ff ff77 	bl	804acf4 <_Balloc>
 804ae06:	4605      	mov	r5, r0
 804ae08:	b928      	cbnz	r0, 804ae16 <__multadd+0x5e>
 804ae0a:	4602      	mov	r2, r0
 804ae0c:	4b0d      	ldr	r3, [pc, #52]	; (804ae44 <__multadd+0x8c>)
 804ae0e:	480e      	ldr	r0, [pc, #56]	; (804ae48 <__multadd+0x90>)
 804ae10:	21b5      	movs	r1, #181	; 0xb5
 804ae12:	f000 fe79 	bl	804bb08 <__assert_func>
 804ae16:	6922      	ldr	r2, [r4, #16]
 804ae18:	3202      	adds	r2, #2
 804ae1a:	f104 010c 	add.w	r1, r4, #12
 804ae1e:	0092      	lsls	r2, r2, #2
 804ae20:	300c      	adds	r0, #12
 804ae22:	f7fc ffb3 	bl	8047d8c <memcpy>
 804ae26:	4621      	mov	r1, r4
 804ae28:	4638      	mov	r0, r7
 804ae2a:	f7ff ffa3 	bl	804ad74 <_Bfree>
 804ae2e:	462c      	mov	r4, r5
 804ae30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 804ae34:	3601      	adds	r6, #1
 804ae36:	f8c3 8014 	str.w	r8, [r3, #20]
 804ae3a:	6126      	str	r6, [r4, #16]
 804ae3c:	4620      	mov	r0, r4
 804ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ae42:	bf00      	nop
 804ae44:	0804d9a9 	.word	0x0804d9a9
 804ae48:	0804da38 	.word	0x0804da38

0804ae4c <__s2b>:
 804ae4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804ae50:	460c      	mov	r4, r1
 804ae52:	4615      	mov	r5, r2
 804ae54:	461f      	mov	r7, r3
 804ae56:	2209      	movs	r2, #9
 804ae58:	3308      	adds	r3, #8
 804ae5a:	4606      	mov	r6, r0
 804ae5c:	fb93 f3f2 	sdiv	r3, r3, r2
 804ae60:	2100      	movs	r1, #0
 804ae62:	2201      	movs	r2, #1
 804ae64:	429a      	cmp	r2, r3
 804ae66:	db09      	blt.n	804ae7c <__s2b+0x30>
 804ae68:	4630      	mov	r0, r6
 804ae6a:	f7ff ff43 	bl	804acf4 <_Balloc>
 804ae6e:	b940      	cbnz	r0, 804ae82 <__s2b+0x36>
 804ae70:	4602      	mov	r2, r0
 804ae72:	4b19      	ldr	r3, [pc, #100]	; (804aed8 <__s2b+0x8c>)
 804ae74:	4819      	ldr	r0, [pc, #100]	; (804aedc <__s2b+0x90>)
 804ae76:	21ce      	movs	r1, #206	; 0xce
 804ae78:	f000 fe46 	bl	804bb08 <__assert_func>
 804ae7c:	0052      	lsls	r2, r2, #1
 804ae7e:	3101      	adds	r1, #1
 804ae80:	e7f0      	b.n	804ae64 <__s2b+0x18>
 804ae82:	9b08      	ldr	r3, [sp, #32]
 804ae84:	6143      	str	r3, [r0, #20]
 804ae86:	2d09      	cmp	r5, #9
 804ae88:	f04f 0301 	mov.w	r3, #1
 804ae8c:	6103      	str	r3, [r0, #16]
 804ae8e:	dd16      	ble.n	804aebe <__s2b+0x72>
 804ae90:	f104 0909 	add.w	r9, r4, #9
 804ae94:	46c8      	mov	r8, r9
 804ae96:	442c      	add	r4, r5
 804ae98:	f818 3b01 	ldrb.w	r3, [r8], #1
 804ae9c:	4601      	mov	r1, r0
 804ae9e:	3b30      	subs	r3, #48	; 0x30
 804aea0:	220a      	movs	r2, #10
 804aea2:	4630      	mov	r0, r6
 804aea4:	f7ff ff88 	bl	804adb8 <__multadd>
 804aea8:	45a0      	cmp	r8, r4
 804aeaa:	d1f5      	bne.n	804ae98 <__s2b+0x4c>
 804aeac:	f1a5 0408 	sub.w	r4, r5, #8
 804aeb0:	444c      	add	r4, r9
 804aeb2:	1b2d      	subs	r5, r5, r4
 804aeb4:	1963      	adds	r3, r4, r5
 804aeb6:	42bb      	cmp	r3, r7
 804aeb8:	db04      	blt.n	804aec4 <__s2b+0x78>
 804aeba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804aebe:	340a      	adds	r4, #10
 804aec0:	2509      	movs	r5, #9
 804aec2:	e7f6      	b.n	804aeb2 <__s2b+0x66>
 804aec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 804aec8:	4601      	mov	r1, r0
 804aeca:	3b30      	subs	r3, #48	; 0x30
 804aecc:	220a      	movs	r2, #10
 804aece:	4630      	mov	r0, r6
 804aed0:	f7ff ff72 	bl	804adb8 <__multadd>
 804aed4:	e7ee      	b.n	804aeb4 <__s2b+0x68>
 804aed6:	bf00      	nop
 804aed8:	0804d9a9 	.word	0x0804d9a9
 804aedc:	0804da38 	.word	0x0804da38

0804aee0 <__hi0bits>:
 804aee0:	0c03      	lsrs	r3, r0, #16
 804aee2:	041b      	lsls	r3, r3, #16
 804aee4:	b9d3      	cbnz	r3, 804af1c <__hi0bits+0x3c>
 804aee6:	0400      	lsls	r0, r0, #16
 804aee8:	2310      	movs	r3, #16
 804aeea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 804aeee:	bf04      	itt	eq
 804aef0:	0200      	lsleq	r0, r0, #8
 804aef2:	3308      	addeq	r3, #8
 804aef4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 804aef8:	bf04      	itt	eq
 804aefa:	0100      	lsleq	r0, r0, #4
 804aefc:	3304      	addeq	r3, #4
 804aefe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 804af02:	bf04      	itt	eq
 804af04:	0080      	lsleq	r0, r0, #2
 804af06:	3302      	addeq	r3, #2
 804af08:	2800      	cmp	r0, #0
 804af0a:	db05      	blt.n	804af18 <__hi0bits+0x38>
 804af0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 804af10:	f103 0301 	add.w	r3, r3, #1
 804af14:	bf08      	it	eq
 804af16:	2320      	moveq	r3, #32
 804af18:	4618      	mov	r0, r3
 804af1a:	4770      	bx	lr
 804af1c:	2300      	movs	r3, #0
 804af1e:	e7e4      	b.n	804aeea <__hi0bits+0xa>

0804af20 <__lo0bits>:
 804af20:	6803      	ldr	r3, [r0, #0]
 804af22:	f013 0207 	ands.w	r2, r3, #7
 804af26:	4601      	mov	r1, r0
 804af28:	d00b      	beq.n	804af42 <__lo0bits+0x22>
 804af2a:	07da      	lsls	r2, r3, #31
 804af2c:	d424      	bmi.n	804af78 <__lo0bits+0x58>
 804af2e:	0798      	lsls	r0, r3, #30
 804af30:	bf49      	itett	mi
 804af32:	085b      	lsrmi	r3, r3, #1
 804af34:	089b      	lsrpl	r3, r3, #2
 804af36:	2001      	movmi	r0, #1
 804af38:	600b      	strmi	r3, [r1, #0]
 804af3a:	bf5c      	itt	pl
 804af3c:	600b      	strpl	r3, [r1, #0]
 804af3e:	2002      	movpl	r0, #2
 804af40:	4770      	bx	lr
 804af42:	b298      	uxth	r0, r3
 804af44:	b9b0      	cbnz	r0, 804af74 <__lo0bits+0x54>
 804af46:	0c1b      	lsrs	r3, r3, #16
 804af48:	2010      	movs	r0, #16
 804af4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 804af4e:	bf04      	itt	eq
 804af50:	0a1b      	lsreq	r3, r3, #8
 804af52:	3008      	addeq	r0, #8
 804af54:	071a      	lsls	r2, r3, #28
 804af56:	bf04      	itt	eq
 804af58:	091b      	lsreq	r3, r3, #4
 804af5a:	3004      	addeq	r0, #4
 804af5c:	079a      	lsls	r2, r3, #30
 804af5e:	bf04      	itt	eq
 804af60:	089b      	lsreq	r3, r3, #2
 804af62:	3002      	addeq	r0, #2
 804af64:	07da      	lsls	r2, r3, #31
 804af66:	d403      	bmi.n	804af70 <__lo0bits+0x50>
 804af68:	085b      	lsrs	r3, r3, #1
 804af6a:	f100 0001 	add.w	r0, r0, #1
 804af6e:	d005      	beq.n	804af7c <__lo0bits+0x5c>
 804af70:	600b      	str	r3, [r1, #0]
 804af72:	4770      	bx	lr
 804af74:	4610      	mov	r0, r2
 804af76:	e7e8      	b.n	804af4a <__lo0bits+0x2a>
 804af78:	2000      	movs	r0, #0
 804af7a:	4770      	bx	lr
 804af7c:	2020      	movs	r0, #32
 804af7e:	4770      	bx	lr

0804af80 <__i2b>:
 804af80:	b510      	push	{r4, lr}
 804af82:	460c      	mov	r4, r1
 804af84:	2101      	movs	r1, #1
 804af86:	f7ff feb5 	bl	804acf4 <_Balloc>
 804af8a:	4602      	mov	r2, r0
 804af8c:	b928      	cbnz	r0, 804af9a <__i2b+0x1a>
 804af8e:	4b05      	ldr	r3, [pc, #20]	; (804afa4 <__i2b+0x24>)
 804af90:	4805      	ldr	r0, [pc, #20]	; (804afa8 <__i2b+0x28>)
 804af92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 804af96:	f000 fdb7 	bl	804bb08 <__assert_func>
 804af9a:	2301      	movs	r3, #1
 804af9c:	6144      	str	r4, [r0, #20]
 804af9e:	6103      	str	r3, [r0, #16]
 804afa0:	bd10      	pop	{r4, pc}
 804afa2:	bf00      	nop
 804afa4:	0804d9a9 	.word	0x0804d9a9
 804afa8:	0804da38 	.word	0x0804da38

0804afac <__multiply>:
 804afac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804afb0:	4614      	mov	r4, r2
 804afb2:	690a      	ldr	r2, [r1, #16]
 804afb4:	6923      	ldr	r3, [r4, #16]
 804afb6:	429a      	cmp	r2, r3
 804afb8:	bfb8      	it	lt
 804afba:	460b      	movlt	r3, r1
 804afbc:	460d      	mov	r5, r1
 804afbe:	bfbc      	itt	lt
 804afc0:	4625      	movlt	r5, r4
 804afc2:	461c      	movlt	r4, r3
 804afc4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 804afc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 804afcc:	68ab      	ldr	r3, [r5, #8]
 804afce:	6869      	ldr	r1, [r5, #4]
 804afd0:	eb0a 0709 	add.w	r7, sl, r9
 804afd4:	42bb      	cmp	r3, r7
 804afd6:	b085      	sub	sp, #20
 804afd8:	bfb8      	it	lt
 804afda:	3101      	addlt	r1, #1
 804afdc:	f7ff fe8a 	bl	804acf4 <_Balloc>
 804afe0:	b930      	cbnz	r0, 804aff0 <__multiply+0x44>
 804afe2:	4602      	mov	r2, r0
 804afe4:	4b42      	ldr	r3, [pc, #264]	; (804b0f0 <__multiply+0x144>)
 804afe6:	4843      	ldr	r0, [pc, #268]	; (804b0f4 <__multiply+0x148>)
 804afe8:	f240 115d 	movw	r1, #349	; 0x15d
 804afec:	f000 fd8c 	bl	804bb08 <__assert_func>
 804aff0:	f100 0614 	add.w	r6, r0, #20
 804aff4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 804aff8:	4633      	mov	r3, r6
 804affa:	2200      	movs	r2, #0
 804affc:	4543      	cmp	r3, r8
 804affe:	d31e      	bcc.n	804b03e <__multiply+0x92>
 804b000:	f105 0c14 	add.w	ip, r5, #20
 804b004:	f104 0314 	add.w	r3, r4, #20
 804b008:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 804b00c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 804b010:	9202      	str	r2, [sp, #8]
 804b012:	ebac 0205 	sub.w	r2, ip, r5
 804b016:	3a15      	subs	r2, #21
 804b018:	f022 0203 	bic.w	r2, r2, #3
 804b01c:	3204      	adds	r2, #4
 804b01e:	f105 0115 	add.w	r1, r5, #21
 804b022:	458c      	cmp	ip, r1
 804b024:	bf38      	it	cc
 804b026:	2204      	movcc	r2, #4
 804b028:	9201      	str	r2, [sp, #4]
 804b02a:	9a02      	ldr	r2, [sp, #8]
 804b02c:	9303      	str	r3, [sp, #12]
 804b02e:	429a      	cmp	r2, r3
 804b030:	d808      	bhi.n	804b044 <__multiply+0x98>
 804b032:	2f00      	cmp	r7, #0
 804b034:	dc55      	bgt.n	804b0e2 <__multiply+0x136>
 804b036:	6107      	str	r7, [r0, #16]
 804b038:	b005      	add	sp, #20
 804b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b03e:	f843 2b04 	str.w	r2, [r3], #4
 804b042:	e7db      	b.n	804affc <__multiply+0x50>
 804b044:	f8b3 a000 	ldrh.w	sl, [r3]
 804b048:	f1ba 0f00 	cmp.w	sl, #0
 804b04c:	d020      	beq.n	804b090 <__multiply+0xe4>
 804b04e:	f105 0e14 	add.w	lr, r5, #20
 804b052:	46b1      	mov	r9, r6
 804b054:	2200      	movs	r2, #0
 804b056:	f85e 4b04 	ldr.w	r4, [lr], #4
 804b05a:	f8d9 b000 	ldr.w	fp, [r9]
 804b05e:	b2a1      	uxth	r1, r4
 804b060:	fa1f fb8b 	uxth.w	fp, fp
 804b064:	fb0a b101 	mla	r1, sl, r1, fp
 804b068:	4411      	add	r1, r2
 804b06a:	f8d9 2000 	ldr.w	r2, [r9]
 804b06e:	0c24      	lsrs	r4, r4, #16
 804b070:	0c12      	lsrs	r2, r2, #16
 804b072:	fb0a 2404 	mla	r4, sl, r4, r2
 804b076:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 804b07a:	b289      	uxth	r1, r1
 804b07c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 804b080:	45f4      	cmp	ip, lr
 804b082:	f849 1b04 	str.w	r1, [r9], #4
 804b086:	ea4f 4214 	mov.w	r2, r4, lsr #16
 804b08a:	d8e4      	bhi.n	804b056 <__multiply+0xaa>
 804b08c:	9901      	ldr	r1, [sp, #4]
 804b08e:	5072      	str	r2, [r6, r1]
 804b090:	9a03      	ldr	r2, [sp, #12]
 804b092:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 804b096:	3304      	adds	r3, #4
 804b098:	f1b9 0f00 	cmp.w	r9, #0
 804b09c:	d01f      	beq.n	804b0de <__multiply+0x132>
 804b09e:	6834      	ldr	r4, [r6, #0]
 804b0a0:	f105 0114 	add.w	r1, r5, #20
 804b0a4:	46b6      	mov	lr, r6
 804b0a6:	f04f 0a00 	mov.w	sl, #0
 804b0aa:	880a      	ldrh	r2, [r1, #0]
 804b0ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 804b0b0:	fb09 b202 	mla	r2, r9, r2, fp
 804b0b4:	4492      	add	sl, r2
 804b0b6:	b2a4      	uxth	r4, r4
 804b0b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 804b0bc:	f84e 4b04 	str.w	r4, [lr], #4
 804b0c0:	f851 4b04 	ldr.w	r4, [r1], #4
 804b0c4:	f8be 2000 	ldrh.w	r2, [lr]
 804b0c8:	0c24      	lsrs	r4, r4, #16
 804b0ca:	fb09 2404 	mla	r4, r9, r4, r2
 804b0ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 804b0d2:	458c      	cmp	ip, r1
 804b0d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 804b0d8:	d8e7      	bhi.n	804b0aa <__multiply+0xfe>
 804b0da:	9a01      	ldr	r2, [sp, #4]
 804b0dc:	50b4      	str	r4, [r6, r2]
 804b0de:	3604      	adds	r6, #4
 804b0e0:	e7a3      	b.n	804b02a <__multiply+0x7e>
 804b0e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 804b0e6:	2b00      	cmp	r3, #0
 804b0e8:	d1a5      	bne.n	804b036 <__multiply+0x8a>
 804b0ea:	3f01      	subs	r7, #1
 804b0ec:	e7a1      	b.n	804b032 <__multiply+0x86>
 804b0ee:	bf00      	nop
 804b0f0:	0804d9a9 	.word	0x0804d9a9
 804b0f4:	0804da38 	.word	0x0804da38

0804b0f8 <__pow5mult>:
 804b0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b0fc:	4615      	mov	r5, r2
 804b0fe:	f012 0203 	ands.w	r2, r2, #3
 804b102:	4606      	mov	r6, r0
 804b104:	460f      	mov	r7, r1
 804b106:	d007      	beq.n	804b118 <__pow5mult+0x20>
 804b108:	4c25      	ldr	r4, [pc, #148]	; (804b1a0 <__pow5mult+0xa8>)
 804b10a:	3a01      	subs	r2, #1
 804b10c:	2300      	movs	r3, #0
 804b10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804b112:	f7ff fe51 	bl	804adb8 <__multadd>
 804b116:	4607      	mov	r7, r0
 804b118:	10ad      	asrs	r5, r5, #2
 804b11a:	d03d      	beq.n	804b198 <__pow5mult+0xa0>
 804b11c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 804b11e:	b97c      	cbnz	r4, 804b140 <__pow5mult+0x48>
 804b120:	2010      	movs	r0, #16
 804b122:	f7ff fdcd 	bl	804acc0 <malloc>
 804b126:	4602      	mov	r2, r0
 804b128:	6270      	str	r0, [r6, #36]	; 0x24
 804b12a:	b928      	cbnz	r0, 804b138 <__pow5mult+0x40>
 804b12c:	4b1d      	ldr	r3, [pc, #116]	; (804b1a4 <__pow5mult+0xac>)
 804b12e:	481e      	ldr	r0, [pc, #120]	; (804b1a8 <__pow5mult+0xb0>)
 804b130:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 804b134:	f000 fce8 	bl	804bb08 <__assert_func>
 804b138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 804b13c:	6004      	str	r4, [r0, #0]
 804b13e:	60c4      	str	r4, [r0, #12]
 804b140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 804b144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 804b148:	b94c      	cbnz	r4, 804b15e <__pow5mult+0x66>
 804b14a:	f240 2171 	movw	r1, #625	; 0x271
 804b14e:	4630      	mov	r0, r6
 804b150:	f7ff ff16 	bl	804af80 <__i2b>
 804b154:	2300      	movs	r3, #0
 804b156:	f8c8 0008 	str.w	r0, [r8, #8]
 804b15a:	4604      	mov	r4, r0
 804b15c:	6003      	str	r3, [r0, #0]
 804b15e:	f04f 0900 	mov.w	r9, #0
 804b162:	07eb      	lsls	r3, r5, #31
 804b164:	d50a      	bpl.n	804b17c <__pow5mult+0x84>
 804b166:	4639      	mov	r1, r7
 804b168:	4622      	mov	r2, r4
 804b16a:	4630      	mov	r0, r6
 804b16c:	f7ff ff1e 	bl	804afac <__multiply>
 804b170:	4639      	mov	r1, r7
 804b172:	4680      	mov	r8, r0
 804b174:	4630      	mov	r0, r6
 804b176:	f7ff fdfd 	bl	804ad74 <_Bfree>
 804b17a:	4647      	mov	r7, r8
 804b17c:	106d      	asrs	r5, r5, #1
 804b17e:	d00b      	beq.n	804b198 <__pow5mult+0xa0>
 804b180:	6820      	ldr	r0, [r4, #0]
 804b182:	b938      	cbnz	r0, 804b194 <__pow5mult+0x9c>
 804b184:	4622      	mov	r2, r4
 804b186:	4621      	mov	r1, r4
 804b188:	4630      	mov	r0, r6
 804b18a:	f7ff ff0f 	bl	804afac <__multiply>
 804b18e:	6020      	str	r0, [r4, #0]
 804b190:	f8c0 9000 	str.w	r9, [r0]
 804b194:	4604      	mov	r4, r0
 804b196:	e7e4      	b.n	804b162 <__pow5mult+0x6a>
 804b198:	4638      	mov	r0, r7
 804b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b19e:	bf00      	nop
 804b1a0:	0804db88 	.word	0x0804db88
 804b1a4:	0804d933 	.word	0x0804d933
 804b1a8:	0804da38 	.word	0x0804da38

0804b1ac <__lshift>:
 804b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b1b0:	460c      	mov	r4, r1
 804b1b2:	6849      	ldr	r1, [r1, #4]
 804b1b4:	6923      	ldr	r3, [r4, #16]
 804b1b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 804b1ba:	68a3      	ldr	r3, [r4, #8]
 804b1bc:	4607      	mov	r7, r0
 804b1be:	4691      	mov	r9, r2
 804b1c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 804b1c4:	f108 0601 	add.w	r6, r8, #1
 804b1c8:	42b3      	cmp	r3, r6
 804b1ca:	db0b      	blt.n	804b1e4 <__lshift+0x38>
 804b1cc:	4638      	mov	r0, r7
 804b1ce:	f7ff fd91 	bl	804acf4 <_Balloc>
 804b1d2:	4605      	mov	r5, r0
 804b1d4:	b948      	cbnz	r0, 804b1ea <__lshift+0x3e>
 804b1d6:	4602      	mov	r2, r0
 804b1d8:	4b28      	ldr	r3, [pc, #160]	; (804b27c <__lshift+0xd0>)
 804b1da:	4829      	ldr	r0, [pc, #164]	; (804b280 <__lshift+0xd4>)
 804b1dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 804b1e0:	f000 fc92 	bl	804bb08 <__assert_func>
 804b1e4:	3101      	adds	r1, #1
 804b1e6:	005b      	lsls	r3, r3, #1
 804b1e8:	e7ee      	b.n	804b1c8 <__lshift+0x1c>
 804b1ea:	2300      	movs	r3, #0
 804b1ec:	f100 0114 	add.w	r1, r0, #20
 804b1f0:	f100 0210 	add.w	r2, r0, #16
 804b1f4:	4618      	mov	r0, r3
 804b1f6:	4553      	cmp	r3, sl
 804b1f8:	db33      	blt.n	804b262 <__lshift+0xb6>
 804b1fa:	6920      	ldr	r0, [r4, #16]
 804b1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 804b200:	f104 0314 	add.w	r3, r4, #20
 804b204:	f019 091f 	ands.w	r9, r9, #31
 804b208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 804b20c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 804b210:	d02b      	beq.n	804b26a <__lshift+0xbe>
 804b212:	f1c9 0e20 	rsb	lr, r9, #32
 804b216:	468a      	mov	sl, r1
 804b218:	2200      	movs	r2, #0
 804b21a:	6818      	ldr	r0, [r3, #0]
 804b21c:	fa00 f009 	lsl.w	r0, r0, r9
 804b220:	4302      	orrs	r2, r0
 804b222:	f84a 2b04 	str.w	r2, [sl], #4
 804b226:	f853 2b04 	ldr.w	r2, [r3], #4
 804b22a:	459c      	cmp	ip, r3
 804b22c:	fa22 f20e 	lsr.w	r2, r2, lr
 804b230:	d8f3      	bhi.n	804b21a <__lshift+0x6e>
 804b232:	ebac 0304 	sub.w	r3, ip, r4
 804b236:	3b15      	subs	r3, #21
 804b238:	f023 0303 	bic.w	r3, r3, #3
 804b23c:	3304      	adds	r3, #4
 804b23e:	f104 0015 	add.w	r0, r4, #21
 804b242:	4584      	cmp	ip, r0
 804b244:	bf38      	it	cc
 804b246:	2304      	movcc	r3, #4
 804b248:	50ca      	str	r2, [r1, r3]
 804b24a:	b10a      	cbz	r2, 804b250 <__lshift+0xa4>
 804b24c:	f108 0602 	add.w	r6, r8, #2
 804b250:	3e01      	subs	r6, #1
 804b252:	4638      	mov	r0, r7
 804b254:	612e      	str	r6, [r5, #16]
 804b256:	4621      	mov	r1, r4
 804b258:	f7ff fd8c 	bl	804ad74 <_Bfree>
 804b25c:	4628      	mov	r0, r5
 804b25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b262:	f842 0f04 	str.w	r0, [r2, #4]!
 804b266:	3301      	adds	r3, #1
 804b268:	e7c5      	b.n	804b1f6 <__lshift+0x4a>
 804b26a:	3904      	subs	r1, #4
 804b26c:	f853 2b04 	ldr.w	r2, [r3], #4
 804b270:	f841 2f04 	str.w	r2, [r1, #4]!
 804b274:	459c      	cmp	ip, r3
 804b276:	d8f9      	bhi.n	804b26c <__lshift+0xc0>
 804b278:	e7ea      	b.n	804b250 <__lshift+0xa4>
 804b27a:	bf00      	nop
 804b27c:	0804d9a9 	.word	0x0804d9a9
 804b280:	0804da38 	.word	0x0804da38

0804b284 <__mcmp>:
 804b284:	b530      	push	{r4, r5, lr}
 804b286:	6902      	ldr	r2, [r0, #16]
 804b288:	690c      	ldr	r4, [r1, #16]
 804b28a:	1b12      	subs	r2, r2, r4
 804b28c:	d10e      	bne.n	804b2ac <__mcmp+0x28>
 804b28e:	f100 0314 	add.w	r3, r0, #20
 804b292:	3114      	adds	r1, #20
 804b294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 804b298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 804b29c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 804b2a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 804b2a4:	42a5      	cmp	r5, r4
 804b2a6:	d003      	beq.n	804b2b0 <__mcmp+0x2c>
 804b2a8:	d305      	bcc.n	804b2b6 <__mcmp+0x32>
 804b2aa:	2201      	movs	r2, #1
 804b2ac:	4610      	mov	r0, r2
 804b2ae:	bd30      	pop	{r4, r5, pc}
 804b2b0:	4283      	cmp	r3, r0
 804b2b2:	d3f3      	bcc.n	804b29c <__mcmp+0x18>
 804b2b4:	e7fa      	b.n	804b2ac <__mcmp+0x28>
 804b2b6:	f04f 32ff 	mov.w	r2, #4294967295
 804b2ba:	e7f7      	b.n	804b2ac <__mcmp+0x28>

0804b2bc <__mdiff>:
 804b2bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b2c0:	460c      	mov	r4, r1
 804b2c2:	4606      	mov	r6, r0
 804b2c4:	4611      	mov	r1, r2
 804b2c6:	4620      	mov	r0, r4
 804b2c8:	4617      	mov	r7, r2
 804b2ca:	f7ff ffdb 	bl	804b284 <__mcmp>
 804b2ce:	1e05      	subs	r5, r0, #0
 804b2d0:	d110      	bne.n	804b2f4 <__mdiff+0x38>
 804b2d2:	4629      	mov	r1, r5
 804b2d4:	4630      	mov	r0, r6
 804b2d6:	f7ff fd0d 	bl	804acf4 <_Balloc>
 804b2da:	b930      	cbnz	r0, 804b2ea <__mdiff+0x2e>
 804b2dc:	4b39      	ldr	r3, [pc, #228]	; (804b3c4 <__mdiff+0x108>)
 804b2de:	4602      	mov	r2, r0
 804b2e0:	f240 2132 	movw	r1, #562	; 0x232
 804b2e4:	4838      	ldr	r0, [pc, #224]	; (804b3c8 <__mdiff+0x10c>)
 804b2e6:	f000 fc0f 	bl	804bb08 <__assert_func>
 804b2ea:	2301      	movs	r3, #1
 804b2ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 804b2f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b2f4:	bfa4      	itt	ge
 804b2f6:	463b      	movge	r3, r7
 804b2f8:	4627      	movge	r7, r4
 804b2fa:	4630      	mov	r0, r6
 804b2fc:	6879      	ldr	r1, [r7, #4]
 804b2fe:	bfa6      	itte	ge
 804b300:	461c      	movge	r4, r3
 804b302:	2500      	movge	r5, #0
 804b304:	2501      	movlt	r5, #1
 804b306:	f7ff fcf5 	bl	804acf4 <_Balloc>
 804b30a:	b920      	cbnz	r0, 804b316 <__mdiff+0x5a>
 804b30c:	4b2d      	ldr	r3, [pc, #180]	; (804b3c4 <__mdiff+0x108>)
 804b30e:	4602      	mov	r2, r0
 804b310:	f44f 7110 	mov.w	r1, #576	; 0x240
 804b314:	e7e6      	b.n	804b2e4 <__mdiff+0x28>
 804b316:	693e      	ldr	r6, [r7, #16]
 804b318:	60c5      	str	r5, [r0, #12]
 804b31a:	6925      	ldr	r5, [r4, #16]
 804b31c:	f107 0114 	add.w	r1, r7, #20
 804b320:	f104 0914 	add.w	r9, r4, #20
 804b324:	f100 0e14 	add.w	lr, r0, #20
 804b328:	f107 0210 	add.w	r2, r7, #16
 804b32c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 804b330:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 804b334:	46f2      	mov	sl, lr
 804b336:	2700      	movs	r7, #0
 804b338:	f859 3b04 	ldr.w	r3, [r9], #4
 804b33c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 804b340:	fa1f f883 	uxth.w	r8, r3
 804b344:	fa17 f78b 	uxtah	r7, r7, fp
 804b348:	0c1b      	lsrs	r3, r3, #16
 804b34a:	eba7 0808 	sub.w	r8, r7, r8
 804b34e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 804b352:	eb03 4328 	add.w	r3, r3, r8, asr #16
 804b356:	fa1f f888 	uxth.w	r8, r8
 804b35a:	141f      	asrs	r7, r3, #16
 804b35c:	454d      	cmp	r5, r9
 804b35e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 804b362:	f84a 3b04 	str.w	r3, [sl], #4
 804b366:	d8e7      	bhi.n	804b338 <__mdiff+0x7c>
 804b368:	1b2b      	subs	r3, r5, r4
 804b36a:	3b15      	subs	r3, #21
 804b36c:	f023 0303 	bic.w	r3, r3, #3
 804b370:	3304      	adds	r3, #4
 804b372:	3415      	adds	r4, #21
 804b374:	42a5      	cmp	r5, r4
 804b376:	bf38      	it	cc
 804b378:	2304      	movcc	r3, #4
 804b37a:	4419      	add	r1, r3
 804b37c:	4473      	add	r3, lr
 804b37e:	469e      	mov	lr, r3
 804b380:	460d      	mov	r5, r1
 804b382:	4565      	cmp	r5, ip
 804b384:	d30e      	bcc.n	804b3a4 <__mdiff+0xe8>
 804b386:	f10c 0203 	add.w	r2, ip, #3
 804b38a:	1a52      	subs	r2, r2, r1
 804b38c:	f022 0203 	bic.w	r2, r2, #3
 804b390:	3903      	subs	r1, #3
 804b392:	458c      	cmp	ip, r1
 804b394:	bf38      	it	cc
 804b396:	2200      	movcc	r2, #0
 804b398:	441a      	add	r2, r3
 804b39a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 804b39e:	b17b      	cbz	r3, 804b3c0 <__mdiff+0x104>
 804b3a0:	6106      	str	r6, [r0, #16]
 804b3a2:	e7a5      	b.n	804b2f0 <__mdiff+0x34>
 804b3a4:	f855 8b04 	ldr.w	r8, [r5], #4
 804b3a8:	fa17 f488 	uxtah	r4, r7, r8
 804b3ac:	1422      	asrs	r2, r4, #16
 804b3ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 804b3b2:	b2a4      	uxth	r4, r4
 804b3b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 804b3b8:	f84e 4b04 	str.w	r4, [lr], #4
 804b3bc:	1417      	asrs	r7, r2, #16
 804b3be:	e7e0      	b.n	804b382 <__mdiff+0xc6>
 804b3c0:	3e01      	subs	r6, #1
 804b3c2:	e7ea      	b.n	804b39a <__mdiff+0xde>
 804b3c4:	0804d9a9 	.word	0x0804d9a9
 804b3c8:	0804da38 	.word	0x0804da38

0804b3cc <__ulp>:
 804b3cc:	b082      	sub	sp, #8
 804b3ce:	ed8d 0b00 	vstr	d0, [sp]
 804b3d2:	9b01      	ldr	r3, [sp, #4]
 804b3d4:	4912      	ldr	r1, [pc, #72]	; (804b420 <__ulp+0x54>)
 804b3d6:	4019      	ands	r1, r3
 804b3d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 804b3dc:	2900      	cmp	r1, #0
 804b3de:	dd05      	ble.n	804b3ec <__ulp+0x20>
 804b3e0:	2200      	movs	r2, #0
 804b3e2:	460b      	mov	r3, r1
 804b3e4:	ec43 2b10 	vmov	d0, r2, r3
 804b3e8:	b002      	add	sp, #8
 804b3ea:	4770      	bx	lr
 804b3ec:	4249      	negs	r1, r1
 804b3ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 804b3f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 804b3f6:	f04f 0200 	mov.w	r2, #0
 804b3fa:	f04f 0300 	mov.w	r3, #0
 804b3fe:	da04      	bge.n	804b40a <__ulp+0x3e>
 804b400:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 804b404:	fa41 f300 	asr.w	r3, r1, r0
 804b408:	e7ec      	b.n	804b3e4 <__ulp+0x18>
 804b40a:	f1a0 0114 	sub.w	r1, r0, #20
 804b40e:	291e      	cmp	r1, #30
 804b410:	bfda      	itte	le
 804b412:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 804b416:	fa20 f101 	lsrle.w	r1, r0, r1
 804b41a:	2101      	movgt	r1, #1
 804b41c:	460a      	mov	r2, r1
 804b41e:	e7e1      	b.n	804b3e4 <__ulp+0x18>
 804b420:	7ff00000 	.word	0x7ff00000

0804b424 <__b2d>:
 804b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b426:	6905      	ldr	r5, [r0, #16]
 804b428:	f100 0714 	add.w	r7, r0, #20
 804b42c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 804b430:	1f2e      	subs	r6, r5, #4
 804b432:	f855 4c04 	ldr.w	r4, [r5, #-4]
 804b436:	4620      	mov	r0, r4
 804b438:	f7ff fd52 	bl	804aee0 <__hi0bits>
 804b43c:	f1c0 0320 	rsb	r3, r0, #32
 804b440:	280a      	cmp	r0, #10
 804b442:	f8df c07c 	ldr.w	ip, [pc, #124]	; 804b4c0 <__b2d+0x9c>
 804b446:	600b      	str	r3, [r1, #0]
 804b448:	dc14      	bgt.n	804b474 <__b2d+0x50>
 804b44a:	f1c0 0e0b 	rsb	lr, r0, #11
 804b44e:	fa24 f10e 	lsr.w	r1, r4, lr
 804b452:	42b7      	cmp	r7, r6
 804b454:	ea41 030c 	orr.w	r3, r1, ip
 804b458:	bf34      	ite	cc
 804b45a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804b45e:	2100      	movcs	r1, #0
 804b460:	3015      	adds	r0, #21
 804b462:	fa04 f000 	lsl.w	r0, r4, r0
 804b466:	fa21 f10e 	lsr.w	r1, r1, lr
 804b46a:	ea40 0201 	orr.w	r2, r0, r1
 804b46e:	ec43 2b10 	vmov	d0, r2, r3
 804b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804b474:	42b7      	cmp	r7, r6
 804b476:	bf3a      	itte	cc
 804b478:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 804b47c:	f1a5 0608 	subcc.w	r6, r5, #8
 804b480:	2100      	movcs	r1, #0
 804b482:	380b      	subs	r0, #11
 804b484:	d017      	beq.n	804b4b6 <__b2d+0x92>
 804b486:	f1c0 0c20 	rsb	ip, r0, #32
 804b48a:	fa04 f500 	lsl.w	r5, r4, r0
 804b48e:	42be      	cmp	r6, r7
 804b490:	fa21 f40c 	lsr.w	r4, r1, ip
 804b494:	ea45 0504 	orr.w	r5, r5, r4
 804b498:	bf8c      	ite	hi
 804b49a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 804b49e:	2400      	movls	r4, #0
 804b4a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 804b4a4:	fa01 f000 	lsl.w	r0, r1, r0
 804b4a8:	fa24 f40c 	lsr.w	r4, r4, ip
 804b4ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804b4b0:	ea40 0204 	orr.w	r2, r0, r4
 804b4b4:	e7db      	b.n	804b46e <__b2d+0x4a>
 804b4b6:	ea44 030c 	orr.w	r3, r4, ip
 804b4ba:	460a      	mov	r2, r1
 804b4bc:	e7d7      	b.n	804b46e <__b2d+0x4a>
 804b4be:	bf00      	nop
 804b4c0:	3ff00000 	.word	0x3ff00000

0804b4c4 <__d2b>:
 804b4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 804b4c8:	4689      	mov	r9, r1
 804b4ca:	2101      	movs	r1, #1
 804b4cc:	ec57 6b10 	vmov	r6, r7, d0
 804b4d0:	4690      	mov	r8, r2
 804b4d2:	f7ff fc0f 	bl	804acf4 <_Balloc>
 804b4d6:	4604      	mov	r4, r0
 804b4d8:	b930      	cbnz	r0, 804b4e8 <__d2b+0x24>
 804b4da:	4602      	mov	r2, r0
 804b4dc:	4b25      	ldr	r3, [pc, #148]	; (804b574 <__d2b+0xb0>)
 804b4de:	4826      	ldr	r0, [pc, #152]	; (804b578 <__d2b+0xb4>)
 804b4e0:	f240 310a 	movw	r1, #778	; 0x30a
 804b4e4:	f000 fb10 	bl	804bb08 <__assert_func>
 804b4e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 804b4ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 804b4f0:	bb35      	cbnz	r5, 804b540 <__d2b+0x7c>
 804b4f2:	2e00      	cmp	r6, #0
 804b4f4:	9301      	str	r3, [sp, #4]
 804b4f6:	d028      	beq.n	804b54a <__d2b+0x86>
 804b4f8:	4668      	mov	r0, sp
 804b4fa:	9600      	str	r6, [sp, #0]
 804b4fc:	f7ff fd10 	bl	804af20 <__lo0bits>
 804b500:	9900      	ldr	r1, [sp, #0]
 804b502:	b300      	cbz	r0, 804b546 <__d2b+0x82>
 804b504:	9a01      	ldr	r2, [sp, #4]
 804b506:	f1c0 0320 	rsb	r3, r0, #32
 804b50a:	fa02 f303 	lsl.w	r3, r2, r3
 804b50e:	430b      	orrs	r3, r1
 804b510:	40c2      	lsrs	r2, r0
 804b512:	6163      	str	r3, [r4, #20]
 804b514:	9201      	str	r2, [sp, #4]
 804b516:	9b01      	ldr	r3, [sp, #4]
 804b518:	61a3      	str	r3, [r4, #24]
 804b51a:	2b00      	cmp	r3, #0
 804b51c:	bf14      	ite	ne
 804b51e:	2202      	movne	r2, #2
 804b520:	2201      	moveq	r2, #1
 804b522:	6122      	str	r2, [r4, #16]
 804b524:	b1d5      	cbz	r5, 804b55c <__d2b+0x98>
 804b526:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 804b52a:	4405      	add	r5, r0
 804b52c:	f8c9 5000 	str.w	r5, [r9]
 804b530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 804b534:	f8c8 0000 	str.w	r0, [r8]
 804b538:	4620      	mov	r0, r4
 804b53a:	b003      	add	sp, #12
 804b53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804b540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b544:	e7d5      	b.n	804b4f2 <__d2b+0x2e>
 804b546:	6161      	str	r1, [r4, #20]
 804b548:	e7e5      	b.n	804b516 <__d2b+0x52>
 804b54a:	a801      	add	r0, sp, #4
 804b54c:	f7ff fce8 	bl	804af20 <__lo0bits>
 804b550:	9b01      	ldr	r3, [sp, #4]
 804b552:	6163      	str	r3, [r4, #20]
 804b554:	2201      	movs	r2, #1
 804b556:	6122      	str	r2, [r4, #16]
 804b558:	3020      	adds	r0, #32
 804b55a:	e7e3      	b.n	804b524 <__d2b+0x60>
 804b55c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 804b560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 804b564:	f8c9 0000 	str.w	r0, [r9]
 804b568:	6918      	ldr	r0, [r3, #16]
 804b56a:	f7ff fcb9 	bl	804aee0 <__hi0bits>
 804b56e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 804b572:	e7df      	b.n	804b534 <__d2b+0x70>
 804b574:	0804d9a9 	.word	0x0804d9a9
 804b578:	0804da38 	.word	0x0804da38

0804b57c <__ratio>:
 804b57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b580:	4688      	mov	r8, r1
 804b582:	4669      	mov	r1, sp
 804b584:	4681      	mov	r9, r0
 804b586:	f7ff ff4d 	bl	804b424 <__b2d>
 804b58a:	a901      	add	r1, sp, #4
 804b58c:	4640      	mov	r0, r8
 804b58e:	ec55 4b10 	vmov	r4, r5, d0
 804b592:	f7ff ff47 	bl	804b424 <__b2d>
 804b596:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804b59a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 804b59e:	eba3 0c02 	sub.w	ip, r3, r2
 804b5a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 804b5a6:	1a9b      	subs	r3, r3, r2
 804b5a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 804b5ac:	ec51 0b10 	vmov	r0, r1, d0
 804b5b0:	2b00      	cmp	r3, #0
 804b5b2:	bfd6      	itet	le
 804b5b4:	460a      	movle	r2, r1
 804b5b6:	462a      	movgt	r2, r5
 804b5b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 804b5bc:	468b      	mov	fp, r1
 804b5be:	462f      	mov	r7, r5
 804b5c0:	bfd4      	ite	le
 804b5c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 804b5c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 804b5ca:	4620      	mov	r0, r4
 804b5cc:	ee10 2a10 	vmov	r2, s0
 804b5d0:	465b      	mov	r3, fp
 804b5d2:	4639      	mov	r1, r7
 804b5d4:	f7f5 f93a 	bl	804084c <__aeabi_ddiv>
 804b5d8:	ec41 0b10 	vmov	d0, r0, r1
 804b5dc:	b003      	add	sp, #12
 804b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804b5e2 <__copybits>:
 804b5e2:	3901      	subs	r1, #1
 804b5e4:	b570      	push	{r4, r5, r6, lr}
 804b5e6:	1149      	asrs	r1, r1, #5
 804b5e8:	6914      	ldr	r4, [r2, #16]
 804b5ea:	3101      	adds	r1, #1
 804b5ec:	f102 0314 	add.w	r3, r2, #20
 804b5f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 804b5f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 804b5f8:	1f05      	subs	r5, r0, #4
 804b5fa:	42a3      	cmp	r3, r4
 804b5fc:	d30c      	bcc.n	804b618 <__copybits+0x36>
 804b5fe:	1aa3      	subs	r3, r4, r2
 804b600:	3b11      	subs	r3, #17
 804b602:	f023 0303 	bic.w	r3, r3, #3
 804b606:	3211      	adds	r2, #17
 804b608:	42a2      	cmp	r2, r4
 804b60a:	bf88      	it	hi
 804b60c:	2300      	movhi	r3, #0
 804b60e:	4418      	add	r0, r3
 804b610:	2300      	movs	r3, #0
 804b612:	4288      	cmp	r0, r1
 804b614:	d305      	bcc.n	804b622 <__copybits+0x40>
 804b616:	bd70      	pop	{r4, r5, r6, pc}
 804b618:	f853 6b04 	ldr.w	r6, [r3], #4
 804b61c:	f845 6f04 	str.w	r6, [r5, #4]!
 804b620:	e7eb      	b.n	804b5fa <__copybits+0x18>
 804b622:	f840 3b04 	str.w	r3, [r0], #4
 804b626:	e7f4      	b.n	804b612 <__copybits+0x30>

0804b628 <__any_on>:
 804b628:	f100 0214 	add.w	r2, r0, #20
 804b62c:	6900      	ldr	r0, [r0, #16]
 804b62e:	114b      	asrs	r3, r1, #5
 804b630:	4298      	cmp	r0, r3
 804b632:	b510      	push	{r4, lr}
 804b634:	db11      	blt.n	804b65a <__any_on+0x32>
 804b636:	dd0a      	ble.n	804b64e <__any_on+0x26>
 804b638:	f011 011f 	ands.w	r1, r1, #31
 804b63c:	d007      	beq.n	804b64e <__any_on+0x26>
 804b63e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 804b642:	fa24 f001 	lsr.w	r0, r4, r1
 804b646:	fa00 f101 	lsl.w	r1, r0, r1
 804b64a:	428c      	cmp	r4, r1
 804b64c:	d10b      	bne.n	804b666 <__any_on+0x3e>
 804b64e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 804b652:	4293      	cmp	r3, r2
 804b654:	d803      	bhi.n	804b65e <__any_on+0x36>
 804b656:	2000      	movs	r0, #0
 804b658:	bd10      	pop	{r4, pc}
 804b65a:	4603      	mov	r3, r0
 804b65c:	e7f7      	b.n	804b64e <__any_on+0x26>
 804b65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 804b662:	2900      	cmp	r1, #0
 804b664:	d0f5      	beq.n	804b652 <__any_on+0x2a>
 804b666:	2001      	movs	r0, #1
 804b668:	e7f6      	b.n	804b658 <__any_on+0x30>

0804b66a <_calloc_r>:
 804b66a:	b513      	push	{r0, r1, r4, lr}
 804b66c:	434a      	muls	r2, r1
 804b66e:	4611      	mov	r1, r2
 804b670:	9201      	str	r2, [sp, #4]
 804b672:	f000 f859 	bl	804b728 <_malloc_r>
 804b676:	4604      	mov	r4, r0
 804b678:	b118      	cbz	r0, 804b682 <_calloc_r+0x18>
 804b67a:	9a01      	ldr	r2, [sp, #4]
 804b67c:	2100      	movs	r1, #0
 804b67e:	f7fc fb93 	bl	8047da8 <memset>
 804b682:	4620      	mov	r0, r4
 804b684:	b002      	add	sp, #8
 804b686:	bd10      	pop	{r4, pc}

0804b688 <_free_r>:
 804b688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804b68a:	2900      	cmp	r1, #0
 804b68c:	d048      	beq.n	804b720 <_free_r+0x98>
 804b68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804b692:	9001      	str	r0, [sp, #4]
 804b694:	2b00      	cmp	r3, #0
 804b696:	f1a1 0404 	sub.w	r4, r1, #4
 804b69a:	bfb8      	it	lt
 804b69c:	18e4      	addlt	r4, r4, r3
 804b69e:	f000 fa7d 	bl	804bb9c <__malloc_lock>
 804b6a2:	4a20      	ldr	r2, [pc, #128]	; (804b724 <_free_r+0x9c>)
 804b6a4:	9801      	ldr	r0, [sp, #4]
 804b6a6:	6813      	ldr	r3, [r2, #0]
 804b6a8:	4615      	mov	r5, r2
 804b6aa:	b933      	cbnz	r3, 804b6ba <_free_r+0x32>
 804b6ac:	6063      	str	r3, [r4, #4]
 804b6ae:	6014      	str	r4, [r2, #0]
 804b6b0:	b003      	add	sp, #12
 804b6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804b6b6:	f000 ba77 	b.w	804bba8 <__malloc_unlock>
 804b6ba:	42a3      	cmp	r3, r4
 804b6bc:	d90b      	bls.n	804b6d6 <_free_r+0x4e>
 804b6be:	6821      	ldr	r1, [r4, #0]
 804b6c0:	1862      	adds	r2, r4, r1
 804b6c2:	4293      	cmp	r3, r2
 804b6c4:	bf04      	itt	eq
 804b6c6:	681a      	ldreq	r2, [r3, #0]
 804b6c8:	685b      	ldreq	r3, [r3, #4]
 804b6ca:	6063      	str	r3, [r4, #4]
 804b6cc:	bf04      	itt	eq
 804b6ce:	1852      	addeq	r2, r2, r1
 804b6d0:	6022      	streq	r2, [r4, #0]
 804b6d2:	602c      	str	r4, [r5, #0]
 804b6d4:	e7ec      	b.n	804b6b0 <_free_r+0x28>
 804b6d6:	461a      	mov	r2, r3
 804b6d8:	685b      	ldr	r3, [r3, #4]
 804b6da:	b10b      	cbz	r3, 804b6e0 <_free_r+0x58>
 804b6dc:	42a3      	cmp	r3, r4
 804b6de:	d9fa      	bls.n	804b6d6 <_free_r+0x4e>
 804b6e0:	6811      	ldr	r1, [r2, #0]
 804b6e2:	1855      	adds	r5, r2, r1
 804b6e4:	42a5      	cmp	r5, r4
 804b6e6:	d10b      	bne.n	804b700 <_free_r+0x78>
 804b6e8:	6824      	ldr	r4, [r4, #0]
 804b6ea:	4421      	add	r1, r4
 804b6ec:	1854      	adds	r4, r2, r1
 804b6ee:	42a3      	cmp	r3, r4
 804b6f0:	6011      	str	r1, [r2, #0]
 804b6f2:	d1dd      	bne.n	804b6b0 <_free_r+0x28>
 804b6f4:	681c      	ldr	r4, [r3, #0]
 804b6f6:	685b      	ldr	r3, [r3, #4]
 804b6f8:	6053      	str	r3, [r2, #4]
 804b6fa:	4421      	add	r1, r4
 804b6fc:	6011      	str	r1, [r2, #0]
 804b6fe:	e7d7      	b.n	804b6b0 <_free_r+0x28>
 804b700:	d902      	bls.n	804b708 <_free_r+0x80>
 804b702:	230c      	movs	r3, #12
 804b704:	6003      	str	r3, [r0, #0]
 804b706:	e7d3      	b.n	804b6b0 <_free_r+0x28>
 804b708:	6825      	ldr	r5, [r4, #0]
 804b70a:	1961      	adds	r1, r4, r5
 804b70c:	428b      	cmp	r3, r1
 804b70e:	bf04      	itt	eq
 804b710:	6819      	ldreq	r1, [r3, #0]
 804b712:	685b      	ldreq	r3, [r3, #4]
 804b714:	6063      	str	r3, [r4, #4]
 804b716:	bf04      	itt	eq
 804b718:	1949      	addeq	r1, r1, r5
 804b71a:	6021      	streq	r1, [r4, #0]
 804b71c:	6054      	str	r4, [r2, #4]
 804b71e:	e7c7      	b.n	804b6b0 <_free_r+0x28>
 804b720:	b003      	add	sp, #12
 804b722:	bd30      	pop	{r4, r5, pc}
 804b724:	2000ecac 	.word	0x2000ecac

0804b728 <_malloc_r>:
 804b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b72a:	1ccd      	adds	r5, r1, #3
 804b72c:	f025 0503 	bic.w	r5, r5, #3
 804b730:	3508      	adds	r5, #8
 804b732:	2d0c      	cmp	r5, #12
 804b734:	bf38      	it	cc
 804b736:	250c      	movcc	r5, #12
 804b738:	2d00      	cmp	r5, #0
 804b73a:	4606      	mov	r6, r0
 804b73c:	db01      	blt.n	804b742 <_malloc_r+0x1a>
 804b73e:	42a9      	cmp	r1, r5
 804b740:	d903      	bls.n	804b74a <_malloc_r+0x22>
 804b742:	230c      	movs	r3, #12
 804b744:	6033      	str	r3, [r6, #0]
 804b746:	2000      	movs	r0, #0
 804b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804b74a:	f000 fa27 	bl	804bb9c <__malloc_lock>
 804b74e:	4921      	ldr	r1, [pc, #132]	; (804b7d4 <_malloc_r+0xac>)
 804b750:	680a      	ldr	r2, [r1, #0]
 804b752:	4614      	mov	r4, r2
 804b754:	b99c      	cbnz	r4, 804b77e <_malloc_r+0x56>
 804b756:	4f20      	ldr	r7, [pc, #128]	; (804b7d8 <_malloc_r+0xb0>)
 804b758:	683b      	ldr	r3, [r7, #0]
 804b75a:	b923      	cbnz	r3, 804b766 <_malloc_r+0x3e>
 804b75c:	4621      	mov	r1, r4
 804b75e:	4630      	mov	r0, r6
 804b760:	f000 f9a2 	bl	804baa8 <_sbrk_r>
 804b764:	6038      	str	r0, [r7, #0]
 804b766:	4629      	mov	r1, r5
 804b768:	4630      	mov	r0, r6
 804b76a:	f000 f99d 	bl	804baa8 <_sbrk_r>
 804b76e:	1c43      	adds	r3, r0, #1
 804b770:	d123      	bne.n	804b7ba <_malloc_r+0x92>
 804b772:	230c      	movs	r3, #12
 804b774:	6033      	str	r3, [r6, #0]
 804b776:	4630      	mov	r0, r6
 804b778:	f000 fa16 	bl	804bba8 <__malloc_unlock>
 804b77c:	e7e3      	b.n	804b746 <_malloc_r+0x1e>
 804b77e:	6823      	ldr	r3, [r4, #0]
 804b780:	1b5b      	subs	r3, r3, r5
 804b782:	d417      	bmi.n	804b7b4 <_malloc_r+0x8c>
 804b784:	2b0b      	cmp	r3, #11
 804b786:	d903      	bls.n	804b790 <_malloc_r+0x68>
 804b788:	6023      	str	r3, [r4, #0]
 804b78a:	441c      	add	r4, r3
 804b78c:	6025      	str	r5, [r4, #0]
 804b78e:	e004      	b.n	804b79a <_malloc_r+0x72>
 804b790:	6863      	ldr	r3, [r4, #4]
 804b792:	42a2      	cmp	r2, r4
 804b794:	bf0c      	ite	eq
 804b796:	600b      	streq	r3, [r1, #0]
 804b798:	6053      	strne	r3, [r2, #4]
 804b79a:	4630      	mov	r0, r6
 804b79c:	f000 fa04 	bl	804bba8 <__malloc_unlock>
 804b7a0:	f104 000b 	add.w	r0, r4, #11
 804b7a4:	1d23      	adds	r3, r4, #4
 804b7a6:	f020 0007 	bic.w	r0, r0, #7
 804b7aa:	1ac2      	subs	r2, r0, r3
 804b7ac:	d0cc      	beq.n	804b748 <_malloc_r+0x20>
 804b7ae:	1a1b      	subs	r3, r3, r0
 804b7b0:	50a3      	str	r3, [r4, r2]
 804b7b2:	e7c9      	b.n	804b748 <_malloc_r+0x20>
 804b7b4:	4622      	mov	r2, r4
 804b7b6:	6864      	ldr	r4, [r4, #4]
 804b7b8:	e7cc      	b.n	804b754 <_malloc_r+0x2c>
 804b7ba:	1cc4      	adds	r4, r0, #3
 804b7bc:	f024 0403 	bic.w	r4, r4, #3
 804b7c0:	42a0      	cmp	r0, r4
 804b7c2:	d0e3      	beq.n	804b78c <_malloc_r+0x64>
 804b7c4:	1a21      	subs	r1, r4, r0
 804b7c6:	4630      	mov	r0, r6
 804b7c8:	f000 f96e 	bl	804baa8 <_sbrk_r>
 804b7cc:	3001      	adds	r0, #1
 804b7ce:	d1dd      	bne.n	804b78c <_malloc_r+0x64>
 804b7d0:	e7cf      	b.n	804b772 <_malloc_r+0x4a>
 804b7d2:	bf00      	nop
 804b7d4:	2000ecac 	.word	0x2000ecac
 804b7d8:	2000ecb0 	.word	0x2000ecb0

0804b7dc <__ssputs_r>:
 804b7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b7e0:	688e      	ldr	r6, [r1, #8]
 804b7e2:	429e      	cmp	r6, r3
 804b7e4:	4682      	mov	sl, r0
 804b7e6:	460c      	mov	r4, r1
 804b7e8:	4690      	mov	r8, r2
 804b7ea:	461f      	mov	r7, r3
 804b7ec:	d838      	bhi.n	804b860 <__ssputs_r+0x84>
 804b7ee:	898a      	ldrh	r2, [r1, #12]
 804b7f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804b7f4:	d032      	beq.n	804b85c <__ssputs_r+0x80>
 804b7f6:	6825      	ldr	r5, [r4, #0]
 804b7f8:	6909      	ldr	r1, [r1, #16]
 804b7fa:	eba5 0901 	sub.w	r9, r5, r1
 804b7fe:	6965      	ldr	r5, [r4, #20]
 804b800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804b804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804b808:	3301      	adds	r3, #1
 804b80a:	444b      	add	r3, r9
 804b80c:	106d      	asrs	r5, r5, #1
 804b80e:	429d      	cmp	r5, r3
 804b810:	bf38      	it	cc
 804b812:	461d      	movcc	r5, r3
 804b814:	0553      	lsls	r3, r2, #21
 804b816:	d531      	bpl.n	804b87c <__ssputs_r+0xa0>
 804b818:	4629      	mov	r1, r5
 804b81a:	f7ff ff85 	bl	804b728 <_malloc_r>
 804b81e:	4606      	mov	r6, r0
 804b820:	b950      	cbnz	r0, 804b838 <__ssputs_r+0x5c>
 804b822:	230c      	movs	r3, #12
 804b824:	f8ca 3000 	str.w	r3, [sl]
 804b828:	89a3      	ldrh	r3, [r4, #12]
 804b82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804b82e:	81a3      	strh	r3, [r4, #12]
 804b830:	f04f 30ff 	mov.w	r0, #4294967295
 804b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b838:	6921      	ldr	r1, [r4, #16]
 804b83a:	464a      	mov	r2, r9
 804b83c:	f7fc faa6 	bl	8047d8c <memcpy>
 804b840:	89a3      	ldrh	r3, [r4, #12]
 804b842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804b846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804b84a:	81a3      	strh	r3, [r4, #12]
 804b84c:	6126      	str	r6, [r4, #16]
 804b84e:	6165      	str	r5, [r4, #20]
 804b850:	444e      	add	r6, r9
 804b852:	eba5 0509 	sub.w	r5, r5, r9
 804b856:	6026      	str	r6, [r4, #0]
 804b858:	60a5      	str	r5, [r4, #8]
 804b85a:	463e      	mov	r6, r7
 804b85c:	42be      	cmp	r6, r7
 804b85e:	d900      	bls.n	804b862 <__ssputs_r+0x86>
 804b860:	463e      	mov	r6, r7
 804b862:	4632      	mov	r2, r6
 804b864:	6820      	ldr	r0, [r4, #0]
 804b866:	4641      	mov	r1, r8
 804b868:	f000 f97e 	bl	804bb68 <memmove>
 804b86c:	68a3      	ldr	r3, [r4, #8]
 804b86e:	6822      	ldr	r2, [r4, #0]
 804b870:	1b9b      	subs	r3, r3, r6
 804b872:	4432      	add	r2, r6
 804b874:	60a3      	str	r3, [r4, #8]
 804b876:	6022      	str	r2, [r4, #0]
 804b878:	2000      	movs	r0, #0
 804b87a:	e7db      	b.n	804b834 <__ssputs_r+0x58>
 804b87c:	462a      	mov	r2, r5
 804b87e:	f000 f999 	bl	804bbb4 <_realloc_r>
 804b882:	4606      	mov	r6, r0
 804b884:	2800      	cmp	r0, #0
 804b886:	d1e1      	bne.n	804b84c <__ssputs_r+0x70>
 804b888:	6921      	ldr	r1, [r4, #16]
 804b88a:	4650      	mov	r0, sl
 804b88c:	f7ff fefc 	bl	804b688 <_free_r>
 804b890:	e7c7      	b.n	804b822 <__ssputs_r+0x46>
	...

0804b894 <_svfiprintf_r>:
 804b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b898:	4698      	mov	r8, r3
 804b89a:	898b      	ldrh	r3, [r1, #12]
 804b89c:	061b      	lsls	r3, r3, #24
 804b89e:	b09d      	sub	sp, #116	; 0x74
 804b8a0:	4607      	mov	r7, r0
 804b8a2:	460d      	mov	r5, r1
 804b8a4:	4614      	mov	r4, r2
 804b8a6:	d50e      	bpl.n	804b8c6 <_svfiprintf_r+0x32>
 804b8a8:	690b      	ldr	r3, [r1, #16]
 804b8aa:	b963      	cbnz	r3, 804b8c6 <_svfiprintf_r+0x32>
 804b8ac:	2140      	movs	r1, #64	; 0x40
 804b8ae:	f7ff ff3b 	bl	804b728 <_malloc_r>
 804b8b2:	6028      	str	r0, [r5, #0]
 804b8b4:	6128      	str	r0, [r5, #16]
 804b8b6:	b920      	cbnz	r0, 804b8c2 <_svfiprintf_r+0x2e>
 804b8b8:	230c      	movs	r3, #12
 804b8ba:	603b      	str	r3, [r7, #0]
 804b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 804b8c0:	e0d1      	b.n	804ba66 <_svfiprintf_r+0x1d2>
 804b8c2:	2340      	movs	r3, #64	; 0x40
 804b8c4:	616b      	str	r3, [r5, #20]
 804b8c6:	2300      	movs	r3, #0
 804b8c8:	9309      	str	r3, [sp, #36]	; 0x24
 804b8ca:	2320      	movs	r3, #32
 804b8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804b8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 804b8d4:	2330      	movs	r3, #48	; 0x30
 804b8d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804ba80 <_svfiprintf_r+0x1ec>
 804b8da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804b8de:	f04f 0901 	mov.w	r9, #1
 804b8e2:	4623      	mov	r3, r4
 804b8e4:	469a      	mov	sl, r3
 804b8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b8ea:	b10a      	cbz	r2, 804b8f0 <_svfiprintf_r+0x5c>
 804b8ec:	2a25      	cmp	r2, #37	; 0x25
 804b8ee:	d1f9      	bne.n	804b8e4 <_svfiprintf_r+0x50>
 804b8f0:	ebba 0b04 	subs.w	fp, sl, r4
 804b8f4:	d00b      	beq.n	804b90e <_svfiprintf_r+0x7a>
 804b8f6:	465b      	mov	r3, fp
 804b8f8:	4622      	mov	r2, r4
 804b8fa:	4629      	mov	r1, r5
 804b8fc:	4638      	mov	r0, r7
 804b8fe:	f7ff ff6d 	bl	804b7dc <__ssputs_r>
 804b902:	3001      	adds	r0, #1
 804b904:	f000 80aa 	beq.w	804ba5c <_svfiprintf_r+0x1c8>
 804b908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804b90a:	445a      	add	r2, fp
 804b90c:	9209      	str	r2, [sp, #36]	; 0x24
 804b90e:	f89a 3000 	ldrb.w	r3, [sl]
 804b912:	2b00      	cmp	r3, #0
 804b914:	f000 80a2 	beq.w	804ba5c <_svfiprintf_r+0x1c8>
 804b918:	2300      	movs	r3, #0
 804b91a:	f04f 32ff 	mov.w	r2, #4294967295
 804b91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b922:	f10a 0a01 	add.w	sl, sl, #1
 804b926:	9304      	str	r3, [sp, #16]
 804b928:	9307      	str	r3, [sp, #28]
 804b92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804b92e:	931a      	str	r3, [sp, #104]	; 0x68
 804b930:	4654      	mov	r4, sl
 804b932:	2205      	movs	r2, #5
 804b934:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b938:	4851      	ldr	r0, [pc, #324]	; (804ba80 <_svfiprintf_r+0x1ec>)
 804b93a:	f7f4 fc51 	bl	80401e0 <memchr>
 804b93e:	9a04      	ldr	r2, [sp, #16]
 804b940:	b9d8      	cbnz	r0, 804b97a <_svfiprintf_r+0xe6>
 804b942:	06d0      	lsls	r0, r2, #27
 804b944:	bf44      	itt	mi
 804b946:	2320      	movmi	r3, #32
 804b948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804b94c:	0711      	lsls	r1, r2, #28
 804b94e:	bf44      	itt	mi
 804b950:	232b      	movmi	r3, #43	; 0x2b
 804b952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804b956:	f89a 3000 	ldrb.w	r3, [sl]
 804b95a:	2b2a      	cmp	r3, #42	; 0x2a
 804b95c:	d015      	beq.n	804b98a <_svfiprintf_r+0xf6>
 804b95e:	9a07      	ldr	r2, [sp, #28]
 804b960:	4654      	mov	r4, sl
 804b962:	2000      	movs	r0, #0
 804b964:	f04f 0c0a 	mov.w	ip, #10
 804b968:	4621      	mov	r1, r4
 804b96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b96e:	3b30      	subs	r3, #48	; 0x30
 804b970:	2b09      	cmp	r3, #9
 804b972:	d94e      	bls.n	804ba12 <_svfiprintf_r+0x17e>
 804b974:	b1b0      	cbz	r0, 804b9a4 <_svfiprintf_r+0x110>
 804b976:	9207      	str	r2, [sp, #28]
 804b978:	e014      	b.n	804b9a4 <_svfiprintf_r+0x110>
 804b97a:	eba0 0308 	sub.w	r3, r0, r8
 804b97e:	fa09 f303 	lsl.w	r3, r9, r3
 804b982:	4313      	orrs	r3, r2
 804b984:	9304      	str	r3, [sp, #16]
 804b986:	46a2      	mov	sl, r4
 804b988:	e7d2      	b.n	804b930 <_svfiprintf_r+0x9c>
 804b98a:	9b03      	ldr	r3, [sp, #12]
 804b98c:	1d19      	adds	r1, r3, #4
 804b98e:	681b      	ldr	r3, [r3, #0]
 804b990:	9103      	str	r1, [sp, #12]
 804b992:	2b00      	cmp	r3, #0
 804b994:	bfbb      	ittet	lt
 804b996:	425b      	neglt	r3, r3
 804b998:	f042 0202 	orrlt.w	r2, r2, #2
 804b99c:	9307      	strge	r3, [sp, #28]
 804b99e:	9307      	strlt	r3, [sp, #28]
 804b9a0:	bfb8      	it	lt
 804b9a2:	9204      	strlt	r2, [sp, #16]
 804b9a4:	7823      	ldrb	r3, [r4, #0]
 804b9a6:	2b2e      	cmp	r3, #46	; 0x2e
 804b9a8:	d10c      	bne.n	804b9c4 <_svfiprintf_r+0x130>
 804b9aa:	7863      	ldrb	r3, [r4, #1]
 804b9ac:	2b2a      	cmp	r3, #42	; 0x2a
 804b9ae:	d135      	bne.n	804ba1c <_svfiprintf_r+0x188>
 804b9b0:	9b03      	ldr	r3, [sp, #12]
 804b9b2:	1d1a      	adds	r2, r3, #4
 804b9b4:	681b      	ldr	r3, [r3, #0]
 804b9b6:	9203      	str	r2, [sp, #12]
 804b9b8:	2b00      	cmp	r3, #0
 804b9ba:	bfb8      	it	lt
 804b9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 804b9c0:	3402      	adds	r4, #2
 804b9c2:	9305      	str	r3, [sp, #20]
 804b9c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804ba90 <_svfiprintf_r+0x1fc>
 804b9c8:	7821      	ldrb	r1, [r4, #0]
 804b9ca:	2203      	movs	r2, #3
 804b9cc:	4650      	mov	r0, sl
 804b9ce:	f7f4 fc07 	bl	80401e0 <memchr>
 804b9d2:	b140      	cbz	r0, 804b9e6 <_svfiprintf_r+0x152>
 804b9d4:	2340      	movs	r3, #64	; 0x40
 804b9d6:	eba0 000a 	sub.w	r0, r0, sl
 804b9da:	fa03 f000 	lsl.w	r0, r3, r0
 804b9de:	9b04      	ldr	r3, [sp, #16]
 804b9e0:	4303      	orrs	r3, r0
 804b9e2:	3401      	adds	r4, #1
 804b9e4:	9304      	str	r3, [sp, #16]
 804b9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b9ea:	4826      	ldr	r0, [pc, #152]	; (804ba84 <_svfiprintf_r+0x1f0>)
 804b9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804b9f0:	2206      	movs	r2, #6
 804b9f2:	f7f4 fbf5 	bl	80401e0 <memchr>
 804b9f6:	2800      	cmp	r0, #0
 804b9f8:	d038      	beq.n	804ba6c <_svfiprintf_r+0x1d8>
 804b9fa:	4b23      	ldr	r3, [pc, #140]	; (804ba88 <_svfiprintf_r+0x1f4>)
 804b9fc:	bb1b      	cbnz	r3, 804ba46 <_svfiprintf_r+0x1b2>
 804b9fe:	9b03      	ldr	r3, [sp, #12]
 804ba00:	3307      	adds	r3, #7
 804ba02:	f023 0307 	bic.w	r3, r3, #7
 804ba06:	3308      	adds	r3, #8
 804ba08:	9303      	str	r3, [sp, #12]
 804ba0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804ba0c:	4433      	add	r3, r6
 804ba0e:	9309      	str	r3, [sp, #36]	; 0x24
 804ba10:	e767      	b.n	804b8e2 <_svfiprintf_r+0x4e>
 804ba12:	fb0c 3202 	mla	r2, ip, r2, r3
 804ba16:	460c      	mov	r4, r1
 804ba18:	2001      	movs	r0, #1
 804ba1a:	e7a5      	b.n	804b968 <_svfiprintf_r+0xd4>
 804ba1c:	2300      	movs	r3, #0
 804ba1e:	3401      	adds	r4, #1
 804ba20:	9305      	str	r3, [sp, #20]
 804ba22:	4619      	mov	r1, r3
 804ba24:	f04f 0c0a 	mov.w	ip, #10
 804ba28:	4620      	mov	r0, r4
 804ba2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 804ba2e:	3a30      	subs	r2, #48	; 0x30
 804ba30:	2a09      	cmp	r2, #9
 804ba32:	d903      	bls.n	804ba3c <_svfiprintf_r+0x1a8>
 804ba34:	2b00      	cmp	r3, #0
 804ba36:	d0c5      	beq.n	804b9c4 <_svfiprintf_r+0x130>
 804ba38:	9105      	str	r1, [sp, #20]
 804ba3a:	e7c3      	b.n	804b9c4 <_svfiprintf_r+0x130>
 804ba3c:	fb0c 2101 	mla	r1, ip, r1, r2
 804ba40:	4604      	mov	r4, r0
 804ba42:	2301      	movs	r3, #1
 804ba44:	e7f0      	b.n	804ba28 <_svfiprintf_r+0x194>
 804ba46:	ab03      	add	r3, sp, #12
 804ba48:	9300      	str	r3, [sp, #0]
 804ba4a:	462a      	mov	r2, r5
 804ba4c:	4b0f      	ldr	r3, [pc, #60]	; (804ba8c <_svfiprintf_r+0x1f8>)
 804ba4e:	a904      	add	r1, sp, #16
 804ba50:	4638      	mov	r0, r7
 804ba52:	f7fc fa51 	bl	8047ef8 <_printf_float>
 804ba56:	1c42      	adds	r2, r0, #1
 804ba58:	4606      	mov	r6, r0
 804ba5a:	d1d6      	bne.n	804ba0a <_svfiprintf_r+0x176>
 804ba5c:	89ab      	ldrh	r3, [r5, #12]
 804ba5e:	065b      	lsls	r3, r3, #25
 804ba60:	f53f af2c 	bmi.w	804b8bc <_svfiprintf_r+0x28>
 804ba64:	9809      	ldr	r0, [sp, #36]	; 0x24
 804ba66:	b01d      	add	sp, #116	; 0x74
 804ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804ba6c:	ab03      	add	r3, sp, #12
 804ba6e:	9300      	str	r3, [sp, #0]
 804ba70:	462a      	mov	r2, r5
 804ba72:	4b06      	ldr	r3, [pc, #24]	; (804ba8c <_svfiprintf_r+0x1f8>)
 804ba74:	a904      	add	r1, sp, #16
 804ba76:	4638      	mov	r0, r7
 804ba78:	f7fc fce2 	bl	8048440 <_printf_i>
 804ba7c:	e7eb      	b.n	804ba56 <_svfiprintf_r+0x1c2>
 804ba7e:	bf00      	nop
 804ba80:	0804db94 	.word	0x0804db94
 804ba84:	0804db9e 	.word	0x0804db9e
 804ba88:	08047ef9 	.word	0x08047ef9
 804ba8c:	0804b7dd 	.word	0x0804b7dd
 804ba90:	0804db9a 	.word	0x0804db9a
 804ba94:	00000000 	.word	0x00000000

0804ba98 <nan>:
 804ba98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 804baa0 <nan+0x8>
 804ba9c:	4770      	bx	lr
 804ba9e:	bf00      	nop
 804baa0:	00000000 	.word	0x00000000
 804baa4:	7ff80000 	.word	0x7ff80000

0804baa8 <_sbrk_r>:
 804baa8:	b538      	push	{r3, r4, r5, lr}
 804baaa:	4d06      	ldr	r5, [pc, #24]	; (804bac4 <_sbrk_r+0x1c>)
 804baac:	2300      	movs	r3, #0
 804baae:	4604      	mov	r4, r0
 804bab0:	4608      	mov	r0, r1
 804bab2:	602b      	str	r3, [r5, #0]
 804bab4:	f7f8 fafc 	bl	80440b0 <_sbrk>
 804bab8:	1c43      	adds	r3, r0, #1
 804baba:	d102      	bne.n	804bac2 <_sbrk_r+0x1a>
 804babc:	682b      	ldr	r3, [r5, #0]
 804babe:	b103      	cbz	r3, 804bac2 <_sbrk_r+0x1a>
 804bac0:	6023      	str	r3, [r4, #0]
 804bac2:	bd38      	pop	{r3, r4, r5, pc}
 804bac4:	2000ef90 	.word	0x2000ef90

0804bac8 <strncmp>:
 804bac8:	b510      	push	{r4, lr}
 804baca:	b16a      	cbz	r2, 804bae8 <strncmp+0x20>
 804bacc:	3901      	subs	r1, #1
 804bace:	1884      	adds	r4, r0, r2
 804bad0:	f810 3b01 	ldrb.w	r3, [r0], #1
 804bad4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 804bad8:	4293      	cmp	r3, r2
 804bada:	d103      	bne.n	804bae4 <strncmp+0x1c>
 804badc:	42a0      	cmp	r0, r4
 804bade:	d001      	beq.n	804bae4 <strncmp+0x1c>
 804bae0:	2b00      	cmp	r3, #0
 804bae2:	d1f5      	bne.n	804bad0 <strncmp+0x8>
 804bae4:	1a98      	subs	r0, r3, r2
 804bae6:	bd10      	pop	{r4, pc}
 804bae8:	4610      	mov	r0, r2
 804baea:	e7fc      	b.n	804bae6 <strncmp+0x1e>

0804baec <__ascii_wctomb>:
 804baec:	b149      	cbz	r1, 804bb02 <__ascii_wctomb+0x16>
 804baee:	2aff      	cmp	r2, #255	; 0xff
 804baf0:	bf85      	ittet	hi
 804baf2:	238a      	movhi	r3, #138	; 0x8a
 804baf4:	6003      	strhi	r3, [r0, #0]
 804baf6:	700a      	strbls	r2, [r1, #0]
 804baf8:	f04f 30ff 	movhi.w	r0, #4294967295
 804bafc:	bf98      	it	ls
 804bafe:	2001      	movls	r0, #1
 804bb00:	4770      	bx	lr
 804bb02:	4608      	mov	r0, r1
 804bb04:	4770      	bx	lr
	...

0804bb08 <__assert_func>:
 804bb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804bb0a:	4614      	mov	r4, r2
 804bb0c:	461a      	mov	r2, r3
 804bb0e:	4b09      	ldr	r3, [pc, #36]	; (804bb34 <__assert_func+0x2c>)
 804bb10:	681b      	ldr	r3, [r3, #0]
 804bb12:	4605      	mov	r5, r0
 804bb14:	68d8      	ldr	r0, [r3, #12]
 804bb16:	b14c      	cbz	r4, 804bb2c <__assert_func+0x24>
 804bb18:	4b07      	ldr	r3, [pc, #28]	; (804bb38 <__assert_func+0x30>)
 804bb1a:	9100      	str	r1, [sp, #0]
 804bb1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804bb20:	4906      	ldr	r1, [pc, #24]	; (804bb3c <__assert_func+0x34>)
 804bb22:	462b      	mov	r3, r5
 804bb24:	f000 f80e 	bl	804bb44 <fiprintf>
 804bb28:	f000 fa84 	bl	804c034 <abort>
 804bb2c:	4b04      	ldr	r3, [pc, #16]	; (804bb40 <__assert_func+0x38>)
 804bb2e:	461c      	mov	r4, r3
 804bb30:	e7f3      	b.n	804bb1a <__assert_func+0x12>
 804bb32:	bf00      	nop
 804bb34:	20000018 	.word	0x20000018
 804bb38:	0804dba5 	.word	0x0804dba5
 804bb3c:	0804dbb2 	.word	0x0804dbb2
 804bb40:	0804dbe0 	.word	0x0804dbe0

0804bb44 <fiprintf>:
 804bb44:	b40e      	push	{r1, r2, r3}
 804bb46:	b503      	push	{r0, r1, lr}
 804bb48:	4601      	mov	r1, r0
 804bb4a:	ab03      	add	r3, sp, #12
 804bb4c:	4805      	ldr	r0, [pc, #20]	; (804bb64 <fiprintf+0x20>)
 804bb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 804bb52:	6800      	ldr	r0, [r0, #0]
 804bb54:	9301      	str	r3, [sp, #4]
 804bb56:	f000 f87d 	bl	804bc54 <_vfiprintf_r>
 804bb5a:	b002      	add	sp, #8
 804bb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 804bb60:	b003      	add	sp, #12
 804bb62:	4770      	bx	lr
 804bb64:	20000018 	.word	0x20000018

0804bb68 <memmove>:
 804bb68:	4288      	cmp	r0, r1
 804bb6a:	b510      	push	{r4, lr}
 804bb6c:	eb01 0402 	add.w	r4, r1, r2
 804bb70:	d902      	bls.n	804bb78 <memmove+0x10>
 804bb72:	4284      	cmp	r4, r0
 804bb74:	4623      	mov	r3, r4
 804bb76:	d807      	bhi.n	804bb88 <memmove+0x20>
 804bb78:	1e43      	subs	r3, r0, #1
 804bb7a:	42a1      	cmp	r1, r4
 804bb7c:	d008      	beq.n	804bb90 <memmove+0x28>
 804bb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 804bb82:	f803 2f01 	strb.w	r2, [r3, #1]!
 804bb86:	e7f8      	b.n	804bb7a <memmove+0x12>
 804bb88:	4402      	add	r2, r0
 804bb8a:	4601      	mov	r1, r0
 804bb8c:	428a      	cmp	r2, r1
 804bb8e:	d100      	bne.n	804bb92 <memmove+0x2a>
 804bb90:	bd10      	pop	{r4, pc}
 804bb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804bb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804bb9a:	e7f7      	b.n	804bb8c <memmove+0x24>

0804bb9c <__malloc_lock>:
 804bb9c:	4801      	ldr	r0, [pc, #4]	; (804bba4 <__malloc_lock+0x8>)
 804bb9e:	f000 bc09 	b.w	804c3b4 <__retarget_lock_acquire_recursive>
 804bba2:	bf00      	nop
 804bba4:	2000ef98 	.word	0x2000ef98

0804bba8 <__malloc_unlock>:
 804bba8:	4801      	ldr	r0, [pc, #4]	; (804bbb0 <__malloc_unlock+0x8>)
 804bbaa:	f000 bc04 	b.w	804c3b6 <__retarget_lock_release_recursive>
 804bbae:	bf00      	nop
 804bbb0:	2000ef98 	.word	0x2000ef98

0804bbb4 <_realloc_r>:
 804bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bbb6:	4607      	mov	r7, r0
 804bbb8:	4614      	mov	r4, r2
 804bbba:	460e      	mov	r6, r1
 804bbbc:	b921      	cbnz	r1, 804bbc8 <_realloc_r+0x14>
 804bbbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 804bbc2:	4611      	mov	r1, r2
 804bbc4:	f7ff bdb0 	b.w	804b728 <_malloc_r>
 804bbc8:	b922      	cbnz	r2, 804bbd4 <_realloc_r+0x20>
 804bbca:	f7ff fd5d 	bl	804b688 <_free_r>
 804bbce:	4625      	mov	r5, r4
 804bbd0:	4628      	mov	r0, r5
 804bbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bbd4:	f000 fc54 	bl	804c480 <_malloc_usable_size_r>
 804bbd8:	42a0      	cmp	r0, r4
 804bbda:	d20f      	bcs.n	804bbfc <_realloc_r+0x48>
 804bbdc:	4621      	mov	r1, r4
 804bbde:	4638      	mov	r0, r7
 804bbe0:	f7ff fda2 	bl	804b728 <_malloc_r>
 804bbe4:	4605      	mov	r5, r0
 804bbe6:	2800      	cmp	r0, #0
 804bbe8:	d0f2      	beq.n	804bbd0 <_realloc_r+0x1c>
 804bbea:	4631      	mov	r1, r6
 804bbec:	4622      	mov	r2, r4
 804bbee:	f7fc f8cd 	bl	8047d8c <memcpy>
 804bbf2:	4631      	mov	r1, r6
 804bbf4:	4638      	mov	r0, r7
 804bbf6:	f7ff fd47 	bl	804b688 <_free_r>
 804bbfa:	e7e9      	b.n	804bbd0 <_realloc_r+0x1c>
 804bbfc:	4635      	mov	r5, r6
 804bbfe:	e7e7      	b.n	804bbd0 <_realloc_r+0x1c>

0804bc00 <__sfputc_r>:
 804bc00:	6893      	ldr	r3, [r2, #8]
 804bc02:	3b01      	subs	r3, #1
 804bc04:	2b00      	cmp	r3, #0
 804bc06:	b410      	push	{r4}
 804bc08:	6093      	str	r3, [r2, #8]
 804bc0a:	da08      	bge.n	804bc1e <__sfputc_r+0x1e>
 804bc0c:	6994      	ldr	r4, [r2, #24]
 804bc0e:	42a3      	cmp	r3, r4
 804bc10:	db01      	blt.n	804bc16 <__sfputc_r+0x16>
 804bc12:	290a      	cmp	r1, #10
 804bc14:	d103      	bne.n	804bc1e <__sfputc_r+0x1e>
 804bc16:	f85d 4b04 	ldr.w	r4, [sp], #4
 804bc1a:	f000 b94b 	b.w	804beb4 <__swbuf_r>
 804bc1e:	6813      	ldr	r3, [r2, #0]
 804bc20:	1c58      	adds	r0, r3, #1
 804bc22:	6010      	str	r0, [r2, #0]
 804bc24:	7019      	strb	r1, [r3, #0]
 804bc26:	4608      	mov	r0, r1
 804bc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 804bc2c:	4770      	bx	lr

0804bc2e <__sfputs_r>:
 804bc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bc30:	4606      	mov	r6, r0
 804bc32:	460f      	mov	r7, r1
 804bc34:	4614      	mov	r4, r2
 804bc36:	18d5      	adds	r5, r2, r3
 804bc38:	42ac      	cmp	r4, r5
 804bc3a:	d101      	bne.n	804bc40 <__sfputs_r+0x12>
 804bc3c:	2000      	movs	r0, #0
 804bc3e:	e007      	b.n	804bc50 <__sfputs_r+0x22>
 804bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 804bc44:	463a      	mov	r2, r7
 804bc46:	4630      	mov	r0, r6
 804bc48:	f7ff ffda 	bl	804bc00 <__sfputc_r>
 804bc4c:	1c43      	adds	r3, r0, #1
 804bc4e:	d1f3      	bne.n	804bc38 <__sfputs_r+0xa>
 804bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804bc54 <_vfiprintf_r>:
 804bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804bc58:	460d      	mov	r5, r1
 804bc5a:	b09d      	sub	sp, #116	; 0x74
 804bc5c:	4614      	mov	r4, r2
 804bc5e:	4698      	mov	r8, r3
 804bc60:	4606      	mov	r6, r0
 804bc62:	b118      	cbz	r0, 804bc6c <_vfiprintf_r+0x18>
 804bc64:	6983      	ldr	r3, [r0, #24]
 804bc66:	b90b      	cbnz	r3, 804bc6c <_vfiprintf_r+0x18>
 804bc68:	f000 fb06 	bl	804c278 <__sinit>
 804bc6c:	4b89      	ldr	r3, [pc, #548]	; (804be94 <_vfiprintf_r+0x240>)
 804bc6e:	429d      	cmp	r5, r3
 804bc70:	d11b      	bne.n	804bcaa <_vfiprintf_r+0x56>
 804bc72:	6875      	ldr	r5, [r6, #4]
 804bc74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804bc76:	07d9      	lsls	r1, r3, #31
 804bc78:	d405      	bmi.n	804bc86 <_vfiprintf_r+0x32>
 804bc7a:	89ab      	ldrh	r3, [r5, #12]
 804bc7c:	059a      	lsls	r2, r3, #22
 804bc7e:	d402      	bmi.n	804bc86 <_vfiprintf_r+0x32>
 804bc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804bc82:	f000 fb97 	bl	804c3b4 <__retarget_lock_acquire_recursive>
 804bc86:	89ab      	ldrh	r3, [r5, #12]
 804bc88:	071b      	lsls	r3, r3, #28
 804bc8a:	d501      	bpl.n	804bc90 <_vfiprintf_r+0x3c>
 804bc8c:	692b      	ldr	r3, [r5, #16]
 804bc8e:	b9eb      	cbnz	r3, 804bccc <_vfiprintf_r+0x78>
 804bc90:	4629      	mov	r1, r5
 804bc92:	4630      	mov	r0, r6
 804bc94:	f000 f960 	bl	804bf58 <__swsetup_r>
 804bc98:	b1c0      	cbz	r0, 804bccc <_vfiprintf_r+0x78>
 804bc9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804bc9c:	07dc      	lsls	r4, r3, #31
 804bc9e:	d50e      	bpl.n	804bcbe <_vfiprintf_r+0x6a>
 804bca0:	f04f 30ff 	mov.w	r0, #4294967295
 804bca4:	b01d      	add	sp, #116	; 0x74
 804bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804bcaa:	4b7b      	ldr	r3, [pc, #492]	; (804be98 <_vfiprintf_r+0x244>)
 804bcac:	429d      	cmp	r5, r3
 804bcae:	d101      	bne.n	804bcb4 <_vfiprintf_r+0x60>
 804bcb0:	68b5      	ldr	r5, [r6, #8]
 804bcb2:	e7df      	b.n	804bc74 <_vfiprintf_r+0x20>
 804bcb4:	4b79      	ldr	r3, [pc, #484]	; (804be9c <_vfiprintf_r+0x248>)
 804bcb6:	429d      	cmp	r5, r3
 804bcb8:	bf08      	it	eq
 804bcba:	68f5      	ldreq	r5, [r6, #12]
 804bcbc:	e7da      	b.n	804bc74 <_vfiprintf_r+0x20>
 804bcbe:	89ab      	ldrh	r3, [r5, #12]
 804bcc0:	0598      	lsls	r0, r3, #22
 804bcc2:	d4ed      	bmi.n	804bca0 <_vfiprintf_r+0x4c>
 804bcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804bcc6:	f000 fb76 	bl	804c3b6 <__retarget_lock_release_recursive>
 804bcca:	e7e9      	b.n	804bca0 <_vfiprintf_r+0x4c>
 804bccc:	2300      	movs	r3, #0
 804bcce:	9309      	str	r3, [sp, #36]	; 0x24
 804bcd0:	2320      	movs	r3, #32
 804bcd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804bcd6:	f8cd 800c 	str.w	r8, [sp, #12]
 804bcda:	2330      	movs	r3, #48	; 0x30
 804bcdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804bea0 <_vfiprintf_r+0x24c>
 804bce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804bce4:	f04f 0901 	mov.w	r9, #1
 804bce8:	4623      	mov	r3, r4
 804bcea:	469a      	mov	sl, r3
 804bcec:	f813 2b01 	ldrb.w	r2, [r3], #1
 804bcf0:	b10a      	cbz	r2, 804bcf6 <_vfiprintf_r+0xa2>
 804bcf2:	2a25      	cmp	r2, #37	; 0x25
 804bcf4:	d1f9      	bne.n	804bcea <_vfiprintf_r+0x96>
 804bcf6:	ebba 0b04 	subs.w	fp, sl, r4
 804bcfa:	d00b      	beq.n	804bd14 <_vfiprintf_r+0xc0>
 804bcfc:	465b      	mov	r3, fp
 804bcfe:	4622      	mov	r2, r4
 804bd00:	4629      	mov	r1, r5
 804bd02:	4630      	mov	r0, r6
 804bd04:	f7ff ff93 	bl	804bc2e <__sfputs_r>
 804bd08:	3001      	adds	r0, #1
 804bd0a:	f000 80aa 	beq.w	804be62 <_vfiprintf_r+0x20e>
 804bd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804bd10:	445a      	add	r2, fp
 804bd12:	9209      	str	r2, [sp, #36]	; 0x24
 804bd14:	f89a 3000 	ldrb.w	r3, [sl]
 804bd18:	2b00      	cmp	r3, #0
 804bd1a:	f000 80a2 	beq.w	804be62 <_vfiprintf_r+0x20e>
 804bd1e:	2300      	movs	r3, #0
 804bd20:	f04f 32ff 	mov.w	r2, #4294967295
 804bd24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804bd28:	f10a 0a01 	add.w	sl, sl, #1
 804bd2c:	9304      	str	r3, [sp, #16]
 804bd2e:	9307      	str	r3, [sp, #28]
 804bd30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804bd34:	931a      	str	r3, [sp, #104]	; 0x68
 804bd36:	4654      	mov	r4, sl
 804bd38:	2205      	movs	r2, #5
 804bd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804bd3e:	4858      	ldr	r0, [pc, #352]	; (804bea0 <_vfiprintf_r+0x24c>)
 804bd40:	f7f4 fa4e 	bl	80401e0 <memchr>
 804bd44:	9a04      	ldr	r2, [sp, #16]
 804bd46:	b9d8      	cbnz	r0, 804bd80 <_vfiprintf_r+0x12c>
 804bd48:	06d1      	lsls	r1, r2, #27
 804bd4a:	bf44      	itt	mi
 804bd4c:	2320      	movmi	r3, #32
 804bd4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804bd52:	0713      	lsls	r3, r2, #28
 804bd54:	bf44      	itt	mi
 804bd56:	232b      	movmi	r3, #43	; 0x2b
 804bd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804bd5c:	f89a 3000 	ldrb.w	r3, [sl]
 804bd60:	2b2a      	cmp	r3, #42	; 0x2a
 804bd62:	d015      	beq.n	804bd90 <_vfiprintf_r+0x13c>
 804bd64:	9a07      	ldr	r2, [sp, #28]
 804bd66:	4654      	mov	r4, sl
 804bd68:	2000      	movs	r0, #0
 804bd6a:	f04f 0c0a 	mov.w	ip, #10
 804bd6e:	4621      	mov	r1, r4
 804bd70:	f811 3b01 	ldrb.w	r3, [r1], #1
 804bd74:	3b30      	subs	r3, #48	; 0x30
 804bd76:	2b09      	cmp	r3, #9
 804bd78:	d94e      	bls.n	804be18 <_vfiprintf_r+0x1c4>
 804bd7a:	b1b0      	cbz	r0, 804bdaa <_vfiprintf_r+0x156>
 804bd7c:	9207      	str	r2, [sp, #28]
 804bd7e:	e014      	b.n	804bdaa <_vfiprintf_r+0x156>
 804bd80:	eba0 0308 	sub.w	r3, r0, r8
 804bd84:	fa09 f303 	lsl.w	r3, r9, r3
 804bd88:	4313      	orrs	r3, r2
 804bd8a:	9304      	str	r3, [sp, #16]
 804bd8c:	46a2      	mov	sl, r4
 804bd8e:	e7d2      	b.n	804bd36 <_vfiprintf_r+0xe2>
 804bd90:	9b03      	ldr	r3, [sp, #12]
 804bd92:	1d19      	adds	r1, r3, #4
 804bd94:	681b      	ldr	r3, [r3, #0]
 804bd96:	9103      	str	r1, [sp, #12]
 804bd98:	2b00      	cmp	r3, #0
 804bd9a:	bfbb      	ittet	lt
 804bd9c:	425b      	neglt	r3, r3
 804bd9e:	f042 0202 	orrlt.w	r2, r2, #2
 804bda2:	9307      	strge	r3, [sp, #28]
 804bda4:	9307      	strlt	r3, [sp, #28]
 804bda6:	bfb8      	it	lt
 804bda8:	9204      	strlt	r2, [sp, #16]
 804bdaa:	7823      	ldrb	r3, [r4, #0]
 804bdac:	2b2e      	cmp	r3, #46	; 0x2e
 804bdae:	d10c      	bne.n	804bdca <_vfiprintf_r+0x176>
 804bdb0:	7863      	ldrb	r3, [r4, #1]
 804bdb2:	2b2a      	cmp	r3, #42	; 0x2a
 804bdb4:	d135      	bne.n	804be22 <_vfiprintf_r+0x1ce>
 804bdb6:	9b03      	ldr	r3, [sp, #12]
 804bdb8:	1d1a      	adds	r2, r3, #4
 804bdba:	681b      	ldr	r3, [r3, #0]
 804bdbc:	9203      	str	r2, [sp, #12]
 804bdbe:	2b00      	cmp	r3, #0
 804bdc0:	bfb8      	it	lt
 804bdc2:	f04f 33ff 	movlt.w	r3, #4294967295
 804bdc6:	3402      	adds	r4, #2
 804bdc8:	9305      	str	r3, [sp, #20]
 804bdca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804beb0 <_vfiprintf_r+0x25c>
 804bdce:	7821      	ldrb	r1, [r4, #0]
 804bdd0:	2203      	movs	r2, #3
 804bdd2:	4650      	mov	r0, sl
 804bdd4:	f7f4 fa04 	bl	80401e0 <memchr>
 804bdd8:	b140      	cbz	r0, 804bdec <_vfiprintf_r+0x198>
 804bdda:	2340      	movs	r3, #64	; 0x40
 804bddc:	eba0 000a 	sub.w	r0, r0, sl
 804bde0:	fa03 f000 	lsl.w	r0, r3, r0
 804bde4:	9b04      	ldr	r3, [sp, #16]
 804bde6:	4303      	orrs	r3, r0
 804bde8:	3401      	adds	r4, #1
 804bdea:	9304      	str	r3, [sp, #16]
 804bdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 804bdf0:	482c      	ldr	r0, [pc, #176]	; (804bea4 <_vfiprintf_r+0x250>)
 804bdf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804bdf6:	2206      	movs	r2, #6
 804bdf8:	f7f4 f9f2 	bl	80401e0 <memchr>
 804bdfc:	2800      	cmp	r0, #0
 804bdfe:	d03f      	beq.n	804be80 <_vfiprintf_r+0x22c>
 804be00:	4b29      	ldr	r3, [pc, #164]	; (804bea8 <_vfiprintf_r+0x254>)
 804be02:	bb1b      	cbnz	r3, 804be4c <_vfiprintf_r+0x1f8>
 804be04:	9b03      	ldr	r3, [sp, #12]
 804be06:	3307      	adds	r3, #7
 804be08:	f023 0307 	bic.w	r3, r3, #7
 804be0c:	3308      	adds	r3, #8
 804be0e:	9303      	str	r3, [sp, #12]
 804be10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804be12:	443b      	add	r3, r7
 804be14:	9309      	str	r3, [sp, #36]	; 0x24
 804be16:	e767      	b.n	804bce8 <_vfiprintf_r+0x94>
 804be18:	fb0c 3202 	mla	r2, ip, r2, r3
 804be1c:	460c      	mov	r4, r1
 804be1e:	2001      	movs	r0, #1
 804be20:	e7a5      	b.n	804bd6e <_vfiprintf_r+0x11a>
 804be22:	2300      	movs	r3, #0
 804be24:	3401      	adds	r4, #1
 804be26:	9305      	str	r3, [sp, #20]
 804be28:	4619      	mov	r1, r3
 804be2a:	f04f 0c0a 	mov.w	ip, #10
 804be2e:	4620      	mov	r0, r4
 804be30:	f810 2b01 	ldrb.w	r2, [r0], #1
 804be34:	3a30      	subs	r2, #48	; 0x30
 804be36:	2a09      	cmp	r2, #9
 804be38:	d903      	bls.n	804be42 <_vfiprintf_r+0x1ee>
 804be3a:	2b00      	cmp	r3, #0
 804be3c:	d0c5      	beq.n	804bdca <_vfiprintf_r+0x176>
 804be3e:	9105      	str	r1, [sp, #20]
 804be40:	e7c3      	b.n	804bdca <_vfiprintf_r+0x176>
 804be42:	fb0c 2101 	mla	r1, ip, r1, r2
 804be46:	4604      	mov	r4, r0
 804be48:	2301      	movs	r3, #1
 804be4a:	e7f0      	b.n	804be2e <_vfiprintf_r+0x1da>
 804be4c:	ab03      	add	r3, sp, #12
 804be4e:	9300      	str	r3, [sp, #0]
 804be50:	462a      	mov	r2, r5
 804be52:	4b16      	ldr	r3, [pc, #88]	; (804beac <_vfiprintf_r+0x258>)
 804be54:	a904      	add	r1, sp, #16
 804be56:	4630      	mov	r0, r6
 804be58:	f7fc f84e 	bl	8047ef8 <_printf_float>
 804be5c:	4607      	mov	r7, r0
 804be5e:	1c78      	adds	r0, r7, #1
 804be60:	d1d6      	bne.n	804be10 <_vfiprintf_r+0x1bc>
 804be62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804be64:	07d9      	lsls	r1, r3, #31
 804be66:	d405      	bmi.n	804be74 <_vfiprintf_r+0x220>
 804be68:	89ab      	ldrh	r3, [r5, #12]
 804be6a:	059a      	lsls	r2, r3, #22
 804be6c:	d402      	bmi.n	804be74 <_vfiprintf_r+0x220>
 804be6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804be70:	f000 faa1 	bl	804c3b6 <__retarget_lock_release_recursive>
 804be74:	89ab      	ldrh	r3, [r5, #12]
 804be76:	065b      	lsls	r3, r3, #25
 804be78:	f53f af12 	bmi.w	804bca0 <_vfiprintf_r+0x4c>
 804be7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804be7e:	e711      	b.n	804bca4 <_vfiprintf_r+0x50>
 804be80:	ab03      	add	r3, sp, #12
 804be82:	9300      	str	r3, [sp, #0]
 804be84:	462a      	mov	r2, r5
 804be86:	4b09      	ldr	r3, [pc, #36]	; (804beac <_vfiprintf_r+0x258>)
 804be88:	a904      	add	r1, sp, #16
 804be8a:	4630      	mov	r0, r6
 804be8c:	f7fc fad8 	bl	8048440 <_printf_i>
 804be90:	e7e4      	b.n	804be5c <_vfiprintf_r+0x208>
 804be92:	bf00      	nop
 804be94:	0804dc04 	.word	0x0804dc04
 804be98:	0804dc24 	.word	0x0804dc24
 804be9c:	0804dbe4 	.word	0x0804dbe4
 804bea0:	0804db94 	.word	0x0804db94
 804bea4:	0804db9e 	.word	0x0804db9e
 804bea8:	08047ef9 	.word	0x08047ef9
 804beac:	0804bc2f 	.word	0x0804bc2f
 804beb0:	0804db9a 	.word	0x0804db9a

0804beb4 <__swbuf_r>:
 804beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804beb6:	460e      	mov	r6, r1
 804beb8:	4614      	mov	r4, r2
 804beba:	4605      	mov	r5, r0
 804bebc:	b118      	cbz	r0, 804bec6 <__swbuf_r+0x12>
 804bebe:	6983      	ldr	r3, [r0, #24]
 804bec0:	b90b      	cbnz	r3, 804bec6 <__swbuf_r+0x12>
 804bec2:	f000 f9d9 	bl	804c278 <__sinit>
 804bec6:	4b21      	ldr	r3, [pc, #132]	; (804bf4c <__swbuf_r+0x98>)
 804bec8:	429c      	cmp	r4, r3
 804beca:	d12b      	bne.n	804bf24 <__swbuf_r+0x70>
 804becc:	686c      	ldr	r4, [r5, #4]
 804bece:	69a3      	ldr	r3, [r4, #24]
 804bed0:	60a3      	str	r3, [r4, #8]
 804bed2:	89a3      	ldrh	r3, [r4, #12]
 804bed4:	071a      	lsls	r2, r3, #28
 804bed6:	d52f      	bpl.n	804bf38 <__swbuf_r+0x84>
 804bed8:	6923      	ldr	r3, [r4, #16]
 804beda:	b36b      	cbz	r3, 804bf38 <__swbuf_r+0x84>
 804bedc:	6923      	ldr	r3, [r4, #16]
 804bede:	6820      	ldr	r0, [r4, #0]
 804bee0:	1ac0      	subs	r0, r0, r3
 804bee2:	6963      	ldr	r3, [r4, #20]
 804bee4:	b2f6      	uxtb	r6, r6
 804bee6:	4283      	cmp	r3, r0
 804bee8:	4637      	mov	r7, r6
 804beea:	dc04      	bgt.n	804bef6 <__swbuf_r+0x42>
 804beec:	4621      	mov	r1, r4
 804beee:	4628      	mov	r0, r5
 804bef0:	f000 f92e 	bl	804c150 <_fflush_r>
 804bef4:	bb30      	cbnz	r0, 804bf44 <__swbuf_r+0x90>
 804bef6:	68a3      	ldr	r3, [r4, #8]
 804bef8:	3b01      	subs	r3, #1
 804befa:	60a3      	str	r3, [r4, #8]
 804befc:	6823      	ldr	r3, [r4, #0]
 804befe:	1c5a      	adds	r2, r3, #1
 804bf00:	6022      	str	r2, [r4, #0]
 804bf02:	701e      	strb	r6, [r3, #0]
 804bf04:	6963      	ldr	r3, [r4, #20]
 804bf06:	3001      	adds	r0, #1
 804bf08:	4283      	cmp	r3, r0
 804bf0a:	d004      	beq.n	804bf16 <__swbuf_r+0x62>
 804bf0c:	89a3      	ldrh	r3, [r4, #12]
 804bf0e:	07db      	lsls	r3, r3, #31
 804bf10:	d506      	bpl.n	804bf20 <__swbuf_r+0x6c>
 804bf12:	2e0a      	cmp	r6, #10
 804bf14:	d104      	bne.n	804bf20 <__swbuf_r+0x6c>
 804bf16:	4621      	mov	r1, r4
 804bf18:	4628      	mov	r0, r5
 804bf1a:	f000 f919 	bl	804c150 <_fflush_r>
 804bf1e:	b988      	cbnz	r0, 804bf44 <__swbuf_r+0x90>
 804bf20:	4638      	mov	r0, r7
 804bf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bf24:	4b0a      	ldr	r3, [pc, #40]	; (804bf50 <__swbuf_r+0x9c>)
 804bf26:	429c      	cmp	r4, r3
 804bf28:	d101      	bne.n	804bf2e <__swbuf_r+0x7a>
 804bf2a:	68ac      	ldr	r4, [r5, #8]
 804bf2c:	e7cf      	b.n	804bece <__swbuf_r+0x1a>
 804bf2e:	4b09      	ldr	r3, [pc, #36]	; (804bf54 <__swbuf_r+0xa0>)
 804bf30:	429c      	cmp	r4, r3
 804bf32:	bf08      	it	eq
 804bf34:	68ec      	ldreq	r4, [r5, #12]
 804bf36:	e7ca      	b.n	804bece <__swbuf_r+0x1a>
 804bf38:	4621      	mov	r1, r4
 804bf3a:	4628      	mov	r0, r5
 804bf3c:	f000 f80c 	bl	804bf58 <__swsetup_r>
 804bf40:	2800      	cmp	r0, #0
 804bf42:	d0cb      	beq.n	804bedc <__swbuf_r+0x28>
 804bf44:	f04f 37ff 	mov.w	r7, #4294967295
 804bf48:	e7ea      	b.n	804bf20 <__swbuf_r+0x6c>
 804bf4a:	bf00      	nop
 804bf4c:	0804dc04 	.word	0x0804dc04
 804bf50:	0804dc24 	.word	0x0804dc24
 804bf54:	0804dbe4 	.word	0x0804dbe4

0804bf58 <__swsetup_r>:
 804bf58:	4b32      	ldr	r3, [pc, #200]	; (804c024 <__swsetup_r+0xcc>)
 804bf5a:	b570      	push	{r4, r5, r6, lr}
 804bf5c:	681d      	ldr	r5, [r3, #0]
 804bf5e:	4606      	mov	r6, r0
 804bf60:	460c      	mov	r4, r1
 804bf62:	b125      	cbz	r5, 804bf6e <__swsetup_r+0x16>
 804bf64:	69ab      	ldr	r3, [r5, #24]
 804bf66:	b913      	cbnz	r3, 804bf6e <__swsetup_r+0x16>
 804bf68:	4628      	mov	r0, r5
 804bf6a:	f000 f985 	bl	804c278 <__sinit>
 804bf6e:	4b2e      	ldr	r3, [pc, #184]	; (804c028 <__swsetup_r+0xd0>)
 804bf70:	429c      	cmp	r4, r3
 804bf72:	d10f      	bne.n	804bf94 <__swsetup_r+0x3c>
 804bf74:	686c      	ldr	r4, [r5, #4]
 804bf76:	89a3      	ldrh	r3, [r4, #12]
 804bf78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804bf7c:	0719      	lsls	r1, r3, #28
 804bf7e:	d42c      	bmi.n	804bfda <__swsetup_r+0x82>
 804bf80:	06dd      	lsls	r5, r3, #27
 804bf82:	d411      	bmi.n	804bfa8 <__swsetup_r+0x50>
 804bf84:	2309      	movs	r3, #9
 804bf86:	6033      	str	r3, [r6, #0]
 804bf88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804bf8c:	81a3      	strh	r3, [r4, #12]
 804bf8e:	f04f 30ff 	mov.w	r0, #4294967295
 804bf92:	e03e      	b.n	804c012 <__swsetup_r+0xba>
 804bf94:	4b25      	ldr	r3, [pc, #148]	; (804c02c <__swsetup_r+0xd4>)
 804bf96:	429c      	cmp	r4, r3
 804bf98:	d101      	bne.n	804bf9e <__swsetup_r+0x46>
 804bf9a:	68ac      	ldr	r4, [r5, #8]
 804bf9c:	e7eb      	b.n	804bf76 <__swsetup_r+0x1e>
 804bf9e:	4b24      	ldr	r3, [pc, #144]	; (804c030 <__swsetup_r+0xd8>)
 804bfa0:	429c      	cmp	r4, r3
 804bfa2:	bf08      	it	eq
 804bfa4:	68ec      	ldreq	r4, [r5, #12]
 804bfa6:	e7e6      	b.n	804bf76 <__swsetup_r+0x1e>
 804bfa8:	0758      	lsls	r0, r3, #29
 804bfaa:	d512      	bpl.n	804bfd2 <__swsetup_r+0x7a>
 804bfac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804bfae:	b141      	cbz	r1, 804bfc2 <__swsetup_r+0x6a>
 804bfb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804bfb4:	4299      	cmp	r1, r3
 804bfb6:	d002      	beq.n	804bfbe <__swsetup_r+0x66>
 804bfb8:	4630      	mov	r0, r6
 804bfba:	f7ff fb65 	bl	804b688 <_free_r>
 804bfbe:	2300      	movs	r3, #0
 804bfc0:	6363      	str	r3, [r4, #52]	; 0x34
 804bfc2:	89a3      	ldrh	r3, [r4, #12]
 804bfc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804bfc8:	81a3      	strh	r3, [r4, #12]
 804bfca:	2300      	movs	r3, #0
 804bfcc:	6063      	str	r3, [r4, #4]
 804bfce:	6923      	ldr	r3, [r4, #16]
 804bfd0:	6023      	str	r3, [r4, #0]
 804bfd2:	89a3      	ldrh	r3, [r4, #12]
 804bfd4:	f043 0308 	orr.w	r3, r3, #8
 804bfd8:	81a3      	strh	r3, [r4, #12]
 804bfda:	6923      	ldr	r3, [r4, #16]
 804bfdc:	b94b      	cbnz	r3, 804bff2 <__swsetup_r+0x9a>
 804bfde:	89a3      	ldrh	r3, [r4, #12]
 804bfe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804bfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804bfe8:	d003      	beq.n	804bff2 <__swsetup_r+0x9a>
 804bfea:	4621      	mov	r1, r4
 804bfec:	4630      	mov	r0, r6
 804bfee:	f000 fa07 	bl	804c400 <__smakebuf_r>
 804bff2:	89a0      	ldrh	r0, [r4, #12]
 804bff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804bff8:	f010 0301 	ands.w	r3, r0, #1
 804bffc:	d00a      	beq.n	804c014 <__swsetup_r+0xbc>
 804bffe:	2300      	movs	r3, #0
 804c000:	60a3      	str	r3, [r4, #8]
 804c002:	6963      	ldr	r3, [r4, #20]
 804c004:	425b      	negs	r3, r3
 804c006:	61a3      	str	r3, [r4, #24]
 804c008:	6923      	ldr	r3, [r4, #16]
 804c00a:	b943      	cbnz	r3, 804c01e <__swsetup_r+0xc6>
 804c00c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804c010:	d1ba      	bne.n	804bf88 <__swsetup_r+0x30>
 804c012:	bd70      	pop	{r4, r5, r6, pc}
 804c014:	0781      	lsls	r1, r0, #30
 804c016:	bf58      	it	pl
 804c018:	6963      	ldrpl	r3, [r4, #20]
 804c01a:	60a3      	str	r3, [r4, #8]
 804c01c:	e7f4      	b.n	804c008 <__swsetup_r+0xb0>
 804c01e:	2000      	movs	r0, #0
 804c020:	e7f7      	b.n	804c012 <__swsetup_r+0xba>
 804c022:	bf00      	nop
 804c024:	20000018 	.word	0x20000018
 804c028:	0804dc04 	.word	0x0804dc04
 804c02c:	0804dc24 	.word	0x0804dc24
 804c030:	0804dbe4 	.word	0x0804dbe4

0804c034 <abort>:
 804c034:	b508      	push	{r3, lr}
 804c036:	2006      	movs	r0, #6
 804c038:	f000 fa52 	bl	804c4e0 <raise>
 804c03c:	2001      	movs	r0, #1
 804c03e:	f7f7 ffbf 	bl	8043fc0 <_exit>
	...

0804c044 <__sflush_r>:
 804c044:	898a      	ldrh	r2, [r1, #12]
 804c046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c04a:	4605      	mov	r5, r0
 804c04c:	0710      	lsls	r0, r2, #28
 804c04e:	460c      	mov	r4, r1
 804c050:	d458      	bmi.n	804c104 <__sflush_r+0xc0>
 804c052:	684b      	ldr	r3, [r1, #4]
 804c054:	2b00      	cmp	r3, #0
 804c056:	dc05      	bgt.n	804c064 <__sflush_r+0x20>
 804c058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804c05a:	2b00      	cmp	r3, #0
 804c05c:	dc02      	bgt.n	804c064 <__sflush_r+0x20>
 804c05e:	2000      	movs	r0, #0
 804c060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804c066:	2e00      	cmp	r6, #0
 804c068:	d0f9      	beq.n	804c05e <__sflush_r+0x1a>
 804c06a:	2300      	movs	r3, #0
 804c06c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804c070:	682f      	ldr	r7, [r5, #0]
 804c072:	602b      	str	r3, [r5, #0]
 804c074:	d032      	beq.n	804c0dc <__sflush_r+0x98>
 804c076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804c078:	89a3      	ldrh	r3, [r4, #12]
 804c07a:	075a      	lsls	r2, r3, #29
 804c07c:	d505      	bpl.n	804c08a <__sflush_r+0x46>
 804c07e:	6863      	ldr	r3, [r4, #4]
 804c080:	1ac0      	subs	r0, r0, r3
 804c082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804c084:	b10b      	cbz	r3, 804c08a <__sflush_r+0x46>
 804c086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804c088:	1ac0      	subs	r0, r0, r3
 804c08a:	2300      	movs	r3, #0
 804c08c:	4602      	mov	r2, r0
 804c08e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804c090:	6a21      	ldr	r1, [r4, #32]
 804c092:	4628      	mov	r0, r5
 804c094:	47b0      	blx	r6
 804c096:	1c43      	adds	r3, r0, #1
 804c098:	89a3      	ldrh	r3, [r4, #12]
 804c09a:	d106      	bne.n	804c0aa <__sflush_r+0x66>
 804c09c:	6829      	ldr	r1, [r5, #0]
 804c09e:	291d      	cmp	r1, #29
 804c0a0:	d82c      	bhi.n	804c0fc <__sflush_r+0xb8>
 804c0a2:	4a2a      	ldr	r2, [pc, #168]	; (804c14c <__sflush_r+0x108>)
 804c0a4:	40ca      	lsrs	r2, r1
 804c0a6:	07d6      	lsls	r6, r2, #31
 804c0a8:	d528      	bpl.n	804c0fc <__sflush_r+0xb8>
 804c0aa:	2200      	movs	r2, #0
 804c0ac:	6062      	str	r2, [r4, #4]
 804c0ae:	04d9      	lsls	r1, r3, #19
 804c0b0:	6922      	ldr	r2, [r4, #16]
 804c0b2:	6022      	str	r2, [r4, #0]
 804c0b4:	d504      	bpl.n	804c0c0 <__sflush_r+0x7c>
 804c0b6:	1c42      	adds	r2, r0, #1
 804c0b8:	d101      	bne.n	804c0be <__sflush_r+0x7a>
 804c0ba:	682b      	ldr	r3, [r5, #0]
 804c0bc:	b903      	cbnz	r3, 804c0c0 <__sflush_r+0x7c>
 804c0be:	6560      	str	r0, [r4, #84]	; 0x54
 804c0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804c0c2:	602f      	str	r7, [r5, #0]
 804c0c4:	2900      	cmp	r1, #0
 804c0c6:	d0ca      	beq.n	804c05e <__sflush_r+0x1a>
 804c0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804c0cc:	4299      	cmp	r1, r3
 804c0ce:	d002      	beq.n	804c0d6 <__sflush_r+0x92>
 804c0d0:	4628      	mov	r0, r5
 804c0d2:	f7ff fad9 	bl	804b688 <_free_r>
 804c0d6:	2000      	movs	r0, #0
 804c0d8:	6360      	str	r0, [r4, #52]	; 0x34
 804c0da:	e7c1      	b.n	804c060 <__sflush_r+0x1c>
 804c0dc:	6a21      	ldr	r1, [r4, #32]
 804c0de:	2301      	movs	r3, #1
 804c0e0:	4628      	mov	r0, r5
 804c0e2:	47b0      	blx	r6
 804c0e4:	1c41      	adds	r1, r0, #1
 804c0e6:	d1c7      	bne.n	804c078 <__sflush_r+0x34>
 804c0e8:	682b      	ldr	r3, [r5, #0]
 804c0ea:	2b00      	cmp	r3, #0
 804c0ec:	d0c4      	beq.n	804c078 <__sflush_r+0x34>
 804c0ee:	2b1d      	cmp	r3, #29
 804c0f0:	d001      	beq.n	804c0f6 <__sflush_r+0xb2>
 804c0f2:	2b16      	cmp	r3, #22
 804c0f4:	d101      	bne.n	804c0fa <__sflush_r+0xb6>
 804c0f6:	602f      	str	r7, [r5, #0]
 804c0f8:	e7b1      	b.n	804c05e <__sflush_r+0x1a>
 804c0fa:	89a3      	ldrh	r3, [r4, #12]
 804c0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c100:	81a3      	strh	r3, [r4, #12]
 804c102:	e7ad      	b.n	804c060 <__sflush_r+0x1c>
 804c104:	690f      	ldr	r7, [r1, #16]
 804c106:	2f00      	cmp	r7, #0
 804c108:	d0a9      	beq.n	804c05e <__sflush_r+0x1a>
 804c10a:	0793      	lsls	r3, r2, #30
 804c10c:	680e      	ldr	r6, [r1, #0]
 804c10e:	bf08      	it	eq
 804c110:	694b      	ldreq	r3, [r1, #20]
 804c112:	600f      	str	r7, [r1, #0]
 804c114:	bf18      	it	ne
 804c116:	2300      	movne	r3, #0
 804c118:	eba6 0807 	sub.w	r8, r6, r7
 804c11c:	608b      	str	r3, [r1, #8]
 804c11e:	f1b8 0f00 	cmp.w	r8, #0
 804c122:	dd9c      	ble.n	804c05e <__sflush_r+0x1a>
 804c124:	6a21      	ldr	r1, [r4, #32]
 804c126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804c128:	4643      	mov	r3, r8
 804c12a:	463a      	mov	r2, r7
 804c12c:	4628      	mov	r0, r5
 804c12e:	47b0      	blx	r6
 804c130:	2800      	cmp	r0, #0
 804c132:	dc06      	bgt.n	804c142 <__sflush_r+0xfe>
 804c134:	89a3      	ldrh	r3, [r4, #12]
 804c136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c13a:	81a3      	strh	r3, [r4, #12]
 804c13c:	f04f 30ff 	mov.w	r0, #4294967295
 804c140:	e78e      	b.n	804c060 <__sflush_r+0x1c>
 804c142:	4407      	add	r7, r0
 804c144:	eba8 0800 	sub.w	r8, r8, r0
 804c148:	e7e9      	b.n	804c11e <__sflush_r+0xda>
 804c14a:	bf00      	nop
 804c14c:	20400001 	.word	0x20400001

0804c150 <_fflush_r>:
 804c150:	b538      	push	{r3, r4, r5, lr}
 804c152:	690b      	ldr	r3, [r1, #16]
 804c154:	4605      	mov	r5, r0
 804c156:	460c      	mov	r4, r1
 804c158:	b913      	cbnz	r3, 804c160 <_fflush_r+0x10>
 804c15a:	2500      	movs	r5, #0
 804c15c:	4628      	mov	r0, r5
 804c15e:	bd38      	pop	{r3, r4, r5, pc}
 804c160:	b118      	cbz	r0, 804c16a <_fflush_r+0x1a>
 804c162:	6983      	ldr	r3, [r0, #24]
 804c164:	b90b      	cbnz	r3, 804c16a <_fflush_r+0x1a>
 804c166:	f000 f887 	bl	804c278 <__sinit>
 804c16a:	4b14      	ldr	r3, [pc, #80]	; (804c1bc <_fflush_r+0x6c>)
 804c16c:	429c      	cmp	r4, r3
 804c16e:	d11b      	bne.n	804c1a8 <_fflush_r+0x58>
 804c170:	686c      	ldr	r4, [r5, #4]
 804c172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c176:	2b00      	cmp	r3, #0
 804c178:	d0ef      	beq.n	804c15a <_fflush_r+0xa>
 804c17a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804c17c:	07d0      	lsls	r0, r2, #31
 804c17e:	d404      	bmi.n	804c18a <_fflush_r+0x3a>
 804c180:	0599      	lsls	r1, r3, #22
 804c182:	d402      	bmi.n	804c18a <_fflush_r+0x3a>
 804c184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804c186:	f000 f915 	bl	804c3b4 <__retarget_lock_acquire_recursive>
 804c18a:	4628      	mov	r0, r5
 804c18c:	4621      	mov	r1, r4
 804c18e:	f7ff ff59 	bl	804c044 <__sflush_r>
 804c192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804c194:	07da      	lsls	r2, r3, #31
 804c196:	4605      	mov	r5, r0
 804c198:	d4e0      	bmi.n	804c15c <_fflush_r+0xc>
 804c19a:	89a3      	ldrh	r3, [r4, #12]
 804c19c:	059b      	lsls	r3, r3, #22
 804c19e:	d4dd      	bmi.n	804c15c <_fflush_r+0xc>
 804c1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804c1a2:	f000 f908 	bl	804c3b6 <__retarget_lock_release_recursive>
 804c1a6:	e7d9      	b.n	804c15c <_fflush_r+0xc>
 804c1a8:	4b05      	ldr	r3, [pc, #20]	; (804c1c0 <_fflush_r+0x70>)
 804c1aa:	429c      	cmp	r4, r3
 804c1ac:	d101      	bne.n	804c1b2 <_fflush_r+0x62>
 804c1ae:	68ac      	ldr	r4, [r5, #8]
 804c1b0:	e7df      	b.n	804c172 <_fflush_r+0x22>
 804c1b2:	4b04      	ldr	r3, [pc, #16]	; (804c1c4 <_fflush_r+0x74>)
 804c1b4:	429c      	cmp	r4, r3
 804c1b6:	bf08      	it	eq
 804c1b8:	68ec      	ldreq	r4, [r5, #12]
 804c1ba:	e7da      	b.n	804c172 <_fflush_r+0x22>
 804c1bc:	0804dc04 	.word	0x0804dc04
 804c1c0:	0804dc24 	.word	0x0804dc24
 804c1c4:	0804dbe4 	.word	0x0804dbe4

0804c1c8 <std>:
 804c1c8:	2300      	movs	r3, #0
 804c1ca:	b510      	push	{r4, lr}
 804c1cc:	4604      	mov	r4, r0
 804c1ce:	e9c0 3300 	strd	r3, r3, [r0]
 804c1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804c1d6:	6083      	str	r3, [r0, #8]
 804c1d8:	8181      	strh	r1, [r0, #12]
 804c1da:	6643      	str	r3, [r0, #100]	; 0x64
 804c1dc:	81c2      	strh	r2, [r0, #14]
 804c1de:	6183      	str	r3, [r0, #24]
 804c1e0:	4619      	mov	r1, r3
 804c1e2:	2208      	movs	r2, #8
 804c1e4:	305c      	adds	r0, #92	; 0x5c
 804c1e6:	f7fb fddf 	bl	8047da8 <memset>
 804c1ea:	4b05      	ldr	r3, [pc, #20]	; (804c200 <std+0x38>)
 804c1ec:	6263      	str	r3, [r4, #36]	; 0x24
 804c1ee:	4b05      	ldr	r3, [pc, #20]	; (804c204 <std+0x3c>)
 804c1f0:	62a3      	str	r3, [r4, #40]	; 0x28
 804c1f2:	4b05      	ldr	r3, [pc, #20]	; (804c208 <std+0x40>)
 804c1f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 804c1f6:	4b05      	ldr	r3, [pc, #20]	; (804c20c <std+0x44>)
 804c1f8:	6224      	str	r4, [r4, #32]
 804c1fa:	6323      	str	r3, [r4, #48]	; 0x30
 804c1fc:	bd10      	pop	{r4, pc}
 804c1fe:	bf00      	nop
 804c200:	0804c519 	.word	0x0804c519
 804c204:	0804c53b 	.word	0x0804c53b
 804c208:	0804c573 	.word	0x0804c573
 804c20c:	0804c597 	.word	0x0804c597

0804c210 <_cleanup_r>:
 804c210:	4901      	ldr	r1, [pc, #4]	; (804c218 <_cleanup_r+0x8>)
 804c212:	f000 b8af 	b.w	804c374 <_fwalk_reent>
 804c216:	bf00      	nop
 804c218:	0804c151 	.word	0x0804c151

0804c21c <__sfmoreglue>:
 804c21c:	b570      	push	{r4, r5, r6, lr}
 804c21e:	1e4a      	subs	r2, r1, #1
 804c220:	2568      	movs	r5, #104	; 0x68
 804c222:	4355      	muls	r5, r2
 804c224:	460e      	mov	r6, r1
 804c226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804c22a:	f7ff fa7d 	bl	804b728 <_malloc_r>
 804c22e:	4604      	mov	r4, r0
 804c230:	b140      	cbz	r0, 804c244 <__sfmoreglue+0x28>
 804c232:	2100      	movs	r1, #0
 804c234:	e9c0 1600 	strd	r1, r6, [r0]
 804c238:	300c      	adds	r0, #12
 804c23a:	60a0      	str	r0, [r4, #8]
 804c23c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804c240:	f7fb fdb2 	bl	8047da8 <memset>
 804c244:	4620      	mov	r0, r4
 804c246:	bd70      	pop	{r4, r5, r6, pc}

0804c248 <__sfp_lock_acquire>:
 804c248:	4801      	ldr	r0, [pc, #4]	; (804c250 <__sfp_lock_acquire+0x8>)
 804c24a:	f000 b8b3 	b.w	804c3b4 <__retarget_lock_acquire_recursive>
 804c24e:	bf00      	nop
 804c250:	2000ef9c 	.word	0x2000ef9c

0804c254 <__sfp_lock_release>:
 804c254:	4801      	ldr	r0, [pc, #4]	; (804c25c <__sfp_lock_release+0x8>)
 804c256:	f000 b8ae 	b.w	804c3b6 <__retarget_lock_release_recursive>
 804c25a:	bf00      	nop
 804c25c:	2000ef9c 	.word	0x2000ef9c

0804c260 <__sinit_lock_acquire>:
 804c260:	4801      	ldr	r0, [pc, #4]	; (804c268 <__sinit_lock_acquire+0x8>)
 804c262:	f000 b8a7 	b.w	804c3b4 <__retarget_lock_acquire_recursive>
 804c266:	bf00      	nop
 804c268:	2000ef97 	.word	0x2000ef97

0804c26c <__sinit_lock_release>:
 804c26c:	4801      	ldr	r0, [pc, #4]	; (804c274 <__sinit_lock_release+0x8>)
 804c26e:	f000 b8a2 	b.w	804c3b6 <__retarget_lock_release_recursive>
 804c272:	bf00      	nop
 804c274:	2000ef97 	.word	0x2000ef97

0804c278 <__sinit>:
 804c278:	b510      	push	{r4, lr}
 804c27a:	4604      	mov	r4, r0
 804c27c:	f7ff fff0 	bl	804c260 <__sinit_lock_acquire>
 804c280:	69a3      	ldr	r3, [r4, #24]
 804c282:	b11b      	cbz	r3, 804c28c <__sinit+0x14>
 804c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804c288:	f7ff bff0 	b.w	804c26c <__sinit_lock_release>
 804c28c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804c290:	6523      	str	r3, [r4, #80]	; 0x50
 804c292:	4b13      	ldr	r3, [pc, #76]	; (804c2e0 <__sinit+0x68>)
 804c294:	4a13      	ldr	r2, [pc, #76]	; (804c2e4 <__sinit+0x6c>)
 804c296:	681b      	ldr	r3, [r3, #0]
 804c298:	62a2      	str	r2, [r4, #40]	; 0x28
 804c29a:	42a3      	cmp	r3, r4
 804c29c:	bf04      	itt	eq
 804c29e:	2301      	moveq	r3, #1
 804c2a0:	61a3      	streq	r3, [r4, #24]
 804c2a2:	4620      	mov	r0, r4
 804c2a4:	f000 f820 	bl	804c2e8 <__sfp>
 804c2a8:	6060      	str	r0, [r4, #4]
 804c2aa:	4620      	mov	r0, r4
 804c2ac:	f000 f81c 	bl	804c2e8 <__sfp>
 804c2b0:	60a0      	str	r0, [r4, #8]
 804c2b2:	4620      	mov	r0, r4
 804c2b4:	f000 f818 	bl	804c2e8 <__sfp>
 804c2b8:	2200      	movs	r2, #0
 804c2ba:	60e0      	str	r0, [r4, #12]
 804c2bc:	2104      	movs	r1, #4
 804c2be:	6860      	ldr	r0, [r4, #4]
 804c2c0:	f7ff ff82 	bl	804c1c8 <std>
 804c2c4:	68a0      	ldr	r0, [r4, #8]
 804c2c6:	2201      	movs	r2, #1
 804c2c8:	2109      	movs	r1, #9
 804c2ca:	f7ff ff7d 	bl	804c1c8 <std>
 804c2ce:	68e0      	ldr	r0, [r4, #12]
 804c2d0:	2202      	movs	r2, #2
 804c2d2:	2112      	movs	r1, #18
 804c2d4:	f7ff ff78 	bl	804c1c8 <std>
 804c2d8:	2301      	movs	r3, #1
 804c2da:	61a3      	str	r3, [r4, #24]
 804c2dc:	e7d2      	b.n	804c284 <__sinit+0xc>
 804c2de:	bf00      	nop
 804c2e0:	0804d770 	.word	0x0804d770
 804c2e4:	0804c211 	.word	0x0804c211

0804c2e8 <__sfp>:
 804c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c2ea:	4607      	mov	r7, r0
 804c2ec:	f7ff ffac 	bl	804c248 <__sfp_lock_acquire>
 804c2f0:	4b1e      	ldr	r3, [pc, #120]	; (804c36c <__sfp+0x84>)
 804c2f2:	681e      	ldr	r6, [r3, #0]
 804c2f4:	69b3      	ldr	r3, [r6, #24]
 804c2f6:	b913      	cbnz	r3, 804c2fe <__sfp+0x16>
 804c2f8:	4630      	mov	r0, r6
 804c2fa:	f7ff ffbd 	bl	804c278 <__sinit>
 804c2fe:	3648      	adds	r6, #72	; 0x48
 804c300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804c304:	3b01      	subs	r3, #1
 804c306:	d503      	bpl.n	804c310 <__sfp+0x28>
 804c308:	6833      	ldr	r3, [r6, #0]
 804c30a:	b30b      	cbz	r3, 804c350 <__sfp+0x68>
 804c30c:	6836      	ldr	r6, [r6, #0]
 804c30e:	e7f7      	b.n	804c300 <__sfp+0x18>
 804c310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804c314:	b9d5      	cbnz	r5, 804c34c <__sfp+0x64>
 804c316:	4b16      	ldr	r3, [pc, #88]	; (804c370 <__sfp+0x88>)
 804c318:	60e3      	str	r3, [r4, #12]
 804c31a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804c31e:	6665      	str	r5, [r4, #100]	; 0x64
 804c320:	f000 f847 	bl	804c3b2 <__retarget_lock_init_recursive>
 804c324:	f7ff ff96 	bl	804c254 <__sfp_lock_release>
 804c328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804c32c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804c330:	6025      	str	r5, [r4, #0]
 804c332:	61a5      	str	r5, [r4, #24]
 804c334:	2208      	movs	r2, #8
 804c336:	4629      	mov	r1, r5
 804c338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804c33c:	f7fb fd34 	bl	8047da8 <memset>
 804c340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804c344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804c348:	4620      	mov	r0, r4
 804c34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804c34c:	3468      	adds	r4, #104	; 0x68
 804c34e:	e7d9      	b.n	804c304 <__sfp+0x1c>
 804c350:	2104      	movs	r1, #4
 804c352:	4638      	mov	r0, r7
 804c354:	f7ff ff62 	bl	804c21c <__sfmoreglue>
 804c358:	4604      	mov	r4, r0
 804c35a:	6030      	str	r0, [r6, #0]
 804c35c:	2800      	cmp	r0, #0
 804c35e:	d1d5      	bne.n	804c30c <__sfp+0x24>
 804c360:	f7ff ff78 	bl	804c254 <__sfp_lock_release>
 804c364:	230c      	movs	r3, #12
 804c366:	603b      	str	r3, [r7, #0]
 804c368:	e7ee      	b.n	804c348 <__sfp+0x60>
 804c36a:	bf00      	nop
 804c36c:	0804d770 	.word	0x0804d770
 804c370:	ffff0001 	.word	0xffff0001

0804c374 <_fwalk_reent>:
 804c374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804c378:	4606      	mov	r6, r0
 804c37a:	4688      	mov	r8, r1
 804c37c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804c380:	2700      	movs	r7, #0
 804c382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804c386:	f1b9 0901 	subs.w	r9, r9, #1
 804c38a:	d505      	bpl.n	804c398 <_fwalk_reent+0x24>
 804c38c:	6824      	ldr	r4, [r4, #0]
 804c38e:	2c00      	cmp	r4, #0
 804c390:	d1f7      	bne.n	804c382 <_fwalk_reent+0xe>
 804c392:	4638      	mov	r0, r7
 804c394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804c398:	89ab      	ldrh	r3, [r5, #12]
 804c39a:	2b01      	cmp	r3, #1
 804c39c:	d907      	bls.n	804c3ae <_fwalk_reent+0x3a>
 804c39e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804c3a2:	3301      	adds	r3, #1
 804c3a4:	d003      	beq.n	804c3ae <_fwalk_reent+0x3a>
 804c3a6:	4629      	mov	r1, r5
 804c3a8:	4630      	mov	r0, r6
 804c3aa:	47c0      	blx	r8
 804c3ac:	4307      	orrs	r7, r0
 804c3ae:	3568      	adds	r5, #104	; 0x68
 804c3b0:	e7e9      	b.n	804c386 <_fwalk_reent+0x12>

0804c3b2 <__retarget_lock_init_recursive>:
 804c3b2:	4770      	bx	lr

0804c3b4 <__retarget_lock_acquire_recursive>:
 804c3b4:	4770      	bx	lr

0804c3b6 <__retarget_lock_release_recursive>:
 804c3b6:	4770      	bx	lr

0804c3b8 <__swhatbuf_r>:
 804c3b8:	b570      	push	{r4, r5, r6, lr}
 804c3ba:	460e      	mov	r6, r1
 804c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c3c0:	2900      	cmp	r1, #0
 804c3c2:	b096      	sub	sp, #88	; 0x58
 804c3c4:	4614      	mov	r4, r2
 804c3c6:	461d      	mov	r5, r3
 804c3c8:	da07      	bge.n	804c3da <__swhatbuf_r+0x22>
 804c3ca:	2300      	movs	r3, #0
 804c3cc:	602b      	str	r3, [r5, #0]
 804c3ce:	89b3      	ldrh	r3, [r6, #12]
 804c3d0:	061a      	lsls	r2, r3, #24
 804c3d2:	d410      	bmi.n	804c3f6 <__swhatbuf_r+0x3e>
 804c3d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804c3d8:	e00e      	b.n	804c3f8 <__swhatbuf_r+0x40>
 804c3da:	466a      	mov	r2, sp
 804c3dc:	f000 f902 	bl	804c5e4 <_fstat_r>
 804c3e0:	2800      	cmp	r0, #0
 804c3e2:	dbf2      	blt.n	804c3ca <__swhatbuf_r+0x12>
 804c3e4:	9a01      	ldr	r2, [sp, #4]
 804c3e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804c3ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804c3ee:	425a      	negs	r2, r3
 804c3f0:	415a      	adcs	r2, r3
 804c3f2:	602a      	str	r2, [r5, #0]
 804c3f4:	e7ee      	b.n	804c3d4 <__swhatbuf_r+0x1c>
 804c3f6:	2340      	movs	r3, #64	; 0x40
 804c3f8:	2000      	movs	r0, #0
 804c3fa:	6023      	str	r3, [r4, #0]
 804c3fc:	b016      	add	sp, #88	; 0x58
 804c3fe:	bd70      	pop	{r4, r5, r6, pc}

0804c400 <__smakebuf_r>:
 804c400:	898b      	ldrh	r3, [r1, #12]
 804c402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804c404:	079d      	lsls	r5, r3, #30
 804c406:	4606      	mov	r6, r0
 804c408:	460c      	mov	r4, r1
 804c40a:	d507      	bpl.n	804c41c <__smakebuf_r+0x1c>
 804c40c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804c410:	6023      	str	r3, [r4, #0]
 804c412:	6123      	str	r3, [r4, #16]
 804c414:	2301      	movs	r3, #1
 804c416:	6163      	str	r3, [r4, #20]
 804c418:	b002      	add	sp, #8
 804c41a:	bd70      	pop	{r4, r5, r6, pc}
 804c41c:	ab01      	add	r3, sp, #4
 804c41e:	466a      	mov	r2, sp
 804c420:	f7ff ffca 	bl	804c3b8 <__swhatbuf_r>
 804c424:	9900      	ldr	r1, [sp, #0]
 804c426:	4605      	mov	r5, r0
 804c428:	4630      	mov	r0, r6
 804c42a:	f7ff f97d 	bl	804b728 <_malloc_r>
 804c42e:	b948      	cbnz	r0, 804c444 <__smakebuf_r+0x44>
 804c430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c434:	059a      	lsls	r2, r3, #22
 804c436:	d4ef      	bmi.n	804c418 <__smakebuf_r+0x18>
 804c438:	f023 0303 	bic.w	r3, r3, #3
 804c43c:	f043 0302 	orr.w	r3, r3, #2
 804c440:	81a3      	strh	r3, [r4, #12]
 804c442:	e7e3      	b.n	804c40c <__smakebuf_r+0xc>
 804c444:	4b0d      	ldr	r3, [pc, #52]	; (804c47c <__smakebuf_r+0x7c>)
 804c446:	62b3      	str	r3, [r6, #40]	; 0x28
 804c448:	89a3      	ldrh	r3, [r4, #12]
 804c44a:	6020      	str	r0, [r4, #0]
 804c44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804c450:	81a3      	strh	r3, [r4, #12]
 804c452:	9b00      	ldr	r3, [sp, #0]
 804c454:	6163      	str	r3, [r4, #20]
 804c456:	9b01      	ldr	r3, [sp, #4]
 804c458:	6120      	str	r0, [r4, #16]
 804c45a:	b15b      	cbz	r3, 804c474 <__smakebuf_r+0x74>
 804c45c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804c460:	4630      	mov	r0, r6
 804c462:	f000 f8d1 	bl	804c608 <_isatty_r>
 804c466:	b128      	cbz	r0, 804c474 <__smakebuf_r+0x74>
 804c468:	89a3      	ldrh	r3, [r4, #12]
 804c46a:	f023 0303 	bic.w	r3, r3, #3
 804c46e:	f043 0301 	orr.w	r3, r3, #1
 804c472:	81a3      	strh	r3, [r4, #12]
 804c474:	89a0      	ldrh	r0, [r4, #12]
 804c476:	4305      	orrs	r5, r0
 804c478:	81a5      	strh	r5, [r4, #12]
 804c47a:	e7cd      	b.n	804c418 <__smakebuf_r+0x18>
 804c47c:	0804c211 	.word	0x0804c211

0804c480 <_malloc_usable_size_r>:
 804c480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c484:	1f18      	subs	r0, r3, #4
 804c486:	2b00      	cmp	r3, #0
 804c488:	bfbc      	itt	lt
 804c48a:	580b      	ldrlt	r3, [r1, r0]
 804c48c:	18c0      	addlt	r0, r0, r3
 804c48e:	4770      	bx	lr

0804c490 <_raise_r>:
 804c490:	291f      	cmp	r1, #31
 804c492:	b538      	push	{r3, r4, r5, lr}
 804c494:	4604      	mov	r4, r0
 804c496:	460d      	mov	r5, r1
 804c498:	d904      	bls.n	804c4a4 <_raise_r+0x14>
 804c49a:	2316      	movs	r3, #22
 804c49c:	6003      	str	r3, [r0, #0]
 804c49e:	f04f 30ff 	mov.w	r0, #4294967295
 804c4a2:	bd38      	pop	{r3, r4, r5, pc}
 804c4a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 804c4a6:	b112      	cbz	r2, 804c4ae <_raise_r+0x1e>
 804c4a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 804c4ac:	b94b      	cbnz	r3, 804c4c2 <_raise_r+0x32>
 804c4ae:	4620      	mov	r0, r4
 804c4b0:	f000 f830 	bl	804c514 <_getpid_r>
 804c4b4:	462a      	mov	r2, r5
 804c4b6:	4601      	mov	r1, r0
 804c4b8:	4620      	mov	r0, r4
 804c4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804c4be:	f000 b817 	b.w	804c4f0 <_kill_r>
 804c4c2:	2b01      	cmp	r3, #1
 804c4c4:	d00a      	beq.n	804c4dc <_raise_r+0x4c>
 804c4c6:	1c59      	adds	r1, r3, #1
 804c4c8:	d103      	bne.n	804c4d2 <_raise_r+0x42>
 804c4ca:	2316      	movs	r3, #22
 804c4cc:	6003      	str	r3, [r0, #0]
 804c4ce:	2001      	movs	r0, #1
 804c4d0:	e7e7      	b.n	804c4a2 <_raise_r+0x12>
 804c4d2:	2400      	movs	r4, #0
 804c4d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 804c4d8:	4628      	mov	r0, r5
 804c4da:	4798      	blx	r3
 804c4dc:	2000      	movs	r0, #0
 804c4de:	e7e0      	b.n	804c4a2 <_raise_r+0x12>

0804c4e0 <raise>:
 804c4e0:	4b02      	ldr	r3, [pc, #8]	; (804c4ec <raise+0xc>)
 804c4e2:	4601      	mov	r1, r0
 804c4e4:	6818      	ldr	r0, [r3, #0]
 804c4e6:	f7ff bfd3 	b.w	804c490 <_raise_r>
 804c4ea:	bf00      	nop
 804c4ec:	20000018 	.word	0x20000018

0804c4f0 <_kill_r>:
 804c4f0:	b538      	push	{r3, r4, r5, lr}
 804c4f2:	4d07      	ldr	r5, [pc, #28]	; (804c510 <_kill_r+0x20>)
 804c4f4:	2300      	movs	r3, #0
 804c4f6:	4604      	mov	r4, r0
 804c4f8:	4608      	mov	r0, r1
 804c4fa:	4611      	mov	r1, r2
 804c4fc:	602b      	str	r3, [r5, #0]
 804c4fe:	f7f7 fd4f 	bl	8043fa0 <_kill>
 804c502:	1c43      	adds	r3, r0, #1
 804c504:	d102      	bne.n	804c50c <_kill_r+0x1c>
 804c506:	682b      	ldr	r3, [r5, #0]
 804c508:	b103      	cbz	r3, 804c50c <_kill_r+0x1c>
 804c50a:	6023      	str	r3, [r4, #0]
 804c50c:	bd38      	pop	{r3, r4, r5, pc}
 804c50e:	bf00      	nop
 804c510:	2000ef90 	.word	0x2000ef90

0804c514 <_getpid_r>:
 804c514:	f7f7 bd3c 	b.w	8043f90 <_getpid>

0804c518 <__sread>:
 804c518:	b510      	push	{r4, lr}
 804c51a:	460c      	mov	r4, r1
 804c51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c520:	f000 f894 	bl	804c64c <_read_r>
 804c524:	2800      	cmp	r0, #0
 804c526:	bfab      	itete	ge
 804c528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804c52a:	89a3      	ldrhlt	r3, [r4, #12]
 804c52c:	181b      	addge	r3, r3, r0
 804c52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804c532:	bfac      	ite	ge
 804c534:	6563      	strge	r3, [r4, #84]	; 0x54
 804c536:	81a3      	strhlt	r3, [r4, #12]
 804c538:	bd10      	pop	{r4, pc}

0804c53a <__swrite>:
 804c53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c53e:	461f      	mov	r7, r3
 804c540:	898b      	ldrh	r3, [r1, #12]
 804c542:	05db      	lsls	r3, r3, #23
 804c544:	4605      	mov	r5, r0
 804c546:	460c      	mov	r4, r1
 804c548:	4616      	mov	r6, r2
 804c54a:	d505      	bpl.n	804c558 <__swrite+0x1e>
 804c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c550:	2302      	movs	r3, #2
 804c552:	2200      	movs	r2, #0
 804c554:	f000 f868 	bl	804c628 <_lseek_r>
 804c558:	89a3      	ldrh	r3, [r4, #12]
 804c55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804c55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804c562:	81a3      	strh	r3, [r4, #12]
 804c564:	4632      	mov	r2, r6
 804c566:	463b      	mov	r3, r7
 804c568:	4628      	mov	r0, r5
 804c56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804c56e:	f000 b817 	b.w	804c5a0 <_write_r>

0804c572 <__sseek>:
 804c572:	b510      	push	{r4, lr}
 804c574:	460c      	mov	r4, r1
 804c576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c57a:	f000 f855 	bl	804c628 <_lseek_r>
 804c57e:	1c43      	adds	r3, r0, #1
 804c580:	89a3      	ldrh	r3, [r4, #12]
 804c582:	bf15      	itete	ne
 804c584:	6560      	strne	r0, [r4, #84]	; 0x54
 804c586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804c58a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804c58e:	81a3      	strheq	r3, [r4, #12]
 804c590:	bf18      	it	ne
 804c592:	81a3      	strhne	r3, [r4, #12]
 804c594:	bd10      	pop	{r4, pc}

0804c596 <__sclose>:
 804c596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c59a:	f000 b813 	b.w	804c5c4 <_close_r>
	...

0804c5a0 <_write_r>:
 804c5a0:	b538      	push	{r3, r4, r5, lr}
 804c5a2:	4d07      	ldr	r5, [pc, #28]	; (804c5c0 <_write_r+0x20>)
 804c5a4:	4604      	mov	r4, r0
 804c5a6:	4608      	mov	r0, r1
 804c5a8:	4611      	mov	r1, r2
 804c5aa:	2200      	movs	r2, #0
 804c5ac:	602a      	str	r2, [r5, #0]
 804c5ae:	461a      	mov	r2, r3
 804c5b0:	f7f7 fd2d 	bl	804400e <_write>
 804c5b4:	1c43      	adds	r3, r0, #1
 804c5b6:	d102      	bne.n	804c5be <_write_r+0x1e>
 804c5b8:	682b      	ldr	r3, [r5, #0]
 804c5ba:	b103      	cbz	r3, 804c5be <_write_r+0x1e>
 804c5bc:	6023      	str	r3, [r4, #0]
 804c5be:	bd38      	pop	{r3, r4, r5, pc}
 804c5c0:	2000ef90 	.word	0x2000ef90

0804c5c4 <_close_r>:
 804c5c4:	b538      	push	{r3, r4, r5, lr}
 804c5c6:	4d06      	ldr	r5, [pc, #24]	; (804c5e0 <_close_r+0x1c>)
 804c5c8:	2300      	movs	r3, #0
 804c5ca:	4604      	mov	r4, r0
 804c5cc:	4608      	mov	r0, r1
 804c5ce:	602b      	str	r3, [r5, #0]
 804c5d0:	f7f7 fd39 	bl	8044046 <_close>
 804c5d4:	1c43      	adds	r3, r0, #1
 804c5d6:	d102      	bne.n	804c5de <_close_r+0x1a>
 804c5d8:	682b      	ldr	r3, [r5, #0]
 804c5da:	b103      	cbz	r3, 804c5de <_close_r+0x1a>
 804c5dc:	6023      	str	r3, [r4, #0]
 804c5de:	bd38      	pop	{r3, r4, r5, pc}
 804c5e0:	2000ef90 	.word	0x2000ef90

0804c5e4 <_fstat_r>:
 804c5e4:	b538      	push	{r3, r4, r5, lr}
 804c5e6:	4d07      	ldr	r5, [pc, #28]	; (804c604 <_fstat_r+0x20>)
 804c5e8:	2300      	movs	r3, #0
 804c5ea:	4604      	mov	r4, r0
 804c5ec:	4608      	mov	r0, r1
 804c5ee:	4611      	mov	r1, r2
 804c5f0:	602b      	str	r3, [r5, #0]
 804c5f2:	f7f7 fd34 	bl	804405e <_fstat>
 804c5f6:	1c43      	adds	r3, r0, #1
 804c5f8:	d102      	bne.n	804c600 <_fstat_r+0x1c>
 804c5fa:	682b      	ldr	r3, [r5, #0]
 804c5fc:	b103      	cbz	r3, 804c600 <_fstat_r+0x1c>
 804c5fe:	6023      	str	r3, [r4, #0]
 804c600:	bd38      	pop	{r3, r4, r5, pc}
 804c602:	bf00      	nop
 804c604:	2000ef90 	.word	0x2000ef90

0804c608 <_isatty_r>:
 804c608:	b538      	push	{r3, r4, r5, lr}
 804c60a:	4d06      	ldr	r5, [pc, #24]	; (804c624 <_isatty_r+0x1c>)
 804c60c:	2300      	movs	r3, #0
 804c60e:	4604      	mov	r4, r0
 804c610:	4608      	mov	r0, r1
 804c612:	602b      	str	r3, [r5, #0]
 804c614:	f7f7 fd33 	bl	804407e <_isatty>
 804c618:	1c43      	adds	r3, r0, #1
 804c61a:	d102      	bne.n	804c622 <_isatty_r+0x1a>
 804c61c:	682b      	ldr	r3, [r5, #0]
 804c61e:	b103      	cbz	r3, 804c622 <_isatty_r+0x1a>
 804c620:	6023      	str	r3, [r4, #0]
 804c622:	bd38      	pop	{r3, r4, r5, pc}
 804c624:	2000ef90 	.word	0x2000ef90

0804c628 <_lseek_r>:
 804c628:	b538      	push	{r3, r4, r5, lr}
 804c62a:	4d07      	ldr	r5, [pc, #28]	; (804c648 <_lseek_r+0x20>)
 804c62c:	4604      	mov	r4, r0
 804c62e:	4608      	mov	r0, r1
 804c630:	4611      	mov	r1, r2
 804c632:	2200      	movs	r2, #0
 804c634:	602a      	str	r2, [r5, #0]
 804c636:	461a      	mov	r2, r3
 804c638:	f7f7 fd2c 	bl	8044094 <_lseek>
 804c63c:	1c43      	adds	r3, r0, #1
 804c63e:	d102      	bne.n	804c646 <_lseek_r+0x1e>
 804c640:	682b      	ldr	r3, [r5, #0]
 804c642:	b103      	cbz	r3, 804c646 <_lseek_r+0x1e>
 804c644:	6023      	str	r3, [r4, #0]
 804c646:	bd38      	pop	{r3, r4, r5, pc}
 804c648:	2000ef90 	.word	0x2000ef90

0804c64c <_read_r>:
 804c64c:	b538      	push	{r3, r4, r5, lr}
 804c64e:	4d07      	ldr	r5, [pc, #28]	; (804c66c <_read_r+0x20>)
 804c650:	4604      	mov	r4, r0
 804c652:	4608      	mov	r0, r1
 804c654:	4611      	mov	r1, r2
 804c656:	2200      	movs	r2, #0
 804c658:	602a      	str	r2, [r5, #0]
 804c65a:	461a      	mov	r2, r3
 804c65c:	f7f7 fcba 	bl	8043fd4 <_read>
 804c660:	1c43      	adds	r3, r0, #1
 804c662:	d102      	bne.n	804c66a <_read_r+0x1e>
 804c664:	682b      	ldr	r3, [r5, #0]
 804c666:	b103      	cbz	r3, 804c66a <_read_r+0x1e>
 804c668:	6023      	str	r3, [r4, #0]
 804c66a:	bd38      	pop	{r3, r4, r5, pc}
 804c66c:	2000ef90 	.word	0x2000ef90

0804c670 <pow>:
 804c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804c674:	ec59 8b10 	vmov	r8, r9, d0
 804c678:	ec57 6b11 	vmov	r6, r7, d1
 804c67c:	f000 f8a8 	bl	804c7d0 <__ieee754_pow>
 804c680:	4b4e      	ldr	r3, [pc, #312]	; (804c7bc <pow+0x14c>)
 804c682:	f993 3000 	ldrsb.w	r3, [r3]
 804c686:	3301      	adds	r3, #1
 804c688:	ec55 4b10 	vmov	r4, r5, d0
 804c68c:	d015      	beq.n	804c6ba <pow+0x4a>
 804c68e:	4632      	mov	r2, r6
 804c690:	463b      	mov	r3, r7
 804c692:	4630      	mov	r0, r6
 804c694:	4639      	mov	r1, r7
 804c696:	f7f4 fa49 	bl	8040b2c <__aeabi_dcmpun>
 804c69a:	b970      	cbnz	r0, 804c6ba <pow+0x4a>
 804c69c:	4642      	mov	r2, r8
 804c69e:	464b      	mov	r3, r9
 804c6a0:	4640      	mov	r0, r8
 804c6a2:	4649      	mov	r1, r9
 804c6a4:	f7f4 fa42 	bl	8040b2c <__aeabi_dcmpun>
 804c6a8:	2200      	movs	r2, #0
 804c6aa:	2300      	movs	r3, #0
 804c6ac:	b148      	cbz	r0, 804c6c2 <pow+0x52>
 804c6ae:	4630      	mov	r0, r6
 804c6b0:	4639      	mov	r1, r7
 804c6b2:	f7f4 fa09 	bl	8040ac8 <__aeabi_dcmpeq>
 804c6b6:	2800      	cmp	r0, #0
 804c6b8:	d17d      	bne.n	804c7b6 <pow+0x146>
 804c6ba:	ec45 4b10 	vmov	d0, r4, r5
 804c6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804c6c2:	4640      	mov	r0, r8
 804c6c4:	4649      	mov	r1, r9
 804c6c6:	f7f4 f9ff 	bl	8040ac8 <__aeabi_dcmpeq>
 804c6ca:	b1e0      	cbz	r0, 804c706 <pow+0x96>
 804c6cc:	2200      	movs	r2, #0
 804c6ce:	2300      	movs	r3, #0
 804c6d0:	4630      	mov	r0, r6
 804c6d2:	4639      	mov	r1, r7
 804c6d4:	f7f4 f9f8 	bl	8040ac8 <__aeabi_dcmpeq>
 804c6d8:	2800      	cmp	r0, #0
 804c6da:	d16c      	bne.n	804c7b6 <pow+0x146>
 804c6dc:	ec47 6b10 	vmov	d0, r6, r7
 804c6e0:	f000 fe55 	bl	804d38e <finite>
 804c6e4:	2800      	cmp	r0, #0
 804c6e6:	d0e8      	beq.n	804c6ba <pow+0x4a>
 804c6e8:	2200      	movs	r2, #0
 804c6ea:	2300      	movs	r3, #0
 804c6ec:	4630      	mov	r0, r6
 804c6ee:	4639      	mov	r1, r7
 804c6f0:	f7f4 f9f4 	bl	8040adc <__aeabi_dcmplt>
 804c6f4:	2800      	cmp	r0, #0
 804c6f6:	d0e0      	beq.n	804c6ba <pow+0x4a>
 804c6f8:	f7fb fb1e 	bl	8047d38 <__errno>
 804c6fc:	2321      	movs	r3, #33	; 0x21
 804c6fe:	6003      	str	r3, [r0, #0]
 804c700:	2400      	movs	r4, #0
 804c702:	4d2f      	ldr	r5, [pc, #188]	; (804c7c0 <pow+0x150>)
 804c704:	e7d9      	b.n	804c6ba <pow+0x4a>
 804c706:	ec45 4b10 	vmov	d0, r4, r5
 804c70a:	f000 fe40 	bl	804d38e <finite>
 804c70e:	bbb8      	cbnz	r0, 804c780 <pow+0x110>
 804c710:	ec49 8b10 	vmov	d0, r8, r9
 804c714:	f000 fe3b 	bl	804d38e <finite>
 804c718:	b390      	cbz	r0, 804c780 <pow+0x110>
 804c71a:	ec47 6b10 	vmov	d0, r6, r7
 804c71e:	f000 fe36 	bl	804d38e <finite>
 804c722:	b368      	cbz	r0, 804c780 <pow+0x110>
 804c724:	4622      	mov	r2, r4
 804c726:	462b      	mov	r3, r5
 804c728:	4620      	mov	r0, r4
 804c72a:	4629      	mov	r1, r5
 804c72c:	f7f4 f9fe 	bl	8040b2c <__aeabi_dcmpun>
 804c730:	b160      	cbz	r0, 804c74c <pow+0xdc>
 804c732:	f7fb fb01 	bl	8047d38 <__errno>
 804c736:	2321      	movs	r3, #33	; 0x21
 804c738:	6003      	str	r3, [r0, #0]
 804c73a:	2200      	movs	r2, #0
 804c73c:	2300      	movs	r3, #0
 804c73e:	4610      	mov	r0, r2
 804c740:	4619      	mov	r1, r3
 804c742:	f7f4 f883 	bl	804084c <__aeabi_ddiv>
 804c746:	4604      	mov	r4, r0
 804c748:	460d      	mov	r5, r1
 804c74a:	e7b6      	b.n	804c6ba <pow+0x4a>
 804c74c:	f7fb faf4 	bl	8047d38 <__errno>
 804c750:	2322      	movs	r3, #34	; 0x22
 804c752:	6003      	str	r3, [r0, #0]
 804c754:	2200      	movs	r2, #0
 804c756:	2300      	movs	r3, #0
 804c758:	4640      	mov	r0, r8
 804c75a:	4649      	mov	r1, r9
 804c75c:	f7f4 f9be 	bl	8040adc <__aeabi_dcmplt>
 804c760:	2400      	movs	r4, #0
 804c762:	b158      	cbz	r0, 804c77c <pow+0x10c>
 804c764:	ec47 6b10 	vmov	d0, r6, r7
 804c768:	f000 fe1c 	bl	804d3a4 <rint>
 804c76c:	4632      	mov	r2, r6
 804c76e:	ec51 0b10 	vmov	r0, r1, d0
 804c772:	463b      	mov	r3, r7
 804c774:	f7f4 f9a8 	bl	8040ac8 <__aeabi_dcmpeq>
 804c778:	2800      	cmp	r0, #0
 804c77a:	d0c2      	beq.n	804c702 <pow+0x92>
 804c77c:	4d11      	ldr	r5, [pc, #68]	; (804c7c4 <pow+0x154>)
 804c77e:	e79c      	b.n	804c6ba <pow+0x4a>
 804c780:	2200      	movs	r2, #0
 804c782:	2300      	movs	r3, #0
 804c784:	4620      	mov	r0, r4
 804c786:	4629      	mov	r1, r5
 804c788:	f7f4 f99e 	bl	8040ac8 <__aeabi_dcmpeq>
 804c78c:	2800      	cmp	r0, #0
 804c78e:	d094      	beq.n	804c6ba <pow+0x4a>
 804c790:	ec49 8b10 	vmov	d0, r8, r9
 804c794:	f000 fdfb 	bl	804d38e <finite>
 804c798:	2800      	cmp	r0, #0
 804c79a:	d08e      	beq.n	804c6ba <pow+0x4a>
 804c79c:	ec47 6b10 	vmov	d0, r6, r7
 804c7a0:	f000 fdf5 	bl	804d38e <finite>
 804c7a4:	2800      	cmp	r0, #0
 804c7a6:	d088      	beq.n	804c6ba <pow+0x4a>
 804c7a8:	f7fb fac6 	bl	8047d38 <__errno>
 804c7ac:	2322      	movs	r3, #34	; 0x22
 804c7ae:	6003      	str	r3, [r0, #0]
 804c7b0:	2400      	movs	r4, #0
 804c7b2:	2500      	movs	r5, #0
 804c7b4:	e781      	b.n	804c6ba <pow+0x4a>
 804c7b6:	4d04      	ldr	r5, [pc, #16]	; (804c7c8 <pow+0x158>)
 804c7b8:	2400      	movs	r4, #0
 804c7ba:	e77e      	b.n	804c6ba <pow+0x4a>
 804c7bc:	200001ec 	.word	0x200001ec
 804c7c0:	fff00000 	.word	0xfff00000
 804c7c4:	7ff00000 	.word	0x7ff00000
 804c7c8:	3ff00000 	.word	0x3ff00000
 804c7cc:	00000000 	.word	0x00000000

0804c7d0 <__ieee754_pow>:
 804c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c7d4:	ed2d 8b06 	vpush	{d8-d10}
 804c7d8:	b08d      	sub	sp, #52	; 0x34
 804c7da:	ed8d 1b02 	vstr	d1, [sp, #8]
 804c7de:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 804c7e2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 804c7e6:	ea56 0100 	orrs.w	r1, r6, r0
 804c7ea:	ec53 2b10 	vmov	r2, r3, d0
 804c7ee:	f000 84d1 	beq.w	804d194 <__ieee754_pow+0x9c4>
 804c7f2:	497f      	ldr	r1, [pc, #508]	; (804c9f0 <__ieee754_pow+0x220>)
 804c7f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 804c7f8:	428c      	cmp	r4, r1
 804c7fa:	ee10 8a10 	vmov	r8, s0
 804c7fe:	4699      	mov	r9, r3
 804c800:	dc09      	bgt.n	804c816 <__ieee754_pow+0x46>
 804c802:	d103      	bne.n	804c80c <__ieee754_pow+0x3c>
 804c804:	b97a      	cbnz	r2, 804c826 <__ieee754_pow+0x56>
 804c806:	42a6      	cmp	r6, r4
 804c808:	dd02      	ble.n	804c810 <__ieee754_pow+0x40>
 804c80a:	e00c      	b.n	804c826 <__ieee754_pow+0x56>
 804c80c:	428e      	cmp	r6, r1
 804c80e:	dc02      	bgt.n	804c816 <__ieee754_pow+0x46>
 804c810:	428e      	cmp	r6, r1
 804c812:	d110      	bne.n	804c836 <__ieee754_pow+0x66>
 804c814:	b178      	cbz	r0, 804c836 <__ieee754_pow+0x66>
 804c816:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 804c81a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 804c81e:	ea54 0308 	orrs.w	r3, r4, r8
 804c822:	f000 84b7 	beq.w	804d194 <__ieee754_pow+0x9c4>
 804c826:	4873      	ldr	r0, [pc, #460]	; (804c9f4 <__ieee754_pow+0x224>)
 804c828:	b00d      	add	sp, #52	; 0x34
 804c82a:	ecbd 8b06 	vpop	{d8-d10}
 804c82e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c832:	f7ff b931 	b.w	804ba98 <nan>
 804c836:	f1b9 0f00 	cmp.w	r9, #0
 804c83a:	da36      	bge.n	804c8aa <__ieee754_pow+0xda>
 804c83c:	496e      	ldr	r1, [pc, #440]	; (804c9f8 <__ieee754_pow+0x228>)
 804c83e:	428e      	cmp	r6, r1
 804c840:	dc51      	bgt.n	804c8e6 <__ieee754_pow+0x116>
 804c842:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 804c846:	428e      	cmp	r6, r1
 804c848:	f340 84af 	ble.w	804d1aa <__ieee754_pow+0x9da>
 804c84c:	1531      	asrs	r1, r6, #20
 804c84e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 804c852:	2914      	cmp	r1, #20
 804c854:	dd0f      	ble.n	804c876 <__ieee754_pow+0xa6>
 804c856:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 804c85a:	fa20 fc01 	lsr.w	ip, r0, r1
 804c85e:	fa0c f101 	lsl.w	r1, ip, r1
 804c862:	4281      	cmp	r1, r0
 804c864:	f040 84a1 	bne.w	804d1aa <__ieee754_pow+0x9da>
 804c868:	f00c 0c01 	and.w	ip, ip, #1
 804c86c:	f1cc 0102 	rsb	r1, ip, #2
 804c870:	9100      	str	r1, [sp, #0]
 804c872:	b180      	cbz	r0, 804c896 <__ieee754_pow+0xc6>
 804c874:	e059      	b.n	804c92a <__ieee754_pow+0x15a>
 804c876:	2800      	cmp	r0, #0
 804c878:	d155      	bne.n	804c926 <__ieee754_pow+0x156>
 804c87a:	f1c1 0114 	rsb	r1, r1, #20
 804c87e:	fa46 fc01 	asr.w	ip, r6, r1
 804c882:	fa0c f101 	lsl.w	r1, ip, r1
 804c886:	42b1      	cmp	r1, r6
 804c888:	f040 848c 	bne.w	804d1a4 <__ieee754_pow+0x9d4>
 804c88c:	f00c 0c01 	and.w	ip, ip, #1
 804c890:	f1cc 0102 	rsb	r1, ip, #2
 804c894:	9100      	str	r1, [sp, #0]
 804c896:	4959      	ldr	r1, [pc, #356]	; (804c9fc <__ieee754_pow+0x22c>)
 804c898:	428e      	cmp	r6, r1
 804c89a:	d12d      	bne.n	804c8f8 <__ieee754_pow+0x128>
 804c89c:	2f00      	cmp	r7, #0
 804c89e:	da79      	bge.n	804c994 <__ieee754_pow+0x1c4>
 804c8a0:	4956      	ldr	r1, [pc, #344]	; (804c9fc <__ieee754_pow+0x22c>)
 804c8a2:	2000      	movs	r0, #0
 804c8a4:	f7f3 ffd2 	bl	804084c <__aeabi_ddiv>
 804c8a8:	e016      	b.n	804c8d8 <__ieee754_pow+0x108>
 804c8aa:	2100      	movs	r1, #0
 804c8ac:	9100      	str	r1, [sp, #0]
 804c8ae:	2800      	cmp	r0, #0
 804c8b0:	d13b      	bne.n	804c92a <__ieee754_pow+0x15a>
 804c8b2:	494f      	ldr	r1, [pc, #316]	; (804c9f0 <__ieee754_pow+0x220>)
 804c8b4:	428e      	cmp	r6, r1
 804c8b6:	d1ee      	bne.n	804c896 <__ieee754_pow+0xc6>
 804c8b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 804c8bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 804c8c0:	ea53 0308 	orrs.w	r3, r3, r8
 804c8c4:	f000 8466 	beq.w	804d194 <__ieee754_pow+0x9c4>
 804c8c8:	4b4d      	ldr	r3, [pc, #308]	; (804ca00 <__ieee754_pow+0x230>)
 804c8ca:	429c      	cmp	r4, r3
 804c8cc:	dd0d      	ble.n	804c8ea <__ieee754_pow+0x11a>
 804c8ce:	2f00      	cmp	r7, #0
 804c8d0:	f280 8464 	bge.w	804d19c <__ieee754_pow+0x9cc>
 804c8d4:	2000      	movs	r0, #0
 804c8d6:	2100      	movs	r1, #0
 804c8d8:	ec41 0b10 	vmov	d0, r0, r1
 804c8dc:	b00d      	add	sp, #52	; 0x34
 804c8de:	ecbd 8b06 	vpop	{d8-d10}
 804c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c8e6:	2102      	movs	r1, #2
 804c8e8:	e7e0      	b.n	804c8ac <__ieee754_pow+0xdc>
 804c8ea:	2f00      	cmp	r7, #0
 804c8ec:	daf2      	bge.n	804c8d4 <__ieee754_pow+0x104>
 804c8ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 804c8f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 804c8f6:	e7ef      	b.n	804c8d8 <__ieee754_pow+0x108>
 804c8f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 804c8fc:	d104      	bne.n	804c908 <__ieee754_pow+0x138>
 804c8fe:	4610      	mov	r0, r2
 804c900:	4619      	mov	r1, r3
 804c902:	f7f3 fe79 	bl	80405f8 <__aeabi_dmul>
 804c906:	e7e7      	b.n	804c8d8 <__ieee754_pow+0x108>
 804c908:	493e      	ldr	r1, [pc, #248]	; (804ca04 <__ieee754_pow+0x234>)
 804c90a:	428f      	cmp	r7, r1
 804c90c:	d10d      	bne.n	804c92a <__ieee754_pow+0x15a>
 804c90e:	f1b9 0f00 	cmp.w	r9, #0
 804c912:	db0a      	blt.n	804c92a <__ieee754_pow+0x15a>
 804c914:	ec43 2b10 	vmov	d0, r2, r3
 804c918:	b00d      	add	sp, #52	; 0x34
 804c91a:	ecbd 8b06 	vpop	{d8-d10}
 804c91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c922:	f000 bc77 	b.w	804d214 <__ieee754_sqrt>
 804c926:	2100      	movs	r1, #0
 804c928:	9100      	str	r1, [sp, #0]
 804c92a:	ec43 2b10 	vmov	d0, r2, r3
 804c92e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 804c932:	f000 fd23 	bl	804d37c <fabs>
 804c936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 804c93a:	ec51 0b10 	vmov	r0, r1, d0
 804c93e:	f1b8 0f00 	cmp.w	r8, #0
 804c942:	d12a      	bne.n	804c99a <__ieee754_pow+0x1ca>
 804c944:	b12c      	cbz	r4, 804c952 <__ieee754_pow+0x182>
 804c946:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 804c9fc <__ieee754_pow+0x22c>
 804c94a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 804c94e:	45e6      	cmp	lr, ip
 804c950:	d123      	bne.n	804c99a <__ieee754_pow+0x1ca>
 804c952:	2f00      	cmp	r7, #0
 804c954:	da05      	bge.n	804c962 <__ieee754_pow+0x192>
 804c956:	4602      	mov	r2, r0
 804c958:	460b      	mov	r3, r1
 804c95a:	2000      	movs	r0, #0
 804c95c:	4927      	ldr	r1, [pc, #156]	; (804c9fc <__ieee754_pow+0x22c>)
 804c95e:	f7f3 ff75 	bl	804084c <__aeabi_ddiv>
 804c962:	f1b9 0f00 	cmp.w	r9, #0
 804c966:	dab7      	bge.n	804c8d8 <__ieee754_pow+0x108>
 804c968:	9b00      	ldr	r3, [sp, #0]
 804c96a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 804c96e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 804c972:	4323      	orrs	r3, r4
 804c974:	d108      	bne.n	804c988 <__ieee754_pow+0x1b8>
 804c976:	4602      	mov	r2, r0
 804c978:	460b      	mov	r3, r1
 804c97a:	4610      	mov	r0, r2
 804c97c:	4619      	mov	r1, r3
 804c97e:	f7f3 fc83 	bl	8040288 <__aeabi_dsub>
 804c982:	4602      	mov	r2, r0
 804c984:	460b      	mov	r3, r1
 804c986:	e78d      	b.n	804c8a4 <__ieee754_pow+0xd4>
 804c988:	9b00      	ldr	r3, [sp, #0]
 804c98a:	2b01      	cmp	r3, #1
 804c98c:	d1a4      	bne.n	804c8d8 <__ieee754_pow+0x108>
 804c98e:	4602      	mov	r2, r0
 804c990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804c994:	4610      	mov	r0, r2
 804c996:	4619      	mov	r1, r3
 804c998:	e79e      	b.n	804c8d8 <__ieee754_pow+0x108>
 804c99a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 804c99e:	f10c 35ff 	add.w	r5, ip, #4294967295
 804c9a2:	950a      	str	r5, [sp, #40]	; 0x28
 804c9a4:	9d00      	ldr	r5, [sp, #0]
 804c9a6:	46ac      	mov	ip, r5
 804c9a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 804c9aa:	ea5c 0505 	orrs.w	r5, ip, r5
 804c9ae:	d0e4      	beq.n	804c97a <__ieee754_pow+0x1aa>
 804c9b0:	4b15      	ldr	r3, [pc, #84]	; (804ca08 <__ieee754_pow+0x238>)
 804c9b2:	429e      	cmp	r6, r3
 804c9b4:	f340 80fc 	ble.w	804cbb0 <__ieee754_pow+0x3e0>
 804c9b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 804c9bc:	429e      	cmp	r6, r3
 804c9be:	4b10      	ldr	r3, [pc, #64]	; (804ca00 <__ieee754_pow+0x230>)
 804c9c0:	dd07      	ble.n	804c9d2 <__ieee754_pow+0x202>
 804c9c2:	429c      	cmp	r4, r3
 804c9c4:	dc0a      	bgt.n	804c9dc <__ieee754_pow+0x20c>
 804c9c6:	2f00      	cmp	r7, #0
 804c9c8:	da84      	bge.n	804c8d4 <__ieee754_pow+0x104>
 804c9ca:	a307      	add	r3, pc, #28	; (adr r3, 804c9e8 <__ieee754_pow+0x218>)
 804c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804c9d0:	e795      	b.n	804c8fe <__ieee754_pow+0x12e>
 804c9d2:	429c      	cmp	r4, r3
 804c9d4:	dbf7      	blt.n	804c9c6 <__ieee754_pow+0x1f6>
 804c9d6:	4b09      	ldr	r3, [pc, #36]	; (804c9fc <__ieee754_pow+0x22c>)
 804c9d8:	429c      	cmp	r4, r3
 804c9da:	dd17      	ble.n	804ca0c <__ieee754_pow+0x23c>
 804c9dc:	2f00      	cmp	r7, #0
 804c9de:	dcf4      	bgt.n	804c9ca <__ieee754_pow+0x1fa>
 804c9e0:	e778      	b.n	804c8d4 <__ieee754_pow+0x104>
 804c9e2:	bf00      	nop
 804c9e4:	f3af 8000 	nop.w
 804c9e8:	8800759c 	.word	0x8800759c
 804c9ec:	7e37e43c 	.word	0x7e37e43c
 804c9f0:	7ff00000 	.word	0x7ff00000
 804c9f4:	0804dbe0 	.word	0x0804dbe0
 804c9f8:	433fffff 	.word	0x433fffff
 804c9fc:	3ff00000 	.word	0x3ff00000
 804ca00:	3fefffff 	.word	0x3fefffff
 804ca04:	3fe00000 	.word	0x3fe00000
 804ca08:	41e00000 	.word	0x41e00000
 804ca0c:	4b64      	ldr	r3, [pc, #400]	; (804cba0 <__ieee754_pow+0x3d0>)
 804ca0e:	2200      	movs	r2, #0
 804ca10:	f7f3 fc3a 	bl	8040288 <__aeabi_dsub>
 804ca14:	a356      	add	r3, pc, #344	; (adr r3, 804cb70 <__ieee754_pow+0x3a0>)
 804ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ca1a:	4604      	mov	r4, r0
 804ca1c:	460d      	mov	r5, r1
 804ca1e:	f7f3 fdeb 	bl	80405f8 <__aeabi_dmul>
 804ca22:	a355      	add	r3, pc, #340	; (adr r3, 804cb78 <__ieee754_pow+0x3a8>)
 804ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ca28:	4606      	mov	r6, r0
 804ca2a:	460f      	mov	r7, r1
 804ca2c:	4620      	mov	r0, r4
 804ca2e:	4629      	mov	r1, r5
 804ca30:	f7f3 fde2 	bl	80405f8 <__aeabi_dmul>
 804ca34:	4b5b      	ldr	r3, [pc, #364]	; (804cba4 <__ieee754_pow+0x3d4>)
 804ca36:	4682      	mov	sl, r0
 804ca38:	468b      	mov	fp, r1
 804ca3a:	2200      	movs	r2, #0
 804ca3c:	4620      	mov	r0, r4
 804ca3e:	4629      	mov	r1, r5
 804ca40:	f7f3 fdda 	bl	80405f8 <__aeabi_dmul>
 804ca44:	4602      	mov	r2, r0
 804ca46:	460b      	mov	r3, r1
 804ca48:	a14d      	add	r1, pc, #308	; (adr r1, 804cb80 <__ieee754_pow+0x3b0>)
 804ca4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 804ca4e:	f7f3 fc1b 	bl	8040288 <__aeabi_dsub>
 804ca52:	4622      	mov	r2, r4
 804ca54:	462b      	mov	r3, r5
 804ca56:	f7f3 fdcf 	bl	80405f8 <__aeabi_dmul>
 804ca5a:	4602      	mov	r2, r0
 804ca5c:	460b      	mov	r3, r1
 804ca5e:	2000      	movs	r0, #0
 804ca60:	4951      	ldr	r1, [pc, #324]	; (804cba8 <__ieee754_pow+0x3d8>)
 804ca62:	f7f3 fc11 	bl	8040288 <__aeabi_dsub>
 804ca66:	4622      	mov	r2, r4
 804ca68:	4680      	mov	r8, r0
 804ca6a:	4689      	mov	r9, r1
 804ca6c:	462b      	mov	r3, r5
 804ca6e:	4620      	mov	r0, r4
 804ca70:	4629      	mov	r1, r5
 804ca72:	f7f3 fdc1 	bl	80405f8 <__aeabi_dmul>
 804ca76:	4602      	mov	r2, r0
 804ca78:	460b      	mov	r3, r1
 804ca7a:	4640      	mov	r0, r8
 804ca7c:	4649      	mov	r1, r9
 804ca7e:	f7f3 fdbb 	bl	80405f8 <__aeabi_dmul>
 804ca82:	a341      	add	r3, pc, #260	; (adr r3, 804cb88 <__ieee754_pow+0x3b8>)
 804ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ca88:	f7f3 fdb6 	bl	80405f8 <__aeabi_dmul>
 804ca8c:	4602      	mov	r2, r0
 804ca8e:	460b      	mov	r3, r1
 804ca90:	4650      	mov	r0, sl
 804ca92:	4659      	mov	r1, fp
 804ca94:	f7f3 fbf8 	bl	8040288 <__aeabi_dsub>
 804ca98:	4602      	mov	r2, r0
 804ca9a:	460b      	mov	r3, r1
 804ca9c:	4680      	mov	r8, r0
 804ca9e:	4689      	mov	r9, r1
 804caa0:	4630      	mov	r0, r6
 804caa2:	4639      	mov	r1, r7
 804caa4:	f7f3 fbf2 	bl	804028c <__adddf3>
 804caa8:	2400      	movs	r4, #0
 804caaa:	4632      	mov	r2, r6
 804caac:	463b      	mov	r3, r7
 804caae:	4620      	mov	r0, r4
 804cab0:	460d      	mov	r5, r1
 804cab2:	f7f3 fbe9 	bl	8040288 <__aeabi_dsub>
 804cab6:	4602      	mov	r2, r0
 804cab8:	460b      	mov	r3, r1
 804caba:	4640      	mov	r0, r8
 804cabc:	4649      	mov	r1, r9
 804cabe:	f7f3 fbe3 	bl	8040288 <__aeabi_dsub>
 804cac2:	9b00      	ldr	r3, [sp, #0]
 804cac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 804cac6:	3b01      	subs	r3, #1
 804cac8:	4313      	orrs	r3, r2
 804caca:	4682      	mov	sl, r0
 804cacc:	468b      	mov	fp, r1
 804cace:	f040 81f1 	bne.w	804ceb4 <__ieee754_pow+0x6e4>
 804cad2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 804cb90 <__ieee754_pow+0x3c0>
 804cad6:	eeb0 8a47 	vmov.f32	s16, s14
 804cada:	eef0 8a67 	vmov.f32	s17, s15
 804cade:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 804cae2:	2600      	movs	r6, #0
 804cae4:	4632      	mov	r2, r6
 804cae6:	463b      	mov	r3, r7
 804cae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804caec:	f7f3 fbcc 	bl	8040288 <__aeabi_dsub>
 804caf0:	4622      	mov	r2, r4
 804caf2:	462b      	mov	r3, r5
 804caf4:	f7f3 fd80 	bl	80405f8 <__aeabi_dmul>
 804caf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804cafc:	4680      	mov	r8, r0
 804cafe:	4689      	mov	r9, r1
 804cb00:	4650      	mov	r0, sl
 804cb02:	4659      	mov	r1, fp
 804cb04:	f7f3 fd78 	bl	80405f8 <__aeabi_dmul>
 804cb08:	4602      	mov	r2, r0
 804cb0a:	460b      	mov	r3, r1
 804cb0c:	4640      	mov	r0, r8
 804cb0e:	4649      	mov	r1, r9
 804cb10:	f7f3 fbbc 	bl	804028c <__adddf3>
 804cb14:	4632      	mov	r2, r6
 804cb16:	463b      	mov	r3, r7
 804cb18:	4680      	mov	r8, r0
 804cb1a:	4689      	mov	r9, r1
 804cb1c:	4620      	mov	r0, r4
 804cb1e:	4629      	mov	r1, r5
 804cb20:	f7f3 fd6a 	bl	80405f8 <__aeabi_dmul>
 804cb24:	460b      	mov	r3, r1
 804cb26:	4604      	mov	r4, r0
 804cb28:	460d      	mov	r5, r1
 804cb2a:	4602      	mov	r2, r0
 804cb2c:	4649      	mov	r1, r9
 804cb2e:	4640      	mov	r0, r8
 804cb30:	f7f3 fbac 	bl	804028c <__adddf3>
 804cb34:	4b1d      	ldr	r3, [pc, #116]	; (804cbac <__ieee754_pow+0x3dc>)
 804cb36:	4299      	cmp	r1, r3
 804cb38:	ec45 4b19 	vmov	d9, r4, r5
 804cb3c:	4606      	mov	r6, r0
 804cb3e:	460f      	mov	r7, r1
 804cb40:	468b      	mov	fp, r1
 804cb42:	f340 82fe 	ble.w	804d142 <__ieee754_pow+0x972>
 804cb46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 804cb4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 804cb4e:	4303      	orrs	r3, r0
 804cb50:	f000 81f0 	beq.w	804cf34 <__ieee754_pow+0x764>
 804cb54:	a310      	add	r3, pc, #64	; (adr r3, 804cb98 <__ieee754_pow+0x3c8>)
 804cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cb5a:	ec51 0b18 	vmov	r0, r1, d8
 804cb5e:	f7f3 fd4b 	bl	80405f8 <__aeabi_dmul>
 804cb62:	a30d      	add	r3, pc, #52	; (adr r3, 804cb98 <__ieee754_pow+0x3c8>)
 804cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cb68:	e6cb      	b.n	804c902 <__ieee754_pow+0x132>
 804cb6a:	bf00      	nop
 804cb6c:	f3af 8000 	nop.w
 804cb70:	60000000 	.word	0x60000000
 804cb74:	3ff71547 	.word	0x3ff71547
 804cb78:	f85ddf44 	.word	0xf85ddf44
 804cb7c:	3e54ae0b 	.word	0x3e54ae0b
 804cb80:	55555555 	.word	0x55555555
 804cb84:	3fd55555 	.word	0x3fd55555
 804cb88:	652b82fe 	.word	0x652b82fe
 804cb8c:	3ff71547 	.word	0x3ff71547
 804cb90:	00000000 	.word	0x00000000
 804cb94:	bff00000 	.word	0xbff00000
 804cb98:	8800759c 	.word	0x8800759c
 804cb9c:	7e37e43c 	.word	0x7e37e43c
 804cba0:	3ff00000 	.word	0x3ff00000
 804cba4:	3fd00000 	.word	0x3fd00000
 804cba8:	3fe00000 	.word	0x3fe00000
 804cbac:	408fffff 	.word	0x408fffff
 804cbb0:	4bd7      	ldr	r3, [pc, #860]	; (804cf10 <__ieee754_pow+0x740>)
 804cbb2:	ea03 0309 	and.w	r3, r3, r9
 804cbb6:	2200      	movs	r2, #0
 804cbb8:	b92b      	cbnz	r3, 804cbc6 <__ieee754_pow+0x3f6>
 804cbba:	4bd6      	ldr	r3, [pc, #856]	; (804cf14 <__ieee754_pow+0x744>)
 804cbbc:	f7f3 fd1c 	bl	80405f8 <__aeabi_dmul>
 804cbc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 804cbc4:	460c      	mov	r4, r1
 804cbc6:	1523      	asrs	r3, r4, #20
 804cbc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 804cbcc:	4413      	add	r3, r2
 804cbce:	9309      	str	r3, [sp, #36]	; 0x24
 804cbd0:	4bd1      	ldr	r3, [pc, #836]	; (804cf18 <__ieee754_pow+0x748>)
 804cbd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 804cbd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 804cbda:	429c      	cmp	r4, r3
 804cbdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 804cbe0:	dd08      	ble.n	804cbf4 <__ieee754_pow+0x424>
 804cbe2:	4bce      	ldr	r3, [pc, #824]	; (804cf1c <__ieee754_pow+0x74c>)
 804cbe4:	429c      	cmp	r4, r3
 804cbe6:	f340 8163 	ble.w	804ceb0 <__ieee754_pow+0x6e0>
 804cbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804cbec:	3301      	adds	r3, #1
 804cbee:	9309      	str	r3, [sp, #36]	; 0x24
 804cbf0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 804cbf4:	2400      	movs	r4, #0
 804cbf6:	00e3      	lsls	r3, r4, #3
 804cbf8:	930b      	str	r3, [sp, #44]	; 0x2c
 804cbfa:	4bc9      	ldr	r3, [pc, #804]	; (804cf20 <__ieee754_pow+0x750>)
 804cbfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 804cc00:	ed93 7b00 	vldr	d7, [r3]
 804cc04:	4629      	mov	r1, r5
 804cc06:	ec53 2b17 	vmov	r2, r3, d7
 804cc0a:	eeb0 8a47 	vmov.f32	s16, s14
 804cc0e:	eef0 8a67 	vmov.f32	s17, s15
 804cc12:	4682      	mov	sl, r0
 804cc14:	f7f3 fb38 	bl	8040288 <__aeabi_dsub>
 804cc18:	4652      	mov	r2, sl
 804cc1a:	4606      	mov	r6, r0
 804cc1c:	460f      	mov	r7, r1
 804cc1e:	462b      	mov	r3, r5
 804cc20:	ec51 0b18 	vmov	r0, r1, d8
 804cc24:	f7f3 fb32 	bl	804028c <__adddf3>
 804cc28:	4602      	mov	r2, r0
 804cc2a:	460b      	mov	r3, r1
 804cc2c:	2000      	movs	r0, #0
 804cc2e:	49bd      	ldr	r1, [pc, #756]	; (804cf24 <__ieee754_pow+0x754>)
 804cc30:	f7f3 fe0c 	bl	804084c <__aeabi_ddiv>
 804cc34:	ec41 0b19 	vmov	d9, r0, r1
 804cc38:	4602      	mov	r2, r0
 804cc3a:	460b      	mov	r3, r1
 804cc3c:	4630      	mov	r0, r6
 804cc3e:	4639      	mov	r1, r7
 804cc40:	f7f3 fcda 	bl	80405f8 <__aeabi_dmul>
 804cc44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804cc48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804cc4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 804cc50:	2300      	movs	r3, #0
 804cc52:	9304      	str	r3, [sp, #16]
 804cc54:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 804cc58:	46ab      	mov	fp, r5
 804cc5a:	106d      	asrs	r5, r5, #1
 804cc5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 804cc60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 804cc64:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 804cc68:	2200      	movs	r2, #0
 804cc6a:	4640      	mov	r0, r8
 804cc6c:	4649      	mov	r1, r9
 804cc6e:	4614      	mov	r4, r2
 804cc70:	461d      	mov	r5, r3
 804cc72:	f7f3 fcc1 	bl	80405f8 <__aeabi_dmul>
 804cc76:	4602      	mov	r2, r0
 804cc78:	460b      	mov	r3, r1
 804cc7a:	4630      	mov	r0, r6
 804cc7c:	4639      	mov	r1, r7
 804cc7e:	f7f3 fb03 	bl	8040288 <__aeabi_dsub>
 804cc82:	ec53 2b18 	vmov	r2, r3, d8
 804cc86:	4606      	mov	r6, r0
 804cc88:	460f      	mov	r7, r1
 804cc8a:	4620      	mov	r0, r4
 804cc8c:	4629      	mov	r1, r5
 804cc8e:	f7f3 fafb 	bl	8040288 <__aeabi_dsub>
 804cc92:	4602      	mov	r2, r0
 804cc94:	460b      	mov	r3, r1
 804cc96:	4650      	mov	r0, sl
 804cc98:	4659      	mov	r1, fp
 804cc9a:	f7f3 faf5 	bl	8040288 <__aeabi_dsub>
 804cc9e:	4642      	mov	r2, r8
 804cca0:	464b      	mov	r3, r9
 804cca2:	f7f3 fca9 	bl	80405f8 <__aeabi_dmul>
 804cca6:	4602      	mov	r2, r0
 804cca8:	460b      	mov	r3, r1
 804ccaa:	4630      	mov	r0, r6
 804ccac:	4639      	mov	r1, r7
 804ccae:	f7f3 faeb 	bl	8040288 <__aeabi_dsub>
 804ccb2:	ec53 2b19 	vmov	r2, r3, d9
 804ccb6:	f7f3 fc9f 	bl	80405f8 <__aeabi_dmul>
 804ccba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804ccbe:	ec41 0b18 	vmov	d8, r0, r1
 804ccc2:	4610      	mov	r0, r2
 804ccc4:	4619      	mov	r1, r3
 804ccc6:	f7f3 fc97 	bl	80405f8 <__aeabi_dmul>
 804ccca:	a37d      	add	r3, pc, #500	; (adr r3, 804cec0 <__ieee754_pow+0x6f0>)
 804cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ccd0:	4604      	mov	r4, r0
 804ccd2:	460d      	mov	r5, r1
 804ccd4:	f7f3 fc90 	bl	80405f8 <__aeabi_dmul>
 804ccd8:	a37b      	add	r3, pc, #492	; (adr r3, 804cec8 <__ieee754_pow+0x6f8>)
 804ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ccde:	f7f3 fad5 	bl	804028c <__adddf3>
 804cce2:	4622      	mov	r2, r4
 804cce4:	462b      	mov	r3, r5
 804cce6:	f7f3 fc87 	bl	80405f8 <__aeabi_dmul>
 804ccea:	a379      	add	r3, pc, #484	; (adr r3, 804ced0 <__ieee754_pow+0x700>)
 804ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ccf0:	f7f3 facc 	bl	804028c <__adddf3>
 804ccf4:	4622      	mov	r2, r4
 804ccf6:	462b      	mov	r3, r5
 804ccf8:	f7f3 fc7e 	bl	80405f8 <__aeabi_dmul>
 804ccfc:	a376      	add	r3, pc, #472	; (adr r3, 804ced8 <__ieee754_pow+0x708>)
 804ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cd02:	f7f3 fac3 	bl	804028c <__adddf3>
 804cd06:	4622      	mov	r2, r4
 804cd08:	462b      	mov	r3, r5
 804cd0a:	f7f3 fc75 	bl	80405f8 <__aeabi_dmul>
 804cd0e:	a374      	add	r3, pc, #464	; (adr r3, 804cee0 <__ieee754_pow+0x710>)
 804cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cd14:	f7f3 faba 	bl	804028c <__adddf3>
 804cd18:	4622      	mov	r2, r4
 804cd1a:	462b      	mov	r3, r5
 804cd1c:	f7f3 fc6c 	bl	80405f8 <__aeabi_dmul>
 804cd20:	a371      	add	r3, pc, #452	; (adr r3, 804cee8 <__ieee754_pow+0x718>)
 804cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cd26:	f7f3 fab1 	bl	804028c <__adddf3>
 804cd2a:	4622      	mov	r2, r4
 804cd2c:	4606      	mov	r6, r0
 804cd2e:	460f      	mov	r7, r1
 804cd30:	462b      	mov	r3, r5
 804cd32:	4620      	mov	r0, r4
 804cd34:	4629      	mov	r1, r5
 804cd36:	f7f3 fc5f 	bl	80405f8 <__aeabi_dmul>
 804cd3a:	4602      	mov	r2, r0
 804cd3c:	460b      	mov	r3, r1
 804cd3e:	4630      	mov	r0, r6
 804cd40:	4639      	mov	r1, r7
 804cd42:	f7f3 fc59 	bl	80405f8 <__aeabi_dmul>
 804cd46:	4642      	mov	r2, r8
 804cd48:	4604      	mov	r4, r0
 804cd4a:	460d      	mov	r5, r1
 804cd4c:	464b      	mov	r3, r9
 804cd4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804cd52:	f7f3 fa9b 	bl	804028c <__adddf3>
 804cd56:	ec53 2b18 	vmov	r2, r3, d8
 804cd5a:	f7f3 fc4d 	bl	80405f8 <__aeabi_dmul>
 804cd5e:	4622      	mov	r2, r4
 804cd60:	462b      	mov	r3, r5
 804cd62:	f7f3 fa93 	bl	804028c <__adddf3>
 804cd66:	4642      	mov	r2, r8
 804cd68:	4682      	mov	sl, r0
 804cd6a:	468b      	mov	fp, r1
 804cd6c:	464b      	mov	r3, r9
 804cd6e:	4640      	mov	r0, r8
 804cd70:	4649      	mov	r1, r9
 804cd72:	f7f3 fc41 	bl	80405f8 <__aeabi_dmul>
 804cd76:	4b6c      	ldr	r3, [pc, #432]	; (804cf28 <__ieee754_pow+0x758>)
 804cd78:	2200      	movs	r2, #0
 804cd7a:	4606      	mov	r6, r0
 804cd7c:	460f      	mov	r7, r1
 804cd7e:	f7f3 fa85 	bl	804028c <__adddf3>
 804cd82:	4652      	mov	r2, sl
 804cd84:	465b      	mov	r3, fp
 804cd86:	f7f3 fa81 	bl	804028c <__adddf3>
 804cd8a:	9c04      	ldr	r4, [sp, #16]
 804cd8c:	460d      	mov	r5, r1
 804cd8e:	4622      	mov	r2, r4
 804cd90:	460b      	mov	r3, r1
 804cd92:	4640      	mov	r0, r8
 804cd94:	4649      	mov	r1, r9
 804cd96:	f7f3 fc2f 	bl	80405f8 <__aeabi_dmul>
 804cd9a:	4b63      	ldr	r3, [pc, #396]	; (804cf28 <__ieee754_pow+0x758>)
 804cd9c:	4680      	mov	r8, r0
 804cd9e:	4689      	mov	r9, r1
 804cda0:	2200      	movs	r2, #0
 804cda2:	4620      	mov	r0, r4
 804cda4:	4629      	mov	r1, r5
 804cda6:	f7f3 fa6f 	bl	8040288 <__aeabi_dsub>
 804cdaa:	4632      	mov	r2, r6
 804cdac:	463b      	mov	r3, r7
 804cdae:	f7f3 fa6b 	bl	8040288 <__aeabi_dsub>
 804cdb2:	4602      	mov	r2, r0
 804cdb4:	460b      	mov	r3, r1
 804cdb6:	4650      	mov	r0, sl
 804cdb8:	4659      	mov	r1, fp
 804cdba:	f7f3 fa65 	bl	8040288 <__aeabi_dsub>
 804cdbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 804cdc2:	f7f3 fc19 	bl	80405f8 <__aeabi_dmul>
 804cdc6:	4622      	mov	r2, r4
 804cdc8:	4606      	mov	r6, r0
 804cdca:	460f      	mov	r7, r1
 804cdcc:	462b      	mov	r3, r5
 804cdce:	ec51 0b18 	vmov	r0, r1, d8
 804cdd2:	f7f3 fc11 	bl	80405f8 <__aeabi_dmul>
 804cdd6:	4602      	mov	r2, r0
 804cdd8:	460b      	mov	r3, r1
 804cdda:	4630      	mov	r0, r6
 804cddc:	4639      	mov	r1, r7
 804cdde:	f7f3 fa55 	bl	804028c <__adddf3>
 804cde2:	4606      	mov	r6, r0
 804cde4:	460f      	mov	r7, r1
 804cde6:	4602      	mov	r2, r0
 804cde8:	460b      	mov	r3, r1
 804cdea:	4640      	mov	r0, r8
 804cdec:	4649      	mov	r1, r9
 804cdee:	f7f3 fa4d 	bl	804028c <__adddf3>
 804cdf2:	9c04      	ldr	r4, [sp, #16]
 804cdf4:	a33e      	add	r3, pc, #248	; (adr r3, 804cef0 <__ieee754_pow+0x720>)
 804cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cdfa:	4620      	mov	r0, r4
 804cdfc:	460d      	mov	r5, r1
 804cdfe:	f7f3 fbfb 	bl	80405f8 <__aeabi_dmul>
 804ce02:	4642      	mov	r2, r8
 804ce04:	ec41 0b18 	vmov	d8, r0, r1
 804ce08:	464b      	mov	r3, r9
 804ce0a:	4620      	mov	r0, r4
 804ce0c:	4629      	mov	r1, r5
 804ce0e:	f7f3 fa3b 	bl	8040288 <__aeabi_dsub>
 804ce12:	4602      	mov	r2, r0
 804ce14:	460b      	mov	r3, r1
 804ce16:	4630      	mov	r0, r6
 804ce18:	4639      	mov	r1, r7
 804ce1a:	f7f3 fa35 	bl	8040288 <__aeabi_dsub>
 804ce1e:	a336      	add	r3, pc, #216	; (adr r3, 804cef8 <__ieee754_pow+0x728>)
 804ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ce24:	f7f3 fbe8 	bl	80405f8 <__aeabi_dmul>
 804ce28:	a335      	add	r3, pc, #212	; (adr r3, 804cf00 <__ieee754_pow+0x730>)
 804ce2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ce2e:	4606      	mov	r6, r0
 804ce30:	460f      	mov	r7, r1
 804ce32:	4620      	mov	r0, r4
 804ce34:	4629      	mov	r1, r5
 804ce36:	f7f3 fbdf 	bl	80405f8 <__aeabi_dmul>
 804ce3a:	4602      	mov	r2, r0
 804ce3c:	460b      	mov	r3, r1
 804ce3e:	4630      	mov	r0, r6
 804ce40:	4639      	mov	r1, r7
 804ce42:	f7f3 fa23 	bl	804028c <__adddf3>
 804ce46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804ce48:	4b38      	ldr	r3, [pc, #224]	; (804cf2c <__ieee754_pow+0x75c>)
 804ce4a:	4413      	add	r3, r2
 804ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 804ce50:	f7f3 fa1c 	bl	804028c <__adddf3>
 804ce54:	4682      	mov	sl, r0
 804ce56:	9809      	ldr	r0, [sp, #36]	; 0x24
 804ce58:	468b      	mov	fp, r1
 804ce5a:	f7f3 fb63 	bl	8040524 <__aeabi_i2d>
 804ce5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804ce60:	4b33      	ldr	r3, [pc, #204]	; (804cf30 <__ieee754_pow+0x760>)
 804ce62:	4413      	add	r3, r2
 804ce64:	e9d3 8900 	ldrd	r8, r9, [r3]
 804ce68:	4606      	mov	r6, r0
 804ce6a:	460f      	mov	r7, r1
 804ce6c:	4652      	mov	r2, sl
 804ce6e:	465b      	mov	r3, fp
 804ce70:	ec51 0b18 	vmov	r0, r1, d8
 804ce74:	f7f3 fa0a 	bl	804028c <__adddf3>
 804ce78:	4642      	mov	r2, r8
 804ce7a:	464b      	mov	r3, r9
 804ce7c:	f7f3 fa06 	bl	804028c <__adddf3>
 804ce80:	4632      	mov	r2, r6
 804ce82:	463b      	mov	r3, r7
 804ce84:	f7f3 fa02 	bl	804028c <__adddf3>
 804ce88:	9c04      	ldr	r4, [sp, #16]
 804ce8a:	4632      	mov	r2, r6
 804ce8c:	463b      	mov	r3, r7
 804ce8e:	4620      	mov	r0, r4
 804ce90:	460d      	mov	r5, r1
 804ce92:	f7f3 f9f9 	bl	8040288 <__aeabi_dsub>
 804ce96:	4642      	mov	r2, r8
 804ce98:	464b      	mov	r3, r9
 804ce9a:	f7f3 f9f5 	bl	8040288 <__aeabi_dsub>
 804ce9e:	ec53 2b18 	vmov	r2, r3, d8
 804cea2:	f7f3 f9f1 	bl	8040288 <__aeabi_dsub>
 804cea6:	4602      	mov	r2, r0
 804cea8:	460b      	mov	r3, r1
 804ceaa:	4650      	mov	r0, sl
 804ceac:	4659      	mov	r1, fp
 804ceae:	e606      	b.n	804cabe <__ieee754_pow+0x2ee>
 804ceb0:	2401      	movs	r4, #1
 804ceb2:	e6a0      	b.n	804cbf6 <__ieee754_pow+0x426>
 804ceb4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 804cf08 <__ieee754_pow+0x738>
 804ceb8:	e60d      	b.n	804cad6 <__ieee754_pow+0x306>
 804ceba:	bf00      	nop
 804cebc:	f3af 8000 	nop.w
 804cec0:	4a454eef 	.word	0x4a454eef
 804cec4:	3fca7e28 	.word	0x3fca7e28
 804cec8:	93c9db65 	.word	0x93c9db65
 804cecc:	3fcd864a 	.word	0x3fcd864a
 804ced0:	a91d4101 	.word	0xa91d4101
 804ced4:	3fd17460 	.word	0x3fd17460
 804ced8:	518f264d 	.word	0x518f264d
 804cedc:	3fd55555 	.word	0x3fd55555
 804cee0:	db6fabff 	.word	0xdb6fabff
 804cee4:	3fdb6db6 	.word	0x3fdb6db6
 804cee8:	33333303 	.word	0x33333303
 804ceec:	3fe33333 	.word	0x3fe33333
 804cef0:	e0000000 	.word	0xe0000000
 804cef4:	3feec709 	.word	0x3feec709
 804cef8:	dc3a03fd 	.word	0xdc3a03fd
 804cefc:	3feec709 	.word	0x3feec709
 804cf00:	145b01f5 	.word	0x145b01f5
 804cf04:	be3e2fe0 	.word	0xbe3e2fe0
 804cf08:	00000000 	.word	0x00000000
 804cf0c:	3ff00000 	.word	0x3ff00000
 804cf10:	7ff00000 	.word	0x7ff00000
 804cf14:	43400000 	.word	0x43400000
 804cf18:	0003988e 	.word	0x0003988e
 804cf1c:	000bb679 	.word	0x000bb679
 804cf20:	0804dc48 	.word	0x0804dc48
 804cf24:	3ff00000 	.word	0x3ff00000
 804cf28:	40080000 	.word	0x40080000
 804cf2c:	0804dc68 	.word	0x0804dc68
 804cf30:	0804dc58 	.word	0x0804dc58
 804cf34:	a3b5      	add	r3, pc, #724	; (adr r3, 804d20c <__ieee754_pow+0xa3c>)
 804cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cf3a:	4640      	mov	r0, r8
 804cf3c:	4649      	mov	r1, r9
 804cf3e:	f7f3 f9a5 	bl	804028c <__adddf3>
 804cf42:	4622      	mov	r2, r4
 804cf44:	ec41 0b1a 	vmov	d10, r0, r1
 804cf48:	462b      	mov	r3, r5
 804cf4a:	4630      	mov	r0, r6
 804cf4c:	4639      	mov	r1, r7
 804cf4e:	f7f3 f99b 	bl	8040288 <__aeabi_dsub>
 804cf52:	4602      	mov	r2, r0
 804cf54:	460b      	mov	r3, r1
 804cf56:	ec51 0b1a 	vmov	r0, r1, d10
 804cf5a:	f7f3 fddd 	bl	8040b18 <__aeabi_dcmpgt>
 804cf5e:	2800      	cmp	r0, #0
 804cf60:	f47f adf8 	bne.w	804cb54 <__ieee754_pow+0x384>
 804cf64:	4aa4      	ldr	r2, [pc, #656]	; (804d1f8 <__ieee754_pow+0xa28>)
 804cf66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 804cf6a:	4293      	cmp	r3, r2
 804cf6c:	f340 810b 	ble.w	804d186 <__ieee754_pow+0x9b6>
 804cf70:	151b      	asrs	r3, r3, #20
 804cf72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 804cf76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 804cf7a:	fa4a f303 	asr.w	r3, sl, r3
 804cf7e:	445b      	add	r3, fp
 804cf80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 804cf84:	4e9d      	ldr	r6, [pc, #628]	; (804d1fc <__ieee754_pow+0xa2c>)
 804cf86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 804cf8a:	4116      	asrs	r6, r2
 804cf8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 804cf90:	2000      	movs	r0, #0
 804cf92:	ea23 0106 	bic.w	r1, r3, r6
 804cf96:	f1c2 0214 	rsb	r2, r2, #20
 804cf9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 804cf9e:	fa4a fa02 	asr.w	sl, sl, r2
 804cfa2:	f1bb 0f00 	cmp.w	fp, #0
 804cfa6:	4602      	mov	r2, r0
 804cfa8:	460b      	mov	r3, r1
 804cfaa:	4620      	mov	r0, r4
 804cfac:	4629      	mov	r1, r5
 804cfae:	bfb8      	it	lt
 804cfb0:	f1ca 0a00 	rsblt	sl, sl, #0
 804cfb4:	f7f3 f968 	bl	8040288 <__aeabi_dsub>
 804cfb8:	ec41 0b19 	vmov	d9, r0, r1
 804cfbc:	4642      	mov	r2, r8
 804cfbe:	464b      	mov	r3, r9
 804cfc0:	ec51 0b19 	vmov	r0, r1, d9
 804cfc4:	f7f3 f962 	bl	804028c <__adddf3>
 804cfc8:	2400      	movs	r4, #0
 804cfca:	a379      	add	r3, pc, #484	; (adr r3, 804d1b0 <__ieee754_pow+0x9e0>)
 804cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cfd0:	4620      	mov	r0, r4
 804cfd2:	460d      	mov	r5, r1
 804cfd4:	f7f3 fb10 	bl	80405f8 <__aeabi_dmul>
 804cfd8:	ec53 2b19 	vmov	r2, r3, d9
 804cfdc:	4606      	mov	r6, r0
 804cfde:	460f      	mov	r7, r1
 804cfe0:	4620      	mov	r0, r4
 804cfe2:	4629      	mov	r1, r5
 804cfe4:	f7f3 f950 	bl	8040288 <__aeabi_dsub>
 804cfe8:	4602      	mov	r2, r0
 804cfea:	460b      	mov	r3, r1
 804cfec:	4640      	mov	r0, r8
 804cfee:	4649      	mov	r1, r9
 804cff0:	f7f3 f94a 	bl	8040288 <__aeabi_dsub>
 804cff4:	a370      	add	r3, pc, #448	; (adr r3, 804d1b8 <__ieee754_pow+0x9e8>)
 804cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 804cffa:	f7f3 fafd 	bl	80405f8 <__aeabi_dmul>
 804cffe:	a370      	add	r3, pc, #448	; (adr r3, 804d1c0 <__ieee754_pow+0x9f0>)
 804d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d004:	4680      	mov	r8, r0
 804d006:	4689      	mov	r9, r1
 804d008:	4620      	mov	r0, r4
 804d00a:	4629      	mov	r1, r5
 804d00c:	f7f3 faf4 	bl	80405f8 <__aeabi_dmul>
 804d010:	4602      	mov	r2, r0
 804d012:	460b      	mov	r3, r1
 804d014:	4640      	mov	r0, r8
 804d016:	4649      	mov	r1, r9
 804d018:	f7f3 f938 	bl	804028c <__adddf3>
 804d01c:	4604      	mov	r4, r0
 804d01e:	460d      	mov	r5, r1
 804d020:	4602      	mov	r2, r0
 804d022:	460b      	mov	r3, r1
 804d024:	4630      	mov	r0, r6
 804d026:	4639      	mov	r1, r7
 804d028:	f7f3 f930 	bl	804028c <__adddf3>
 804d02c:	4632      	mov	r2, r6
 804d02e:	463b      	mov	r3, r7
 804d030:	4680      	mov	r8, r0
 804d032:	4689      	mov	r9, r1
 804d034:	f7f3 f928 	bl	8040288 <__aeabi_dsub>
 804d038:	4602      	mov	r2, r0
 804d03a:	460b      	mov	r3, r1
 804d03c:	4620      	mov	r0, r4
 804d03e:	4629      	mov	r1, r5
 804d040:	f7f3 f922 	bl	8040288 <__aeabi_dsub>
 804d044:	4642      	mov	r2, r8
 804d046:	4606      	mov	r6, r0
 804d048:	460f      	mov	r7, r1
 804d04a:	464b      	mov	r3, r9
 804d04c:	4640      	mov	r0, r8
 804d04e:	4649      	mov	r1, r9
 804d050:	f7f3 fad2 	bl	80405f8 <__aeabi_dmul>
 804d054:	a35c      	add	r3, pc, #368	; (adr r3, 804d1c8 <__ieee754_pow+0x9f8>)
 804d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d05a:	4604      	mov	r4, r0
 804d05c:	460d      	mov	r5, r1
 804d05e:	f7f3 facb 	bl	80405f8 <__aeabi_dmul>
 804d062:	a35b      	add	r3, pc, #364	; (adr r3, 804d1d0 <__ieee754_pow+0xa00>)
 804d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d068:	f7f3 f90e 	bl	8040288 <__aeabi_dsub>
 804d06c:	4622      	mov	r2, r4
 804d06e:	462b      	mov	r3, r5
 804d070:	f7f3 fac2 	bl	80405f8 <__aeabi_dmul>
 804d074:	a358      	add	r3, pc, #352	; (adr r3, 804d1d8 <__ieee754_pow+0xa08>)
 804d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d07a:	f7f3 f907 	bl	804028c <__adddf3>
 804d07e:	4622      	mov	r2, r4
 804d080:	462b      	mov	r3, r5
 804d082:	f7f3 fab9 	bl	80405f8 <__aeabi_dmul>
 804d086:	a356      	add	r3, pc, #344	; (adr r3, 804d1e0 <__ieee754_pow+0xa10>)
 804d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d08c:	f7f3 f8fc 	bl	8040288 <__aeabi_dsub>
 804d090:	4622      	mov	r2, r4
 804d092:	462b      	mov	r3, r5
 804d094:	f7f3 fab0 	bl	80405f8 <__aeabi_dmul>
 804d098:	a353      	add	r3, pc, #332	; (adr r3, 804d1e8 <__ieee754_pow+0xa18>)
 804d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d09e:	f7f3 f8f5 	bl	804028c <__adddf3>
 804d0a2:	4622      	mov	r2, r4
 804d0a4:	462b      	mov	r3, r5
 804d0a6:	f7f3 faa7 	bl	80405f8 <__aeabi_dmul>
 804d0aa:	4602      	mov	r2, r0
 804d0ac:	460b      	mov	r3, r1
 804d0ae:	4640      	mov	r0, r8
 804d0b0:	4649      	mov	r1, r9
 804d0b2:	f7f3 f8e9 	bl	8040288 <__aeabi_dsub>
 804d0b6:	4604      	mov	r4, r0
 804d0b8:	460d      	mov	r5, r1
 804d0ba:	4602      	mov	r2, r0
 804d0bc:	460b      	mov	r3, r1
 804d0be:	4640      	mov	r0, r8
 804d0c0:	4649      	mov	r1, r9
 804d0c2:	f7f3 fa99 	bl	80405f8 <__aeabi_dmul>
 804d0c6:	2200      	movs	r2, #0
 804d0c8:	ec41 0b19 	vmov	d9, r0, r1
 804d0cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804d0d0:	4620      	mov	r0, r4
 804d0d2:	4629      	mov	r1, r5
 804d0d4:	f7f3 f8d8 	bl	8040288 <__aeabi_dsub>
 804d0d8:	4602      	mov	r2, r0
 804d0da:	460b      	mov	r3, r1
 804d0dc:	ec51 0b19 	vmov	r0, r1, d9
 804d0e0:	f7f3 fbb4 	bl	804084c <__aeabi_ddiv>
 804d0e4:	4632      	mov	r2, r6
 804d0e6:	4604      	mov	r4, r0
 804d0e8:	460d      	mov	r5, r1
 804d0ea:	463b      	mov	r3, r7
 804d0ec:	4640      	mov	r0, r8
 804d0ee:	4649      	mov	r1, r9
 804d0f0:	f7f3 fa82 	bl	80405f8 <__aeabi_dmul>
 804d0f4:	4632      	mov	r2, r6
 804d0f6:	463b      	mov	r3, r7
 804d0f8:	f7f3 f8c8 	bl	804028c <__adddf3>
 804d0fc:	4602      	mov	r2, r0
 804d0fe:	460b      	mov	r3, r1
 804d100:	4620      	mov	r0, r4
 804d102:	4629      	mov	r1, r5
 804d104:	f7f3 f8c0 	bl	8040288 <__aeabi_dsub>
 804d108:	4642      	mov	r2, r8
 804d10a:	464b      	mov	r3, r9
 804d10c:	f7f3 f8bc 	bl	8040288 <__aeabi_dsub>
 804d110:	460b      	mov	r3, r1
 804d112:	4602      	mov	r2, r0
 804d114:	493a      	ldr	r1, [pc, #232]	; (804d200 <__ieee754_pow+0xa30>)
 804d116:	2000      	movs	r0, #0
 804d118:	f7f3 f8b6 	bl	8040288 <__aeabi_dsub>
 804d11c:	e9cd 0100 	strd	r0, r1, [sp]
 804d120:	9b01      	ldr	r3, [sp, #4]
 804d122:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 804d126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804d12a:	da2f      	bge.n	804d18c <__ieee754_pow+0x9bc>
 804d12c:	4650      	mov	r0, sl
 804d12e:	ed9d 0b00 	vldr	d0, [sp]
 804d132:	f000 f9c1 	bl	804d4b8 <scalbn>
 804d136:	ec51 0b10 	vmov	r0, r1, d0
 804d13a:	ec53 2b18 	vmov	r2, r3, d8
 804d13e:	f7ff bbe0 	b.w	804c902 <__ieee754_pow+0x132>
 804d142:	4b30      	ldr	r3, [pc, #192]	; (804d204 <__ieee754_pow+0xa34>)
 804d144:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 804d148:	429e      	cmp	r6, r3
 804d14a:	f77f af0b 	ble.w	804cf64 <__ieee754_pow+0x794>
 804d14e:	4b2e      	ldr	r3, [pc, #184]	; (804d208 <__ieee754_pow+0xa38>)
 804d150:	440b      	add	r3, r1
 804d152:	4303      	orrs	r3, r0
 804d154:	d00b      	beq.n	804d16e <__ieee754_pow+0x99e>
 804d156:	a326      	add	r3, pc, #152	; (adr r3, 804d1f0 <__ieee754_pow+0xa20>)
 804d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d15c:	ec51 0b18 	vmov	r0, r1, d8
 804d160:	f7f3 fa4a 	bl	80405f8 <__aeabi_dmul>
 804d164:	a322      	add	r3, pc, #136	; (adr r3, 804d1f0 <__ieee754_pow+0xa20>)
 804d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d16a:	f7ff bbca 	b.w	804c902 <__ieee754_pow+0x132>
 804d16e:	4622      	mov	r2, r4
 804d170:	462b      	mov	r3, r5
 804d172:	f7f3 f889 	bl	8040288 <__aeabi_dsub>
 804d176:	4642      	mov	r2, r8
 804d178:	464b      	mov	r3, r9
 804d17a:	f7f3 fcc3 	bl	8040b04 <__aeabi_dcmpge>
 804d17e:	2800      	cmp	r0, #0
 804d180:	f43f aef0 	beq.w	804cf64 <__ieee754_pow+0x794>
 804d184:	e7e7      	b.n	804d156 <__ieee754_pow+0x986>
 804d186:	f04f 0a00 	mov.w	sl, #0
 804d18a:	e717      	b.n	804cfbc <__ieee754_pow+0x7ec>
 804d18c:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d190:	4619      	mov	r1, r3
 804d192:	e7d2      	b.n	804d13a <__ieee754_pow+0x96a>
 804d194:	491a      	ldr	r1, [pc, #104]	; (804d200 <__ieee754_pow+0xa30>)
 804d196:	2000      	movs	r0, #0
 804d198:	f7ff bb9e 	b.w	804c8d8 <__ieee754_pow+0x108>
 804d19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 804d1a0:	f7ff bb9a 	b.w	804c8d8 <__ieee754_pow+0x108>
 804d1a4:	9000      	str	r0, [sp, #0]
 804d1a6:	f7ff bb76 	b.w	804c896 <__ieee754_pow+0xc6>
 804d1aa:	2100      	movs	r1, #0
 804d1ac:	f7ff bb60 	b.w	804c870 <__ieee754_pow+0xa0>
 804d1b0:	00000000 	.word	0x00000000
 804d1b4:	3fe62e43 	.word	0x3fe62e43
 804d1b8:	fefa39ef 	.word	0xfefa39ef
 804d1bc:	3fe62e42 	.word	0x3fe62e42
 804d1c0:	0ca86c39 	.word	0x0ca86c39
 804d1c4:	be205c61 	.word	0xbe205c61
 804d1c8:	72bea4d0 	.word	0x72bea4d0
 804d1cc:	3e663769 	.word	0x3e663769
 804d1d0:	c5d26bf1 	.word	0xc5d26bf1
 804d1d4:	3ebbbd41 	.word	0x3ebbbd41
 804d1d8:	af25de2c 	.word	0xaf25de2c
 804d1dc:	3f11566a 	.word	0x3f11566a
 804d1e0:	16bebd93 	.word	0x16bebd93
 804d1e4:	3f66c16c 	.word	0x3f66c16c
 804d1e8:	5555553e 	.word	0x5555553e
 804d1ec:	3fc55555 	.word	0x3fc55555
 804d1f0:	c2f8f359 	.word	0xc2f8f359
 804d1f4:	01a56e1f 	.word	0x01a56e1f
 804d1f8:	3fe00000 	.word	0x3fe00000
 804d1fc:	000fffff 	.word	0x000fffff
 804d200:	3ff00000 	.word	0x3ff00000
 804d204:	4090cbff 	.word	0x4090cbff
 804d208:	3f6f3400 	.word	0x3f6f3400
 804d20c:	652b82fe 	.word	0x652b82fe
 804d210:	3c971547 	.word	0x3c971547

0804d214 <__ieee754_sqrt>:
 804d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d218:	ec55 4b10 	vmov	r4, r5, d0
 804d21c:	4e56      	ldr	r6, [pc, #344]	; (804d378 <__ieee754_sqrt+0x164>)
 804d21e:	43ae      	bics	r6, r5
 804d220:	ee10 0a10 	vmov	r0, s0
 804d224:	ee10 3a10 	vmov	r3, s0
 804d228:	4629      	mov	r1, r5
 804d22a:	462a      	mov	r2, r5
 804d22c:	d110      	bne.n	804d250 <__ieee754_sqrt+0x3c>
 804d22e:	ee10 2a10 	vmov	r2, s0
 804d232:	462b      	mov	r3, r5
 804d234:	f7f3 f9e0 	bl	80405f8 <__aeabi_dmul>
 804d238:	4602      	mov	r2, r0
 804d23a:	460b      	mov	r3, r1
 804d23c:	4620      	mov	r0, r4
 804d23e:	4629      	mov	r1, r5
 804d240:	f7f3 f824 	bl	804028c <__adddf3>
 804d244:	4604      	mov	r4, r0
 804d246:	460d      	mov	r5, r1
 804d248:	ec45 4b10 	vmov	d0, r4, r5
 804d24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804d250:	2d00      	cmp	r5, #0
 804d252:	dc10      	bgt.n	804d276 <__ieee754_sqrt+0x62>
 804d254:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 804d258:	4330      	orrs	r0, r6
 804d25a:	d0f5      	beq.n	804d248 <__ieee754_sqrt+0x34>
 804d25c:	b15d      	cbz	r5, 804d276 <__ieee754_sqrt+0x62>
 804d25e:	ee10 2a10 	vmov	r2, s0
 804d262:	462b      	mov	r3, r5
 804d264:	ee10 0a10 	vmov	r0, s0
 804d268:	f7f3 f80e 	bl	8040288 <__aeabi_dsub>
 804d26c:	4602      	mov	r2, r0
 804d26e:	460b      	mov	r3, r1
 804d270:	f7f3 faec 	bl	804084c <__aeabi_ddiv>
 804d274:	e7e6      	b.n	804d244 <__ieee754_sqrt+0x30>
 804d276:	1509      	asrs	r1, r1, #20
 804d278:	d076      	beq.n	804d368 <__ieee754_sqrt+0x154>
 804d27a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 804d27e:	07ce      	lsls	r6, r1, #31
 804d280:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 804d284:	bf5e      	ittt	pl
 804d286:	0fda      	lsrpl	r2, r3, #31
 804d288:	005b      	lslpl	r3, r3, #1
 804d28a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 804d28e:	0fda      	lsrs	r2, r3, #31
 804d290:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 804d294:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 804d298:	2000      	movs	r0, #0
 804d29a:	106d      	asrs	r5, r5, #1
 804d29c:	005b      	lsls	r3, r3, #1
 804d29e:	f04f 0e16 	mov.w	lr, #22
 804d2a2:	4684      	mov	ip, r0
 804d2a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804d2a8:	eb0c 0401 	add.w	r4, ip, r1
 804d2ac:	4294      	cmp	r4, r2
 804d2ae:	bfde      	ittt	le
 804d2b0:	1b12      	suble	r2, r2, r4
 804d2b2:	eb04 0c01 	addle.w	ip, r4, r1
 804d2b6:	1840      	addle	r0, r0, r1
 804d2b8:	0052      	lsls	r2, r2, #1
 804d2ba:	f1be 0e01 	subs.w	lr, lr, #1
 804d2be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 804d2c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 804d2c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804d2ca:	d1ed      	bne.n	804d2a8 <__ieee754_sqrt+0x94>
 804d2cc:	4671      	mov	r1, lr
 804d2ce:	2720      	movs	r7, #32
 804d2d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 804d2d4:	4562      	cmp	r2, ip
 804d2d6:	eb04 060e 	add.w	r6, r4, lr
 804d2da:	dc02      	bgt.n	804d2e2 <__ieee754_sqrt+0xce>
 804d2dc:	d113      	bne.n	804d306 <__ieee754_sqrt+0xf2>
 804d2de:	429e      	cmp	r6, r3
 804d2e0:	d811      	bhi.n	804d306 <__ieee754_sqrt+0xf2>
 804d2e2:	2e00      	cmp	r6, #0
 804d2e4:	eb06 0e04 	add.w	lr, r6, r4
 804d2e8:	da43      	bge.n	804d372 <__ieee754_sqrt+0x15e>
 804d2ea:	f1be 0f00 	cmp.w	lr, #0
 804d2ee:	db40      	blt.n	804d372 <__ieee754_sqrt+0x15e>
 804d2f0:	f10c 0801 	add.w	r8, ip, #1
 804d2f4:	eba2 020c 	sub.w	r2, r2, ip
 804d2f8:	429e      	cmp	r6, r3
 804d2fa:	bf88      	it	hi
 804d2fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 804d300:	1b9b      	subs	r3, r3, r6
 804d302:	4421      	add	r1, r4
 804d304:	46c4      	mov	ip, r8
 804d306:	0052      	lsls	r2, r2, #1
 804d308:	3f01      	subs	r7, #1
 804d30a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 804d30e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 804d312:	ea4f 0343 	mov.w	r3, r3, lsl #1
 804d316:	d1dd      	bne.n	804d2d4 <__ieee754_sqrt+0xc0>
 804d318:	4313      	orrs	r3, r2
 804d31a:	d006      	beq.n	804d32a <__ieee754_sqrt+0x116>
 804d31c:	1c4c      	adds	r4, r1, #1
 804d31e:	bf13      	iteet	ne
 804d320:	3101      	addne	r1, #1
 804d322:	3001      	addeq	r0, #1
 804d324:	4639      	moveq	r1, r7
 804d326:	f021 0101 	bicne.w	r1, r1, #1
 804d32a:	1043      	asrs	r3, r0, #1
 804d32c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 804d330:	0849      	lsrs	r1, r1, #1
 804d332:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 804d336:	07c2      	lsls	r2, r0, #31
 804d338:	bf48      	it	mi
 804d33a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 804d33e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 804d342:	460c      	mov	r4, r1
 804d344:	463d      	mov	r5, r7
 804d346:	e77f      	b.n	804d248 <__ieee754_sqrt+0x34>
 804d348:	0ada      	lsrs	r2, r3, #11
 804d34a:	3815      	subs	r0, #21
 804d34c:	055b      	lsls	r3, r3, #21
 804d34e:	2a00      	cmp	r2, #0
 804d350:	d0fa      	beq.n	804d348 <__ieee754_sqrt+0x134>
 804d352:	02d7      	lsls	r7, r2, #11
 804d354:	d50a      	bpl.n	804d36c <__ieee754_sqrt+0x158>
 804d356:	f1c1 0420 	rsb	r4, r1, #32
 804d35a:	fa23 f404 	lsr.w	r4, r3, r4
 804d35e:	1e4d      	subs	r5, r1, #1
 804d360:	408b      	lsls	r3, r1
 804d362:	4322      	orrs	r2, r4
 804d364:	1b41      	subs	r1, r0, r5
 804d366:	e788      	b.n	804d27a <__ieee754_sqrt+0x66>
 804d368:	4608      	mov	r0, r1
 804d36a:	e7f0      	b.n	804d34e <__ieee754_sqrt+0x13a>
 804d36c:	0052      	lsls	r2, r2, #1
 804d36e:	3101      	adds	r1, #1
 804d370:	e7ef      	b.n	804d352 <__ieee754_sqrt+0x13e>
 804d372:	46e0      	mov	r8, ip
 804d374:	e7be      	b.n	804d2f4 <__ieee754_sqrt+0xe0>
 804d376:	bf00      	nop
 804d378:	7ff00000 	.word	0x7ff00000

0804d37c <fabs>:
 804d37c:	ec51 0b10 	vmov	r0, r1, d0
 804d380:	ee10 2a10 	vmov	r2, s0
 804d384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 804d388:	ec43 2b10 	vmov	d0, r2, r3
 804d38c:	4770      	bx	lr

0804d38e <finite>:
 804d38e:	b082      	sub	sp, #8
 804d390:	ed8d 0b00 	vstr	d0, [sp]
 804d394:	9801      	ldr	r0, [sp, #4]
 804d396:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 804d39a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 804d39e:	0fc0      	lsrs	r0, r0, #31
 804d3a0:	b002      	add	sp, #8
 804d3a2:	4770      	bx	lr

0804d3a4 <rint>:
 804d3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804d3a6:	ec51 0b10 	vmov	r0, r1, d0
 804d3aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 804d3ae:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 804d3b2:	2e13      	cmp	r6, #19
 804d3b4:	ee10 4a10 	vmov	r4, s0
 804d3b8:	460b      	mov	r3, r1
 804d3ba:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 804d3be:	dc58      	bgt.n	804d472 <rint+0xce>
 804d3c0:	2e00      	cmp	r6, #0
 804d3c2:	da2b      	bge.n	804d41c <rint+0x78>
 804d3c4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 804d3c8:	4302      	orrs	r2, r0
 804d3ca:	d023      	beq.n	804d414 <rint+0x70>
 804d3cc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 804d3d0:	4302      	orrs	r2, r0
 804d3d2:	4254      	negs	r4, r2
 804d3d4:	4314      	orrs	r4, r2
 804d3d6:	0c4b      	lsrs	r3, r1, #17
 804d3d8:	0b24      	lsrs	r4, r4, #12
 804d3da:	045b      	lsls	r3, r3, #17
 804d3dc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 804d3e0:	ea44 0103 	orr.w	r1, r4, r3
 804d3e4:	4b32      	ldr	r3, [pc, #200]	; (804d4b0 <rint+0x10c>)
 804d3e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 804d3ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 804d3ee:	4602      	mov	r2, r0
 804d3f0:	460b      	mov	r3, r1
 804d3f2:	4630      	mov	r0, r6
 804d3f4:	4639      	mov	r1, r7
 804d3f6:	f7f2 ff49 	bl	804028c <__adddf3>
 804d3fa:	e9cd 0100 	strd	r0, r1, [sp]
 804d3fe:	463b      	mov	r3, r7
 804d400:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d404:	4632      	mov	r2, r6
 804d406:	f7f2 ff3f 	bl	8040288 <__aeabi_dsub>
 804d40a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 804d40e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 804d412:	4639      	mov	r1, r7
 804d414:	ec41 0b10 	vmov	d0, r0, r1
 804d418:	b003      	add	sp, #12
 804d41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804d41c:	4a25      	ldr	r2, [pc, #148]	; (804d4b4 <rint+0x110>)
 804d41e:	4132      	asrs	r2, r6
 804d420:	ea01 0702 	and.w	r7, r1, r2
 804d424:	4307      	orrs	r7, r0
 804d426:	d0f5      	beq.n	804d414 <rint+0x70>
 804d428:	0851      	lsrs	r1, r2, #1
 804d42a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 804d42e:	4314      	orrs	r4, r2
 804d430:	d00c      	beq.n	804d44c <rint+0xa8>
 804d432:	ea23 0201 	bic.w	r2, r3, r1
 804d436:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 804d43a:	2e13      	cmp	r6, #19
 804d43c:	fa43 f606 	asr.w	r6, r3, r6
 804d440:	bf0c      	ite	eq
 804d442:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 804d446:	2400      	movne	r4, #0
 804d448:	ea42 0306 	orr.w	r3, r2, r6
 804d44c:	4918      	ldr	r1, [pc, #96]	; (804d4b0 <rint+0x10c>)
 804d44e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 804d452:	4622      	mov	r2, r4
 804d454:	e9d5 4500 	ldrd	r4, r5, [r5]
 804d458:	4620      	mov	r0, r4
 804d45a:	4629      	mov	r1, r5
 804d45c:	f7f2 ff16 	bl	804028c <__adddf3>
 804d460:	e9cd 0100 	strd	r0, r1, [sp]
 804d464:	e9dd 0100 	ldrd	r0, r1, [sp]
 804d468:	4622      	mov	r2, r4
 804d46a:	462b      	mov	r3, r5
 804d46c:	f7f2 ff0c 	bl	8040288 <__aeabi_dsub>
 804d470:	e7d0      	b.n	804d414 <rint+0x70>
 804d472:	2e33      	cmp	r6, #51	; 0x33
 804d474:	dd07      	ble.n	804d486 <rint+0xe2>
 804d476:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804d47a:	d1cb      	bne.n	804d414 <rint+0x70>
 804d47c:	ee10 2a10 	vmov	r2, s0
 804d480:	f7f2 ff04 	bl	804028c <__adddf3>
 804d484:	e7c6      	b.n	804d414 <rint+0x70>
 804d486:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 804d48a:	f04f 36ff 	mov.w	r6, #4294967295
 804d48e:	40d6      	lsrs	r6, r2
 804d490:	4230      	tst	r0, r6
 804d492:	d0bf      	beq.n	804d414 <rint+0x70>
 804d494:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 804d498:	ea4f 0156 	mov.w	r1, r6, lsr #1
 804d49c:	bf1f      	itttt	ne
 804d49e:	ea24 0101 	bicne.w	r1, r4, r1
 804d4a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 804d4a6:	fa44 f202 	asrne.w	r2, r4, r2
 804d4aa:	ea41 0402 	orrne.w	r4, r1, r2
 804d4ae:	e7cd      	b.n	804d44c <rint+0xa8>
 804d4b0:	0804dc78 	.word	0x0804dc78
 804d4b4:	000fffff 	.word	0x000fffff

0804d4b8 <scalbn>:
 804d4b8:	b570      	push	{r4, r5, r6, lr}
 804d4ba:	ec55 4b10 	vmov	r4, r5, d0
 804d4be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 804d4c2:	4606      	mov	r6, r0
 804d4c4:	462b      	mov	r3, r5
 804d4c6:	b99a      	cbnz	r2, 804d4f0 <scalbn+0x38>
 804d4c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 804d4cc:	4323      	orrs	r3, r4
 804d4ce:	d036      	beq.n	804d53e <scalbn+0x86>
 804d4d0:	4b39      	ldr	r3, [pc, #228]	; (804d5b8 <scalbn+0x100>)
 804d4d2:	4629      	mov	r1, r5
 804d4d4:	ee10 0a10 	vmov	r0, s0
 804d4d8:	2200      	movs	r2, #0
 804d4da:	f7f3 f88d 	bl	80405f8 <__aeabi_dmul>
 804d4de:	4b37      	ldr	r3, [pc, #220]	; (804d5bc <scalbn+0x104>)
 804d4e0:	429e      	cmp	r6, r3
 804d4e2:	4604      	mov	r4, r0
 804d4e4:	460d      	mov	r5, r1
 804d4e6:	da10      	bge.n	804d50a <scalbn+0x52>
 804d4e8:	a32b      	add	r3, pc, #172	; (adr r3, 804d598 <scalbn+0xe0>)
 804d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d4ee:	e03a      	b.n	804d566 <scalbn+0xae>
 804d4f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 804d4f4:	428a      	cmp	r2, r1
 804d4f6:	d10c      	bne.n	804d512 <scalbn+0x5a>
 804d4f8:	ee10 2a10 	vmov	r2, s0
 804d4fc:	4620      	mov	r0, r4
 804d4fe:	4629      	mov	r1, r5
 804d500:	f7f2 fec4 	bl	804028c <__adddf3>
 804d504:	4604      	mov	r4, r0
 804d506:	460d      	mov	r5, r1
 804d508:	e019      	b.n	804d53e <scalbn+0x86>
 804d50a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 804d50e:	460b      	mov	r3, r1
 804d510:	3a36      	subs	r2, #54	; 0x36
 804d512:	4432      	add	r2, r6
 804d514:	f240 71fe 	movw	r1, #2046	; 0x7fe
 804d518:	428a      	cmp	r2, r1
 804d51a:	dd08      	ble.n	804d52e <scalbn+0x76>
 804d51c:	2d00      	cmp	r5, #0
 804d51e:	a120      	add	r1, pc, #128	; (adr r1, 804d5a0 <scalbn+0xe8>)
 804d520:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d524:	da1c      	bge.n	804d560 <scalbn+0xa8>
 804d526:	a120      	add	r1, pc, #128	; (adr r1, 804d5a8 <scalbn+0xf0>)
 804d528:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d52c:	e018      	b.n	804d560 <scalbn+0xa8>
 804d52e:	2a00      	cmp	r2, #0
 804d530:	dd08      	ble.n	804d544 <scalbn+0x8c>
 804d532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804d536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804d53a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 804d53e:	ec45 4b10 	vmov	d0, r4, r5
 804d542:	bd70      	pop	{r4, r5, r6, pc}
 804d544:	f112 0f35 	cmn.w	r2, #53	; 0x35
 804d548:	da19      	bge.n	804d57e <scalbn+0xc6>
 804d54a:	f24c 3350 	movw	r3, #50000	; 0xc350
 804d54e:	429e      	cmp	r6, r3
 804d550:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 804d554:	dd0a      	ble.n	804d56c <scalbn+0xb4>
 804d556:	a112      	add	r1, pc, #72	; (adr r1, 804d5a0 <scalbn+0xe8>)
 804d558:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d55c:	2b00      	cmp	r3, #0
 804d55e:	d1e2      	bne.n	804d526 <scalbn+0x6e>
 804d560:	a30f      	add	r3, pc, #60	; (adr r3, 804d5a0 <scalbn+0xe8>)
 804d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 804d566:	f7f3 f847 	bl	80405f8 <__aeabi_dmul>
 804d56a:	e7cb      	b.n	804d504 <scalbn+0x4c>
 804d56c:	a10a      	add	r1, pc, #40	; (adr r1, 804d598 <scalbn+0xe0>)
 804d56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d572:	2b00      	cmp	r3, #0
 804d574:	d0b8      	beq.n	804d4e8 <scalbn+0x30>
 804d576:	a10e      	add	r1, pc, #56	; (adr r1, 804d5b0 <scalbn+0xf8>)
 804d578:	e9d1 0100 	ldrd	r0, r1, [r1]
 804d57c:	e7b4      	b.n	804d4e8 <scalbn+0x30>
 804d57e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804d582:	3236      	adds	r2, #54	; 0x36
 804d584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 804d588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 804d58c:	4620      	mov	r0, r4
 804d58e:	4b0c      	ldr	r3, [pc, #48]	; (804d5c0 <scalbn+0x108>)
 804d590:	2200      	movs	r2, #0
 804d592:	e7e8      	b.n	804d566 <scalbn+0xae>
 804d594:	f3af 8000 	nop.w
 804d598:	c2f8f359 	.word	0xc2f8f359
 804d59c:	01a56e1f 	.word	0x01a56e1f
 804d5a0:	8800759c 	.word	0x8800759c
 804d5a4:	7e37e43c 	.word	0x7e37e43c
 804d5a8:	8800759c 	.word	0x8800759c
 804d5ac:	fe37e43c 	.word	0xfe37e43c
 804d5b0:	c2f8f359 	.word	0xc2f8f359
 804d5b4:	81a56e1f 	.word	0x81a56e1f
 804d5b8:	43500000 	.word	0x43500000
 804d5bc:	ffff3cb0 	.word	0xffff3cb0
 804d5c0:	3c900000 	.word	0x3c900000

0804d5c4 <_init>:
 804d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d5c6:	bf00      	nop
 804d5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804d5ca:	bc08      	pop	{r3}
 804d5cc:	469e      	mov	lr, r3
 804d5ce:	4770      	bx	lr

0804d5d0 <_fini>:
 804d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d5d2:	bf00      	nop
 804d5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804d5d6:	bc08      	pop	{r3}
 804d5d8:	469e      	mov	lr, r3
 804d5da:	4770      	bx	lr
